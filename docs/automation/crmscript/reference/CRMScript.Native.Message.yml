### YamlMime:ManagedReference
items:
- uid: CRMScript.Native.Message
  commentId: T:CRMScript.Native.Message
  id: Message
  langs:
  - crmscript
  children:
  - CRMScript.Native.Message.#ctor
  - CRMScript.Native.Message.addHeader(String,String)
  - CRMScript.Native.Message.convertInlineImages()
  - CRMScript.Native.Message.getAttachments()
  - CRMScript.Native.Message.getValue(String)
  - CRMScript.Native.Message.load(Integer)
  - CRMScript.Native.Message.save()
  - CRMScript.Native.Message.save(String)
  - CRMScript.Native.Message.save(String,Bool)
  - CRMScript.Native.Message.saveInvolved(String)
  - CRMScript.Native.Message.saveInvolved(Vector)
  - CRMScript.Native.Message.send(Vector,Vector,Vector)
  - CRMScript.Native.Message.send(Vector,Vector,Vector,Integer)
  - CRMScript.Native.Message.send(Vector,Vector,Vector,String)
  - CRMScript.Native.Message.send(Vector,Vector,Vector,String,String)
  - CRMScript.Native.Message.sendFacebook()
  - CRMScript.Native.Message.sendSms(Vector)
  - CRMScript.Native.Message.setAttachments(Vector)
  - CRMScript.Native.Message.setValue(String,String)
  - CRMScript.Native.Message.toParser(Parser)
  name: Message
  nameWithType: Message
  fullName: CRMScript.Native.Message
  type: Class
  summary: "\nRepresents a Service ticket message.\n"
  example: 
  - "\n<pre><code>Message m;\n\nm.load(2); // Loads message with id = 2\nm.setValue(&quot;emailHeader&quot;, &quot;Test&quot;);\nm.setValue(&quot;body&quot;, &quot;This is a test&quot;);\nm.save();</code></pre>\n"
- uid: CRMScript.Native.Message.#ctor
  commentId: M:CRMScript.Native.Message.#ctor
  id: '#ctor'
  so.intellisense: Void.Message
  langs:
  - crmscript
  name: Message()
  nameWithType: Message.#ctor
  fullName: CRMScript.Native.Message.#ctor
  type: Constructor
  summary: "\nInitializes a new instance of the Message class.\n"
  remarks: 
  syntax: 
    content: Message
  example: 
  - "\n<pre><code>Message m;\n\nm.load(2); // Loads message with id = 2\nm.setValue(&quot;emailHeader&quot;, &quot;Test&quot;);\nm.setValue(&quot;body&quot;, &quot;This is a test&quot;);\nm.save();</code></pre>\n"
- uid: CRMScript.Native.Message.addHeader(String,String)
  commentId: M:CRMScript.Native.Message.addHeader(String,String)
  id: 'addHeader(String,String)'
  so.intellisense: Message.addHeader
  so.version: 3.1.1b
  langs:
  - crmscript
  name: 'addHeader(String,String)'
  nameWithType: Message.addHeader(String,String)
  fullName: CRMScript.Native.Message.addHeader(String,String)
  type: Method
  summary: "\nAdds a header to the message. The headers will be shown at the view request page, listed at the message.\n"
  remarks: 
  syntax: 
    content: Void addHeader(String type, String value)
    parameters:
    - id: type
      type: CRMScript.Global.String
      description: "Type of header as a String, examples are To, Cc, SMS, Bcc"
    - id: value
      type: CRMScript.Global.String
      description: "The header to add as a String, common values are recipients of the message as a comma-separated String."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.convertInlineImages()
  commentId: M:CRMScript.Native.Message.convertInlineImages()
  id: 'convertInlineImages()'
  so.intellisense: Message.convertInlineImages
  so.version: 4.4.0
  langs:
  - crmscript
  name: 'convertInlineImages()'
  nameWithType: Message.convertInlineImages()
  fullName: CRMScript.Native.Message.convertInlineImages()
  type: Method
  summary: "\nConvert any inline images in the message from (cid: to normal http).\n"
  remarks: 
  syntax: 
    content: Void convertInlineImages()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.getAttachments()
  commentId: M:CRMScript.Native.Message.getAttachments()
  id: 'getAttachments()'
  so.intellisense: Message.getAttachments
  so.version: 3.1.8
  langs:
  - crmscript
  name: 'getAttachments()'
  nameWithType: Message.getAttachments()
  fullName: CRMScript.Native.Message.getAttachments()
  type: Method
  summary: "\nReturns an array of all the attachment IDs on the message.\n"
  remarks: 
  syntax: 
    content: Integer[] getAttachments()
    parameters: []
    return:
      type: CRMScript.Global.Integer[]
      description: "Array of attachment IDs."
  example: 
- uid: CRMScript.Native.Message.getValue(String)
  commentId: M:CRMScript.Native.Message.getValue(String)
  id: 'getValue(String)'
  so.intellisense: Message.getValue
  langs:
  - crmscript
  name: 'getValue(String)'
  nameWithType: Message.getValue(String)
  fullName: CRMScript.Native.Message.getValue(String)
  type: Method
  summary: "\nReturns the value a column.\n"
  remarks: "\nPossible columns:<ul><li>ticketId: Integer, The ticket this message is a child of.</li><li>customerId: If the message was created by email or from the customer center, this field will point to that customer. -1 if the message was created by an user</li><li>createdAt: Datetime when the message was created.</li><li>createdBy: Integer, The ID of the user who posted the message. The value 1 (system user) for externally posted messages.</li><li>type: String, The type of the message (plaintext/html).</li><li>searchTitle: A copy of the title of the ticket, for search optimisation and simpler reporting.</li><li>author: String, A string representing the author of the message. Could be a user's name, or a persons email address.</li><li>slevel: String, The securitylevel of the message (1 is internal, 2 is external).</li><li>messageId: String, The X-Message-Id header value from the email. Used for threading, i.e. connecting messages to existing tickets.</li><li>timeSpent: Integer, The time spent (minutes) for this message.</li><li>emailHeader: The email header is saved in this field as raw text	</li><li>debugInfo: The debug info for the message.</li><li>important: True if this message is important.</li><li>mailSorter: The name of the mail sorter used when the email was imported. Note: We must use name instead of id since the id&apos;s change every time one changes the mail sorter.</li><li>inlineImages: True if message contains inline images.</li><li>htmlBodyInlineConverted: True if the html_body has converted inline image links.</li><li>inlineConverted: True if the html_body has converted inline image links.</li><li>body: String, The textbody for the message.</li><li>bodyHtml: String, The HTML body for the message (if any).</li><li>x_... : Extra fields</li></ul>\n"
  syntax: 
    content: String getValue(String colName)
    parameters:
    - id: colName
      type: CRMScript.Global.String
      description: "Column name of the value."
    return:
      type: CRMScript.Global.String
      description: "A string value of the column."
  example: 
- uid: CRMScript.Native.Message.load(Integer)
  commentId: M:CRMScript.Native.Message.load(Integer)
  id: 'load(Integer)'
  so.intellisense: Message.load
  langs:
  - crmscript
  name: 'load(Integer)'
  nameWithType: Message.load(Integer)
  fullName: CRMScript.Native.Message.load(Integer)
  type: Method
  summary: "\nLoads the message with the given ID.\n"
  remarks: 
  syntax: 
    content: load(Integer id)
    parameters:
    - id: id
      type: CRMScript.Global.Integer
      description: "ID of message."
    return:
      type: CRMScript.Global.Bool
      description: "True if successful; otherwise, false."
  example: 
- uid: CRMScript.Native.Message.save()
  commentId: M:CRMScript.Native.Message.save()
  id: 'save()'
  so.intellisense: Message.save
  langs:
  - crmscript
  name: 'save()'
  nameWithType: Message.save()
  fullName: CRMScript.Native.Message.save()
  type: Method
  summary: "\nSaves a message and returns the database ID.\n"
  remarks: "\nYou can optionally add logging.\n"
  syntax: 
    content: Integer save()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description: "The database Id."
  example: 
- uid: CRMScript.Native.Message.save(String)
  commentId: M:CRMScript.Native.Message.save(String)
  id: 'save(String)'
  so.intellisense: Message.save
  langs:
  - crmscript
  name: 'save(String)'
  nameWithType: Message.save(String)
  fullName: CRMScript.Native.Message.save(String)
  type: Method
  summary: "\nSaves a message and returns the database ID.\n"
  remarks: "\nUse save() if you don't want to add logging.\n"
  syntax: 
    content: Integer save(String log)
    parameters:
    - id: log
      type: CRMScript.Global.String
      description: "Log entry to add to the ticket log that this message belongs to."
    return:
      type: CRMScript.Global.Integer
      description: "The database Id."
  example: 
- uid: CRMScript.Native.Message.save(String,Bool)
  commentId: M:CRMScript.Native.Message.save(String,Bool)
  id: 'save(String,Bool)'
  so.intellisense: Message.save
  so.version: 3.1.8
  langs:
  - crmscript
  name: 'save(String.Bool)'
  nameWithType: Message.save(String,Bool)
  fullName: CRMScript.Native.Message.save(String,Bool)
  type: Method
  summary: "\nSaves a message and returns the database ID.\n"
  remarks: "\nUse save() if you don't want to add logging.\n"
  syntax: 
    content: Integer save(String log, Bool noNewInfo)
    parameters:
    - id: log
      type: CRMScript.Global.String
      description: "Log entry to add to the ticket log that this message belongs to."
    - id: noNewInfo
      type: CRMScript.Global.Bool
      description: "Used in combination with log. Set it to false if your changes should turn the readStatus on ticket yellow (if the readStatus is green)."
    return:
      type: CRMScript.Global.Integer
      description: "The database Id."
  example: 
- uid: CRMScript.Native.Message.saveInvolved(String)
  commentId: M:CRMScript.Native.Message.saveInvolved(String)
  id: 'saveInvolved(String)'
  so.intellisense: Message.saveInvolved
  so.version: 3.1.1
  langs:
  - crmscript
  name: 'saveInvolved(String)'
  nameWithType: Message.saveInvolved(String)
  fullName: CRMScript.Native.Message.saveInvolved(String)
  type: Method
  summary: "\nSaves the email address of a single recipient of a message.\n"
  remarks: "\nUse save(Vector) to save a collection of addresses.\n"
  syntax: 
    content: Void saveInvolved(String emailAddress)
    parameters:
    - id: emailAddress
      type: CRMScript.Global.String
      description: "A single email address for 1 recipient."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.saveInvolved(Vector)
  commentId: M:CRMScript.Native.Message.saveInvolved(Vector)
  id: 'saveInvolved(Vector)'
  so.intellisense: Message.saveInvolved
  so.version: 3.1.1
  langs:
  - crmscript
  name: 'saveInvolved(Vector)'
  nameWithType: Message.saveInvolved(Vector)
  fullName: CRMScript.Native.Message.saveInvolved(Vector)
  type: Method
  summary: "\nSaves the email address of a single recipient of a message\n"
  remarks: "\nUse save(String) to save a single email address.\n"
  syntax: 
    content: Void saveInvolved(Vector emailAddresses)
    parameters:
    - id: emailAddresses
      type: CRMScript.Native.Vector
      description: "A collection of email addresses for multiple recipients."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.send(Vector,Vector,Vector)
  commentId: M:CRMScript.Native.Message.send(Vector,Vector,Vector)
  id: 'send(Vector,Vector,Vector)'
  so.intellisense: Message.send
  so.version: 3.0.10
  langs:
  - crmscript
  name: 'send(Vector,Vector,Vector)'
  nameWithType: Message.send(Vector,Vector,Vector)
  fullName: CRMScript.Native.Message.send(Vector,Vector,Vector)
  type: Method
  summary: "\nSends an email version of the message to the main contacts on the parent ticket.\n"
  remarks: "\nUse one of the other variants if you want to merge with reply template or set subject and a heading for the body part.\n"
  syntax: 
    content: Bool send(Vector to, Vector cc, Vector bcc)
    parameters:
    - id: to
      type: CRMScript.Native.Vector
      description: "The to-recipients in the email"
    - id: cc
      type: CRMScript.Native.Vector
      description: "The cc-recipients in the email"
    - id: bcc
      type: CRMScript.Native.Vector
      description: "The bcc-recipients in the email."
    return:
      type: CRMScript.Global.Bool
      description: "True if everything is OK; otherwise, false."
  example: 
- uid: CRMScript.Native.Message.send(Vector,Vector,Vector,Integer)
  commentId: M:CRMScript.Native.Message.send(Vector,Vector,Vector,Integer
  id: 'send(Vector,Vector,Vector,Integer)'
  so.intellisense: Message.send
  so.version: 4.5.1
  langs:
  - crmscript
  name: 'send(Vector,Vector,Vector,Integer)'
  nameWithType: Message.send(Vector,Vector,Vector,Integer)
  fullName: CRMScript.Native.Message.send(Vector,Vector,Vector,Integer)
  type: Method
  summary: "\nSends an email version of the message to the main contacts on the parent ticket. Merges with reply template in the settings of the submitted category ID.\n"
  remarks: 
  syntax: 
    content: Bool send(Vector to, Vector cc, Vector bcc, Integer categoryId)
    parameters:
    - id: to
      type: CRMScript.Native.Vector
      description: "The to-recipients in the email"
    - id: cc
      type: CRMScript.Native.Vector
      description: "The cc-recipients in the email"
    - id: bcc
      type: CRMScript.Native.Vector
      description: "The bcc-recipients in the email"
    - id: categoryId
      type: CRMScript.Global.Integer
      description: "The ID of the category to check for reply template merge. Alternative to subject."
    return:
      type: CRMScript.Global.Bool
      description: "True if everything is OK; otherwise, false."
  example: 
- uid: CRMScript.Native.Message.send(Vector,Vector,Vector,String)
  commentId: M:CRMScript.Native.Message.send(Vector,Vector,Vector,String)
  id: 'send(Vector,Vector,Vector,String)'
  so.intellisense: Message.send
  so.version: 3.1.8
  langs:
  - crmscript
  name: 'send(Vector,Vector,Vector,String)'
  nameWithType: Message.send(Vector,Vector,Vector,String)
  fullName: CRMScript.Native.Message.send(Vector,Vector,Vector,String)
  type: Method
  summary: "\nSends an email version of the message to the main contacts on the parent ticket using the given subject\n"
  remarks: "\nYou can optionally provide a heading for the body part.\n"
  syntax: 
    content: Bool send(Vector to, Vector cc, Vector bcc, String subject)
    parameters:
    - id: to
      type: CRMScript.Native.Vector
      description: "The to-recipients in the email"
    - id: cc
      type: CRMScript.Native.Vector
      description: "The cc-recipients in the email"
    - id: bcc
      type: CRMScript.Native.Vector
      description: "The bcc-recipients in the email"
    - id: subject
      type: CRMScript.Global.String
      description: "The subject in the email. Alternative to categoryId."
    return:
      type: CRMScript.Global.Bool
      description: "True if everything is OK; otherwise, false."
  example: 
- uid: CRMScript.Native.Message.send(Vector,Vector,Vector,String,String)
  commentId: M:CRMScript.Native.Message.send(Vector,Vector,Vector,String,String)
  id: 'send(Vector,Vector,Vector,String,String)'
  so.intellisense: Message.send
  so.version: 3.1.8
  langs:
  - crmscript
  name: 'send(Vector,Vector,Vector,String,String)'
  nameWithType: Message.send(Vector,Vector,Vector,String,String)
  fullName: CRMScript.Native.Message.send(Vector,Vector,Vector,String,String)
  type: Method
  summary: "\nSends an email version of the message to the main contacts on the parent ticket using the given subject, and a given heading for the body part.\n"
  remarks: "\nThe body heading may be empty for no heading, or null for default heading (same as not using this parameter).\n"
  syntax: 
    content: Bool send(Vector to, Vector cc, Vector bcc, String subject, String bodyHeading)
    parameters:
    - id: to
      type: CRMScript.Native.Vector
      description: "The to-recipients in the email"
    - id: cc
      type: CRMScript.Native.Vector
      description: "The cc-recipients in the email"
    - id: bcc
      type: CRMScript.Native.Vector
      description: "The bcc-recipients in the email"
    - id: subject
      type: CRMScript.Global.String
      description: "The subject in the email. Alternative to categoryId."
    - id: bodyHeading
      type: CRMScript.Global.String
      description: "The body heading. Used with subject."
    return:
      type: CRMScript.Global.Bool
      description: "True if everything is OK; otherwise, false."
  example: 
- uid: CRMScript.Native.Message.sendFacebook()
  commentId: M:CRMScript.Native.Message.sendFacebook()
  id: 'sendFacebook()'
  so.intellisense: Message.sendFacebook
  so.version: 7.9.0
  langs:
  - crmscript
  name: 'sendFacebook()'
  nameWithType: Message.sendFacebook()
  fullName: CRMScript.Native.Message.sendFacebook()
  type: Method
  summary: "\nPosts message to Facebook\n"
  remarks: 
  syntax: 
    content: Void sendFacebook()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.sendSms(Vector)
  commentId: M:CRMScript.Native.Message.sendSms(Vector)
  id: 'sendSms(Vector)'
  so.intellisense: Message.sendSms
  so.version: 3.1.1b
  langs:
  - crmscript
  name: 'sendSms(Vector)'
  nameWithType: Message.sendSms(Vector)
  fullName: CRMScript.Native.Message.sendSms(Vector)
  type: Method
  summary: "\nSends an sms-version of the message to the numbers in the vector.\n"
  remarks: 
  syntax: 
    content: Bool sendSms(Vector to)
    parameters:
    - id: to
      type: CRMScript.Native.Vector
      description: "The numbers to send the message to."
    return:
      type: CRMScript.Global.Bool
      description: "True if successful; otherwise, false."
  example: 
- uid: CRMScript.Native.Message.setAttachments(Vector)
  commentId: M:CRMScript.Native.Message.setAttachments(Vector)
  id: 'setAttachments(Vector)'
  so.intellisense: Message.setAttachments
  so.version: 3.1.1b
  langs:
  - crmscript
  name: 'setAttachments(Vector)'
  nameWithType: Message.setAttachments(Vector)
  fullName: CRMScript.Native.Message.setAttachments(Vector)
  type: Method
  summary: "\nConnects the attachments to the message.\n"
  remarks: "\nYou must do a message.save before message.setAttachments.\n"
  syntax: 
    content: Void setAttachments(Vector ids)
    parameters:
    - id: ids
      type: CRMScript.Native.Vector
      description: "The IDs of the attachments."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.setValue(String,String)
  commentId: M:CRMScript.Native.Message.setValue(String,String)
  id: 'setValue(String,String)'
  so.intellisense: Message.setValue
  langs:
  - crmscript
  name: 'setValue(String,String)'
  nameWithType: Message.setValue(String,String)
  fullName: CRMScript.Native.Message.setValue(String,String)
  type: Method
  summary: "\nSets the value of column colName to the given value\n"
  remarks: "\nPossible columns:<ul><li>ticketId: Integer, The ticket this message is a child of.</li><li>customerId: If the message was created by email or from the customer center, this field will point to that customer. -1 if the message was created by an user</li><li>createdAt: Datetime when the message was created.</li><li>createdBy: Integer, The ID of the user who posted the message. The value 1 (system user) for externally posted messages.</li><li>type: String, The type of the message (plaintext/html).</li><li>author: String, A string representing the author of the message. Could be a user's name, or a persons email address.</li><li>slevel: String, The securitylevel of the message (1 is internal, 2 is external).</li><li>messageId: String, The X-Message-Id header value from the email. Used for threading, i.e. connecting messages to existing tickets.</li><li>timeSpent: Integer, The time spent (minutes) for this message.</li><li>emailHeader: The email header is saved in this field as raw text	</li><li>debugInfo: The debug info for the message.</li><li>important: True if this message is important.</li><li>mailSorter: The name of the mail sorter used when the email was imported. Note: We must use name instead of id since the id&apos;s change every time one changes the mail sorter.</li><li>inlineImages: True if message contains inline images.</li><li>body: String, The textbody for the message.</li><li>bodyHtml: String, The HTML body for the message (if any).</li><li>x_... : Extra fields</li></ul>\n"
  syntax: 
    content: Void setValue(String colName, String value)
    parameters:
    - id: colName
      type: CRMScript.Global.String
      description: "Column name of the value"
    - id: value
      type: CRMScript.Global.String
      description: "Value that should be stored in the column."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.Message.toParser(Parser)
  commentId: M:CRMScript.Native.Message.toParser(Parser)
  id: 'toParser(Parser)'
  so.intellisense: Message.toParser
  so.version: 4.2.0
  langs:
  - crmscript
  name: 'toParser(Parser)'
  nameWithType: Message.toParser(Parser)
  fullName: CRMScript.Native.Message.toParser(Parser)
  type: Method
  summary: "\nThis function loads many fields of the message to the input parser.\n"
  remarks: "\nThe fields will be loaded as message.value<ul><li>message.id, The ID of the message</li><li>message.slevelInteger, The security level of the message. See <xref href=\"CRMScript.NetServer.TicketSecurityLevel\" data-throw-if-not-resolved=\"false\"></xref>.</li><li>message.slevel, The security level of the message as a String, according to the active user's language.</li><li>message.createdAt, The datetime when the message is created in format 12. jan 1998, kl. 11:23.</li><li>message.createdAtRaw, The datetime when the message is created in format 1998-01-12 11:23:15</li><li>message.author,  The author of the message</li><li>message.bodyHtml, The HTML body of the message</li><li>message.messageCategory, The message category. See <xref href=\"CRMScript.NetServer.TicketMessageCategory\" data-throw-if-not-resolved=\"false\"></xref>.</li><li>message.body, The body of the message, if this is a plaintext message, this text will be returned with activated links</li><li>message.bodyPlain, The body of the message exactly as saved in database.</li><li>message.header, The message header</li><li>message.mailSorter, If this message is a recieved mail, the this is the name of the mail filter that took it.</li><li>message.x_myextrafield, The value of the extrafield</li></ul>\n"
  syntax: 
    content: Void toParser(Parser parser)
    parameters:
    - id: parser
      type: CRMScript.Native.Parser
      description: "The parser that the message values is loaded into."
  example: 
references:
- uid: CRMScript.Native.Message
  commentId: T:CRMScript.Native.Message
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: CRMScript.Native.Message
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.Global.Integer[]
  isExternal: true
  name: Integer[]
  nameWithType: Integer[]
  fullName: CRMScript.Global.Integer[]
  spec.crmscript:
  - uid: CRMScript.Global.Integer
    name: Integer
    nameWithType: Integer
    fullName: CRMScript.Global.Integer
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.Native.Vector
  commentId: T:CRMScript.Native.Vector
  isExternal: true
  name: Vector
  nameWithType: Vector
  fullName: CRMScript.Native.Vector
- uid: CRMScript.Global.Bool
  commentId: T:CRMScript.Global.Bool
  isExternal: true
  name: Bool
  nameWithType: Bool
  fullName: CRMScript.Global.Bool
- uid: CRMScript.Global.Void
  commentId: T:CRMScript.Global.Void
  isExternal: true
  name: Void
  nameWithType: Void
  fullName: CRMScript.Global.Void
- uid: CRMScript.Native.Parser
  commentId: T:CRMScript.Native.Parser
  isExternal: true
  name: Parser
  nameWithType: Parser
  fullName: CRMScript.Native.Parser
- uid: CRMScript.NetServer.TicketSecurityLevel
  commentId: T:CRMScript.NetServer.TicketSecurityLevel
  isExternal: true
  name: TicketSecurityLevel
  nameWithType: TicketSecurityLevel
  fullName: CRMScript.NetServer.TicketSecurityLevel
- uid: CRMScript.NetServer.TicketReadStatus
  commentId: T:CRMScript.NetServer.TicketReadStatus
  isExternal: true
  name: TicketReadStatus
  nameWithType: TicketReadStatus
  fullName: CRMScript.NetServer.TicketReadStatus
- uid: CRMScript.NetServer.TicketMessageCategory
  commentId: T:CRMScript.NetServer.TicketMessageCategory
  isExternal: true
  name: TicketMessageCategory
  nameWithType: TicketMessageCategory
  fullName: CRMScript.NetServer.TicketMessageCategory