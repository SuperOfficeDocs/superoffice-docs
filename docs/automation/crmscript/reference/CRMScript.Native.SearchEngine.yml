### YamlMime:ManagedReference
items:
- uid: CRMScript.Native.SearchEngine
  commentId: T:CRMScript.Native.SearchEngine
  id: SearchEngine
  langs:
  - crmscript
  children:
  - CRMScript.Native.SearchEngine.#ctor
  - CRMScript.Native.SearchEngine.addComparison(String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addComparison(String,String,String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addCriteria(String,String,String)
  - CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addData(String,String)
  - CRMScript.Native.SearchEngine.addDataField(String,String)
  - CRMScript.Native.SearchEngine.addDataField(String,String,String)
  - CRMScript.Native.SearchEngine.addField(String)
  - CRMScript.Native.SearchEngine.addField(String,String)
  - CRMScript.Native.SearchEngine.addFields(String,String)
  - CRMScript.Native.SearchEngine.addHaving(String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addHaving(String,String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addJoinCriteria(String,String,String,String,Integer)
  - CRMScript.Native.SearchEngine.addOrder(String,Bool)
  - CRMScript.Native.SearchEngine.addOrder(String,String,Bool)
  - CRMScript.Native.SearchEngine.buildSql()
  - CRMScript.Native.SearchEngine.buildSql(String)
  - CRMScript.Native.SearchEngine.bypassNetServer(Bool)
  - CRMScript.Native.SearchEngine.countColumns()
  - CRMScript.Native.SearchEngine.countRows()
  - CRMScript.Native.SearchEngine.delete()
  - CRMScript.Native.SearchEngine.eof()
  - CRMScript.Native.SearchEngine.execute()
  - CRMScript.Native.SearchEngine.executeHTMLTable()
  - CRMScript.Native.SearchEngine.executeInto(StringMatrix)
  - CRMScript.Native.SearchEngine.executeJSON()
  - CRMScript.Native.SearchEngine.executeTextTable()
  - CRMScript.Native.SearchEngine.executeToJSONBuilder(JSONBuilder,String,String)
  - CRMScript.Native.SearchEngine.findAlternativeFields(String)
  - CRMScript.Native.SearchEngine.findRelations(String,Bool)
  - CRMScript.Native.SearchEngine.first()
  - CRMScript.Native.SearchEngine.getField(Integer)
  - CRMScript.Native.SearchEngine.getField(String)
  - CRMScript.Native.SearchEngine.getField(String,String)
  - CRMScript.Native.SearchEngine.getFieldsJSON()
  - CRMScript.Native.SearchEngine.insert()
  - CRMScript.Native.SearchEngine.next()
  - CRMScript.Native.SearchEngine.select()
  - CRMScript.Native.SearchEngine.setCallBack(String)
  - CRMScript.Native.SearchEngine.setDBDistinct(Bool)
  - CRMScript.Native.SearchEngine.setDistinct(String)
  - CRMScript.Native.SearchEngine.setGroup(Bool)
  - CRMScript.Native.SearchEngine.setLimit(Integer)
  - CRMScript.Native.SearchEngine.update()
  name: SearchEngine
  nameWithType: SearchEngine
  fullName: CRMScript.Native.SearchEngine
  type: Class
  summary: "\nA tool for building up SQL queries, by adding fields, criteria, and data. The fields must be given on the following form: starttablename.fieldname, for example &quot;ticket.title&quot;. For tables that have foreign keys to other tables, you can reach them with the following notation: starttablename.fieldname.fieldname For example, the firstname of the primary customer of a ticket is: &quot;ticket.cust_id.firstname&quot;. The company name of the primary customer of a ticket is: &quot;ticket.cust_id.company.name&quot;.<p></p>\nMake sure that all fields you use that start with the same table, for example, ticket, or else you will receive a big join that you probably do not want.<p></p>\nFor many-to-many relations there is a special notation: table1.(table2-&gt;field2a).field2b Where field2a is a field in table2 that has a foreign key to table1.<p></p>\nFrom CS version 7, the aggregate functions are no longer supported, since the query is sent to NetServer instead of directly to the database. It is possible to circumvent this by setting the reg_id 235 to 1 and explicitly use bypassNetserver(true) in the SearchEngine. Be aware of any security implications this might cause.\n"
  example: 
  - "\n<pre><code>ticket.(ticket_customers->ticket_id).cust_id</code></pre>\n"
- uid: CRMScript.Native.SearchEngine.#ctor
  commentId: M:CRMScript.Native.SearchEngine.#ctor
  id: '#ctor'
  so.intellisense: Void.SearchEngine
  langs:
  - crmscript
  name: SearchEngine()
  nameWithType: SearchEngine.#ctor
  fullName: CRMScript.Native.SearchEngine.#ctor
  type: Constructor
  summary: "\nInitializes a new instance of the SearchEngine class.\n"
  remarks: 
  syntax: 
    content: SearchEngine
  example: 
- uid: CRMScript.Native.SearchEngine.addComparison(String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addComparison(String,String,String,String,Integer)
  id: 'addComparison(String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addComparison
  langs:
  - crmscript
  name: 'addComparison(String,String,String,String,Integer)'
  nameWithType: SearchEngine.addComparison(String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addComparison(String,String,String,String,Integer)
  type: Method
  summary: "\nAdds a field-comparison criterion that compares 2 database fields to a database query.<p></p>\nYou can optionally add functions to be applied to the 2 fields.\n"
  remarks: "\n<h3>Row operators</h3><table><thead><tr><th>Value</th><th>Logical operator</th><th>Expression</th><th>Result</th></tr></thead><tbody><tr><td>OperatorAnd</td><td>AND</td><td>A &amp;&amp; B</td><td>Only rows matching both conditions</td></tr><tr><td>OperatorNotAnd</td><td>NAND</td><td>!(A &amp;&amp; B)</td><td>Rows matching 0 or 1 condition but not both</td></tr><tr><td>OperatorOr</td><td>OR</td><td>A || B</td><td>Rows matching either condition (or both)</td></tr><tr><td>OperatorNotOr</td><td>NOR</td><td>!(A || B)</td><td>Only rows matching no conditions</td></tr></tbody></table><h3>Comparison operators</h3><table><thead><tr><th>Value</th><th>Same as</th><th>Result</th></tr></thead><tbody><tr><td>OperatorEquals</td><td>==</td><td>values match</td></tr><tr><td>OperatorNotEquals</td><td>!=</td><td>values don't match</td></tr><tr><td>OperatorLt</td><td>&lt;</td><td>value less than</td></tr><tr><td>OperatorLte</td><td>&lt;=</td><td>value less than or equal</td></tr><tr><td>OperatorGt</td><td>&gt;</td><td>value greater than</td></tr><tr><td>OperatorGte</td><td>&gt;=</td><td>value greater than or equal</td></tr><tr><td>OperatorIs</td><td></td><td>values of the same type</td></tr><tr><td>OperatorIsNot</td><td></td><td>values of different types</td></tr><tr><td>OperatorLike</td><td></td><td>pattern found in string</td></tr><tr><td>OperatorNotLike</td><td></td><td>pattern not found in string</td></tr><tr><td>OperatorContains</td><td></td><td>string is present</td></tr><tr><td>OperatorBeginsWith</td><td></td><td>string starts with</td></tr><tr><td>OperatorEndsWith</td><td></td><td>string ends with</td></tr><tr><td>OperatorIn</td><td></td><td>column has entries in table</td></tr></tbody></table>\n"
  syntax: 
    content: Void addComparisonSearchEngine.addComparison(String field1, String compOperator, String field2, String rowOperator, Integer priority)
    parameters:
    - id: field1
      type: CRMScript.Global.String
      description: "The field to compare to field2"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: field2
      type: CRMScript.Global.String
      description: 
    - id: rowOperator
      type: CRMScript.Global.String
      description: "Operator for combining this and the next criterion"
    - id: priority
      type: CRMScript.Global.Integer
      description: "A number. All criteria with the same number will be placed inside the same brackets."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addComparison(String,String,String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addComparison(String,String,String,String,String,String,Integer)
  id: 'addComparison(String,String,String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addComparison
  langs:
  - crmscript
  name: 'addComparison(String,String,String,String,String,String,Integer)'
  nameWithType: SearchEngine.addComparison(String,String,String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addComparison(String,String,String,String,String,String,Integer)
  type: Method
  summary: "\nAdds a field-comparison criterion that compares 2 database fields to a database query with functions to be applied to the 2 fields.\n"
  remarks: "\n<h3>Functions</h3><table><thead><tr><th>Function</th><th>Other name</th><th>Applies to</th><th>bypassNetServer</th><th>Description</th></tr></thead><tbody><tr><td>avg</td><td>FuncAvg</td><td>Integer, Float</td><td>yes</td><td>aggregate, the average value of a column</td></tr><tr><td>count</td><td>FuncCount</td><td>Integer, Float</td><td>yes</td><td>aggregate, the number of rows matching cond.</td></tr><tr><td>sum</td><td>FuncSum</td><td>Integer, Float</td><td>yes</td><td>aggregate, the total sum of a column</td></tr><tr><td>max</td><td>FuncMax</td><td>Integer, Float</td><td>yes</td><td>aggregate, the largest value of a column</td></tr><tr><td>min</td><td>FuncMin</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>hour</td><td>FuncHour</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>wday</td><td>FuncWDay</td><td>Date, DateTime</td><td></td><td></td></tr><tr><td>upper</td><td>FuncUpper</td><td>String</td><td></td><td></td></tr><tr><td>lower</td><td>FuncLower</td><td>String</td><td></td><td></td></tr></tbody></table><h3>Row operators</h3><table><thead><tr><th>Value</th><th>Logical operator</th><th>Expression</th><th>Result</th></tr></thead><tbody><tr><td>OperatorAnd</td><td>AND</td><td>A &amp;&amp; B</td><td>Only rows matching both conditions</td></tr><tr><td>OperatorNotAnd</td><td>NAND</td><td>!(A &amp;&amp; B)</td><td>Rows matching 0 or 1 condition but not both</td></tr><tr><td>OperatorOr</td><td>OR</td><td>A || B</td><td>Rows matching either condition (or both)</td></tr><tr><td>OperatorNotOr</td><td>NOR</td><td>!(A || B)</td><td>Only rows matching no conditions</td></tr></tbody></table><h3>Comparison operators</h3><table><thead><tr><th>Value</th><th>Same as</th><th>Result</th></tr></thead><tbody><tr><td>OperatorEquals</td><td>==</td><td>values match</td></tr><tr><td>OperatorNotEquals</td><td>!=</td><td>values don't match</td></tr><tr><td>OperatorLt</td><td>&lt;</td><td>value less than</td></tr><tr><td>OperatorLte</td><td>&lt;=</td><td>value less than or equal</td></tr><tr><td>OperatorGt</td><td>&gt;</td><td>value greater than</td></tr><tr><td>OperatorGte</td><td>&gt;=</td><td>value greater than or equal</td></tr><tr><td>OperatorIs</td><td></td><td>values of the same type</td></tr><tr><td>OperatorIsNot</td><td></td><td>values of different types</td></tr><tr><td>OperatorLike</td><td></td><td>pattern found in string</td></tr><tr><td>OperatorNotLike</td><td></td><td>pattern not found in string</td></tr><tr><td>OperatorContains</td><td></td><td>string is present</td></tr><tr><td>OperatorBeginsWith</td><td></td><td>string starts with</td></tr><tr><td>OperatorEndsWith</td><td></td><td>string ends with</td></tr><tr><td>OperatorIn</td><td></td><td>column has entries in table</td></tr></tbody></table>\n"
  syntax: 
    content: Void addComparisonSearchEngine.addComparison(String field1, String func1, String compOperator, String field2, String func2, String rowOperator, Integer priority)
    parameters:
    - id: field1
      type: CRMScript.Global.String
      description: "The field to compare to field2"
    - id: func1
      type: CRMScript.Global.String
      description: "Optional. The function to use on field1"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: field2
      type: CRMScript.Global.String
      description: 
    - id: func2
      type: CRMScript.Global.String
      description: "Optional. The function to use on field2"
    - id: rowOperator
      type: CRMScript.Global.String
      description: "Operator for combining this and the next criterion"
    - id: priority
      type: CRMScript.Global.Integer
      description: "A number. All criteria with the same number will be placed inside the same brackets."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addCriteria(String,String,String)
  commentId: M:CRMScript.Native.SearchEngine.addCriteria(String,String,String)
  id: 'addCriteria(String,String,String)'
  so.intellisense: SearchEngine.addCriteria
  so.version: 7.1.1
  langs:
  - crmscript
  name: 'addCriteria(String,String,String)'
  nameWithType: SearchEngine.addCriteria(String,String,String)
  fullName: CRMScript.Native.SearchEngine.addCriteria(String,String,String)
  type: Method
  summary: "\nAdds a criterion on a database field to the database query<p></p>\nYou can optionally add a row operator, priority, and function to be applied to the field.\n"
  remarks: "\n<h3>Comparison operators</h3><table><thead><tr><th>Value</th><th>Same as</th><th>Result</th></tr></thead><tbody><tr><td>OperatorEquals</td><td>==</td><td>values match</td></tr><tr><td>OperatorNotEquals</td><td>!=</td><td>values don't match</td></tr><tr><td>OperatorLt</td><td>&lt;</td><td>value less than</td></tr><tr><td>OperatorLte</td><td>&lt;=</td><td>value less than or equal</td></tr><tr><td>OperatorGt</td><td>&gt;</td><td>value greater than</td></tr><tr><td>OperatorGte</td><td>&gt;=</td><td>value greater than or equal</td></tr><tr><td>OperatorIs</td><td></td><td>values of the same type</td></tr><tr><td>OperatorIsNot</td><td></td><td>values of different types</td></tr><tr><td>OperatorLike</td><td></td><td>pattern found in string</td></tr><tr><td>OperatorNotLike</td><td></td><td>pattern not found in string</td></tr><tr><td>OperatorContains</td><td></td><td>string is present</td></tr><tr><td>OperatorBeginsWith</td><td></td><td>string starts with</td></tr><tr><td>OperatorEndsWith</td><td></td><td>string ends with</td></tr><tr><td>OperatorIn</td><td></td><td>column has entries in table</td></tr></tbody></table>\n"
  syntax: 
    content: Void addCriteria(String field, String compOperator, String value)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: value
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.Global.Void
- uid: CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,Integer)
  id: 'addCriteria(String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addCriteria
  langs:
  - crmscript
  name: 'addCriteria(String,String,String,String,Integer)'
  nameWithType: SearchEngine.addCriteria(String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,Integer)
  type: Method
  summary: "\nAdds a criterion on a database field to the database query<p></p>\nYou can optionally add a function to be applied to the field.\n"
  remarks: "\n<h3>Row operators</h3><table><thead><tr><th>Value</th><th>Logical operator</th><th>Expression</th><th>Result</th></tr></thead><tbody><tr><td>OperatorAnd</td><td>AND</td><td>A &amp;&amp; B</td><td>Only rows matching both conditions</td></tr><tr><td>OperatorNotAnd</td><td>NAND</td><td>!(A &amp;&amp; B)</td><td>Rows matching 0 or 1 condition but not both</td></tr><tr><td>OperatorOr</td><td>OR</td><td>A || B</td><td>Rows matching either condition (or both)</td></tr><tr><td>OperatorNotOr</td><td>NOR</td><td>!(A || B)</td><td>Only rows matching no conditions</td></tr></tbody></table><h3>Comparison operators</h3><table><thead><tr><th>Value</th><th>Same as</th><th>Result</th></tr></thead><tbody><tr><td>OperatorEquals</td><td>==</td><td>values match</td></tr><tr><td>OperatorNotEquals</td><td>!=</td><td>values don't match</td></tr><tr><td>OperatorLt</td><td>&lt;</td><td>value less than</td></tr><tr><td>OperatorLte</td><td>&lt;=</td><td>value less than or equal</td></tr><tr><td>OperatorGt</td><td>&gt;</td><td>value greater than</td></tr><tr><td>OperatorGte</td><td>&gt;=</td><td>value greater than or equal</td></tr><tr><td>OperatorIs</td><td></td><td>values of the same type</td></tr><tr><td>OperatorIsNot</td><td></td><td>values of different types</td></tr><tr><td>OperatorLike</td><td></td><td>pattern found in string</td></tr><tr><td>OperatorNotLike</td><td></td><td>pattern not found in string</td></tr><tr><td>OperatorContains</td><td></td><td>string is present</td></tr><tr><td>OperatorBeginsWith</td><td></td><td>string starts with</td></tr><tr><td>OperatorEndsWith</td><td></td><td>string ends with</td></tr><tr><td>OperatorIn</td><td></td><td>column has entries in table</td></tr></tbody></table>\n"
  syntax: 
    content: Void addCriteria(String field, String compOperator, String value, String rowOperator, Integer priority)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: value
      type: CRMScript.Global.String
      description: 
    - id: rowOperator
      type: CRMScript.Global.String
      description: "Operator for combining this and the next criterion"
    - id: priority
      type: CRMScript.Global.Integer
      description: "A number. All criteria with the same number will be placed inside the same brackets."
    return:
      type: CRMScript.Global.Void
- uid: CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,String,Integer)
  id: 'addCriteria(String,String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addCriteria
  langs:
  - crmscript
  name: 'addCriteria(String,String,String,String,String,Integer)'
  nameWithType: SearchEngine.addCriteria(String,String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addCriteria(String,String,String,String,String,Integer)
  type: Method
  summary: "\nAdds a criterion on a database field to the database query.\n"
  remarks: "\n<h3>Functions</h3><table><thead><tr><th>Function</th><th>Other name</th><th>Applies to</th><th>bypassNetServer</th><th>Description</th></tr></thead><tbody><tr><td>avg</td><td>FuncAvg</td><td>Integer, Float</td><td>yes</td><td>aggregate, the average value of a column</td></tr><tr><td>count</td><td>FuncCount</td><td>Integer, Float</td><td>yes</td><td>aggregate, the number of rows matching cond.</td></tr><tr><td>sum</td><td>FuncSum</td><td>Integer, Float</td><td>yes</td><td>aggregate, the total sum of a column</td></tr><tr><td>max</td><td>FuncMax</td><td>Integer, Float</td><td>yes</td><td>aggregate, the largest value of a column</td></tr><tr><td>min</td><td>FuncMin</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>hour</td><td>FuncHour</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>wday</td><td>FuncWDay</td><td>Date, DateTime</td><td></td><td></td></tr><tr><td>upper</td><td>FuncUpper</td><td>String</td><td></td><td></td></tr><tr><td>lower</td><td>FuncLower</td><td>String</td><td></td><td></td></tr></tbody></table><h3>Row operators</h3><table><thead><tr><th>Value</th><th>Logical operator</th><th>Expression</th><th>Result</th></tr></thead><tbody><tr><td>OperatorAnd</td><td>AND</td><td>A &amp;&amp; B</td><td>Only rows matching both conditions</td></tr><tr><td>OperatorNotAnd</td><td>NAND</td><td>!(A &amp;&amp; B)</td><td>Rows matching 0 or 1 condition but not both</td></tr><tr><td>OperatorOr</td><td>OR</td><td>A || B</td><td>Rows matching either condition (or both)</td></tr><tr><td>OperatorNotOr</td><td>NOR</td><td>!(A || B)</td><td>Only rows matching no conditions</td></tr></tbody></table><h3>Comparison operators</h3><table><thead><tr><th>Value</th><th>Same as</th><th>Result</th></tr></thead><tbody><tr><td>OperatorEquals</td><td>==</td><td>values match</td></tr><tr><td>OperatorNotEquals</td><td>!=</td><td>values don't match</td></tr><tr><td>OperatorLt</td><td>&lt;</td><td>value less than</td></tr><tr><td>OperatorLte</td><td>&lt;=</td><td>value less than or equal</td></tr><tr><td>OperatorGt</td><td>&gt;</td><td>value greater than</td></tr><tr><td>OperatorGte</td><td>&gt;=</td><td>value greater than or equal</td></tr><tr><td>OperatorIs</td><td></td><td>values of the same type</td></tr><tr><td>OperatorIsNot</td><td></td><td>values of different types</td></tr><tr><td>OperatorLike</td><td></td><td>pattern found in string</td></tr><tr><td>OperatorNotLike</td><td></td><td>pattern not found in string</td></tr><tr><td>OperatorContains</td><td></td><td>string is present</td></tr><tr><td>OperatorBeginsWith</td><td></td><td>string starts with</td></tr><tr><td>OperatorEndsWith</td><td></td><td>string ends with</td></tr><tr><td>OperatorIn</td><td></td><td>column has entries in table</td></tr></tbody></table>\n"
  syntax: 
    content: Void addCriteria(String field, String function, String compOperator, String value, String rowOperator, Integer priority)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: function
      type: CRMScript.Global.String
      description: "The function to use on field"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: value
      type: CRMScript.Global.String
      description: 
    - id: rowOperator
      type: CRMScript.Global.String
      description: "Operator for combining this and the next criterion"
    - id: priority
      type: CRMScript.Global.Integer
      description: "A number. All criteria with the same number will be placed inside the same brackets."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addData(String,String)
  commentId: M:CRMScript.Native.SearchEngine.addData(String,String)
  id: 'addData(String,String)'
  so.intellisense: SearchEngine.addData
  langs:
  - crmscript
  name: 'addData(String,String)'
  nameWithType: SearchEngine.addData(String,String)
  fullName: CRMScript.Native.SearchEngine.addData(String,String)
  type: Method
  summary: "\nAdds data for use in an update or insert query.\n"
  remarks: 
  syntax: 
    content: Void addData(String field, String value)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to set"
    - id: value
      type: CRMScript.Global.String
      description: "The value to set on the field."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addDataField(String,String)
  commentId: M:CRMScript.Native.SearchEngine.addDataField(String,String)
  id: 'addDataField(String,String)'
  so.intellisense: SearchEngine.addDataField
  so.version: 4.2.0
  langs:
  - crmscript
  name: 'addDataField(String,String)'
  nameWithType: SearchEngine.addDataField(String,String)
  fullName: CRMScript.Native.SearchEngine.addDataField(String,String)
  type: Method
  summary: "\nAdds a data field to the SearchEngine. A data field is a field assigned to another field instead of a value.\n"
  remarks: "\nYou can optionally add a function to be applied to the second field.<p></p>\nCan only be used in update() queries.\n"
  syntax: 
    content: Void addDataField(String field1, String field2)
    parameters:
    - id: field1
      type: CRMScript.Global.String
      description: "Field to assign to."
    - id: field2
      type: CRMScript.Global.String
      description: "Field where the value is found."
    return:
      type: CRMScript.Global.Void
  example: 
  - "\n<pre><code>se.addDataField(&quot;customer.phone&quot;, &quot;customer.cellphone&quot;);</code></pre>\n"
- uid: CRMScript.Native.SearchEngine.addDataField(String,String,String)
  commentId: M:CRMScript.Native.SearchEngine.addDataField(String,String,String)
  id: 'addDataField(String,String,String)'
  so.intellisense: SearchEngine.addDataField
  so.version: 4.2.0
  langs:
  - crmscript
  name: 'addDataField(String,String,String)'
  nameWithType: SearchEngine.addDataField(String,String,String)
  fullName: CRMScript.Native.SearchEngine.addDataField(String,String,String)
  type: Method
  summary: "\nAdds a data field to the SearchEngine. A data field is a field assigned to another field instead of a value.<p></p>\nCan only be used in update() queries.\n"
  remarks: "\n<h3>Available functions</h3><ul><li>count</li><li>avg</li><li>sum</li><li>max</li><li>min</li><li>hour</li><li>wday</li><li>upper</li><li>lower</li><li>castToVarchar</li><li>date</li><li>time</li></ul>\n"
  syntax: 
    content: Void addDataField(String field1, String field2, String function)
    parameters:
    - id: field1
      type: CRMScript.Global.String
      description: "Field to assign to."
    - id: field2
      type: CRMScript.Global.String
      description: "Field where the value is found."
    - id: function
      type: CRMScript.Global.String
      description: "Aggregate function to use for field2."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addField(String)
  commentId: M:CRMScript.Native.SearchEngine.addField(String)
  id: 'addField(String)'
  so.intellisense: SearchEngine.addField
  langs:
  - crmscript
  name: 'addField(String)'
  nameWithType: SearchEngine.addField(String)
  fullName: CRMScript.Native.SearchEngine.addField(String)
  type: Method
  summary: "\nAdds a field to the SELECT part of the database query\n"
  remarks: "\nYou can optionally add a function to be applied to the field.\n"
  syntax: 
    content: Void addField(String field)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to select."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addField(String,String)
  commentId: M:CRMScript.Native.SearchEngine.addField(String,String)
  id: 'addField(String,String)'
  so.intellisense: SearchEngine.addField
  langs:
  - crmscript
  name: 'addField(String,String)'
  nameWithType: SearchEngine.addField(String,String)
  fullName: CRMScript.Native.SearchEngine.addField(String,String)
  type: Method
  summary: "\nAdds a field to the SELECT part of the database query with a function to be applied to the field.\n"
  remarks: "\n<h3>Available functions</h3><ul><li>count</li><li>avg</li><li>sum</li><li>max</li><li>min</li><li>hour</li><li>wday</li><li>upper</li></ul>\n"
  syntax: 
    content: Void addField(String field, String function)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to select"
    - id: function
      type: CRMScript.Global.String
      description: "A function to use on the field."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addFields(String,String)
  commentId: M:CRMScript.Native.SearchEngine.addFields(String,String)
  id: 'addFields(String,String)'
  so.intellisense: SearchEngine.addFields
  so.version: 8.4R02
  langs:
  - crmscript
  name: 'addFields(String,String)'
  nameWithType: SearchEngine.addFields(String,String)
  fullName: CRMScript.Native.SearchEngine.addFields(String,String)
  type: Method
  summary: "\nA shortcut to add multiple fields to a query. Adds all fields in the comma-separated string &quot;fields&quot;, prefixed by &quot;table&quot; and a dot &quot;.&quot;.\n"
  remarks: 
  syntax: 
    content: Void addFields(String table, String fields)
    parameters:
    - id: table
      type: CRMScript.Global.String
      description: 
    - id: fields
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
  - "\n<pre><code>addFields(&quot;ticket&quot;, &quot;id,title,category.fullname,cust_id.fullName&quot;);</code></pre>\n"
- uid: CRMScript.Native.SearchEngine.addHaving(String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addHaving(String,String,String,String,Integer)
  id: 'addHaving(String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addHaving
  langs:
  - crmscript
  name: 'addHaving(String,String,String,String,Integer)'
  nameWithType: SearchEngine.addHaving(String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addHaving(String,String,String,String,Integer)
  type: Method
  summary: "\nAdds a HAVING clause to the database query.\n"
  remarks: "\nYou can optionally add a function to be applied to the field.\n"
  syntax: 
    content: Void addHaving(String field, String compOperator, String value, String rowOperator, Integer priority)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: value
      type: CRMScript.Global.String
      description: 
    - id: rowOperator
      type: CRMScript.Global.String
      description: "Operator for combining this and the next criterion"
    - id: priority
      type: CRMScript.Global.Integer
      description: "A number. All criteria with the same number will be placed inside the same brackets."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addHaving(String,String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addHaving(String,String,String,String,String,Integer)
  id: 'addHaving(String,String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addHaving
  langs:
  - crmscript
  name: 'addHaving(String,String,String,String,String,Integer)'
  nameWithType: SearchEngine.addHaving(String,String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addHaving(String,String,String,String,String,Integer)
  type: Method
  summary: "\nAdds a HAVING clause to the database query.\n"
  remarks: "\n<h3>Functions</h3><table><thead><tr><th>Function</th><th>Other name</th><th>Applies to</th><th>bypassNetServer</th><th>Description</th></tr></thead><tbody><tr><td>avg</td><td>FuncAvg</td><td>Integer, Float</td><td>yes</td><td>aggregate, the average value of a column</td></tr><tr><td>count</td><td>FuncCount</td><td>Integer, Float</td><td>yes</td><td>aggregate, the number of rows matching cond.</td></tr><tr><td>sum</td><td>FuncSum</td><td>Integer, Float</td><td>yes</td><td>aggregate, the total sum of a column</td></tr><tr><td>max</td><td>FuncMax</td><td>Integer, Float</td><td>yes</td><td>aggregate, the largest value of a column</td></tr><tr><td>min</td><td>FuncMin</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>hour</td><td>FuncHour</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>wday</td><td>FuncWDay</td><td>Date, DateTime</td><td></td><td></td></tr><tr><td>upper</td><td>FuncUpper</td><td>String</td><td></td><td></td></tr><tr><td>lower</td><td>FuncLower</td><td>String</td><td></td><td></td></tr></tbody></table><h3>Row operators</h3><table><thead><tr><th>Value</th><th>Logical operator</th><th>Expression</th><th>Result</th></tr></thead><tbody><tr><td>OperatorAnd</td><td>AND</td><td>A &amp;&amp; B</td><td>Only rows matching both conditions</td></tr><tr><td>OperatorNotAnd</td><td>NAND</td><td>!(A &amp;&amp; B)</td><td>Rows matching 0 or 1 condition but not both</td></tr><tr><td>OperatorOr</td><td>OR</td><td>A || B</td><td>Rows matching either condition (or both)</td></tr><tr><td>OperatorNotOr</td><td>NOR</td><td>!(A || B)</td><td>Only rows matching no conditions</td></tr></tbody></table><h3>Comparison operators</h3><table><thead><tr><th>Value</th><th>Same as</th><th>Result</th></tr></thead><tbody><tr><td>OperatorEquals</td><td>==</td><td>values match</td></tr><tr><td>OperatorNotEquals</td><td>!=</td><td>values don't match</td></tr><tr><td>OperatorLt</td><td>&lt;</td><td>value less than</td></tr><tr><td>OperatorLte</td><td>&lt;=</td><td>value less than or equal</td></tr><tr><td>OperatorGt</td><td>&gt;</td><td>value greater than</td></tr><tr><td>OperatorGte</td><td>&gt;=</td><td>value greater than or equal</td></tr><tr><td>OperatorIs</td><td></td><td>values of the same type</td></tr><tr><td>OperatorIsNot</td><td></td><td>values of different types</td></tr><tr><td>OperatorLike</td><td></td><td>pattern found in string</td></tr><tr><td>OperatorNotLike</td><td></td><td>pattern not found in string</td></tr><tr><td>OperatorContains</td><td></td><td>string is present</td></tr><tr><td>OperatorBeginsWith</td><td></td><td>string starts with</td></tr><tr><td>OperatorEndsWith</td><td></td><td>string ends with</td></tr><tr><td>OperatorIn</td><td></td><td>column has entries in table</td></tr></tbody></table>\n"
  syntax: 
    content: Void addHaving(String field, String function, String compOperator, String value, String rowOperator, Integer priority)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: function
      type: CRMScript.Global.String
      description: "The function to use on field"
    - id: compOperator
      type: CRMScript.Global.String
      description: "Comparison operator"
    - id: value
      type: CRMScript.Global.String
      description: 
    - id: rowOperator
      type: CRMScript.Global.String
      description: "Operator for combining this and the next criterion"
    - id: priority
      type: CRMScript.Global.Integer
      description: "A number. All criteria with the same number will be placed inside the same brackets."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addJoinCriteria(String,String,String,String,Integer)
  commentId: M:CRMScript.Native.SearchEngine.addJoinCriteria(String,String,String,String,Integer)
  id: 'addJoinCriteria(String,String,String,String,Integer)'
  so.intellisense: SearchEngine.addJoinCriteria
  so.version: 4.10.1
  langs:
  - crmscript
  name: 'addJoinCriteria(String,String,String,String,Integer)'
  nameWithType: SearchEngine.addJoinCriteria(String,String,String,String,Integer)
  fullName: CRMScript.Native.SearchEngine.addJoinCriteria(String,String,String,String,Integer)
  type: Method
  summary: "\nDoes NOT work with NetServer. You need to bypass NetServer (see the method bypassNetServer) if you need to use this.\n"
  remarks: 
  syntax: 
    content: Void addJoinCriteria(String p_0, String p_1, String p_2, String p_3, Integer p_4)
    parameters:
    - id: p_0
      type: CRMScript.Global.String
      description: 
    - id: p_1
      type: CRMScript.Global.String
      description: 
    - id: p_2
      type: CRMScript.Global.String
      description: 
    - id: p_3
      type: CRMScript.Global.String
      description: 
    - id: p_4
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addOrder(String,Bool)
  commentId: M:CRMScript.Native.SearchEngine.addOrder(String,Bool)
  id: 'addOrder(String,Bool)'
  so.intellisense: SearchEngine.addOrder
  langs:
  - crmscript
  name: 'addOrder(String,Bool)'
  nameWithType: SearchEngine.addOrder(String,Bool)
  fullName: CRMScript.Native.SearchEngine.addOrder(String,Bool)
  type: Method
  summary: "\nAdds a restriction to the order on the listing of the database result.\n"
  remarks: "\nYou can optionally add a function to be applied to the field.\n"
  syntax: 
    content: Void addOrder(String field, Bool ascending)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: ascending
      type: CRMScript.Global.Bool
      description: "The sort order. True = ascending, false = descending."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.addOrder(String,String,Bool)
  commentId: M:CRMScript.Native.SearchEngine.addOrder(String,String,Bool)
  id: 'addOrder(String,String,Bool)'
  so.intellisense: SearchEngine.addOrder
  langs:
  - crmscript
  name: 'addOrder(String,String,Bool)'
  nameWithType: SearchEngine.addOrder(String,String,Bool)
  fullName: CRMScript.Native.SearchEngine.addOrder(String,String,Bool)
  type: Method
  summary: "\nAdds a restriction to the order on the listing of the database result.\n"
  remarks: "\n<h3>Available functions</h3><ul><li>Count</li><li>Avg</li><li>Sum</li><li>Max</li><li>Min</li><li>Hour</li><li>WDay</li><li>Upper</li></ul>\n"
  syntax: 
    content: Void addOrder(String field, String function, Bool ascending)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: "The field to restrict"
    - id: function
      type: CRMScript.Global.String
      description: "The function to use on field"
    - id: ascending
      type: CRMScript.Global.Bool
      description: "The sort order. True = ascending, false = descending."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.buildSql()
  commentId: M:CRMScript.Native.SearchEngine.buildSql()
  id: 'buildSql()'
  so.intellisense: SearchEngine.buildSql
  langs:
  - crmscript
  name: 'buildSql()'
  nameWithType: SearchEngine.buildSql()
  fullName: CRMScript.Native.SearchEngine.buildSql()
  type: Method
  summary: "\nReturns the SQL query generated by the SearchEngine. The query is built by <code>addCriteria()</code>,<code>addComparison()</code>,<code>addData()</code>, and so on.\n"
  remarks: "\nFor versions 7.0 and newer, the statement returned will be an estimate of the SQL, since the query is sent to NetServer instead.\n"
  syntax: 
    content: String buildSql()
    parameters: []
    return:
      type: CRMScript.Global.String
      description: "The SQL query generated by the SearchEngine."
  example: 
- uid: CRMScript.Native.SearchEngine.buildSql(String)
  commentId: M:CRMScript.Native.SearchEngine.buildSql(String)
  id: 'buildSql(String)'
  so.intellisense: SearchEngine.buildSql
  so.version: 4.5.1
  langs:
  - crmscript
  name: 'buildSql(String)'
  nameWithType: SearchEngine.buildSql(String)
  fullName: CRMScript.Native.SearchEngine.buildSql(String)
  type: Method
  summary: "\nReturns the SQL query generated by the SearchEngine. The query is built by <code>addCriteria()</code>,<code>addComparison()</code>,<code>addData()</code>, and so on.\n"
  remarks: "\nFor versions 7.0 and newer, the statement returned will be an estimate of the SQL, since the query is sent to NetServer instead.\n"
  syntax: 
    content: String buildSql(String type)
    parameters:
    - id: type
      type: CRMScript.Global.String
      description: "Determines the type of query to build."
    return:
      type: CRMScript.Global.String
      description: "The SQL query generated by the SearchEngine."
  example: 
- uid: CRMScript.Native.SearchEngine.bypassNetServer(Bool)
  commentId: M:CRMScript.Native.SearchEngine.bypassNetServer(Bool)
  id: 'bypassNetServer(Bool)'
  so.intellisense: SearchEngine.bypassNetServer
  so.version: 7.0
  langs:
  - crmscript
  name: 'bypassNetServer(Bool)'
  nameWithType: SearchEngine.bypassNetServer(Bool)
  fullName: CRMScript.Native.SearchEngine.bypassNetServer(Bool)
  type: Method
  summary: "\nFrom version 7, all queries are sent to NetServer instead of directly to the database. This function will allow you to send the queries directly to the database instead.\n"
  remarks: "\nHas no effect if the registry value (reg_id = 235) is set to 0.<p></p>\nBe aware of any security implications by circumventing the NetServer.\n"
  syntax: 
    content: Void bypassNetServer(Bool p_0)
    parameters:
    - id: p_0
      type: CRMScript.Global.Bool
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.countColumns()
  commentId: M:CRMScript.Native.SearchEngine.countColumns()
  id: 'countColumns()'
  so.intellisense: SearchEngine.countColumns
  so.version: 7.1.0
  langs:
  - crmscript
  name: 'countColumns()'
  nameWithType: SearchEngine.countColumns()
  fullName: CRMScript.Native.SearchEngine.countColumns()
  type: Method
  summary: "\nReturns the count of columns (selected fields) in the SearchEngine query.\n"
  remarks: 
  syntax: 
    content: Integer countColumns()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description: "The count of columns (selected fields) in the SearchEngine query."
  example: 
- uid: CRMScript.Native.SearchEngine.countRows()
  commentId: M:CRMScript.Native.SearchEngine.countRows()
  id: 'countRows()'
  so.intellisense: SearchEngine.countRows
  langs:
  - crmscript
  name: 'countRows()'
  nameWithType: SearchEngine.countRows()
  fullName: CRMScript.Native.SearchEngine.countRows()
  type: Method
  summary: "\nReturns the number of rows in the result set.\n"
  remarks: 
  syntax: 
    content: Integer countRows()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description: "The number of rows in the result set."
  example: 
- uid: CRMScript.Native.SearchEngine.delete()
  commentId: M:CRMScript.Native.SearchEngine.delete()
  id: 'delete()'
  so.intellisense: SearchEngine.delete
  langs:
  - crmscript
  name: 'delete()'
  nameWithType: SearchEngine.delete()
  fullName: CRMScript.Native.SearchEngine.delete()
  type: Method
  summary: "\nAfter adding criteria, call this to delete the items that was selected by the query.\n"
  remarks: 
  syntax: 
    content: Void delete()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.eof()
  commentId: M:CRMScript.Native.SearchEngine.eof()
  id: 'eof()'
  so.intellisense: SearchEngine.eof
  langs:
  - crmscript
  name: 'eof()'
  nameWithType: SearchEngine.eof()
  fullName: CRMScript.Native.SearchEngine.eof()
  type: Method
  summary: "\nChecks if the end of the result set is reached.\n"
  remarks: 
  syntax: 
    content: Bool eof()
    parameters: []
    return:
      type: CRMScript.Global.Bool
      description: "True if the end of the result set is reached; otherwise, false."
  example: 
- uid: CRMScript.Native.SearchEngine.execute()
  commentId: M:CRMScript.Native.SearchEngine.execute()
  id: 'execute()'
  so.intellisense: SearchEngine.execute
  langs:
  - crmscript
  name: 'execute()'
  nameWithType: SearchEngine.execute()
  fullName: CRMScript.Native.SearchEngine.execute()
  type: Method
  summary: "\nExecutes the query. Must be called to get the results.\n"
  remarks: 
  syntax: 
    content: Integer execute()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description:
  example: 
- uid: CRMScript.Native.SearchEngine.executeHTMLTable()
  commentId: M:CRMScript.Native.SearchEngine.executeHTMLTable()
  id: 'executeHTMLTable()'
  so.intellisense: SearchEngine.executeHTMLTable
  so.version: 8.4R02
  langs:
  - crmscript
  name: 'executeHTMLTable()'
  nameWithType: SearchEngine.executeHTMLTable()
  fullName: CRMScript.Native.SearchEngine.executeHTMLTable()
  type: Method
  summary: "\nExecutes the query and return the result as a HTML formatted table.\n"
  remarks: 
  syntax: 
    content: String executeHTMLTable()
    parameters: []
    return:
      type: CRMScript.Global.String
      description: "The result as a HTML formatted table."
  example: 
- uid: CRMScript.Native.SearchEngine.executeInto(StringMatrix)
  commentId: M:CRMScript.Native.SearchEngine.executeInto(StringMatrix)
  id: 'executeInto(StringMatrix)'
  so.intellisense: SearchEngine.executeInto
  langs:
  - crmscript
  name: 'executeInto(StringMatrix)'
  nameWithType: SearchEngine.executeInto(StringMatrix)
  fullName: CRMScript.Native.SearchEngine.executeInto(StringMatrix)
  type: Method
  summary: "\nExecutes the query and returns the result in the matrix.\n"
  remarks: 
  syntax: 
    content: Void executeInto(StringMatrix matrix)
    parameters:
    - id: matrix
      type: CRMScript.Native.StringMatrix
      description: "The matrix to fill with the result set."
  example: 
- uid: CRMScript.Native.SearchEngine.executeJSON()
  commentId: M:CRMScript.Native.SearchEngine.executeJSON()
  id: 'executeJSON()'
  so.intellisense: SearchEngine.executeJSON
  so.version: 7.5
  langs:
  - crmscript
  name: 'executeJSON()'
  nameWithType: SearchEngine.executeJSON()
  fullName: CRMScript.Native.SearchEngine.executeJSON()
  type: Method
  summary: "\nExecutes the query and return the result as a JSON formatted text.\n"
  remarks: 
  syntax: 
    content: String executeJSON()
    parameters: []
    return:
      type: CRMScript.Global.String
      description:
  example: 
- uid: CRMScript.Native.SearchEngine.executeTextTable()
  commentId: M:CRMScript.Native.SearchEngine.executeTextTable()
  id: 'executeTextTable()'
  so.intellisense: SearchEngine.executeTextTable
  so.version: 8.4R02
  langs:
  - crmscript
  name: 'executeTextTable()'
  nameWithType: SearchEngine.executeTextTable()
  fullName: CRMScript.Native.SearchEngine.executeTextTable()
  type: Method
  summary: "\nExecutes the query and return the result as a text formatted table (similar to MySQL).\n"
  remarks: "\nhave some overhead for large result sets.\n"
  syntax: 
    content: String executeTextTable()
    parameters: []
    return:
      type: CRMScript.Global.String
      description:
  example: 
- uid: CRMScript.Native.SearchEngine.executeToJSONBuilder(JSONBuilder,String,String)
  commentId: M:CRMScript.Native.SearchEngine.executeToJSONBuilder(JSONBuilder,String,String)
  id: 'executeToJSONBuilder(JSONBuilder,String,String)'
  so.intellisense: SearchEngine.executeToJSONBuilder
  so.version: 8.5R08
  langs:
  - crmscript
  name: 'executeToJSONBuilder(JSONBuilder,String,String)'
  nameWithType: SearchEngine.executeToJSONBuilder(JSONBuilder,String,String)
  fullName: CRMScript.Native.SearchEngine.executeToJSONBuilder(JSONBuilder,String,String)
  type: Method
  summary: "\nExecutes the SearchEngine to a JSONBuilder.<p></p>\nThe fields string can contain a comma-separated list of label:fieldType elements, allowing you to better control the resulting json. The label is the name the field gets in the json object. The fieldType can be &quot;Integer&quot;, &quot;Float&quot;, &quot;Bool&quot;, or &quot;String&quot; (default). The json object member will be formatted accordingly, e.g. a Bool will be &quot;true&quot; or &quot;false&quot;, while Integer/Float will become unquoted numbers.<p></p>\nThe arrayName will become the name of the array in the JSONBuilder.\n"
  remarks: "\n This is useful if you want this query to populate an array in a JSONBuilder already containing other stuff.\n"
  syntax: 
    content: Void executeToJSONBuilder(JSONBuilder jb, String fields, String arrayName)
    parameters:
    - id: jb
      type: CRMScript.Native.JSONBuilder
      description: 
    - id: fields
      type: CRMScript.Global.String
      description: 
    - id: arrayName
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
  - "\n<pre><code>SearchEngine se;\nse.addFields(&quot;sale&quot;, &quot;sale_id,heading,amount&quot;);\nse.setLimit(10);\nJSONBuilder jb;\njb.setPrettyPrint(4);\njb.pushObject(&quot;&quot;);\njb.addString(&quot;foo&quot;, &quot;bar&quot;);\nse.executeToJSONBuilder(jb, &quot;id:Integer,heading:String,amount:Float&quot;, &quot;sales&quot;);\njb.popLevel();\nprintLine(jb.getString());</code></pre>\n"
- uid: CRMScript.Native.SearchEngine.findAlternativeFields(String)
  commentId: M:CRMScript.Native.SearchEngine.findAlternativeFields(String)
  id: 'findAlternativeFields(String)'
  so.intellisense: SearchEngine.findAlternativeFields
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'findAlternativeFields(String)'
  nameWithType: SearchEngine.findAlternativeFields(String)
  fullName: CRMScript.Native.SearchEngine.findAlternativeFields(String)
  type: Method
  summary: "\nFinds all alternative fields given a start field.<p></p>\nThese fields can be used in <code>addField()</code> or similar functions.\n"
  remarks: 
  syntax: 
    content: String[] findAlternativeFields(String fieldBeginsWith)
    parameters:
    - id: fieldBeginsWith
      type: CRMScript.Global.String
      description: "Fields that begins with..."
    return:
      type: CRMScript.Global.String[]
      description:
  example: 
- uid: CRMScript.Native.SearchEngine.findRelations(String,Bool)
  commentId: M:CRMScript.Native.SearchEngine.findRelations(String,Bool)
  id: 'findRelations(String,Bool)'
  so.intellisense: SearchEngine.findRelations
  so.version: 7.0
  langs:
  - crmscript
  name: 'findRelations(String,Bool)'
  nameWithType: SearchEngine.findRelations(String,Bool)
  fullName: CRMScript.Native.SearchEngine.findRelations(String,Bool)
  type: Method
  summary: # TODO
  remarks: 
  syntax: 
    content: String[] findRelations(String p_0, Bool p_1)
    parameters:
    - id: p_0
      type: CRMScript.Global.String
      description: 
    - id: p_1
      type: CRMScript.Global.Bool
      description: 
    return: 
      type: CRMScript.Global.String[]
      description:
  example: 
- uid: CRMScript.Native.SearchEngine.first()
  commentId: M:CRMScript.Native.SearchEngine.first()
  id: 'first()'
  so.intellisense: SearchEngine.first
  langs:
  - crmscript
  name: 'first()'
  nameWithType: SearchEngine.first()
  fullName: CRMScript.Native.SearchEngine.first()
  type: Method
  summary: "\nSets the row pointer to the first item of the result set.\n"
  remarks: 
  syntax: 
    content: Bool first()
    parameters: []
    return:
      type: CRMScript.Global.Bool
      description: "False if the result set is empty, otherwise, true."
  example: 
- uid: CRMScript.Native.SearchEngine.getField(Integer)
  commentId: M:CRMScript.Native.SearchEngine.getField(Integer)
  id: 'getField(Integer)'
  so.intellisense: SearchEngine.getField
  langs:
  - crmscript
  name: 'getField(Integer)'
  nameWithType: SearchEngine.getField(Integer)
  fullName: CRMScript.Native.SearchEngine.getField(Integer)
  type: Method
  summary: "\nReturns the value of a field.\n"
  remarks: "\nYou can optionally add a function to be applied to the field when using the name as the identifier.\n"
  syntax: 
    content: String getField(Integer num)
    parameters:
    - id: num
      type: CRMScript.Global.Integer
      description: "The number of the field. Starting at 0. Alternative to using name."
    return:
      type: CRMScript.Global.String
      description: "The value of the field."
  example: 
- uid: CRMScript.Native.SearchEngine.getField(String)
  commentId: M:CRMScript.Native.SearchEngine.getField(String)
  id: 'getField(String)'
  so.intellisense: SearchEngine.getField
  langs:
  - crmscript
  name: 'getField(String)'
  nameWithType: SearchEngine.getField(String)
  fullName: CRMScript.Native.SearchEngine.getField(String)
  type: Method
  summary: "\nReturns the value of a field.\n"
  remarks: "\nYou can optionally add a function to be applied to the field when using the name as the identifier.\n"
  syntax: 
    content: String getField(String name)
    parameters:
    - id: name
      type: CRMScript.Global.String
      description: "The name of the field. On the form table.fieldname. Alternative to using num."
    return:
      type: CRMScript.Global.String
      description: "The value of the field."
  example: 
- uid: CRMScript.Native.SearchEngine.getField(String,String)
  commentId: M:CRMScript.Native.SearchEngine.getField(String,String)
  id: 'getField(String,String)'
  so.intellisense: SearchEngine.getField
  langs:
  - crmscript
  name: 'getField(String,String)'
  nameWithType: SearchEngine.getField(String,String)
  fullName: CRMScript.Native.SearchEngine.getField(String,String)
  type: Method
  summary: "\nReturns the value of a field.\n"
  remarks: "\n<h3>Functions</h3><table><thead><tr><th>Function</th><th>Other name</th><th>Applies to</th><th>bypassNetServer</th><th>Description</th></tr></thead><tbody><tr><td>avg</td><td>FuncAvg</td><td>Integer, Float</td><td>yes</td><td>aggregate, the average value of a column</td></tr><tr><td>count</td><td>FuncCount</td><td>Integer, Float</td><td>yes</td><td>aggregate, the number of rows matching cond.</td></tr><tr><td>sum</td><td>FuncSum</td><td>Integer, Float</td><td>yes</td><td>aggregate, the total sum of a column</td></tr><tr><td>max</td><td>FuncMax</td><td>Integer, Float</td><td>yes</td><td>aggregate, the largest value of a column</td></tr><tr><td>min</td><td>FuncMin</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>hour</td><td>FuncHour</td><td>Time, DateTime</td><td></td><td></td></tr><tr><td>wday</td><td>FuncWDay</td><td>Date, DateTime</td><td></td><td></td></tr><tr><td>upper</td><td>FuncUpper</td><td>String</td><td></td><td></td></tr></tbody></table>\n"
  syntax: 
    content: String getField(String name, String function)
    parameters:
    - id: name
      type: CRMScript.Global.String
      description: "The name of the field. On the form table.fieldname. Alternative to using num"
    - id: function
      type: CRMScript.Global.String
      description: "The function to use on the field. Used in combination with name."
    return:
      type: CRMScript.Global.String
      description: "The value of the field."
  example: 
- uid: CRMScript.Native.SearchEngine.getFieldsJSON()
  commentId: M:CRMScript.Native.SearchEngine.getFieldsJSON()
  id: 'getFieldsJSON()'
  so.intellisense: SearchEngine.getFieldsJSON
  so.version: 7.5
  langs:
  - crmscript
  name: 'getFieldsJSON()'
  nameWithType: SearchEngine.getFieldsJSON()
  fullName: CRMScript.Native.SearchEngine.getFieldsJSON()
  type: Method
  summary: "\nReturns fields as JSON formatted string.\n"
  remarks: 
  syntax: 
    content: String getFieldsJSON()
    parameters: []
    return:
      type: CRMScript.Global.String
      description:
  example: 
- uid: CRMScript.Native.SearchEngine.insert()
  commentId: M:CRMScript.Native.SearchEngine.insert()
  id: 'insert()'
  so.intellisense: SearchEngine.insert
  langs:
  - crmscript
  name: 'insert()'
  nameWithType: SearchEngine.insert()
  fullName: CRMScript.Native.SearchEngine.insert()
  type: Method
  summary: "\nAfter adding the values of the fields, call this function to actually do the insert in the database. Returns the resulting ID of the insert.\n"
  remarks: 
  syntax: 
    content: Integer insert()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description: "The ID of the newly added item."
  example: 
- uid: CRMScript.Native.SearchEngine.next()
  commentId: M:CRMScript.Native.SearchEngine.next()
  id: 'next()'
  so.intellisense: SearchEngine.next
  langs:
  - crmscript
  name: 'next()'
  nameWithType: SearchEngine.next()
  fullName: CRMScript.Native.SearchEngine.next()
  type: Method
  summary: "\nIf not the end of the result set is reached, the result pointer is set to the next line.\n"
  remarks: 
  syntax: 
    content: Bool next()
    parameters: []
    return:
     type: CRMScript.Global.Bool
     description: "False if the end of result set is reached; otherwise, true."
  example: 
- uid: CRMScript.Native.SearchEngine.select()
  commentId: M:CRMScript.Native.SearchEngine.select()
  id: 'select()'
  so.intellisense: SearchEngine.select
  langs:
  - crmscript
  name: 'select()'
  nameWithType: SearchEngine.select()
  fullName: CRMScript.Native.SearchEngine.select()
  type: Method
  summary: "\nDoes the select-query and returns the size of the result set.\n"
  remarks: 
  syntax: 
    content: Integer select()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description: "The number of items in the result set."
  example: 
- uid: CRMScript.Native.SearchEngine.setCallBack(String)
  commentId: M:CRMScript.Native.SearchEngine.setCallBack(String)
  id: 'setCallBack(String)'
  so.intellisense: SearchEngine.setCallBack
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'setCallBack(String)'
  nameWithType: SearchEngine.setCallBack(String)
  fullName: CRMScript.Native.SearchEngine.setCallBack(String)
  type: Method
  summary: "\nSets a CRMScript function as a callback that will be used to convert the values before they are displayed in the grid.\n"
  remarks: 
  syntax: 
    content: Void setCallBack(String functionName)
    parameters:
    - id: functionName
      type: CRMScript.Global.String
      description: "Name of ejscript function."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.setDBDistinct(Bool)
  commentId: M:CRMScript.Native.SearchEngine.setDBDistinct(Bool)
  id: 'setDBDistinct(Bool)'
  so.intellisense: SearchEngine.setDBDistinct
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'setDBDistinct(Bool)'
  nameWithType: SearchEngine.setDBDistinct(Bool)
  fullName: CRMScript.Native.SearchEngine.setDBDistinct(Bool)
  type: Method
  summary: "\nForces SearchEngine to use a distinct in the query.\n"
  remarks: 
  syntax: 
    content: Void setDBDistinct(Bool p_0)
    parameters:
    - id: p_0
      type: CRMScript.Global.Bool
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.setDistinct(String)
  commentId: M:CRMScript.Native.SearchEngine.setDistinct(String)
  id: 'setDistinct(String)'
  so.intellisense: SearchEngine.setDistinct
  so.version: 3.1.4
  langs:
  - crmscript
  name: 'setDistinct(String)'
  nameWithType: SearchEngine.setDistinct(String)
  fullName: CRMScript.Native.SearchEngine.setDistinct(String)
  type: Method
  summary: "\nMakes the entries distinct so that equal tickets will not be listed.\n"
  remarks: 
  syntax: 
    content: Void setDistinct(String field)
    parameters:
    - id: field
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
  - "se.setDistinct(&quot;ticked.id&quot;); There will only be one entry with the same ticket ID, very useful with many to many relations."
- uid: CRMScript.Native.SearchEngine.setGroup(Bool)
  commentId: M:CRMScript.Native.SearchEngine.setGroup(Bool)
  id: 'setGroup(Bool)'
  so.intellisense: SearchEngine.setGroup
  langs:
  - crmscript
  name: 'setGroup(Bool)'
  nameWithType: SearchEngine.setGroup(Bool)
  fullName: CRMScript.Native.SearchEngine.setGroup(Bool)
  type: Method
  summary: "\nSets or removes a group-clause to all of the fields in the query (added by the <code>addField()</code> function).\n"
  remarks: 
  syntax: 
    content: Void setGroup(Bool set)
    parameters:
    - id: set
      type: CRMScript.Global.Bool
      description: "True if you want to set the groupby-clause, false to remove a groupBy-clause."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.setLimit(Integer)
  commentId: M:CRMScript.Native.SearchEngine.setLimit(Integer)
  id: 'setLimit(Integer)'
  so.intellisense: SearchEngine.setLimit
  langs:
  - crmscript
  name: 'setLimit(Integer)'
  nameWithType: SearchEngine.setLimit(Integer)
  fullName: CRMScript.Native.SearchEngine.setLimit(Integer)
  type: Method
  summary: "\nSets the limit of number of rows to receive in the result set.\n"
  remarks: 
  syntax: 
    content: Void SetLimit(Integer number)
    parameters:
    - id: number
      type: CRMScript.Global.Integer
      description: "The limit of the rows to receive in the result set."
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.SearchEngine.update()
  commentId: M:CRMScript.Native.SearchEngine.update()
  id: 'update()'
  so.intellisense: SearchEngine.update
  langs:
  - crmscript
  name: 'update()'
  nameWithType: SearchEngine.update()
  fullName: CRMScript.Native.SearchEngine.update()
  type: Method
  summary: "\nUse this function after <code>addData()</code>, which sets the values that will be modified, and <code>addCriteria()</code>, which do a restriction on the items to modify.\n"
  remarks: 
  syntax: 
    content: Void update()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
references:
- uid: CRMScript.Native.SearchEngine
  commentId: T:CRMScript.Native.SearchEngine
  isExternal: true
  name: SearchEngine
  nameWithType: SearchEngine
  fullName: CRMScript.Native.SearchEngine
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
- uid: CRMScript.Global.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: CRMScript.Global.String[]
  spec.crmscript:
  - uid: CRMScript.Global.String
    isExternal: true
    name: String
    nameWithType: String
    fullName: CRMScript.Global.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.Global.Bool
  commentId: T:CRMScript.Global.Bool
  isExternal: true
  name: Bool
  nameWithType: Bool
  fullName: CRMScript.Global.Bool
- uid: CRMScript.Native.JSONBuilder
  commentId: T:CRMScript.Native.JSONBuilder
  isExternal: true
  name: JSONBuilder
  nameWithType: JSONBuilder
  fullName: CRMScript.Native.JSONBuilder
- uid: CRMScript.Global.Void
  commentId: T:CRMScript.Global.Void
  isExternal: true
  name: Void
  nameWithType: Void
  fullName: CRMScript.Global.Void
- uid: CRMScript.Native.StringMatrix
  commentId: T:CRMScript.Native.StringMatrix
  isExternal: true
  name: StringMatrix
  nameWithType: StringMatrix
  fullName: CRMScript.Native.StringMatrix