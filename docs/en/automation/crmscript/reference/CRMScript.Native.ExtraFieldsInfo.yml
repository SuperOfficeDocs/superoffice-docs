### YamlMime:ManagedReference
items:
- uid: CRMScript.Native.ExtraFieldsInfo
  commentId: T:CRMScript.Native.ExtraFieldsInfo
  id: ExtraFieldsInfo
  so.version: 4.0.0
  langs:
  - crmscript
  children:
  - CRMScript.Native.ExtraFieldsInfo.#ctor
  - CRMScript.Native.ExtraFieldsInfo.eof()
  - CRMScript.Native.ExtraFieldsInfo.getChildrenFields(Integer,Integer)
  - CRMScript.Native.ExtraFieldsInfo.getCompanyChildrenFields()
  - CRMScript.Native.ExtraFieldsInfo.getCustomerChildrenFields()
  - CRMScript.Native.ExtraFieldsInfo.getDisplayField()
  - CRMScript.Native.ExtraFieldsInfo.getExtraFields(String)
  - CRMScript.Native.ExtraFieldsInfo.getFieldName()
  - CRMScript.Native.ExtraFieldsInfo.getFlags()
  - CRMScript.Native.ExtraFieldsInfo.getName()
  - CRMScript.Native.ExtraFieldsInfo.getParam(String,String)
  - CRMScript.Native.ExtraFieldsInfo.getTableName()
  - CRMScript.Native.ExtraFieldsInfo.getTicketChildrenFields()
  - CRMScript.Native.ExtraFieldsInfo.next()
  name: ExtraFieldsInfo
  nameWithType: ExtraFieldsInfo
  fullName: CRMScript.Native.ExtraFieldsInfo
  type: Class
  summary: "\nWith this class, you can retrieve meta-information about an extra field.<p></p>\nThe class will only retrieve information, thus it is not possible to change an extra field from this class.\n"
  example: 
  - "\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;); // Finds extraFields in table person</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.#ctor
  commentId: M:CRMScript.Native.ExtraFieldsInfo.#ctor
  id: '#ctor'
  so.intellisense: Void.ExtraFieldsInfo
  langs:
  - crmscript
  name: ExtraFieldsInfo()
  nameWithType: ExtraFieldsInfo.#ctor
  fullName: CRMScript.Native.ExtraFieldsInfo.#ctor
  type: Constructor
  summary: "\nInitializes a new instance of the ExtraFieldsInfo class.\n"
  remarks: 
  syntax: 
    content: ExtraFieldsInfo
  example: 
  - "\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;); // Finds extraFields in table person</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.eof()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.eof()
  id: 'eof()'
  so.intellisense: ExtraFieldsInfo.eof
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'eof()'
  nameWithType: ExtraFieldsInfo.eof()
  fullName: CRMScript.Native.ExtraFieldsInfo.eof()
  type: Method
  summary: "\nChecks if there are no more fields in the result.\n"
  remarks: 
  syntax: 
    content: Bool eof()
    parameters: []
    return:
      type: CRMScript.Global.Bool
      description:
  example: 
  - "\n<pre><code>ExtraFieldsInfo efi;\n\nfor (efi.getTicketChildrenFields(); !efi.eof(); efi.next())\n{\n  // do something with information from efi\n}</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getChildrenFields(Integer,Integer)
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getChildrenFields(Integer,Integer)
  id: 'getChildrenFields(Integer,Integer)'
  so.intellisense: ExtraFieldsInfo.getChildrenFields
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getChildrenFields(Integer,Integer)'
  nameWithType: ExtraFieldsInfo.getChildrenFields(Integer,Integer)
  fullName: CRMScript.Native.ExtraFieldsInfo.getChildrenFields(Integer,Integer)
  type: Method
  summary: "\nLoads extra fields of the type given in the first parameter. If the type is an extra table relation, the second pointer is the ID of the extra table it points to.\n"
  remarks: "\nUnless type is 20 (extratable), the second parameter won't do anything.<p></p>\nTypes can be:Integer = 1, Text (long) = 2, Date = 3, DateTime = 4, Time = 5, Bool = 6, TimeSpan = 7, Text (short) = 10, Customer relation = 16, Company relation = 17, Ticket relation = 18, User relation = 19, Extra table relation = 20, Attachment relation = 22, Link = 23, Category relation = 24, Priority relation = 25, FAQ relation = 26\n"
  syntax: 
    content: Void getChildrenFields(Integer type, Integer extraTableTarget)
    parameters:
    - id: type
      type: CRMScript.Global.Integer
      description: 
    - id: extraTableTarget
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
  - "\nIf you want all extra fields pointing to the extra table with ID 5, you'd call getChildrenFields(20, 5)<p></p>\nIf you want all extra fields of type Dat you'd call getChildrenFields(3, 0)\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getCompanyChildrenFields()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getCompanyChildrenFields()
  id: 'getCompanyChildrenFields()'
  so.intellisense: ExtraFieldsInfo.getCompanyChildrenFields
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getCompanyChildrenFields()'
  nameWithType: ExtraFieldsInfo.getCompanyChildrenFields()
  fullName: CRMScript.Native.ExtraFieldsInfo.getCompanyChildrenFields()
  type: Method
  summary: "\nThis is a helper function for getting company relation fields. It is equivalent to calling getChildrenFields(17, 0).\n"
  remarks: 
  syntax: 
    content: getCompanyChildrenFields()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.ExtraFieldsInfo.getCustomerChildrenFields()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getCustomerChildrenFields()
  id: 'getCustomerChildrenFields()'
  so.intellisense: ExtraFieldsInfo.getCustomerChildrenFields
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getCustomerChildrenFields()'
  nameWithType: ExtraFieldsInfo.getCustomerChildrenFields()
  fullName: CRMScript.Native.ExtraFieldsInfo.getCustomerChildrenFields()
  type: Method
  summary: "\nThis is a helper function for getting customer relation fields. It is equivalent to calling getChildrenFields(16, 0).\n"
  remarks: 
  syntax: 
    content: Void getCustomerChildrenFields()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.ExtraFieldsInfo.getDisplayField()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getDisplayField()
  id: 'getDisplayField()'
  so.intellisense: ExtraFieldsInfo.getDisplayField
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getDisplayField()'
  nameWithType: ExtraFieldsInfo.getDisplayField()
  fullName: CRMScript.Native.ExtraFieldsInfo.getDisplayField()
  type: Method
  summary: "\nReturns the display field of the current field.\n"
  remarks: "\nThe display field is a format of the field that can be used to address the field in functions such as SearchEngine.\n"
  syntax: 
    content: String getDisplayField()
    parameters: []
    return:
      type: CRMScript.Global.String
      description:
  example: 
  - "\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;);\nprint(e.getDisplayField());</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getExtraFields(String)
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getExtraFields(String)
  id: 'getExtraFields(String)'
  so.intellisense: ExtraFieldsInfo.getExtraFields
  so.version: 7.5
  langs:
  - crmscript
  name: 'getExtraFields(String)'
  nameWithType: ExtraFieldsInfo.getExtraFields(String)
  fullName: CRMScript.Native.ExtraFieldsInfo.getExtraFields(String)
  type: Method
  summary: "\nGets extra fields related to the given table. Using this method will make it possible to access the information in the extra fields by using the other functions in the class.\n"
  remarks: 
  syntax: 
    content: Void getExtraFields(String table)
    parameters:
    - id: table
      type: CRMScript.Global.String
      description: 
    return: 
      type: CRMScript.Global.Void
  example: 
  - "\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;);</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getFieldName()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getFieldName()
  id: 'getFieldName()'
  so.intellisense: ExtraFieldsInfo.getFieldName
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getFieldName()'
  nameWithType: ExtraFieldsInfo.getFieldName()
  fullName: CRMScript.Native.ExtraFieldsInfo.getFieldName()
  type: Method
  summary: "\nReturns the field name of the current field.\n"
  remarks: 
  syntax: 
    content: String getFieldName()
    parameters: []
    return:
      type: CRMScript.Global.String
      description: "The field name of the current field."
  example: 
  - "\nThis code prints all field names of extra fields:<p></p>\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;);\n\nwhile(!e.eof()){\n  print(e.getFieldName());\n  e.next();\n}</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getFlags()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getFlags()
  id: 'getFlags()'
  so.intellisense: ExtraFieldsInfo.getFlags
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getFlags()'
  nameWithType: ExtraFieldsInfo.getFlags()
  fullName: CRMScript.Native.ExtraFieldsInfo.getFlags()
  type: Method
  summary: "\nReturns the flags for the current extra field.<p></p>\nThe flags can be accessed by wrapping the returned Integer in a FHBitSet.\n"
  remarks: "\nFlags:<ul><li>0 = The field is searchable</li><li>1 = The field is public (external)</li><li>2 = The field is viewed in new-ticket form</li><li>3 = The field is set (datetime) when clicked</li><li>4 = The field cannot change after being set</li><li>5 = The field is a dropdown (extra string fields)</li><li>6 = The field is directly readable from database</li><li>7 = Do not HTML-escape the value when displaying field</li><li>8 = The field is deleted</li><li>9 = The field is the ID</li><li>10 = The field is a foreign ID</li><li>11 = The field is not writeable</li><li>12 = Use default value for field if no value is supplied</li><li>13 = List relations</li><li>14 = View this field when listing rows</li><li>15 = Hide the header for this list if there are no entries</li><li>16 = Hide the function buttons for this relation</li><li>17 = The field cannot be empty</li><li>18 = The field is not shown anywhere</li><li>19 = The field is indexed</li><li>20 = The field is viewed in relational searches</li></ul>\n"
  syntax: 
    content: Integer getFlags()
    parameters: []
    return:
      type: CRMScript.Global.Integer
      description:
  example: 
  - "\n<pre><code>FHBitSet flags;\n\nflags.set(extraField.getFlags());\n\nflags.getBitNo(17);  // returns true if the extra field cannot be empty</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getName()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getName()
  id: 'getName()'
  so.intellisense: ExtraFieldsInfo.getName
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getName()'
  nameWithType: ExtraFieldsInfo.getName()
  fullName: CRMScript.Native.ExtraFieldsInfo.getName()
  type: Method
  summary: "\nReturns the descriptive name (not the database name) of the current field.\n"
  remarks: 
  syntax: 
    content: String getName()
    parameters: []
    return:
      type: CRMScript.Global.String
      description:
  example: 
  - "\nThis code prints all names of extra fields:<p></p>\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;);\n\nwhile(!e.eof()) {\n  print(e.getName());\n  e.next();\n}</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getParam(String,String)
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getParam(String,String)
  id: 'getParam(String,String)'
  so.intellisense: ExtraFieldsInfo.getParam
  langs:
  - crmscript
  name: 'getParam(String,String)'
  nameWithType: ExtraFieldsInfo.getParam(String,String)
  fullName: CRMScript.Native.ExtraFieldsInfo.getParam(String,String)
  type: Method
  summary: "\nThis function returns the value of the given parameter.\n"
  remarks: "\nAvailable values:<table><thead><tr><th>Variable</th><th>Available to</th><th>Description</th></tr></thead><tbody><tr><td>defaultNow</td><td>all types</td><td>use current time and date as default value</td></tr><tr><td>defaultActiveUser</td><td>all types</td><td>use active user as default value</td></tr><tr><td>fields</td><td>TimeSpan</td><td>number of fields</td></tr><tr><td>height</td><td>Text long</td><td></td></tr><tr><td>linkName</td><td>Dynamic link</td><td></td></tr><tr><td>linkValue</td><td>Dynamic link</td><td>url</td></tr><tr><td>onlyLeafNode</td><td>Extra table relation</td><td></td></tr><tr><td>precision</td><td>Float</td><td>number of decimals</td></tr><tr><td>option</td><td>Text long, Text short</td><td></td></tr><tr><td>useDays</td><td>TimeSpan</td><td></td></tr><tr><td>useHours</td><td>TimeSpan</td><td></td></tr><tr><td>useMinutes</td><td>TimeSpan</td><td></td></tr><tr><td>useTextArea</td><td>Text long</td><td></td></tr><tr><td>targetLabel</td><td>Contact relation, Company relation, Request relation, Extra table relation</td><td>header</td></tr></tbody></table>\n"
  syntax: 
    content: String getParam(String parameter)
    parameters:
    - id: parameter
      type: CRMScript.Global.String
      description: "The info to get, see list of values."
    return:
      type: CRMScript.Global.String
      description:
  example: 
- uid: CRMScript.Native.ExtraFieldsInfo.getTableName()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getTableName()
  id: 'getTableName()'
  so.intellisense: ExtraFieldsInfo.getTableName
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getTableName()'
  nameWithType: ExtraFieldsInfo.getTableName()
  fullName: CRMScript.Native.ExtraFieldsInfo.getTableName()
  type: Method
  summary: "\nReturns the name of the table the current field belongs to.\n"
  remarks: 
  syntax: 
    content: String getTableName()
    parameters: []
    return:
      type: CRMScript.Global.String
      description: "The table the current field belongs to."
  example: 
  - "\n<pre><code>ExtraFieldsInfo e;\n\ne.getExtraFields(&quot;person&quot;);\nprint(e.TableName());\n\nWill print &quot;person&quot;.</code></pre>\n"
- uid: CRMScript.Native.ExtraFieldsInfo.getTicketChildrenFields()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.getTicketChildrenFields()
  id: 'getTicketChildrenFields()'
  so.intellisense: ExtraFieldsInfo.getTicketChildrenFields
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'getTicketChildrenFields()'
  nameWithType: ExtraFieldsInfo.getTicketChildrenFields()
  fullName: CRMScript.Native.ExtraFieldsInfo.getTicketChildrenFields()
  type: Method
  summary: "\nThis is a helper function for getting ticket relation fields. It is equivalent to calling getChildrenFields(18, 0).\n"
  remarks: 
  syntax: 
    content: Void getTicketChildrenFields()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.ExtraFieldsInfo.next()
  commentId: M:CRMScript.Native.ExtraFieldsInfo.next()
  id: 'next()'
  so.intellisense: ExtraFieldsInfo.next
  so.version: 4.0.0
  langs:
  - crmscript
  name: 'next()'
  nameWithType: ExtraFieldsInfo.next()
  fullName: CRMScript.Native.ExtraFieldsInfo.next()
  type: Method
  summary: "\nThis function moves to the next field in the result.\n"
  remarks: "\nA common usage is in the increment section in a for loop.\n"
  syntax: 
    content: Void next()
    parameters: []
    return:
      type: CRMScript.Global.Void
  example: 
  - "\n<pre><code>ExtraFieldsInfo efi;\n\nfor (efi.getTicketChildrenFields(); !efi.eof(); efi.next())\n{\n  // do something with information from efi\n}</code></pre>\n"
references:
- uid: CRMScript.Native.ExtraFieldsInfo
  commentId: T:CRMScript.Native.ExtraFieldsInfo
  isExternal: true
  name: ExtraFieldsInfo
  nameWithType: ExtraFieldsInfo
  fullName: CRMScript.Native.ExtraFieldsInfo
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
- uid: CRMScript.Global.Void
  commentId: T:CRMScript.Global.Void
  isExternal: true
  name: Void
  nameWithType: Void
  fullName: CRMScript.Global.Void