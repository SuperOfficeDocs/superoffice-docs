### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.IForeignSystemAgent
  commentId: T:SuperOffice.CRM.Services.IForeignSystemAgent
  id: IForeignSystemAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier(System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity
  - SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier(System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity(System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName(System.String,System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity(System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName(System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices(System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys(System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier(System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName(System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys(System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier(System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable(System.String,System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId(System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity(System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice(System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetKey(System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue(System.String,System.String,System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue(System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  - SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier(System.String,System.String,System.String,SuperOffice.CRM.Services.ForeignDevice)
  - SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity(SuperOffice.CRM.Services.ForeignAppEntity)
  - SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  - SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: IForeignSystemAgent
  nameWithType: IForeignSystemAgent
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the ForeignSystem Agent\nCollection of all services that works with Foreign key data (Key/Value pairs)\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (ForeignSystemAgent agent = new ForeignSystemAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("ForeignSystem Agent", "Interface for the ForeignSystem Agent. Collection of all services that works with Foreign key data (Key/Value pairs)")]

      public interface IForeignSystemAgent : IAgent
    content.vb: >-
      <Agent("ForeignSystem Agent", "Interface for the ForeignSystem Agent. Collection of all services that works with Foreign key data (Key/Value pairs)")>

      Public Interface IForeignSystemAgent

          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: ForeignSystem Agent
    - type: System.String
      value: Interface for the ForeignSystem Agent. Collection of all services that works with Foreign key data (Key/Value pairs)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity
  id: CreateDefaultForeignAppEntity
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultForeignAppEntity()
  nameWithType: IForeignSystemAgent.CreateDefaultForeignAppEntity()
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new ForeignAppEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: ForeignAppEntity CreateDefaultForeignAppEntity()
    return:
      type: SuperOffice.CRM.Services.ForeignAppEntity
      description: New ForeignAppEntity with default values
    content.vb: Function CreateDefaultForeignAppEntity As ForeignAppEntity
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity(SuperOffice.CRM.Services.ForeignAppEntity)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity(SuperOffice.CRM.Services.ForeignAppEntity)
  id: SaveForeignAppEntity(SuperOffice.CRM.Services.ForeignAppEntity)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: SaveForeignAppEntity(ForeignAppEntity)
  nameWithType: IForeignSystemAgent.SaveForeignAppEntity(ForeignAppEntity)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity(SuperOffice.CRM.Services.ForeignAppEntity)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing ForeignAppEntity or creates a new ForeignAppEntity if the id parameter is empty\n"
  syntax:
    content: ForeignAppEntity SaveForeignAppEntity(ForeignAppEntity foreignAppEntity)
    parameters:
    - id: foreignAppEntity
      type: SuperOffice.CRM.Services.ForeignAppEntity
      description: The ForeignAppEntity that is saved.
    return:
      type: SuperOffice.CRM.Services.ForeignAppEntity
      description: New or updated ForeignAppEntity
    content.vb: Function SaveForeignAppEntity(foreignAppEntity As ForeignAppEntity) As ForeignAppEntity
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity(System.Int32)
  id: DeleteForeignAppEntity(System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: DeleteForeignAppEntity(Int32)
  nameWithType: IForeignSystemAgent.DeleteForeignAppEntity(Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes the ForeignAppEntity\n"
  syntax:
    content: void DeleteForeignAppEntity(int foreignAppEntityId)
    parameters:
    - id: foreignAppEntityId
      type: System.Int32
      description: The identity of the ForeignAppEntity
    content.vb: Sub DeleteForeignAppEntity(foreignAppEntityId As Integer)
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity(System.Int32)
  id: GetForeignAppEntity(System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetForeignAppEntity(Int32)
  nameWithType: IForeignSystemAgent.GetForeignAppEntity(Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ForeignAppEntity object.                        \n"
  syntax:
    content: ForeignAppEntity GetForeignAppEntity(int foreignAppEntityId)
    parameters:
    - id: foreignAppEntityId
      type: System.Int32
      description: The identifier of the ForeignAppEntity object
    return:
      type: SuperOffice.CRM.Services.ForeignAppEntity
      description: ForeignAppEntity
    content.vb: Function GetForeignAppEntity(foreignAppEntityId As Integer) As ForeignAppEntity
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName(System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName(System.String)
  id: GetAppByName(System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetAppByName(String)
  nameWithType: IForeignSystemAgent.GetAppByName(String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets the ForeignApp with the given name.\n"
  syntax:
    content: ForeignAppEntity GetAppByName(string applicationName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    return:
      type: SuperOffice.CRM.Services.ForeignAppEntity
      description: The ForeignApp that matches the name.
    content.vb: Function GetAppByName(applicationName As String) As ForeignAppEntity
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices(System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices(System.String)
  id: GetApplicationDevices(System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetApplicationDevices(String)
  nameWithType: IForeignSystemAgent.GetApplicationDevices(String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets all devices that belong to a foreign application.\n"
  syntax:
    content: ForeignDevice[] GetApplicationDevices(string applicationName)
    parameters:
    - id: applicationName
      type: System.String
      description: The foreign application name
    return:
      type: SuperOffice.CRM.Services.ForeignDevice[]
      description: Array of ForeignDevices
    content.vb: Function GetApplicationDevices(applicationName As String) As ForeignDevice()
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName(System.String,System.String)
  id: GetDeviceByName(System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetDeviceByName(String, String)
  nameWithType: IForeignSystemAgent.GetDeviceByName(String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ForeignDevice with deviceName that belongs to the application with applicationName.\n"
  syntax:
    content: ForeignDevice GetDeviceByName(string applicationName, string deviceName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    return:
      type: SuperOffice.CRM.Services.ForeignDevice
      description: The ForeignDevice.
    content.vb: Function GetDeviceByName(applicationName As String, deviceName As String) As ForeignDevice
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier(System.String,System.String,System.String)
  id: GetDeviceByIdentifier(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetDeviceByIdentifier(String, String, String)
  nameWithType: IForeignSystemAgent.GetDeviceByIdentifier(String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier(System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.\n"
  syntax:
    content: ForeignDevice GetDeviceByIdentifier(string applicationName, string deviceName, string deviceIdentifier)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Optional unique id of device (Palm pilot device ID, version number, etc)
    return:
      type: SuperOffice.CRM.Services.ForeignDevice
      description: The ForeignDevice.
    content.vb: Function GetDeviceByIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String) As ForeignDevice
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier(System.String,System.String,System.String)
  id: AddDeviceByIdentifier(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: AddDeviceByIdentifier(String, String, String)
  nameWithType: IForeignSystemAgent.AddDeviceByIdentifier(String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier(System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nAdds a new ForeignDevice with deviceName that belongs to the application with applicationName, with an optional device-specific identifier.\n"
  syntax:
    content: ForeignDevice AddDeviceByIdentifier(string applicationName, string deviceName, string deviceIdentifier)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Unique id of device (Palm pilot device ID, version number, etc)
    return:
      type: SuperOffice.CRM.Services.ForeignDevice
      description: The ForeignDevice.
    content.vb: Function AddDeviceByIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String) As ForeignDevice
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier(System.String,System.String,System.String,SuperOffice.CRM.Services.ForeignDevice)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier(System.String,System.String,System.String,SuperOffice.CRM.Services.ForeignDevice)
  id: SaveDeviceByIdentifier(System.String,System.String,System.String,SuperOffice.CRM.Services.ForeignDevice)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: SaveDeviceByIdentifier(String, String, String, ForeignDevice)
  nameWithType: IForeignSystemAgent.SaveDeviceByIdentifier(String, String, String, ForeignDevice)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier(System.String, System.String, System.String, SuperOffice.CRM.Services.ForeignDevice)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates a ForeignDevice with deviceName that belongs to the application with applicationName.\n"
  syntax:
    content: ForeignDevice SaveDeviceByIdentifier(string applicationName, string deviceName, string deviceIdentifier, ForeignDevice foreignDevice)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Unique id of device (Palm pilot device ID, version number, etc)
    - id: foreignDevice
      type: SuperOffice.CRM.Services.ForeignDevice
      description: Foreign device to save. Can be null if adding new device.
    return:
      type: SuperOffice.CRM.Services.ForeignDevice
      description: The ForeignDevice.
    content.vb: Function SaveDeviceByIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String, foreignDevice As ForeignDevice) As ForeignDevice
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier(System.String,System.String,System.String)
  id: DeleteDeviceByIdentifier(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: DeleteDeviceByIdentifier(String, String, String)
  nameWithType: IForeignSystemAgent.DeleteDeviceByIdentifier(String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier(System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.\n"
  syntax:
    content: void DeleteDeviceByIdentifier(string applicationName, string deviceName, string deviceIdentifier)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Unique id of device (Palm pilot device ID, version number, etc)
    content.vb: Sub DeleteDeviceByIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String)
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKey(System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetKey(System.String,System.String,System.String,System.String,System.Int32)
  id: GetKey(System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetKey(String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.GetKey(String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKey(System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturning a foreign key by its key name, that belongs to the specified device and application. A table name and record ID can also be specified.\n"
  syntax:
    content: ForeignKey GetKey(string applicationName, string deviceName, string keyName, string tableName, int recordId)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: keyName
      type: System.String
      description: The name of the foreign key.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
    return:
      type: SuperOffice.CRM.Services.ForeignKey
      description: The ForeignKey.
    content.vb: Function GetKey(applicationName As String, deviceName As String, keyName As String, tableName As String, recordId As Integer) As ForeignKey
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetKey*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue(System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue(System.String,System.String,System.String,System.String,System.Int32)
  id: GetKeyValue(System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetKeyValue(String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.GetKeyValue(String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue(System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets the string value of a ForeignKey, that belongs to the specified device and application. The table name and record ID must also be specified.\n"
  syntax:
    content: string GetKeyValue(string applicationName, string deviceName, string keyName, string tableName, int recordId)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: keyName
      type: System.String
      description: The name of the foreign key.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
    return:
      type: System.String
      description: The ForeignKey value as string.
    content.vb: Function GetKeyValue(applicationName As String, deviceName As String, keyName As String, tableName As String, recordId As Integer) As String
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  id: GetKeyOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetKeyOnDeviceIdentifier(String, String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.GetKeyOnDeviceIdentifier(String, String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier(System.String, System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturning a foreign key by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.\n"
  syntax:
    content: ForeignKey GetKeyOnDeviceIdentifier(string applicationName, string deviceName, string deviceIdentifier, string keyName, string tableName, int recordId)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier.
    - id: keyName
      type: System.String
      description: The name of the foreign key.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
    return:
      type: SuperOffice.CRM.Services.ForeignKey
      description: The ForeignKey.
    content.vb: Function GetKeyOnDeviceIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String, keyName As String, tableName As String, recordId As Integer) As ForeignKey
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  id: GetKeyValueOnDeviceIdentifier(System.String,System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetKeyValueOnDeviceIdentifier(String, String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.GetKeyValueOnDeviceIdentifier(String, String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier(System.String, System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturning a foreign key string value by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.\n"
  syntax:
    content: string GetKeyValueOnDeviceIdentifier(string applicationName, string deviceName, string deviceIdentifier, string keyName, string tableName, int recordId)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier.
    - id: keyName
      type: System.String
      description: The name of the foreign key.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
    return:
      type: System.String
      description: The ForeignKey&apos;s string value.
    content.vb: Function GetKeyValueOnDeviceIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String, keyName As String, tableName As String, recordId As Integer) As String
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  id: AddForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: AddForeignKey(ForeignKey, String, String, String)
  nameWithType: IForeignSystemAgent.AddForeignKey(ForeignKey, String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey(SuperOffice.CRM.Services.ForeignKey, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nAdd a new key belonging to the ForeignApp and ForeignDevice specified.\n"
  syntax:
    content: ForeignKey AddForeignKey(ForeignKey foreignKey, string applicationName, string deviceName, string deviceIdentifier)
    parameters:
    - id: foreignKey
      type: SuperOffice.CRM.Services.ForeignKey
      description: Foreign key to save
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier. Optional if device identifier is not used.
    return:
      type: SuperOffice.CRM.Services.ForeignKey
      description: The new or updated ForeignKey
    content.vb: Function AddForeignKey(foreignKey As ForeignKey, applicationName As String, deviceName As String, deviceIdentifier As String) As ForeignKey
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  id: SaveForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: SaveForeignKey(ForeignKey, String, String, String)
  nameWithType: IForeignSystemAgent.SaveForeignKey(ForeignKey, String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey(SuperOffice.CRM.Services.ForeignKey, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves a key belonging to the ForeignApp and ForeignDevice specified.\n"
  syntax:
    content: ForeignKey SaveForeignKey(ForeignKey foreignKey, string applicationName, string deviceName, string deviceIdentifier)
    parameters:
    - id: foreignKey
      type: SuperOffice.CRM.Services.ForeignKey
      description: Foreign key to save
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier. Optional if device identifier is not used.
    return:
      type: SuperOffice.CRM.Services.ForeignKey
      description: The new or updated ForeignKey
    content.vb: Function SaveForeignKey(foreignKey As ForeignKey, applicationName As String, deviceName As String, deviceIdentifier As String) As ForeignKey
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName(System.String,System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName(System.String,System.String,System.String,System.String,System.String,System.Int32)
  id: DeleteForeignKeyOnName(System.String,System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: DeleteForeignKeyOnName(String, String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.DeleteForeignKeyOnName(String, String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName(System.String, System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.\n"
  syntax:
    content: void DeleteForeignKeyOnName(string applicationName, string deviceName, string deviceIdentifier, string keyName, string tableName, int recordId)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier. Optional if device identifier is not used.
    - id: keyName
      type: System.String
      description: The name of the foreign key to delete.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.&lt;p/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.
    content.vb: Sub DeleteForeignKeyOnName(applicationName As String, deviceName As String, deviceIdentifier As String, keyName As String, tableName As String, recordId As Integer)
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue(System.String,System.String,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue(System.String,System.String,System.String,System.String,System.String)
  id: GetKeyByValue(System.String,System.String,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetKeyByValue(String, String, String, String, String)
  nameWithType: IForeignSystemAgent.GetKeyByValue(String, String, String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue(System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a foreignkey based on its name and value, that belongs to the specified device and application.\n"
  syntax:
    content: ForeignKey GetKeyByValue(string applicationName, string deviceName, string keyName, string keyValue, string tableName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: keyName
      type: System.String
      description: The name of the foreign key.
    - id: keyValue
      type: System.String
      description: Foreignkey value
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    return:
      type: SuperOffice.CRM.Services.ForeignKey
      description: The ForeignKey.
    content.vb: Function GetKeyByValue(applicationName As String, deviceName As String, keyName As String, keyValue As String, tableName As String) As ForeignKey
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)
  id: GetKeyByValueAndIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetKeyByValueAndIdentifier(String, String, String, String, String, String)
  nameWithType: IForeignSystemAgent.GetKeyByValueAndIdentifier(String, String, String, String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier(System.String, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a foreignkey based on its name and value, that belongs to the specified deviceId, device, and application.\n"
  syntax:
    content: ForeignKey GetKeyByValueAndIdentifier(string applicationName, string deviceName, string deviceIdentifier, string keyName, string keyValue, string tableName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier. Optional if device identifier is not used.
    - id: keyName
      type: System.String
      description: The name of the foreign key.
    - id: keyValue
      type: System.String
      description: Foreignkey value
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    return:
      type: SuperOffice.CRM.Services.ForeignKey
      description: The ForeignKey.
    content.vb: Function GetKeyByValueAndIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String, keyName As String, keyValue As String, tableName As String) As ForeignKey
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity(System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity(System.String,System.Int32)
  id: GetAllForeignKeysOnEntity(System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetAllForeignKeysOnEntity(String, Int32)
  nameWithType: IForeignSystemAgent.GetAllForeignKeysOnEntity(String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity(System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list of foreignkeys (&apos;app.device.key&apos;) and their values (&apos;123&apos;) that belong to the specified entity.\n"
  syntax:
    content: StringDictionary GetAllForeignKeysOnEntity(string entityType, int entityId)
    parameters:
    - id: entityType
      type: System.String
      description: 'Entity type (table name): &apos;contact&apos;, &apos;project&apos; etc.'
    - id: entityId
      type: System.Int32
      description: Primary key of Entity
    return:
      type: SuperOffice.CRM.Services.StringDictionary
      description: Dictionary of &apos;appname.deviceid.keyname&apos; = &apos;123&apos; key values
    content.vb: Function GetAllForeignKeysOnEntity(entityType As String, entityId As Integer) As StringDictionary
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice(System.Int32)
  id: GetForeignDevice(System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetForeignDevice(Int32)
  nameWithType: IForeignSystemAgent.GetForeignDevice(Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ForeignDevice object.                        \n"
  syntax:
    content: ForeignDevice GetForeignDevice(int foreignDeviceId)
    parameters:
    - id: foreignDeviceId
      type: System.Int32
      description: The identifier of the ForeignDevice object
    return:
      type: SuperOffice.CRM.Services.ForeignDevice
      description: ForeignDevice
    content.vb: Function GetForeignDevice(foreignDeviceId As Integer) As ForeignDevice
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  id: SaveForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: SaveForeignDevice(ForeignDevice, String)
  nameWithType: IForeignSystemAgent.SaveForeignDevice(ForeignDevice, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice(SuperOffice.CRM.Services.ForeignDevice, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves a foreign device for an foreign application\n"
  syntax:
    content: ForeignDevice SaveForeignDevice(ForeignDevice foreignDevice, string applicationName)
    parameters:
    - id: foreignDevice
      type: SuperOffice.CRM.Services.ForeignDevice
      description: Foreign device to save
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    return:
      type: SuperOffice.CRM.Services.ForeignDevice
      description: Returns the saved foreign device
    content.vb: Function SaveForeignDevice(foreignDevice As ForeignDevice, applicationName As String) As ForeignDevice
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  id: DeleteForeignDevice(SuperOffice.CRM.Services.ForeignDevice,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: DeleteForeignDevice(ForeignDevice, String)
  nameWithType: IForeignSystemAgent.DeleteForeignDevice(ForeignDevice, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice(SuperOffice.CRM.Services.ForeignDevice, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes a foreign device from an application\n"
  syntax:
    content: void DeleteForeignDevice(ForeignDevice foreignDevice, string applicationName)
    parameters:
    - id: foreignDevice
      type: SuperOffice.CRM.Services.ForeignDevice
      description: foreign device to delete
    - id: applicationName
      type: System.String
      description: Name of application to delete from
    content.vb: Sub DeleteForeignDevice(foreignDevice As ForeignDevice, applicationName As String)
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String,System.String,System.Int32)
  id: DeleteForeignKey(SuperOffice.CRM.Services.ForeignKey,System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: DeleteForeignKey(ForeignKey, String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.DeleteForeignKey(ForeignKey, String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey(SuperOffice.CRM.Services.ForeignKey, System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.\n"
  syntax:
    content: void DeleteForeignKey(ForeignKey foreignKey, string applicationName, string deviceName, string deviceIdentifier, string tableName, int recordId)
    parameters:
    - id: foreignKey
      type: SuperOffice.CRM.Services.ForeignKey
      description: Key name to delete.
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: The device identifier. Optional if device identifier is not used.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.&lt;p/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.
    content.vb: Sub DeleteForeignKey(foreignKey As ForeignKey, applicationName As String, deviceName As String, deviceIdentifier As String, tableName As String, recordId As Integer)
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys(System.String,System.String)
  id: GetDeviceKeys(System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetDeviceKeys(String, String)
  nameWithType: IForeignSystemAgent.GetDeviceKeys(String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns all ForeignKeys that belong to a device.\n"
  syntax:
    content: ForeignKey[] GetDeviceKeys(string applicationName, string deviceName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    return:
      type: SuperOffice.CRM.Services.ForeignKey[]
      description: Array of all ForeignKeys in the ForeignDevice.
    content.vb: Function GetDeviceKeys(applicationName As String, deviceName As String) As ForeignKey()
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys(System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys(System.String)
  id: GetApplicationKeys(System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetApplicationKeys(String)
  nameWithType: IForeignSystemAgent.GetApplicationKeys(String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns all ForeignKeys that belong to an application.\n"
  syntax:
    content: ForeignKey[] GetApplicationKeys(string applicationName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    return:
      type: SuperOffice.CRM.Services.ForeignKey[]
      description: Array of all ForeignKeys in the ForeignApp.
    content.vb: Function GetApplicationKeys(applicationName As String) As ForeignKey()
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier(System.String,System.String,System.String)
  id: GetDeviceKeysOnDeviceIdentifier(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetDeviceKeysOnDeviceIdentifier(String, String, String)
  nameWithType: IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier(String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier(System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns all ForeignKeys that belong to a device with a given deviceIdentifier.\n"
  syntax:
    content: ForeignKey[] GetDeviceKeysOnDeviceIdentifier(string applicationName, string deviceName, string deviceIdentifier)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Identifier for a unique grouping of keys within a device.
    return:
      type: SuperOffice.CRM.Services.ForeignKey[]
      description: Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
    content.vb: Function GetDeviceKeysOnDeviceIdentifier(applicationName As String, deviceName As String, deviceIdentifier As String) As ForeignKey()
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable(System.String,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable(System.String,System.String,System.String,System.String)
  id: GetDeviceKeysOnDeviceIdentifierTable(System.String,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetDeviceKeysOnDeviceIdentifierTable(String, String, String, String)
  nameWithType: IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable(String, String, String, String)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable(System.String, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns all ForeignKeys that belong to a device with a given deviceIdentifier and table name.\n"
  syntax:
    content: ForeignKey[] GetDeviceKeysOnDeviceIdentifierTable(string applicationName, string deviceName, string deviceIdentifier, string tableName)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Identifier for a unique grouping of keys within a device.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    return:
      type: SuperOffice.CRM.Services.ForeignKey[]
      description: Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.
    content.vb: Function GetDeviceKeysOnDeviceIdentifierTable(applicationName As String, deviceName As String, deviceIdentifier As String, tableName As String) As ForeignKey()
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable*
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId(System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId(System.String,System.String,System.String,System.String,System.Int32)
  id: GetDeviceKeysOnDeviceIdentifierTableRecordId(System.String,System.String,System.String,System.String,System.Int32)
  parent: SuperOffice.CRM.Services.IForeignSystemAgent
  langs:
  - csharp
  - vb
  name: GetDeviceKeysOnDeviceIdentifierTableRecordId(String, String, String, String, Int32)
  nameWithType: IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId(String, String, String, String, Int32)
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId(System.String, System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns all ForeignKeys that belong to a device with a given deviceIdentifier and table name, as well as record id.\n"
  syntax:
    content: ForeignKey[] GetDeviceKeysOnDeviceIdentifierTableRecordId(string applicationName, string deviceName, string deviceIdentifier, string tableName, int recordId)
    parameters:
    - id: applicationName
      type: System.String
      description: The name of the foreign application.
    - id: deviceName
      type: System.String
      description: The name of the foreign device.
    - id: deviceIdentifier
      type: System.String
      description: Identifier for a unique grouping of keys within a device.
    - id: tableName
      type: System.String
      description: Table name, transformed to and from numeric table id by the service layer.&lt;p/>Use an empty string to indicate that your key is not bound to any specific table.
    - id: recordId
      type: System.Int32
      description: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.
    return:
      type: SuperOffice.CRM.Services.ForeignKey[]
      description: Array of all ForeignKeys in the ForeignDevice that match the criteria
    content.vb: Function GetDeviceKeysOnDeviceIdentifierTableRecordId(applicationName As String, deviceName As String, deviceIdentifier As String, tableName As String, recordId As Integer) As ForeignKey()
  overload: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId*
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity
  isExternal: true
  name: CreateDefaultForeignAppEntity
  nameWithType: IForeignSystemAgent.CreateDefaultForeignAppEntity
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.CreateDefaultForeignAppEntity
- uid: SuperOffice.CRM.Services.ForeignAppEntity
  commentId: T:SuperOffice.CRM.Services.ForeignAppEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ForeignAppEntity
  nameWithType: ForeignAppEntity
  fullName: SuperOffice.CRM.Services.ForeignAppEntity
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity
  isExternal: true
  name: SaveForeignAppEntity
  nameWithType: IForeignSystemAgent.SaveForeignAppEntity
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignAppEntity
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity
  isExternal: true
  name: DeleteForeignAppEntity
  nameWithType: IForeignSystemAgent.DeleteForeignAppEntity
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignAppEntity
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity
  isExternal: true
  name: GetForeignAppEntity
  nameWithType: IForeignSystemAgent.GetForeignAppEntity
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignAppEntity
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName
  isExternal: true
  name: GetAppByName
  nameWithType: IForeignSystemAgent.GetAppByName
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetAppByName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices
  isExternal: true
  name: GetApplicationDevices
  nameWithType: IForeignSystemAgent.GetApplicationDevices
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationDevices
- uid: SuperOffice.CRM.Services.ForeignDevice[]
  isExternal: true
  name: ForeignDevice[]
  nameWithType: ForeignDevice[]
  fullName: SuperOffice.CRM.Services.ForeignDevice[]
  nameWithType.vb: ForeignDevice()
  fullName.vb: SuperOffice.CRM.Services.ForeignDevice()
  name.vb: ForeignDevice()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.ForeignDevice
    name: ForeignDevice
    nameWithType: ForeignDevice
    fullName: SuperOffice.CRM.Services.ForeignDevice
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.ForeignDevice
    name: ForeignDevice
    nameWithType: ForeignDevice
    fullName: SuperOffice.CRM.Services.ForeignDevice
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName
  isExternal: true
  name: GetDeviceByName
  nameWithType: IForeignSystemAgent.GetDeviceByName
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByName
- uid: SuperOffice.CRM.Services.ForeignDevice
  commentId: T:SuperOffice.CRM.Services.ForeignDevice
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ForeignDevice
  nameWithType: ForeignDevice
  fullName: SuperOffice.CRM.Services.ForeignDevice
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier
  isExternal: true
  name: GetDeviceByIdentifier
  nameWithType: IForeignSystemAgent.GetDeviceByIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceByIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier
  isExternal: true
  name: AddDeviceByIdentifier
  nameWithType: IForeignSystemAgent.AddDeviceByIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.AddDeviceByIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier
  isExternal: true
  name: SaveDeviceByIdentifier
  nameWithType: IForeignSystemAgent.SaveDeviceByIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveDeviceByIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier
  isExternal: true
  name: DeleteDeviceByIdentifier
  nameWithType: IForeignSystemAgent.DeleteDeviceByIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteDeviceByIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKey*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetKey
  isExternal: true
  name: GetKey
  nameWithType: IForeignSystemAgent.GetKey
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKey
- uid: SuperOffice.CRM.Services.ForeignKey
  commentId: T:SuperOffice.CRM.Services.ForeignKey
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ForeignKey
  nameWithType: ForeignKey
  fullName: SuperOffice.CRM.Services.ForeignKey
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue
  isExternal: true
  name: GetKeyValue
  nameWithType: IForeignSystemAgent.GetKeyValue
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValue
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier
  isExternal: true
  name: GetKeyOnDeviceIdentifier
  nameWithType: IForeignSystemAgent.GetKeyOnDeviceIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyOnDeviceIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier
  isExternal: true
  name: GetKeyValueOnDeviceIdentifier
  nameWithType: IForeignSystemAgent.GetKeyValueOnDeviceIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyValueOnDeviceIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey
  isExternal: true
  name: AddForeignKey
  nameWithType: IForeignSystemAgent.AddForeignKey
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.AddForeignKey
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey
  isExternal: true
  name: SaveForeignKey
  nameWithType: IForeignSystemAgent.SaveForeignKey
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignKey
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName
  isExternal: true
  name: DeleteForeignKeyOnName
  nameWithType: IForeignSystemAgent.DeleteForeignKeyOnName
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKeyOnName
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue
  isExternal: true
  name: GetKeyByValue
  nameWithType: IForeignSystemAgent.GetKeyByValue
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValue
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier
  isExternal: true
  name: GetKeyByValueAndIdentifier
  nameWithType: IForeignSystemAgent.GetKeyByValueAndIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetKeyByValueAndIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity
  isExternal: true
  name: GetAllForeignKeysOnEntity
  nameWithType: IForeignSystemAgent.GetAllForeignKeysOnEntity
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetAllForeignKeysOnEntity
- uid: SuperOffice.CRM.Services.StringDictionary
  isExternal: true
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: SuperOffice.CRM.Services.StringDictionary
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice
  isExternal: true
  name: GetForeignDevice
  nameWithType: IForeignSystemAgent.GetForeignDevice
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetForeignDevice
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice
  isExternal: true
  name: SaveForeignDevice
  nameWithType: IForeignSystemAgent.SaveForeignDevice
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.SaveForeignDevice
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice
  isExternal: true
  name: DeleteForeignDevice
  nameWithType: IForeignSystemAgent.DeleteForeignDevice
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignDevice
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey
  isExternal: true
  name: DeleteForeignKey
  nameWithType: IForeignSystemAgent.DeleteForeignKey
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.DeleteForeignKey
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys
  isExternal: true
  name: GetDeviceKeys
  nameWithType: IForeignSystemAgent.GetDeviceKeys
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeys
- uid: SuperOffice.CRM.Services.ForeignKey[]
  isExternal: true
  name: ForeignKey[]
  nameWithType: ForeignKey[]
  fullName: SuperOffice.CRM.Services.ForeignKey[]
  nameWithType.vb: ForeignKey()
  fullName.vb: SuperOffice.CRM.Services.ForeignKey()
  name.vb: ForeignKey()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.ForeignKey
    name: ForeignKey
    nameWithType: ForeignKey
    fullName: SuperOffice.CRM.Services.ForeignKey
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.ForeignKey
    name: ForeignKey
    nameWithType: ForeignKey
    fullName: SuperOffice.CRM.Services.ForeignKey
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys
  isExternal: true
  name: GetApplicationKeys
  nameWithType: IForeignSystemAgent.GetApplicationKeys
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetApplicationKeys
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier
  isExternal: true
  name: GetDeviceKeysOnDeviceIdentifier
  nameWithType: IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable
  isExternal: true
  name: GetDeviceKeysOnDeviceIdentifierTable
  nameWithType: IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable
- uid: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId*
  commentId: Overload:SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId
  isExternal: true
  name: GetDeviceKeysOnDeviceIdentifierTableRecordId
  nameWithType: IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId
  fullName: SuperOffice.CRM.Services.IForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId
