### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.IContactAgent
  commentId: T:SuperOffice.CRM.Services.IContactAgent
  id: IContactAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.IContactAgent.AddPersonAsync(System.Int32,SuperOffice.CRM.Services.PersonEntity,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync(SuperOffice.CRM.Services.ContactEntity,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.CopyAsync(System.Int32,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync(SuperOffice.CRM.Services.DuplicateEntry,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetAddressAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetContactAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetContactListAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync(SuperOffice.CRM.Services.Util.ContactSourceType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync(System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.MergeAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync(SuperOffice.CRM.Services.DuplicateRule[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.UndeleteAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IContactAgent
  nameWithType: IContactAgent
  fullName: SuperOffice.CRM.Services.IContactAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the Contact Agent\nContact (company) data services.\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (ContactAgent agent = new ContactAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("Contact Agent", "Interface for the Contact Agent. Contact (company) data services.")]

      public interface IContactAgent : IAgent
    content.vb: >-
      <Agent("Contact Agent", "Interface for the Contact Agent. Contact (company) data services.")>

      Public Interface IContactAgent
          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Contact Agent
    - type: System.String
      value: Interface for the Contact Agent. Contact (company) data services.
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync(System.Threading.CancellationToken)
  id: CreateDefaultContactEntityAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultContactEntityAsync(CancellationToken)
  nameWithType: IContactAgent.CreateDefaultContactEntityAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new ContactEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<ContactEntity> CreateDefaultContactEntityAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
      description: New ContactEntity with default values
    content.vb: Function CreateDefaultContactEntityAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  id: SaveContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: SaveContactEntityAsync(ContactEntity, CancellationToken)
  nameWithType: IContactAgent.SaveContactEntityAsync(ContactEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync(SuperOffice.CRM.Services.ContactEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing ContactEntity or creates a new ContactEntity if the id parameter is empty\n"
  syntax:
    content: Task<ContactEntity> SaveContactEntityAsync(ContactEntity contactEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: contactEntity
      type: SuperOffice.CRM.Services.ContactEntity
      description: The ContactEntity that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
      description: New or updated ContactEntity
    content.vb: Function SaveContactEntityAsync(contactEntity As ContactEntity, cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: DeleteContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: DeleteContactEntityAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.DeleteContactEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes the ContactEntity\n"
  syntax:
    content: Task DeleteContactEntityAsync(int contactEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactEntityId
      type: System.Int32
      description: The identity of the ContactEntity
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteContactEntityAsync(contactEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync(System.Threading.CancellationToken)
  id: CreateDefaultPreviewContactAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultPreviewContactAsync(CancellationToken)
  nameWithType: IContactAgent.CreateDefaultPreviewContactAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new PreviewContact.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<PreviewContact> CreateDefaultPreviewContactAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.PreviewContact}
      description: New PreviewContact with default values
    content.vb: Function CreateDefaultPreviewContactAsync(cancellationToken As CancellationToken = Nothing) As Task(Of PreviewContact)
  overload: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactAsync(System.Int32,System.Threading.CancellationToken)
  id: GetContactAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetContactAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a Contact object.                        \n"
  syntax:
    content: Task<Contact> GetContactAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: The identifier of the Contact object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact}
      description: Contact
    content.vb: Function GetContactAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Contact)
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction,System.Threading.CancellationToken)
  id: GetMyActiveContactsAsync(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyActiveContactsAsync(DateTime, Int32[], ContactAction, CancellationToken)
  nameWithType: IContactAgent.GetMyActiveContactsAsync(DateTime, Int32[], ContactAction, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync(System.DateTime, System.Int32[], SuperOffice.CRM.Services.Util.ContactAction, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns the contacts where there has been activity since activityStartTime. If activityStartTime is larger than the current date, all contacts with activity since last log-out are returned. The result set can be filtered by category and action type.\n"
  syntax:
    content: Task<ContactActivity[]> GetMyActiveContactsAsync(DateTime activityStartTime, int[] contactCategories, ContactAction actionType, CancellationToken cancellationToken = null)
    parameters:
    - id: activityStartTime
      type: System.DateTime
      description: The start time of the activities. If the start time is set to a future date; activites since the user last logged out are returned.
    - id: contactCategories
      type: System.Int32[]
      description: Integer array of categories to filter on. If the array is empty contacts from all categories will be selected.
    - id: actionType
      type: SuperOffice.CRM.Services.Util.ContactAction
      description: The type of action that has occured. E.g. updates, deletes, new appointments, etc.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactActivity[]}
      description: Array of contacts where there have been activity in the period.
    content.vb: Function GetMyActiveContactsAsync(activityStartTime As DateTime, contactCategories As Integer(), actionType As ContactAction, cancellationToken As CancellationToken = Nothing) As Task(Of ContactActivity())
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync*
  nameWithType.vb: IContactAgent.GetMyActiveContactsAsync(DateTime, Int32(), ContactAction, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync(System.DateTime, System.Int32(), SuperOffice.CRM.Services.Util.ContactAction, System.Threading.CancellationToken)
  name.vb: GetMyActiveContactsAsync(DateTime, Int32(), ContactAction, CancellationToken)
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: GetContactEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactEntityAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetContactEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ContactEntity object.                        \n"
  syntax:
    content: Task<ContactEntity> GetContactEntityAsync(int contactEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactEntityId
      type: System.Int32
      description: The identifier of the ContactEntity object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
      description: ContactEntity
    content.vb: Function GetContactEntityAsync(contactEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.UndeleteAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.UndeleteAsync(System.Int32,System.Threading.CancellationToken)
  id: UndeleteAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: UndeleteAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.UndeleteAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.UndeleteAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nThis entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record\n"
  syntax:
    content: Task UndeleteAsync(int id, CancellationToken cancellationToken = null)
    parameters:
    - id: id
      type: System.Int32
      description: The primary key of the entity to undelete
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function UndeleteAsync(id As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IContactAgent.UndeleteAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync(System.Int32,System.Threading.CancellationToken)
  id: GetPersonsAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetPersonsAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetPersonsAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns an array of all the contact persons for the company card.\n"
  syntax:
    content: Task<Person[]> GetPersonsAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Person[]}
      description: Array of Persons
    content.vb: Function GetPersonsAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Person())
  overload: SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync(System.Int32,System.Threading.CancellationToken)
  id: GetContactWithPersonsAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactWithPersonsAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetContactWithPersonsAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns the contact with all the contact persons belonging to the contact\n"
  syntax:
    content: Task<ContactEntity> GetContactWithPersonsAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: The id of the contact.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
      description: ContactEntity with all data and persons.
    content.vb: Function GetContactWithPersonsAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync(System.Threading.CancellationToken)
  id: GetMyContactAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyContactAsync(CancellationToken)
  nameWithType: IContactAgent.GetMyContactAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets the contact belonging to the currently logged on user.\n"
  syntax:
    content: Task<ContactEntity> GetMyContactAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
      description: The Contact
    content.vb: Function GetMyContactAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync(System.Threading.CancellationToken)
  id: GetMyBizCardAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyBizCardAsync(CancellationToken)
  nameWithType: IContactAgent.GetMyBizCardAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns all data needed to display the logged on person&apos;s business card. That is company, person, and company interest data.\n"
  syntax:
    content: Task<ContactEntity> GetMyBizCardAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
      description: The contact object with persons and interests
    content.vb: Function GetMyBizCardAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync(SuperOffice.CRM.Services.ContactEntity,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync(SuperOffice.CRM.Services.ContactEntity,System.Int32,System.Threading.CancellationToken)
  id: ChangeCountryAsync(SuperOffice.CRM.Services.ContactEntity,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: ChangeCountryAsync(ContactEntity, Int32, CancellationToken)
  nameWithType: IContactAgent.ChangeCountryAsync(ContactEntity, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync(SuperOffice.CRM.Services.ContactEntity, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange country regenerates the default values and localized information such as phone number and address format\n"
  syntax:
    content: Task<ContactEntity> ChangeCountryAsync(ContactEntity contactEntity, int toCountryId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactEntity
      type: SuperOffice.CRM.Services.ContactEntity
    - id: toCountryId
      type: System.Int32
      description: The country to switch to
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
    content.vb: Function ChangeCountryAsync(contactEntity As ContactEntity, toCountryId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ContactEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddressAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetAddressAsync(System.Int32,System.Threading.CancellationToken)
  id: GetAddressAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetAddressAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetAddressAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddressAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets the contact&apos;s localized address.\n"
  syntax:
    content: Task<Address> GetAddressAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact id
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address}
      description: The address as LocalizedField[][].
    content.vb: Function GetAddressAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Address)
  overload: SuperOffice.CRM.Services.IContactAgent.GetAddressAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetAddressByCountryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetAddressByCountryAsync(Int32, Int32, CancellationToken)
  nameWithType: IContactAgent.GetAddressByCountryAsync(Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets the contact&apos;s localized address.\n"
  syntax:
    content: Task<Address> GetAddressByCountryAsync(int contactId, int countryId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact id
    - id: countryId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address}
      description: The address as LocalizedField[][].
    content.vb: Function GetAddressByCountryAsync(contactId As Integer, countryId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Address)
  overload: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.AddPersonAsync(System.Int32,SuperOffice.CRM.Services.PersonEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.AddPersonAsync(System.Int32,SuperOffice.CRM.Services.PersonEntity,System.Threading.CancellationToken)
  id: AddPersonAsync(System.Int32,SuperOffice.CRM.Services.PersonEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: AddPersonAsync(Int32, PersonEntity, CancellationToken)
  nameWithType: IContactAgent.AddPersonAsync(Int32, PersonEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.AddPersonAsync(System.Int32, SuperOffice.CRM.Services.PersonEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nAdd a person to the given contact\n"
  syntax:
    content: Task<PersonEntity> AddPersonAsync(int contactId, PersonEntity newPersonEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact to add person to
    - id: newPersonEntity
      type: SuperOffice.CRM.Services.PersonEntity
      description: Person object to add
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.PersonEntity}
      description: Updated person object
    content.vb: Function AddPersonAsync(contactId As Integer, newPersonEntity As PersonEntity, cancellationToken As CancellationToken = Nothing) As Task(Of PersonEntity)
  overload: SuperOffice.CRM.Services.IContactAgent.AddPersonAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync(System.String,System.Threading.CancellationToken)
  id: GetDuplicatesAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetDuplicatesAsync(String, CancellationToken)
  nameWithType: IContactAgent.GetDuplicatesAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet duplicates (exact or similar in the database) based on the name\n"
  syntax:
    content: Task<DuplicateEntry[]> GetDuplicatesAsync(string name, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: Name used for lookup
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateEntry[]}
      description: Any records matching the specified name
    content.vb: Function GetDuplicatesAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of DuplicateEntry())
  overload: SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync(SuperOffice.CRM.Services.DuplicateEntry,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync(SuperOffice.CRM.Services.DuplicateEntry,System.Threading.CancellationToken)
  id: CreateNewEntryAsync(SuperOffice.CRM.Services.DuplicateEntry,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CreateNewEntryAsync(DuplicateEntry, CancellationToken)
  nameWithType: IContactAgent.CreateNewEntryAsync(DuplicateEntry, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync(SuperOffice.CRM.Services.DuplicateEntry, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreates a new contact based on external duplicate\n"
  syntax:
    content: Task<int> CreateNewEntryAsync(DuplicateEntry duplicate, CancellationToken cancellationToken = null)
    parameters:
    - id: duplicate
      type: SuperOffice.CRM.Services.DuplicateEntry
      description: The duplicate to create a new entry based upon
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The database identity of the newly created entry
    content.vb: Function CreateNewEntryAsync(duplicate As DuplicateEntry, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync(System.Threading.CancellationToken)
  id: GetDuplicateRulesAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetDuplicateRulesAsync(CancellationToken)
  nameWithType: IContactAgent.GetDuplicateRulesAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRetrieve all available duplicate rules for contact\n"
  syntax:
    content: Task<DuplicateRule[]> GetDuplicateRulesAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateRule[]}
      description: All available duplicate rules
    content.vb: Function GetDuplicateRulesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of DuplicateRule())
  overload: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync(SuperOffice.CRM.Services.DuplicateRule[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync(SuperOffice.CRM.Services.DuplicateRule[],System.Threading.CancellationToken)
  id: SetDuplicateRulesStatusAsync(SuperOffice.CRM.Services.DuplicateRule[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: SetDuplicateRulesStatusAsync(DuplicateRule[], CancellationToken)
  nameWithType: IContactAgent.SetDuplicateRulesStatusAsync(DuplicateRule[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync(SuperOffice.CRM.Services.DuplicateRule[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet which duplicate rules should be active or not\n"
  syntax:
    content: Task SetDuplicateRulesStatusAsync(DuplicateRule[] rules, CancellationToken cancellationToken = null)
    parameters:
    - id: rules
      type: SuperOffice.CRM.Services.DuplicateRule[]
      description: Duplicate rules to update active status for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SetDuplicateRulesStatusAsync(rules As DuplicateRule(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync*
  nameWithType.vb: IContactAgent.SetDuplicateRulesStatusAsync(DuplicateRule(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync(SuperOffice.CRM.Services.DuplicateRule(), System.Threading.CancellationToken)
  name.vb: SetDuplicateRulesStatusAsync(DuplicateRule(), CancellationToken)
- uid: SuperOffice.CRM.Services.IContactAgent.MergeAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.MergeAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: MergeAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: MergeAsync(Int32, Int32, Boolean, Boolean, CancellationToken)
  nameWithType: IContactAgent.MergeAsync(Int32, Int32, Boolean, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.MergeAsync(System.Int32, System.Int32, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nMerge two contacts. The destination contact will remain.\n"
  syntax:
    content: Task MergeAsync(int sourceContactId, int destinationContactId, bool mergeIdenticalPersons, bool replaceEmptyFieldsOnDestination, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceContactId
      type: System.Int32
      description: Source contact to merge from. This contact will disappear after the merge.
    - id: destinationContactId
      type: System.Int32
      description: Destination contact to merge into
    - id: mergeIdenticalPersons
      type: System.Boolean
      description: Persons with identical names will be merged
    - id: replaceEmptyFieldsOnDestination
      type: System.Boolean
      description: If true, empty fields on destination will be replaced by values from source.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function MergeAsync(sourceContactId As Integer, destinationContactId As Integer, mergeIdenticalPersons As Boolean, replaceEmptyFieldsOnDestination As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IContactAgent.MergeAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.CopyAsync(System.Int32,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CopyAsync(System.Int32,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  id: CopyAsync(System.Int32,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CopyAsync(Int32, String, String, Boolean, CancellationToken)
  nameWithType: IContactAgent.CopyAsync(Int32, String, String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.CopyAsync(System.Int32, System.String, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCopy a contact. Activities and related data will be ignored\n"
  syntax:
    content: Task<int> CopyAsync(int sourceContactId, string destinationContactName, string destinationContactDepartment, bool copyPersons, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceContactId
      type: System.Int32
      description: The id of the contact to copy
    - id: destinationContactName
      type: System.String
      description: The name of the destination contact
    - id: destinationContactDepartment
      type: System.String
      description: The department of the destination contact
    - id: copyPersons
      type: System.Boolean
      description: If true, persons will be copied from source contact
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Id of copied contact
    content.vb: Function CopyAsync(sourceContactId As Integer, destinationContactName As String, destinationContactDepartment As String, copyPersons As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Services.IContactAgent.CopyAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetNameDepartmentDuplicatesAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetNameDepartmentDuplicatesAsync(String, String, CancellationToken)
  nameWithType: IContactAgent.GetNameDepartmentDuplicatesAsync(String, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet duplicates based on the contact name and department\n"
  syntax:
    content: Task<DuplicateEntry[]> GetNameDepartmentDuplicatesAsync(string name, string department, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: Name used for lookup
    - id: department
      type: System.String
      description: Department used for lookup (if any)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateEntry[]}
      description: Any records matching the specified name and department
    content.vb: Function GetNameDepartmentDuplicatesAsync(name As String, department As String, cancellationToken As CancellationToken = Nothing) As Task(Of DuplicateEntry())
  overload: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync(System.String,System.Threading.CancellationToken)
  id: GetDomainDuplicatesAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetDomainDuplicatesAsync(String, CancellationToken)
  nameWithType: IContactAgent.GetDomainDuplicatesAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet duplicates based on the domain\n"
  syntax:
    content: Task<DuplicateEntry[]> GetDomainDuplicatesAsync(string domain, CancellationToken cancellationToken = null)
    parameters:
    - id: domain
      type: System.String
      description: Domain used for lookup
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateEntry[]}
      description: Any records matching the specified domain
    content.vb: Function GetDomainDuplicatesAsync(domain As String, cancellationToken As CancellationToken = Nothing) As Task(Of DuplicateEntry())
  overload: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync(System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync(System.Int32,System.String,System.Threading.CancellationToken)
  id: IsNumberValidAsync(System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: IsNumberValidAsync(Int32, String, CancellationToken)
  nameWithType: IContactAgent.IsNumberValidAsync(Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync(System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChecks if the number is unique or required.  The setting is configured from admin under system options.\n"
  syntax:
    content: Task<bool> IsNumberValidAsync(int contactId, string number, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: Primary key
    - id: number
      type: System.String
      description: Number field value to check.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the number satisifies the configured rules for uniqueness.
    content.vb: Function IsNumberValidAsync(contactId As Integer, number As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync(System.Int32,System.Threading.CancellationToken)
  id: GetQuoteVersionAddressesAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetQuoteVersionAddressesAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetQuoteVersionAddressesAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet the associated billing and invoice quote version addresses. These addresses might be address on the contact, or a custom address.\n"
  syntax:
    content: Task<Address[]> GetQuoteVersionAddressesAsync(int quoteVersionId, CancellationToken cancellationToken = null)
    parameters:
    - id: quoteVersionId
      type: System.Int32
      description: The version to get the addresses for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address[]}
      description: The quote version addresses. Invoice and billing address, in that order.
    content.vb: Function GetQuoteVersionAddressesAsync(quoteVersionId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Address())
  overload: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32,System.Threading.CancellationToken)
  id: SaveQuoteVersionAddressAsync(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: SaveQuoteVersionAddressAsync(Int32, Address, AddressType, Int32, CancellationToken)
  nameWithType: IContactAgent.SaveQuoteVersionAddressAsync(Int32, Address, AddressType, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync(System.Int32, SuperOffice.CRM.Services.Address, SuperOffice.Data.AddressType, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave a custom quote version address.\n"
  syntax:
    content: Task<Address> SaveQuoteVersionAddressAsync(int quoteVersionId, Address address, AddressType addressType, int countryId, CancellationToken cancellationToken = null)
    parameters:
    - id: quoteVersionId
      type: System.Int32
      description: The version to save the address on.
    - id: address
      type: SuperOffice.CRM.Services.Address
      description: The address to save on the quote version.
    - id: addressType
      type: SuperOffice.Data.AddressType
      description: Should be either QuoteBillingAddress or QuoteShippingAddress
    - id: countryId
      type: System.Int32
      description: The country for the custom address
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address}
      description: The saved addresses.
    content.vb: Function SaveQuoteVersionAddressAsync(quoteVersionId As Integer, address As Address, addressType As AddressType, countryId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Address)
  overload: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync(System.Threading.CancellationToken)
  id: DeleteExpiredAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: DeleteExpiredAsync(CancellationToken)
  nameWithType: IContactAgent.DeleteExpiredAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nTrigger deletion of contacts (companies) that has been (soft) deleted and have timed out the expiry period (the SoftDeleteRetention preference).\n"
  syntax:
    content: Task DeleteExpiredAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteExpiredAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetContactSummaryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactSummaryAsync(Int32, Int32, CancellationToken)
  nameWithType: IContactAgent.GetContactSummaryAsync(Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet summary of contact and its recent activity.\n"
  syntax:
    content: Task<ContactSummary> GetContactSummaryAsync(int contactId, int limit, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact id to summarize.
    - id: limit
      type: System.Int32
      description: Max number of items to include in summary lists.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactSummary}
      description: Summary of contact, with recent requests, sales, follow-ups, chats.
    content.vb: Function GetContactSummaryAsync(contactId As Integer, limit As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ContactSummary)
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  id: ValidateContactEntityAsync(SuperOffice.CRM.Services.ContactEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: ValidateContactEntityAsync(ContactEntity, CancellationToken)
  nameWithType: IContactAgent.ValidateContactEntityAsync(ContactEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync(SuperOffice.CRM.Services.ContactEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck that entity is ready for saving, return error messages by field.\n"
  syntax:
    content: Task<StringDictionary> ValidateContactEntityAsync(ContactEntity contactEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: contactEntity
      type: SuperOffice.CRM.Services.ContactEntity
      description: Entity to be checked for errors.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StringDictionary}
      description: Error messages tagged by field.
    content.vb: Function ValidateContactEntityAsync(contactEntity As ContactEntity, cancellationToken As CancellationToken = Nothing) As Task(Of StringDictionary)
  overload: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactListAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactListAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetContactListAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactListAsync(Int32[], CancellationToken)
  nameWithType: IContactAgent.GetContactListAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactListAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets an array of Contact objects.                        \n"
  syntax:
    content: Task<Contact[]> GetContactListAsync(int[] contactIds, CancellationToken cancellationToken = null)
    parameters:
    - id: contactIds
      type: System.Int32[]
      description: The identifiers of the Contact object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact[]}
      description: Array of Contact objects
    content.vb: Function GetContactListAsync(contactIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Contact())
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactListAsync*
  nameWithType.vb: IContactAgent.GetContactListAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetContactListAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: GetContactListAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync(System.Threading.CancellationToken)
  id: GetMyContactsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyContactsAsync(CancellationToken)
  nameWithType: IContactAgent.GetMyContactsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGetting the contacts where the user currently logged in is set as contact owner.\n"
  syntax:
    content: Task<Contact[]> GetMyContactsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact[]}
      description: Array of contacts
    content.vb: Function GetMyContactsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Contact())
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync(SuperOffice.CRM.Services.Util.ContactSourceType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync(SuperOffice.CRM.Services.Util.ContactSourceType,System.Threading.CancellationToken)
  id: GetMyRecentContactsAsync(SuperOffice.CRM.Services.Util.ContactSourceType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyRecentContactsAsync(ContactSourceType, CancellationToken)
  nameWithType: IContactAgent.GetMyRecentContactsAsync(ContactSourceType, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync(SuperOffice.CRM.Services.Util.ContactSourceType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nMethod that returns a set of initial contacts. This could be the contacts in a favorites selection, the history list, the diary, or from all sources. If retrieved from the diary it will get appointments for the current and the next day.\n"
  syntax:
    content: Task<Contact[]> GetMyRecentContactsAsync(ContactSourceType sourceType, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceType
      type: SuperOffice.CRM.Services.Util.ContactSourceType
      description: The source where the contacts are retrieved from (Favorites, History, Diary)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact[]}
      description: Arrayof contacts
    content.vb: Function GetMyRecentContactsAsync(sourceType As ContactSourceType, cancellationToken As CancellationToken = Nothing) As Task(Of Contact())
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync*
- uid: SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync(System.Int32,System.Threading.CancellationToken)
  id: GetPreviewContactAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetPreviewContactAsync(Int32, CancellationToken)
  nameWithType: IContactAgent.GetPreviewContactAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a contact from its ID\n"
  syntax:
    content: Task<PreviewContact> GetPreviewContactAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact ID
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.PreviewContact}
      description: Contact minimal contact suitable for preview
    content.vb: Function GetPreviewContactAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of PreviewContact)
  overload: SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync*
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync
  isExternal: true
  name: CreateDefaultContactEntityAsync
  nameWithType: IContactAgent.CreateDefaultContactEntityAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntityAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactEntity}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ContactEntity>
  nameWithType: Task<ContactEntity>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ContactEntity>
  nameWithType.vb: Task(Of ContactEntity)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ContactEntity)
  name.vb: Task(Of ContactEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.ContactEntity
    name: ContactEntity
    nameWithType: ContactEntity
    fullName: SuperOffice.CRM.Services.ContactEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.ContactEntity
    name: ContactEntity
    nameWithType: ContactEntity
    fullName: SuperOffice.CRM.Services.ContactEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync
  isExternal: true
  name: SaveContactEntityAsync
  nameWithType: IContactAgent.SaveContactEntityAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveContactEntityAsync
- uid: SuperOffice.CRM.Services.ContactEntity
  commentId: T:SuperOffice.CRM.Services.ContactEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ContactEntity
  nameWithType: ContactEntity
  fullName: SuperOffice.CRM.Services.ContactEntity
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync
  isExternal: true
  name: DeleteContactEntityAsync
  nameWithType: IContactAgent.DeleteContactEntityAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntityAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync
  isExternal: true
  name: CreateDefaultPreviewContactAsync
  nameWithType: IContactAgent.CreateDefaultPreviewContactAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContactAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.PreviewContact}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.PreviewContact}'
  definition: System.Threading.Tasks.Task`1
  name: Task<PreviewContact>
  nameWithType: Task<PreviewContact>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.PreviewContact>
  nameWithType.vb: Task(Of PreviewContact)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.PreviewContact)
  name.vb: Task(Of PreviewContact)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.PreviewContact
    name: PreviewContact
    nameWithType: PreviewContact
    fullName: SuperOffice.CRM.Services.PreviewContact
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.PreviewContact
    name: PreviewContact
    nameWithType: PreviewContact
    fullName: SuperOffice.CRM.Services.PreviewContact
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactAsync
  isExternal: true
  name: GetContactAsync
  nameWithType: IContactAgent.GetContactAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Contact>
  nameWithType: Task<Contact>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Contact>
  nameWithType.vb: Task(Of Contact)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Contact)
  name.vb: Task(Of Contact)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Contact
    name: Contact
    nameWithType: Contact
    fullName: SuperOffice.CRM.Services.Contact
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Contact
    name: Contact
    nameWithType: Contact
    fullName: SuperOffice.CRM.Services.Contact
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync
  isExternal: true
  name: GetMyActiveContactsAsync
  nameWithType: IContactAgent.GetMyActiveContactsAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContactsAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.Util.ContactAction
  commentId: T:SuperOffice.CRM.Services.Util.ContactAction
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  name: ContactAction
  nameWithType: ContactAction
  fullName: SuperOffice.CRM.Services.Util.ContactAction
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactActivity[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactActivity[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ContactActivity[]>
  nameWithType: Task<ContactActivity[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ContactActivity[]>
  nameWithType.vb: Task(Of ContactActivity())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ContactActivity())
  name.vb: Task(Of ContactActivity())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.ContactActivity
    name: ContactActivity
    nameWithType: ContactActivity
    fullName: SuperOffice.CRM.Services.ContactActivity
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.ContactActivity
    name: ContactActivity
    nameWithType: ContactActivity
    fullName: SuperOffice.CRM.Services.ContactActivity
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.Util
  commentId: N:SuperOffice.CRM.Services.Util
  isExternal: true
  name: SuperOffice.CRM.Services.Util
  nameWithType: SuperOffice.CRM.Services.Util
  fullName: SuperOffice.CRM.Services.Util
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync
  isExternal: true
  name: GetContactEntityAsync
  nameWithType: IContactAgent.GetContactEntityAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactEntityAsync
- uid: SuperOffice.CRM.Services.IContactAgent.UndeleteAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.UndeleteAsync
  isExternal: true
  name: UndeleteAsync
  nameWithType: IContactAgent.UndeleteAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.UndeleteAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync
  isExternal: true
  name: GetPersonsAsync
  nameWithType: IContactAgent.GetPersonsAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPersonsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Person[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Person[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Person[]>
  nameWithType: Task<Person[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Person[]>
  nameWithType.vb: Task(Of Person())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Person())
  name.vb: Task(Of Person())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Services.Person
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Services.Person
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync
  isExternal: true
  name: GetContactWithPersonsAsync
  nameWithType: IContactAgent.GetContactWithPersonsAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersonsAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync
  isExternal: true
  name: GetMyContactAsync
  nameWithType: IContactAgent.GetMyContactAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContactAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync
  isExternal: true
  name: GetMyBizCardAsync
  nameWithType: IContactAgent.GetMyBizCardAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyBizCardAsync
- uid: SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync
  isExternal: true
  name: ChangeCountryAsync
  nameWithType: IContactAgent.ChangeCountryAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.ChangeCountryAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddressAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetAddressAsync
  isExternal: true
  name: GetAddressAsync
  nameWithType: IContactAgent.GetAddressAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddressAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Address>
  nameWithType: Task<Address>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Address>
  nameWithType.vb: Task(Of Address)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Address)
  name.vb: Task(Of Address)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Address
    name: Address
    nameWithType: Address
    fullName: SuperOffice.CRM.Services.Address
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Address
    name: Address
    nameWithType: Address
    fullName: SuperOffice.CRM.Services.Address
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync
  isExternal: true
  name: GetAddressByCountryAsync
  nameWithType: IContactAgent.GetAddressByCountryAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountryAsync
- uid: SuperOffice.CRM.Services.IContactAgent.AddPersonAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.AddPersonAsync
  isExternal: true
  name: AddPersonAsync
  nameWithType: IContactAgent.AddPersonAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.AddPersonAsync
- uid: SuperOffice.CRM.Services.PersonEntity
  commentId: T:SuperOffice.CRM.Services.PersonEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: PersonEntity
  nameWithType: PersonEntity
  fullName: SuperOffice.CRM.Services.PersonEntity
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.PersonEntity}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.PersonEntity}'
  definition: System.Threading.Tasks.Task`1
  name: Task<PersonEntity>
  nameWithType: Task<PersonEntity>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.PersonEntity>
  nameWithType.vb: Task(Of PersonEntity)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.PersonEntity)
  name.vb: Task(Of PersonEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.PersonEntity
    name: PersonEntity
    nameWithType: PersonEntity
    fullName: SuperOffice.CRM.Services.PersonEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.PersonEntity
    name: PersonEntity
    nameWithType: PersonEntity
    fullName: SuperOffice.CRM.Services.PersonEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync
  isExternal: true
  name: GetDuplicatesAsync
  nameWithType: IContactAgent.GetDuplicatesAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicatesAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateEntry[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateEntry[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<DuplicateEntry[]>
  nameWithType: Task<DuplicateEntry[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.DuplicateEntry[]>
  nameWithType.vb: Task(Of DuplicateEntry())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.DuplicateEntry())
  name.vb: Task(Of DuplicateEntry())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.DuplicateEntry
    name: DuplicateEntry
    nameWithType: DuplicateEntry
    fullName: SuperOffice.CRM.Services.DuplicateEntry
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.DuplicateEntry
    name: DuplicateEntry
    nameWithType: DuplicateEntry
    fullName: SuperOffice.CRM.Services.DuplicateEntry
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync
  isExternal: true
  name: CreateNewEntryAsync
  nameWithType: IContactAgent.CreateNewEntryAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateNewEntryAsync
- uid: SuperOffice.CRM.Services.DuplicateEntry
  commentId: T:SuperOffice.CRM.Services.DuplicateEntry
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: DuplicateEntry
  nameWithType: DuplicateEntry
  fullName: SuperOffice.CRM.Services.DuplicateEntry
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync
  isExternal: true
  name: GetDuplicateRulesAsync
  nameWithType: IContactAgent.GetDuplicateRulesAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRulesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateRule[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.DuplicateRule[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<DuplicateRule[]>
  nameWithType: Task<DuplicateRule[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.DuplicateRule[]>
  nameWithType.vb: Task(Of DuplicateRule())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.DuplicateRule())
  name.vb: Task(Of DuplicateRule())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.DuplicateRule
    name: DuplicateRule
    nameWithType: DuplicateRule
    fullName: SuperOffice.CRM.Services.DuplicateRule
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.DuplicateRule
    name: DuplicateRule
    nameWithType: DuplicateRule
    fullName: SuperOffice.CRM.Services.DuplicateRule
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync
  isExternal: true
  name: SetDuplicateRulesStatusAsync
  nameWithType: IContactAgent.SetDuplicateRulesStatusAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatusAsync
- uid: SuperOffice.CRM.Services.DuplicateRule[]
  isExternal: true
  name: DuplicateRule[]
  nameWithType: DuplicateRule[]
  fullName: SuperOffice.CRM.Services.DuplicateRule[]
  nameWithType.vb: DuplicateRule()
  fullName.vb: SuperOffice.CRM.Services.DuplicateRule()
  name.vb: DuplicateRule()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.DuplicateRule
    name: DuplicateRule
    nameWithType: DuplicateRule
    fullName: SuperOffice.CRM.Services.DuplicateRule
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.DuplicateRule
    name: DuplicateRule
    nameWithType: DuplicateRule
    fullName: SuperOffice.CRM.Services.DuplicateRule
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IContactAgent.MergeAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.MergeAsync
  isExternal: true
  name: MergeAsync
  nameWithType: IContactAgent.MergeAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.MergeAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Services.IContactAgent.CopyAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CopyAsync
  isExternal: true
  name: CopyAsync
  nameWithType: IContactAgent.CopyAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.CopyAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync
  isExternal: true
  name: GetNameDepartmentDuplicatesAsync
  nameWithType: IContactAgent.GetNameDepartmentDuplicatesAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicatesAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync
  isExternal: true
  name: GetDomainDuplicatesAsync
  nameWithType: IContactAgent.GetDomainDuplicatesAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicatesAsync
- uid: SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync
  isExternal: true
  name: IsNumberValidAsync
  nameWithType: IContactAgent.IsNumberValidAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.IsNumberValidAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync
  isExternal: true
  name: GetQuoteVersionAddressesAsync
  nameWithType: IContactAgent.GetQuoteVersionAddressesAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddressesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Address[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Address[]>
  nameWithType: Task<Address[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Address[]>
  nameWithType.vb: Task(Of Address())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Address())
  name.vb: Task(Of Address())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Address
    name: Address
    nameWithType: Address
    fullName: SuperOffice.CRM.Services.Address
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Address
    name: Address
    nameWithType: Address
    fullName: SuperOffice.CRM.Services.Address
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync
  isExternal: true
  name: SaveQuoteVersionAddressAsync
  nameWithType: IContactAgent.SaveQuoteVersionAddressAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddressAsync
- uid: SuperOffice.CRM.Services.Address
  commentId: T:SuperOffice.CRM.Services.Address
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: Address
  nameWithType: Address
  fullName: SuperOffice.CRM.Services.Address
- uid: SuperOffice.Data.AddressType
  isExternal: true
  name: AddressType
  nameWithType: AddressType
  fullName: SuperOffice.Data.AddressType
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync
  isExternal: true
  name: DeleteExpiredAsync
  nameWithType: IContactAgent.DeleteExpiredAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteExpiredAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync
  isExternal: true
  name: GetContactSummaryAsync
  nameWithType: IContactAgent.GetContactSummaryAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactSummaryAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactSummary}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ContactSummary}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ContactSummary>
  nameWithType: Task<ContactSummary>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ContactSummary>
  nameWithType.vb: Task(Of ContactSummary)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ContactSummary)
  name.vb: Task(Of ContactSummary)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.ContactSummary
    name: ContactSummary
    nameWithType: ContactSummary
    fullName: SuperOffice.CRM.Services.ContactSummary
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.ContactSummary
    name: ContactSummary
    nameWithType: ContactSummary
    fullName: SuperOffice.CRM.Services.ContactSummary
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync
  isExternal: true
  name: ValidateContactEntityAsync
  nameWithType: IContactAgent.ValidateContactEntityAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntityAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StringDictionary}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.StringDictionary}'
  definition: System.Threading.Tasks.Task`1
  name: Task<StringDictionary>
  nameWithType: Task<StringDictionary>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.StringDictionary>
  nameWithType.vb: Task(Of StringDictionary)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.StringDictionary)
  name.vb: Task(Of StringDictionary)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.StringDictionary
    name: StringDictionary
    nameWithType: StringDictionary
    fullName: SuperOffice.CRM.Services.StringDictionary
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.StringDictionary
    name: StringDictionary
    nameWithType: StringDictionary
    fullName: SuperOffice.CRM.Services.StringDictionary
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactListAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactListAsync
  isExternal: true
  name: GetContactListAsync
  nameWithType: IContactAgent.GetContactListAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactListAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Contact[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Contact[]>
  nameWithType: Task<Contact[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Contact[]>
  nameWithType.vb: Task(Of Contact())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Contact())
  name.vb: Task(Of Contact())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Contact
    name: Contact
    nameWithType: Contact
    fullName: SuperOffice.CRM.Services.Contact
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Contact
    name: Contact
    nameWithType: Contact
    fullName: SuperOffice.CRM.Services.Contact
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync
  isExternal: true
  name: GetMyContactsAsync
  nameWithType: IContactAgent.GetMyContactsAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContactsAsync
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync
  isExternal: true
  name: GetMyRecentContactsAsync
  nameWithType: IContactAgent.GetMyRecentContactsAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContactsAsync
- uid: SuperOffice.CRM.Services.Util.ContactSourceType
  commentId: T:SuperOffice.CRM.Services.Util.ContactSourceType
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  name: ContactSourceType
  nameWithType: ContactSourceType
  fullName: SuperOffice.CRM.Services.Util.ContactSourceType
- uid: SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync
  isExternal: true
  name: GetPreviewContactAsync
  nameWithType: IContactAgent.GetPreviewContactAsync
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPreviewContactAsync
