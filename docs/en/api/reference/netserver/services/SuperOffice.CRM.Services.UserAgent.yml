### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.UserAgent
  commentId: T:SuperOffice.CRM.Services.UserAgent
  id: UserAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.UserAgent.#ctor
  - SuperOffice.CRM.Services.UserAgent.AddOwnerContact(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.CanChangePassword(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword(System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.ChangePassword(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  - SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultUser
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.CRM.Services.UserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  - SuperOffice.CRM.Services.UserAgent.CreateUserGroup
  - SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  - SuperOffice.CRM.Services.UserAgent.DeleteCredential(System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.DeleteExternalUser(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.DeleteRole(System.Int32,System.Int32)
  - SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.DeleteUser(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.DeleteUserFromName(System.String)
  - SuperOffice.CRM.Services.UserAgent.DeleteUserGroup(System.Int32,System.Int32)
  - SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups(System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.FindCredentialUsers(System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight(System.String)
  - SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights(System.String[])
  - SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights(System.String[])
  - SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser(System.String)
  - SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo
  - SuperOffice.CRM.Services.UserAgent.GetAccessToken(System.String,System.Boolean)
  - SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  - SuperOffice.CRM.Services.UserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  - SuperOffice.CRM.Services.UserAgent.GetAllUserGroups(System.Boolean)
  - SuperOffice.CRM.Services.UserAgent.GetCredentialTypes
  - SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  - SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup(System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  - SuperOffice.CRM.Services.UserAgent.GetDataRights(System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.UserAgent.GetExternalTokens(System.String)
  - SuperOffice.CRM.Services.UserAgent.GetFunctionalRights(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  - SuperOffice.CRM.Services.UserAgent.GetRole(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetRoleEntity(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetServiceAuth(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials(System.String)
  - SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.GetUser(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetUserFromName(System.String)
  - SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetUserGroup(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetUserGroupList(System.Int32[])
  - SuperOffice.CRM.Services.UserAgent.GetUserInfo(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.GetUserInfoList(System.Int32[])
  - SuperOffice.CRM.Services.UserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.UserAgent.IsNickNameUnique(System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.MakeRetired(System.Int32,System.Boolean)
  - SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway(System.String)
  - SuperOffice.CRM.Services.UserAgent.RemoveLicenses(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials(System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  - SuperOffice.CRM.Services.UserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  - SuperOffice.CRM.Services.UserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  - SuperOffice.CRM.Services.UserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  - SuperOffice.CRM.Services.UserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  - SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  - SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  - SuperOffice.CRM.Services.UserAgent.SaveUser(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.UserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.UserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  - SuperOffice.CRM.Services.UserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  - SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  - SuperOffice.CRM.Services.UserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  - SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword(System.Int32)
  - SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName(System.String)
  - SuperOffice.CRM.Services.UserAgent.SetPassword(System.Int32,System.String)
  - SuperOffice.CRM.Services.UserAgent.SetPasswordFromName(System.String,System.String)
  - SuperOffice.CRM.Services.UserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  langs:
  - csharp
  - vb
  name: UserAgent
  nameWithType: UserAgent
  fullName: SuperOffice.CRM.Services.UserAgent
  type: Class
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFacade for the User Agent\nUser administration\n<p></p>\n<strong>Online Restricted:</strong> This agent is not available in Online by default. User management is not allowed for partner apps.\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (UserAgent agent = new UserAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: 'public class UserAgent : AgentBase<IUserAgent>, IDisposable, IUserAgent, IAgent'
    content.vb: >-
      Public Class UserAgent

          Inherits AgentBase(Of IUserAgent)

          Implements IDisposable, IUserAgent, IAgent
  inheritance:
  - System.Object
  - SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}
  implements:
  - System.IDisposable
  - SuperOffice.CRM.Services.IUserAgent
  - SuperOffice.CRM.Services.IAgent
  inheritedMembers:
  - SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}.Dispose
  - SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}.InnerAgent
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth
  id: CreateDefaultServiceAuth
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultServiceAuth()
  nameWithType: UserAgent.CreateDefaultServiceAuth()
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new ServiceAuth.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: public ServiceAuth CreateDefaultServiceAuth()
    return:
      type: SuperOffice.CRM.Services.ServiceAuth
      description: New ServiceAuth with default values
    content.vb: Public Function CreateDefaultServiceAuth As ServiceAuth
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  id: SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveServiceAuth(ServiceAuth)
  nameWithType: UserAgent.SaveServiceAuth(ServiceAuth)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing ServiceAuth or creates a new ServiceAuth if the id parameter is empty\n"
  syntax:
    content: public ServiceAuth SaveServiceAuth(ServiceAuth serviceAuth)
    parameters:
    - id: serviceAuth
      type: SuperOffice.CRM.Services.ServiceAuth
      description: The ServiceAuth that is saved.
    return:
      type: SuperOffice.CRM.Services.ServiceAuth
      description: New or updated ServiceAuth
    content.vb: Public Function SaveServiceAuth(serviceAuth As ServiceAuth) As ServiceAuth
  overload: SuperOffice.CRM.Services.UserAgent.SaveServiceAuth*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth(System.Int32)
  id: DeleteServiceAuth(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteServiceAuth(Int32)
  nameWithType: UserAgent.DeleteServiceAuth(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes the ServiceAuth\n"
  syntax:
    content: public void DeleteServiceAuth(int serviceAuthId)
    parameters:
    - id: serviceAuthId
      type: System.Int32
      description: The identity of the ServiceAuth
    content.vb: Public Sub DeleteServiceAuth(serviceAuthId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity
  id: CreateDefaultRoleEntity
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultRoleEntity()
  nameWithType: UserAgent.CreateDefaultRoleEntity()
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new RoleEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: public RoleEntity CreateDefaultRoleEntity()
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: New RoleEntity with default values
    content.vb: Public Function CreateDefaultRoleEntity As RoleEntity
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  id: SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveRoleEntity(RoleEntity)
  nameWithType: UserAgent.SaveRoleEntity(RoleEntity)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing RoleEntity or creates a new RoleEntity if the id parameter is empty\n"
  syntax:
    content: public RoleEntity SaveRoleEntity(RoleEntity roleEntity)
    parameters:
    - id: roleEntity
      type: SuperOffice.CRM.Services.RoleEntity
      description: The RoleEntity that is saved.
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: New or updated RoleEntity
    content.vb: Public Function SaveRoleEntity(roleEntity As RoleEntity) As RoleEntity
  overload: SuperOffice.CRM.Services.UserAgent.SaveRoleEntity*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials
  id: CreateDefaultUntrustedCredentials
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUntrustedCredentials()
  nameWithType: UserAgent.CreateDefaultUntrustedCredentials()
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new UntrustedCredentials.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: public UntrustedCredentials CreateDefaultUntrustedCredentials()
    return:
      type: SuperOffice.CRM.Services.UntrustedCredentials
      description: New UntrustedCredentials with default values
    content.vb: Public Function CreateDefaultUntrustedCredentials As UntrustedCredentials
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUser
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultUser
  id: CreateDefaultUser
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUser()
  nameWithType: UserAgent.CreateDefaultUser()
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUser()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new User.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: public User CreateDefaultUser()
    return:
      type: SuperOffice.CRM.Services.User
      description: New User with default values
    content.vb: Public Function CreateDefaultUser As User
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveUser(SuperOffice.CRM.Services.User)
  id: SaveUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveUser(User)
  nameWithType: UserAgent.SaveUser(User)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUser(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing User or creates a new User if the id parameter is empty\n"
  syntax:
    content: public User SaveUser(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: The User that is saved.
    return:
      type: SuperOffice.CRM.Services.User
      description: New or updated User
    content.vb: Public Function SaveUser(user As User) As User
  overload: SuperOffice.CRM.Services.UserAgent.SaveUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  id: GetUserCommands(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserCommands(User)
  nameWithType: UserAgent.GetUserCommands(User)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet registered custom commands for User\n"
  syntax:
    content: public CustomCommand[] GetUserCommands(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: 'The User '
    return:
      type: SuperOffice.CRM.Services.CustomCommand[]
      description: Custom commands for the User
    content.vb: Public Function GetUserCommands(user As User) As CustomCommand()
  overload: SuperOffice.CRM.Services.UserAgent.GetUserCommands*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  id: ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ExecuteUserCommand(String, CommandActionResult, User)
  nameWithType: UserAgent.ExecuteUserCommand(String, CommandActionResult, User)
  fullName: SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand(System.String, SuperOffice.Data.CommandActionResult, SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nExecutes the custom command for User\n"
  syntax:
    content: public CommandResult ExecuteUserCommand(string commandName, CommandActionResult actionResult, User user)
    parameters:
    - id: commandName
      type: System.String
      description: The name of the command to execute.
    - id: actionResult
      type: SuperOffice.Data.CommandActionResult
      description: Result of an UI operation.
    - id: user
      type: SuperOffice.CRM.Services.User
      description: The User to execute commands on.
    return:
      type: SuperOffice.CRM.Services.CommandResult
      description: Result of the executed command
    content.vb: Public Function ExecuteUserCommand(commandName As String, actionResult As CommandActionResult, user As User) As CommandResult
  overload: SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteUser(System.Int32)
  id: DeleteUser(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteUser(Int32)
  nameWithType: UserAgent.DeleteUser(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteUser(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes the User\n"
  syntax:
    content: public void DeleteUser(int userId)
    parameters:
    - id: userId
      type: System.Int32
      description: The identity of the User
    content.vb: Public Sub DeleteUser(userId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.DeleteUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  id: SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveCredential(Int32, Credential)
  nameWithType: UserAgent.SaveCredential(Int32, Credential)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveCredential(System.Int32, SuperOffice.CRM.Services.Credential)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave (adds/replaces) current credential of the same type for the user.\n"
  syntax:
    content: public bool SaveCredential(int userId, Credential credential)
    parameters:
    - id: userId
      type: System.Int32
      description: Primary key of the user (i.e. associate)
    - id: credential
      type: SuperOffice.CRM.Services.Credential
      description: Credentials supported for authentication
    return:
      type: System.Boolean
      description: True if the credential was successfully saved.
    content.vb: Public Function SaveCredential(userId As Integer, credential As Credential) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.SaveCredential*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteCredential(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteCredential(System.Int32,System.String)
  id: DeleteCredential(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteCredential(Int32, String)
  nameWithType: UserAgent.DeleteCredential(Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteCredential(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove credential of a specific type for a user\n"
  syntax:
    content: public bool DeleteCredential(int userId, string credentialType)
    parameters:
    - id: userId
      type: System.Int32
      description: Primary key of the user (i.e. associate)
    - id: credentialType
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table
    return:
      type: System.Boolean
      description: True if credential was sucessfully removed.
    content.vb: Public Function DeleteCredential(userId As Integer, credentialType As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.DeleteCredential*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups(System.String,System.String)
  id: FindCredentialsGroups(System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: FindCredentialsGroups(String, String)
  nameWithType: UserAgent.FindCredentialsGroups(String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet user groups holding users filtered by the searchString.  This method is only relevant if the CredentialType control is of type link.  There will allways be at least one groups even if the underlying provider does not support groups.\n"
  syntax:
    content: public CredentialsGroup[] FindCredentialsGroups(string type, string searchString)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: searchString
      type: System.String
      description: Partly name of domain group.
    return:
      type: SuperOffice.CRM.Services.CredentialsGroup[]
    content.vb: Public Function FindCredentialsGroups(type As String, searchString As String) As CredentialsGroup()
  overload: SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.FindCredentialUsers(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.FindCredentialUsers(System.String,System.String)
  id: FindCredentialUsers(System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: FindCredentialUsers(String, String)
  nameWithType: UserAgent.FindCredentialUsers(String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.FindCredentialUsers(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind users matching the partial name.\n"
  syntax:
    content: public CredentialsGroupUsers FindCredentialUsers(string type, string searchString)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: searchString
      type: System.String
      description: Partly name of the user group
    return:
      type: SuperOffice.CRM.Services.CredentialsGroupUsers
    content.vb: Public Function FindCredentialUsers(type As String, searchString As String) As CredentialsGroupUsers
  overload: SuperOffice.CRM.Services.UserAgent.FindCredentialUsers*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup(System.String,System.String)
  id: GetCredentialUsersInGroup(System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetCredentialUsersInGroup(String, String)
  nameWithType: UserAgent.GetCredentialUsersInGroup(String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet credential users within a user group\n"
  syntax:
    content: public CredentialsGroupUsers GetCredentialUsersInGroup(string type, string groupName)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: groupName
      type: System.String
      description: Name of user group needed to discover the users.
    return:
      type: SuperOffice.CRM.Services.CredentialsGroupUsers
    content.vb: Public Function GetCredentialUsersInGroup(type As String, groupName As String) As CredentialsGroupUsers
  overload: SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetServiceAuth(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetServiceAuth(System.Int32)
  id: GetServiceAuth(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetServiceAuth(Int32)
  nameWithType: UserAgent.GetServiceAuth(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetServiceAuth(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ServiceAuth object.                        \n"
  syntax:
    content: public ServiceAuth GetServiceAuth(int serviceAuthId)
    parameters:
    - id: serviceAuthId
      type: System.Int32
      description: The identifier of the ServiceAuth object
    return:
      type: SuperOffice.CRM.Services.ServiceAuth
      description: ServiceAuth
    content.vb: Public Function GetServiceAuth(serviceAuthId As Integer) As ServiceAuth
  overload: SuperOffice.CRM.Services.UserAgent.GetServiceAuth*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetRole(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetRole(System.Int32)
  id: GetRole(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetRole(Int32)
  nameWithType: UserAgent.GetRole(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetRole(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a Role object.                        \n"
  syntax:
    content: public Role GetRole(int roleId)
    parameters:
    - id: roleId
      type: System.Int32
      description: The identifier of the Role object
    return:
      type: SuperOffice.CRM.Services.Role
      description: Role
    content.vb: Public Function GetRole(roleId As Integer) As Role
  overload: SuperOffice.CRM.Services.UserAgent.GetRole*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetRoleEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetRoleEntity(System.Int32)
  id: GetRoleEntity(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetRoleEntity(Int32)
  nameWithType: UserAgent.GetRoleEntity(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetRoleEntity(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a RoleEntity object.                        \n"
  syntax:
    content: public RoleEntity GetRoleEntity(int roleEntityId)
    parameters:
    - id: roleEntityId
      type: System.Int32
      description: The identifier of the RoleEntity object
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: RoleEntity
    content.vb: Public Function GetRoleEntity(roleEntityId As Integer) As RoleEntity
  overload: SuperOffice.CRM.Services.UserAgent.GetRoleEntity*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteRole(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteRole(System.Int32,System.Int32)
  id: DeleteRole(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteRole(Int32, Int32)
  nameWithType: UserAgent.DeleteRole(Int32, Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteRole(System.Int32, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete the specified role and move all users associated with the role to the replacingRoleId\n"
  syntax:
    content: public void DeleteRole(int roleIdToDelete, int replacingRoleId)
    parameters:
    - id: roleIdToDelete
      type: System.Int32
      description: The roleId to delete
    - id: replacingRoleId
      type: System.Int32
      description: The roleId which all associated users will be moved to.
    content.vb: Public Sub DeleteRole(roleIdToDelete As Integer, replacingRoleId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.DeleteRole*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  id: GetAllRoles(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetAllRoles(RoleType)
  nameWithType: UserAgent.GetAllRoles(RoleType)
  fullName: SuperOffice.CRM.Services.UserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list of all roles for the given type of role. MDO List name = &apos;Roles&apos;, extra=&apos;0&apos; (roleType) \n"
  syntax:
    content: public SelectableMDOListItem[] GetAllRoles(RoleType roleType)
    parameters:
    - id: roleType
      type: SuperOffice.Data.RoleType
      description: Type of role (Employee/External/Anonymous/System)
    return:
      type: SuperOffice.CRM.Services.SelectableMDOListItem[]
      description: FunctionRight items with name and description. Code name for function right is in the extra-info property.
    content.vb: Public Function GetAllRoles(roleType As RoleType) As SelectableMDOListItem()
  overload: SuperOffice.CRM.Services.UserAgent.GetAllRoles*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  id: GetAllFunctionalRights(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetAllFunctionalRights(RoleType)
  nameWithType: UserAgent.GetAllFunctionalRights(RoleType)
  fullName: SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list of all functional rights for the given type of role. MDO List name = &apos;FunctionRights&apos;, extra=&apos;roleType=0&apos; \n"
  syntax:
    content: public SelectableMDOListItem[] GetAllFunctionalRights(RoleType roleType)
    parameters:
    - id: roleType
      type: SuperOffice.Data.RoleType
      description: Type of role (Employee/External/Anonymous/System)
    return:
      type: SuperOffice.CRM.Services.SelectableMDOListItem[]
      description: FunctionRight items with name and description. Code name for function right is in the extra-info property.
    content.vb: Public Function GetAllFunctionalRights(roleType As RoleType) As SelectableMDOListItem()
  overload: SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetFunctionalRights(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetFunctionalRights(System.Int32)
  id: GetFunctionalRights(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetFunctionalRights(Int32)
  nameWithType: UserAgent.GetFunctionalRights(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetFunctionalRights(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all functional rights for the given role. Functional rights not set on the role are not included. MDO List name = &apos;FunctionRights&apos;, extra=&apos;role=123&apos;\n"
  syntax:
    content: public SelectableMDOListItem[] GetFunctionalRights(int roleId)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to get the functional rights for.
    return:
      type: SuperOffice.CRM.Services.SelectableMDOListItem[]
      description: FunctionRight items with name and description. Code name for function right is in the extra-info property.
    content.vb: Public Function GetFunctionalRights(roleId As Integer) As SelectableMDOListItem()
  overload: SuperOffice.CRM.Services.UserAgent.GetFunctionalRights*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  id: SetFunctionalRights(System.Int32,System.Int32[])
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetFunctionalRights(Int32, Int32[])
  nameWithType: UserAgent.SetFunctionalRights(Int32, Int32[])
  fullName: SuperOffice.CRM.Services.UserAgent.SetFunctionalRights(System.Int32, System.Int32[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet all functional rights for the given role. Functional rights not specified here will be removed from the role. \n"
  syntax:
    content: public void SetFunctionalRights(int roleId, int[] functionalRightIds)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the functional rights for
    - id: functionalRightIds
      type: System.Int32[]
      description: An array of functional rights ids to set for this role. Rights not included here are removed from the role.
    content.vb: Public Sub SetFunctionalRights(roleId As Integer, functionalRightIds As Integer())
  overload: SuperOffice.CRM.Services.UserAgent.SetFunctionalRights*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  nameWithType.vb: UserAgent.SetFunctionalRights(Int32, Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Services.UserAgent.SetFunctionalRights(System.Int32, System.Int32())
  name.vb: SetFunctionalRights(Int32, Int32())
- uid: SuperOffice.CRM.Services.UserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  id: SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetDataRight(Int32, String, RoleRelationToOwner, String)
  nameWithType: UserAgent.SetDataRight(Int32, String, RoleRelationToOwner, String)
  fullName: SuperOffice.CRM.Services.UserAgent.SetDataRight(System.Int32, System.String, SuperOffice.CRM.Services.Util.RoleRelationToOwner, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet one specific data right at the given position. An exception will be thrown if non existing position is specified.\n"
  syntax:
    content: public void SetDataRight(int roleId, string tableName, RoleRelationToOwner relationToOwner, string dataRightValue)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the data right for
    - id: tableName
      type: System.String
      description: The name of the entity/table
    - id: relationToOwner
      type: SuperOffice.CRM.Services.Util.RoleRelationToOwner
      description: The id of the relation to owner
    - id: dataRightValue
      type: System.String
      description: The data right value to set at the specified position (CRUD)
    content.vb: Public Sub SetDataRight(roleId As Integer, tableName As String, relationToOwner As RoleRelationToOwner, dataRightValue As String)
  overload: SuperOffice.CRM.Services.UserAgent.SetDataRight*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  id: GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetDataRight(Int32, String, RoleRelationToOwner)
  nameWithType: UserAgent.GetDataRight(Int32, String, RoleRelationToOwner)
  fullName: SuperOffice.CRM.Services.UserAgent.GetDataRight(System.Int32, System.String, SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRead one specific data right at the given position. An exception will be thrown if non existing position is specified.\n"
  syntax:
    content: public string GetDataRight(int roleId, string tableName, RoleRelationToOwner relationToOwner)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the data right for
    - id: tableName
      type: System.String
      description: The name of the entity/table
    - id: relationToOwner
      type: SuperOffice.CRM.Services.Util.RoleRelationToOwner
      description: The id of the relation to owner
    return:
      type: System.String
      description: The data right value at the specified position (C, CR, CRU, or CRUD)
    content.vb: Public Function GetDataRight(roleId As Integer, tableName As String, relationToOwner As RoleRelationToOwner) As String
  overload: SuperOffice.CRM.Services.UserAgent.GetDataRight*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetDataRights(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetDataRights(System.Int32,System.String)
  id: GetDataRights(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetDataRights(Int32, String)
  nameWithType: UserAgent.GetDataRights(Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetDataRights(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRead specific a set of data rights at the given row in the rights matrix. An exception will be thrown if non existing position is specified.\n"
  syntax:
    content: public StringDictionary GetDataRights(int roleId, string tableName)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the data right for
    - id: tableName
      type: System.String
      description: The name of the entity/table
    return:
      type: SuperOffice.CRM.Services.StringDictionary
      description: The data right values for all the defined relationships (C, CR, CRU, or CRUD)
    content.vb: Public Function GetDataRights(roleId As Integer, tableName As String) As StringDictionary
  overload: SuperOffice.CRM.Services.UserAgent.GetDataRights*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  id: CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultRoleEntityFromType(RoleType)
  nameWithType: UserAgent.CreateDefaultRoleEntityFromType(RoleType)
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate a new role entity of the specified role type. The role type cannot be changed after the entity is created.\n"
  syntax:
    content: public RoleEntity CreateDefaultRoleEntityFromType(RoleType type)
    parameters:
    - id: type
      type: SuperOffice.Data.RoleType
      description: Type of role (Employee/External/Anonymous/System)
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: A blank role.
    content.vb: Public Function CreateDefaultRoleEntityFromType(type As RoleType) As RoleEntity
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight(System.String)
  id: FindRolesWithFunctionalRight(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: FindRolesWithFunctionalRight(String)
  nameWithType: UserAgent.FindRolesWithFunctionalRight(String)
  fullName: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind all roles with a given functional right. The roles matched must contain the specified functional right. \n"
  syntax:
    content: public MDOListItem[] FindRolesWithFunctionalRight(string functionalRightName)
    parameters:
    - id: functionalRightName
      type: System.String
      description: Functional right name to search for
    return:
      type: SuperOffice.CRM.Services.MDOListItem[]
      description: Roles that contains the given functional right
    content.vb: Public Function FindRolesWithFunctionalRight(functionalRightName As String) As MDOListItem()
  overload: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights(System.String[])
  commentId: M:SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights(System.String[])
  id: FindRolesWithFunctionalRights(System.String[])
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: FindRolesWithFunctionalRights(String[])
  nameWithType: UserAgent.FindRolesWithFunctionalRights(String[])
  fullName: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights(System.String[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind all roles with a given set of functional rights. The roles matched must contain one or more of the specified functional rights. \n"
  syntax:
    content: public int[] FindRolesWithFunctionalRights(string[] functionalRightNames)
    parameters:
    - id: functionalRightNames
      type: System.String[]
      description: An array of functional rights names to search for
    return:
      type: System.Int32[]
      description: Role ids that contains your functional rights
    content.vb: Public Function FindRolesWithFunctionalRights(functionalRightNames As String()) As Integer()
  overload: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  nameWithType.vb: UserAgent.FindRolesWithFunctionalRights(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights(System.String())
  name.vb: FindRolesWithFunctionalRights(String())
- uid: SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights(System.String[])
  commentId: M:SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights(System.String[])
  id: FindRolesWithoutFunctionalRights(System.String[])
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: FindRolesWithoutFunctionalRights(String[])
  nameWithType: UserAgent.FindRolesWithoutFunctionalRights(String[])
  fullName: SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights(System.String[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind all roles without a given set of functional rights. The roles matched must not contain any of the specified functional rights. \n"
  syntax:
    content: public int[] FindRolesWithoutFunctionalRights(string[] functionalRightNames)
    parameters:
    - id: functionalRightNames
      type: System.String[]
      description: An array of functional rights names to search for
    return:
      type: System.Int32[]
      description: Role ids that without your functional rights
    content.vb: Public Function FindRolesWithoutFunctionalRights(functionalRightNames As String()) As Integer()
  overload: SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  nameWithType.vb: UserAgent.FindRolesWithoutFunctionalRights(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights(System.String())
  name.vb: FindRolesWithoutFunctionalRights(String())
- uid: SuperOffice.CRM.Services.UserAgent.GetUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUser(System.Int32)
  id: GetUser(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUser(Int32)
  nameWithType: UserAgent.GetUser(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUser(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a User object.                        \n"
  syntax:
    content: public User GetUser(int userId)
    parameters:
    - id: userId
      type: System.Int32
      description: The identifier of the User object
    return:
      type: SuperOffice.CRM.Services.User
      description: User
    content.vb: Public Function GetUser(userId As Integer) As User
  overload: SuperOffice.CRM.Services.UserAgent.GetUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserFromName(System.String)
  id: GetUserFromName(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserFromName(String)
  nameWithType: UserAgent.GetUserFromName(String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserFromName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a user, with lookup based on user name.\n"
  syntax:
    content: public User GetUserFromName(string userName)
    parameters:
    - id: userName
      type: System.String
      description: User name of the user to get.
    return:
      type: SuperOffice.CRM.Services.User
      description: User retrieved by name
    content.vb: Public Function GetUserFromName(userName As String) As User
  overload: SuperOffice.CRM.Services.UserAgent.GetUserFromName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  id: SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveUserFromName(String, User)
  nameWithType: UserAgent.SaveUserFromName(String, User)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUserFromName(System.String, SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave a user, with lookup based on the user name.\n"
  syntax:
    content: public User SaveUserFromName(string userName, User user)
    parameters:
    - id: userName
      type: System.String
      description: User name of the user to get.
    - id: user
      type: SuperOffice.CRM.Services.User
      description: User object to save.
    return:
      type: SuperOffice.CRM.Services.User
      description: User retrieved by name
    content.vb: Public Function SaveUserFromName(userName As String, user As User) As User
  overload: SuperOffice.CRM.Services.UserAgent.SaveUserFromName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteUserFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteUserFromName(System.String)
  id: DeleteUserFromName(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteUserFromName(String)
  nameWithType: UserAgent.DeleteUserFromName(String)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteUserFromName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a user, with lookup based on the user name.\n"
  syntax:
    content: public void DeleteUserFromName(string userName)
    parameters:
    - id: userName
      type: System.String
      description: User name of the user to delete.
    content.vb: Public Sub DeleteUserFromName(userName As String)
  overload: SuperOffice.CRM.Services.UserAgent.DeleteUserFromName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetCredentialTypes
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetCredentialTypes
  id: GetCredentialTypes
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetCredentialTypes()
  nameWithType: UserAgent.GetCredentialTypes()
  fullName: SuperOffice.CRM.Services.UserAgent.GetCredentialTypes()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet available credential types that can be used for authentication\n"
  syntax:
    content: public CredentialType[] GetCredentialTypes()
    return:
      type: SuperOffice.CRM.Services.CredentialType[]
      description: Credential types that can be used for authentication
    content.vb: Public Function GetCredentialTypes As CredentialType()
  overload: SuperOffice.CRM.Services.UserAgent.GetCredentialTypes*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  id: GetCredentialTypesForUserType(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetCredentialTypesForUserType(UserType)
  nameWithType: UserAgent.GetCredentialTypesForUserType(UserType)
  fullName: SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet available credential types that can be used for the specified user type.\n"
  syntax:
    content: public CredentialType[] GetCredentialTypesForUserType(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: The user type to retrieve credential types for
    return:
      type: SuperOffice.CRM.Services.CredentialType[]
      description: Credential types that can be used for authentication
    content.vb: Public Function GetCredentialTypesForUserType(userType As UserType) As CredentialType()
  overload: SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  id: SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentials(String, UntrustedCredentials)
  nameWithType: UserAgent.SaveUntrustedCredentials(String, UntrustedCredentials)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials(System.String, SuperOffice.CRM.Services.UntrustedCredentials)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave credentials for authenticated user.\n"
  syntax:
    content: public void SaveUntrustedCredentials(string type, UntrustedCredentials credentials)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: credentials
      type: SuperOffice.CRM.Services.UntrustedCredentials
      description: Credentials to save.
    content.vb: Public Sub SaveUntrustedCredentials(type As String, credentials As UntrustedCredentials)
  overload: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials(System.String)
  id: GetUntrustedCredentials(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentials(String)
  nameWithType: UserAgent.GetUntrustedCredentials(String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a set of credentials of a specified type for authenticated user.\n"
  syntax:
    content: public UntrustedCredentials[] GetUntrustedCredentials(string type)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;).'
    return:
      type: SuperOffice.CRM.Services.UntrustedCredentials[]
      description: Array of credentials of the specified type.
    content.vb: Public Function GetUntrustedCredentials(type As String) As UntrustedCredentials()
  overload: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  id: GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentialsForAssociate(Int32, String)
  nameWithType: UserAgent.GetUntrustedCredentialsForAssociate(Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a set of credentials of a specified type for a specified user. SecretValue is only populated for authenticated user, and system users.\n"
  syntax:
    content: public UntrustedCredentials[] GetUntrustedCredentialsForAssociate(int associateId, string type)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of user to retrieve credentials for.
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;).'
    return:
      type: SuperOffice.CRM.Services.UntrustedCredentials[]
      description: Array of credentials of the specified type.
    content.vb: Public Function GetUntrustedCredentialsForAssociate(associateId As Integer, type As String) As UntrustedCredentials()
  overload: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  id: SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentialsForAssociate(Int32, String, UntrustedCredentials)
  nameWithType: UserAgent.SaveUntrustedCredentialsForAssociate(Int32, String, UntrustedCredentials)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate(System.Int32, System.String, SuperOffice.CRM.Services.UntrustedCredentials)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave credentials for a specified user.\n"
  syntax:
    content: public void SaveUntrustedCredentialsForAssociate(int associateId, string type, UntrustedCredentials credentials)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of user to save credentials for.
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: credentials
      type: SuperOffice.CRM.Services.UntrustedCredentials
      description: Credentials to save.
    content.vb: Public Sub SaveUntrustedCredentialsForAssociate(associateId As Integer, type As String, credentials As UntrustedCredentials)
  overload: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials(System.String,System.String)
  id: RemoveUntrustedCredentials(System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentials(String, String)
  nameWithType: UserAgent.RemoveUntrustedCredentials(String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove a credentials entry for authenticated user.\n"
  syntax:
    content: public void RemoveUntrustedCredentials(string type, string publicValue)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: publicValue
      type: System.String
      description: PublicValue field of credentials to remove.
    content.vb: Public Sub RemoveUntrustedCredentials(type As String, publicValue As String)
  overload: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  id: RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentialsForAssociate(Int32, String, String)
  nameWithType: UserAgent.RemoveUntrustedCredentialsForAssociate(Int32, String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove a credentials entry for a specified user.\n"
  syntax:
    content: public void RemoveUntrustedCredentialsForAssociate(int associateId, string type, string publicValue)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of user to remove credentials for.
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: publicValue
      type: System.String
      description: PublicValue field of credentials to remove.
    content.vb: Public Sub RemoveUntrustedCredentialsForAssociate(associateId As Integer, type As String, publicValue As String)
  overload: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  id: CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateExternalUser(Int32, String, String, Int32, Boolean)
  nameWithType: UserAgent.CreateExternalUser(Int32, String, String, Int32, Boolean)
  fullName: SuperOffice.CRM.Services.UserAgent.CreateExternalUser(System.Int32, System.String, System.String, System.Int32, System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreates an associate of type external user.\n"
  syntax:
    content: public int CreateExternalUser(int personId, string userName, string password, int roleId, bool isActive)
    parameters:
    - id: personId
      type: System.Int32
      description: The personId to create an external user for.
    - id: userName
      type: System.String
      description: Login username.
    - id: password
      type: System.String
      description: Login password.
    - id: roleId
      type: System.Int32
      description: Id of role for the external user. The role must be a role of type external users.
    - id: isActive
      type: System.Boolean
      description: Set isActive to true to enable the external user to log in.
    return:
      type: System.Int32
      description: Returns the created associateId.
    content.vb: Public Function CreateExternalUser(personId As Integer, userName As String, password As String, roleId As Integer, isActive As Boolean) As Integer
  overload: SuperOffice.CRM.Services.UserAgent.CreateExternalUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteExternalUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteExternalUser(System.Int32)
  id: DeleteExternalUser(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteExternalUser(Int32)
  nameWithType: UserAgent.DeleteExternalUser(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteExternalUser(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes an associate of type external user.\n"
  syntax:
    content: public void DeleteExternalUser(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: The associateId to delete the associate entry for.
    content.vb: Public Sub DeleteExternalUser(associateId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.DeleteExternalUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  id: SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetExternalUserInfo(Int32, String, String, Boolean, Int32, ExternalUserInfoModification)
  nameWithType: UserAgent.SetExternalUserInfo(Int32, String, String, Boolean, Int32, ExternalUserInfoModification)
  fullName: SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo(System.Int32, System.String, System.String, System.Boolean, System.Int32, SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nModifies an external user. Changes external users information according to the flags set in  externalUserInfoModification.\n"
  syntax:
    content: public void SetExternalUserInfo(int associateId, string userName, string password, bool isActive, int roleId, ExternalUserInfoModification externalUserInfoModification)
    parameters:
    - id: associateId
      type: System.Int32
      description: The associateId to alter.
    - id: userName
      type: System.String
      description: Login username.
    - id: password
      type: System.String
      description: Login password.
    - id: isActive
      type: System.Boolean
      description: Set isActive to true to enable the external user to log in.
    - id: roleId
      type: System.Int32
      description: Id of role for the external user. The role must be a role of type external users.
    - id: externalUserInfoModification
      type: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
      description: externalUserInfoModification is a flag describing what to change. &lt;see cref=&quot;SuperOffice.CRM.Services.Util.ExternalUserInfoModification&quot;/>.
    content.vb: Public Sub SetExternalUserInfo(associateId As Integer, userName As String, password As String, isActive As Boolean, roleId As Integer, externalUserInfoModification As ExternalUserInfoModification)
  overload: SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser(System.String)
  id: GenerateNewPasswordForExternalUser(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GenerateNewPasswordForExternalUser(String)
  nameWithType: UserAgent.GenerateNewPasswordForExternalUser(String)
  fullName: SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGenerates a new password for an external user.\n"
  syntax:
    content: public string GenerateNewPasswordForExternalUser(string associateName)
    parameters:
    - id: associateName
      type: System.String
      description: The name of the associate to change the password for.
    return:
      type: System.String
      description: Returns the generated password.
    content.vb: Public Function GenerateNewPasswordForExternalUser(associateName As String) As String
  overload: SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CanChangePassword(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.CanChangePassword(System.Int32)
  id: CanChangePassword(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CanChangePassword(Int32)
  nameWithType: UserAgent.CanChangePassword(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.CanChangePassword(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck if the current assoicate can change the password for an associate\n"
  syntax:
    content: public bool CanChangePassword(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: AssociateId of the user to check if password can be changed
    return:
      type: System.Boolean
      description: True if the associate can change the password
    content.vb: Public Function CanChangePassword(associateId As Integer) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.CanChangePassword*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ChangePassword(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ChangePassword(System.Int32,System.String,System.String)
  id: ChangePassword(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ChangePassword(Int32, String, String)
  nameWithType: UserAgent.ChangePassword(Int32, String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.ChangePassword(System.Int32, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n"
  syntax:
    content: public bool ChangePassword(int associateId, string oldPassword, string newPassword)
    parameters:
    - id: associateId
      type: System.Int32
      description: AssociateId of the user to change password for.
    - id: oldPassword
      type: System.String
      description: The current password of the user.  Administrators can leave this blank to force a new password upon a user.
    - id: newPassword
      type: System.String
      description: The new password for the user
    return:
      type: System.Boolean
      description: True if the password was successfully changed.
    content.vb: Public Function ChangePassword(associateId As Integer, oldPassword As String, newPassword As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.ChangePassword*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId(System.Int32)
  id: GetUserFromPersonId(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserFromPersonId(Int32)
  nameWithType: UserAgent.GetUserFromPersonId(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns the user associated with the supplied person id\n"
  syntax:
    content: public User[] GetUserFromPersonId(int personId)
    parameters:
    - id: personId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Services.User[]
    content.vb: Public Function GetUserFromPersonId(personId As Integer) As User()
  overload: SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  id: CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUserFromUserTypeAndPersonId(UserType, Int32)
  nameWithType: UserAgent.CreateDefaultUserFromUserTypeAndPersonId(UserType, Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate default User providing the associate type and person id.  System and Anonymous users can be created without an exsisting person and permits person id to be 0.\n"
  syntax:
    content: public User CreateDefaultUserFromUserTypeAndPersonId(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of associate for the user
    - id: personId
      type: System.Int32
      description: Primary key of the person to become a user.
    return:
      type: SuperOffice.CRM.Services.User
      description: New user object with defalt values set.
    content.vb: Public Function CreateDefaultUserFromUserTypeAndPersonId(userType As UserType, personId As Integer) As User
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  id: CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUserFromUserType(UserType)
  nameWithType: UserAgent.CreateDefaultUserFromUserType(UserType)
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate default User providing the user type.  Only System and Anonymous users can be created without an exsisting person.  Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.\n"
  syntax:
    content: public User CreateDefaultUserFromUserType(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of associate for the user.  This can only be System or Anonymous. Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.
    return:
      type: SuperOffice.CRM.Services.User
      description: New user object with defalt values set.
    content.vb: Public Function CreateDefaultUserFromUserType(userType As UserType) As User
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId(System.Int32)
  id: GetUserFromEjUserId(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserFromEjUserId(Int32)
  nameWithType: UserAgent.GetUserFromEjUserId(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet user from ejUserId - used for eJournal Legacy Support.\n"
  syntax:
    content: public User[] GetUserFromEjUserId(int ejUserId)
    parameters:
    - id: ejUserId
      type: System.Int32
      description: 'ejUserId - '
    return:
      type: SuperOffice.CRM.Services.User[]
    content.vb: Public Function GetUserFromEjUserId(ejUserId As Integer) As User()
  overload: SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SetPasswordFromName(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetPasswordFromName(System.String,System.String)
  id: SetPasswordFromName(System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetPasswordFromName(String, String)
  nameWithType: UserAgent.SetPasswordFromName(String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.SetPasswordFromName(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n"
  syntax:
    content: public bool SetPasswordFromName(string associateName, string password)
    parameters:
    - id: associateName
      type: System.String
      description: Username to set password for
    - id: password
      type: System.String
      description: New password
    return:
      type: System.Boolean
      description: Succeeded?
    content.vb: Public Function SetPasswordFromName(associateName As String, password As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.SetPasswordFromName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SetPassword(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetPassword(System.Int32,System.String)
  id: SetPassword(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetPassword(Int32, String)
  nameWithType: UserAgent.SetPassword(Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.SetPassword(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n"
  syntax:
    content: public bool SetPassword(int associateId, string password)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of User to set password for
    - id: password
      type: System.String
      description: New password
    return:
      type: System.Boolean
      description: Succeeded?
    content.vb: Public Function SetPassword(associateId As Integer, password As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.SetPassword*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword(System.String,System.String)
  id: ChangeOwnPassword(System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ChangeOwnPassword(String, String)
  nameWithType: UserAgent.ChangeOwnPassword(String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n"
  syntax:
    content: public bool ChangeOwnPassword(string oldPassword, string newPassword)
    parameters:
    - id: oldPassword
      type: System.String
      description: The current password of the user.  Administrators can leave this blank to force a new password upon a user.
    - id: newPassword
      type: System.String
      description: The new password for the user
    return:
      type: System.Boolean
      description: True if the password was successfully changed.
    content.vb: Public Function ChangeOwnPassword(oldPassword As String, newPassword As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  id: ChangePasswordFromName(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ChangePasswordFromName(String, String, String)
  nameWithType: UserAgent.ChangePasswordFromName(String, String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName(System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n"
  syntax:
    content: public bool ChangePasswordFromName(string associateName, string oldPassword, string newPassword)
    parameters:
    - id: associateName
      type: System.String
      description: Username of the user to change password for.
    - id: oldPassword
      type: System.String
      description: The current password of the user.  Administrators can leave this blank to force a new password upon a user.
    - id: newPassword
      type: System.String
      description: The new password for the user
    return:
      type: System.Boolean
      description: True if the password was successfully changed.
    content.vb: Public Function ChangePasswordFromName(associateName As String, oldPassword As String, newPassword As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: IsUserNameValid(Int32, UserType, Int32, String)
  nameWithType: UserAgent.IsUserNameValid(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.IsUserNameValid(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public bool IsUserNameValid(int associateId, UserType type, int personId, string userName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: userName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsUserNameValid(associateId As Integer, type As UserType, personId As Integer, userName As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.IsUserNameValid*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: IsPasswordValid(Int32, UserType, Int32, String)
  nameWithType: UserAgent.IsPasswordValid(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.IsPasswordValid(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public bool IsPasswordValid(int associateId, UserType type, int personId, string password)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: password
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsPasswordValid(associateId As Integer, type As UserType, personId As Integer, password As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.IsPasswordValid*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword(System.Int32)
  id: SetGeneratedPassword(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetGeneratedPassword(Int32)
  nameWithType: UserAgent.SetGeneratedPassword(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public string SetGeneratedPassword(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Function SetGeneratedPassword(associateId As Integer) As String
  overload: SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName(System.String)
  id: SetGeneratedPasswordFromName(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SetGeneratedPasswordFromName(String)
  nameWithType: UserAgent.SetGeneratedPasswordFromName(String)
  fullName: SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public string SetGeneratedPasswordFromName(string associateName)
    parameters:
    - id: associateName
      type: System.String
    return:
      type: System.String
    content.vb: Public Function SetGeneratedPasswordFromName(associateName As String) As String
  overload: SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: IsPasswordValidWithReason(Int32, UserType, Int32, String)
  nameWithType: UserAgent.IsPasswordValidWithReason(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public UserValidationResult IsPasswordValidWithReason(int associateId, UserType type, int personId, string password)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: password
      type: System.String
    return:
      type: SuperOffice.CRM.Services.UserValidationResult
    content.vb: Public Function IsPasswordValidWithReason(associateId As Integer, type As UserType, personId As Integer, password As String) As UserValidationResult
  overload: SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: IsUserNameValidWithReason(Int32, UserType, Int32, String)
  nameWithType: UserAgent.IsUserNameValidWithReason(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public UserValidationResult IsUserNameValidWithReason(int associateId, UserType type, int personId, string userName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: userName
      type: System.String
    return:
      type: SuperOffice.CRM.Services.UserValidationResult
    content.vb: Public Function IsUserNameValidWithReason(associateId As Integer, type As UserType, personId As Integer, userName As String) As UserValidationResult
  overload: SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  id: ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ChangeUserType(User, UserType)
  nameWithType: UserAgent.ChangeUserType(User, UserType)
  fullName: SuperOffice.CRM.Services.UserAgent.ChangeUserType(SuperOffice.CRM.Services.User, SuperOffice.License.UserType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a user from the user name.\n"
  syntax:
    content: public User ChangeUserType(User user, UserType userType)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: User name of the user to get.
    - id: userType
      type: SuperOffice.License.UserType
    return:
      type: SuperOffice.CRM.Services.User
      description: User retrieved by name
    content.vb: Public Function ChangeUserType(user As User, userType As UserType) As User
  overload: SuperOffice.CRM.Services.UserAgent.ChangeUserType*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  id: CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUserFromUserTypeAndCredential(UserType, Int32, String, String, String)
  nameWithType: UserAgent.CreateDefaultUserFromUserTypeAndCredential(UserType, Int32, String, String, String)
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType, System.Int32, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreates a PersonEntity with default values based on the contactId and credentials.\n"
  syntax:
    content: public User CreateDefaultUserFromUserTypeAndCredential(UserType userType, int contactId, string credentialType, string credentialValue, string credentialDisplayValue)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of associate for the user
    - id: contactId
      type: System.Int32
      description: Contact id of the person
    - id: credentialType
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: credentialValue
      type: System.String
      description: This is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory
    - id: credentialDisplayValue
      type: System.String
      description: The value displayed to the user. this will typically be the users login name in active directory.
    return:
      type: SuperOffice.CRM.Services.User
    content.vb: Public Function CreateDefaultUserFromUserTypeAndCredential(userType As UserType, contactId As Integer, credentialType As String, credentialValue As String, credentialDisplayValue As String) As User
  overload: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetValidUserName(Int32, UserType, Int32, String)
  nameWithType: UserAgent.GetValidUserName(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetValidUserName(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public string GetValidUserName(int associateId, UserType type, int personId, string userName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: userName
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetValidUserName(associateId As Integer, type As UserType, personId As Integer, userName As String) As String
  overload: SuperOffice.CRM.Services.UserAgent.GetValidUserName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.RemoveLicenses(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.RemoveLicenses(System.Int32)
  id: RemoveLicenses(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: RemoveLicenses(Int32)
  nameWithType: UserAgent.RemoveLicenses(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveLicenses(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove all user licenses.\n"
  syntax:
    content: public void RemoveLicenses(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
    content.vb: Public Sub RemoveLicenses(associateId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.RemoveLicenses*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.MakeRetired(System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.UserAgent.MakeRetired(System.Int32,System.Boolean)
  id: MakeRetired(System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: MakeRetired(Int32, Boolean)
  nameWithType: UserAgent.MakeRetired(Int32, Boolean)
  fullName: SuperOffice.CRM.Services.UserAgent.MakeRetired(System.Int32, System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRetiring a user means to remove all licenses, setting person.retired=1 and associate.deleted=1. Unretiering a user means setting  person.retired=0 and associate.deleted=0\n"
  syntax:
    content: public void MakeRetired(int associateId, bool retired)
    parameters:
    - id: associateId
      type: System.Int32
    - id: retired
      type: System.Boolean
    content.vb: Public Sub MakeRetired(associateId As Integer, retired As Boolean)
  overload: SuperOffice.CRM.Services.UserAgent.MakeRetired*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.AddOwnerContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.AddOwnerContact(System.Int32)
  id: AddOwnerContact(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: AddOwnerContact(Int32)
  nameWithType: UserAgent.AddOwnerContact(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.AddOwnerContact(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public void AddOwnerContact(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: Id of the contact to add as a owner contact
    content.vb: Public Sub AddOwnerContact(contactId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.AddOwnerContact*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact(System.Int32)
  id: RemoveOwnerContact(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: RemoveOwnerContact(Int32)
  nameWithType: UserAgent.RemoveOwnerContact(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove a contact from the ownercontactlink table\n"
  syntax:
    content: public void RemoveOwnerContact(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: The id of the contact to remove
    content.vb: Public Sub RemoveOwnerContact(contactId As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  id: ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ResolveUserFromInfo(Int32, String, String[], String[], UserType, Credential)
  nameWithType: UserAgent.ResolveUserFromInfo(Int32, String, String[], String[], UserType, Credential)
  fullName: SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo(System.Int32, System.String, System.String[], System.String[], SuperOffice.License.UserType, SuperOffice.CRM.Services.Credential)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a user from the provided information. If the user or associated person does not exist, it will be created on demand.\n"
  syntax:
    content: public ResolvedUser ResolveUserFromInfo(int contactId, string personName, string[] phoneNumbers, string[] emails, UserType userType, Credential credential)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact Id of the contact which the person belongs to. Cannot be 0.
    - id: personName
      type: System.String
      description: The full name of the person to be resolved. Optional.
    - id: phoneNumbers
      type: System.String[]
      description: Phone numbers registered on the person. Optional.
    - id: emails
      type: System.String[]
      description: Email-addresses registered on the person. Optional.
    - id: userType
      type: SuperOffice.License.UserType
      description: The type of user to look up or create.
    - id: credential
      type: SuperOffice.CRM.Services.Credential
      description: The credentials to be used for the user. Required.
    return:
      type: SuperOffice.CRM.Services.ResolvedUser
      description: The results of the resolve-operation.
    content.vb: Public Function ResolveUserFromInfo(contactId As Integer, personName As String, phoneNumbers As String(), emails As String(), userType As UserType, credential As Credential) As ResolvedUser
  overload: SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  nameWithType.vb: UserAgent.ResolveUserFromInfo(Int32, String, String(), String(), UserType, Credential)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo(System.Int32, System.String, System.String(), System.String(), SuperOffice.License.UserType, SuperOffice.CRM.Services.Credential)
  name.vb: ResolveUserFromInfo(Int32, String, String(), String(), UserType, Credential)
- uid: SuperOffice.CRM.Services.UserAgent.GetAccessToken(System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetAccessToken(System.String,System.Boolean)
  id: GetAccessToken(System.String,System.Boolean)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetAccessToken(String, Boolean)
  nameWithType: UserAgent.GetAccessToken(String, Boolean)
  fullName: SuperOffice.CRM.Services.UserAgent.GetAccessToken(System.String, System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet an access token based on the current user&apos;s session.\n"
  syntax:
    content: public string GetAccessToken(string app_token, bool includeCsSession)
    parameters:
    - id: app_token
      type: System.String
      description: Application token to get access on behalf of. Optional.
    - id: includeCsSession
      type: System.Boolean
      description: Initialize CS session for this access token?.
    return:
      type: System.String
      description: An access token. &quot;8A:xyz123==&quot;
    content.vb: Public Function GetAccessToken(app_token As String, includeCsSession As Boolean) As String
  overload: SuperOffice.CRM.Services.UserAgent.GetAccessToken*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  id: GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetValidUserNameForNewUser(User)
  nameWithType: UserAgent.GetValidUserNameForNewUser(User)
  fullName: SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGenerates a valid username for an unsaved user\n"
  syntax:
    content: public string GetValidUserNameForNewUser(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
    return:
      type: System.String
    content.vb: Public Function GetValidUserNameForNewUser(user As User) As String
  overload: SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  id: GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetDefaultAssociateUserName(User)
  nameWithType: UserAgent.GetDefaultAssociateUserName(User)
  fullName: SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet the default username for a person\n"
  syntax:
    content: public string GetDefaultAssociateUserName(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
    return:
      type: System.String
    content.vb: Public Function GetDefaultAssociateUserName(user As User) As String
  overload: SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.IsNickNameUnique(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.IsNickNameUnique(System.Int32,System.String)
  id: IsNickNameUnique(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: IsNickNameUnique(Int32, String)
  nameWithType: UserAgent.IsNickNameUnique(Int32, String)
  fullName: SuperOffice.CRM.Services.UserAgent.IsNickNameUnique(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public bool IsNickNameUnique(int associateId, string nickName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: nickName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsNickNameUnique(associateId As Integer, nickName As String) As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.IsNickNameUnique*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.UserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  id: ValidateUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: ValidateUser(User)
  nameWithType: UserAgent.ValidateUser(User)
  fullName: SuperOffice.CRM.Services.UserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck that entity is ready for saving, return error messages by field.\n"
  syntax:
    content: public StringDictionary ValidateUser(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: Entity to be checked for errors.
    return:
      type: SuperOffice.CRM.Services.StringDictionary
      description: Error messages tagged by field.
    content.vb: Public Function ValidateUser(user As User) As StringDictionary
  overload: SuperOffice.CRM.Services.UserAgent.ValidateUser*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserGroup(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserGroup(System.Int32)
  id: GetUserGroup(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserGroup(Int32)
  nameWithType: UserAgent.GetUserGroup(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserGroup(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a UserGroup object.                        \n"
  syntax:
    content: public UserGroup GetUserGroup(int userGroupId)
    parameters:
    - id: userGroupId
      type: System.Int32
      description: The identifier of the UserGroup object
    return:
      type: SuperOffice.CRM.Services.UserGroup
      description: UserGroup
    content.vb: Public Function GetUserGroup(userGroupId As Integer) As UserGroup
  overload: SuperOffice.CRM.Services.UserAgent.GetUserGroup*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  id: SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveUserGroup(UserGroup)
  nameWithType: UserAgent.SaveUserGroup(UserGroup)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave a user group.  Set UserGroup.Deleted to mark a user group as deleted and invisible in the user interface.\n"
  syntax:
    content: public UserGroup SaveUserGroup(UserGroup userGroup)
    parameters:
    - id: userGroup
      type: SuperOffice.CRM.Services.UserGroup
      description: UserGroup to save
    return:
      type: SuperOffice.CRM.Services.UserGroup
      description: UserGroup as saved to the database
    content.vb: Public Function SaveUserGroup(userGroup As UserGroup) As UserGroup
  overload: SuperOffice.CRM.Services.UserAgent.SaveUserGroup*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetAllUserGroups(System.Boolean)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetAllUserGroups(System.Boolean)
  id: GetAllUserGroups(System.Boolean)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetAllUserGroups(Boolean)
  nameWithType: UserAgent.GetAllUserGroups(Boolean)
  fullName: SuperOffice.CRM.Services.UserAgent.GetAllUserGroups(System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all user groups\n"
  syntax:
    content: public UserGroup[] GetAllUserGroups(bool includeDeleted)
    parameters:
    - id: includeDeleted
      type: System.Boolean
      description: Include user groups with Deleted set to true
    return:
      type: SuperOffice.CRM.Services.UserGroup[]
      description: All user groups
    content.vb: Public Function GetAllUserGroups(includeDeleted As Boolean) As UserGroup()
  overload: SuperOffice.CRM.Services.UserAgent.GetAllUserGroups*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CreateUserGroup
  commentId: M:SuperOffice.CRM.Services.UserAgent.CreateUserGroup
  id: CreateUserGroup
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CreateUserGroup()
  nameWithType: UserAgent.CreateUserGroup()
  fullName: SuperOffice.CRM.Services.UserAgent.CreateUserGroup()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate UserGroup (Rank is assigned to the highest rank)\n"
  syntax:
    content: public UserGroup CreateUserGroup()
    return:
      type: SuperOffice.CRM.Services.UserGroup
    content.vb: Public Function CreateUserGroup As UserGroup
  overload: SuperOffice.CRM.Services.UserAgent.CreateUserGroup*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DeleteUserGroup(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DeleteUserGroup(System.Int32,System.Int32)
  id: DeleteUserGroup(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DeleteUserGroup(Int32, Int32)
  nameWithType: UserAgent.DeleteUserGroup(Int32, Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteUserGroup(System.Int32, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a usergroup and move its members to another usergroup\n"
  syntax:
    content: public void DeleteUserGroup(int userGroupToDelete, int userGroupToMoveTo)
    parameters:
    - id: userGroupToDelete
      type: System.Int32
      description: The id of the userGroup to delete
    - id: userGroupToMoveTo
      type: System.Int32
      description: The id of the userGroup to move the members to
    content.vb: Public Sub DeleteUserGroup(userGroupToDelete As Integer, userGroupToMoveTo As Integer)
  overload: SuperOffice.CRM.Services.UserAgent.DeleteUserGroup*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserGroupList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserGroupList(System.Int32[])
  id: GetUserGroupList(System.Int32[])
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserGroupList(Int32[])
  nameWithType: UserAgent.GetUserGroupList(Int32[])
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserGroupList(System.Int32[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets an array of UserGroup objects.                        \n"
  syntax:
    content: public UserGroup[] GetUserGroupList(int[] userGroupIds)
    parameters:
    - id: userGroupIds
      type: System.Int32[]
      description: The identifiers of the UserGroup object
    return:
      type: SuperOffice.CRM.Services.UserGroup[]
      description: Array of UserGroup objects
    content.vb: Public Function GetUserGroupList(userGroupIds As Integer()) As UserGroup()
  overload: SuperOffice.CRM.Services.UserAgent.GetUserGroupList*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  nameWithType.vb: UserAgent.GetUserGroupList(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Services.UserAgent.GetUserGroupList(System.Int32())
  name.vb: GetUserGroupList(Int32())
- uid: SuperOffice.CRM.Services.UserAgent.GetUserInfo(System.Int32)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserInfo(System.Int32)
  id: GetUserInfo(System.Int32)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserInfo(Int32)
  nameWithType: UserAgent.GetUserInfo(Int32)
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserInfo(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a UserInfo object.                        \n"
  syntax:
    content: public UserInfo GetUserInfo(int userInfoId)
    parameters:
    - id: userInfoId
      type: System.Int32
      description: The identifier of the UserInfo object
    return:
      type: SuperOffice.CRM.Services.UserInfo
      description: UserInfo
    content.vb: Public Function GetUserInfo(userInfoId As Integer) As UserInfo
  overload: SuperOffice.CRM.Services.UserAgent.GetUserInfo*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetUserInfoList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetUserInfoList(System.Int32[])
  id: GetUserInfoList(System.Int32[])
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetUserInfoList(Int32[])
  nameWithType: UserAgent.GetUserInfoList(Int32[])
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserInfoList(System.Int32[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets an array of UserInfo objects.                        \n"
  syntax:
    content: public UserInfo[] GetUserInfoList(int[] userInfoIds)
    parameters:
    - id: userInfoIds
      type: System.Int32[]
      description: The identifiers of the UserInfo object
    return:
      type: SuperOffice.CRM.Services.UserInfo[]
      description: Array of UserInfo objects
    content.vb: Public Function GetUserInfoList(userInfoIds As Integer()) As UserInfo()
  overload: SuperOffice.CRM.Services.UserAgent.GetUserInfoList*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  nameWithType.vb: UserAgent.GetUserInfoList(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Services.UserAgent.GetUserInfoList(System.Int32())
  name.vb: GetUserInfoList(Int32())
- uid: SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo
  id: GetAccessGatewayInfo
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetAccessGatewayInfo()
  nameWithType: UserAgent.GetAccessGatewayInfo()
  fullName: SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns accessgateway registration info\n"
  syntax:
    content: public AccessGatewayInfo GetAccessGatewayInfo()
    return:
      type: SuperOffice.CRM.Services.AccessGatewayInfo
    content.vb: Public Function GetAccessGatewayInfo As AccessGatewayInfo
  overload: SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  id: GetOrRegisterAccessGatewayInfo(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetOrRegisterAccessGatewayInfo(String)
  nameWithType: UserAgent.GetOrRegisterAccessGatewayInfo(String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns accessgateway registration info and registers a new or adds the url if necessary\n"
  syntax:
    content: public AccessGatewayInfo GetOrRegisterAccessGatewayInfo(string redirectUri)
    parameters:
    - id: redirectUri
      type: System.String
      description: This is the registered redirect_uri for AccessGateway OIDC.
    return:
      type: SuperOffice.CRM.Services.AccessGatewayInfo
    content.vb: Public Function GetOrRegisterAccessGatewayInfo(redirectUri As String) As AccessGatewayInfo
  overload: SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway(System.String)
  id: RegisterWithAccessGateway(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: RegisterWithAccessGateway(String)
  nameWithType: UserAgent.RegisterWithAccessGateway(String)
  fullName: SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRegisters with access gateway if not already done, otherwise will attempt to update\n"
  syntax:
    content: public AccessGatewayInfo RegisterWithAccessGateway(string redirectUri)
    parameters:
    - id: redirectUri
      type: System.String
      description: This is the registered redirect_uri for AccessGateway OIDC.
    return:
      type: SuperOffice.CRM.Services.AccessGatewayInfo
    content.vb: Public Function RegisterWithAccessGateway(redirectUri As String) As AccessGatewayInfo
  overload: SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration
  commentId: M:SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration
  id: CheckAccessGatewayRegistration
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: CheckAccessGatewayRegistration()
  nameWithType: UserAgent.CheckAccessGatewayRegistration()
  fullName: SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChecks if AccessGatewayRegistration is valid\n"
  syntax:
    content: public bool CheckAccessGatewayRegistration()
    return:
      type: System.Boolean
      description: True if the registration is usable
    content.vb: Public Function CheckAccessGatewayRegistration As Boolean
  overload: SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  commentId: M:SuperOffice.CRM.Services.UserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  id: SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: SaveExternalTokens(TokenManagementInfo)
  nameWithType: UserAgent.SaveExternalTokens(TokenManagementInfo)
  fullName: SuperOffice.CRM.Services.UserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves the external tokens to the DB and returns a key that can be used to retrieve them\n"
  syntax:
    content: public string SaveExternalTokens(TokenManagementInfo tokenManagementInfo)
    parameters:
    - id: tokenManagementInfo
      type: SuperOffice.CRM.Services.TokenManagementInfo
      description: Token information.
    return:
      type: System.String
      description: Key that can be used to retrieve the tokens
    content.vb: Public Function SaveExternalTokens(tokenManagementInfo As TokenManagementInfo) As String
  overload: SuperOffice.CRM.Services.UserAgent.SaveExternalTokens*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  commentId: M:SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  id: DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: DecryptAndSaveExternalTokens(TokenManagementInfo)
  nameWithType: UserAgent.DecryptAndSaveExternalTokens(TokenManagementInfo)
  fullName: SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFirst asks AccessGateway to decrypt the tokens, then saves the external tokens to the DB and returns a key that can be used to retrieve them\n"
  syntax:
    content: public string DecryptAndSaveExternalTokens(TokenManagementInfo tokenManagementInfo)
    parameters:
    - id: tokenManagementInfo
      type: SuperOffice.CRM.Services.TokenManagementInfo
      description: Token information.
    return:
      type: System.String
      description: Key that can be used to retrieve the tokens
    content.vb: Public Function DecryptAndSaveExternalTokens(tokenManagementInfo As TokenManagementInfo) As String
  overload: SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.GetExternalTokens(System.String)
  commentId: M:SuperOffice.CRM.Services.UserAgent.GetExternalTokens(System.String)
  id: GetExternalTokens(System.String)
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: GetExternalTokens(String)
  nameWithType: UserAgent.GetExternalTokens(String)
  fullName: SuperOffice.CRM.Services.UserAgent.GetExternalTokens(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRetrieve the tokens from the DB based on the given key\n"
  syntax:
    content: public TokenManagementInfo GetExternalTokens(string key)
    parameters:
    - id: key
      type: System.String
      description: Token retrievel key
    return:
      type: SuperOffice.CRM.Services.TokenManagementInfo
      description: Key to retrieve tokens
    content.vb: Public Function GetExternalTokens(key As String) As TokenManagementInfo
  overload: SuperOffice.CRM.Services.UserAgent.GetExternalTokens*
  implements:
  - SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.UserAgent.#ctor
  commentId: M:SuperOffice.CRM.Services.UserAgent.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Services.UserAgent
  langs:
  - csharp
  - vb
  name: UserAgent()
  nameWithType: UserAgent.UserAgent()
  fullName: SuperOffice.CRM.Services.UserAgent.UserAgent()
  type: Constructor
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  syntax:
    content: public UserAgent()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Services.UserAgent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}
  commentId: T:SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}
  parent: SuperOffice.CRM.Services
  definition: SuperOffice.CRM.Services.AgentBase`1
  name: AgentBase<IUserAgent>
  nameWithType: AgentBase<IUserAgent>
  fullName: SuperOffice.CRM.Services.AgentBase<SuperOffice.CRM.Services.IUserAgent>
  nameWithType.vb: AgentBase(Of IUserAgent)
  fullName.vb: SuperOffice.CRM.Services.AgentBase(Of SuperOffice.CRM.Services.IUserAgent)
  name.vb: AgentBase(Of IUserAgent)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.AgentBase`1
    name: AgentBase
    nameWithType: AgentBase
    fullName: SuperOffice.CRM.Services.AgentBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.IUserAgent
    name: IUserAgent
    nameWithType: IUserAgent
    fullName: SuperOffice.CRM.Services.IUserAgent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.CRM.Services.AgentBase`1
    name: AgentBase
    nameWithType: AgentBase
    fullName: SuperOffice.CRM.Services.AgentBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.IUserAgent
    name: IUserAgent
    nameWithType: IUserAgent
    fullName: SuperOffice.CRM.Services.IUserAgent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.CRM.Services.IUserAgent
  commentId: T:SuperOffice.CRM.Services.IUserAgent
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: IUserAgent
  nameWithType: IUserAgent
  fullName: SuperOffice.CRM.Services.IUserAgent
- uid: SuperOffice.CRM.Services.IAgent
  commentId: T:SuperOffice.CRM.Services.IAgent
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: IAgent
  nameWithType: IAgent
  fullName: SuperOffice.CRM.Services.IAgent
- uid: SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}.Dispose
  commentId: M:SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}.Dispose
  parent: SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}
  definition: SuperOffice.CRM.Services.AgentBase`1.Dispose
  name: Dispose()
  nameWithType: AgentBase<IUserAgent>.Dispose()
  fullName: SuperOffice.CRM.Services.AgentBase<SuperOffice.CRM.Services.IUserAgent>.Dispose()
  nameWithType.vb: AgentBase(Of IUserAgent).Dispose()
  fullName.vb: SuperOffice.CRM.Services.AgentBase(Of SuperOffice.CRM.Services.IUserAgent).Dispose()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.AgentBase`1.Dispose
    name: Dispose
    nameWithType: AgentBase<IUserAgent>.Dispose
    fullName: SuperOffice.CRM.Services.AgentBase<SuperOffice.CRM.Services.IUserAgent>.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.AgentBase`1.Dispose
    name: Dispose
    nameWithType: AgentBase(Of IUserAgent).Dispose
    fullName: SuperOffice.CRM.Services.AgentBase(Of SuperOffice.CRM.Services.IUserAgent).Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}.InnerAgent
  commentId: P:SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}.InnerAgent
  parent: SuperOffice.CRM.Services.AgentBase{SuperOffice.CRM.Services.IUserAgent}
  definition: SuperOffice.CRM.Services.AgentBase`1.InnerAgent
  name: InnerAgent
  nameWithType: AgentBase<IUserAgent>.InnerAgent
  fullName: SuperOffice.CRM.Services.AgentBase<SuperOffice.CRM.Services.IUserAgent>.InnerAgent
  nameWithType.vb: AgentBase(Of IUserAgent).InnerAgent
  fullName.vb: SuperOffice.CRM.Services.AgentBase(Of SuperOffice.CRM.Services.IUserAgent).InnerAgent
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.AgentBase`1
  commentId: T:SuperOffice.CRM.Services.AgentBase`1
  isExternal: true
  name: AgentBase<TAgent>
  nameWithType: AgentBase<TAgent>
  fullName: SuperOffice.CRM.Services.AgentBase<TAgent>
  nameWithType.vb: AgentBase(Of TAgent)
  fullName.vb: SuperOffice.CRM.Services.AgentBase(Of TAgent)
  name.vb: AgentBase(Of TAgent)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.AgentBase`1
    name: AgentBase
    nameWithType: AgentBase
    fullName: SuperOffice.CRM.Services.AgentBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAgent
    nameWithType: TAgent
    fullName: TAgent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.CRM.Services.AgentBase`1
    name: AgentBase
    nameWithType: AgentBase
    fullName: SuperOffice.CRM.Services.AgentBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAgent
    nameWithType: TAgent
    fullName: TAgent
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.AgentBase`1.Dispose
  commentId: M:SuperOffice.CRM.Services.AgentBase`1.Dispose
  isExternal: true
  name: Dispose()
  nameWithType: AgentBase<TAgent>.Dispose()
  fullName: SuperOffice.CRM.Services.AgentBase<TAgent>.Dispose()
  nameWithType.vb: AgentBase(Of TAgent).Dispose()
  fullName.vb: SuperOffice.CRM.Services.AgentBase(Of TAgent).Dispose()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.AgentBase`1.Dispose
    name: Dispose
    nameWithType: AgentBase<TAgent>.Dispose
    fullName: SuperOffice.CRM.Services.AgentBase<TAgent>.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.AgentBase`1.Dispose
    name: Dispose
    nameWithType: AgentBase(Of TAgent).Dispose
    fullName: SuperOffice.CRM.Services.AgentBase(Of TAgent).Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.AgentBase`1.InnerAgent
  commentId: P:SuperOffice.CRM.Services.AgentBase`1.InnerAgent
  isExternal: true
  name: InnerAgent
  nameWithType: AgentBase<TAgent>.InnerAgent
  fullName: SuperOffice.CRM.Services.AgentBase<TAgent>.InnerAgent
  nameWithType.vb: AgentBase(Of TAgent).InnerAgent
  fullName.vb: SuperOffice.CRM.Services.AgentBase(Of TAgent).InnerAgent
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth
  isExternal: true
  name: CreateDefaultServiceAuth
  nameWithType: UserAgent.CreateDefaultServiceAuth
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultServiceAuth()
  nameWithType: IUserAgent.CreateDefaultServiceAuth()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
    name: CreateDefaultServiceAuth
    nameWithType: IUserAgent.CreateDefaultServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
    name: CreateDefaultServiceAuth
    nameWithType: IUserAgent.CreateDefaultServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ServiceAuth
  commentId: T:SuperOffice.CRM.Services.ServiceAuth
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ServiceAuth
  nameWithType: ServiceAuth
  fullName: SuperOffice.CRM.Services.ServiceAuth
- uid: SuperOffice.CRM.Services.UserAgent.SaveServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveServiceAuth
  isExternal: true
  name: SaveServiceAuth
  nameWithType: UserAgent.SaveServiceAuth
  fullName: SuperOffice.CRM.Services.UserAgent.SaveServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveServiceAuth(ServiceAuth)
  nameWithType: IUserAgent.SaveServiceAuth(ServiceAuth)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
    name: SaveServiceAuth
    nameWithType: IUserAgent.SaveServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.ServiceAuth
    name: ServiceAuth
    nameWithType: ServiceAuth
    fullName: SuperOffice.CRM.Services.ServiceAuth
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
    name: SaveServiceAuth
    nameWithType: IUserAgent.SaveServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.ServiceAuth
    name: ServiceAuth
    nameWithType: ServiceAuth
    fullName: SuperOffice.CRM.Services.ServiceAuth
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth
  isExternal: true
  name: DeleteServiceAuth
  nameWithType: UserAgent.DeleteServiceAuth
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteServiceAuth(Int32)
  nameWithType: IUserAgent.DeleteServiceAuth(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
    name: DeleteServiceAuth
    nameWithType: IUserAgent.DeleteServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
    name: DeleteServiceAuth
    nameWithType: IUserAgent.DeleteServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity
  isExternal: true
  name: CreateDefaultRoleEntity
  nameWithType: UserAgent.CreateDefaultRoleEntity
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntity
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultRoleEntity()
  nameWithType: IUserAgent.CreateDefaultRoleEntity()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
    name: CreateDefaultRoleEntity
    nameWithType: IUserAgent.CreateDefaultRoleEntity
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
    name: CreateDefaultRoleEntity
    nameWithType: IUserAgent.CreateDefaultRoleEntity
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RoleEntity
  commentId: T:SuperOffice.CRM.Services.RoleEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: RoleEntity
  nameWithType: RoleEntity
  fullName: SuperOffice.CRM.Services.RoleEntity
- uid: SuperOffice.CRM.Services.UserAgent.SaveRoleEntity*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveRoleEntity
  isExternal: true
  name: SaveRoleEntity
  nameWithType: UserAgent.SaveRoleEntity
  fullName: SuperOffice.CRM.Services.UserAgent.SaveRoleEntity
- uid: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveRoleEntity(RoleEntity)
  nameWithType: IUserAgent.SaveRoleEntity(RoleEntity)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
    name: SaveRoleEntity
    nameWithType: IUserAgent.SaveRoleEntity
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RoleEntity
    name: RoleEntity
    nameWithType: RoleEntity
    fullName: SuperOffice.CRM.Services.RoleEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
    name: SaveRoleEntity
    nameWithType: IUserAgent.SaveRoleEntity
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RoleEntity
    name: RoleEntity
    nameWithType: RoleEntity
    fullName: SuperOffice.CRM.Services.RoleEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials
  isExternal: true
  name: CreateDefaultUntrustedCredentials
  nameWithType: UserAgent.CreateDefaultUntrustedCredentials
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultUntrustedCredentials()
  nameWithType: IUserAgent.CreateDefaultUntrustedCredentials()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
    name: CreateDefaultUntrustedCredentials
    nameWithType: IUserAgent.CreateDefaultUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
    name: CreateDefaultUntrustedCredentials
    nameWithType: IUserAgent.CreateDefaultUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UntrustedCredentials
  commentId: T:SuperOffice.CRM.Services.UntrustedCredentials
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UntrustedCredentials
  nameWithType: UntrustedCredentials
  fullName: SuperOffice.CRM.Services.UntrustedCredentials
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultUser
  isExternal: true
  name: CreateDefaultUser
  nameWithType: UserAgent.CreateDefaultUser
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUser
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultUser()
  nameWithType: IUserAgent.CreateDefaultUser()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
    name: CreateDefaultUser
    nameWithType: IUserAgent.CreateDefaultUser
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
    name: CreateDefaultUser
    nameWithType: IUserAgent.CreateDefaultUser
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.User
  commentId: T:SuperOffice.CRM.Services.User
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: User
  nameWithType: User
  fullName: SuperOffice.CRM.Services.User
- uid: SuperOffice.CRM.Services.UserAgent.SaveUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveUser
  isExternal: true
  name: SaveUser
  nameWithType: UserAgent.SaveUser
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUser
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveUser(User)
  nameWithType: IUserAgent.SaveUser(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
    name: SaveUser
    nameWithType: IUserAgent.SaveUser
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
    name: SaveUser
    nameWithType: IUserAgent.SaveUser
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserCommands*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserCommands
  isExternal: true
  name: GetUserCommands
  nameWithType: UserAgent.GetUserCommands
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserCommands
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserCommands(User)
  nameWithType: IUserAgent.GetUserCommands(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
    name: GetUserCommands
    nameWithType: IUserAgent.GetUserCommands
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
    name: GetUserCommands
    nameWithType: IUserAgent.GetUserCommands
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.CustomCommand[]
  isExternal: true
  name: CustomCommand[]
  nameWithType: CustomCommand[]
  fullName: SuperOffice.CRM.Services.CustomCommand[]
  nameWithType.vb: CustomCommand()
  fullName.vb: SuperOffice.CRM.Services.CustomCommand()
  name.vb: CustomCommand()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.CustomCommand
    name: CustomCommand
    nameWithType: CustomCommand
    fullName: SuperOffice.CRM.Services.CustomCommand
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.CustomCommand
    name: CustomCommand
    nameWithType: CustomCommand
    fullName: SuperOffice.CRM.Services.CustomCommand
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand
  isExternal: true
  name: ExecuteUserCommand
  nameWithType: UserAgent.ExecuteUserCommand
  fullName: SuperOffice.CRM.Services.UserAgent.ExecuteUserCommand
- uid: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ExecuteUserCommand(String, CommandActionResult, User)
  nameWithType: IUserAgent.ExecuteUserCommand(String, CommandActionResult, User)
  fullName: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String, SuperOffice.Data.CommandActionResult, SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
    name: ExecuteUserCommand
    nameWithType: IUserAgent.ExecuteUserCommand
    fullName: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.CommandActionResult
    name: CommandActionResult
    nameWithType: CommandActionResult
    fullName: SuperOffice.Data.CommandActionResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
    name: ExecuteUserCommand
    nameWithType: IUserAgent.ExecuteUserCommand
    fullName: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.CommandActionResult
    name: CommandActionResult
    nameWithType: CommandActionResult
    fullName: SuperOffice.Data.CommandActionResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.CommandActionResult
  isExternal: true
  name: CommandActionResult
  nameWithType: CommandActionResult
  fullName: SuperOffice.Data.CommandActionResult
- uid: SuperOffice.CRM.Services.CommandResult
  commentId: T:SuperOffice.CRM.Services.CommandResult
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: CommandResult
  nameWithType: CommandResult
  fullName: SuperOffice.CRM.Services.CommandResult
- uid: SuperOffice.CRM.Services.UserAgent.DeleteUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteUser
  isExternal: true
  name: DeleteUser
  nameWithType: UserAgent.DeleteUser
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteUser
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteUser(Int32)
  nameWithType: IUserAgent.DeleteUser(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
    name: DeleteUser
    nameWithType: IUserAgent.DeleteUser
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
    name: DeleteUser
    nameWithType: IUserAgent.DeleteUser
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SaveCredential*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveCredential
  isExternal: true
  name: SaveCredential
  nameWithType: UserAgent.SaveCredential
  fullName: SuperOffice.CRM.Services.UserAgent.SaveCredential
- uid: SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveCredential(Int32, Credential)
  nameWithType: IUserAgent.SaveCredential(Int32, Credential)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32, SuperOffice.CRM.Services.Credential)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
    name: SaveCredential
    nameWithType: IUserAgent.SaveCredential
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveCredential
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Credential
    name: Credential
    nameWithType: Credential
    fullName: SuperOffice.CRM.Services.Credential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
    name: SaveCredential
    nameWithType: IUserAgent.SaveCredential
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveCredential
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Credential
    name: Credential
    nameWithType: Credential
    fullName: SuperOffice.CRM.Services.Credential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.Credential
  commentId: T:SuperOffice.CRM.Services.Credential
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: Credential
  nameWithType: Credential
  fullName: SuperOffice.CRM.Services.Credential
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Services.UserAgent.DeleteCredential*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteCredential
  isExternal: true
  name: DeleteCredential
  nameWithType: UserAgent.DeleteCredential
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteCredential
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteCredential(Int32, String)
  nameWithType: IUserAgent.DeleteCredential(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
    name: DeleteCredential
    nameWithType: IUserAgent.DeleteCredential
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteCredential
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
    name: DeleteCredential
    nameWithType: IUserAgent.DeleteCredential
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteCredential
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups
  isExternal: true
  name: FindCredentialsGroups
  nameWithType: UserAgent.FindCredentialsGroups
  fullName: SuperOffice.CRM.Services.UserAgent.FindCredentialsGroups
- uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: FindCredentialsGroups(String, String)
  nameWithType: IUserAgent.FindCredentialsGroups(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
    name: FindCredentialsGroups
    nameWithType: IUserAgent.FindCredentialsGroups
    fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
    name: FindCredentialsGroups
    nameWithType: IUserAgent.FindCredentialsGroups
    fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.CredentialsGroup[]
  isExternal: true
  name: CredentialsGroup[]
  nameWithType: CredentialsGroup[]
  fullName: SuperOffice.CRM.Services.CredentialsGroup[]
  nameWithType.vb: CredentialsGroup()
  fullName.vb: SuperOffice.CRM.Services.CredentialsGroup()
  name.vb: CredentialsGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.CredentialsGroup
    name: CredentialsGroup
    nameWithType: CredentialsGroup
    fullName: SuperOffice.CRM.Services.CredentialsGroup
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.CredentialsGroup
    name: CredentialsGroup
    nameWithType: CredentialsGroup
    fullName: SuperOffice.CRM.Services.CredentialsGroup
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.FindCredentialUsers*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.FindCredentialUsers
  isExternal: true
  name: FindCredentialUsers
  nameWithType: UserAgent.FindCredentialUsers
  fullName: SuperOffice.CRM.Services.UserAgent.FindCredentialUsers
- uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: FindCredentialUsers(String, String)
  nameWithType: IUserAgent.FindCredentialUsers(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
    name: FindCredentialUsers
    nameWithType: IUserAgent.FindCredentialUsers
    fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
    name: FindCredentialUsers
    nameWithType: IUserAgent.FindCredentialUsers
    fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.CredentialsGroupUsers
  commentId: T:SuperOffice.CRM.Services.CredentialsGroupUsers
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: CredentialsGroupUsers
  nameWithType: CredentialsGroupUsers
  fullName: SuperOffice.CRM.Services.CredentialsGroupUsers
- uid: SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup
  isExternal: true
  name: GetCredentialUsersInGroup
  nameWithType: UserAgent.GetCredentialUsersInGroup
  fullName: SuperOffice.CRM.Services.UserAgent.GetCredentialUsersInGroup
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetCredentialUsersInGroup(String, String)
  nameWithType: IUserAgent.GetCredentialUsersInGroup(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
    name: GetCredentialUsersInGroup
    nameWithType: IUserAgent.GetCredentialUsersInGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
    name: GetCredentialUsersInGroup
    nameWithType: IUserAgent.GetCredentialUsersInGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetServiceAuth
  isExternal: true
  name: GetServiceAuth
  nameWithType: UserAgent.GetServiceAuth
  fullName: SuperOffice.CRM.Services.UserAgent.GetServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetServiceAuth(Int32)
  nameWithType: IUserAgent.GetServiceAuth(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
    name: GetServiceAuth
    nameWithType: IUserAgent.GetServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
    name: GetServiceAuth
    nameWithType: IUserAgent.GetServiceAuth
    fullName: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetRole*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetRole
  isExternal: true
  name: GetRole
  nameWithType: UserAgent.GetRole
  fullName: SuperOffice.CRM.Services.UserAgent.GetRole
- uid: SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetRole(Int32)
  nameWithType: IUserAgent.GetRole(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
    name: GetRole
    nameWithType: IUserAgent.GetRole
    fullName: SuperOffice.CRM.Services.IUserAgent.GetRole
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
    name: GetRole
    nameWithType: IUserAgent.GetRole
    fullName: SuperOffice.CRM.Services.IUserAgent.GetRole
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.Role
  commentId: T:SuperOffice.CRM.Services.Role
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: Role
  nameWithType: Role
  fullName: SuperOffice.CRM.Services.Role
- uid: SuperOffice.CRM.Services.UserAgent.GetRoleEntity*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetRoleEntity
  isExternal: true
  name: GetRoleEntity
  nameWithType: UserAgent.GetRoleEntity
  fullName: SuperOffice.CRM.Services.UserAgent.GetRoleEntity
- uid: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetRoleEntity(Int32)
  nameWithType: IUserAgent.GetRoleEntity(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
    name: GetRoleEntity
    nameWithType: IUserAgent.GetRoleEntity
    fullName: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
    name: GetRoleEntity
    nameWithType: IUserAgent.GetRoleEntity
    fullName: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.DeleteRole*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteRole
  isExternal: true
  name: DeleteRole
  nameWithType: UserAgent.DeleteRole
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteRole
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteRole(Int32, Int32)
  nameWithType: IUserAgent.DeleteRole(Int32, Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
    name: DeleteRole
    nameWithType: IUserAgent.DeleteRole
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteRole
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
    name: DeleteRole
    nameWithType: IUserAgent.DeleteRole
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteRole
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetAllRoles*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetAllRoles
  isExternal: true
  name: GetAllRoles
  nameWithType: UserAgent.GetAllRoles
  fullName: SuperOffice.CRM.Services.UserAgent.GetAllRoles
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetAllRoles(RoleType)
  nameWithType: IUserAgent.GetAllRoles(RoleType)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
    name: GetAllRoles
    nameWithType: IUserAgent.GetAllRoles
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAllRoles
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RoleType
    name: RoleType
    nameWithType: RoleType
    fullName: SuperOffice.Data.RoleType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
    name: GetAllRoles
    nameWithType: IUserAgent.GetAllRoles
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAllRoles
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RoleType
    name: RoleType
    nameWithType: RoleType
    fullName: SuperOffice.Data.RoleType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RoleType
  isExternal: true
  name: RoleType
  nameWithType: RoleType
  fullName: SuperOffice.Data.RoleType
- uid: SuperOffice.CRM.Services.SelectableMDOListItem[]
  isExternal: true
  name: SelectableMDOListItem[]
  nameWithType: SelectableMDOListItem[]
  fullName: SuperOffice.CRM.Services.SelectableMDOListItem[]
  nameWithType.vb: SelectableMDOListItem()
  fullName.vb: SuperOffice.CRM.Services.SelectableMDOListItem()
  name.vb: SelectableMDOListItem()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.SelectableMDOListItem
    name: SelectableMDOListItem
    nameWithType: SelectableMDOListItem
    fullName: SuperOffice.CRM.Services.SelectableMDOListItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.SelectableMDOListItem
    name: SelectableMDOListItem
    nameWithType: SelectableMDOListItem
    fullName: SuperOffice.CRM.Services.SelectableMDOListItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights
  isExternal: true
  name: GetAllFunctionalRights
  nameWithType: UserAgent.GetAllFunctionalRights
  fullName: SuperOffice.CRM.Services.UserAgent.GetAllFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetAllFunctionalRights(RoleType)
  nameWithType: IUserAgent.GetAllFunctionalRights(RoleType)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
    name: GetAllFunctionalRights
    nameWithType: IUserAgent.GetAllFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RoleType
    name: RoleType
    nameWithType: RoleType
    fullName: SuperOffice.Data.RoleType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
    name: GetAllFunctionalRights
    nameWithType: IUserAgent.GetAllFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RoleType
    name: RoleType
    nameWithType: RoleType
    fullName: SuperOffice.Data.RoleType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetFunctionalRights
  isExternal: true
  name: GetFunctionalRights
  nameWithType: UserAgent.GetFunctionalRights
  fullName: SuperOffice.CRM.Services.UserAgent.GetFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetFunctionalRights(Int32)
  nameWithType: IUserAgent.GetFunctionalRights(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
    name: GetFunctionalRights
    nameWithType: IUserAgent.GetFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
    name: GetFunctionalRights
    nameWithType: IUserAgent.GetFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SetFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetFunctionalRights
  isExternal: true
  name: SetFunctionalRights
  nameWithType: UserAgent.SetFunctionalRights
  fullName: SuperOffice.CRM.Services.UserAgent.SetFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetFunctionalRights(Int32, Int32[])
  nameWithType: IUserAgent.SetFunctionalRights(Int32, Int32[])
  fullName: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32, System.Int32[])
  nameWithType.vb: IUserAgent.SetFunctionalRights(Int32, Int32())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32, System.Int32())
  name.vb: SetFunctionalRights(Int32, Int32())
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
    name: SetFunctionalRights
    nameWithType: IUserAgent.SetFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
    name: SetFunctionalRights
    nameWithType: IUserAgent.SetFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.SetDataRight*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetDataRight
  isExternal: true
  name: SetDataRight
  nameWithType: UserAgent.SetDataRight
  fullName: SuperOffice.CRM.Services.UserAgent.SetDataRight
- uid: SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetDataRight(Int32, String, RoleRelationToOwner, String)
  nameWithType: IUserAgent.SetDataRight(Int32, String, RoleRelationToOwner, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32, System.String, SuperOffice.CRM.Services.Util.RoleRelationToOwner, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
    name: SetDataRight
    nameWithType: IUserAgent.SetDataRight
    fullName: SuperOffice.CRM.Services.IUserAgent.SetDataRight
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    name: RoleRelationToOwner
    nameWithType: RoleRelationToOwner
    fullName: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
    name: SetDataRight
    nameWithType: IUserAgent.SetDataRight
    fullName: SuperOffice.CRM.Services.IUserAgent.SetDataRight
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    name: RoleRelationToOwner
    nameWithType: RoleRelationToOwner
    fullName: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.Util.RoleRelationToOwner
  commentId: T:SuperOffice.CRM.Services.Util.RoleRelationToOwner
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  name: RoleRelationToOwner
  nameWithType: RoleRelationToOwner
  fullName: SuperOffice.CRM.Services.Util.RoleRelationToOwner
- uid: SuperOffice.CRM.Services.Util
  commentId: N:SuperOffice.CRM.Services.Util
  isExternal: true
  name: SuperOffice.CRM.Services.Util
  nameWithType: SuperOffice.CRM.Services.Util
  fullName: SuperOffice.CRM.Services.Util
- uid: SuperOffice.CRM.Services.UserAgent.GetDataRight*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetDataRight
  isExternal: true
  name: GetDataRight
  nameWithType: UserAgent.GetDataRight
  fullName: SuperOffice.CRM.Services.UserAgent.GetDataRight
- uid: SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetDataRight(Int32, String, RoleRelationToOwner)
  nameWithType: IUserAgent.GetDataRight(Int32, String, RoleRelationToOwner)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32, System.String, SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
    name: GetDataRight
    nameWithType: IUserAgent.GetDataRight
    fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRight
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    name: RoleRelationToOwner
    nameWithType: RoleRelationToOwner
    fullName: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
    name: GetDataRight
    nameWithType: IUserAgent.GetDataRight
    fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRight
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    name: RoleRelationToOwner
    nameWithType: RoleRelationToOwner
    fullName: SuperOffice.CRM.Services.Util.RoleRelationToOwner
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetDataRights*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetDataRights
  isExternal: true
  name: GetDataRights
  nameWithType: UserAgent.GetDataRights
  fullName: SuperOffice.CRM.Services.UserAgent.GetDataRights
- uid: SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetDataRights(Int32, String)
  nameWithType: IUserAgent.GetDataRights(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
    name: GetDataRights
    nameWithType: IUserAgent.GetDataRights
    fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
    name: GetDataRights
    nameWithType: IUserAgent.GetDataRights
    fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.StringDictionary
  isExternal: true
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: SuperOffice.CRM.Services.StringDictionary
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType
  isExternal: true
  name: CreateDefaultRoleEntityFromType
  nameWithType: UserAgent.CreateDefaultRoleEntityFromType
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultRoleEntityFromType
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultRoleEntityFromType(RoleType)
  nameWithType: IUserAgent.CreateDefaultRoleEntityFromType(RoleType)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
    name: CreateDefaultRoleEntityFromType
    nameWithType: IUserAgent.CreateDefaultRoleEntityFromType
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RoleType
    name: RoleType
    nameWithType: RoleType
    fullName: SuperOffice.Data.RoleType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
    name: CreateDefaultRoleEntityFromType
    nameWithType: IUserAgent.CreateDefaultRoleEntityFromType
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RoleType
    name: RoleType
    nameWithType: RoleType
    fullName: SuperOffice.Data.RoleType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight
  isExternal: true
  name: FindRolesWithFunctionalRight
  nameWithType: UserAgent.FindRolesWithFunctionalRight
  fullName: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRight
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: FindRolesWithFunctionalRight(String)
  nameWithType: IUserAgent.FindRolesWithFunctionalRight(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
    name: FindRolesWithFunctionalRight
    nameWithType: IUserAgent.FindRolesWithFunctionalRight
    fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
    name: FindRolesWithFunctionalRight
    nameWithType: IUserAgent.FindRolesWithFunctionalRight
    fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.MDOListItem[]
  isExternal: true
  name: MDOListItem[]
  nameWithType: MDOListItem[]
  fullName: SuperOffice.CRM.Services.MDOListItem[]
  nameWithType.vb: MDOListItem()
  fullName.vb: SuperOffice.CRM.Services.MDOListItem()
  name.vb: MDOListItem()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.MDOListItem
    name: MDOListItem
    nameWithType: MDOListItem
    fullName: SuperOffice.CRM.Services.MDOListItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.MDOListItem
    name: MDOListItem
    nameWithType: MDOListItem
    fullName: SuperOffice.CRM.Services.MDOListItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights
  isExternal: true
  name: FindRolesWithFunctionalRights
  nameWithType: UserAgent.FindRolesWithFunctionalRights
  fullName: SuperOffice.CRM.Services.UserAgent.FindRolesWithFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: FindRolesWithFunctionalRights(String[])
  nameWithType: IUserAgent.FindRolesWithFunctionalRights(String[])
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  nameWithType.vb: IUserAgent.FindRolesWithFunctionalRights(String())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String())
  name.vb: FindRolesWithFunctionalRights(String())
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
    name: FindRolesWithFunctionalRights
    nameWithType: IUserAgent.FindRolesWithFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
    name: FindRolesWithFunctionalRights
    nameWithType: IUserAgent.FindRolesWithFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights
  isExternal: true
  name: FindRolesWithoutFunctionalRights
  nameWithType: UserAgent.FindRolesWithoutFunctionalRights
  fullName: SuperOffice.CRM.Services.UserAgent.FindRolesWithoutFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: FindRolesWithoutFunctionalRights(String[])
  nameWithType: IUserAgent.FindRolesWithoutFunctionalRights(String[])
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  nameWithType.vb: IUserAgent.FindRolesWithoutFunctionalRights(String())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String())
  name.vb: FindRolesWithoutFunctionalRights(String())
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
    name: FindRolesWithoutFunctionalRights
    nameWithType: IUserAgent.FindRolesWithoutFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
    name: FindRolesWithoutFunctionalRights
    nameWithType: IUserAgent.FindRolesWithoutFunctionalRights
    fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUser
  isExternal: true
  name: GetUser
  nameWithType: UserAgent.GetUser
  fullName: SuperOffice.CRM.Services.UserAgent.GetUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUser(Int32)
  nameWithType: IUserAgent.GetUser(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
    name: GetUser
    nameWithType: IUserAgent.GetUser
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
    name: GetUser
    nameWithType: IUserAgent.GetUser
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserFromName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserFromName
  isExternal: true
  name: GetUserFromName
  nameWithType: UserAgent.GetUserFromName
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserFromName
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserFromName(String)
  nameWithType: IUserAgent.GetUserFromName(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
    name: GetUserFromName
    nameWithType: IUserAgent.GetUserFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
    name: GetUserFromName
    nameWithType: IUserAgent.GetUserFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SaveUserFromName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveUserFromName
  isExternal: true
  name: SaveUserFromName
  nameWithType: UserAgent.SaveUserFromName
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUserFromName
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveUserFromName(String, User)
  nameWithType: IUserAgent.SaveUserFromName(String, User)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String, SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
    name: SaveUserFromName
    nameWithType: IUserAgent.SaveUserFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
    name: SaveUserFromName
    nameWithType: IUserAgent.SaveUserFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.DeleteUserFromName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteUserFromName
  isExternal: true
  name: DeleteUserFromName
  nameWithType: UserAgent.DeleteUserFromName
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteUserFromName
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteUserFromName(String)
  nameWithType: IUserAgent.DeleteUserFromName(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
    name: DeleteUserFromName
    nameWithType: IUserAgent.DeleteUserFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
    name: DeleteUserFromName
    nameWithType: IUserAgent.DeleteUserFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetCredentialTypes*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetCredentialTypes
  isExternal: true
  name: GetCredentialTypes
  nameWithType: UserAgent.GetCredentialTypes
  fullName: SuperOffice.CRM.Services.UserAgent.GetCredentialTypes
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetCredentialTypes()
  nameWithType: IUserAgent.GetCredentialTypes()
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
    name: GetCredentialTypes
    nameWithType: IUserAgent.GetCredentialTypes
    fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
    name: GetCredentialTypes
    nameWithType: IUserAgent.GetCredentialTypes
    fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.CredentialType[]
  isExternal: true
  name: CredentialType[]
  nameWithType: CredentialType[]
  fullName: SuperOffice.CRM.Services.CredentialType[]
  nameWithType.vb: CredentialType()
  fullName.vb: SuperOffice.CRM.Services.CredentialType()
  name.vb: CredentialType()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.CredentialType
    name: CredentialType
    nameWithType: CredentialType
    fullName: SuperOffice.CRM.Services.CredentialType
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.CredentialType
    name: CredentialType
    nameWithType: CredentialType
    fullName: SuperOffice.CRM.Services.CredentialType
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType
  isExternal: true
  name: GetCredentialTypesForUserType
  nameWithType: UserAgent.GetCredentialTypesForUserType
  fullName: SuperOffice.CRM.Services.UserAgent.GetCredentialTypesForUserType
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetCredentialTypesForUserType(UserType)
  nameWithType: IUserAgent.GetCredentialTypesForUserType(UserType)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
    name: GetCredentialTypesForUserType
    nameWithType: IUserAgent.GetCredentialTypesForUserType
    fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
    name: GetCredentialTypesForUserType
    nameWithType: IUserAgent.GetCredentialTypesForUserType
    fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials
  isExternal: true
  name: SaveUntrustedCredentials
  nameWithType: UserAgent.SaveUntrustedCredentials
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveUntrustedCredentials(String, UntrustedCredentials)
  nameWithType: IUserAgent.SaveUntrustedCredentials(String, UntrustedCredentials)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String, SuperOffice.CRM.Services.UntrustedCredentials)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
    name: SaveUntrustedCredentials
    nameWithType: IUserAgent.SaveUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
    name: SaveUntrustedCredentials
    nameWithType: IUserAgent.SaveUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials
  isExternal: true
  name: GetUntrustedCredentials
  nameWithType: UserAgent.GetUntrustedCredentials
  fullName: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUntrustedCredentials(String)
  nameWithType: IUserAgent.GetUntrustedCredentials(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
    name: GetUntrustedCredentials
    nameWithType: IUserAgent.GetUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
    name: GetUntrustedCredentials
    nameWithType: IUserAgent.GetUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UntrustedCredentials[]
  isExternal: true
  name: UntrustedCredentials[]
  nameWithType: UntrustedCredentials[]
  fullName: SuperOffice.CRM.Services.UntrustedCredentials[]
  nameWithType.vb: UntrustedCredentials()
  fullName.vb: SuperOffice.CRM.Services.UntrustedCredentials()
  name.vb: UntrustedCredentials()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate
  isExternal: true
  name: GetUntrustedCredentialsForAssociate
  nameWithType: UserAgent.GetUntrustedCredentialsForAssociate
  fullName: SuperOffice.CRM.Services.UserAgent.GetUntrustedCredentialsForAssociate
- uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUntrustedCredentialsForAssociate(Int32, String)
  nameWithType: IUserAgent.GetUntrustedCredentialsForAssociate(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
    name: GetUntrustedCredentialsForAssociate
    nameWithType: IUserAgent.GetUntrustedCredentialsForAssociate
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
    name: GetUntrustedCredentialsForAssociate
    nameWithType: IUserAgent.GetUntrustedCredentialsForAssociate
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate
  isExternal: true
  name: SaveUntrustedCredentialsForAssociate
  nameWithType: UserAgent.SaveUntrustedCredentialsForAssociate
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUntrustedCredentialsForAssociate
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveUntrustedCredentialsForAssociate(Int32, String, UntrustedCredentials)
  nameWithType: IUserAgent.SaveUntrustedCredentialsForAssociate(Int32, String, UntrustedCredentials)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32, System.String, SuperOffice.CRM.Services.UntrustedCredentials)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
    name: SaveUntrustedCredentialsForAssociate
    nameWithType: IUserAgent.SaveUntrustedCredentialsForAssociate
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
    name: SaveUntrustedCredentialsForAssociate
    nameWithType: IUserAgent.SaveUntrustedCredentialsForAssociate
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials
  isExternal: true
  name: RemoveUntrustedCredentials
  nameWithType: UserAgent.RemoveUntrustedCredentials
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: RemoveUntrustedCredentials(String, String)
  nameWithType: IUserAgent.RemoveUntrustedCredentials(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
    name: RemoveUntrustedCredentials
    nameWithType: IUserAgent.RemoveUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
    name: RemoveUntrustedCredentials
    nameWithType: IUserAgent.RemoveUntrustedCredentials
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate
  isExternal: true
  name: RemoveUntrustedCredentialsForAssociate
  nameWithType: UserAgent.RemoveUntrustedCredentialsForAssociate
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveUntrustedCredentialsForAssociate
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: RemoveUntrustedCredentialsForAssociate(Int32, String, String)
  nameWithType: IUserAgent.RemoveUntrustedCredentialsForAssociate(Int32, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
    name: RemoveUntrustedCredentialsForAssociate
    nameWithType: IUserAgent.RemoveUntrustedCredentialsForAssociate
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
    name: RemoveUntrustedCredentialsForAssociate
    nameWithType: IUserAgent.RemoveUntrustedCredentialsForAssociate
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.CreateExternalUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateExternalUser
  isExternal: true
  name: CreateExternalUser
  nameWithType: UserAgent.CreateExternalUser
  fullName: SuperOffice.CRM.Services.UserAgent.CreateExternalUser
- uid: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateExternalUser(Int32, String, String, Int32, Boolean)
  nameWithType: IUserAgent.CreateExternalUser(Int32, String, String, Int32, Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32, System.String, System.String, System.Int32, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
    name: CreateExternalUser
    nameWithType: IUserAgent.CreateExternalUser
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
    name: CreateExternalUser
    nameWithType: IUserAgent.CreateExternalUser
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.DeleteExternalUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteExternalUser
  isExternal: true
  name: DeleteExternalUser
  nameWithType: UserAgent.DeleteExternalUser
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteExternalUser
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteExternalUser(Int32)
  nameWithType: IUserAgent.DeleteExternalUser(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
    name: DeleteExternalUser
    nameWithType: IUserAgent.DeleteExternalUser
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
    name: DeleteExternalUser
    nameWithType: IUserAgent.DeleteExternalUser
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo
  isExternal: true
  name: SetExternalUserInfo
  nameWithType: UserAgent.SetExternalUserInfo
  fullName: SuperOffice.CRM.Services.UserAgent.SetExternalUserInfo
- uid: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetExternalUserInfo(Int32, String, String, Boolean, Int32, ExternalUserInfoModification)
  nameWithType: IUserAgent.SetExternalUserInfo(Int32, String, String, Boolean, Int32, ExternalUserInfoModification)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32, System.String, System.String, System.Boolean, System.Int32, SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
    name: SetExternalUserInfo
    nameWithType: IUserAgent.SetExternalUserInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
    name: ExternalUserInfoModification
    nameWithType: ExternalUserInfoModification
    fullName: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
    name: SetExternalUserInfo
    nameWithType: IUserAgent.SetExternalUserInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
    name: ExternalUserInfoModification
    nameWithType: ExternalUserInfoModification
    fullName: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
  commentId: T:SuperOffice.CRM.Services.Util.ExternalUserInfoModification
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  name: ExternalUserInfoModification
  nameWithType: ExternalUserInfoModification
  fullName: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
- uid: SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser
  isExternal: true
  name: GenerateNewPasswordForExternalUser
  nameWithType: UserAgent.GenerateNewPasswordForExternalUser
  fullName: SuperOffice.CRM.Services.UserAgent.GenerateNewPasswordForExternalUser
- uid: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GenerateNewPasswordForExternalUser(String)
  nameWithType: IUserAgent.GenerateNewPasswordForExternalUser(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
    name: GenerateNewPasswordForExternalUser
    nameWithType: IUserAgent.GenerateNewPasswordForExternalUser
    fullName: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
    name: GenerateNewPasswordForExternalUser
    nameWithType: IUserAgent.GenerateNewPasswordForExternalUser
    fullName: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.CanChangePassword*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CanChangePassword
  isExternal: true
  name: CanChangePassword
  nameWithType: UserAgent.CanChangePassword
  fullName: SuperOffice.CRM.Services.UserAgent.CanChangePassword
- uid: SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CanChangePassword(Int32)
  nameWithType: IUserAgent.CanChangePassword(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
    name: CanChangePassword
    nameWithType: IUserAgent.CanChangePassword
    fullName: SuperOffice.CRM.Services.IUserAgent.CanChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
    name: CanChangePassword
    nameWithType: IUserAgent.CanChangePassword
    fullName: SuperOffice.CRM.Services.IUserAgent.CanChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.ChangePassword*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ChangePassword
  isExternal: true
  name: ChangePassword
  nameWithType: UserAgent.ChangePassword
  fullName: SuperOffice.CRM.Services.UserAgent.ChangePassword
- uid: SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ChangePassword(Int32, String, String)
  nameWithType: IUserAgent.ChangePassword(Int32, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
    name: ChangePassword
    nameWithType: IUserAgent.ChangePassword
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
    name: ChangePassword
    nameWithType: IUserAgent.ChangePassword
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId
  isExternal: true
  name: GetUserFromPersonId
  nameWithType: UserAgent.GetUserFromPersonId
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserFromPersonId
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserFromPersonId(Int32)
  nameWithType: IUserAgent.GetUserFromPersonId(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
    name: GetUserFromPersonId
    nameWithType: IUserAgent.GetUserFromPersonId
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
    name: GetUserFromPersonId
    nameWithType: IUserAgent.GetUserFromPersonId
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.User[]
  isExternal: true
  name: User[]
  nameWithType: User[]
  fullName: SuperOffice.CRM.Services.User[]
  nameWithType.vb: User()
  fullName.vb: SuperOffice.CRM.Services.User()
  name.vb: User()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId
  isExternal: true
  name: CreateDefaultUserFromUserTypeAndPersonId
  nameWithType: UserAgent.CreateDefaultUserFromUserTypeAndPersonId
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndPersonId
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultUserFromUserTypeAndPersonId(UserType, Int32)
  nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(UserType, Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
    name: CreateDefaultUserFromUserTypeAndPersonId
    nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
    name: CreateDefaultUserFromUserTypeAndPersonId
    nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType
  isExternal: true
  name: CreateDefaultUserFromUserType
  nameWithType: UserAgent.CreateDefaultUserFromUserType
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserType
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultUserFromUserType(UserType)
  nameWithType: IUserAgent.CreateDefaultUserFromUserType(UserType)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
    name: CreateDefaultUserFromUserType
    nameWithType: IUserAgent.CreateDefaultUserFromUserType
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
    name: CreateDefaultUserFromUserType
    nameWithType: IUserAgent.CreateDefaultUserFromUserType
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId
  isExternal: true
  name: GetUserFromEjUserId
  nameWithType: UserAgent.GetUserFromEjUserId
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserFromEjUserId
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserFromEjUserId(Int32)
  nameWithType: IUserAgent.GetUserFromEjUserId(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
    name: GetUserFromEjUserId
    nameWithType: IUserAgent.GetUserFromEjUserId
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
    name: GetUserFromEjUserId
    nameWithType: IUserAgent.GetUserFromEjUserId
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SetPasswordFromName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetPasswordFromName
  isExternal: true
  name: SetPasswordFromName
  nameWithType: UserAgent.SetPasswordFromName
  fullName: SuperOffice.CRM.Services.UserAgent.SetPasswordFromName
- uid: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetPasswordFromName(String, String)
  nameWithType: IUserAgent.SetPasswordFromName(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
    name: SetPasswordFromName
    nameWithType: IUserAgent.SetPasswordFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
    name: SetPasswordFromName
    nameWithType: IUserAgent.SetPasswordFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SetPassword*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetPassword
  isExternal: true
  name: SetPassword
  nameWithType: UserAgent.SetPassword
  fullName: SuperOffice.CRM.Services.UserAgent.SetPassword
- uid: SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetPassword(Int32, String)
  nameWithType: IUserAgent.SetPassword(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
    name: SetPassword
    nameWithType: IUserAgent.SetPassword
    fullName: SuperOffice.CRM.Services.IUserAgent.SetPassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
    name: SetPassword
    nameWithType: IUserAgent.SetPassword
    fullName: SuperOffice.CRM.Services.IUserAgent.SetPassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword
  isExternal: true
  name: ChangeOwnPassword
  nameWithType: UserAgent.ChangeOwnPassword
  fullName: SuperOffice.CRM.Services.UserAgent.ChangeOwnPassword
- uid: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ChangeOwnPassword(String, String)
  nameWithType: IUserAgent.ChangeOwnPassword(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
    name: ChangeOwnPassword
    nameWithType: IUserAgent.ChangeOwnPassword
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
    name: ChangeOwnPassword
    nameWithType: IUserAgent.ChangeOwnPassword
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName
  isExternal: true
  name: ChangePasswordFromName
  nameWithType: UserAgent.ChangePasswordFromName
  fullName: SuperOffice.CRM.Services.UserAgent.ChangePasswordFromName
- uid: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ChangePasswordFromName(String, String, String)
  nameWithType: IUserAgent.ChangePasswordFromName(String, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
    name: ChangePasswordFromName
    nameWithType: IUserAgent.ChangePasswordFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
    name: ChangePasswordFromName
    nameWithType: IUserAgent.ChangePasswordFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.IsUserNameValid*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.IsUserNameValid
  isExternal: true
  name: IsUserNameValid
  nameWithType: UserAgent.IsUserNameValid
  fullName: SuperOffice.CRM.Services.UserAgent.IsUserNameValid
- uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: IsUserNameValid(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsUserNameValid(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsUserNameValid
    nameWithType: IUserAgent.IsUserNameValid
    fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsUserNameValid
    nameWithType: IUserAgent.IsUserNameValid
    fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.IsPasswordValid*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.IsPasswordValid
  isExternal: true
  name: IsPasswordValid
  nameWithType: UserAgent.IsPasswordValid
  fullName: SuperOffice.CRM.Services.UserAgent.IsPasswordValid
- uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: IsPasswordValid(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsPasswordValid(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsPasswordValid
    nameWithType: IUserAgent.IsPasswordValid
    fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsPasswordValid
    nameWithType: IUserAgent.IsPasswordValid
    fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword
  isExternal: true
  name: SetGeneratedPassword
  nameWithType: UserAgent.SetGeneratedPassword
  fullName: SuperOffice.CRM.Services.UserAgent.SetGeneratedPassword
- uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetGeneratedPassword(Int32)
  nameWithType: IUserAgent.SetGeneratedPassword(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
    name: SetGeneratedPassword
    nameWithType: IUserAgent.SetGeneratedPassword
    fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
    name: SetGeneratedPassword
    nameWithType: IUserAgent.SetGeneratedPassword
    fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName
  isExternal: true
  name: SetGeneratedPasswordFromName
  nameWithType: UserAgent.SetGeneratedPasswordFromName
  fullName: SuperOffice.CRM.Services.UserAgent.SetGeneratedPasswordFromName
- uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SetGeneratedPasswordFromName(String)
  nameWithType: IUserAgent.SetGeneratedPasswordFromName(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
    name: SetGeneratedPasswordFromName
    nameWithType: IUserAgent.SetGeneratedPasswordFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
    name: SetGeneratedPasswordFromName
    nameWithType: IUserAgent.SetGeneratedPasswordFromName
    fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason
  isExternal: true
  name: IsPasswordValidWithReason
  nameWithType: UserAgent.IsPasswordValidWithReason
  fullName: SuperOffice.CRM.Services.UserAgent.IsPasswordValidWithReason
- uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: IsPasswordValidWithReason(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsPasswordValidWithReason(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsPasswordValidWithReason
    nameWithType: IUserAgent.IsPasswordValidWithReason
    fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsPasswordValidWithReason
    nameWithType: IUserAgent.IsPasswordValidWithReason
    fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserValidationResult
  commentId: T:SuperOffice.CRM.Services.UserValidationResult
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UserValidationResult
  nameWithType: UserValidationResult
  fullName: SuperOffice.CRM.Services.UserValidationResult
- uid: SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason
  isExternal: true
  name: IsUserNameValidWithReason
  nameWithType: UserAgent.IsUserNameValidWithReason
  fullName: SuperOffice.CRM.Services.UserAgent.IsUserNameValidWithReason
- uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: IsUserNameValidWithReason(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsUserNameValidWithReason(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsUserNameValidWithReason
    nameWithType: IUserAgent.IsUserNameValidWithReason
    fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: IsUserNameValidWithReason
    nameWithType: IUserAgent.IsUserNameValidWithReason
    fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.ChangeUserType*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ChangeUserType
  isExternal: true
  name: ChangeUserType
  nameWithType: UserAgent.ChangeUserType
  fullName: SuperOffice.CRM.Services.UserAgent.ChangeUserType
- uid: SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ChangeUserType(User, UserType)
  nameWithType: IUserAgent.ChangeUserType(User, UserType)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User, SuperOffice.License.UserType)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
    name: ChangeUserType
    nameWithType: IUserAgent.ChangeUserType
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangeUserType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
    name: ChangeUserType
    nameWithType: IUserAgent.ChangeUserType
    fullName: SuperOffice.CRM.Services.IUserAgent.ChangeUserType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential
  isExternal: true
  name: CreateDefaultUserFromUserTypeAndCredential
  nameWithType: UserAgent.CreateDefaultUserFromUserTypeAndCredential
  fullName: SuperOffice.CRM.Services.UserAgent.CreateDefaultUserFromUserTypeAndCredential
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateDefaultUserFromUserTypeAndCredential(UserType, Int32, String, String, String)
  nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndCredential(UserType, Int32, String, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType, System.Int32, System.String, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
    name: CreateDefaultUserFromUserTypeAndCredential
    nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndCredential
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
    name: CreateDefaultUserFromUserTypeAndCredential
    nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndCredential
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetValidUserName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetValidUserName
  isExternal: true
  name: GetValidUserName
  nameWithType: UserAgent.GetValidUserName
  fullName: SuperOffice.CRM.Services.UserAgent.GetValidUserName
- uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetValidUserName(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.GetValidUserName(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: GetValidUserName
    nameWithType: IUserAgent.GetValidUserName
    fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
    name: GetValidUserName
    nameWithType: IUserAgent.GetValidUserName
    fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.RemoveLicenses*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.RemoveLicenses
  isExternal: true
  name: RemoveLicenses
  nameWithType: UserAgent.RemoveLicenses
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveLicenses
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: RemoveLicenses(Int32)
  nameWithType: IUserAgent.RemoveLicenses(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
    name: RemoveLicenses
    nameWithType: IUserAgent.RemoveLicenses
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
    name: RemoveLicenses
    nameWithType: IUserAgent.RemoveLicenses
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.MakeRetired*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.MakeRetired
  isExternal: true
  name: MakeRetired
  nameWithType: UserAgent.MakeRetired
  fullName: SuperOffice.CRM.Services.UserAgent.MakeRetired
- uid: SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: MakeRetired(Int32, Boolean)
  nameWithType: IUserAgent.MakeRetired(Int32, Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
    name: MakeRetired
    nameWithType: IUserAgent.MakeRetired
    fullName: SuperOffice.CRM.Services.IUserAgent.MakeRetired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
    name: MakeRetired
    nameWithType: IUserAgent.MakeRetired
    fullName: SuperOffice.CRM.Services.IUserAgent.MakeRetired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.AddOwnerContact*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.AddOwnerContact
  isExternal: true
  name: AddOwnerContact
  nameWithType: UserAgent.AddOwnerContact
  fullName: SuperOffice.CRM.Services.UserAgent.AddOwnerContact
- uid: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: AddOwnerContact(Int32)
  nameWithType: IUserAgent.AddOwnerContact(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
    name: AddOwnerContact
    nameWithType: IUserAgent.AddOwnerContact
    fullName: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
    name: AddOwnerContact
    nameWithType: IUserAgent.AddOwnerContact
    fullName: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact
  isExternal: true
  name: RemoveOwnerContact
  nameWithType: UserAgent.RemoveOwnerContact
  fullName: SuperOffice.CRM.Services.UserAgent.RemoveOwnerContact
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: RemoveOwnerContact(Int32)
  nameWithType: IUserAgent.RemoveOwnerContact(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
    name: RemoveOwnerContact
    nameWithType: IUserAgent.RemoveOwnerContact
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
    name: RemoveOwnerContact
    nameWithType: IUserAgent.RemoveOwnerContact
    fullName: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo
  isExternal: true
  name: ResolveUserFromInfo
  nameWithType: UserAgent.ResolveUserFromInfo
  fullName: SuperOffice.CRM.Services.UserAgent.ResolveUserFromInfo
- uid: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ResolveUserFromInfo(Int32, String, String[], String[], UserType, Credential)
  nameWithType: IUserAgent.ResolveUserFromInfo(Int32, String, String[], String[], UserType, Credential)
  fullName: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32, System.String, System.String[], System.String[], SuperOffice.License.UserType, SuperOffice.CRM.Services.Credential)
  nameWithType.vb: IUserAgent.ResolveUserFromInfo(Int32, String, String(), String(), UserType, Credential)
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32, System.String, System.String(), System.String(), SuperOffice.License.UserType, SuperOffice.CRM.Services.Credential)
  name.vb: ResolveUserFromInfo(Int32, String, String(), String(), UserType, Credential)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
    name: ResolveUserFromInfo
    nameWithType: IUserAgent.ResolveUserFromInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Credential
    name: Credential
    nameWithType: Credential
    fullName: SuperOffice.CRM.Services.Credential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
    name: ResolveUserFromInfo
    nameWithType: IUserAgent.ResolveUserFromInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Services.Credential
    name: Credential
    nameWithType: Credential
    fullName: SuperOffice.CRM.Services.Credential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ResolvedUser
  commentId: T:SuperOffice.CRM.Services.ResolvedUser
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ResolvedUser
  nameWithType: ResolvedUser
  fullName: SuperOffice.CRM.Services.ResolvedUser
- uid: SuperOffice.CRM.Services.UserAgent.GetAccessToken*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetAccessToken
  isExternal: true
  name: GetAccessToken
  nameWithType: UserAgent.GetAccessToken
  fullName: SuperOffice.CRM.Services.UserAgent.GetAccessToken
- uid: SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetAccessToken(String, Boolean)
  nameWithType: IUserAgent.GetAccessToken(String, Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
    name: GetAccessToken
    nameWithType: IUserAgent.GetAccessToken
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
    name: GetAccessToken
    nameWithType: IUserAgent.GetAccessToken
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser
  isExternal: true
  name: GetValidUserNameForNewUser
  nameWithType: UserAgent.GetValidUserNameForNewUser
  fullName: SuperOffice.CRM.Services.UserAgent.GetValidUserNameForNewUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetValidUserNameForNewUser(User)
  nameWithType: IUserAgent.GetValidUserNameForNewUser(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
    name: GetValidUserNameForNewUser
    nameWithType: IUserAgent.GetValidUserNameForNewUser
    fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
    name: GetValidUserNameForNewUser
    nameWithType: IUserAgent.GetValidUserNameForNewUser
    fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName
  isExternal: true
  name: GetDefaultAssociateUserName
  nameWithType: UserAgent.GetDefaultAssociateUserName
  fullName: SuperOffice.CRM.Services.UserAgent.GetDefaultAssociateUserName
- uid: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetDefaultAssociateUserName(User)
  nameWithType: IUserAgent.GetDefaultAssociateUserName(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
    name: GetDefaultAssociateUserName
    nameWithType: IUserAgent.GetDefaultAssociateUserName
    fullName: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
    name: GetDefaultAssociateUserName
    nameWithType: IUserAgent.GetDefaultAssociateUserName
    fullName: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.IsNickNameUnique*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.IsNickNameUnique
  isExternal: true
  name: IsNickNameUnique
  nameWithType: UserAgent.IsNickNameUnique
  fullName: SuperOffice.CRM.Services.UserAgent.IsNickNameUnique
- uid: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: IsNickNameUnique(Int32, String)
  nameWithType: IUserAgent.IsNickNameUnique(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
    name: IsNickNameUnique
    nameWithType: IUserAgent.IsNickNameUnique
    fullName: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
    name: IsNickNameUnique
    nameWithType: IUserAgent.IsNickNameUnique
    fullName: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.ValidateUser*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.ValidateUser
  isExternal: true
  name: ValidateUser
  nameWithType: UserAgent.ValidateUser
  fullName: SuperOffice.CRM.Services.UserAgent.ValidateUser
- uid: SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: ValidateUser(User)
  nameWithType: IUserAgent.ValidateUser(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
    name: ValidateUser
    nameWithType: IUserAgent.ValidateUser
    fullName: SuperOffice.CRM.Services.IUserAgent.ValidateUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
    name: ValidateUser
    nameWithType: IUserAgent.ValidateUser
    fullName: SuperOffice.CRM.Services.IUserAgent.ValidateUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserGroup
  isExternal: true
  name: GetUserGroup
  nameWithType: UserAgent.GetUserGroup
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserGroup(Int32)
  nameWithType: IUserAgent.GetUserGroup(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
    name: GetUserGroup
    nameWithType: IUserAgent.GetUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
    name: GetUserGroup
    nameWithType: IUserAgent.GetUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserGroup
  commentId: T:SuperOffice.CRM.Services.UserGroup
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UserGroup
  nameWithType: UserGroup
  fullName: SuperOffice.CRM.Services.UserGroup
- uid: SuperOffice.CRM.Services.UserAgent.SaveUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveUserGroup
  isExternal: true
  name: SaveUserGroup
  nameWithType: UserAgent.SaveUserGroup
  fullName: SuperOffice.CRM.Services.UserAgent.SaveUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveUserGroup(UserGroup)
  nameWithType: IUserAgent.SaveUserGroup(UserGroup)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
    name: SaveUserGroup
    nameWithType: IUserAgent.SaveUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.UserGroup
    name: UserGroup
    nameWithType: UserGroup
    fullName: SuperOffice.CRM.Services.UserGroup
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
    name: SaveUserGroup
    nameWithType: IUserAgent.SaveUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.UserGroup
    name: UserGroup
    nameWithType: UserGroup
    fullName: SuperOffice.CRM.Services.UserGroup
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetAllUserGroups*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetAllUserGroups
  isExternal: true
  name: GetAllUserGroups
  nameWithType: UserAgent.GetAllUserGroups
  fullName: SuperOffice.CRM.Services.UserAgent.GetAllUserGroups
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetAllUserGroups(Boolean)
  nameWithType: IUserAgent.GetAllUserGroups(Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
    name: GetAllUserGroups
    nameWithType: IUserAgent.GetAllUserGroups
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
    name: GetAllUserGroups
    nameWithType: IUserAgent.GetAllUserGroups
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserGroup[]
  isExternal: true
  name: UserGroup[]
  nameWithType: UserGroup[]
  fullName: SuperOffice.CRM.Services.UserGroup[]
  nameWithType.vb: UserGroup()
  fullName.vb: SuperOffice.CRM.Services.UserGroup()
  name.vb: UserGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.UserGroup
    name: UserGroup
    nameWithType: UserGroup
    fullName: SuperOffice.CRM.Services.UserGroup
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.UserGroup
    name: UserGroup
    nameWithType: UserGroup
    fullName: SuperOffice.CRM.Services.UserGroup
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.CreateUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CreateUserGroup
  isExternal: true
  name: CreateUserGroup
  nameWithType: UserAgent.CreateUserGroup
  fullName: SuperOffice.CRM.Services.UserAgent.CreateUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CreateUserGroup()
  nameWithType: IUserAgent.CreateUserGroup()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
    name: CreateUserGroup
    nameWithType: IUserAgent.CreateUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
    name: CreateUserGroup
    nameWithType: IUserAgent.CreateUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.DeleteUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DeleteUserGroup
  isExternal: true
  name: DeleteUserGroup
  nameWithType: UserAgent.DeleteUserGroup
  fullName: SuperOffice.CRM.Services.UserAgent.DeleteUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DeleteUserGroup(Int32, Int32)
  nameWithType: IUserAgent.DeleteUserGroup(Int32, Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
    name: DeleteUserGroup
    nameWithType: IUserAgent.DeleteUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
    name: DeleteUserGroup
    nameWithType: IUserAgent.DeleteUserGroup
    fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserGroupList*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserGroupList
  isExternal: true
  name: GetUserGroupList
  nameWithType: UserAgent.GetUserGroupList
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserGroupList
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserGroupList(Int32[])
  nameWithType: IUserAgent.GetUserGroupList(Int32[])
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  nameWithType.vb: IUserAgent.GetUserGroupList(Int32())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32())
  name.vb: GetUserGroupList(Int32())
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
    name: GetUserGroupList
    nameWithType: IUserAgent.GetUserGroupList
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
    name: GetUserGroupList
    nameWithType: IUserAgent.GetUserGroupList
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetUserInfo*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserInfo
  isExternal: true
  name: GetUserInfo
  nameWithType: UserAgent.GetUserInfo
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserInfo
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserInfo(Int32)
  nameWithType: IUserAgent.GetUserInfo(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
    name: GetUserInfo
    nameWithType: IUserAgent.GetUserInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
    name: GetUserInfo
    nameWithType: IUserAgent.GetUserInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserInfo
  commentId: T:SuperOffice.CRM.Services.UserInfo
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UserInfo
  nameWithType: UserInfo
  fullName: SuperOffice.CRM.Services.UserInfo
- uid: SuperOffice.CRM.Services.UserAgent.GetUserInfoList*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetUserInfoList
  isExternal: true
  name: GetUserInfoList
  nameWithType: UserAgent.GetUserInfoList
  fullName: SuperOffice.CRM.Services.UserAgent.GetUserInfoList
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetUserInfoList(Int32[])
  nameWithType: IUserAgent.GetUserInfoList(Int32[])
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  nameWithType.vb: IUserAgent.GetUserInfoList(Int32())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32())
  name.vb: GetUserInfoList(Int32())
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
    name: GetUserInfoList
    nameWithType: IUserAgent.GetUserInfoList
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
    name: GetUserInfoList
    nameWithType: IUserAgent.GetUserInfoList
    fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserInfo[]
  isExternal: true
  name: UserInfo[]
  nameWithType: UserInfo[]
  fullName: SuperOffice.CRM.Services.UserInfo[]
  nameWithType.vb: UserInfo()
  fullName.vb: SuperOffice.CRM.Services.UserInfo()
  name.vb: UserInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.UserInfo
    name: UserInfo
    nameWithType: UserInfo
    fullName: SuperOffice.CRM.Services.UserInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.UserInfo
    name: UserInfo
    nameWithType: UserInfo
    fullName: SuperOffice.CRM.Services.UserInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo
  isExternal: true
  name: GetAccessGatewayInfo
  nameWithType: UserAgent.GetAccessGatewayInfo
  fullName: SuperOffice.CRM.Services.UserAgent.GetAccessGatewayInfo
- uid: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetAccessGatewayInfo()
  nameWithType: IUserAgent.GetAccessGatewayInfo()
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
    name: GetAccessGatewayInfo
    nameWithType: IUserAgent.GetAccessGatewayInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
    name: GetAccessGatewayInfo
    nameWithType: IUserAgent.GetAccessGatewayInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.AccessGatewayInfo
  commentId: T:SuperOffice.CRM.Services.AccessGatewayInfo
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: AccessGatewayInfo
  nameWithType: AccessGatewayInfo
  fullName: SuperOffice.CRM.Services.AccessGatewayInfo
- uid: SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo
  isExternal: true
  name: GetOrRegisterAccessGatewayInfo
  nameWithType: UserAgent.GetOrRegisterAccessGatewayInfo
  fullName: SuperOffice.CRM.Services.UserAgent.GetOrRegisterAccessGatewayInfo
- uid: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetOrRegisterAccessGatewayInfo(String)
  nameWithType: IUserAgent.GetOrRegisterAccessGatewayInfo(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
    name: GetOrRegisterAccessGatewayInfo
    nameWithType: IUserAgent.GetOrRegisterAccessGatewayInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
    name: GetOrRegisterAccessGatewayInfo
    nameWithType: IUserAgent.GetOrRegisterAccessGatewayInfo
    fullName: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway
  isExternal: true
  name: RegisterWithAccessGateway
  nameWithType: UserAgent.RegisterWithAccessGateway
  fullName: SuperOffice.CRM.Services.UserAgent.RegisterWithAccessGateway
- uid: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: RegisterWithAccessGateway(String)
  nameWithType: IUserAgent.RegisterWithAccessGateway(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
    name: RegisterWithAccessGateway
    nameWithType: IUserAgent.RegisterWithAccessGateway
    fullName: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
    name: RegisterWithAccessGateway
    nameWithType: IUserAgent.RegisterWithAccessGateway
    fullName: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration
  isExternal: true
  name: CheckAccessGatewayRegistration
  nameWithType: UserAgent.CheckAccessGatewayRegistration
  fullName: SuperOffice.CRM.Services.UserAgent.CheckAccessGatewayRegistration
- uid: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: CheckAccessGatewayRegistration()
  nameWithType: IUserAgent.CheckAccessGatewayRegistration()
  fullName: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
    name: CheckAccessGatewayRegistration
    nameWithType: IUserAgent.CheckAccessGatewayRegistration
    fullName: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
    name: CheckAccessGatewayRegistration
    nameWithType: IUserAgent.CheckAccessGatewayRegistration
    fullName: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.SaveExternalTokens*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.SaveExternalTokens
  isExternal: true
  name: SaveExternalTokens
  nameWithType: UserAgent.SaveExternalTokens
  fullName: SuperOffice.CRM.Services.UserAgent.SaveExternalTokens
- uid: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: SaveExternalTokens(TokenManagementInfo)
  nameWithType: IUserAgent.SaveExternalTokens(TokenManagementInfo)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
    name: SaveExternalTokens
    nameWithType: IUserAgent.SaveExternalTokens
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.TokenManagementInfo
    name: TokenManagementInfo
    nameWithType: TokenManagementInfo
    fullName: SuperOffice.CRM.Services.TokenManagementInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
    name: SaveExternalTokens
    nameWithType: IUserAgent.SaveExternalTokens
    fullName: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.TokenManagementInfo
    name: TokenManagementInfo
    nameWithType: TokenManagementInfo
    fullName: SuperOffice.CRM.Services.TokenManagementInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.TokenManagementInfo
  commentId: T:SuperOffice.CRM.Services.TokenManagementInfo
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: TokenManagementInfo
  nameWithType: TokenManagementInfo
  fullName: SuperOffice.CRM.Services.TokenManagementInfo
- uid: SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens
  isExternal: true
  name: DecryptAndSaveExternalTokens
  nameWithType: UserAgent.DecryptAndSaveExternalTokens
  fullName: SuperOffice.CRM.Services.UserAgent.DecryptAndSaveExternalTokens
- uid: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: DecryptAndSaveExternalTokens(TokenManagementInfo)
  nameWithType: IUserAgent.DecryptAndSaveExternalTokens(TokenManagementInfo)
  fullName: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
    name: DecryptAndSaveExternalTokens
    nameWithType: IUserAgent.DecryptAndSaveExternalTokens
    fullName: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.TokenManagementInfo
    name: TokenManagementInfo
    nameWithType: TokenManagementInfo
    fullName: SuperOffice.CRM.Services.TokenManagementInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
    name: DecryptAndSaveExternalTokens
    nameWithType: IUserAgent.DecryptAndSaveExternalTokens
    fullName: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.TokenManagementInfo
    name: TokenManagementInfo
    nameWithType: TokenManagementInfo
    fullName: SuperOffice.CRM.Services.TokenManagementInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.GetExternalTokens*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.GetExternalTokens
  isExternal: true
  name: GetExternalTokens
  nameWithType: UserAgent.GetExternalTokens
  fullName: SuperOffice.CRM.Services.UserAgent.GetExternalTokens
- uid: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  isExternal: true
  name: GetExternalTokens(String)
  nameWithType: IUserAgent.GetExternalTokens(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
    name: GetExternalTokens
    nameWithType: IUserAgent.GetExternalTokens
    fullName: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
    name: GetExternalTokens
    nameWithType: IUserAgent.GetExternalTokens
    fullName: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.UserAgent.#ctor*
  commentId: Overload:SuperOffice.CRM.Services.UserAgent.#ctor
  isExternal: true
  name: UserAgent
  nameWithType: UserAgent.UserAgent
  fullName: SuperOffice.CRM.Services.UserAgent.UserAgent
