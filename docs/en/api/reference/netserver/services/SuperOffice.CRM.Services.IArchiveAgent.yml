### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.IArchiveAgent
  commentId: T:SuperOffice.CRM.Services.IArchiveAgent
  id: IArchiveAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync(System.String,System.String,System.String[],System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String,System.String[],System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync(System.String,System.Int32,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync(SuperOffice.CRM.Services.ActivityFilter,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync(System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IArchiveAgent
  nameWithType: IArchiveAgent
  fullName: SuperOffice.CRM.Services.IArchiveAgent
  type: Interface
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: >-
    Interface for the Archive Agent

    ArchiveList functions of all kinds
  example:
  - >-
    <pre><code class="lang-csharp">using SuperOffice;

    using SuperOffice.CRM.Services;


    using (SoSession mySession = SoSession.Authenticate("user", "pass"))

    {
       using (ArchiveAgent agent = new ArchiveAgent())
       {
          // call methods on agent here...
       }
    }</code></pre>
  syntax:
    content: >-
      [Agent("Archive Agent", "Interface for the Archive Agent. ArchiveList functions of all kinds")]

      public interface IArchiveAgent : IAgent
    content.vb: >-
      <Agent("Archive Agent", "Interface for the Archive Agent. ArchiveList functions of all kinds")>

      Public Interface IArchiveAgent Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Archive Agent
    - type: System.String
      value: Interface for the Archive Agent. ArchiveList functions of all kinds
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync(System.Threading.CancellationToken)
  id: GetActivityFilterAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetActivityFilterAsync(CancellationToken)
  nameWithType: IArchiveAgent.GetActivityFilterAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get activity filter for the specified list.
  example: []
  syntax:
    content: Task<ActivityFilter> GetActivityFilterAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ActivityFilter}
      description: The activity filter for the specified list
    content.vb: Function GetActivityFilterAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ActivityFilter)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync*
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync(SuperOffice.CRM.Services.ActivityFilter,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync(SuperOffice.CRM.Services.ActivityFilter,System.Threading.CancellationToken)
  id: SetActivityFilterAsync(SuperOffice.CRM.Services.ActivityFilter,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetActivityFilterAsync(ActivityFilter, CancellationToken)
  nameWithType: IArchiveAgent.SetActivityFilterAsync(ActivityFilter, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync(SuperOffice.CRM.Services.ActivityFilter, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Set activity filter for the specified list.
  example: []
  syntax:
    content: Task SetActivityFilterAsync(ActivityFilter activityFilter, CancellationToken cancellationToken = default)
    parameters:
    - id: activityFilter
      type: SuperOffice.CRM.Services.ActivityFilter
      description: New activity filter
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetActivityFilterAsync(activityFilter As ActivityFilter, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync*
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetGroupAssociateIdsAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetGroupAssociateIdsAsync(int[], CancellationToken)
  nameWithType: IArchiveAgent.GetGroupAssociateIdsAsync(int[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync(int[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Returns the  associate ids that belongs to the given groups
  example: []
  syntax:
    content: Task<int[]> GetGroupAssociateIdsAsync(int[] groupIds, CancellationToken cancellationToken = default)
    parameters:
    - id: groupIds
      type: System.Int32[]
      description: Array of group ids
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32[]}
      description: Array of associate ids
    content.vb: Function GetGroupAssociateIdsAsync(groupIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Integer())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync*
  nameWithType.vb: IArchiveAgent.GetGroupAssociateIdsAsync(Integer(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync(Integer(), System.Threading.CancellationToken)
  name.vb: GetGroupAssociateIdsAsync(Integer(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetArchiveConfigurationAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveConfigurationAsync(string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveConfigurationAsync(string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get the configuration for one archive. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
  example: []
  syntax:
    content: Task<ArchiveConfiguration> GetArchiveConfigurationAsync(string guiName, string providerName, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveConfiguration}
      description: Archive configuration consisting of column information, orderby information and entities
    content.vb: Function GetArchiveConfigurationAsync(guiName As String, providerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveConfiguration)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveConfigurationAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetArchiveConfigurationAsync(String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: GetArchiveConfigurationWithContextAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveConfigurationWithContextAsync(string, string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveConfigurationWithContextAsync(string, string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get the configuration for one archive, with context parameter. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
  example: []
  syntax:
    content: Task<ArchiveConfiguration> GetArchiveConfigurationWithContextAsync(string guiName, string providerName, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveConfiguration}
      description: Archive configuration consisting of column information, orderby information and entities
    content.vb: Function GetArchiveConfigurationWithContextAsync(guiName As String, providerName As String, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveConfiguration)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveConfigurationWithContextAsync(String, String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: GetArchiveConfigurationWithContextAsync(String, String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync(System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync(System.String,System.String[],System.Threading.CancellationToken)
  id: SetColumnWidthsAsync(System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetColumnWidthsAsync(string, string[], CancellationToken)
  nameWithType: IArchiveAgent.SetColumnWidthsAsync(string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync(string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Set the column widths for the given set of columns and GUI name.
  example: []
  syntax:
    content: Task SetColumnWidthsAsync(string guiName, string[] columnWidths, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: columnWidths
      type: System.String[]
      description: Array of column widths. A column width is specified either as a fixed number of character (10c) or as a percentage (10%). Percentages will be recalculated so that they add up to exactly 100 when the configuration is fetched again.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetColumnWidthsAsync(guiName As String, columnWidths As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync*
  nameWithType.vb: IArchiveAgent.SetColumnWidthsAsync(String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync(String, String(), System.Threading.CancellationToken)
  name.vb: SetColumnWidthsAsync(String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  id: SetChosenEntitiesAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetChosenEntitiesAsync(string, string, string[], CancellationToken)
  nameWithType: IArchiveAgent.SetChosenEntitiesAsync(string, string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync(string, string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: 'Set the currently chosen entities for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.'
  example: []
  syntax:
    content: Task SetChosenEntitiesAsync(string guiName, string providerName, string[] entities, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: entities
      type: System.String[]
      description: Array of entity names
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetChosenEntitiesAsync(guiName As String, providerName As String, entities As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync*
  nameWithType.vb: IArchiveAgent.SetChosenEntitiesAsync(String, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync(String, String, String(), System.Threading.CancellationToken)
  name.vb: SetChosenEntitiesAsync(String, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  id: SetChosenColumnsAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetChosenColumnsAsync(string, string, string[], CancellationToken)
  nameWithType: IArchiveAgent.SetChosenColumnsAsync(string, string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync(string, string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: 'Set the currently chosen columns for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.'
  example: []
  syntax:
    content: Task SetChosenColumnsAsync(string guiName, string providerName, string[] chosenColumns, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: chosenColumns
      type: System.String[]
      description: Array of column names, where array order indicates left to right order in the archive.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetChosenColumnsAsync(guiName As String, providerName As String, chosenColumns As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync*
  nameWithType.vb: IArchiveAgent.SetChosenColumnsAsync(String, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync(String, String, String(), System.Threading.CancellationToken)
  name.vb: SetChosenColumnsAsync(String, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: GetArchiveConfigurationV2Async(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveConfigurationV2Async(string, string, string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveConfigurationV2Async(string, string, string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async(string, string, string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get the configuration for one archive. The configuration is keyed by a combination of archive provider name (plus optional context), gui name, and optional table binding. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.
  example: []
  syntax:
    content: Task<ArchiveConfiguration> GetArchiveConfigurationV2Async(string guiName, string providerName, string context, string ownerKeys, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
    - id: ownerKeys
      type: System.String
      description: Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveConfiguration}
      description: Archive configuration consisting of column information, orderby information and entities
    content.vb: Function GetArchiveConfigurationV2Async(guiName As String, providerName As String, context As String, ownerKeys As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveConfiguration)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveConfigurationV2Async(String, String, String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async(String, String, String, String, System.Threading.CancellationToken)
  name.vb: GetArchiveConfigurationV2Async(String, String, String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  id: SetColumnWidthsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetColumnWidthsV2Async(string, string, string, string, string[], CancellationToken)
  nameWithType: IArchiveAgent.SetColumnWidthsV2Async(string, string, string, string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async(string, string, string, string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Set the column widths for the given set of columns and GUI name.
  example: []
  syntax:
    content: Task SetColumnWidthsV2Async(string guiName, string providerName, string context, string ownerKeys, string[] columnWidths, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
    - id: ownerKeys
      type: System.String
      description: Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
    - id: columnWidths
      type: System.String[]
      description: Array of column widths. A column width is specified either as a fixed number of character (10c) or as a percentage (10%). Percentages will be recalculated so that they add up to exactly 100 when the configuration is fetched again.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetColumnWidthsV2Async(guiName As String, providerName As String, context As String, ownerKeys As String, columnWidths As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async*
  nameWithType.vb: IArchiveAgent.SetColumnWidthsV2Async(String, String, String, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async(String, String, String, String, String(), System.Threading.CancellationToken)
  name.vb: SetColumnWidthsV2Async(String, String, String, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  id: SetChosenEntitiesV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetChosenEntitiesV2Async(string, string, string, string, string[], CancellationToken)
  nameWithType: IArchiveAgent.SetChosenEntitiesV2Async(string, string, string, string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async(string, string, string, string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: 'Set the currently chosen entities for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.'
  example: []
  syntax:
    content: Task SetChosenEntitiesV2Async(string guiName, string providerName, string context, string ownerKeys, string[] entities, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
    - id: ownerKeys
      type: System.String
      description: Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
    - id: entities
      type: System.String[]
      description: Array of entity names
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetChosenEntitiesV2Async(guiName As String, providerName As String, context As String, ownerKeys As String, entities As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async*
  nameWithType.vb: IArchiveAgent.SetChosenEntitiesV2Async(String, String, String, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async(String, String, String, String, String(), System.Threading.CancellationToken)
  name.vb: SetChosenEntitiesV2Async(String, String, String, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  id: SetChosenColumnsV2Async(System.String,System.String,System.String,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: SetChosenColumnsV2Async(string, string, string, string, string[], CancellationToken)
  nameWithType: IArchiveAgent.SetChosenColumnsV2Async(string, string, string, string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async(string, string, string, string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: 'Set the currently chosen columns for the given gui name/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.'
  example: []
  syntax:
    content: Task SetChosenColumnsV2Async(string guiName, string providerName, string context, string ownerKeys, string[] chosenColumns, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.
    - id: providerName
      type: System.String
      description: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor. Optional, but required for archives that depend on a context - for instance Quote archives that need to know their QuoteConnectionId to be meaningful
    - id: ownerKeys
      type: System.String
      description: Name/value string containing ownership binding information. The first should resolve to a table/primarykey, such as selection=123. Future functionality may allow multiple/extended keys
    - id: chosenColumns
      type: System.String[]
      description: Array of column names, where array order indicates left to right order in the archive.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetChosenColumnsV2Async(guiName As String, providerName As String, context As String, ownerKeys As String, chosenColumns As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async*
  nameWithType.vb: IArchiveAgent.SetChosenColumnsV2Async(String, String, String, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async(String, String, String, String, String(), System.Threading.CancellationToken)
  name.vb: SetChosenColumnsV2Async(String, String, String, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync(string, string[], SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string[], int, int, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns.
  remarks: >-
    <p>Archive Restriction Info objects represent search terms.</p>

    <p>Column names and operator strings are defined elsewhere.</p>

    <p>Values should be encoded using the CultureDataFormatter, so 10 is "[I:10]".
        Default string encodings should be handled ok, but beware of non-invariant cultures leading to incorrect date and float parsing.
    </p>

    <p></p>

    <pre><code class="lang-csharp">var restriction1 = new ArchiveRestrictionInfo("category", "equals", "[I:10]");</code></pre>

    <p></p>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var restrictions = new ArchiveRestrictionInfo[1];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var restrictions = new ArchiveRestrictionInfo[2];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    restrictions[1] = new ArchiveRestrictionInfo("updatedDate", "after", "2000.1.2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListByColumnsAsync(string providerName, string[] columns, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restriction, string[] entities, int page, int pageSize, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String[]
      description: An array of the names of the columns wanted.
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String[]
      description: Which entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsAsync(providerName As String, columns As String(), sortOrder As ArchiveOrderByInfo(), restriction As ArchiveRestrictionInfo(), entities As String(), page As Integer, pageSize As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync(String, String(), SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String(), Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsWithContextAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithContextAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync(string, string[], SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string[], int, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list with context parameter, explicitly specifying the restrictions, orderby and chosen columns.
  remarks: >-
    <p>Archive Restriction Info objects represent search terms.</p>

    <p>Column names and operator strings are defined elsewhere.</p>

    <p>Values should be encoded using the CultureDataFormatter, so 10 is "[I:10]".
        Default string encodings should be handled ok, but beware of non-invariant cultures leading to incorrect date and float parsing.
    </p>

    <p></p>

    <pre><code class="lang-csharp">var restriction1 = new ArchiveRestrictionInfo("category", "equals", "[I:10]");</code></pre>

    <p></p>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var restrictions = new ArchiveRestrictionInfo[1];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var restrictions = new ArchiveRestrictionInfo[2];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    restrictions[1] = new ArchiveRestrictionInfo("updatedDate", "after", "2000.1.2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListByColumnsWithContextAsync(string providerName, string[] columns, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restriction, string[] entities, int page, int pageSize, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String[]
      description: An array of the names of the columns wanted.
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String[]
      description: Which entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsWithContextAsync(providerName As String, columns As String(), sortOrder As ArchiveOrderByInfo(), restriction As ArchiveRestrictionInfo(), entities As String(), page As Integer, pageSize As Integer, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsWithContextAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync(String, String(), SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String(), Integer, Integer, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsWithContextAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetArchiveListAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListAsync(string, string, ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListAsync(string, string, ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync(string, string, SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string[], int, int, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of data for an archive. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
  remarks: >-
    <p>Archive Restriction Info objects represent search terms.</p>

    <p>Column names and operator strings are defined elsewhere.</p>

    <p>Values should be encoded using the CultureDataFormatter, so 10 is "[I:10]".
        Default string encodings should be handled ok, but beware of non-invariant cultures leading to incorrect date and float parsing.
    </p>

    <p></p>

    <pre><code class="lang-csharp">var restriction1 = new ArchiveRestrictionInfo("category", "equals", "[I:10]");</code></pre>

    <p></p>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var restrictions = new ArchiveRestrictionInfo[1];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var restrictions = new ArchiveRestrictionInfo[2];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    restrictions[1] = new ArchiveRestrictionInfo("updatedDate", "after", "2000.1.2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListAsync(string guiName, string providerName, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restriction, string[] entities, int page, int pageSize, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String[]
      description: Which entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListAsync(guiName As String, providerName As String, sortOrder As ArchiveOrderByInfo(), restriction As ArchiveRestrictionInfo(), entities As String(), page As Integer, pageSize As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveListAsync(String, String, ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync(String, String, SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String(), Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetArchiveListAsync(String, String, ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetArchiveListWithContextAsync(System.String,System.String,SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListWithContextAsync(string, string, ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListWithContextAsync(string, string, ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync(string, string, SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string[], int, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of data for an archive, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
  remarks: >-
    <p>Archive Restriction Info objects represent search terms.</p>

    <p>Column names and operator strings are defined elsewhere.</p>

    <p>Values should be encoded using the CultureDataFormatter, so 10 is "[I:10]".
        Default string encodings should be handled ok, but beware of non-invariant cultures leading to incorrect date and float parsing.
    </p>

    <p></p>

    <pre><code class="lang-csharp">var restriction1 = new ArchiveRestrictionInfo("category", "equals", "[I:10]");</code></pre>

    <p></p>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var restrictions = new ArchiveRestrictionInfo[1];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var restrictions = new ArchiveRestrictionInfo[2];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    restrictions[1] = new ArchiveRestrictionInfo("updatedDate", "after", "2000.1.2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListWithContextAsync(string guiName, string providerName, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restriction, string[] entities, int page, int pageSize, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String[]
      description: Which entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListWithContextAsync(guiName As String, providerName As String, sortOrder As ArchiveOrderByInfo(), restriction As ArchiveRestrictionInfo(), entities As String(), page As Integer, pageSize As Integer, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveListWithContextAsync(String, String, ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync(String, String, SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String(), Integer, Integer, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListWithContextAsync(String, String, ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsWithHeaderAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsWithHeaderAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(string, string[], SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string[], int, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
  remarks: >-
    <p>Archive Restriction Info objects represent search terms.</p>

    <p>Column names and operator strings are defined elsewhere.</p>

    <p>Values should be encoded using the CultureDataFormatter, so 10 is "[I:10]".
        Default string encodings should be handled ok, but beware of non-invariant cultures leading to incorrect date and float parsing.
    </p>

    <p></p>

    <pre><code class="lang-csharp">var restriction1 = new ArchiveRestrictionInfo("category", "equals", "[I:10]");</code></pre>

    <p></p>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var restrictions = new ArchiveRestrictionInfo[1];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var restrictions = new ArchiveRestrictionInfo[2];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    restrictions[1] = new ArchiveRestrictionInfo("updatedDate", "after", "2000.1.2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);</code></pre>
  syntax:
    content: Task<ArchiveListResult> GetArchiveListByColumnsWithHeaderAsync(string providerName, string[] columns, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restriction, string[] entities, int page, int pageSize, string options, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String[]
      description: An array of the names of the columns wanted.
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String[]
      description: Which entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: options
      type: System.String
      description: name=value&amp;amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
      description: Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsWithHeaderAsync(providerName As String, columns As String(), sortOrder As ArchiveOrderByInfo(), restriction As ArchiveRestrictionInfo(), entities As String(), page As Integer, pageSize As Integer, options As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListResult)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync(String, String(), SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String(), Integer, Integer, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsWithHeaderAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync(System.Threading.CancellationToken)
  id: GetProviderNamesAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetProviderNamesAsync(CancellationToken)
  nameWithType: IArchiveAgent.GetProviderNamesAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Return list of all archive provider names
  example: []
  syntax:
    content: Task<string[]> GetProviderNamesAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: Array of all archive provider names.
    content.vb: Function GetProviderNamesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync*
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsWithHeaderWithContextAsync(System.String,System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String[],System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsWithHeaderWithContextAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(string, string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string[], int, int, string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(string, string[], SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string[], int, int, string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list, with context parameter, explicitly specifying the restrictions, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
  remarks: >-
    <p>Archive Restriction Info objects represent search terms.</p>

    <p>Column names and operator strings are defined elsewhere.</p>

    <p>Values should be encoded using the CultureDataFormatter, so 10 is "[I:10]".
        Default string encodings should be handled ok, but beware of non-invariant cultures leading to incorrect date and float parsing.
    </p>

    <p></p>

    <pre><code class="lang-csharp">var restriction1 = new ArchiveRestrictionInfo("category", "equals", "[I:10]");</code></pre>

    <p></p>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var restrictions = new ArchiveRestrictionInfo[1];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var restrictions = new ArchiveRestrictionInfo[2];

    restrictions[0] = new ArchiveRestrictionInfo("updatedBy", "equals", "2");

    restrictions[1] = new ArchiveRestrictionInfo("updatedDate", "after", "2000.1.2");

    var res = _agent.FindFromRestrictions(restrictions, "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);</code></pre>
  syntax:
    content: Task<ArchiveListResult> GetArchiveListByColumnsWithHeaderWithContextAsync(string providerName, string[] columns, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restriction, string[] entities, int page, int pageSize, string options, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String[]
      description: An array of the names of the columns wanted.
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String[]
      description: Which entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: options
      type: System.String
      description: name=value&amp;amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
      description: Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsWithHeaderWithContextAsync(providerName As String, columns As String(), sortOrder As ArchiveOrderByInfo(), restriction As ArchiveRestrictionInfo(), entities As String(), page As Integer, pageSize As Integer, options As String, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListResult)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync(String, String(), SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String(), Integer, Integer, String, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsWithHeaderWithContextAsync(String, String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String(), Integer, Integer, String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetAvailableColumnsAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetAvailableColumnsAsync(string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetAvailableColumnsAsync(string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Return list of all columns supported by an archive provider. See also GetArchiveConfiguration.
  example: []
  syntax:
    content: Task<ArchiveColumnInfo[]> GetAvailableColumnsAsync(string providerName, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: context
      type: System.String
      description: Optional context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]}
      description: Array of all columns supported by the archive provider.
    content.vb: Function GetAvailableColumnsAsync(providerName As String, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveColumnInfo())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync*
  nameWithType.vb: IArchiveAgent.GetAvailableColumnsAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetAvailableColumnsAsync(String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetAvailableEntitiesAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetAvailableEntitiesAsync(string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetAvailableEntitiesAsync(string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Return list of all entities supported by an archive provider. See also GetArchiveConfiguration.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<MDOListItem[]> GetAvailableEntitiesAsync(string providerName, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: context
      type: System.String
      description: Optional context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.MDOListItem[]}
      description: Array of all entity types supported by the archive provider. MDOListItem.Name = DisplayName, Tooltip = DisplayTooltip, Type = code name, StyleHint = optional/mandatory, IconHint=DefaultShow
    content.vb: Function GetAvailableEntitiesAsync(providerName As String, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of MDOListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync*
  nameWithType.vb: IArchiveAgent.GetAvailableEntitiesAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetAvailableEntitiesAsync(String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetArchiveListByColumns2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumns2Async(string, string, string, string, string, int, int, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumns2Async(string, string, string, string, string, int, int, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async(string, string, string, string, string, int, int, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list, explicitly specifying the restrictions as a string, orderby and chosen columns.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListByColumns2Async(string providerName, string columns, string sortOrder, string restrictions, string entities, int page, int pageSize, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String
      description: An array of the names of the columns wanted.
    - id: sortOrder
      type: System.String
      description: Sort order for the archive as string ('name asc, dept desc'). Can be null, which indicates 'no particular order'
    - id: restrictions
      type: System.String
      description: Archive restrictions as string ('category = 1 and business oneOf (1,2,3)'). Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String
      description: Comma separated list of entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumns2Async(providerName As String, columns As String, sortOrder As String, restrictions As String, entities As String, page As Integer, pageSize As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumns2Async(String, String, String, String, String, Integer, Integer, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async(String, String, String, String, String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumns2Async(String, String, String, String, String, Integer, Integer, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsWithContext2Async(string, string, string, string, string, int, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithContext2Async(string, string, string, string, string, int, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async(string, string, string, string, string, int, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list with context parameter, explicitly specifying the restrictions as a string, orderby and chosen columns.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListByColumnsWithContext2Async(string providerName, string columns, string sortOrder, string restriction, string entities, int page, int pageSize, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String
      description: Comma separated names of the columns wanted.
    - id: sortOrder
      type: System.String
      description: "Comma separated list of columns to sort order for the archive. e.g.: \"name asc, dept desc, registeredBy\" Can be null, which indicates 'no particular order'"
    - id: restriction
      type: System.String
      description: Archive restrictions as string. e.g. "name startsWith 'foo' and (dept = 'bar' or dept = 'baz')" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String
      description: Comma separated list of entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsWithContext2Async(providerName As String, columns As String, sortOrder As String, restriction As String, entities As String, page As Integer, pageSize As Integer, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsWithContext2Async(String, String, String, String, String, Integer, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async(String, String, String, String, String, Integer, Integer, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsWithContext2Async(String, String, String, String, String, Integer, Integer, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetArchiveList2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveList2Async(string, string, string, string, string, int, int, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveList2Async(string, string, string, string, string, int, int, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async(string, string, string, string, string, int, int, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of data for an archive using a restriction string. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveList2Async(string guiName, string providerName, string sortOrder, string restriction, string entities, int page, int pageSize, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: sortOrder
      type: System.String
      description: Sort order for the archive. Can be null, which indicates 'no particular order'
    - id: restriction
      type: System.String
      description: Archive restrictions as string. e.g. "name = 'baz' or category oneOf (1,2,3)". Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String
      description: Comma separated list of entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveList2Async(guiName As String, providerName As String, sortOrder As String, restriction As String, entities As String, page As Integer, pageSize As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveList2Async(String, String, String, String, String, Integer, Integer, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async(String, String, String, String, String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetArchiveList2Async(String, String, String, String, String, Integer, Integer, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetArchiveListWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListWithContext2Async(string, string, string, string, string, int, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListWithContext2Async(string, string, string, string, string, int, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async(string, string, string, string, string, int, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of data for an archive using restrictions as strings, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<ArchiveListItem[]> GetArchiveListWithContext2Async(string guiName, string providerName, string sortOrder, string restriction, string entities, int page, int pageSize, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: guiName
      type: System.String
      description: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: sortOrder
      type: System.String
      description: Sort order for the archive. e.g. "name asc, dept desc" Can be null, which indicates 'no particular order'
    - id: restriction
      type: System.String
      description: Archive restrictions as string. e.g. "name gt 'B' or dept = 'baz'" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String
      description: Comma separated list of entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
      description: Array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListWithContext2Async(guiName As String, providerName As String, sortOrder As String, restriction As String, entities As String, page As Integer, pageSize As Integer, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListItem())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveListWithContext2Async(String, String, String, String, String, Integer, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async(String, String, String, String, String, Integer, Integer, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListWithContext2Async(String, String, String, String, String, Integer, Integer, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsWithHeader2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsWithHeader2Async(string, string, string, string, string, int, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(string, string, string, string, string, int, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(string, string, string, string, string, int, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<ArchiveListResult> GetArchiveListByColumnsWithHeader2Async(string providerName, string columns, string sortOrder, string restriction, string entities, int page, int pageSize, string options, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String
      description: Comma separated string of the names of the columns wanted.
    - id: sortOrder
      type: System.String
      description: Comma separated string of sort order for the archive. e.g. "name asc, dept desc" Can be null, which indicates 'no particular order'
    - id: restriction
      type: System.String
      description: Archive restrictions. e.g. "category = 2 or business oneOf (2,3,4)" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String
      description: Comma separated list of entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: options
      type: System.String
      description: name=value&amp;amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
      description: Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsWithHeader2Async(providerName As String, columns As String, sortOrder As String, restriction As String, entities As String, page As Integer, pageSize As Integer, options As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListResult)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(String, String, String, String, String, Integer, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async(String, String, String, String, String, Integer, Integer, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsWithHeader2Async(String, String, String, String, String, Integer, Integer, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  id: GetArchiveListByColumnsWithHeaderWithContext2Async(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetArchiveListByColumnsWithHeaderWithContext2Async(string, string, string, string, string, int, int, string, string, CancellationToken)
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(string, string, string, string, string, int, int, string, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(string, string, string, string, string, int, int, string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a page of results for an archive list, with context parameter, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.
  remarks: >-
    <p>
        Archive Restriction strings are OData or SQL-ish.
        They are parsed and converted into ArchiveRestrictions.
    </p>

    For example:

    <pre><code class="lang-csharp">"name begins 'Super'"

    "category = 3"

    "category in (2,3,4)"

    "xstop set"

    "registered after '2014.3.4'"

    "registered dateBetween ('2014.11.29', '2014.12.25')"</code></pre>

    Unary operators:

    <pre><code class="lang-csharp">"updatedDate lastWeek", "assocId currentAssociate"</code></pre>

    <p></p>

    <h2>Brackets and or</h2>

    <p>AND and OR can be used to combine terms. AND has a higher priority than OR</p>

    <pre><code class="lang-csharp">"business = 2  AND name contains 'super'"</code></pre>

    <p>Brackets can be used for grouping.</p>

    <pre><code class="lang-csharp">"(business = 2 or category = 3) and name contains 'super'"</code></pre>

    <p></p>

    <h2>Aggregation operators</h2>

    <p>
        The column names can encode grouping and summarizing.
        You add functions and modifiers to the column name to trigger aggregation.
    </p>

    Example: group last names together, and inject a header row for each group.

    <pre><code class="lang-csharp">GroupBy(lastName):Header</code></pre>

    Example: count instances of middle names, and hide the individual rows, 

    report just the totals for each group using a footer. Note how the modifiers stack.

    <pre><code class="lang-csharp">Count(middleName):HideDetail:Footer</code></pre>

    Example: the aggregator functions can nest, so you can say

    <pre><code class="lang-csharp">GroupBy(DatePart(personUpdatedDate):YearMonth):Header</code></pre>

    <h2>Strings</h2>

    <p>
        Use the <code>begins</code> or <code>contains</code> operators to do string searches.
        You can also use the normal = operator to do string exact match checks.
    </p>

    <p>
        Use backslash to escape single quotes in strings
        (note that backslash needs to be doubled because c# also uses backslash escapes):
    </p>

    <pre><code class="lang-csharp">"department contains 'Bob\\'s'"</code></pre>

    <p></p>
  example:
  - >-
    <pre><code class="lang-csharp">"name = 'SuperOffice AS'"

    "name startsWith 'SuperOffice'"

    "startsWith(name, 'SuperOffice')"

    "updatedDate after '2000.12.30'"

    "category = 10"

    "category in (10, 12, 53)"

    "category in (2,3,4) and name startswith 'super'"

    "category in (2,3,4) or name startswith 'super'"

    "(category = 2 or business = 3) and name contains 'super'"


    var agent = new FindAgent();


    var res1 = agent.FindFromRestrictions2("updatedBy = 2", "FindContact", 100, 0);

    foreach (var row in res1.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue == 2

    var res2 = agent.FindFromRestrictions2("updatedBy unequals 6 and updatedDate after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res2.ArchiveRows)
        (int)row.ColumnData["updatedBy"].RawValue != 6 &amp;&amp; 
        row.ColumnData["updatedDate"].GetDateTimeValue() &gt; new DateTime(2000, 1, 2);

    var res3 = agent.FindFromRestrictions2("category in (2,3)", "FindContact", 100, 0);

    foreach (var row in res3.ArchiveRows)
        (int)row.ColumnData["category"].RawValue == 2 || (int)row.ColumnData["category"].RawValue == 3;

    var res4 = agent.FindFromRestrictions2("sale/date after '2000.1.2'", "FindContact", 100, 0);

    foreach (var row in res4.ArchiveRows)
        (row.ColumnData["sale/date"].GetDateTimeValue().Year &gt;= 2000 

    var res5 = _agent.FindFromRestrictionsColumns2("(category =2 or business = 3) and name contains 'e'", 
             _provider, "category,business,name", 100, 0);
    foreach (var row in res5.ArchiveRows)
        ((int)x.ColumnData["category"].RawValue == 2 || 
         (int)x.ColumnData["business"].RawValue == 3) &amp;&amp; 
         (x.ColumnData["name"].RawValue as string).Contains("e") );</code></pre>
  syntax:
    content: Task<ArchiveListResult> GetArchiveListByColumnsWithHeaderWithContext2Async(string providerName, string columns, string sortOrder, string restriction, string entities, int page, int pageSize, string options, string context, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: columns
      type: System.String
      description: Comma separated list of the names of the columns wanted.
    - id: sortOrder
      type: System.String
      description: Sort order for the archive. "name asc, dept desc" Can be null, which indicates 'no particular order'
    - id: restriction
      type: System.String
      description: Archive restrictions as string. "updated &gt; '2009.1.1' and registeredBy = 2" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.
    - id: entities
      type: System.String
      description: Comma separated list of entities to include. Can be null, which indicates 'include all entities'
    - id: page
      type: System.Int32
      description: Page number, page 0 is the first page. Negative page numbers are interpreted as number of rows to skip.
    - id: pageSize
      type: System.Int32
      description: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)
    - id: options
      type: System.String
      description: name=value&amp;amp;... formatted set of options. "rowcount=true" will cause the rowcount to be calculated and populated.
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
      description: Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)
    content.vb: Function GetArchiveListByColumnsWithHeaderWithContext2Async(providerName As String, columns As String, sortOrder As String, restriction As String, entities As String, page As Integer, pageSize As Integer, options As String, context As String, cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListResult)
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async*
  nameWithType.vb: IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(String, String, String, String, String, Integer, Integer, String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async(String, String, String, String, String, Integer, Integer, String, String, System.Threading.CancellationToken)
  name.vb: GetArchiveListByColumnsWithHeaderWithContext2Async(String, String, String, String, String, Integer, Integer, String, String, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync(System.String,System.String,System.String[],System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String,System.String[],System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync(System.String,System.String,System.String[],System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String,System.String[],System.Int32,System.Threading.CancellationToken)
  id: ExportArchiveAsync(System.String,System.String,System.String[],System.String[],SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[],SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.String,System.String[],System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: ExportArchiveAsync(string, string, string[], string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string, string[], int, CancellationToken)
  nameWithType: IArchiveAgent.ExportArchiveAsync(string, string, string[], string[], ArchiveOrderByInfo[], ArchiveRestrictionInfo[], string, string[], int, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync(string, string, string[], string[], SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[], SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], string, string[], int, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Exports the target archive to a downloadable format.
  example: []
  syntax:
    content: Task<ExportArchiveResult> ExportArchiveAsync(string providerName, string context, string[] desiredEntities, string[] columns, ArchiveOrderByInfo[] sortOrder, ArchiveRestrictionInfo[] restrictions, string exportType, string[] selectedRowIds, int estimatedRowCount, CancellationToken cancellationToken = default)
    parameters:
    - id: providerName
      type: System.String
      description: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin
    - id: context
      type: System.String
      description: Context parameter, url-encoded string context parameter for ArchiveProvider constructor
    - id: desiredEntities
      type: System.String[]
      description: Comma separated list of the names of the desired entities.
    - id: columns
      type: System.String[]
      description: Comma separated list of the names of the columns wanted; supports display names
    - id: sortOrder
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: ''
    - id: restrictions
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: ''
    - id: exportType
      type: System.String
      description: To what format the archive should be exported; Excel, etc.
    - id: selectedRowIds
      type: System.String[]
      description: ''
    - id: estimatedRowCount
      type: System.Int32
      description: The estimated amount of rows to be exported. Used to determine if the operation should be run as a batch task or immediately.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ExportArchiveResult}
      description: ''
    content.vb: Function ExportArchiveAsync(providerName As String, context As String, desiredEntities As String(), columns As String(), sortOrder As ArchiveOrderByInfo(), restrictions As ArchiveRestrictionInfo(), exportType As String, selectedRowIds As String(), estimatedRowCount As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of ExportArchiveResult)
  overload: SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync*
  nameWithType.vb: IArchiveAgent.ExportArchiveAsync(String, String, String(), String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String, String(), Integer, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync(String, String, String(), String(), SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo(), SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), String, String(), Integer, System.Threading.CancellationToken)
  name.vb: ExportArchiveAsync(String, String, String(), String(), ArchiveOrderByInfo(), ArchiveRestrictionInfo(), String, String(), Integer, CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync(System.Threading.CancellationToken)
  id: CreateDefaultArchiveListResultAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultArchiveListResultAsync(CancellationToken)
  nameWithType: IArchiveAgent.CreateDefaultArchiveListResultAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Loading default values into a new ArchiveListResult.
  example: []
  syntax:
    content: Task<ArchiveListResult> CreateDefaultArchiveListResultAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
      description: New ArchiveListResult with default values
    content.vb: Function CreateDefaultArchiveListResultAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ArchiveListResult)
  overload: SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync*
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync(System.String,System.Int32,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync(System.String,System.Int32,System.String[],System.Threading.CancellationToken)
  id: GetRelatedDataAsync(System.String,System.Int32,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetRelatedDataAsync(string, int, string[], CancellationToken)
  nameWithType: IArchiveAgent.GetRelatedDataAsync(string, int, string[], CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync(string, int, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get data for fields related to a table record. While this method /can/ be used to fetch plain fields, that is not the intended usage and it does not replace the Entity.Get methods available for that purpose. Nor does it replace the generic DotSyntax/Dynamic archive provider.
  example: []
  syntax:
    content: Task<RelatedData[]> GetRelatedDataAsync(string table, int recordId, string[] fields, CancellationToken cancellationToken = default)
    parameters:
    - id: table
      type: System.String
      description: The root table to get related data for, such as 'ticket' or 'y_car'
    - id: recordId
      type: System.Int32
      description: The primary key of the root table to get related data for
    - id: fields
      type: System.String[]
      description: "Names of fields - these need to be valid in the DotSyntax for this table, and can be arbitrarily deep. Examples: 'title', 'created_by.associate_id.person.fullName', 'x_comment'. Do not start with the root table name."
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.RelatedData[]}
      description: Array of field =&gt; ArchiveColumnData objects
    content.vb: Function GetRelatedDataAsync(table As String, recordId As Integer, fields As String(), cancellationToken As CancellationToken = Nothing) As Task(Of RelatedData())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync*
  nameWithType.vb: IArchiveAgent.GetRelatedDataAsync(String, Integer, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync(String, Integer, String(), System.Threading.CancellationToken)
  name.vb: GetRelatedDataAsync(String, Integer, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetRelatedData2Async(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IArchiveAgent
  langs:
  - csharp
  - vb
  name: GetRelatedData2Async(string, int, string, CancellationToken)
  nameWithType: IArchiveAgent.GetRelatedData2Async(string, int, string, CancellationToken)
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async(string, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get data for fields related to a table record. While this method /can/ be used to fetch plain fields, that is not the intended usage and it does not replace the Entity.Get methods available for that purpose. Nor does it replace the generic DotSyntax/Dynamic archive provider.
  example: []
  syntax:
    content: Task<RelatedData[]> GetRelatedData2Async(string table, int recordId, string fields, CancellationToken cancellationToken = default)
    parameters:
    - id: table
      type: System.String
      description: The root table to get related data for, such as 'ticket' or 'y_car'
    - id: recordId
      type: System.Int32
      description: The primary key of the root table to get related data for
    - id: fields
      type: System.String
      description: "Names of fields as a comma-separated list - these need to be valid in the DotSyntax for this table, and can be arbitrarily deep. Example: 'title,created_by.associate_id.person.fullName, x_comment'. Do not start with the root table name."
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.RelatedData[]}
      description: Array of field =&gt; ArchiveColumnData objects
    content.vb: Function GetRelatedData2Async(table As String, recordId As Integer, fields As String, cancellationToken As CancellationToken = Nothing) As Task(Of RelatedData())
  overload: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async*
  nameWithType.vb: IArchiveAgent.GetRelatedData2Async(String, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async(String, Integer, String, System.Threading.CancellationToken)
  name.vb: GetRelatedData2Async(String, Integer, String, CancellationToken)
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Services
    name: Services
    isExternal: true
    href: SuperOffice.CRM.Services.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Services
    name: Services
    isExternal: true
    href: SuperOffice.CRM.Services.html
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetActivityFilterAsync_System_Threading_CancellationToken_
  name: GetActivityFilterAsync
  nameWithType: IArchiveAgent.GetActivityFilterAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetActivityFilterAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ActivityFilter}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ActivityFilter}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ActivityFilter>
  nameWithType: Task<ActivityFilter>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ActivityFilter>
  nameWithType.vb: Task(Of ActivityFilter)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ActivityFilter)
  name.vb: Task(Of ActivityFilter)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.ActivityFilter
    name: ActivityFilter
    isExternal: true
    href: SuperOffice.CRM.Services.ActivityFilter.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.ActivityFilter
    name: ActivityFilter
    isExternal: true
    href: SuperOffice.CRM.Services.ActivityFilter.html
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetActivityFilterAsync_SuperOffice_CRM_Services_ActivityFilter_System_Threading_CancellationToken_
  name: SetActivityFilterAsync
  nameWithType: IArchiveAgent.SetActivityFilterAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetActivityFilterAsync
- uid: SuperOffice.CRM.Services.ActivityFilter
  commentId: T:SuperOffice.CRM.Services.ActivityFilter
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.ActivityFilter.html
  name: ActivityFilter
  nameWithType: ActivityFilter
  fullName: SuperOffice.CRM.Services.ActivityFilter
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetGroupAssociateIdsAsync_System_Int32___System_Threading_CancellationToken_
  name: GetGroupAssociateIdsAsync
  nameWithType: IArchiveAgent.GetGroupAssociateIdsAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetGroupAssociateIdsAsync
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32[]}
  commentId: T:System.Threading.Tasks.Task{System.Int32[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int[]>
  nameWithType: Task<int[]>
  fullName: System.Threading.Tasks.Task<int[]>
  nameWithType.vb: Task(Of Integer())
  fullName.vb: System.Threading.Tasks.Task(Of Integer())
  name.vb: Task(Of Integer())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveConfigurationAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetArchiveConfigurationAsync
  nameWithType: IArchiveAgent.GetArchiveConfigurationAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveConfiguration}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveConfiguration}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ArchiveConfiguration>
  nameWithType: Task<ArchiveConfiguration>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ArchiveConfiguration>
  nameWithType.vb: Task(Of ArchiveConfiguration)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ArchiveConfiguration)
  name.vb: Task(Of ArchiveConfiguration)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.ArchiveConfiguration
    name: ArchiveConfiguration
    isExternal: true
    href: SuperOffice.CRM.Services.ArchiveConfiguration.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.ArchiveConfiguration
    name: ArchiveConfiguration
    isExternal: true
    href: SuperOffice.CRM.Services.ArchiveConfiguration.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveConfigurationWithContextAsync_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: GetArchiveConfigurationWithContextAsync
  nameWithType: IArchiveAgent.GetArchiveConfigurationWithContextAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationWithContextAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetColumnWidthsAsync_System_String_System_String___System_Threading_CancellationToken_
  name: SetColumnWidthsAsync
  nameWithType: IArchiveAgent.SetColumnWidthsAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsAsync
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetChosenEntitiesAsync_System_String_System_String_System_String___System_Threading_CancellationToken_
  name: SetChosenEntitiesAsync
  nameWithType: IArchiveAgent.SetChosenEntitiesAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetChosenColumnsAsync_System_String_System_String_System_String___System_Threading_CancellationToken_
  name: SetChosenColumnsAsync
  nameWithType: IArchiveAgent.SetChosenColumnsAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveConfigurationV2Async_System_String_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: GetArchiveConfigurationV2Async
  nameWithType: IArchiveAgent.GetArchiveConfigurationV2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveConfigurationV2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetColumnWidthsV2Async_System_String_System_String_System_String_System_String_System_String___System_Threading_CancellationToken_
  name: SetColumnWidthsV2Async
  nameWithType: IArchiveAgent.SetColumnWidthsV2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetColumnWidthsV2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetChosenEntitiesV2Async_System_String_System_String_System_String_System_String_System_String___System_Threading_CancellationToken_
  name: SetChosenEntitiesV2Async
  nameWithType: IArchiveAgent.SetChosenEntitiesV2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenEntitiesV2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_SetChosenColumnsV2Async_System_String_System_String_System_String_System_String_System_String___System_Threading_CancellationToken_
  name: SetChosenColumnsV2Async
  nameWithType: IArchiveAgent.SetChosenColumnsV2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.SetChosenColumnsV2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsAsync_System_String_System_String___SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String___System_Int32_System_Int32_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsAsync
  nameWithType: IArchiveAgent.GetArchiveListByColumnsAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsAsync
- uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
  isExternal: true
  name: ArchiveOrderByInfo[]
  nameWithType: ArchiveOrderByInfo[]
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
  nameWithType.vb: ArchiveOrderByInfo()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo()
  name.vb: ArchiveOrderByInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    name: ArchiveOrderByInfo
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    name: ArchiveOrderByInfo
    isExternal: true
  - name: (
  - name: )
- uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
  isExternal: true
  name: ArchiveRestrictionInfo[]
  nameWithType: ArchiveRestrictionInfo[]
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
  nameWithType.vb: ArchiveRestrictionInfo()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo()
  name.vb: ArchiveRestrictionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    isExternal: true
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListItem[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ArchiveListItem[]>
  nameWithType: Task<ArchiveListItem[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ArchiveListItem[]>
  nameWithType.vb: Task(Of ArchiveListItem())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ArchiveListItem())
  name.vb: Task(Of ArchiveListItem())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.ArchiveListItem
    name: ArchiveListItem
    isExternal: true
    href: SuperOffice.CRM.Services.ArchiveListItem.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.ArchiveListItem
    name: ArchiveListItem
    isExternal: true
    href: SuperOffice.CRM.Services.ArchiveListItem.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsWithContextAsync_System_String_System_String___SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String___System_Int32_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsWithContextAsync
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithContextAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContextAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListAsync_System_String_System_String_SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String___System_Int32_System_Int32_System_Threading_CancellationToken_
  name: GetArchiveListAsync
  nameWithType: IArchiveAgent.GetArchiveListAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListWithContextAsync_System_String_System_String_SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String___System_Int32_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetArchiveListWithContextAsync
  nameWithType: IArchiveAgent.GetArchiveListWithContextAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContextAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsWithHeaderAsync_System_String_System_String___SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String___System_Int32_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsWithHeaderAsync
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ArchiveListResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ArchiveListResult>
  nameWithType: Task<ArchiveListResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ArchiveListResult>
  nameWithType.vb: Task(Of ArchiveListResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ArchiveListResult)
  name.vb: Task(Of ArchiveListResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.ArchiveListResult
    name: ArchiveListResult
    isExternal: true
    href: SuperOffice.CRM.Services.ArchiveListResult.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.ArchiveListResult
    name: ArchiveListResult
    isExternal: true
    href: SuperOffice.CRM.Services.ArchiveListResult.html
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetProviderNamesAsync_System_Threading_CancellationToken_
  name: GetProviderNamesAsync
  nameWithType: IArchiveAgent.GetProviderNamesAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetProviderNamesAsync
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: T:System.Threading.Tasks.Task{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string[]>
  nameWithType: Task<string[]>
  fullName: System.Threading.Tasks.Task<string[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsWithHeaderWithContextAsync_System_String_System_String___SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String___System_Int32_System_Int32_System_String_System_String_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsWithHeaderWithContextAsync
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContextAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetAvailableColumnsAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetAvailableColumnsAsync
  nameWithType: IArchiveAgent.GetAvailableColumnsAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableColumnsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ArchiveColumnInfo[]>
  nameWithType: Task<ArchiveColumnInfo[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]>
  nameWithType.vb: Task(Of ArchiveColumnInfo())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: Task(Of ArchiveColumnInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    name: ArchiveColumnInfo
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    name: ArchiveColumnInfo
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetAvailableEntitiesAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetAvailableEntitiesAsync
  nameWithType: IArchiveAgent.GetAvailableEntitiesAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetAvailableEntitiesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.MDOListItem[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.MDOListItem[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<MDOListItem[]>
  nameWithType: Task<MDOListItem[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.MDOListItem[]>
  nameWithType.vb: Task(Of MDOListItem())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.MDOListItem())
  name.vb: Task(Of MDOListItem())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.MDOListItem
    name: MDOListItem
    isExternal: true
    href: SuperOffice.CRM.Services.MDOListItem.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.MDOListItem
    name: MDOListItem
    isExternal: true
    href: SuperOffice.CRM.Services.MDOListItem.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumns2Async_System_String_System_String_System_String_System_String_System_String_System_Int32_System_Int32_System_Threading_CancellationToken_
  name: GetArchiveListByColumns2Async
  nameWithType: IArchiveAgent.GetArchiveListByColumns2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumns2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsWithContext2Async_System_String_System_String_System_String_System_String_System_String_System_Int32_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsWithContext2Async
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithContext2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithContext2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveList2Async_System_String_System_String_System_String_System_String_System_String_System_Int32_System_Int32_System_Threading_CancellationToken_
  name: GetArchiveList2Async
  nameWithType: IArchiveAgent.GetArchiveList2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveList2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListWithContext2Async_System_String_System_String_System_String_System_String_System_String_System_Int32_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetArchiveListWithContext2Async
  nameWithType: IArchiveAgent.GetArchiveListWithContext2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListWithContext2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsWithHeader2Async_System_String_System_String_System_String_System_String_System_String_System_Int32_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsWithHeader2Async
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeader2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeader2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetArchiveListByColumnsWithHeaderWithContext2Async_System_String_System_String_System_String_System_String_System_String_System_Int32_System_Int32_System_String_System_String_System_Threading_CancellationToken_
  name: GetArchiveListByColumnsWithHeaderWithContext2Async
  nameWithType: IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2Async
- uid: SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_ExportArchiveAsync_System_String_System_String_System_String___System_String___SuperOffice_CRM_ArchiveLists_ArchiveOrderByInfo___SuperOffice_CRM_ArchiveLists_ArchiveRestrictionInfo___System_String_System_String___System_Int32_System_Threading_CancellationToken_
  name: ExportArchiveAsync
  nameWithType: IArchiveAgent.ExportArchiveAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.ExportArchiveAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ExportArchiveResult}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ExportArchiveResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ExportArchiveResult>
  nameWithType: Task<ExportArchiveResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ExportArchiveResult>
  nameWithType.vb: Task(Of ExportArchiveResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ExportArchiveResult)
  name.vb: Task(Of ExportArchiveResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.ExportArchiveResult
    name: ExportArchiveResult
    isExternal: true
    href: SuperOffice.CRM.Services.ExportArchiveResult.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.ExportArchiveResult
    name: ExportArchiveResult
    isExternal: true
    href: SuperOffice.CRM.Services.ExportArchiveResult.html
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_CreateDefaultArchiveListResultAsync_System_Threading_CancellationToken_
  name: CreateDefaultArchiveListResultAsync
  nameWithType: IArchiveAgent.CreateDefaultArchiveListResultAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.CreateDefaultArchiveListResultAsync
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetRelatedDataAsync_System_String_System_Int32_System_String___System_Threading_CancellationToken_
  name: GetRelatedDataAsync
  nameWithType: IArchiveAgent.GetRelatedDataAsync
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedDataAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.RelatedData[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Services.RelatedData[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RelatedData[]>
  nameWithType: Task<RelatedData[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.RelatedData[]>
  nameWithType.vb: Task(Of RelatedData())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.RelatedData())
  name.vb: Task(Of RelatedData())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Services.RelatedData
    name: RelatedData
    isExternal: true
    href: SuperOffice.CRM.Services.RelatedData.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Services.RelatedData
    name: RelatedData
    isExternal: true
    href: SuperOffice.CRM.Services.RelatedData.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async*
  commentId: Overload:SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async
  isExternal: true
  href: SuperOffice.CRM.Services.IArchiveAgent.html#SuperOffice_CRM_Services_IArchiveAgent_GetRelatedData2Async_System_String_System_Int32_System_String_System_Threading_CancellationToken_
  name: GetRelatedData2Async
  nameWithType: IArchiveAgent.GetRelatedData2Async
  fullName: SuperOffice.CRM.Services.IArchiveAgent.GetRelatedData2Async
