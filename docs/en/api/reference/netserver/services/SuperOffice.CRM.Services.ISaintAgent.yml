### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.ISaintAgent
  commentId: T:SuperOffice.CRM.Services.ISaintAgent
  id: ISaintAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync(System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync(System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync(SuperOffice.CRM.Services.SaintConfiguration,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync(SuperOffice.CRM.Services.StatusMonitor,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync(SuperOffice.CRM.Services.StatusMonitorPeriods,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync(System.String,System.Int32[],System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ISaintAgent
  nameWithType: ISaintAgent
  fullName: SuperOffice.CRM.Services.ISaintAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the Saint Agent\nAdministration and maintenance of SAINT counters and statuses\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (SaintAgent agent = new SaintAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("Saint Agent", "Interface for the Saint Agent. Administration and maintenance of SAINT counters and statuses")]

      public interface ISaintAgent : IAgent
    content.vb: >-
      <Agent("Saint Agent", "Interface for the Saint Agent. Administration and maintenance of SAINT counters and statuses")>

      Public Interface ISaintAgent
          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Saint Agent
    - type: System.String
      value: Interface for the Saint Agent. Administration and maintenance of SAINT counters and statuses
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync(System.Threading.CancellationToken)
  id: CreateDefaultSaintConfigurationAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultSaintConfigurationAsync(CancellationToken)
  nameWithType: ISaintAgent.CreateDefaultSaintConfigurationAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new SaintConfiguration.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<SaintConfiguration> CreateDefaultSaintConfigurationAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration}
      description: New SaintConfiguration with default values
    content.vb: Function CreateDefaultSaintConfigurationAsync(cancellationToken As CancellationToken = Nothing) As Task(Of SaintConfiguration)
  overload: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync(SuperOffice.CRM.Services.SaintConfiguration,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync(SuperOffice.CRM.Services.SaintConfiguration,System.Threading.CancellationToken)
  id: SaveSaintConfigurationAsync(SuperOffice.CRM.Services.SaintConfiguration,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: SaveSaintConfigurationAsync(SaintConfiguration, CancellationToken)
  nameWithType: ISaintAgent.SaveSaintConfigurationAsync(SaintConfiguration, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync(SuperOffice.CRM.Services.SaintConfiguration, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing SaintConfiguration or creates a new SaintConfiguration if the id parameter is empty\n"
  syntax:
    content: Task<SaintConfiguration> SaveSaintConfigurationAsync(SaintConfiguration saintConfiguration, CancellationToken cancellationToken = null)
    parameters:
    - id: saintConfiguration
      type: SuperOffice.CRM.Services.SaintConfiguration
      description: The SaintConfiguration that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration}
      description: New or updated SaintConfiguration
    content.vb: Function SaveSaintConfigurationAsync(saintConfiguration As SaintConfiguration, cancellationToken As CancellationToken = Nothing) As Task(Of SaintConfiguration)
  overload: SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync(System.Threading.CancellationToken)
  id: CreateDefaultStatusMonitorAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultStatusMonitorAsync(CancellationToken)
  nameWithType: ISaintAgent.CreateDefaultStatusMonitorAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new StatusMonitor.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<StatusMonitor> CreateDefaultStatusMonitorAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor}
      description: New StatusMonitor with default values
    content.vb: Function CreateDefaultStatusMonitorAsync(cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitor)
  overload: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync(SuperOffice.CRM.Services.StatusMonitor,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync(SuperOffice.CRM.Services.StatusMonitor,System.Threading.CancellationToken)
  id: SaveStatusMonitorAsync(SuperOffice.CRM.Services.StatusMonitor,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: SaveStatusMonitorAsync(StatusMonitor, CancellationToken)
  nameWithType: ISaintAgent.SaveStatusMonitorAsync(StatusMonitor, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync(SuperOffice.CRM.Services.StatusMonitor, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing StatusMonitor or creates a new StatusMonitor if the id parameter is empty\n"
  syntax:
    content: Task<StatusMonitor> SaveStatusMonitorAsync(StatusMonitor statusMonitor, CancellationToken cancellationToken = null)
    parameters:
    - id: statusMonitor
      type: SuperOffice.CRM.Services.StatusMonitor
      description: The StatusMonitor that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor}
      description: New or updated StatusMonitor
    content.vb: Function SaveStatusMonitorAsync(statusMonitor As StatusMonitor, cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitor)
  overload: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  id: CreateDefaultStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultStatusMonitorPeriodsAsync(CancellationToken)
  nameWithType: ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new StatusMonitorPeriods.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<StatusMonitorPeriods> CreateDefaultStatusMonitorPeriodsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitorPeriods}
      description: New StatusMonitorPeriods with default values
    content.vb: Function CreateDefaultStatusMonitorPeriodsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitorPeriods)
  overload: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync(SuperOffice.CRM.Services.StatusMonitorPeriods,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync(SuperOffice.CRM.Services.StatusMonitorPeriods,System.Threading.CancellationToken)
  id: SaveStatusMonitorPeriodsAsync(SuperOffice.CRM.Services.StatusMonitorPeriods,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: SaveStatusMonitorPeriodsAsync(StatusMonitorPeriods, CancellationToken)
  nameWithType: ISaintAgent.SaveStatusMonitorPeriodsAsync(StatusMonitorPeriods, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync(SuperOffice.CRM.Services.StatusMonitorPeriods, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing StatusMonitorPeriods or creates a new StatusMonitorPeriods if the id parameter is empty\n"
  syntax:
    content: Task<StatusMonitorPeriods> SaveStatusMonitorPeriodsAsync(StatusMonitorPeriods statusMonitorPeriods, CancellationToken cancellationToken = null)
    parameters:
    - id: statusMonitorPeriods
      type: SuperOffice.CRM.Services.StatusMonitorPeriods
      description: The StatusMonitorPeriods that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitorPeriods}
      description: New or updated StatusMonitorPeriods
    content.vb: Function SaveStatusMonitorPeriodsAsync(statusMonitorPeriods As StatusMonitorPeriods, cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitorPeriods)
  overload: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync(System.Threading.CancellationToken)
  id: GetSaintConfigurationsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: GetSaintConfigurationsAsync(CancellationToken)
  nameWithType: ISaintAgent.GetSaintConfigurationsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns the StatusMonitorPeriods entity.\n"
  syntax:
    content: Task<SaintConfiguration[]> GetSaintConfigurationsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration[]}
      description: The SaintConfiguration for all entities
    content.vb: Function GetSaintConfigurationsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of SaintConfiguration())
  overload: SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  id: GetStatusMonitorsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: GetStatusMonitorsAsync(Int32, String, CancellationToken)
  nameWithType: ISaintAgent.GetStatusMonitorsAsync(Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync(System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all active status monitors for a specified target\n"
  syntax:
    content: Task<StatusMonitor[]> GetStatusMonitorsAsync(int id, string type, CancellationToken cancellationToken = null)
    parameters:
    - id: id
      type: System.Int32
      description: Identity of target type(contact identity, project identity etc.)
    - id: type
      type: System.String
      description: Type to get status monitors for(&quot;contact&quot;, &quot;project&quot;, etc.)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor[]}
      description: Active status monitors
    content.vb: Function GetStatusMonitorsAsync(id As Integer, type As String, cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitor())
  overload: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  id: GetStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: GetStatusMonitorAsync(Int32, CancellationToken)
  nameWithType: ISaintAgent.GetStatusMonitorAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a single status monitor based on its identity\n"
  syntax:
    content: Task<StatusMonitor> GetStatusMonitorAsync(int id, CancellationToken cancellationToken = null)
    parameters:
    - id: id
      type: System.Int32
      description: Identity of status monitor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor}
      description: The requested status monitor
    content.vb: Function GetStatusMonitorAsync(id As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitor)
  overload: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync(System.Boolean,System.Threading.CancellationToken)
  id: RegenerateStatusMonitorsAsync(System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: RegenerateStatusMonitorsAsync(Boolean, CancellationToken)
  nameWithType: ISaintAgent.RegenerateStatusMonitorsAsync(Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync(System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRegenerate status monitors\n"
  syntax:
    content: Task<BatchTaskInfo> RegenerateStatusMonitorsAsync(bool runAsBatch, CancellationToken cancellationToken = null)
    parameters:
    - id: runAsBatch
      type: System.Boolean
      description: If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.BatchTaskInfo}
      description: Information about the batch task, if batch execution was requested. Otherwise null
    content.vb: Function RegenerateStatusMonitorsAsync(runAsBatch As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of BatchTaskInfo)
  overload: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync(System.String,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync(System.String,System.Int32[],System.Threading.CancellationToken)
  id: SetRankOnStatusMonitorsAsync(System.String,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: SetRankOnStatusMonitorsAsync(String, Int32[], CancellationToken)
  nameWithType: ISaintAgent.SetRankOnStatusMonitorsAsync(String, Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync(System.String, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet rank order on status monitors\n"
  syntax:
    content: Task SetRankOnStatusMonitorsAsync(string type, int[] itemsIds, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: Type of status monitors to reorder (&quot;contact&quot;, &quot;project&quot;, etc.)
    - id: itemsIds
      type: System.Int32[]
      description: The ids of the items in the order you want
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function SetRankOnStatusMonitorsAsync(type As String, itemsIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync*
  nameWithType.vb: ISaintAgent.SetRankOnStatusMonitorsAsync(String, Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync(System.String, System.Int32(), System.Threading.CancellationToken)
  name.vb: SetRankOnStatusMonitorsAsync(String, Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  id: RegenerateStatusMonitorAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: RegenerateStatusMonitorAsync(Int32, CancellationToken)
  nameWithType: ISaintAgent.RegenerateStatusMonitorAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRegenerate the given status monitor\n"
  syntax:
    content: Task RegenerateStatusMonitorAsync(int statusMonitorId, CancellationToken cancellationToken = null)
    parameters:
    - id: statusMonitorId
      type: System.Int32
      description: The id of the statusmonitor to regenerate
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function RegenerateStatusMonitorAsync(statusMonitorId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync(System.Boolean,System.Threading.CancellationToken)
  id: RegenerateCountersAsync(System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: RegenerateCountersAsync(Boolean, CancellationToken)
  nameWithType: ISaintAgent.RegenerateCountersAsync(Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync(System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRegenerate the Saint counters - this can take several minutes\n"
  syntax:
    content: Task<BatchTaskInfo> RegenerateCountersAsync(bool runAsBatch, CancellationToken cancellationToken = null)
    parameters:
    - id: runAsBatch
      type: System.Boolean
      description: If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.BatchTaskInfo}
      description: Information about the batch task, if batch execution was requested. Otherwise null
    content.vb: Function RegenerateCountersAsync(runAsBatch As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of BatchTaskInfo)
  overload: SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync*
- uid: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  id: GetStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ISaintAgent
  langs:
  - csharp
  - vb
  name: GetStatusMonitorPeriodsAsync(CancellationToken)
  nameWithType: ISaintAgent.GetStatusMonitorPeriodsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns the StatusMonitorPeriods entity.\n"
  syntax:
    content: Task<StatusMonitorPeriods> GetStatusMonitorPeriodsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitorPeriods}
      description: The StatusMonitorEntity
    content.vb: Function GetStatusMonitorPeriodsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of StatusMonitorPeriods)
  overload: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync*
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync
  isExternal: true
  name: CreateDefaultSaintConfigurationAsync
  nameWithType: ISaintAgent.CreateDefaultSaintConfigurationAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultSaintConfigurationAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SaintConfiguration>
  nameWithType: Task<SaintConfiguration>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.SaintConfiguration>
  nameWithType.vb: Task(Of SaintConfiguration)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.SaintConfiguration)
  name.vb: Task(Of SaintConfiguration)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.SaintConfiguration
    name: SaintConfiguration
    nameWithType: SaintConfiguration
    fullName: SuperOffice.CRM.Services.SaintConfiguration
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.SaintConfiguration
    name: SaintConfiguration
    nameWithType: SaintConfiguration
    fullName: SuperOffice.CRM.Services.SaintConfiguration
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync
  isExternal: true
  name: SaveSaintConfigurationAsync
  nameWithType: ISaintAgent.SaveSaintConfigurationAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.SaveSaintConfigurationAsync
- uid: SuperOffice.CRM.Services.SaintConfiguration
  commentId: T:SuperOffice.CRM.Services.SaintConfiguration
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: SaintConfiguration
  nameWithType: SaintConfiguration
  fullName: SuperOffice.CRM.Services.SaintConfiguration
- uid: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync
  isExternal: true
  name: CreateDefaultStatusMonitorAsync
  nameWithType: ISaintAgent.CreateDefaultStatusMonitorAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor}'
  definition: System.Threading.Tasks.Task`1
  name: Task<StatusMonitor>
  nameWithType: Task<StatusMonitor>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.StatusMonitor>
  nameWithType.vb: Task(Of StatusMonitor)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.StatusMonitor)
  name.vb: Task(Of StatusMonitor)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.StatusMonitor
    name: StatusMonitor
    nameWithType: StatusMonitor
    fullName: SuperOffice.CRM.Services.StatusMonitor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.StatusMonitor
    name: StatusMonitor
    nameWithType: StatusMonitor
    fullName: SuperOffice.CRM.Services.StatusMonitor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync
  isExternal: true
  name: SaveStatusMonitorAsync
  nameWithType: ISaintAgent.SaveStatusMonitorAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorAsync
- uid: SuperOffice.CRM.Services.StatusMonitor
  commentId: T:SuperOffice.CRM.Services.StatusMonitor
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: StatusMonitor
  nameWithType: StatusMonitor
  fullName: SuperOffice.CRM.Services.StatusMonitor
- uid: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync
  isExternal: true
  name: CreateDefaultStatusMonitorPeriodsAsync
  nameWithType: ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.CreateDefaultStatusMonitorPeriodsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitorPeriods}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitorPeriods}'
  definition: System.Threading.Tasks.Task`1
  name: Task<StatusMonitorPeriods>
  nameWithType: Task<StatusMonitorPeriods>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.StatusMonitorPeriods>
  nameWithType.vb: Task(Of StatusMonitorPeriods)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.StatusMonitorPeriods)
  name.vb: Task(Of StatusMonitorPeriods)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.StatusMonitorPeriods
    name: StatusMonitorPeriods
    nameWithType: StatusMonitorPeriods
    fullName: SuperOffice.CRM.Services.StatusMonitorPeriods
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.StatusMonitorPeriods
    name: StatusMonitorPeriods
    nameWithType: StatusMonitorPeriods
    fullName: SuperOffice.CRM.Services.StatusMonitorPeriods
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync
  isExternal: true
  name: SaveStatusMonitorPeriodsAsync
  nameWithType: ISaintAgent.SaveStatusMonitorPeriodsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.SaveStatusMonitorPeriodsAsync
- uid: SuperOffice.CRM.Services.StatusMonitorPeriods
  commentId: T:SuperOffice.CRM.Services.StatusMonitorPeriods
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: StatusMonitorPeriods
  nameWithType: StatusMonitorPeriods
  fullName: SuperOffice.CRM.Services.StatusMonitorPeriods
- uid: SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync
  isExternal: true
  name: GetSaintConfigurationsAsync
  nameWithType: ISaintAgent.GetSaintConfigurationsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetSaintConfigurationsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.SaintConfiguration[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SaintConfiguration[]>
  nameWithType: Task<SaintConfiguration[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.SaintConfiguration[]>
  nameWithType.vb: Task(Of SaintConfiguration())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.SaintConfiguration())
  name.vb: Task(Of SaintConfiguration())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.SaintConfiguration
    name: SaintConfiguration
    nameWithType: SaintConfiguration
    fullName: SuperOffice.CRM.Services.SaintConfiguration
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.SaintConfiguration
    name: SaintConfiguration
    nameWithType: SaintConfiguration
    fullName: SuperOffice.CRM.Services.SaintConfiguration
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync
  isExternal: true
  name: GetStatusMonitorsAsync
  nameWithType: ISaintAgent.GetStatusMonitorsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorsAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.StatusMonitor[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<StatusMonitor[]>
  nameWithType: Task<StatusMonitor[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.StatusMonitor[]>
  nameWithType.vb: Task(Of StatusMonitor())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.StatusMonitor())
  name.vb: Task(Of StatusMonitor())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.StatusMonitor
    name: StatusMonitor
    nameWithType: StatusMonitor
    fullName: SuperOffice.CRM.Services.StatusMonitor
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.StatusMonitor
    name: StatusMonitor
    nameWithType: StatusMonitor
    fullName: SuperOffice.CRM.Services.StatusMonitor
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync
  isExternal: true
  name: GetStatusMonitorAsync
  nameWithType: ISaintAgent.GetStatusMonitorAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorAsync
- uid: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync
  isExternal: true
  name: RegenerateStatusMonitorsAsync
  nameWithType: ISaintAgent.RegenerateStatusMonitorsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorsAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.BatchTaskInfo}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.BatchTaskInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<BatchTaskInfo>
  nameWithType: Task<BatchTaskInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.BatchTaskInfo>
  nameWithType.vb: Task(Of BatchTaskInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.BatchTaskInfo)
  name.vb: Task(Of BatchTaskInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.BatchTaskInfo
    name: BatchTaskInfo
    nameWithType: BatchTaskInfo
    fullName: SuperOffice.CRM.Services.BatchTaskInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.BatchTaskInfo
    name: BatchTaskInfo
    nameWithType: BatchTaskInfo
    fullName: SuperOffice.CRM.Services.BatchTaskInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync
  isExternal: true
  name: SetRankOnStatusMonitorsAsync
  nameWithType: ISaintAgent.SetRankOnStatusMonitorsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.SetRankOnStatusMonitorsAsync
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync
  isExternal: true
  name: RegenerateStatusMonitorAsync
  nameWithType: ISaintAgent.RegenerateStatusMonitorAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.RegenerateStatusMonitorAsync
- uid: SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync
  isExternal: true
  name: RegenerateCountersAsync
  nameWithType: ISaintAgent.RegenerateCountersAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.RegenerateCountersAsync
- uid: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync
  isExternal: true
  name: GetStatusMonitorPeriodsAsync
  nameWithType: ISaintAgent.GetStatusMonitorPeriodsAsync
  fullName: SuperOffice.CRM.Services.ISaintAgent.GetStatusMonitorPeriodsAsync
