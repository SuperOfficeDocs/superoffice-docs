### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.ITicketAgent
  commentId: T:SuperOffice.CRM.Services.ITicketAgent
  id: ITicketAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync(System.Int32[],System.String[],System.String[],System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync(SuperOffice.CRM.Services.TicketBatchReplyData,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync(System.Int32,SuperOffice.Data.TicketPriorityEscalateAction,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync(System.Int32,System.Int32[],SuperOffice.Data.NotifyType,SuperOffice.Data.NotifyChannel,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync(System.Int32,SuperOffice.Data.ImageEmbedType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync(SuperOffice.CRM.Services.TicketEntity,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync(System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync(System.String,SuperOffice.Data.HtmlSanitizerOptions,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync(SuperOffice.CRM.Services.AttachmentEntity,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync(SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketEntity,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Int32[],System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync(System.Int32,System.String[],System.String[],System.String[],System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync(System.Int32,System.Int32,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync(System.Int32,SuperOffice.Data.TicketReadStatus,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync(System.Int32,System.Int32,System.DateTime,System.Int32[],SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync(SuperOffice.CRM.Services.TicketMessageEntity,SuperOffice.CRM.Services.TicketEntity,SuperOffice.CRM.Services.TicketMessageEntity,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync(System.Int32[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync(System.Int32,System.IO.Stream,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync(System.Int32[],System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ITicketAgent
  nameWithType: ITicketAgent
  fullName: SuperOffice.CRM.Services.ITicketAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the Ticket Agent\nAgent used for Ticket functions\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (TicketAgent agent = new TicketAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("Ticket Agent", "Interface for the Ticket Agent. Agent used for Ticket functions")]

      public interface ITicketAgent : IAgent
    content.vb: >-
      <Agent("Ticket Agent", "Interface for the Ticket Agent. Agent used for Ticket functions")>

      Public Interface ITicketAgent
          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Ticket Agent
    - type: System.String
      value: Interface for the Ticket Agent. Agent used for Ticket functions
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync(System.Threading.CancellationToken)
  id: CreateDefaultAttachmentEntityAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultAttachmentEntityAsync(CancellationToken)
  nameWithType: ITicketAgent.CreateDefaultAttachmentEntityAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new AttachmentEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<AttachmentEntity> CreateDefaultAttachmentEntityAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity}
      description: New AttachmentEntity with default values
    content.vb: Function CreateDefaultAttachmentEntityAsync(cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync(SuperOffice.CRM.Services.AttachmentEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync(SuperOffice.CRM.Services.AttachmentEntity,System.Threading.CancellationToken)
  id: SaveAttachmentEntityAsync(SuperOffice.CRM.Services.AttachmentEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SaveAttachmentEntityAsync(AttachmentEntity, CancellationToken)
  nameWithType: ITicketAgent.SaveAttachmentEntityAsync(AttachmentEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync(SuperOffice.CRM.Services.AttachmentEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing AttachmentEntity or creates a new AttachmentEntity if the id parameter is empty\n"
  syntax:
    content: Task<AttachmentEntity> SaveAttachmentEntityAsync(AttachmentEntity attachmentEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentEntity
      type: SuperOffice.CRM.Services.AttachmentEntity
      description: The AttachmentEntity that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity}
      description: New or updated AttachmentEntity
    content.vb: Function SaveAttachmentEntityAsync(attachmentEntity As AttachmentEntity, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync(System.Threading.CancellationToken)
  id: CreateDefaultTicketEntityAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultTicketEntityAsync(CancellationToken)
  nameWithType: ITicketAgent.CreateDefaultTicketEntityAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new TicketEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<TicketEntity> CreateDefaultTicketEntityAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: New TicketEntity with default values
    content.vb: Function CreateDefaultTicketEntityAsync(cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync(SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync(SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  id: SaveTicketEntityAsync(SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SaveTicketEntityAsync(TicketEntity, CancellationToken)
  nameWithType: ITicketAgent.SaveTicketEntityAsync(TicketEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync(SuperOffice.CRM.Services.TicketEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing TicketEntity or creates a new TicketEntity if the id parameter is empty\n"
  syntax:
    content: Task<TicketEntity> SaveTicketEntityAsync(TicketEntity ticketEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntity
      type: SuperOffice.CRM.Services.TicketEntity
      description: The TicketEntity that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: New or updated TicketEntity
    content.vb: Function SaveTicketEntityAsync(ticketEntity As TicketEntity, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync(System.Threading.CancellationToken)
  id: CreateDefaultTicketMessageEntityAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultTicketMessageEntityAsync(CancellationToken)
  nameWithType: ITicketAgent.CreateDefaultTicketMessageEntityAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new TicketMessageEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<TicketMessageEntity> CreateDefaultTicketMessageEntityAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: New TicketMessageEntity with default values
    content.vb: Function CreateDefaultTicketMessageEntityAsync(cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Threading.CancellationToken)
  id: SaveTicketMessageEntityAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SaveTicketMessageEntityAsync(TicketMessageEntity, CancellationToken)
  nameWithType: ITicketAgent.SaveTicketMessageEntityAsync(TicketMessageEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync(SuperOffice.CRM.Services.TicketMessageEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing TicketMessageEntity or creates a new TicketMessageEntity if the id parameter is empty\n"
  syntax:
    content: Task<TicketMessageEntity> SaveTicketMessageEntityAsync(TicketMessageEntity ticketMessageEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntity
      type: SuperOffice.CRM.Services.TicketMessageEntity
      description: The TicketMessageEntity that is saved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: New or updated TicketMessageEntity
    content.vb: Function SaveTicketMessageEntityAsync(ticketMessageEntity As TicketMessageEntity, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: GetAttachmentEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetAttachmentEntityAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetAttachmentEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a AttachmentEntity object.                        \n"
  syntax:
    content: Task<AttachmentEntity> GetAttachmentEntityAsync(int attachmentEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentEntityId
      type: System.Int32
      description: The identifier of the AttachmentEntity object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity}
      description: AttachmentEntity
    content.vb: Function GetAttachmentEntityAsync(attachmentEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync(System.Int32,System.Threading.CancellationToken)
  id: CopyFromCRMDocumentAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CopyFromCRMDocumentAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.CopyFromCRMDocumentAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCopy CRM document to an attachment\n"
  syntax:
    content: Task<AttachmentEntity> CopyFromCRMDocumentAsync(int documentId, CancellationToken cancellationToken = null)
    parameters:
    - id: documentId
      type: System.Int32
      description: The id of the document to copy to an attachment
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity}
    content.vb: Function CopyFromCRMDocumentAsync(documentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: CopyToTempFileAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CopyToTempFileAsync(String, Int32, CancellationToken)
  nameWithType: ITicketAgent.CopyToTempFileAsync(String, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCopy ticket attachment to temporary file. Needed for existing document dialog compatibility\n"
  syntax:
    content: Task<string> CopyToTempFileAsync(string filename, int attachmentId, CancellationToken cancellationToken = null)
    parameters:
    - id: filename
      type: System.String
      description: Preferred filename
    - id: attachmentId
      type: System.Int32
      description: The id of the attachment to copy
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Temporary document filename
    content.vb: Function CopyToTempFileAsync(filename As String, attachmentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync(System.Int32,System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync(System.Int32,System.IO.Stream,System.Threading.CancellationToken)
  id: UploadAttachmentAsync(System.Int32,System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: UploadAttachmentAsync(Int32, Stream, CancellationToken)
  nameWithType: ITicketAgent.UploadAttachmentAsync(Int32, Stream, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync(System.Int32, System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpload the content for an attachment\n"
  syntax:
    content: Task UploadAttachmentAsync(int attachmentId, Stream content, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentId
      type: System.Int32
      description: The id of the attachment row, for which to attach the upload data
    - id: content
      type: System.IO.Stream
      description: A stream to the content to be uploaded
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function UploadAttachmentAsync(attachmentId As Integer, content As Stream, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  id: GetAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetAttachmentStreamAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetAttachmentStreamAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet the content of an attachment\n"
  syntax:
    content: Task<Stream> GetAttachmentStreamAsync(int attachmentId, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentId
      type: System.Int32
      description: The id of the attachment to retrieve
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: A stream to the attachment content
    content.vb: Function GetAttachmentStreamAsync(attachmentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync(System.Int32,System.Threading.CancellationToken)
  id: GetTicketAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetTicketAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a Ticket object.                        \n"
  syntax:
    content: Task<Ticket> GetTicketAsync(int ticketId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The identifier of the Ticket object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Ticket}
      description: Ticket
    content.vb: Function GetTicketAsync(ticketId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Ticket)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetTicketsAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketsAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.GetTicketsAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet multiple tickets\n"
  syntax:
    content: Task<Ticket[]> GetTicketsAsync(int[] ticketIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketIds
      type: System.Int32[]
      description: The ids of tickets to get
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Ticket[]}
      description: Returns array of tickets in same order as input ids
    content.vb: Function GetTicketsAsync(ticketIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Ticket())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync*
  nameWithType.vb: ITicketAgent.GetTicketsAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: GetTicketsAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: GetTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketEntityAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetTicketEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a TicketEntity object.                        \n"
  syntax:
    content: Task<TicketEntity> GetTicketEntityAsync(int ticketEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The identifier of the TicketEntity object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: TicketEntity
    content.vb: Function GetTicketEntityAsync(ticketEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync(System.Int32,System.Threading.CancellationToken)
  id: GetForRmUiAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetForRmUiAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetForRmUiAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a ticket entity, adapted to the specific needs of the Request Management UI. WARNING: This endpoint is not guaranteed to be stable/compatible between versions\n"
  syntax:
    content: Task<TicketEntity> GetForRmUiAsync(int ticketId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: Primary key of ticket to fetch
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The ticket entity. Information is filtered/adapted to the current needs of the UI
    content.vb: Function GetForRmUiAsync(ticketId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: DeleteTicketEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: DeleteTicketEntityAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.DeleteTicketEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a ticket\n"
  syntax:
    content: Task DeleteTicketEntityAsync(int ticketEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The ticket to delete
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function DeleteTicketEntityAsync(ticketEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync(System.Int32,System.Threading.CancellationToken)
  id: NotifyNewTicketAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: NotifyNewTicketAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.NotifyNewTicketAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nNotify user agents about the creation of a new ticket\n"
  syntax:
    content: Task NotifyNewTicketAsync(int ticketEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The id of the ticket to notify about
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function NotifyNewTicketAsync(ticketEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  id: NotifyNewTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: NotifyNewTicketMessageAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.NotifyNewTicketMessageAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nNotify user agents about the creation of a new message on a ticket\n"
  syntax:
    content: Task NotifyNewTicketMessageAsync(int ticketEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The id of the ticket to notify about
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function NotifyNewTicketMessageAsync(ticketEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync(System.Int32,System.Threading.CancellationToken)
  id: GetTicketAttachmentsAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketAttachmentsAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetTicketAttachmentsAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet attachment infos for all attachments connected to messages in specified ticket\n"
  syntax:
    content: Task<AttachmentEntity[]> GetTicketAttachmentsAsync(int ticketEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The id of the ticket to get attachment infos from
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity[]}
      description: An array containing attachment info objects for all the attachments
    content.vb: Function GetTicketAttachmentsAsync(ticketEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync(System.Int32[],System.Threading.CancellationToken)
  id: ValidateAttachmentsAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: ValidateAttachmentsAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.ValidateAttachmentsAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck attachments, return validation result for each item\n"
  syntax:
    content: Task<AttachmentValidationResult[]> ValidateAttachmentsAsync(int[] attachmentIds, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentIds
      type: System.Int32[]
      description: The IDs of the attachments to validate
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentValidationResult[]}
      description: Validation result
    content.vb: Function ValidateAttachmentsAsync(attachmentIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentValidationResult())
  overload: SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync*
  nameWithType.vb: ITicketAgent.ValidateAttachmentsAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: ValidateAttachmentsAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync(System.Int32,SuperOffice.Data.TicketReadStatus,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync(System.Int32,SuperOffice.Data.TicketReadStatus,System.Boolean,System.Threading.CancellationToken)
  id: SetTicketReadByOwnerAsync(System.Int32,SuperOffice.Data.TicketReadStatus,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SetTicketReadByOwnerAsync(Int32, TicketReadStatus, Boolean, CancellationToken)
  nameWithType: ITicketAgent.SetTicketReadByOwnerAsync(Int32, TicketReadStatus, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync(System.Int32, SuperOffice.Data.TicketReadStatus, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet the ReadByOwner status for a ticket. It will only have an effect if the calling user is the same as the owner of the ticket\n"
  syntax:
    content: Task<TicketEntity> SetTicketReadByOwnerAsync(int ticketEntityId, TicketReadStatus readStatus, bool checkEscalating, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The id of the ticket to set
    - id: readStatus
      type: SuperOffice.Data.TicketReadStatus
      description: The read status to set. See the enum for explanation of the different colors. Setting Unknown does nothing
    - id: checkEscalating
      type: System.Boolean
      description: If true, then the escalation system will be called and executed when setting the ReadByOwner
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The ticket entity after setting the ReadByOwner
    content.vb: Function SetTicketReadByOwnerAsync(ticketEntityId As Integer, readStatus As TicketReadStatus, checkEscalating As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketEntity,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketEntity,System.Boolean,System.Threading.CancellationToken)
  id: SaveTicketEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketEntity,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SaveTicketEntityWithNotifyAsync(TicketEntity, Boolean, CancellationToken)
  nameWithType: ITicketAgent.SaveTicketEntityWithNotifyAsync(TicketEntity, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketEntity, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves a ticket and performs any user notifications\n"
  syntax:
    content: Task<TicketEntity> SaveTicketEntityWithNotifyAsync(TicketEntity newEntity, bool notify, CancellationToken cancellationToken = null)
    parameters:
    - id: newEntity
      type: SuperOffice.CRM.Services.TicketEntity
      description: The ticket to save
    - id: notify
      type: System.Boolean
      description: If true, then the notifications will be sent
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The newly saved entity
    content.vb: Function SaveTicketEntityWithNotifyAsync(newEntity As TicketEntity, notify As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync(System.Threading.CancellationToken)
  id: GetNextInQueueAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetNextInQueueAsync(CancellationToken)
  nameWithType: ITicketAgent.GetNextInQueueAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nAssign a ticket to the caller based on intelligent queue system\n"
  syntax:
    content: Task<TicketEntity> GetNextInQueueAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The ticket entity after assigning it to the caller
    content.vb: Function GetNextInQueueAsync(cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync(System.Int32,System.Threading.CancellationToken)
  id: ProcessTicketWhenReadAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: ProcessTicketWhenReadAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.ProcessTicketWhenReadAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nWhen a user view/read a ticket, a number of action should be performed: set read status, escalation handling, remove notifications, etc. Which actions will be performed depends on owner, caller and configuration\n"
  syntax:
    content: Task<TicketEntity> ProcessTicketWhenReadAsync(int ticketEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketEntityId
      type: System.Int32
      description: The id of the ticket to mark as read
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The ticket entity after marking it as read
    content.vb: Function ProcessTicketWhenReadAsync(ticketEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync(System.Int32,System.Int32,System.DateTime,System.Int32[],SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync(System.Int32,System.Int32,System.DateTime,System.Int32[],SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  id: SplitTicketAsync(System.Int32,System.Int32,System.DateTime,System.Int32[],SuperOffice.CRM.Services.TicketEntity,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SplitTicketAsync(Int32, Int32, DateTime, Int32[], TicketEntity, CancellationToken)
  nameWithType: ITicketAgent.SplitTicketAsync(Int32, Int32, DateTime, Int32[], TicketEntity, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync(System.Int32, System.Int32, System.DateTime, System.Int32[], SuperOffice.CRM.Services.TicketEntity, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave new ticket and move/copy data from existing ticket in a single request. Specified messages will be moved.\n"
  syntax:
    content: Task<TicketEntity> SplitTicketAsync(int sourceTicketEntityId, int sourceTicketEntityStatusId, DateTime sourceTicketEntityActivate, int[] transferMessageIds, TicketEntity newTicketEntity, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceTicketEntityId
      type: System.Int32
      description: The id of the ticket to split
    - id: sourceTicketEntityStatusId
      type: System.Int32
      description: The id of the source ticket&apos;s status
    - id: sourceTicketEntityActivate
      type: System.DateTime
      description: The activate date of the source ticket
    - id: transferMessageIds
      type: System.Int32[]
      description: IDs of messages that should be transferred from the original ticket to the new one
    - id: newTicketEntity
      type: SuperOffice.CRM.Services.TicketEntity
      description: The new ticket to save. Includes new values for simple properties like title, category, status, etc., but not messages.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The newly created entity
    content.vb: Function SplitTicketAsync(sourceTicketEntityId As Integer, sourceTicketEntityStatusId As Integer, sourceTicketEntityActivate As DateTime, transferMessageIds As Integer(), newTicketEntity As TicketEntity, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync*
  nameWithType.vb: ITicketAgent.SplitTicketAsync(Int32, Int32, DateTime, Int32(), TicketEntity, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync(System.Int32, System.Int32, System.DateTime, System.Int32(), SuperOffice.CRM.Services.TicketEntity, System.Threading.CancellationToken)
  name.vb: SplitTicketAsync(Int32, Int32, DateTime, Int32(), TicketEntity, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync(SuperOffice.CRM.Services.TicketMessageEntity,SuperOffice.CRM.Services.TicketEntity,SuperOffice.CRM.Services.TicketMessageEntity,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync(SuperOffice.CRM.Services.TicketMessageEntity,SuperOffice.CRM.Services.TicketEntity,SuperOffice.CRM.Services.TicketMessageEntity,System.Int32[],System.Threading.CancellationToken)
  id: SplitTicketMessageAsync(SuperOffice.CRM.Services.TicketMessageEntity,SuperOffice.CRM.Services.TicketEntity,SuperOffice.CRM.Services.TicketMessageEntity,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SplitTicketMessageAsync(TicketMessageEntity, TicketEntity, TicketMessageEntity, Int32[], CancellationToken)
  nameWithType: ITicketAgent.SplitTicketMessageAsync(TicketMessageEntity, TicketEntity, TicketMessageEntity, Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync(SuperOffice.CRM.Services.TicketMessageEntity, SuperOffice.CRM.Services.TicketEntity, SuperOffice.CRM.Services.TicketMessageEntity, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate new ticket and move/copy data from existing ticket in addition update old message and save new message in a single request.\n"
  syntax:
    content: Task<TicketEntity> SplitTicketMessageAsync(TicketMessageEntity sourceTicketMessage, TicketEntity newTicketEntity, TicketMessageEntity newTicketMessage, int[] transferAttachmentsIds, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceTicketMessage
      type: SuperOffice.CRM.Services.TicketMessageEntity
      description: The message being splitted, content can be modified as part of the split.
    - id: newTicketEntity
      type: SuperOffice.CRM.Services.TicketEntity
      description: The new ticket to save. Includes new values for simple properties like title, category, status, etc., but not messages.
    - id: newTicketMessage
      type: SuperOffice.CRM.Services.TicketMessageEntity
      description: The new message to be saved
    - id: transferAttachmentsIds
      type: System.Int32[]
      description: IDs of attachments that should be transferred from the original message to the new one
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The newly created entity
    content.vb: Function SplitTicketMessageAsync(sourceTicketMessage As TicketMessageEntity, newTicketEntity As TicketEntity, newTicketMessage As TicketMessageEntity, transferAttachmentsIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync*
  nameWithType.vb: ITicketAgent.SplitTicketMessageAsync(TicketMessageEntity, TicketEntity, TicketMessageEntity, Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync(SuperOffice.CRM.Services.TicketMessageEntity, SuperOffice.CRM.Services.TicketEntity, SuperOffice.CRM.Services.TicketMessageEntity, System.Int32(), System.Threading.CancellationToken)
  name.vb: SplitTicketMessageAsync(TicketMessageEntity, TicketEntity, TicketMessageEntity, Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync(System.Int32[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync(System.Int32[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  id: UpdateTicketsReadStatusAsync(System.Int32[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: UpdateTicketsReadStatusAsync(Int32[], TicketReadStatus, CancellationToken)
  nameWithType: ITicketAgent.UpdateTicketsReadStatusAsync(Int32[], TicketReadStatus, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync(System.Int32[], SuperOffice.Data.TicketReadStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nThis method changes multiple tickets&apos; read status\n"
  syntax:
    content: Task<int[]> UpdateTicketsReadStatusAsync(int[] ticketIds, TicketReadStatus newStatus, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketIds
      type: System.Int32[]
      description: Ticket ids to be updated
    - id: newStatus
      type: SuperOffice.Data.TicketReadStatus
      description: New read status
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32[]}
      description: Updated ticket ids
    content.vb: Function UpdateTicketsReadStatusAsync(ticketIds As Integer(), newStatus As TicketReadStatus, cancellationToken As CancellationToken = Nothing) As Task(Of Integer())
  overload: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync*
  nameWithType.vb: ITicketAgent.UpdateTicketsReadStatusAsync(Int32(), TicketReadStatus, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync(System.Int32(), SuperOffice.Data.TicketReadStatus, System.Threading.CancellationToken)
  name.vb: UpdateTicketsReadStatusAsync(Int32(), TicketReadStatus, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  id: UpdateTicketsReadStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: UpdateTicketsReadStatusByProviderAsync(String, ArchiveRestrictionInfo[], TicketReadStatus, CancellationToken)
  nameWithType: ITicketAgent.UpdateTicketsReadStatusByProviderAsync(String, ArchiveRestrictionInfo[], TicketReadStatus, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync(System.String, SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], SuperOffice.Data.TicketReadStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nThis method changes multiple tickets&apos; read status\n"
  syntax:
    content: Task<int[]> UpdateTicketsReadStatusByProviderAsync(string provider, ArchiveRestrictionInfo[] restrictions, TicketReadStatus newStatus, CancellationToken cancellationToken = null)
    parameters:
    - id: provider
      type: System.String
      description: Name of the provider that returns ticket rows.
    - id: restrictions
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Query restrictions to be added to provider. Fixed providers, such as LastTicketsProvider, FavouriteTicketsProvider etc. already have mandatory restrictions setup - in such case extra restrictions will be combined, however for general use case for fixed providers you can pass an empty array and provider will return default results. For selection providers generally you should pass selectionId as a restriction.
    - id: newStatus
      type: SuperOffice.Data.TicketReadStatus
      description: New read status
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32[]}
      description: Updated ticket ids
    content.vb: Function UpdateTicketsReadStatusByProviderAsync(provider As String, restrictions As ArchiveRestrictionInfo(), newStatus As TicketReadStatus, cancellationToken As CancellationToken = Nothing) As Task(Of Integer())
  overload: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync*
  nameWithType.vb: ITicketAgent.UpdateTicketsReadStatusByProviderAsync(String, ArchiveRestrictionInfo(), TicketReadStatus, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync(System.String, SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), SuperOffice.Data.TicketReadStatus, System.Threading.CancellationToken)
  name.vb: UpdateTicketsReadStatusByProviderAsync(String, ArchiveRestrictionInfo(), TicketReadStatus, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync(SuperOffice.CRM.Services.TicketEntity,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync(SuperOffice.CRM.Services.TicketEntity,System.Int32[],System.Threading.CancellationToken)
  id: MergeTicketsAsync(SuperOffice.CRM.Services.TicketEntity,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: MergeTicketsAsync(TicketEntity, Int32[], CancellationToken)
  nameWithType: ITicketAgent.MergeTicketsAsync(TicketEntity, Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync(SuperOffice.CRM.Services.TicketEntity, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nMerge one or more tickets into one primary ticket\n"
  syntax:
    content: Task<TicketEntity> MergeTicketsAsync(TicketEntity mergedTicketEntity, int[] secondaryTicketIds, CancellationToken cancellationToken = null)
    parameters:
    - id: mergedTicketEntity
      type: SuperOffice.CRM.Services.TicketEntity
      description: Merged ticket entity
    - id: secondaryTicketIds
      type: System.Int32[]
      description: Ids of secondary tickets
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: The newly merged entity
    content.vb: Function MergeTicketsAsync(mergedTicketEntity As TicketEntity, secondaryTicketIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync*
  nameWithType.vb: ITicketAgent.MergeTicketsAsync(TicketEntity, Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync(SuperOffice.CRM.Services.TicketEntity, System.Int32(), System.Threading.CancellationToken)
  name.vb: MergeTicketsAsync(TicketEntity, Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  id: SetDeletedStatusByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SetDeletedStatusByIdsAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.SetDeletedStatusByIdsAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSets tickets&apos; status to Deleted. After a grace period these tickets will be deleted by a background job.\n"
  syntax:
    content: Task<int[]> SetDeletedStatusByIdsAsync(int[] ticketIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketIds
      type: System.Int32[]
      description: Ids of tickets to be set for deletion.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32[]}
      description: Ids of tickets set for deletion.
    content.vb: Function SetDeletedStatusByIdsAsync(ticketIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Integer())
  overload: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync*
  nameWithType.vb: ITicketAgent.SetDeletedStatusByIdsAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: SetDeletedStatusByIdsAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.Threading.CancellationToken)
  id: SetDeletedStatusByProviderAsync(System.String,SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SetDeletedStatusByProviderAsync(String, ArchiveRestrictionInfo[], CancellationToken)
  nameWithType: ITicketAgent.SetDeletedStatusByProviderAsync(String, ArchiveRestrictionInfo[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync(System.String, SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSets tickets&apos; status to Deleted. After a grace period these tickets will be deleted by a background job.\n"
  syntax:
    content: Task<int[]> SetDeletedStatusByProviderAsync(string providerName, ArchiveRestrictionInfo[] restrictions, CancellationToken cancellationToken = null)
    parameters:
    - id: providerName
      type: System.String
      description: Name of the provider that returns ticket rows.
    - id: restrictions
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Query restrictions to be added to provider. Fixed providers, such as LastTicketsProvider, FavouriteTicketsProvider etc. already have mandatory restrictions setup - in such case extra restrictions will be combined, however for general use case for fixed providers you can pass an empty array and provider will return default results. For selection providers generally you should pass selectionId as a restriction.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32[]}
      description: Ids of tickets set for deletion.
    content.vb: Function SetDeletedStatusByProviderAsync(providerName As String, restrictions As ArchiveRestrictionInfo(), cancellationToken As CancellationToken = Nothing) As Task(Of Integer())
  overload: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync*
  nameWithType.vb: ITicketAgent.SetDeletedStatusByProviderAsync(String, ArchiveRestrictionInfo(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync(System.String, SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo(), System.Threading.CancellationToken)
  name.vb: SetDeletedStatusByProviderAsync(String, ArchiveRestrictionInfo(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  id: UndeleteByIdsAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: UndeleteByIdsAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.UndeleteByIdsAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRestores deleted tickets by their ids. Status is set to a default open status defined in Registry table\n"
  syntax:
    content: Task UndeleteByIdsAsync(int[] ticketIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketIds
      type: System.Int32[]
      description: Ids of tickets to be restored.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function UndeleteByIdsAsync(ticketIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync*
  nameWithType.vb: ITicketAgent.UndeleteByIdsAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: UndeleteByIdsAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync(System.Int32,System.Threading.CancellationToken)
  id: ResolveTicketIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: ResolveTicketIdAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.ResolveTicketIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nTicket can be connected (merged) to another ticket. This method traverses through its connection(s) and returns proper ticketId\n"
  syntax:
    content: Task<int> ResolveTicketIdAsync(int ticketId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: Potentially correct ticketId
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Correct ticketId. Returns 0 in case ticket does not exists
    content.vb: Function ResolveTicketIdAsync(ticketId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync(System.Int32[],System.String[],System.String[],System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync(System.Int32[],System.String[],System.String[],System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  id: BatchForwardAsync(System.Int32[],System.String[],System.String[],System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: BatchForwardAsync(Int32[], String[], String[], String[], String, Boolean, CancellationToken)
  nameWithType: ITicketAgent.BatchForwardAsync(Int32[], String[], String[], String[], String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync(System.Int32[], System.String[], System.String[], System.String[], System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nForwards selected tickets to specified recipients. This method starts a batch task.\n"
  syntax:
    content: Task<int> BatchForwardAsync(int[] ticketIds, string[] to, string[] cc, string[] bcc, string comment, bool closeTicket, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketIds
      type: System.Int32[]
      description: Ids of tickets to be forwarded.
    - id: to
      type: System.String[]
      description: The To-recipients. Each recipient must be in correct mailbox format (john@example.com or John Doe &lt;john@example.com>).
    - id: cc
      type: System.String[]
      description: The Cc-recipients. Each recipient must be in correct mailbox format (john@example.com or John Doe &lt;john@example.com>).
    - id: bcc
      type: System.String[]
      description: The Bcc-recipients. Each recipient must be in correct mailbox format (john@example.com or John Doe &lt;john@example.com>).
    - id: comment
      type: System.String
      description: Comment will be included before ticket messages. Might be empty
    - id: closeTicket
      type: System.Boolean
      description: If true, ticket will be closed after forwarding
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ID of the new batch task.
    content.vb: Function BatchForwardAsync(ticketIds As Integer(), to As String(), cc As String(), bcc As String(), comment As String, closeTicket As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync*
  nameWithType.vb: ITicketAgent.BatchForwardAsync(Int32(), String(), String(), String(), String, Boolean, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync(System.Int32(), System.String(), System.String(), System.String(), System.String, System.Boolean, System.Threading.CancellationToken)
  name.vb: BatchForwardAsync(Int32(), String(), String(), String(), String, Boolean, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync(SuperOffice.CRM.Services.TicketBatchReplyData,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync(SuperOffice.CRM.Services.TicketBatchReplyData,System.Threading.CancellationToken)
  id: BatchReplyAsync(SuperOffice.CRM.Services.TicketBatchReplyData,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: BatchReplyAsync(TicketBatchReplyData, CancellationToken)
  nameWithType: ITicketAgent.BatchReplyAsync(TicketBatchReplyData, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync(SuperOffice.CRM.Services.TicketBatchReplyData, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReplies to the specified tickets. This method starts a batch task.\n"
  syntax:
    content: Task<int> BatchReplyAsync(TicketBatchReplyData batchReplyData, CancellationToken cancellationToken = null)
    parameters:
    - id: batchReplyData
      type: SuperOffice.CRM.Services.TicketBatchReplyData
      description: All data needed to initiate a mass ticket reply sending.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ID of the new batch task.
    content.vb: Function BatchReplyAsync(batchReplyData As TicketBatchReplyData, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync(System.Int32[],System.Threading.CancellationToken)
  id: ClearNotifyAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: ClearNotifyAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.ClearNotifyAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nClear notification status for one or more tickets.\n"
  syntax:
    content: Task ClearNotifyAsync(int[] ids, CancellationToken cancellationToken = null)
    parameters:
    - id: ids
      type: System.Int32[]
      description: List of notify IDs.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function ClearNotifyAsync(ids As Integer(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync*
  nameWithType.vb: ITicketAgent.ClearNotifyAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: ClearNotifyAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  id: GetTicketMessageEntitiesAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketMessageEntitiesAsync(Int32, Int32[], CancellationToken)
  nameWithType: ITicketAgent.GetTicketMessageEntitiesAsync(Int32, Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync(System.Int32, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet ticket message entities with attachment info for given ticket\n"
  syntax:
    content: Task<TicketMessageEntity[]> GetTicketMessageEntitiesAsync(int ticketId, int[] messageIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of the ticket to get message entities from
    - id: messageIds
      type: System.Int32[]
      description: Optional ids of message entities to get. If not provided, all ticket message entities will be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity[]}
      description: An array containing ticket message entities
    content.vb: Function GetTicketMessageEntitiesAsync(ticketId As Integer, messageIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync*
  nameWithType.vb: ITicketAgent.GetTicketMessageEntitiesAsync(Int32, Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync(System.Int32, System.Int32(), System.Threading.CancellationToken)
  name.vb: GetTicketMessageEntitiesAsync(Int32, Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  id: CreateDefaultForTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultForTicketTypeAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.CreateDefaultForTicketTypeAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate default ticket entity for particular TicketType\n"
  syntax:
    content: Task<TicketEntity> CreateDefaultForTicketTypeAsync(int ticketTypeId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketTypeId
      type: System.Int32
      description: ID of ticket type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
      description: Default ticket entity
    content.vb: Function CreateDefaultForTicketTypeAsync(ticketTypeId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync(System.Int32,SuperOffice.Data.TicketPriorityEscalateAction,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync(System.Int32,SuperOffice.Data.TicketPriorityEscalateAction,System.Threading.CancellationToken)
  id: DoEscalatingAsync(System.Int32,SuperOffice.Data.TicketPriorityEscalateAction,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: DoEscalatingAsync(Int32, TicketPriorityEscalateAction, CancellationToken)
  nameWithType: ITicketAgent.DoEscalatingAsync(Int32, TicketPriorityEscalateAction, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync(System.Int32, SuperOffice.Data.TicketPriorityEscalateAction, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChecks if the ticket should change its alert level based on the priority and action. If it is to change, the alert level and alert timeout for the ticket will be updated.\n"
  syntax:
    content: Task DoEscalatingAsync(int ticketId, TicketPriorityEscalateAction action, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of ticket
    - id: action
      type: SuperOffice.Data.TicketPriorityEscalateAction
      description: The action to use when calculating the escalation
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function DoEscalatingAsync(ticketId As Integer, action As TicketPriorityEscalateAction, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync(System.Int32,System.Int32[],SuperOffice.Data.NotifyType,SuperOffice.Data.NotifyChannel,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync(System.Int32,System.Int32[],SuperOffice.Data.NotifyType,SuperOffice.Data.NotifyChannel,System.Threading.CancellationToken)
  id: GetHotlistEjUsersAsync(System.Int32,System.Int32[],SuperOffice.Data.NotifyType,SuperOffice.Data.NotifyChannel,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetHotlistEjUsersAsync(Int32, Int32[], NotifyType, NotifyChannel, CancellationToken)
  nameWithType: ITicketAgent.GetHotlistEjUsersAsync(Int32, Int32[], NotifyType, NotifyChannel, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync(System.Int32, System.Int32[], SuperOffice.Data.NotifyType, SuperOffice.Data.NotifyChannel, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list of ej_user ids who should receive hotlist notification based on request and notification type\n"
  syntax:
    content: Task<int[]> GetHotlistEjUsersAsync(int ticketId, int[] skipAssociateIds, NotifyType notifyType, NotifyChannel channel, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of the ticket
    - id: skipAssociateIds
      type: System.Int32[]
      description: A list of associate ids to skip when calculating whom to get the notification
    - id: notifyType
      type: SuperOffice.Data.NotifyType
      description: The notification type we want to check for
    - id: channel
      type: SuperOffice.Data.NotifyChannel
      description: The channel which we should check for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32[]}
      description: List of matching ej_user ids
    content.vb: Function GetHotlistEjUsersAsync(ticketId As Integer, skipAssociateIds As Integer(), notifyType As NotifyType, channel As NotifyChannel, cancellationToken As CancellationToken = Nothing) As Task(Of Integer())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync*
  nameWithType.vb: ITicketAgent.GetHotlistEjUsersAsync(Int32, Int32(), NotifyType, NotifyChannel, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync(System.Int32, System.Int32(), SuperOffice.Data.NotifyType, SuperOffice.Data.NotifyChannel, System.Threading.CancellationToken)
  name.vb: GetHotlistEjUsersAsync(Int32, Int32(), NotifyType, NotifyChannel, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  id: GetTicketMessageAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketMessageAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetTicketMessageAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a TicketMessage object.                        \n"
  syntax:
    content: Task<TicketMessage> GetTicketMessageAsync(int ticketMessageId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageId
      type: System.Int32
      description: The identifier of the TicketMessage object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessage}
      description: TicketMessage
    content.vb: Function GetTicketMessageAsync(ticketMessageId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessage)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: GetTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketMessageEntityAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetTicketMessageEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a TicketMessageEntity object.                        \n"
  syntax:
    content: Task<TicketMessageEntity> GetTicketMessageEntityAsync(int ticketMessageEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The identifier of the TicketMessageEntity object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: TicketMessageEntity
    content.vb: Function GetTicketMessageEntityAsync(ticketMessageEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  id: DeleteTicketMessageEntityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: DeleteTicketMessageEntityAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.DeleteTicketMessageEntityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a ticket message\n"
  syntax:
    content: Task DeleteTicketMessageEntityAsync(int ticketMessageEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The ticket message to delete
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function DeleteTicketMessageEntityAsync(ticketMessageEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync(System.String,System.Threading.CancellationToken)
  id: SanitizeMailContentAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SanitizeMailContentAsync(String, CancellationToken)
  nameWithType: ITicketAgent.SanitizeMailContentAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove harmful HTML tags and attributes from an email\n"
  syntax:
    content: Task<string> SanitizeMailContentAsync(string content, CancellationToken cancellationToken = null)
    parameters:
    - id: content
      type: System.String
      description: The email content to sanitize
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The sanitized email content
    content.vb: Function SanitizeMailContentAsync(content As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync(System.String,SuperOffice.Data.HtmlSanitizerOptions,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync(System.String,SuperOffice.Data.HtmlSanitizerOptions,System.Threading.CancellationToken)
  id: SanitizeMailContentWithOptionsAsync(System.String,SuperOffice.Data.HtmlSanitizerOptions,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SanitizeMailContentWithOptionsAsync(String, HtmlSanitizerOptions, CancellationToken)
  nameWithType: ITicketAgent.SanitizeMailContentWithOptionsAsync(String, HtmlSanitizerOptions, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync(System.String, SuperOffice.Data.HtmlSanitizerOptions, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove harmful HTML tags and attributes from an email, using specified options\n"
  syntax:
    content: Task<string> SanitizeMailContentWithOptionsAsync(string content, HtmlSanitizerOptions options, CancellationToken cancellationToken = null)
    parameters:
    - id: content
      type: System.String
      description: The email content to sanitize
    - id: options
      type: SuperOffice.Data.HtmlSanitizerOptions
      description: The options for the sanitizer engine
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The sanitized email content
    content.vb: Function SanitizeMailContentWithOptionsAsync(content As String, options As HtmlSanitizerOptions, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync(System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync(System.String[],System.Threading.CancellationToken)
  id: SanitizeMailContentsAsync(System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SanitizeMailContentsAsync(String[], CancellationToken)
  nameWithType: ITicketAgent.SanitizeMailContentsAsync(String[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync(System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove harmful HTML tags and attributes from an email\n"
  syntax:
    content: Task<string[]> SanitizeMailContentsAsync(string[] contents, CancellationToken cancellationToken = null)
    parameters:
    - id: contents
      type: System.String[]
      description: The email contents to sanitize
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: The sanitized email contents
    content.vb: Function SanitizeMailContentsAsync(contents As String(), cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync*
  nameWithType.vb: ITicketAgent.SanitizeMailContentsAsync(String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync(System.String(), System.Threading.CancellationToken)
  name.vb: SanitizeMailContentsAsync(String(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync(System.String,System.Threading.CancellationToken)
  id: Html2TextAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: Html2TextAsync(String, CancellationToken)
  nameWithType: ITicketAgent.Html2TextAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate a plain text version of the html, suitable for email\n"
  syntax:
    content: Task<string> Html2TextAsync(string content, CancellationToken cancellationToken = null)
    parameters:
    - id: content
      type: System.String
      description: The html version
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The plain text version
    content.vb: Function Html2TextAsync(content As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync(System.Int32,System.Threading.CancellationToken)
  id: GetAttachmentInfoAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetAttachmentInfoAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetAttachmentInfoAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list with meta data for all attached attachments\n"
  syntax:
    content: Task<AttachmentEntity[]> GetAttachmentInfoAsync(int ticketMessageEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message to get attachment infos for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity[]}
      description: An array with AttachmentEntity objects, describing each attachment
    content.vb: Function GetAttachmentInfoAsync(ticketMessageEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync(System.Int32,System.Threading.CancellationToken)
  id: GetAttachmentInfoNonInlineAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetAttachmentInfoNonInlineAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetAttachmentInfoNonInlineAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list with meta data for all attached attachments, EXCEPT those marked as inline\n"
  syntax:
    content: Task<AttachmentEntity[]> GetAttachmentInfoNonInlineAsync(int ticketMessageEntityId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message to get attachment infos for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity[]}
      description: An array with AttachmentEntity objects, describing each attachment; those marked as INLINE will be skipped
    content.vb: Function GetAttachmentInfoNonInlineAsync(ticketMessageEntityId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentEntity())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  id: AddAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: AddAttachmentsAsync(Int32, Int32[], CancellationToken)
  nameWithType: ITicketAgent.AddAttachmentsAsync(Int32, Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync(System.Int32, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nConnect existing attachments with this TicketMessage. Can connect multiple attachments\n"
  syntax:
    content: Task AddAttachmentsAsync(int ticketMessageEntityId, int[] attachmentIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message to connect the attachments to
    - id: attachmentIds
      type: System.Int32[]
      description: An array of attachments to connect to this TicketMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAttachmentsAsync(ticketMessageEntityId As Integer, attachmentIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync*
  nameWithType.vb: ITicketAgent.AddAttachmentsAsync(Int32, Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync(System.Int32, System.Int32(), System.Threading.CancellationToken)
  name.vb: AddAttachmentsAsync(Int32, Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  id: RemoveMessageAttachmentsAsync(System.Int32,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: RemoveMessageAttachmentsAsync(Int32, Int32[], CancellationToken)
  nameWithType: ITicketAgent.RemoveMessageAttachmentsAsync(Int32, Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync(System.Int32, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemoves attachments from the message as specified in the collection of entity ids. The ids are attachment ids (attachment primary key)\n"
  syntax:
    content: Task RemoveMessageAttachmentsAsync(int ticketMessageEntityId, int[] attachmentIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message to remove attachments from
    - id: attachmentIds
      type: System.Int32[]
      description: Attachment primary keys
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function RemoveMessageAttachmentsAsync(ticketMessageEntityId As Integer, attachmentIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync*
  nameWithType.vb: ITicketAgent.RemoveMessageAttachmentsAsync(Int32, Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync(System.Int32, System.Int32(), System.Threading.CancellationToken)
  name.vb: RemoveMessageAttachmentsAsync(Int32, Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync(System.Int32,System.Threading.CancellationToken)
  id: GetAttachmentPreviewAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetAttachmentPreviewAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetAttachmentPreviewAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRetrieve an attachment from ticket message. The returned data is intended to be used for a preview. The returned data is sanitized.\n"
  syntax:
    content: Task<AttachmentPreview> GetAttachmentPreviewAsync(int attachmentId, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentId
      type: System.Int32
      description: The id of the attachment to retrieve
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentPreview}
      description: Sanitized preview version of the attachment and additional metadata, if available
    content.vb: Function GetAttachmentPreviewAsync(attachmentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AttachmentPreview)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  id: GetPreviewAttachmentStreamAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetPreviewAttachmentStreamAsync(Int32, CancellationToken)
  nameWithType: ITicketAgent.GetPreviewAttachmentStreamAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeprecated, see GetPreviewAttachment instead. Retrieve an attachment from ticket message. The returned data is intended to be used for a preview. The returned data is sanitized.\n"
  syntax:
    content: Task<DocumentPreview> GetPreviewAttachmentStreamAsync(int attachmentId, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentId
      type: System.Int32
      description: The id of the attachment to retrieve
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DocumentPreview}
      description: Sanitized preview version of the attachment
    content.vb: Function GetPreviewAttachmentStreamAsync(attachmentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of DocumentPreview)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetRfcAttachmentStreamAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetRfcAttachmentStreamAsync(Int32, Int32, CancellationToken)
  nameWithType: ITicketAgent.GetRfcAttachmentStreamAsync(Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet the content of an attachment which is part of RFC822 email attachment\n"
  syntax:
    content: Task<Stream> GetRfcAttachmentStreamAsync(int attachmentId, int position, CancellationToken cancellationToken = null)
    parameters:
    - id: attachmentId
      type: System.Int32
      description: The id of the root attachment
    - id: position
      type: System.Int32
      description: The position (index) of the attachment within the root attachment. Numbering starts from 0
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: RFC822 attachment content as a Stream
    content.vb: Function GetRfcAttachmentStreamAsync(attachmentId As Integer, position As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync(System.Int32,System.String[],System.String[],System.String[],System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync(System.Int32,System.String[],System.String[],System.String[],System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: SendTicketMessageAsync(System.Int32,System.String[],System.String[],System.String[],System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SendTicketMessageAsync(Int32, String[], String[], String[], String, Int32, String, CancellationToken)
  nameWithType: ITicketAgent.SendTicketMessageAsync(Int32, String[], String[], String[], String, Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync(System.Int32, System.String[], System.String[], System.String[], System.String, System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSend a message to recipients by email\n"
  syntax:
    content: Task SendTicketMessageAsync(int ticketMessageEntityId, string[] to, string[] cc, string[] bcc, string subject, int replyTemplateId, string gdprSource, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message to send
    - id: to
      type: System.String[]
      description: The To-recipients. Each recipient must be in correct format
    - id: cc
      type: System.String[]
      description: The Cc-recipients. Each recipient must be in correct format
    - id: bcc
      type: System.String[]
      description: The Bcc-recipients. Each recipient must be in correct format
    - id: subject
      type: System.String
      description: The subject
    - id: replyTemplateId
      type: System.Int32
      description: Optional ID of reply template to merge message with. &lt;= 0 to skip.
    - id: gdprSource
      type: System.String
      description: Obsolete
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function SendTicketMessageAsync(ticketMessageEntityId As Integer, to As String(), cc As String(), bcc As String(), subject As String, replyTemplateId As Integer, gdprSource As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync*
  nameWithType.vb: ITicketAgent.SendTicketMessageAsync(Int32, String(), String(), String(), String, Int32, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync(System.Int32, System.String(), System.String(), System.String(), System.String, System.Int32, System.String, System.Threading.CancellationToken)
  name.vb: SendTicketMessageAsync(Int32, String(), String(), String(), String, Int32, String, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync(System.Int32,System.Int32,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync(System.Int32,System.Int32,System.String[],System.Threading.CancellationToken)
  id: SendTicketMessageSmsAsync(System.Int32,System.Int32,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SendTicketMessageSmsAsync(Int32, Int32, String[], CancellationToken)
  nameWithType: ITicketAgent.SendTicketMessageSmsAsync(Int32, Int32, String[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync(System.Int32, System.Int32, System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSend a message to recipients by sms\n"
  syntax:
    content: Task SendTicketMessageSmsAsync(int ticketMessageEntityId, int replyTemplateId, string[] sms, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message to send
    - id: replyTemplateId
      type: System.Int32
      description: Optional ID of reply template to merge message with. &lt;= 0 to skip.
    - id: sms
      type: System.String[]
      description: The Sms-recipients. Each recipient must be in correct format
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function SendTicketMessageSmsAsync(ticketMessageEntityId As Integer, replyTemplateId As Integer, sms As String(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync*
  nameWithType.vb: ITicketAgent.SendTicketMessageSmsAsync(Int32, Int32, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync(System.Int32, System.Int32, System.String(), System.Threading.CancellationToken)
  name.vb: SendTicketMessageSmsAsync(Int32, Int32, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: SetTicketMessageImportantAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SetTicketMessageImportantAsync(Int32, Boolean, CancellationToken)
  nameWithType: ITicketAgent.SetTicketMessageImportantAsync(Int32, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync(System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet the important flag on or off for a ticket message\n"
  syntax:
    content: Task SetTicketMessageImportantAsync(int ticketMessageId, bool important, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageId
      type: System.Int32
      description: The id of the ticket message to set the important flag on
    - id: important
      type: System.Boolean
      description: Turn on or off the important flag
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function SetTicketMessageImportantAsync(ticketMessageId As Integer, important As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  id: CalculateMessageRecipientsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: CalculateMessageRecipientsAsync(Int32, MessageActionType, Int32, CancellationToken)
  nameWithType: ITicketAgent.CalculateMessageRecipientsAsync(Int32, MessageActionType, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync(System.Int32, SuperOffice.Data.MessageActionType, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets recipients for new message\n"
  syntax:
    content: Task<Recipient[]> CalculateMessageRecipientsAsync(int ticketId, MessageActionType actionType, int messageId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of the ticket
    - id: actionType
      type: SuperOffice.Data.MessageActionType
      description: Message action
    - id: messageId
      type: System.Int32
      description: Optional ID of message being replied. Value &lt;= 0 ignores parameter
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Recipient[]}
      description: An array with Recipient objects
    content.vb: Function CalculateMessageRecipientsAsync(ticketId As Integer, actionType As MessageActionType, messageId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Recipient())
  overload: SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Threading.CancellationToken)
  id: SaveTicketMessageEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SaveTicketMessageEntityWithNotifyAsync(TicketMessageEntity, Boolean, CancellationToken)
  nameWithType: ITicketAgent.SaveTicketMessageEntityWithNotifyAsync(TicketMessageEntity, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync(SuperOffice.CRM.Services.TicketMessageEntity, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves a ticket message and performs any user notifications\n"
  syntax:
    content: Task<TicketMessageEntity> SaveTicketMessageEntityWithNotifyAsync(TicketMessageEntity newEntity, bool notify, CancellationToken cancellationToken = null)
    parameters:
    - id: newEntity
      type: SuperOffice.CRM.Services.TicketMessageEntity
      description: The ticket message to save
    - id: notify
      type: System.Boolean
      description: If true, then the notification will be sent along with the save
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: The saved entity
    content.vb: Function SaveTicketMessageEntityWithNotifyAsync(newEntity As TicketMessageEntity, notify As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Int32[],System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Int32[],System.Boolean,System.Threading.CancellationToken)
  id: SaveTicketMessageEntityWithOptionsAsync(SuperOffice.CRM.Services.TicketMessageEntity,System.Boolean,System.Int32[],System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: SaveTicketMessageEntityWithOptionsAsync(TicketMessageEntity, Boolean, Int32[], Boolean, CancellationToken)
  nameWithType: ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(TicketMessageEntity, Boolean, Int32[], Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(SuperOffice.CRM.Services.TicketMessageEntity, System.Boolean, System.Int32[], System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves a ticket message and performs additional actions\n"
  syntax:
    content: Task<TicketMessageEntity> SaveTicketMessageEntityWithOptionsAsync(TicketMessageEntity entity, bool notify, int[] attachmentIds, bool updateRepliedAt, CancellationToken cancellationToken = null)
    parameters:
    - id: entity
      type: SuperOffice.CRM.Services.TicketMessageEntity
      description: The ticket message to save
    - id: notify
      type: System.Boolean
      description: If true, then the notification will be sent along with the save
    - id: attachmentIds
      type: System.Int32[]
      description: An array of attachments to connect to this TicketMessage
    - id: updateRepliedAt
      type: System.Boolean
      description: Updates ticket&apos;s replied_at field if needed
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: The saved entity
    content.vb: Function SaveTicketMessageEntityWithOptionsAsync(entity As TicketMessageEntity, notify As Boolean, attachmentIds As Integer(), updateRepliedAt As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync*
  nameWithType.vb: ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(TicketMessageEntity, Boolean, Int32(), Boolean, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync(SuperOffice.CRM.Services.TicketMessageEntity, System.Boolean, System.Int32(), System.Boolean, System.Threading.CancellationToken)
  name.vb: SaveTicketMessageEntityWithOptionsAsync(TicketMessageEntity, Boolean, Int32(), Boolean, CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  id: GetDefaultMessageContentAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetDefaultMessageContentAsync(Int32, MessageActionType, Int32, CancellationToken)
  nameWithType: ITicketAgent.GetDefaultMessageContentAsync(Int32, MessageActionType, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync(System.Int32, SuperOffice.Data.MessageActionType, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nObsolete, use GetDefaultMessageContentFull instead\n"
  syntax:
    content: Task<string> GetDefaultMessageContentAsync(int ticketId, MessageActionType messageActionType, int ticketMessageId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of the ticket
    - id: messageActionType
      type: SuperOffice.Data.MessageActionType
      description: 'Message action type: None/Reply/ReplyAll/Forward'
    - id: ticketMessageId
      type: System.Int32
      description: The id of the message to quote in the returned content. 0 to skip/ignore
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Sanitized HTML content
    content.vb: Function GetDefaultMessageContentAsync(ticketId As Integer, messageActionType As MessageActionType, ticketMessageId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetDefaultMessageContentFullAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetDefaultMessageContentFullAsync(Int32, MessageActionType, Int32, Int32, CancellationToken)
  nameWithType: ITicketAgent.GetDefaultMessageContentFullAsync(Int32, MessageActionType, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync(System.Int32, SuperOffice.Data.MessageActionType, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGenerate a default message content: attachments and body as sanitized HTML\n"
  syntax:
    content: Task<TicketMessageContent> GetDefaultMessageContentFullAsync(int ticketId, MessageActionType messageActionType, int ticketMessageId, int ticketTypeId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of the ticket
    - id: messageActionType
      type: SuperOffice.Data.MessageActionType
      description: 'Message action type: None/Reply/ReplyAll/Forward'
    - id: ticketMessageId
      type: System.Int32
      description: The id of the message to quote in the returned content. 0 to skip/ignore
    - id: ticketTypeId
      type: System.Int32
      description: The id of the ticket type to look for reply template. 0 to use current ticket type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageContent}
      description: Generated default message content
    content.vb: Function GetDefaultMessageContentFullAsync(ticketId As Integer, messageActionType As MessageActionType, ticketMessageId As Integer, ticketTypeId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageContent)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: GetDefaultMessageContentWithOptionsAsync(System.Int32,SuperOffice.Data.MessageActionType,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetDefaultMessageContentWithOptionsAsync(Int32, MessageActionType, Int32, Int32, Boolean, CancellationToken)
  nameWithType: ITicketAgent.GetDefaultMessageContentWithOptionsAsync(Int32, MessageActionType, Int32, Int32, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync(System.Int32, SuperOffice.Data.MessageActionType, System.Int32, System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGenerate a default message content with option to exclude signature: attachments and body as sanitized HTML\n"
  syntax:
    content: Task<TicketMessageContent> GetDefaultMessageContentWithOptionsAsync(int ticketId, MessageActionType messageActionType, int ticketMessageId, int ticketTypeId, bool excludeSignature, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketId
      type: System.Int32
      description: The id of the ticket
    - id: messageActionType
      type: SuperOffice.Data.MessageActionType
      description: 'Message action type: None/Reply/ReplyAll/Forward'
    - id: ticketMessageId
      type: System.Int32
      description: The id of the message to quote in the returned content. 0 to skip/ignore
    - id: ticketTypeId
      type: System.Int32
      description: The id of the ticket type to look for reply template. 0 to use current ticket type
    - id: excludeSignature
      type: System.Boolean
      description: Flag to exclude a signature when generating the return content
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageContent}
      description: Generated default message content
    content.vb: Function GetDefaultMessageContentWithOptionsAsync(ticketId As Integer, messageActionType As MessageActionType, ticketMessageId As Integer, ticketTypeId As Integer, excludeSignature As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageContent)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync(System.Int32,SuperOffice.Data.ImageEmbedType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync(System.Int32,SuperOffice.Data.ImageEmbedType,System.Threading.CancellationToken)
  id: GetTicketMessageWithEmbeddedDataAsync(System.Int32,SuperOffice.Data.ImageEmbedType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketMessageWithEmbeddedDataAsync(Int32, ImageEmbedType, CancellationToken)
  nameWithType: ITicketAgent.GetTicketMessageWithEmbeddedDataAsync(Int32, ImageEmbedType, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync(System.Int32, SuperOffice.Data.ImageEmbedType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a ticket message entity with posibillity to change embedded images to be represented with inline data within the HTML body. If using inline data, be sure not to save this back to the database.\n"
  syntax:
    content: Task<TicketMessageEntity> GetTicketMessageWithEmbeddedDataAsync(int id, ImageEmbedType embedImages, CancellationToken cancellationToken = null)
    parameters:
    - id: id
      type: System.Int32
      description: The id of the ticket message entity
    - id: embedImages
      type: SuperOffice.Data.ImageEmbedType
      description: 'If set to Inline, then use inline base64 data to represent the images in the HTML body. Default: Link will use link to the image.'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: The entity to get
    content.vb: Function GetTicketMessageWithEmbeddedDataAsync(id As Integer, embedImages As ImageEmbedType, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync(System.Int32[],System.Threading.CancellationToken)
  id: DeleteMessageHeadersAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: DeleteMessageHeadersAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.DeleteMessageHeadersAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemoves headers from the message as specified in the collection of entity ids. The ids are message header ids (message header primary key)\n"
  syntax:
    content: Task DeleteMessageHeadersAsync(int[] headerIds, CancellationToken cancellationToken = null)
    parameters:
    - id: headerIds
      type: System.Int32[]
      description: Message header primary keys
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function DeleteMessageHeadersAsync(headerIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync*
  nameWithType.vb: ITicketAgent.DeleteMessageHeadersAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: DeleteMessageHeadersAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: GetTicketMessageWithOptionsAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketMessageWithOptionsAsync(Int32, Boolean, CancellationToken)
  nameWithType: ITicketAgent.GetTicketMessageWithOptionsAsync(Int32, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync(System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a ticket message entity with additional options.\n"
  syntax:
    content: Task<TicketMessageEntity> GetTicketMessageWithOptionsAsync(int ticketMessageEntityId, bool includeNonInlineAttachmentsInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketMessageEntityId
      type: System.Int32
      description: The id of the ticket message entity
    - id: includeNonInlineAttachmentsInfo
      type: System.Boolean
      description: If true, then non inline attachments info will be loaded into TicketMessageEntity
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
      description: The entity to get
    content.vb: Function GetTicketMessageWithOptionsAsync(ticketMessageEntityId As Integer, includeNonInlineAttachmentsInfo As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of TicketMessageEntity)
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync*
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetTicketSummariesAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ITicketAgent
  langs:
  - csharp
  - vb
  name: GetTicketSummariesAsync(Int32[], CancellationToken)
  nameWithType: ITicketAgent.GetTicketSummariesAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet an array of summaryitem for the given tickets\n"
  syntax:
    content: Task<TicketSummaryItem[]> GetTicketSummariesAsync(int[] ticketIds, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketIds
      type: System.Int32[]
      description: The tickets to fetch summaries for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketSummaryItem[]}
      description: Summary items for the given id&apos;s, in no particular order
    content.vb: Function GetTicketSummariesAsync(ticketIds As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of TicketSummaryItem())
  overload: SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync*
  nameWithType.vb: ITicketAgent.GetTicketSummariesAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: GetTicketSummariesAsync(Int32(), CancellationToken)
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync
  isExternal: true
  name: CreateDefaultAttachmentEntityAsync
  nameWithType: ITicketAgent.CreateDefaultAttachmentEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultAttachmentEntityAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity}'
  definition: System.Threading.Tasks.Task`1
  name: Task<AttachmentEntity>
  nameWithType: Task<AttachmentEntity>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.AttachmentEntity>
  nameWithType.vb: Task(Of AttachmentEntity)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.AttachmentEntity)
  name.vb: Task(Of AttachmentEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.AttachmentEntity
    name: AttachmentEntity
    nameWithType: AttachmentEntity
    fullName: SuperOffice.CRM.Services.AttachmentEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.AttachmentEntity
    name: AttachmentEntity
    nameWithType: AttachmentEntity
    fullName: SuperOffice.CRM.Services.AttachmentEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync
  isExternal: true
  name: SaveAttachmentEntityAsync
  nameWithType: ITicketAgent.SaveAttachmentEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveAttachmentEntityAsync
- uid: SuperOffice.CRM.Services.AttachmentEntity
  commentId: T:SuperOffice.CRM.Services.AttachmentEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: AttachmentEntity
  nameWithType: AttachmentEntity
  fullName: SuperOffice.CRM.Services.AttachmentEntity
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync
  isExternal: true
  name: CreateDefaultTicketEntityAsync
  nameWithType: ITicketAgent.CreateDefaultTicketEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketEntityAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketEntity}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketEntity>
  nameWithType: Task<TicketEntity>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.TicketEntity>
  nameWithType.vb: Task(Of TicketEntity)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.TicketEntity)
  name.vb: Task(Of TicketEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.TicketEntity
    name: TicketEntity
    nameWithType: TicketEntity
    fullName: SuperOffice.CRM.Services.TicketEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.TicketEntity
    name: TicketEntity
    nameWithType: TicketEntity
    fullName: SuperOffice.CRM.Services.TicketEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync
  isExternal: true
  name: SaveTicketEntityAsync
  nameWithType: ITicketAgent.SaveTicketEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityAsync
- uid: SuperOffice.CRM.Services.TicketEntity
  commentId: T:SuperOffice.CRM.Services.TicketEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: TicketEntity
  nameWithType: TicketEntity
  fullName: SuperOffice.CRM.Services.TicketEntity
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync
  isExternal: true
  name: CreateDefaultTicketMessageEntityAsync
  nameWithType: ITicketAgent.CreateDefaultTicketMessageEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultTicketMessageEntityAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketMessageEntity>
  nameWithType: Task<TicketMessageEntity>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.TicketMessageEntity>
  nameWithType.vb: Task(Of TicketMessageEntity)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.TicketMessageEntity)
  name.vb: Task(Of TicketMessageEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.TicketMessageEntity
    name: TicketMessageEntity
    nameWithType: TicketMessageEntity
    fullName: SuperOffice.CRM.Services.TicketMessageEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.TicketMessageEntity
    name: TicketMessageEntity
    nameWithType: TicketMessageEntity
    fullName: SuperOffice.CRM.Services.TicketMessageEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync
  isExternal: true
  name: SaveTicketMessageEntityAsync
  nameWithType: ITicketAgent.SaveTicketMessageEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityAsync
- uid: SuperOffice.CRM.Services.TicketMessageEntity
  commentId: T:SuperOffice.CRM.Services.TicketMessageEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: TicketMessageEntity
  nameWithType: TicketMessageEntity
  fullName: SuperOffice.CRM.Services.TicketMessageEntity
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync
  isExternal: true
  name: GetAttachmentEntityAsync
  nameWithType: ITicketAgent.GetAttachmentEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentEntityAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync
  isExternal: true
  name: CopyFromCRMDocumentAsync
  nameWithType: ITicketAgent.CopyFromCRMDocumentAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CopyFromCRMDocumentAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync
  isExternal: true
  name: CopyToTempFileAsync
  nameWithType: ITicketAgent.CopyToTempFileAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CopyToTempFileAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync
  isExternal: true
  name: UploadAttachmentAsync
  nameWithType: ITicketAgent.UploadAttachmentAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.UploadAttachmentAsync
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync
  isExternal: true
  name: GetAttachmentStreamAsync
  nameWithType: ITicketAgent.GetAttachmentStreamAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentStreamAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: '!:System.Threading.Tasks.Task{System.IO.Stream}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync
  isExternal: true
  name: GetTicketAsync
  nameWithType: ITicketAgent.GetTicketAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Ticket}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Ticket}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Ticket>
  nameWithType: Task<Ticket>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Ticket>
  nameWithType.vb: Task(Of Ticket)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Ticket)
  name.vb: Task(Of Ticket)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Ticket
    name: Ticket
    nameWithType: Ticket
    fullName: SuperOffice.CRM.Services.Ticket
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Ticket
    name: Ticket
    nameWithType: Ticket
    fullName: SuperOffice.CRM.Services.Ticket
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync
  isExternal: true
  name: GetTicketsAsync
  nameWithType: ITicketAgent.GetTicketsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketsAsync
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Ticket[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Ticket[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Ticket[]>
  nameWithType: Task<Ticket[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Ticket[]>
  nameWithType.vb: Task(Of Ticket())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Ticket())
  name.vb: Task(Of Ticket())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Ticket
    name: Ticket
    nameWithType: Ticket
    fullName: SuperOffice.CRM.Services.Ticket
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Ticket
    name: Ticket
    nameWithType: Ticket
    fullName: SuperOffice.CRM.Services.Ticket
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync
  isExternal: true
  name: GetTicketEntityAsync
  nameWithType: ITicketAgent.GetTicketEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketEntityAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync
  isExternal: true
  name: GetForRmUiAsync
  nameWithType: ITicketAgent.GetForRmUiAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetForRmUiAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync
  isExternal: true
  name: DeleteTicketEntityAsync
  nameWithType: ITicketAgent.DeleteTicketEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketEntityAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync
  isExternal: true
  name: NotifyNewTicketAsync
  nameWithType: ITicketAgent.NotifyNewTicketAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync
  isExternal: true
  name: NotifyNewTicketMessageAsync
  nameWithType: ITicketAgent.NotifyNewTicketMessageAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.NotifyNewTicketMessageAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync
  isExternal: true
  name: GetTicketAttachmentsAsync
  nameWithType: ITicketAgent.GetTicketAttachmentsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketAttachmentsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentEntity[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<AttachmentEntity[]>
  nameWithType: Task<AttachmentEntity[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.AttachmentEntity[]>
  nameWithType.vb: Task(Of AttachmentEntity())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.AttachmentEntity())
  name.vb: Task(Of AttachmentEntity())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.AttachmentEntity
    name: AttachmentEntity
    nameWithType: AttachmentEntity
    fullName: SuperOffice.CRM.Services.AttachmentEntity
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.AttachmentEntity
    name: AttachmentEntity
    nameWithType: AttachmentEntity
    fullName: SuperOffice.CRM.Services.AttachmentEntity
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync
  isExternal: true
  name: ValidateAttachmentsAsync
  nameWithType: ITicketAgent.ValidateAttachmentsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.ValidateAttachmentsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentValidationResult[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentValidationResult[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<AttachmentValidationResult[]>
  nameWithType: Task<AttachmentValidationResult[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.AttachmentValidationResult[]>
  nameWithType.vb: Task(Of AttachmentValidationResult())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.AttachmentValidationResult())
  name.vb: Task(Of AttachmentValidationResult())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.AttachmentValidationResult
    name: AttachmentValidationResult
    nameWithType: AttachmentValidationResult
    fullName: SuperOffice.CRM.Services.AttachmentValidationResult
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.AttachmentValidationResult
    name: AttachmentValidationResult
    nameWithType: AttachmentValidationResult
    fullName: SuperOffice.CRM.Services.AttachmentValidationResult
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync
  isExternal: true
  name: SetTicketReadByOwnerAsync
  nameWithType: ITicketAgent.SetTicketReadByOwnerAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetTicketReadByOwnerAsync
- uid: SuperOffice.Data.TicketReadStatus
  isExternal: true
  name: TicketReadStatus
  nameWithType: TicketReadStatus
  fullName: SuperOffice.Data.TicketReadStatus
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync
  isExternal: true
  name: SaveTicketEntityWithNotifyAsync
  nameWithType: ITicketAgent.SaveTicketEntityWithNotifyAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketEntityWithNotifyAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync
  isExternal: true
  name: GetNextInQueueAsync
  nameWithType: ITicketAgent.GetNextInQueueAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetNextInQueueAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync
  isExternal: true
  name: ProcessTicketWhenReadAsync
  nameWithType: ITicketAgent.ProcessTicketWhenReadAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.ProcessTicketWhenReadAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync
  isExternal: true
  name: SplitTicketAsync
  nameWithType: ITicketAgent.SplitTicketAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SplitTicketAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync
  isExternal: true
  name: SplitTicketMessageAsync
  nameWithType: ITicketAgent.SplitTicketMessageAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SplitTicketMessageAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync
  isExternal: true
  name: UpdateTicketsReadStatusAsync
  nameWithType: ITicketAgent.UpdateTicketsReadStatusAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusAsync
- uid: System.Threading.Tasks.Task{System.Int32[]}
  commentId: '!:System.Threading.Tasks.Task{System.Int32[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32[]>
  nameWithType: Task<Int32[]>
  fullName: System.Threading.Tasks.Task<System.Int32[]>
  nameWithType.vb: Task(Of Int32())
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32())
  name.vb: Task(Of Int32())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync
  isExternal: true
  name: UpdateTicketsReadStatusByProviderAsync
  nameWithType: ITicketAgent.UpdateTicketsReadStatusByProviderAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.UpdateTicketsReadStatusByProviderAsync
- uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
  isExternal: true
  name: ArchiveRestrictionInfo[]
  nameWithType: ArchiveRestrictionInfo[]
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
  nameWithType.vb: ArchiveRestrictionInfo()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo()
  name.vb: ArchiveRestrictionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync
  isExternal: true
  name: MergeTicketsAsync
  nameWithType: ITicketAgent.MergeTicketsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.MergeTicketsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync
  isExternal: true
  name: SetDeletedStatusByIdsAsync
  nameWithType: ITicketAgent.SetDeletedStatusByIdsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByIdsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync
  isExternal: true
  name: SetDeletedStatusByProviderAsync
  nameWithType: ITicketAgent.SetDeletedStatusByProviderAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetDeletedStatusByProviderAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync
  isExternal: true
  name: UndeleteByIdsAsync
  nameWithType: ITicketAgent.UndeleteByIdsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.UndeleteByIdsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync
  isExternal: true
  name: ResolveTicketIdAsync
  nameWithType: ITicketAgent.ResolveTicketIdAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.ResolveTicketIdAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync
  isExternal: true
  name: BatchForwardAsync
  nameWithType: ITicketAgent.BatchForwardAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.BatchForwardAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync
  isExternal: true
  name: BatchReplyAsync
  nameWithType: ITicketAgent.BatchReplyAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.BatchReplyAsync
- uid: SuperOffice.CRM.Services.TicketBatchReplyData
  commentId: T:SuperOffice.CRM.Services.TicketBatchReplyData
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: TicketBatchReplyData
  nameWithType: TicketBatchReplyData
  fullName: SuperOffice.CRM.Services.TicketBatchReplyData
- uid: SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync
  isExternal: true
  name: ClearNotifyAsync
  nameWithType: ITicketAgent.ClearNotifyAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.ClearNotifyAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync
  isExternal: true
  name: GetTicketMessageEntitiesAsync
  nameWithType: ITicketAgent.GetTicketMessageEntitiesAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntitiesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageEntity[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketMessageEntity[]>
  nameWithType: Task<TicketMessageEntity[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.TicketMessageEntity[]>
  nameWithType.vb: Task(Of TicketMessageEntity())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.TicketMessageEntity())
  name.vb: Task(Of TicketMessageEntity())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.TicketMessageEntity
    name: TicketMessageEntity
    nameWithType: TicketMessageEntity
    fullName: SuperOffice.CRM.Services.TicketMessageEntity
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.TicketMessageEntity
    name: TicketMessageEntity
    nameWithType: TicketMessageEntity
    fullName: SuperOffice.CRM.Services.TicketMessageEntity
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync
  isExternal: true
  name: CreateDefaultForTicketTypeAsync
  nameWithType: ITicketAgent.CreateDefaultForTicketTypeAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CreateDefaultForTicketTypeAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync
  isExternal: true
  name: DoEscalatingAsync
  nameWithType: ITicketAgent.DoEscalatingAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.DoEscalatingAsync
- uid: SuperOffice.Data.TicketPriorityEscalateAction
  commentId: '!:SuperOffice.Data.TicketPriorityEscalateAction'
  isExternal: true
  name: TicketPriorityEscalateAction
  nameWithType: TicketPriorityEscalateAction
  fullName: SuperOffice.Data.TicketPriorityEscalateAction
- uid: SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync
  isExternal: true
  name: GetHotlistEjUsersAsync
  nameWithType: ITicketAgent.GetHotlistEjUsersAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetHotlistEjUsersAsync
- uid: SuperOffice.Data.NotifyType
  commentId: '!:SuperOffice.Data.NotifyType'
  isExternal: true
  name: NotifyType
  nameWithType: NotifyType
  fullName: SuperOffice.Data.NotifyType
- uid: SuperOffice.Data.NotifyChannel
  commentId: '!:SuperOffice.Data.NotifyChannel'
  isExternal: true
  name: NotifyChannel
  nameWithType: NotifyChannel
  fullName: SuperOffice.Data.NotifyChannel
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync
  isExternal: true
  name: GetTicketMessageAsync
  nameWithType: ITicketAgent.GetTicketMessageAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessage}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessage}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketMessage>
  nameWithType: Task<TicketMessage>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.TicketMessage>
  nameWithType.vb: Task(Of TicketMessage)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.TicketMessage)
  name.vb: Task(Of TicketMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.TicketMessage
    name: TicketMessage
    nameWithType: TicketMessage
    fullName: SuperOffice.CRM.Services.TicketMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.TicketMessage
    name: TicketMessage
    nameWithType: TicketMessage
    fullName: SuperOffice.CRM.Services.TicketMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync
  isExternal: true
  name: GetTicketMessageEntityAsync
  nameWithType: ITicketAgent.GetTicketMessageEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageEntityAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync
  isExternal: true
  name: DeleteTicketMessageEntityAsync
  nameWithType: ITicketAgent.DeleteTicketMessageEntityAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.DeleteTicketMessageEntityAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync
  isExternal: true
  name: SanitizeMailContentAsync
  nameWithType: ITicketAgent.SanitizeMailContentAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync
  isExternal: true
  name: SanitizeMailContentWithOptionsAsync
  nameWithType: ITicketAgent.SanitizeMailContentWithOptionsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentWithOptionsAsync
- uid: SuperOffice.Data.HtmlSanitizerOptions
  commentId: '!:SuperOffice.Data.HtmlSanitizerOptions'
  isExternal: true
  name: HtmlSanitizerOptions
  nameWithType: HtmlSanitizerOptions
  fullName: SuperOffice.Data.HtmlSanitizerOptions
- uid: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync
  isExternal: true
  name: SanitizeMailContentsAsync
  nameWithType: ITicketAgent.SanitizeMailContentsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SanitizeMailContentsAsync
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: '!:System.Threading.Tasks.Task{System.String[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync
  isExternal: true
  name: Html2TextAsync
  nameWithType: ITicketAgent.Html2TextAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.Html2TextAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync
  isExternal: true
  name: GetAttachmentInfoAsync
  nameWithType: ITicketAgent.GetAttachmentInfoAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync
  isExternal: true
  name: GetAttachmentInfoNonInlineAsync
  nameWithType: ITicketAgent.GetAttachmentInfoNonInlineAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentInfoNonInlineAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync
  isExternal: true
  name: AddAttachmentsAsync
  nameWithType: ITicketAgent.AddAttachmentsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.AddAttachmentsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync
  isExternal: true
  name: RemoveMessageAttachmentsAsync
  nameWithType: ITicketAgent.RemoveMessageAttachmentsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.RemoveMessageAttachmentsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync
  isExternal: true
  name: GetAttachmentPreviewAsync
  nameWithType: ITicketAgent.GetAttachmentPreviewAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetAttachmentPreviewAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentPreview}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.AttachmentPreview}'
  definition: System.Threading.Tasks.Task`1
  name: Task<AttachmentPreview>
  nameWithType: Task<AttachmentPreview>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.AttachmentPreview>
  nameWithType.vb: Task(Of AttachmentPreview)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.AttachmentPreview)
  name.vb: Task(Of AttachmentPreview)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.AttachmentPreview
    name: AttachmentPreview
    nameWithType: AttachmentPreview
    fullName: SuperOffice.CRM.Services.AttachmentPreview
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.AttachmentPreview
    name: AttachmentPreview
    nameWithType: AttachmentPreview
    fullName: SuperOffice.CRM.Services.AttachmentPreview
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync
  isExternal: true
  name: GetPreviewAttachmentStreamAsync
  nameWithType: ITicketAgent.GetPreviewAttachmentStreamAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetPreviewAttachmentStreamAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.DocumentPreview}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.DocumentPreview}'
  definition: System.Threading.Tasks.Task`1
  name: Task<DocumentPreview>
  nameWithType: Task<DocumentPreview>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.DocumentPreview>
  nameWithType.vb: Task(Of DocumentPreview)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.DocumentPreview)
  name.vb: Task(Of DocumentPreview)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.DocumentPreview
    name: DocumentPreview
    nameWithType: DocumentPreview
    fullName: SuperOffice.CRM.Services.DocumentPreview
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.DocumentPreview
    name: DocumentPreview
    nameWithType: DocumentPreview
    fullName: SuperOffice.CRM.Services.DocumentPreview
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync
  isExternal: true
  name: GetRfcAttachmentStreamAsync
  nameWithType: ITicketAgent.GetRfcAttachmentStreamAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetRfcAttachmentStreamAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync
  isExternal: true
  name: SendTicketMessageAsync
  nameWithType: ITicketAgent.SendTicketMessageAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync
  isExternal: true
  name: SendTicketMessageSmsAsync
  nameWithType: ITicketAgent.SendTicketMessageSmsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SendTicketMessageSmsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync
  isExternal: true
  name: SetTicketMessageImportantAsync
  nameWithType: ITicketAgent.SetTicketMessageImportantAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SetTicketMessageImportantAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync
  isExternal: true
  name: CalculateMessageRecipientsAsync
  nameWithType: ITicketAgent.CalculateMessageRecipientsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.CalculateMessageRecipientsAsync
- uid: SuperOffice.Data.MessageActionType
  isExternal: true
  name: MessageActionType
  nameWithType: MessageActionType
  fullName: SuperOffice.Data.MessageActionType
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.Recipient[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.Recipient[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Recipient[]>
  nameWithType: Task<Recipient[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.Recipient[]>
  nameWithType.vb: Task(Of Recipient())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.Recipient())
  name.vb: Task(Of Recipient())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.Recipient
    name: Recipient
    nameWithType: Recipient
    fullName: SuperOffice.CRM.Services.Recipient
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.Recipient
    name: Recipient
    nameWithType: Recipient
    fullName: SuperOffice.CRM.Services.Recipient
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync
  isExternal: true
  name: SaveTicketMessageEntityWithNotifyAsync
  nameWithType: ITicketAgent.SaveTicketMessageEntityWithNotifyAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithNotifyAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync
  isExternal: true
  name: SaveTicketMessageEntityWithOptionsAsync
  nameWithType: ITicketAgent.SaveTicketMessageEntityWithOptionsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.SaveTicketMessageEntityWithOptionsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync
  isExternal: true
  name: GetDefaultMessageContentAsync
  nameWithType: ITicketAgent.GetDefaultMessageContentAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync
  isExternal: true
  name: GetDefaultMessageContentFullAsync
  nameWithType: ITicketAgent.GetDefaultMessageContentFullAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentFullAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageContent}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketMessageContent}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketMessageContent>
  nameWithType: Task<TicketMessageContent>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.TicketMessageContent>
  nameWithType.vb: Task(Of TicketMessageContent)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.TicketMessageContent)
  name.vb: Task(Of TicketMessageContent)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.TicketMessageContent
    name: TicketMessageContent
    nameWithType: TicketMessageContent
    fullName: SuperOffice.CRM.Services.TicketMessageContent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.TicketMessageContent
    name: TicketMessageContent
    nameWithType: TicketMessageContent
    fullName: SuperOffice.CRM.Services.TicketMessageContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync
  isExternal: true
  name: GetDefaultMessageContentWithOptionsAsync
  nameWithType: ITicketAgent.GetDefaultMessageContentWithOptionsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetDefaultMessageContentWithOptionsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync
  isExternal: true
  name: GetTicketMessageWithEmbeddedDataAsync
  nameWithType: ITicketAgent.GetTicketMessageWithEmbeddedDataAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithEmbeddedDataAsync
- uid: SuperOffice.Data.ImageEmbedType
  commentId: '!:SuperOffice.Data.ImageEmbedType'
  isExternal: true
  name: ImageEmbedType
  nameWithType: ImageEmbedType
  fullName: SuperOffice.Data.ImageEmbedType
- uid: SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync
  isExternal: true
  name: DeleteMessageHeadersAsync
  nameWithType: ITicketAgent.DeleteMessageHeadersAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.DeleteMessageHeadersAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync
  isExternal: true
  name: GetTicketMessageWithOptionsAsync
  nameWithType: ITicketAgent.GetTicketMessageWithOptionsAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketMessageWithOptionsAsync
- uid: SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync*
  commentId: Overload:SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync
  isExternal: true
  name: GetTicketSummariesAsync
  nameWithType: ITicketAgent.GetTicketSummariesAsync
  fullName: SuperOffice.CRM.Services.ITicketAgent.GetTicketSummariesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketSummaryItem[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.TicketSummaryItem[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketSummaryItem[]>
  nameWithType: Task<TicketSummaryItem[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.TicketSummaryItem[]>
  nameWithType.vb: Task(Of TicketSummaryItem())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.TicketSummaryItem())
  name.vb: Task(Of TicketSummaryItem())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.TicketSummaryItem
    name: TicketSummaryItem
    nameWithType: TicketSummaryItem
    fullName: SuperOffice.CRM.Services.TicketSummaryItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.TicketSummaryItem
    name: TicketSummaryItem
    nameWithType: TicketSummaryItem
    fullName: SuperOffice.CRM.Services.TicketSummaryItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
