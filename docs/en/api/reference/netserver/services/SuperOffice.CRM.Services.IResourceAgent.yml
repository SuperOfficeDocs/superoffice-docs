### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.IResourceAgent
  commentId: T:SuperOffice.CRM.Services.IResourceAgent
  id: IResourceAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync(System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync(System.String[],System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IResourceAgent
  nameWithType: IResourceAgent
  fullName: SuperOffice.CRM.Services.IResourceAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the Resource Agent\nString resource substitution management.\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (ResourceAgent agent = new ResourceAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("Resource Agent", "Interface for the Resource Agent. String resource substitution management.")]

      public interface IResourceAgent : IAgent
    content.vb: >-
      <Agent("Resource Agent", "Interface for the Resource Agent. String resource substitution management.")>

      Public Interface IResourceAgent
          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Resource Agent
    - type: System.String
      value: Interface for the Resource Agent. String resource substitution management.
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  id: SetResourceSubstitutionAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IResourceAgent
  langs:
  - csharp
  - vb
  name: SetResourceSubstitutionAsync(String, String, String, Boolean, CancellationToken)
  nameWithType: IResourceAgent.SetResourceSubstitutionAsync(String, String, String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync(System.String, System.String, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate or update a resource substitution\n"
  syntax:
    content: Task SetResourceSubstitutionAsync(string resourceName, string resourceValues, string culture, bool isActive, CancellationToken cancellationToken = null)
    parameters:
    - id: resourceName
      type: System.String
      description: The name of the resource, without any brackets
    - id: resourceValues
      type: System.String
      description: The new value of the resource
    - id: culture
      type: System.String
      description: The .NET culture string
    - id: isActive
      type: System.Boolean
      description: Is the subsitution now active
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function SetResourceSubstitutionAsync(resourceName As String, resourceValues As String, culture As String, isActive As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync*
- uid: SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync(System.String,System.String,System.Threading.CancellationToken)
  id: DeleteResourceSubstitutionAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IResourceAgent
  langs:
  - csharp
  - vb
  name: DeleteResourceSubstitutionAsync(String, String, CancellationToken)
  nameWithType: IResourceAgent.DeleteResourceSubstitutionAsync(String, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nPermanentely delete a resource substitution for one or more cultures\n"
  syntax:
    content: Task DeleteResourceSubstitutionAsync(string resourceName, string culture, CancellationToken cancellationToken = null)
    parameters:
    - id: resourceName
      type: System.String
      description: The name of the resource, without any brackets
    - id: culture
      type: System.String
      description: The .NET culture string; if blank, then ALL substitutions for this resource will be dropped
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function DeleteResourceSubstitutionAsync(resourceName As String, culture As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync*
- uid: SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  id: ActivateResourceSubstitutionAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IResourceAgent
  langs:
  - csharp
  - vb
  name: ActivateResourceSubstitutionAsync(String, String, Boolean, CancellationToken)
  nameWithType: IResourceAgent.ActivateResourceSubstitutionAsync(String, String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync(System.String, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nActivate or deactive a resource substitution for one or more cultures\n"
  syntax:
    content: Task ActivateResourceSubstitutionAsync(string resourceName, string culture, bool isActive, CancellationToken cancellationToken = null)
    parameters:
    - id: resourceName
      type: System.String
      description: The name of the resource, without any brackets; if blank then this is the MASTER SWITCH for the override system
    - id: culture
      type: System.String
      description: The .NET culture string; if blank, then ALL substitutions for this resource will be affected
    - id: isActive
      type: System.Boolean
      description: New status of override
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function ActivateResourceSubstitutionAsync(resourceName As String, culture As String, isActive As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync*
- uid: SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync(System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync(System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetResourceSubstitutionsAsync(System.String[],System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IResourceAgent
  langs:
  - csharp
  - vb
  name: GetResourceSubstitutionsAsync(String[], String, Boolean, CancellationToken)
  nameWithType: IResourceAgent.GetResourceSubstitutionsAsync(String[], String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync(System.String[], System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet substitutions for some or all resources for one culture\n"
  syntax:
    content: Task<ResourceOverride[]> GetResourceSubstitutionsAsync(string[] resourceNames, string culture, bool activeOnly, CancellationToken cancellationToken = null)
    parameters:
    - id: resourceNames
      type: System.String[]
      description: Array of names of resources for which overrides are sought; if empty, then get all
    - id: culture
      type: System.String
      description: .NET culture string; if empty, then get all
    - id: activeOnly
      type: System.Boolean
      description: If true, then only resources with active substitutions will be returned; if false then ALL existing overrides will be returned
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ResourceOverride[]}
      description: Array of override objects, empty if there are none
    content.vb: Function GetResourceSubstitutionsAsync(resourceNames As String(), culture As String, activeOnly As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of ResourceOverride())
  overload: SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync*
  nameWithType.vb: IResourceAgent.GetResourceSubstitutionsAsync(String(), String, Boolean, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync(System.String(), System.String, System.Boolean, System.Threading.CancellationToken)
  name.vb: GetResourceSubstitutionsAsync(String(), String, Boolean, CancellationToken)
- uid: SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync(System.String[],System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync(System.String[],System.String,System.Threading.CancellationToken)
  id: IsResourceSubstitutionActiveAsync(System.String[],System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.IResourceAgent
  langs:
  - csharp
  - vb
  name: IsResourceSubstitutionActiveAsync(String[], String, CancellationToken)
  nameWithType: IResourceAgent.IsResourceSubstitutionActiveAsync(String[], String, CancellationToken)
  fullName: SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync(System.String[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDetermine if resource substitution/override is active, globally or for a subset of resources/cultures\n"
  syntax:
    content: Task<ResourceOverride[]> IsResourceSubstitutionActiveAsync(string[] resourceNames, string culture, CancellationToken cancellationToken = null)
    parameters:
    - id: resourceNames
      type: System.String[]
      description: Array of names of resources for which overrides are sought; if empty, then get the MASTER on/off
    - id: culture
      type: System.String
      description: .NET culture string; if empty, then get for all cultures (unless resourceName
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ResourceOverride[]}
      description: Array of override objects, empty if there are none; the ResourceValue member is not set by this call
    content.vb: Function IsResourceSubstitutionActiveAsync(resourceNames As String(), culture As String, cancellationToken As CancellationToken = Nothing) As Task(Of ResourceOverride())
  overload: SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync*
  nameWithType.vb: IResourceAgent.IsResourceSubstitutionActiveAsync(String(), String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync(System.String(), System.String, System.Threading.CancellationToken)
  name.vb: IsResourceSubstitutionActiveAsync(String(), String, CancellationToken)
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync*
  commentId: Overload:SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync
  isExternal: true
  name: SetResourceSubstitutionAsync
  nameWithType: IResourceAgent.SetResourceSubstitutionAsync
  fullName: SuperOffice.CRM.Services.IResourceAgent.SetResourceSubstitutionAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync*
  commentId: Overload:SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync
  isExternal: true
  name: DeleteResourceSubstitutionAsync
  nameWithType: IResourceAgent.DeleteResourceSubstitutionAsync
  fullName: SuperOffice.CRM.Services.IResourceAgent.DeleteResourceSubstitutionAsync
- uid: SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync*
  commentId: Overload:SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync
  isExternal: true
  name: ActivateResourceSubstitutionAsync
  nameWithType: IResourceAgent.ActivateResourceSubstitutionAsync
  fullName: SuperOffice.CRM.Services.IResourceAgent.ActivateResourceSubstitutionAsync
- uid: SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync*
  commentId: Overload:SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync
  isExternal: true
  name: GetResourceSubstitutionsAsync
  nameWithType: IResourceAgent.GetResourceSubstitutionsAsync
  fullName: SuperOffice.CRM.Services.IResourceAgent.GetResourceSubstitutionsAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ResourceOverride[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ResourceOverride[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ResourceOverride[]>
  nameWithType: Task<ResourceOverride[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ResourceOverride[]>
  nameWithType.vb: Task(Of ResourceOverride())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ResourceOverride())
  name.vb: Task(Of ResourceOverride())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.ResourceOverride
    name: ResourceOverride
    nameWithType: ResourceOverride
    fullName: SuperOffice.CRM.Services.ResourceOverride
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.ResourceOverride
    name: ResourceOverride
    nameWithType: ResourceOverride
    fullName: SuperOffice.CRM.Services.ResourceOverride
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync*
  commentId: Overload:SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync
  isExternal: true
  name: IsResourceSubstitutionActiveAsync
  nameWithType: IResourceAgent.IsResourceSubstitutionActiveAsync
  fullName: SuperOffice.CRM.Services.IResourceAgent.IsResourceSubstitutionActiveAsync
