### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.ILicenseAgent
  commentId: T:SuperOffice.CRM.Services.ILicenseAgent
  id: ILicenseAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync(SuperOffice.CRM.Services.LicenseOwner[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ILicenseAgent
  nameWithType: ILicenseAgent
  fullName: SuperOffice.CRM.Services.ILicenseAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the License Agent\nLicense query, download, activation\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (LicenseAgent agent = new LicenseAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("License Agent", "Interface for the License Agent. License query, download, activation")]

      public interface ILicenseAgent : IAgent
    content.vb: >-
      <Agent("License Agent", "Interface for the License Agent. License query, download, activation")>

      Public Interface ILicenseAgent
          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: License Agent
    - type: System.String
      value: Interface for the License Agent. License query, download, activation
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  id: GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  nameWithType: ILicenseAgent.GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all licenses, with usage, from all module owners as they are stored in the database\n"
  syntax:
    content: Task<ExtendedLicenseInfo[]> GetLicenseForAllOwnersFromDBAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
    content.vb: Function GetLicenseForAllOwnersFromDBAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo())
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServerAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.GetLicenseFromLicenseServerAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: Task<ExtendedLicenseInfo> GetLicenseFromLicenseServerAsync(string ownerName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
    content.vb: Function GetLicenseFromLicenseServerAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  id: GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  nameWithType: ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet details about a license from the license server.\n"
  syntax:
    content: Task<string> GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo licenseInfo, ExtendedModuleLicense moduleLicense, CancellationToken cancellationToken = null)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: Description of the license
    - id: moduleLicense
      type: SuperOffice.License.ExtendedModuleLicense
      description: Information about a particular module to get information for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Information about a particular license module.
    content.vb: Function GetModuleLicenseHistoryFromLicenseServerAsync(licenseInfo As ExtendedLicenseInfo, moduleLicense As ExtendedModuleLicense, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  id: ValidateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfoAsync(ExtendedLicenseInfo, CancellationToken)
  nameWithType: ILicenseAgent.ValidateLicenseInfoAsync(ExtendedLicenseInfo, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nValidate that a license is consistant.\n"
  syntax:
    content: Task<LicenseResult> ValidateLicenseInfoAsync(ExtendedLicenseInfo licenseInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License to validate consistancy for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseResult}
    content.vb: Function ValidateLicenseInfoAsync(licenseInfo As ExtendedLicenseInfo, cancellationToken As CancellationToken = Nothing) As Task(Of LicenseResult)
  overload: SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  id: ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: ActivateLicenseInfoAsync(ExtendedLicenseInfo, CancellationToken)
  nameWithType: ILicenseAgent.ActivateLicenseInfoAsync(ExtendedLicenseInfo, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave a new license to the database.\n"
  syntax:
    content: Task<LicenseResult> ActivateLicenseInfoAsync(ExtendedLicenseInfo newLicense, CancellationToken cancellationToken = null)
    parameters:
    - id: newLicense
      type: SuperOffice.License.ExtendedLicenseInfo
      description: New license to save to the database.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseResult}
    content.vb: Function ActivateLicenseInfoAsync(newLicense As ExtendedLicenseInfo, cancellationToken As CancellationToken = Nothing) As Task(Of LicenseResult)
  overload: SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseStatusFromLicenseServerAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetLicenseStatusFromLicenseServerAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.GetLicenseStatusFromLicenseServerAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet License from the license server for a particular module owner.\n"
  syntax:
    content: Task<CheckLicenseStatusResult> GetLicenseStatusFromLicenseServerAsync(string ownerName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
      description: License from the database, from the license server and with usage.
    content.vb: Function GetLicenseStatusFromLicenseServerAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of CheckLicenseStatusResult)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetLicenseFromDBAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.GetLicenseFromDBAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet license, with usage, as it is stored in the database for one particular module owner.\n"
  syntax:
    content: Task<ExtendedLicenseInfo> GetLicenseFromDBAsync(string ownerName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License, with usage, as it is stored in the database.
    content.vb: Function GetLicenseFromDBAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync(System.Int32,System.Threading.CancellationToken)
  id: GetUserAndInstallationLicenceStatusAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetUserAndInstallationLicenceStatusAsync(Int32, CancellationToken)
  nameWithType: ILicenseAgent.GetUserAndInstallationLicenceStatusAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet status values for user licenses and installation license that can be used for feedback to the user.\n"
  syntax:
    content: Task<UserAndInstallationLicenceStatus> GetUserAndInstallationLicenceStatusAsync(int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id to use when loading information about user licenses and installation license status.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.UserAndInstallationLicenceStatus}
      description: An object that holds information for producing license status feedback to the user.
    content.vb: Function GetUserAndInstallationLicenceStatusAsync(associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of UserAndInstallationLicenceStatus)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: ChangeSerialNumberAsync(String, String, CancellationToken)
  nameWithType: ILicenseAgent.ChangeSerialNumberAsync(String, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange the new serial number for the installation. Requests a new license from SuperLicense, checks if change is authorized.\n"
  syntax:
    content: Task<LicenseResult> ChangeSerialNumberAsync(string newCompanyName, string newSerialNumber, CancellationToken cancellationToken = null)
    parameters:
    - id: newCompanyName
      type: System.String
      description: The new company name
    - id: newSerialNumber
      type: System.String
      description: New serial number to change to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseResult}
      description: License after serial number/name change
    content.vb: Function ChangeSerialNumberAsync(newCompanyName As String, newSerialNumber As String, cancellationToken As CancellationToken = Nothing) As Task(Of LicenseResult)
  overload: SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync(System.Int32,System.Threading.CancellationToken)
  id: GetUserLicensesAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetUserLicensesAsync(Int32, CancellationToken)
  nameWithType: ILicenseAgent.GetUserLicensesAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nObtain information about associate module licenses\n"
  syntax:
    content: Task<LicenseOwner[]> GetUserLicensesAsync(int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id to check for associate module licenses
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseOwner[]}
      description: Associate module licenses grouped by owners.
    content.vb: Function GetUserLicensesAsync(associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of LicenseOwner())
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync(System.Int32,System.Threading.CancellationToken)
  id: GetSatelliteLicensesAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetSatelliteLicensesAsync(Int32, CancellationToken)
  nameWithType: ILicenseAgent.GetSatelliteLicensesAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nObtain information about satellite module licenses\n"
  syntax:
    content: Task<LicenseOwner[]> GetSatelliteLicensesAsync(int satelliteId, CancellationToken cancellationToken = null)
    parameters:
    - id: satelliteId
      type: System.Int32
      description: Satellite id to check for satellite module licenses
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseOwner[]}
      description: Satellite module licenses grouped by owners.
    content.vb: Function GetSatelliteLicensesAsync(satelliteId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of LicenseOwner())
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  id: RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: RemoveLicenseFromDBAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.RemoveLicenseFromDBAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove the license from a particular module owner from the database.  It is not permitted to remove licenses from SuperOffice\n"
  syntax:
    content: Task<LicenseResult> RemoveLicenseFromDBAsync(string moduleOwner, CancellationToken cancellationToken = null)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of the module owner to remove license from.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseResult}
    content.vb: Function RemoveLicenseFromDBAsync(moduleOwner As String, cancellationToken As CancellationToken = Nothing) As Task(Of LicenseResult)
  overload: SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetLicenseFromFileAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.GetLicenseFromFileAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoad a new license from file\n"
  syntax:
    content: Task<ExtendedLicenseInfo> GetLicenseFromFileAsync(string fileContent, CancellationToken cancellationToken = null)
    parameters:
    - id: fileContent
      type: System.String
      description: Content of the license file as read.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
    content.vb: Function GetLicenseFromFileAsync(fileContent As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync(System.String,System.Threading.CancellationToken)
  id: GetShopUrlAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetShopUrlAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.GetShopUrlAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet the shop URL for the specified module owner. This can be used to redirect user to the web shop.\n"
  syntax:
    content: Task<string> GetShopUrlAsync(string ownerName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The URL which contains the shop for the specified module owner.
    content.vb: Function GetShopUrlAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync(System.Threading.CancellationToken)
  id: GetUserLicensesMDOListAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetUserLicensesMDOListAsync(CancellationToken)
  nameWithType: ILicenseAgent.GetUserLicensesMDOListAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all licenses in a MDOListItem structure.\n"
  syntax:
    content: Task<SelectableMDOListItem[]> GetUserLicensesMDOListAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SelectableMDOListItem[]}
      description: Hierarchical structure of user licenses.
    content.vb: Function GetUserLicensesMDOListAsync(cancellationToken As CancellationToken = Nothing) As Task(Of SelectableMDOListItem())
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetModuleLicenseFromDBAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetModuleLicenseFromDBAsync(String, String, CancellationToken)
  nameWithType: ILicenseAgent.GetModuleLicenseFromDBAsync(String, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet license information for one particular license module.\n"
  syntax:
    content: Task<ModuleLicense> GetModuleLicenseFromDBAsync(string ownerName, string moduleName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: moduleName
      type: System.String
      description: Name of the license module.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ModuleLicense}
      description: Module License details, as it is stored in the database. NULL if not found.
    content.vb: Function GetModuleLicenseFromDBAsync(ownerName As String, moduleName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ModuleLicense)
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  id: AddLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: AddLicenseFromFileAsync(String, CancellationToken)
  nameWithType: ILicenseAgent.AddLicenseFromFileAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoad and activate a new license from file/string if the new license is valid.\n"
  syntax:
    content: Task<ExtendedLicenseInfo> AddLicenseFromFileAsync(string fileContent, CancellationToken cancellationToken = null)
    parameters:
    - id: fileContent
      type: System.String
      description: Content of the license file as XML.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: Activated license
    content.vb: Function AddLicenseFromFileAsync(fileContent As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  id: GetThirdPartyLicenseAssignmentsAsync(System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetThirdPartyLicenseAssignmentsAsync(Int32, String, CancellationToken)
  nameWithType: ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync(Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync(System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet license assignments for an associate for licenses belonging to an other module owner than SuperOffice\n"
  syntax:
    content: Task<ModuleLicenseLink[]> GetThirdPartyLicenseAssignmentsAsync(int associateId, string moduleOwner, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: User to get third party license assignments for
    - id: moduleOwner
      type: System.String
      description: Name of the module owner to get license assignments for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ModuleLicenseLink[]}
      description: Module license names
    content.vb: Function GetThirdPartyLicenseAssignmentsAsync(associateId As Integer, moduleOwner As String, cancellationToken As CancellationToken = Nothing) As Task(Of ModuleLicenseLink())
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  id: AssignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: AssignThirdPartyLicensesAsync(Int32, String, String[], CancellationToken)
  nameWithType: ILicenseAgent.AssignThirdPartyLicensesAsync(Int32, String, String[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync(System.Int32, System.String, System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nAssign third party licenses\n"
  syntax:
    content: Task<ModuleLicenseLink[]> AssignThirdPartyLicensesAsync(int associateId, string moduleOwner, string[] moduleLicenseNames, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: User to assign third party licenses for
    - id: moduleOwner
      type: System.String
      description: Name of the module owner to assign license for
    - id: moduleLicenseNames
      type: System.String[]
      description: Name of module licenses to assign
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ModuleLicenseLink[]}
      description: All module license names assigned
    content.vb: Function AssignThirdPartyLicensesAsync(associateId As Integer, moduleOwner As String, moduleLicenseNames As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ModuleLicenseLink())
  overload: SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync*
  nameWithType.vb: ILicenseAgent.AssignThirdPartyLicensesAsync(Int32, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync(System.Int32, System.String, System.String(), System.Threading.CancellationToken)
  name.vb: AssignThirdPartyLicensesAsync(Int32, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  id: UnassignThirdPartyLicensesAsync(System.Int32,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: UnassignThirdPartyLicensesAsync(Int32, String, String[], CancellationToken)
  nameWithType: ILicenseAgent.UnassignThirdPartyLicensesAsync(Int32, String, String[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync(System.Int32, System.String, System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUnassign (remove) third party licenses\n"
  syntax:
    content: Task<ModuleLicenseLink[]> UnassignThirdPartyLicensesAsync(int associateId, string moduleOwner, string[] moduleLicenseNames, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: User to unassign third party licenses for
    - id: moduleOwner
      type: System.String
      description: Name of the module owner to unassign license for
    - id: moduleLicenseNames
      type: System.String[]
      description: Name of module licenses to unassign (remove)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ModuleLicenseLink[]}
      description: All module license names assigned
    content.vb: Function UnassignThirdPartyLicensesAsync(associateId As Integer, moduleOwner As String, moduleLicenseNames As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ModuleLicenseLink())
  overload: SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync*
  nameWithType.vb: ILicenseAgent.UnassignThirdPartyLicensesAsync(Int32, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync(System.Int32, System.String, System.String(), System.Threading.CancellationToken)
  name.vb: UnassignThirdPartyLicensesAsync(Int32, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync(System.Threading.CancellationToken)
  id: GetCentralLicenseAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: GetCentralLicenseAsync(CancellationToken)
  nameWithType: ILicenseAgent.GetCentralLicenseAsync(CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: Task<LicenseOwner[]> GetCentralLicenseAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseOwner[]}
    content.vb: Function GetCentralLicenseAsync(cancellationToken As CancellationToken = Nothing) As Task(Of LicenseOwner())
  overload: SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync*
- uid: SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync(SuperOffice.CRM.Services.LicenseOwner[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync(SuperOffice.CRM.Services.LicenseOwner[],System.Threading.CancellationToken)
  id: SaveCentralLicenseAsync(SuperOffice.CRM.Services.LicenseOwner[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Services.ILicenseAgent
  langs:
  - csharp
  - vb
  name: SaveCentralLicenseAsync(LicenseOwner[], CancellationToken)
  nameWithType: ILicenseAgent.SaveCentralLicenseAsync(LicenseOwner[], CancellationToken)
  fullName: SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync(SuperOffice.CRM.Services.LicenseOwner[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: Task<LicenseOwner[]> SaveCentralLicenseAsync(LicenseOwner[] license, CancellationToken cancellationToken = null)
    parameters:
    - id: license
      type: SuperOffice.CRM.Services.LicenseOwner[]
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseOwner[]}
    content.vb: Function SaveCentralLicenseAsync(license As LicenseOwner(), cancellationToken As CancellationToken = Nothing) As Task(Of LicenseOwner())
  overload: SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync*
  nameWithType.vb: ILicenseAgent.SaveCentralLicenseAsync(LicenseOwner(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync(SuperOffice.CRM.Services.LicenseOwner(), System.Threading.CancellationToken)
  name.vb: SaveCentralLicenseAsync(LicenseOwner(), CancellationToken)
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync
  isExternal: true
  name: GetLicenseForAllOwnersFromDBAsync
  nameWithType: ILicenseAgent.GetLicenseForAllOwnersFromDBAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseForAllOwnersFromDBAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ExtendedLicenseInfo[]>
  nameWithType: Task<ExtendedLicenseInfo[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfo[]>
  nameWithType.vb: Task(Of ExtendedLicenseInfo())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfo())
  name.vb: Task(Of ExtendedLicenseInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync
  isExternal: true
  name: GetLicenseFromLicenseServerAsync
  nameWithType: ILicenseAgent.GetLicenseFromLicenseServerAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromLicenseServerAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ExtendedLicenseInfo>
  nameWithType: Task<ExtendedLicenseInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfo>
  nameWithType.vb: Task(Of ExtendedLicenseInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfo)
  name.vb: Task(Of ExtendedLicenseInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync
  isExternal: true
  name: GetModuleLicenseHistoryFromLicenseServerAsync
  nameWithType: ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseHistoryFromLicenseServerAsync
- uid: SuperOffice.License.ExtendedLicenseInfo
  isExternal: true
  name: ExtendedLicenseInfo
  nameWithType: ExtendedLicenseInfo
  fullName: SuperOffice.License.ExtendedLicenseInfo
- uid: SuperOffice.License.ExtendedModuleLicense
  commentId: '!:SuperOffice.License.ExtendedModuleLicense'
  isExternal: true
  name: ExtendedModuleLicense
  nameWithType: ExtendedModuleLicense
  fullName: SuperOffice.License.ExtendedModuleLicense
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync
  isExternal: true
  name: ValidateLicenseInfoAsync
  nameWithType: ILicenseAgent.ValidateLicenseInfoAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.ValidateLicenseInfoAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseResult}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseResult}'
  definition: System.Threading.Tasks.Task`1
  name: Task<LicenseResult>
  nameWithType: Task<LicenseResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.LicenseResult>
  nameWithType.vb: Task(Of LicenseResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.LicenseResult)
  name.vb: Task(Of LicenseResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.LicenseResult
    name: LicenseResult
    nameWithType: LicenseResult
    fullName: SuperOffice.CRM.Services.LicenseResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.LicenseResult
    name: LicenseResult
    nameWithType: LicenseResult
    fullName: SuperOffice.CRM.Services.LicenseResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync
  isExternal: true
  name: ActivateLicenseInfoAsync
  nameWithType: ILicenseAgent.ActivateLicenseInfoAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.ActivateLicenseInfoAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync
  isExternal: true
  name: GetLicenseStatusFromLicenseServerAsync
  nameWithType: ILicenseAgent.GetLicenseStatusFromLicenseServerAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseStatusFromLicenseServerAsync
- uid: System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}'
  definition: System.Threading.Tasks.Task`1
  name: Task<CheckLicenseStatusResult>
  nameWithType: Task<CheckLicenseStatusResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.CheckLicenseStatusResult>
  nameWithType.vb: Task(Of CheckLicenseStatusResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.CheckLicenseStatusResult)
  name.vb: Task(Of CheckLicenseStatusResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.CheckLicenseStatusResult
    name: CheckLicenseStatusResult
    nameWithType: CheckLicenseStatusResult
    fullName: SuperOffice.License.CheckLicenseStatusResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.CheckLicenseStatusResult
    name: CheckLicenseStatusResult
    nameWithType: CheckLicenseStatusResult
    fullName: SuperOffice.License.CheckLicenseStatusResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync
  isExternal: true
  name: GetLicenseFromDBAsync
  nameWithType: ILicenseAgent.GetLicenseFromDBAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromDBAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync
  isExternal: true
  name: GetUserAndInstallationLicenceStatusAsync
  nameWithType: ILicenseAgent.GetUserAndInstallationLicenceStatusAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetUserAndInstallationLicenceStatusAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.UserAndInstallationLicenceStatus}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.UserAndInstallationLicenceStatus}'
  definition: System.Threading.Tasks.Task`1
  name: Task<UserAndInstallationLicenceStatus>
  nameWithType: Task<UserAndInstallationLicenceStatus>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.UserAndInstallationLicenceStatus>
  nameWithType.vb: Task(Of UserAndInstallationLicenceStatus)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.UserAndInstallationLicenceStatus)
  name.vb: Task(Of UserAndInstallationLicenceStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.UserAndInstallationLicenceStatus
    name: UserAndInstallationLicenceStatus
    nameWithType: UserAndInstallationLicenceStatus
    fullName: SuperOffice.CRM.Services.UserAndInstallationLicenceStatus
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.UserAndInstallationLicenceStatus
    name: UserAndInstallationLicenceStatus
    nameWithType: UserAndInstallationLicenceStatus
    fullName: SuperOffice.CRM.Services.UserAndInstallationLicenceStatus
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync
  isExternal: true
  name: ChangeSerialNumberAsync
  nameWithType: ILicenseAgent.ChangeSerialNumberAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.ChangeSerialNumberAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync
  isExternal: true
  name: GetUserLicensesAsync
  nameWithType: ILicenseAgent.GetUserLicensesAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseOwner[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.LicenseOwner[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<LicenseOwner[]>
  nameWithType: Task<LicenseOwner[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.LicenseOwner[]>
  nameWithType.vb: Task(Of LicenseOwner())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.LicenseOwner())
  name.vb: Task(Of LicenseOwner())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.LicenseOwner
    name: LicenseOwner
    nameWithType: LicenseOwner
    fullName: SuperOffice.CRM.Services.LicenseOwner
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.LicenseOwner
    name: LicenseOwner
    nameWithType: LicenseOwner
    fullName: SuperOffice.CRM.Services.LicenseOwner
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync
  isExternal: true
  name: GetSatelliteLicensesAsync
  nameWithType: ILicenseAgent.GetSatelliteLicensesAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetSatelliteLicensesAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync
  isExternal: true
  name: RemoveLicenseFromDBAsync
  nameWithType: ILicenseAgent.RemoveLicenseFromDBAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.RemoveLicenseFromDBAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync
  isExternal: true
  name: GetLicenseFromFileAsync
  nameWithType: ILicenseAgent.GetLicenseFromFileAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetLicenseFromFileAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync
  isExternal: true
  name: GetShopUrlAsync
  nameWithType: ILicenseAgent.GetShopUrlAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetShopUrlAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync
  isExternal: true
  name: GetUserLicensesMDOListAsync
  nameWithType: ILicenseAgent.GetUserLicensesMDOListAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetUserLicensesMDOListAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.SelectableMDOListItem[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.SelectableMDOListItem[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SelectableMDOListItem[]>
  nameWithType: Task<SelectableMDOListItem[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.SelectableMDOListItem[]>
  nameWithType.vb: Task(Of SelectableMDOListItem())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.SelectableMDOListItem())
  name.vb: Task(Of SelectableMDOListItem())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.SelectableMDOListItem
    name: SelectableMDOListItem
    nameWithType: SelectableMDOListItem
    fullName: SuperOffice.CRM.Services.SelectableMDOListItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.SelectableMDOListItem
    name: SelectableMDOListItem
    nameWithType: SelectableMDOListItem
    fullName: SuperOffice.CRM.Services.SelectableMDOListItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync
  isExternal: true
  name: GetModuleLicenseFromDBAsync
  nameWithType: ILicenseAgent.GetModuleLicenseFromDBAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetModuleLicenseFromDBAsync
- uid: System.Threading.Tasks.Task{SuperOffice.License.ModuleLicense}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.ModuleLicense}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ModuleLicense>
  nameWithType: Task<ModuleLicense>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ModuleLicense>
  nameWithType.vb: Task(Of ModuleLicense)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ModuleLicense)
  name.vb: Task(Of ModuleLicense)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.ModuleLicense
    name: ModuleLicense
    nameWithType: ModuleLicense
    fullName: SuperOffice.License.ModuleLicense
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.ModuleLicense
    name: ModuleLicense
    nameWithType: ModuleLicense
    fullName: SuperOffice.License.ModuleLicense
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync
  isExternal: true
  name: AddLicenseFromFileAsync
  nameWithType: ILicenseAgent.AddLicenseFromFileAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.AddLicenseFromFileAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync
  isExternal: true
  name: GetThirdPartyLicenseAssignmentsAsync
  nameWithType: ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetThirdPartyLicenseAssignmentsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Services.ModuleLicenseLink[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Services.ModuleLicenseLink[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ModuleLicenseLink[]>
  nameWithType: Task<ModuleLicenseLink[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Services.ModuleLicenseLink[]>
  nameWithType.vb: Task(Of ModuleLicenseLink())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Services.ModuleLicenseLink())
  name.vb: Task(Of ModuleLicenseLink())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.ModuleLicenseLink
    name: ModuleLicenseLink
    nameWithType: ModuleLicenseLink
    fullName: SuperOffice.CRM.Services.ModuleLicenseLink
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.ModuleLicenseLink
    name: ModuleLicenseLink
    nameWithType: ModuleLicenseLink
    fullName: SuperOffice.CRM.Services.ModuleLicenseLink
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync
  isExternal: true
  name: AssignThirdPartyLicensesAsync
  nameWithType: ILicenseAgent.AssignThirdPartyLicensesAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.AssignThirdPartyLicensesAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync
  isExternal: true
  name: UnassignThirdPartyLicensesAsync
  nameWithType: ILicenseAgent.UnassignThirdPartyLicensesAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.UnassignThirdPartyLicensesAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync
  isExternal: true
  name: GetCentralLicenseAsync
  nameWithType: ILicenseAgent.GetCentralLicenseAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.GetCentralLicenseAsync
- uid: SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync*
  commentId: Overload:SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync
  isExternal: true
  name: SaveCentralLicenseAsync
  nameWithType: ILicenseAgent.SaveCentralLicenseAsync
  fullName: SuperOffice.CRM.Services.ILicenseAgent.SaveCentralLicenseAsync
- uid: SuperOffice.CRM.Services.LicenseOwner[]
  isExternal: true
  name: LicenseOwner[]
  nameWithType: LicenseOwner[]
  fullName: SuperOffice.CRM.Services.LicenseOwner[]
  nameWithType.vb: LicenseOwner()
  fullName.vb: SuperOffice.CRM.Services.LicenseOwner()
  name.vb: LicenseOwner()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.LicenseOwner
    name: LicenseOwner
    nameWithType: LicenseOwner
    fullName: SuperOffice.CRM.Services.LicenseOwner
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.LicenseOwner
    name: LicenseOwner
    nameWithType: LicenseOwner
    fullName: SuperOffice.CRM.Services.LicenseOwner
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
