### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.IUserAgent
  commentId: T:SuperOffice.CRM.Services.IUserAgent
  id: IUserAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  - SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  - SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  - SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  - SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  - SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  - SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  - SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  - SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  - SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
  - SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  - SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  - SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  - SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  - SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  - SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  - SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  - SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  - SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
  - SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  - SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  - SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  - SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  - SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  - SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  - SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  - SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  - SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  - SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  - SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  - SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  - SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  - SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  - SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  - SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
  - SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
  - SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  langs:
  - csharp
  - vb
  name: IUserAgent
  nameWithType: IUserAgent
  fullName: SuperOffice.CRM.Services.IUserAgent
  type: Interface
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nInterface for the User Agent\nUser administration\n<p></p>\n<strong>Online Restricted:</strong> This agent is not available in Online by default. User management is not allowed for partner apps.\n"
  example:
  - "\n<pre><code>  using SuperOffice;\n  using SuperOffice.CRM.Services;\n\n  using (SoSession mySession = SoSession.Authenticate(&quot;user&quot;, &quot;pass&quot;))\n  {\n     using (UserAgent agent = new UserAgent())\n     {\n        // call methods on agent here...\n     }\n  }</code></pre>\n"
  syntax:
    content: >-
      [Agent("User Agent", "Interface for the User Agent. User administration")]

      public interface IUserAgent : IAgent
    content.vb: >-
      <Agent("User Agent", "Interface for the User Agent. User administration")>

      Public Interface IUserAgent

          Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: User Agent
    - type: System.String
      value: Interface for the User Agent. User administration
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  id: CreateDefaultServiceAuth
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultServiceAuth()
  nameWithType: IUserAgent.CreateDefaultServiceAuth()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new ServiceAuth.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: ServiceAuth CreateDefaultServiceAuth()
    return:
      type: SuperOffice.CRM.Services.ServiceAuth
      description: New ServiceAuth with default values
    content.vb: Function CreateDefaultServiceAuth As ServiceAuth
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  id: SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveServiceAuth(ServiceAuth)
  nameWithType: IUserAgent.SaveServiceAuth(ServiceAuth)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth(SuperOffice.CRM.Services.ServiceAuth)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing ServiceAuth or creates a new ServiceAuth if the id parameter is empty\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: ServiceAuth SaveServiceAuth(ServiceAuth serviceAuth)
    parameters:
    - id: serviceAuth
      type: SuperOffice.CRM.Services.ServiceAuth
      description: The ServiceAuth that is saved.
    return:
      type: SuperOffice.CRM.Services.ServiceAuth
      description: New or updated ServiceAuth
    content.vb: Function SaveServiceAuth(serviceAuth As ServiceAuth) As ServiceAuth
  overload: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  id: DeleteServiceAuth(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteServiceAuth(Int32)
  nameWithType: IUserAgent.DeleteServiceAuth(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes the ServiceAuth\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void DeleteServiceAuth(int serviceAuthId)
    parameters:
    - id: serviceAuthId
      type: System.Int32
      description: The identity of the ServiceAuth
    content.vb: Sub DeleteServiceAuth(serviceAuthId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  id: CreateDefaultRoleEntity
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultRoleEntity()
  nameWithType: IUserAgent.CreateDefaultRoleEntity()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new RoleEntity.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: RoleEntity CreateDefaultRoleEntity()
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: New RoleEntity with default values
    content.vb: Function CreateDefaultRoleEntity As RoleEntity
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  id: SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveRoleEntity(RoleEntity)
  nameWithType: IUserAgent.SaveRoleEntity(RoleEntity)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity(SuperOffice.CRM.Services.RoleEntity)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing RoleEntity or creates a new RoleEntity if the id parameter is empty\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: RoleEntity SaveRoleEntity(RoleEntity roleEntity)
    parameters:
    - id: roleEntity
      type: SuperOffice.CRM.Services.RoleEntity
      description: The RoleEntity that is saved.
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: New or updated RoleEntity
    content.vb: Function SaveRoleEntity(roleEntity As RoleEntity) As RoleEntity
  overload: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  id: CreateDefaultUntrustedCredentials
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUntrustedCredentials()
  nameWithType: IUserAgent.CreateDefaultUntrustedCredentials()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new UntrustedCredentials.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UntrustedCredentials CreateDefaultUntrustedCredentials()
    return:
      type: SuperOffice.CRM.Services.UntrustedCredentials
      description: New UntrustedCredentials with default values
    content.vb: Function CreateDefaultUntrustedCredentials As UntrustedCredentials
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  id: CreateDefaultUser
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUser()
  nameWithType: IUserAgent.CreateDefaultUser()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nLoading default values into a new User.\nNetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User CreateDefaultUser()
    return:
      type: SuperOffice.CRM.Services.User
      description: New User with default values
    content.vb: Function CreateDefaultUser As User
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  id: SaveUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveUser(User)
  nameWithType: IUserAgent.SaveUser(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUser(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nUpdates the existing User or creates a new User if the id parameter is empty\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User SaveUser(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: The User that is saved.
    return:
      type: SuperOffice.CRM.Services.User
      description: New or updated User
    content.vb: Function SaveUser(user As User) As User
  overload: SuperOffice.CRM.Services.IUserAgent.SaveUser*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  id: GetUserCommands(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserCommands(User)
  nameWithType: IUserAgent.GetUserCommands(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserCommands(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet registered custom commands for User\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CustomCommand[] GetUserCommands(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: The User
    return:
      type: SuperOffice.CRM.Services.CustomCommand[]
      description: Custom commands for the User
    content.vb: Function GetUserCommands(user As User) As CustomCommand()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserCommands*
- uid: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  id: ExecuteUserCommand(System.String,SuperOffice.Data.CommandActionResult,SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ExecuteUserCommand(String, CommandActionResult, User)
  nameWithType: IUserAgent.ExecuteUserCommand(String, CommandActionResult, User)
  fullName: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand(System.String, SuperOffice.Data.CommandActionResult, SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nExecutes the custom command for User\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CommandResult ExecuteUserCommand(string commandName, CommandActionResult actionResult, User user)
    parameters:
    - id: commandName
      type: System.String
      description: The name of the command to execute.
    - id: actionResult
      type: SuperOffice.Data.CommandActionResult
      description: Result of an UI operation.
    - id: user
      type: SuperOffice.CRM.Services.User
      description: The User to execute commands on.
    return:
      type: SuperOffice.CRM.Services.CommandResult
      description: Result of the executed command
    content.vb: Function ExecuteUserCommand(commandName As String, actionResult As CommandActionResult, user As User) As CommandResult
  overload: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  id: DeleteUser(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteUser(Int32)
  nameWithType: IUserAgent.DeleteUser(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUser(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes the User\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void DeleteUser(int userId)
    parameters:
    - id: userId
      type: System.Int32
      description: The identity of the User
    content.vb: Sub DeleteUser(userId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteUser*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  id: SaveCredential(System.Int32,SuperOffice.CRM.Services.Credential)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveCredential(Int32, Credential)
  nameWithType: IUserAgent.SaveCredential(Int32, Credential)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveCredential(System.Int32, SuperOffice.CRM.Services.Credential)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave (adds/replaces) current credential of the same type for the user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool SaveCredential(int userId, Credential credential)
    parameters:
    - id: userId
      type: System.Int32
      description: Primary key of the user (i.e. associate)
    - id: credential
      type: SuperOffice.CRM.Services.Credential
      description: Credentials supported for authentication
    return:
      type: System.Boolean
      description: True if the credential was successfully saved.
    content.vb: Function SaveCredential(userId As Integer, credential As Credential) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.SaveCredential*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32,System.String)
  id: DeleteCredential(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteCredential(Int32, String)
  nameWithType: IUserAgent.DeleteCredential(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteCredential(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove credential of a specific type for a user\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool DeleteCredential(int userId, string credentialType)
    parameters:
    - id: userId
      type: System.Int32
      description: Primary key of the user (i.e. associate)
    - id: credentialType
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table
    return:
      type: System.Boolean
      description: True if credential was sucessfully removed.
    content.vb: Function DeleteCredential(userId As Integer, credentialType As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteCredential*
- uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String,System.String)
  id: FindCredentialsGroups(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: FindCredentialsGroups(String, String)
  nameWithType: IUserAgent.FindCredentialsGroups(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet user groups holding users filtered by the searchString.  This method is only relevant if the CredentialType control is of type link.  There will allways be at least one groups even if the underlying provider does not support groups.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CredentialsGroup[] FindCredentialsGroups(string type, string searchString)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: searchString
      type: System.String
      description: Partly name of domain group.
    return:
      type: SuperOffice.CRM.Services.CredentialsGroup[]
    content.vb: Function FindCredentialsGroups(type As String, searchString As String) As CredentialsGroup()
  overload: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups*
- uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String,System.String)
  id: FindCredentialUsers(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: FindCredentialUsers(String, String)
  nameWithType: IUserAgent.FindCredentialUsers(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind users matching the partial name.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CredentialsGroupUsers FindCredentialUsers(string type, string searchString)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: searchString
      type: System.String
      description: Partly name of the user group
    return:
      type: SuperOffice.CRM.Services.CredentialsGroupUsers
    content.vb: Function FindCredentialUsers(type As String, searchString As String) As CredentialsGroupUsers
  overload: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers*
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String,System.String)
  id: GetCredentialUsersInGroup(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetCredentialUsersInGroup(String, String)
  nameWithType: IUserAgent.GetCredentialUsersInGroup(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet credential users within a user group\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CredentialsGroupUsers GetCredentialUsersInGroup(string type, string groupName)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: groupName
      type: System.String
      description: Name of user group needed to discover the users.
    return:
      type: SuperOffice.CRM.Services.CredentialsGroupUsers
    content.vb: Function GetCredentialUsersInGroup(type As String, groupName As String) As CredentialsGroupUsers
  overload: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup*
- uid: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  id: GetServiceAuth(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetServiceAuth(Int32)
  nameWithType: IUserAgent.GetServiceAuth(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a ServiceAuth object.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: ServiceAuth GetServiceAuth(int serviceAuthId)
    parameters:
    - id: serviceAuthId
      type: System.Int32
      description: The identifier of the ServiceAuth object
    return:
      type: SuperOffice.CRM.Services.ServiceAuth
      description: ServiceAuth
    content.vb: Function GetServiceAuth(serviceAuthId As Integer) As ServiceAuth
  overload: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth*
- uid: SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  id: GetRole(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetRole(Int32)
  nameWithType: IUserAgent.GetRole(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetRole(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a Role object.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: Role GetRole(int roleId)
    parameters:
    - id: roleId
      type: System.Int32
      description: The identifier of the Role object
    return:
      type: SuperOffice.CRM.Services.Role
      description: Role
    content.vb: Function GetRole(roleId As Integer) As Role
  overload: SuperOffice.CRM.Services.IUserAgent.GetRole*
- uid: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  id: GetRoleEntity(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetRoleEntity(Int32)
  nameWithType: IUserAgent.GetRoleEntity(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a RoleEntity object.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: RoleEntity GetRoleEntity(int roleEntityId)
    parameters:
    - id: roleEntityId
      type: System.Int32
      description: The identifier of the RoleEntity object
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: RoleEntity
    content.vb: Function GetRoleEntity(roleEntityId As Integer) As RoleEntity
  overload: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32,System.Int32)
  id: DeleteRole(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteRole(Int32, Int32)
  nameWithType: IUserAgent.DeleteRole(Int32, Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteRole(System.Int32, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete the specified role and move all users associated with the role to the replacingRoleId\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void DeleteRole(int roleIdToDelete, int replacingRoleId)
    parameters:
    - id: roleIdToDelete
      type: System.Int32
      description: The roleId to delete
    - id: replacingRoleId
      type: System.Int32
      description: The roleId which all associated users will be moved to.
    content.vb: Sub DeleteRole(roleIdToDelete As Integer, replacingRoleId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteRole*
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  id: GetAllRoles(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetAllRoles(RoleType)
  nameWithType: IUserAgent.GetAllRoles(RoleType)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllRoles(SuperOffice.Data.RoleType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list of all roles for the given type of role. MDO List name = &apos;Roles&apos;, extra=&apos;0&apos; (roleType) \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: SelectableMDOListItem[] GetAllRoles(RoleType roleType)
    parameters:
    - id: roleType
      type: SuperOffice.Data.RoleType
      description: Type of role (Employee/External/Anonymous/System)
    return:
      type: SuperOffice.CRM.Services.SelectableMDOListItem[]
      description: FunctionRight items with name and description. Code name for function right is in the extra-info property.
    content.vb: Function GetAllRoles(roleType As RoleType) As SelectableMDOListItem()
  overload: SuperOffice.CRM.Services.IUserAgent.GetAllRoles*
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  id: GetAllFunctionalRights(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetAllFunctionalRights(RoleType)
  nameWithType: IUserAgent.GetAllFunctionalRights(RoleType)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights(SuperOffice.Data.RoleType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a list of all functional rights for the given type of role. MDO List name = &apos;FunctionRights&apos;, extra=&apos;roleType=0&apos; \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: SelectableMDOListItem[] GetAllFunctionalRights(RoleType roleType)
    parameters:
    - id: roleType
      type: SuperOffice.Data.RoleType
      description: Type of role (Employee/External/Anonymous/System)
    return:
      type: SuperOffice.CRM.Services.SelectableMDOListItem[]
      description: FunctionRight items with name and description. Code name for function right is in the extra-info property.
    content.vb: Function GetAllFunctionalRights(roleType As RoleType) As SelectableMDOListItem()
  overload: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights*
- uid: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  id: GetFunctionalRights(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetFunctionalRights(Int32)
  nameWithType: IUserAgent.GetFunctionalRights(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all functional rights for the given role. Functional rights not set on the role are not included. MDO List name = &apos;FunctionRights&apos;, extra=&apos;role=123&apos;\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: SelectableMDOListItem[] GetFunctionalRights(int roleId)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to get the functional rights for.
    return:
      type: SuperOffice.CRM.Services.SelectableMDOListItem[]
      description: FunctionRight items with name and description. Code name for function right is in the extra-info property.
    content.vb: Function GetFunctionalRights(roleId As Integer) As SelectableMDOListItem()
  overload: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights*
- uid: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32,System.Int32[])
  id: SetFunctionalRights(System.Int32,System.Int32[])
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetFunctionalRights(Int32, Int32[])
  nameWithType: IUserAgent.SetFunctionalRights(Int32, Int32[])
  fullName: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32, System.Int32[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet all functional rights for the given role. Functional rights not specified here will be removed from the role. \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void SetFunctionalRights(int roleId, int[] functionalRightIds)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the functional rights for
    - id: functionalRightIds
      type: System.Int32[]
      description: An array of functional rights ids to set for this role. Rights not included here are removed from the role.
    content.vb: Sub SetFunctionalRights(roleId As Integer, functionalRightIds As Integer())
  overload: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights*
  nameWithType.vb: IUserAgent.SetFunctionalRights(Int32, Int32())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights(System.Int32, System.Int32())
  name.vb: SetFunctionalRights(Int32, Int32())
- uid: SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  id: SetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetDataRight(Int32, String, RoleRelationToOwner, String)
  nameWithType: IUserAgent.SetDataRight(Int32, String, RoleRelationToOwner, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetDataRight(System.Int32, System.String, SuperOffice.CRM.Services.Util.RoleRelationToOwner, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSet one specific data right at the given position. An exception will be thrown if non existing position is specified.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void SetDataRight(int roleId, string tableName, RoleRelationToOwner relationToOwner, string dataRightValue)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the data right for
    - id: tableName
      type: System.String
      description: The name of the entity/table
    - id: relationToOwner
      type: SuperOffice.CRM.Services.Util.RoleRelationToOwner
      description: The id of the relation to owner
    - id: dataRightValue
      type: System.String
      description: The data right value to set at the specified position (CRUD)
    content.vb: Sub SetDataRight(roleId As Integer, tableName As String, relationToOwner As RoleRelationToOwner, dataRightValue As String)
  overload: SuperOffice.CRM.Services.IUserAgent.SetDataRight*
- uid: SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  id: GetDataRight(System.Int32,System.String,SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetDataRight(Int32, String, RoleRelationToOwner)
  nameWithType: IUserAgent.GetDataRight(Int32, String, RoleRelationToOwner)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRight(System.Int32, System.String, SuperOffice.CRM.Services.Util.RoleRelationToOwner)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRead one specific data right at the given position. An exception will be thrown if non existing position is specified.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string GetDataRight(int roleId, string tableName, RoleRelationToOwner relationToOwner)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the data right for
    - id: tableName
      type: System.String
      description: The name of the entity/table
    - id: relationToOwner
      type: SuperOffice.CRM.Services.Util.RoleRelationToOwner
      description: The id of the relation to owner
    return:
      type: System.String
      description: The data right value at the specified position (C, CR, CRU, or CRUD)
    content.vb: Function GetDataRight(roleId As Integer, tableName As String, relationToOwner As RoleRelationToOwner) As String
  overload: SuperOffice.CRM.Services.IUserAgent.GetDataRight*
- uid: SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32,System.String)
  id: GetDataRights(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetDataRights(Int32, String)
  nameWithType: IUserAgent.GetDataRights(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRights(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRead specific a set of data rights at the given row in the rights matrix. An exception will be thrown if non existing position is specified.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: StringDictionary GetDataRights(int roleId, string tableName)
    parameters:
    - id: roleId
      type: System.Int32
      description: The role id to set the data right for
    - id: tableName
      type: System.String
      description: The name of the entity/table
    return:
      type: SuperOffice.CRM.Services.StringDictionary
      description: The data right values for all the defined relationships (C, CR, CRU, or CRUD)
    content.vb: Function GetDataRights(roleId As Integer, tableName As String) As StringDictionary
  overload: SuperOffice.CRM.Services.IUserAgent.GetDataRights*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  id: CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultRoleEntityFromType(RoleType)
  nameWithType: IUserAgent.CreateDefaultRoleEntityFromType(RoleType)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType(SuperOffice.Data.RoleType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate a new role entity of the specified role type. The role type cannot be changed after the entity is created.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: RoleEntity CreateDefaultRoleEntityFromType(RoleType type)
    parameters:
    - id: type
      type: SuperOffice.Data.RoleType
      description: Type of role (Employee/External/Anonymous/System)
    return:
      type: SuperOffice.CRM.Services.RoleEntity
      description: A blank role.
    content.vb: Function CreateDefaultRoleEntityFromType(type As RoleType) As RoleEntity
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType*
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  id: FindRolesWithFunctionalRight(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: FindRolesWithFunctionalRight(String)
  nameWithType: IUserAgent.FindRolesWithFunctionalRight(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind all roles with a given functional right. The roles matched must contain the specified functional right. \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: MDOListItem[] FindRolesWithFunctionalRight(string functionalRightName)
    parameters:
    - id: functionalRightName
      type: System.String
      description: Functional right name to search for
    return:
      type: SuperOffice.CRM.Services.MDOListItem[]
      description: Roles that contains the given functional right
    content.vb: Function FindRolesWithFunctionalRight(functionalRightName As String) As MDOListItem()
  overload: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight*
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  id: FindRolesWithFunctionalRights(System.String[])
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: FindRolesWithFunctionalRights(String[])
  nameWithType: IUserAgent.FindRolesWithFunctionalRights(String[])
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind all roles with a given set of functional rights. The roles matched must contain one or more of the specified functional rights. \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: int[] FindRolesWithFunctionalRights(string[] functionalRightNames)
    parameters:
    - id: functionalRightNames
      type: System.String[]
      description: An array of functional rights names to search for
    return:
      type: System.Int32[]
      description: Role ids that contains your functional rights
    content.vb: Function FindRolesWithFunctionalRights(functionalRightNames As String()) As Integer()
  overload: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights*
  nameWithType.vb: IUserAgent.FindRolesWithFunctionalRights(String())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights(System.String())
  name.vb: FindRolesWithFunctionalRights(String())
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  id: FindRolesWithoutFunctionalRights(System.String[])
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: FindRolesWithoutFunctionalRights(String[])
  nameWithType: IUserAgent.FindRolesWithoutFunctionalRights(String[])
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFind all roles without a given set of functional rights. The roles matched must not contain any of the specified functional rights. \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: int[] FindRolesWithoutFunctionalRights(string[] functionalRightNames)
    parameters:
    - id: functionalRightNames
      type: System.String[]
      description: An array of functional rights names to search for
    return:
      type: System.Int32[]
      description: Role ids that without your functional rights
    content.vb: Function FindRolesWithoutFunctionalRights(functionalRightNames As String()) As Integer()
  overload: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights*
  nameWithType.vb: IUserAgent.FindRolesWithoutFunctionalRights(String())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights(System.String())
  name.vb: FindRolesWithoutFunctionalRights(String())
- uid: SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  id: GetUser(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUser(Int32)
  nameWithType: IUserAgent.GetUser(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUser(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a User object.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User GetUser(int userId)
    parameters:
    - id: userId
      type: System.Int32
      description: The identifier of the User object
    return:
      type: SuperOffice.CRM.Services.User
      description: User
    content.vb: Function GetUser(userId As Integer) As User
  overload: SuperOffice.CRM.Services.IUserAgent.GetUser*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  id: GetUserFromName(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserFromName(String)
  nameWithType: IUserAgent.GetUserFromName(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a user, with lookup based on user name.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User GetUserFromName(string userName)
    parameters:
    - id: userName
      type: System.String
      description: User name of the user to get.
    return:
      type: SuperOffice.CRM.Services.User
      description: User retrieved by name
    content.vb: Function GetUserFromName(userName As String) As User
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserFromName*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  id: SaveUserFromName(System.String,SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveUserFromName(String, User)
  nameWithType: IUserAgent.SaveUserFromName(String, User)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName(System.String, SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave a user, with lookup based on the user name.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User SaveUserFromName(string userName, User user)
    parameters:
    - id: userName
      type: System.String
      description: User name of the user to get.
    - id: user
      type: SuperOffice.CRM.Services.User
      description: User object to save.
    return:
      type: SuperOffice.CRM.Services.User
      description: User retrieved by name
    content.vb: Function SaveUserFromName(userName As String, user As User) As User
  overload: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  id: DeleteUserFromName(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteUserFromName(String)
  nameWithType: IUserAgent.DeleteUserFromName(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a user, with lookup based on the user name.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void DeleteUserFromName(string userName)
    parameters:
    - id: userName
      type: System.String
      description: User name of the user to delete.
    content.vb: Sub DeleteUserFromName(userName As String)
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName*
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  id: GetCredentialTypes
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetCredentialTypes()
  nameWithType: IUserAgent.GetCredentialTypes()
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet available credential types that can be used for authentication\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CredentialType[] GetCredentialTypes()
    return:
      type: SuperOffice.CRM.Services.CredentialType[]
      description: Credential types that can be used for authentication
    content.vb: Function GetCredentialTypes As CredentialType()
  overload: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes*
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  id: GetCredentialTypesForUserType(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetCredentialTypesForUserType(UserType)
  nameWithType: IUserAgent.GetCredentialTypesForUserType(UserType)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType(SuperOffice.License.UserType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet available credential types that can be used for the specified user type.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: CredentialType[] GetCredentialTypesForUserType(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: The user type to retrieve credential types for
    return:
      type: SuperOffice.CRM.Services.CredentialType[]
      description: Credential types that can be used for authentication
    content.vb: Function GetCredentialTypesForUserType(userType As UserType) As CredentialType()
  overload: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  id: SaveUntrustedCredentials(System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentials(String, UntrustedCredentials)
  nameWithType: IUserAgent.SaveUntrustedCredentials(String, UntrustedCredentials)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials(System.String, SuperOffice.CRM.Services.UntrustedCredentials)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave credentials for authenticated user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void SaveUntrustedCredentials(string type, UntrustedCredentials credentials)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: credentials
      type: SuperOffice.CRM.Services.UntrustedCredentials
      description: Credentials to save.
    content.vb: Sub SaveUntrustedCredentials(type As String, credentials As UntrustedCredentials)
  overload: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  id: GetUntrustedCredentials(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentials(String)
  nameWithType: IUserAgent.GetUntrustedCredentials(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a set of credentials of a specified type for authenticated user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UntrustedCredentials[] GetUntrustedCredentials(string type)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;).'
    return:
      type: SuperOffice.CRM.Services.UntrustedCredentials[]
      description: Array of credentials of the specified type.
    content.vb: Function GetUntrustedCredentials(type As String) As UntrustedCredentials()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  id: GetUntrustedCredentialsForAssociate(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentialsForAssociate(Int32, String)
  nameWithType: IUserAgent.GetUntrustedCredentialsForAssociate(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a set of credentials of a specified type for a specified user. SecretValue is only populated for authenticated user, and system users.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UntrustedCredentials[] GetUntrustedCredentialsForAssociate(int associateId, string type)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of user to retrieve credentials for.
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;).'
    return:
      type: SuperOffice.CRM.Services.UntrustedCredentials[]
      description: Array of credentials of the specified type.
    content.vb: Function GetUntrustedCredentialsForAssociate(associateId As Integer, type As String) As UntrustedCredentials()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  id: SaveUntrustedCredentialsForAssociate(System.Int32,System.String,SuperOffice.CRM.Services.UntrustedCredentials)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentialsForAssociate(Int32, String, UntrustedCredentials)
  nameWithType: IUserAgent.SaveUntrustedCredentialsForAssociate(Int32, String, UntrustedCredentials)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate(System.Int32, System.String, SuperOffice.CRM.Services.UntrustedCredentials)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave credentials for a specified user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void SaveUntrustedCredentialsForAssociate(int associateId, string type, UntrustedCredentials credentials)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of user to save credentials for.
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: credentials
      type: SuperOffice.CRM.Services.UntrustedCredentials
      description: Credentials to save.
    content.vb: Sub SaveUntrustedCredentialsForAssociate(associateId As Integer, type As String, credentials As UntrustedCredentials)
  overload: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate*
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String,System.String)
  id: RemoveUntrustedCredentials(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentials(String, String)
  nameWithType: IUserAgent.RemoveUntrustedCredentials(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove a credentials entry for authenticated user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void RemoveUntrustedCredentials(string type, string publicValue)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: publicValue
      type: System.String
      description: PublicValue field of credentials to remove.
    content.vb: Sub RemoveUntrustedCredentials(type As String, publicValue As String)
  overload: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials*
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  id: RemoveUntrustedCredentialsForAssociate(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentialsForAssociate(Int32, String, String)
  nameWithType: IUserAgent.RemoveUntrustedCredentialsForAssociate(Int32, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate(System.Int32, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove a credentials entry for a specified user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void RemoveUntrustedCredentialsForAssociate(int associateId, string type, string publicValue)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of user to remove credentials for.
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: publicValue
      type: System.String
      description: PublicValue field of credentials to remove.
    content.vb: Sub RemoveUntrustedCredentialsForAssociate(associateId As Integer, type As String, publicValue As String)
  overload: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  id: CreateExternalUser(System.Int32,System.String,System.String,System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateExternalUser(Int32, String, String, Int32, Boolean)
  nameWithType: IUserAgent.CreateExternalUser(Int32, String, String, Int32, Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser(System.Int32, System.String, System.String, System.Int32, System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreates an associate of type external user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: int CreateExternalUser(int personId, string userName, string password, int roleId, bool isActive)
    parameters:
    - id: personId
      type: System.Int32
      description: The personId to create an external user for.
    - id: userName
      type: System.String
      description: Login username.
    - id: password
      type: System.String
      description: Login password.
    - id: roleId
      type: System.Int32
      description: Id of role for the external user. The role must be a role of type external users.
    - id: isActive
      type: System.Boolean
      description: Set isActive to true to enable the external user to log in.
    return:
      type: System.Int32
      description: Returns the created associateId.
    content.vb: Function CreateExternalUser(personId As Integer, userName As String, password As String, roleId As Integer, isActive As Boolean) As Integer
  overload: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  id: DeleteExternalUser(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteExternalUser(Int32)
  nameWithType: IUserAgent.DeleteExternalUser(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDeletes an associate of type external user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void DeleteExternalUser(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: The associateId to delete the associate entry for.
    content.vb: Sub DeleteExternalUser(associateId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser*
- uid: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  id: SetExternalUserInfo(System.Int32,System.String,System.String,System.Boolean,System.Int32,SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetExternalUserInfo(Int32, String, String, Boolean, Int32, ExternalUserInfoModification)
  nameWithType: IUserAgent.SetExternalUserInfo(Int32, String, String, Boolean, Int32, ExternalUserInfoModification)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo(System.Int32, System.String, System.String, System.Boolean, System.Int32, SuperOffice.CRM.Services.Util.ExternalUserInfoModification)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nModifies an external user. Changes external users information according to the flags set in  externalUserInfoModification.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void SetExternalUserInfo(int associateId, string userName, string password, bool isActive, int roleId, ExternalUserInfoModification externalUserInfoModification)
    parameters:
    - id: associateId
      type: System.Int32
      description: The associateId to alter.
    - id: userName
      type: System.String
      description: Login username.
    - id: password
      type: System.String
      description: Login password.
    - id: isActive
      type: System.Boolean
      description: Set isActive to true to enable the external user to log in.
    - id: roleId
      type: System.Int32
      description: Id of role for the external user. The role must be a role of type external users.
    - id: externalUserInfoModification
      type: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
      description: externalUserInfoModification is a flag describing what to change. &lt;see cref=&quot;SuperOffice.CRM.Services.Util.ExternalUserInfoModification&quot;/>.
    content.vb: Sub SetExternalUserInfo(associateId As Integer, userName As String, password As String, isActive As Boolean, roleId As Integer, externalUserInfoModification As ExternalUserInfoModification)
  overload: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo*
- uid: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  id: GenerateNewPasswordForExternalUser(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GenerateNewPasswordForExternalUser(String)
  nameWithType: IUserAgent.GenerateNewPasswordForExternalUser(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGenerates a new password for an external user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string GenerateNewPasswordForExternalUser(string associateName)
    parameters:
    - id: associateName
      type: System.String
      description: The name of the associate to change the password for.
    return:
      type: System.String
      description: Returns the generated password.
    content.vb: Function GenerateNewPasswordForExternalUser(associateName As String) As String
  overload: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser*
- uid: SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  id: CanChangePassword(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CanChangePassword(Int32)
  nameWithType: IUserAgent.CanChangePassword(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.CanChangePassword(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck if the current assoicate can change the password for an associate\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool CanChangePassword(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: AssociateId of the user to check if password can be changed
    return:
      type: System.Boolean
      description: True if the associate can change the password
    content.vb: Function CanChangePassword(associateId As Integer) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.CanChangePassword*
- uid: SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32,System.String,System.String)
  id: ChangePassword(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ChangePassword(Int32, String, String)
  nameWithType: IUserAgent.ChangePassword(Int32, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangePassword(System.Int32, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool ChangePassword(int associateId, string oldPassword, string newPassword)
    parameters:
    - id: associateId
      type: System.Int32
      description: AssociateId of the user to change password for.
    - id: oldPassword
      type: System.String
      description: The current password of the user.  Administrators can leave this blank to force a new password upon a user.
    - id: newPassword
      type: System.String
      description: The new password for the user
    return:
      type: System.Boolean
      description: True if the password was successfully changed.
    content.vb: Function ChangePassword(associateId As Integer, oldPassword As String, newPassword As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.ChangePassword*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  id: GetUserFromPersonId(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserFromPersonId(Int32)
  nameWithType: IUserAgent.GetUserFromPersonId(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns the user associated with the supplied person id\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User[] GetUserFromPersonId(int personId)
    parameters:
    - id: personId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Services.User[]
    content.vb: Function GetUserFromPersonId(personId As Integer) As User()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  id: CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUserFromUserTypeAndPersonId(UserType, Int32)
  nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(UserType, Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId(SuperOffice.License.UserType, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate default User providing the associate type and person id.  System and Anonymous users can be created without an exsisting person and permits person id to be 0.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User CreateDefaultUserFromUserTypeAndPersonId(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of associate for the user
    - id: personId
      type: System.Int32
      description: Primary key of the person to become a user.
    return:
      type: SuperOffice.CRM.Services.User
      description: New user object with defalt values set.
    content.vb: Function CreateDefaultUserFromUserTypeAndPersonId(userType As UserType, personId As Integer) As User
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  id: CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUserFromUserType(UserType)
  nameWithType: IUserAgent.CreateDefaultUserFromUserType(UserType)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType(SuperOffice.License.UserType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate default User providing the user type.  Only System and Anonymous users can be created without an exsisting person.  Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User CreateDefaultUserFromUserType(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of associate for the user.  This can only be System or Anonymous. Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.
    return:
      type: SuperOffice.CRM.Services.User
      description: New user object with defalt values set.
    content.vb: Function CreateDefaultUserFromUserType(userType As UserType) As User
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  id: GetUserFromEjUserId(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserFromEjUserId(Int32)
  nameWithType: IUserAgent.GetUserFromEjUserId(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet user from ejUserId - used for eJournal Legacy Support.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User[] GetUserFromEjUserId(int ejUserId)
    parameters:
    - id: ejUserId
      type: System.Int32
      description: 'ejUserId - '
    return:
      type: SuperOffice.CRM.Services.User[]
    content.vb: Function GetUserFromEjUserId(ejUserId As Integer) As User()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId*
- uid: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String,System.String)
  id: SetPasswordFromName(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetPasswordFromName(String, String)
  nameWithType: IUserAgent.SetPasswordFromName(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool SetPasswordFromName(string associateName, string password)
    parameters:
    - id: associateName
      type: System.String
      description: Username to set password for
    - id: password
      type: System.String
      description: New password
    return:
      type: System.Boolean
      description: Succeeded?
    content.vb: Function SetPasswordFromName(associateName As String, password As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName*
- uid: SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32,System.String)
  id: SetPassword(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetPassword(Int32, String)
  nameWithType: IUserAgent.SetPassword(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetPassword(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool SetPassword(int associateId, string password)
    parameters:
    - id: associateId
      type: System.Int32
      description: Id of User to set password for
    - id: password
      type: System.String
      description: New password
    return:
      type: System.Boolean
      description: Succeeded?
    content.vb: Function SetPassword(associateId As Integer, password As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.SetPassword*
- uid: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String,System.String)
  id: ChangeOwnPassword(System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ChangeOwnPassword(String, String)
  nameWithType: IUserAgent.ChangeOwnPassword(String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword(System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool ChangeOwnPassword(string oldPassword, string newPassword)
    parameters:
    - id: oldPassword
      type: System.String
      description: The current password of the user.  Administrators can leave this blank to force a new password upon a user.
    - id: newPassword
      type: System.String
      description: The new password for the user
    return:
      type: System.Boolean
      description: True if the password was successfully changed.
    content.vb: Function ChangeOwnPassword(oldPassword As String, newPassword As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword*
- uid: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String,System.String,System.String)
  id: ChangePasswordFromName(System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ChangePasswordFromName(String, String, String)
  nameWithType: IUserAgent.ChangePasswordFromName(String, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName(System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChange password for a user.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool ChangePasswordFromName(string associateName, string oldPassword, string newPassword)
    parameters:
    - id: associateName
      type: System.String
      description: Username of the user to change password for.
    - id: oldPassword
      type: System.String
      description: The current password of the user.  Administrators can leave this blank to force a new password upon a user.
    - id: newPassword
      type: System.String
      description: The new password for the user
    return:
      type: System.Boolean
      description: True if the password was successfully changed.
    content.vb: Function ChangePasswordFromName(associateName As String, oldPassword As String, newPassword As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName*
- uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsUserNameValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: IsUserNameValid(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsUserNameValid(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool IsUserNameValid(int associateId, UserType type, int personId, string userName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: userName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsUserNameValid(associateId As Integer, type As UserType, personId As Integer, userName As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid*
- uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsPasswordValid(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: IsPasswordValid(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsPasswordValid(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool IsPasswordValid(int associateId, UserType type, int personId, string password)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: password
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsPasswordValid(associateId As Integer, type As UserType, personId As Integer, password As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid*
- uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  id: SetGeneratedPassword(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetGeneratedPassword(Int32)
  nameWithType: IUserAgent.SetGeneratedPassword(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string SetGeneratedPassword(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
    return:
      type: System.String
    content.vb: Function SetGeneratedPassword(associateId As Integer) As String
  overload: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword*
- uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  id: SetGeneratedPasswordFromName(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SetGeneratedPasswordFromName(String)
  nameWithType: IUserAgent.SetGeneratedPasswordFromName(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string SetGeneratedPasswordFromName(string associateName)
    parameters:
    - id: associateName
      type: System.String
    return:
      type: System.String
    content.vb: Function SetGeneratedPasswordFromName(associateName As String) As String
  overload: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName*
- uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsPasswordValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: IsPasswordValidWithReason(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsPasswordValidWithReason(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserValidationResult IsPasswordValidWithReason(int associateId, UserType type, int personId, string password)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: password
      type: System.String
    return:
      type: SuperOffice.CRM.Services.UserValidationResult
    content.vb: Function IsPasswordValidWithReason(associateId As Integer, type As UserType, personId As Integer, password As String) As UserValidationResult
  overload: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason*
- uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: IsUserNameValidWithReason(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: IsUserNameValidWithReason(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.IsUserNameValidWithReason(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserValidationResult IsUserNameValidWithReason(int associateId, UserType type, int personId, string userName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: userName
      type: System.String
    return:
      type: SuperOffice.CRM.Services.UserValidationResult
    content.vb: Function IsUserNameValidWithReason(associateId As Integer, type As UserType, personId As Integer, userName As String) As UserValidationResult
  overload: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason*
- uid: SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  id: ChangeUserType(SuperOffice.CRM.Services.User,SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ChangeUserType(User, UserType)
  nameWithType: IUserAgent.ChangeUserType(User, UserType)
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangeUserType(SuperOffice.CRM.Services.User, SuperOffice.License.UserType)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a user from the user name.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User ChangeUserType(User user, UserType userType)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: User name of the user to get.
    - id: userType
      type: SuperOffice.License.UserType
    return:
      type: SuperOffice.CRM.Services.User
      description: User retrieved by name
    content.vb: Function ChangeUserType(user As User, userType As UserType) As User
  overload: SuperOffice.CRM.Services.IUserAgent.ChangeUserType*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  id: CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType,System.Int32,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultUserFromUserTypeAndCredential(UserType, Int32, String, String, String)
  nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndCredential(UserType, Int32, String, String, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential(SuperOffice.License.UserType, System.Int32, System.String, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreates a PersonEntity with default values based on the contactId and credentials.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: User CreateDefaultUserFromUserTypeAndCredential(UserType userType, int contactId, string credentialType, string credentialValue, string credentialDisplayValue)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of associate for the user
    - id: contactId
      type: System.Int32
      description: Contact id of the person
    - id: credentialType
      type: System.String
      description: Type of credentials, corresponding to name of plugin and type in the credentials table.
    - id: credentialValue
      type: System.String
      description: This is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory
    - id: credentialDisplayValue
      type: System.String
      description: The value displayed to the user. this will typically be the users login name in active directory.
    return:
      type: SuperOffice.CRM.Services.User
    content.vb: Function CreateDefaultUserFromUserTypeAndCredential(userType As UserType, contactId As Integer, credentialType As String, credentialValue As String, credentialDisplayValue As String) As User
  overload: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential*
- uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  id: GetValidUserName(System.Int32,SuperOffice.License.UserType,System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetValidUserName(Int32, UserType, Int32, String)
  nameWithType: IUserAgent.GetValidUserName(Int32, UserType, Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserName(System.Int32, SuperOffice.License.UserType, System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string GetValidUserName(int associateId, UserType type, int personId, string userName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    - id: userName
      type: System.String
    return:
      type: System.String
    content.vb: Function GetValidUserName(associateId As Integer, type As UserType, personId As Integer, userName As String) As String
  overload: SuperOffice.CRM.Services.IUserAgent.GetValidUserName*
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  id: RemoveLicenses(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: RemoveLicenses(Int32)
  nameWithType: IUserAgent.RemoveLicenses(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove all user licenses.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void RemoveLicenses(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
    content.vb: Sub RemoveLicenses(associateId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses*
- uid: SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32,System.Boolean)
  id: MakeRetired(System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: MakeRetired(Int32, Boolean)
  nameWithType: IUserAgent.MakeRetired(Int32, Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.MakeRetired(System.Int32, System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRetiring a user means to remove all licenses, setting person.retired=1 and associate.deleted=1. Unretiering a user means setting  person.retired=0 and associate.deleted=0\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void MakeRetired(int associateId, bool retired)
    parameters:
    - id: associateId
      type: System.Int32
    - id: retired
      type: System.Boolean
    content.vb: Sub MakeRetired(associateId As Integer, retired As Boolean)
  overload: SuperOffice.CRM.Services.IUserAgent.MakeRetired*
- uid: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  id: AddOwnerContact(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: AddOwnerContact(Int32)
  nameWithType: IUserAgent.AddOwnerContact(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void AddOwnerContact(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: Id of the contact to add as a owner contact
    content.vb: Sub AddOwnerContact(contactId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact*
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  id: RemoveOwnerContact(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: RemoveOwnerContact(Int32)
  nameWithType: IUserAgent.RemoveOwnerContact(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRemove a contact from the ownercontactlink table\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void RemoveOwnerContact(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: The id of the contact to remove
    content.vb: Sub RemoveOwnerContact(contactId As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact*
- uid: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  id: ResolveUserFromInfo(System.Int32,System.String,System.String[],System.String[],SuperOffice.License.UserType,SuperOffice.CRM.Services.Credential)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ResolveUserFromInfo(Int32, String, String[], String[], UserType, Credential)
  nameWithType: IUserAgent.ResolveUserFromInfo(Int32, String, String[], String[], UserType, Credential)
  fullName: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32, System.String, System.String[], System.String[], SuperOffice.License.UserType, SuperOffice.CRM.Services.Credential)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet a user from the provided information. If the user or associated person does not exist, it will be created on demand.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: ResolvedUser ResolveUserFromInfo(int contactId, string personName, string[] phoneNumbers, string[] emails, UserType userType, Credential credential)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact Id of the contact which the person belongs to. Cannot be 0.
    - id: personName
      type: System.String
      description: The full name of the person to be resolved. Optional.
    - id: phoneNumbers
      type: System.String[]
      description: Phone numbers registered on the person. Optional.
    - id: emails
      type: System.String[]
      description: Email-addresses registered on the person. Optional.
    - id: userType
      type: SuperOffice.License.UserType
      description: The type of user to look up or create.
    - id: credential
      type: SuperOffice.CRM.Services.Credential
      description: The credentials to be used for the user. Required.
    return:
      type: SuperOffice.CRM.Services.ResolvedUser
      description: The results of the resolve-operation.
    content.vb: Function ResolveUserFromInfo(contactId As Integer, personName As String, phoneNumbers As String(), emails As String(), userType As UserType, credential As Credential) As ResolvedUser
  overload: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo*
  nameWithType.vb: IUserAgent.ResolveUserFromInfo(Int32, String, String(), String(), UserType, Credential)
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo(System.Int32, System.String, System.String(), System.String(), SuperOffice.License.UserType, SuperOffice.CRM.Services.Credential)
  name.vb: ResolveUserFromInfo(Int32, String, String(), String(), UserType, Credential)
- uid: SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String,System.Boolean)
  id: GetAccessToken(System.String,System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetAccessToken(String, Boolean)
  nameWithType: IUserAgent.GetAccessToken(String, Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessToken(System.String, System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet an access token based on the current user&apos;s session.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string GetAccessToken(string app_token, bool includeCsSession)
    parameters:
    - id: app_token
      type: System.String
      description: Application token to get access on behalf of. Optional.
    - id: includeCsSession
      type: System.Boolean
      description: Initialize CS session for this access token?.
    return:
      type: System.String
      description: An access token. &quot;8A:xyz123==&quot;
    content.vb: Function GetAccessToken(app_token As String, includeCsSession As Boolean) As String
  overload: SuperOffice.CRM.Services.IUserAgent.GetAccessToken*
- uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  id: GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetValidUserNameForNewUser(User)
  nameWithType: IUserAgent.GetValidUserNameForNewUser(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGenerates a valid username for an unsaved user\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string GetValidUserNameForNewUser(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
    return:
      type: System.String
    content.vb: Function GetValidUserNameForNewUser(user As User) As String
  overload: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser*
- uid: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  id: GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetDefaultAssociateUserName(User)
  nameWithType: IUserAgent.GetDefaultAssociateUserName(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet the default username for a person\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string GetDefaultAssociateUserName(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
    return:
      type: System.String
    content.vb: Function GetDefaultAssociateUserName(user As User) As String
  overload: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName*
- uid: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32,System.String)
  id: IsNickNameUnique(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: IsNickNameUnique(Int32, String)
  nameWithType: IUserAgent.IsNickNameUnique(Int32, String)
  fullName: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique(System.Int32, System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\n\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool IsNickNameUnique(int associateId, string nickName)
    parameters:
    - id: associateId
      type: System.Int32
    - id: nickName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsNickNameUnique(associateId As Integer, nickName As String) As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique*
- uid: SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  id: ValidateUser(SuperOffice.CRM.Services.User)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: ValidateUser(User)
  nameWithType: IUserAgent.ValidateUser(User)
  fullName: SuperOffice.CRM.Services.IUserAgent.ValidateUser(SuperOffice.CRM.Services.User)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck that entity is ready for saving, return error messages by field.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: StringDictionary ValidateUser(User user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Services.User
      description: Entity to be checked for errors.
    return:
      type: SuperOffice.CRM.Services.StringDictionary
      description: Error messages tagged by field.
    content.vb: Function ValidateUser(user As User) As StringDictionary
  overload: SuperOffice.CRM.Services.IUserAgent.ValidateUser*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  id: GetUserGroup(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserGroup(Int32)
  nameWithType: IUserAgent.GetUserGroup(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroup(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a UserGroup object.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserGroup GetUserGroup(int userGroupId)
    parameters:
    - id: userGroupId
      type: System.Int32
      description: The identifier of the UserGroup object
    return:
      type: SuperOffice.CRM.Services.UserGroup
      description: UserGroup
    content.vb: Function GetUserGroup(userGroupId As Integer) As UserGroup
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserGroup*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  id: SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveUserGroup(UserGroup)
  nameWithType: IUserAgent.SaveUserGroup(UserGroup)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup(SuperOffice.CRM.Services.UserGroup)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSave a user group.  Set UserGroup.Deleted to mark a user group as deleted and invisible in the user interface.\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserGroup SaveUserGroup(UserGroup userGroup)
    parameters:
    - id: userGroup
      type: SuperOffice.CRM.Services.UserGroup
      description: UserGroup to save
    return:
      type: SuperOffice.CRM.Services.UserGroup
      description: UserGroup as saved to the database
    content.vb: Function SaveUserGroup(userGroup As UserGroup) As UserGroup
  overload: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup*
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  id: GetAllUserGroups(System.Boolean)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetAllUserGroups(Boolean)
  nameWithType: IUserAgent.GetAllUserGroups(Boolean)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups(System.Boolean)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGet all user groups\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserGroup[] GetAllUserGroups(bool includeDeleted)
    parameters:
    - id: includeDeleted
      type: System.Boolean
      description: Include user groups with Deleted set to true
    return:
      type: SuperOffice.CRM.Services.UserGroup[]
      description: All user groups
    content.vb: Function GetAllUserGroups(includeDeleted As Boolean) As UserGroup()
  overload: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups*
- uid: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  id: CreateUserGroup
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CreateUserGroup()
  nameWithType: IUserAgent.CreateUserGroup()
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nCreate UserGroup (Rank is assigned to the highest rank)\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserGroup CreateUserGroup()
    return:
      type: SuperOffice.CRM.Services.UserGroup
    content.vb: Function CreateUserGroup As UserGroup
  overload: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup*
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32,System.Int32)
  id: DeleteUserGroup(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DeleteUserGroup(Int32, Int32)
  nameWithType: IUserAgent.DeleteUserGroup(Int32, Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup(System.Int32, System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nDelete a usergroup and move its members to another usergroup\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: void DeleteUserGroup(int userGroupToDelete, int userGroupToMoveTo)
    parameters:
    - id: userGroupToDelete
      type: System.Int32
      description: The id of the userGroup to delete
    - id: userGroupToMoveTo
      type: System.Int32
      description: The id of the userGroup to move the members to
    content.vb: Sub DeleteUserGroup(userGroupToDelete As Integer, userGroupToMoveTo As Integer)
  overload: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  id: GetUserGroupList(System.Int32[])
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserGroupList(Int32[])
  nameWithType: IUserAgent.GetUserGroupList(Int32[])
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets an array of UserGroup objects.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserGroup[] GetUserGroupList(int[] userGroupIds)
    parameters:
    - id: userGroupIds
      type: System.Int32[]
      description: The identifiers of the UserGroup object
    return:
      type: SuperOffice.CRM.Services.UserGroup[]
      description: Array of UserGroup objects
    content.vb: Function GetUserGroupList(userGroupIds As Integer()) As UserGroup()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList*
  nameWithType.vb: IUserAgent.GetUserGroupList(Int32())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList(System.Int32())
  name.vb: GetUserGroupList(Int32())
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  id: GetUserInfo(System.Int32)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserInfo(Int32)
  nameWithType: IUserAgent.GetUserInfo(Int32)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfo(System.Int32)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets a UserInfo object.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserInfo GetUserInfo(int userInfoId)
    parameters:
    - id: userInfoId
      type: System.Int32
      description: The identifier of the UserInfo object
    return:
      type: SuperOffice.CRM.Services.UserInfo
      description: UserInfo
    content.vb: Function GetUserInfo(userInfoId As Integer) As UserInfo
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserInfo*
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  id: GetUserInfoList(System.Int32[])
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetUserInfoList(Int32[])
  nameWithType: IUserAgent.GetUserInfoList(Int32[])
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32[])
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nGets an array of UserInfo objects.                        \n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: UserInfo[] GetUserInfoList(int[] userInfoIds)
    parameters:
    - id: userInfoIds
      type: System.Int32[]
      description: The identifiers of the UserInfo object
    return:
      type: SuperOffice.CRM.Services.UserInfo[]
      description: Array of UserInfo objects
    content.vb: Function GetUserInfoList(userInfoIds As Integer()) As UserInfo()
  overload: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList*
  nameWithType.vb: IUserAgent.GetUserInfoList(Int32())
  fullName.vb: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList(System.Int32())
  name.vb: GetUserInfoList(Int32())
- uid: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  id: GetAccessGatewayInfo
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetAccessGatewayInfo()
  nameWithType: IUserAgent.GetAccessGatewayInfo()
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns accessgateway registration info\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: AccessGatewayInfo GetAccessGatewayInfo()
    return:
      type: SuperOffice.CRM.Services.AccessGatewayInfo
    content.vb: Function GetAccessGatewayInfo As AccessGatewayInfo
  overload: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo*
- uid: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  id: GetOrRegisterAccessGatewayInfo(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetOrRegisterAccessGatewayInfo(String)
  nameWithType: IUserAgent.GetOrRegisterAccessGatewayInfo(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nReturns accessgateway registration info and registers a new or adds the url if necessary\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: AccessGatewayInfo GetOrRegisterAccessGatewayInfo(string redirectUri)
    parameters:
    - id: redirectUri
      type: System.String
      description: This is the registered redirect_uri for AccessGateway OIDC.
    return:
      type: SuperOffice.CRM.Services.AccessGatewayInfo
    content.vb: Function GetOrRegisterAccessGatewayInfo(redirectUri As String) As AccessGatewayInfo
  overload: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo*
- uid: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  id: RegisterWithAccessGateway(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: RegisterWithAccessGateway(String)
  nameWithType: IUserAgent.RegisterWithAccessGateway(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRegisters with access gateway if not already done, otherwise will attempt to update\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: AccessGatewayInfo RegisterWithAccessGateway(string redirectUri)
    parameters:
    - id: redirectUri
      type: System.String
      description: This is the registered redirect_uri for AccessGateway OIDC.
    return:
      type: SuperOffice.CRM.Services.AccessGatewayInfo
    content.vb: Function RegisterWithAccessGateway(redirectUri As String) As AccessGatewayInfo
  overload: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway*
- uid: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  commentId: M:SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  id: CheckAccessGatewayRegistration
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: CheckAccessGatewayRegistration()
  nameWithType: IUserAgent.CheckAccessGatewayRegistration()
  fullName: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration()
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nChecks if AccessGatewayRegistration is valid\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: bool CheckAccessGatewayRegistration()
    return:
      type: System.Boolean
      description: True if the registration is usable
    content.vb: Function CheckAccessGatewayRegistration As Boolean
  overload: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration*
- uid: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  id: SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: SaveExternalTokens(TokenManagementInfo)
  nameWithType: IUserAgent.SaveExternalTokens(TokenManagementInfo)
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nSaves the external tokens to the DB and returns a key that can be used to retrieve them\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string SaveExternalTokens(TokenManagementInfo tokenManagementInfo)
    parameters:
    - id: tokenManagementInfo
      type: SuperOffice.CRM.Services.TokenManagementInfo
      description: Token information.
    return:
      type: System.String
      description: Key that can be used to retrieve the tokens
    content.vb: Function SaveExternalTokens(tokenManagementInfo As TokenManagementInfo) As String
  overload: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens*
- uid: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  id: DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: DecryptAndSaveExternalTokens(TokenManagementInfo)
  nameWithType: IUserAgent.DecryptAndSaveExternalTokens(TokenManagementInfo)
  fullName: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens(SuperOffice.CRM.Services.TokenManagementInfo)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nFirst asks AccessGateway to decrypt the tokens, then saves the external tokens to the DB and returns a key that can be used to retrieve them\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: string DecryptAndSaveExternalTokens(TokenManagementInfo tokenManagementInfo)
    parameters:
    - id: tokenManagementInfo
      type: SuperOffice.CRM.Services.TokenManagementInfo
      description: Token information.
    return:
      type: System.String
      description: Key that can be used to retrieve the tokens
    content.vb: Function DecryptAndSaveExternalTokens(tokenManagementInfo As TokenManagementInfo) As String
  overload: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens*
- uid: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  commentId: M:SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  id: GetExternalTokens(System.String)
  parent: SuperOffice.CRM.Services.IUserAgent
  langs:
  - csharp
  - vb
  name: GetExternalTokens(String)
  nameWithType: IUserAgent.GetExternalTokens(String)
  fullName: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens(System.String)
  type: Method
  source:
    path: SuperOffice.Services
    isExternal: true
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: "\nRetrieve the tokens from the DB based on the given key\n<p></p>\n<strong>Online Restricted:</strong> The User agent is not available in Online by default. User management is not allowed for partner apps.\n"
  syntax:
    content: TokenManagementInfo GetExternalTokens(string key)
    parameters:
    - id: key
      type: System.String
      description: Token retrievel key
    return:
      type: SuperOffice.CRM.Services.TokenManagementInfo
      description: Key to retrieve tokens
    content.vb: Function GetExternalTokens(key As String) As TokenManagementInfo
  overload: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens*
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
  isExternal: true
  name: CreateDefaultServiceAuth
  nameWithType: IUserAgent.CreateDefaultServiceAuth
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultServiceAuth
- uid: SuperOffice.CRM.Services.ServiceAuth
  commentId: T:SuperOffice.CRM.Services.ServiceAuth
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ServiceAuth
  nameWithType: ServiceAuth
  fullName: SuperOffice.CRM.Services.ServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth
  isExternal: true
  name: SaveServiceAuth
  nameWithType: IUserAgent.SaveServiceAuth
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth
  isExternal: true
  name: DeleteServiceAuth
  nameWithType: IUserAgent.DeleteServiceAuth
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteServiceAuth
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
  isExternal: true
  name: CreateDefaultRoleEntity
  nameWithType: IUserAgent.CreateDefaultRoleEntity
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntity
- uid: SuperOffice.CRM.Services.RoleEntity
  commentId: T:SuperOffice.CRM.Services.RoleEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: RoleEntity
  nameWithType: RoleEntity
  fullName: SuperOffice.CRM.Services.RoleEntity
- uid: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity
  isExternal: true
  name: SaveRoleEntity
  nameWithType: IUserAgent.SaveRoleEntity
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveRoleEntity
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
  isExternal: true
  name: CreateDefaultUntrustedCredentials
  nameWithType: IUserAgent.CreateDefaultUntrustedCredentials
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUntrustedCredentials
- uid: SuperOffice.CRM.Services.UntrustedCredentials
  commentId: T:SuperOffice.CRM.Services.UntrustedCredentials
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UntrustedCredentials
  nameWithType: UntrustedCredentials
  fullName: SuperOffice.CRM.Services.UntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
  isExternal: true
  name: CreateDefaultUser
  nameWithType: IUserAgent.CreateDefaultUser
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUser
- uid: SuperOffice.CRM.Services.User
  commentId: T:SuperOffice.CRM.Services.User
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: User
  nameWithType: User
  fullName: SuperOffice.CRM.Services.User
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveUser
  isExternal: true
  name: SaveUser
  nameWithType: IUserAgent.SaveUser
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserCommands*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserCommands
  isExternal: true
  name: GetUserCommands
  nameWithType: IUserAgent.GetUserCommands
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserCommands
- uid: SuperOffice.CRM.Services.CustomCommand[]
  isExternal: true
  name: CustomCommand[]
  nameWithType: CustomCommand[]
  fullName: SuperOffice.CRM.Services.CustomCommand[]
  nameWithType.vb: CustomCommand()
  fullName.vb: SuperOffice.CRM.Services.CustomCommand()
  name.vb: CustomCommand()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.CustomCommand
    name: CustomCommand
    nameWithType: CustomCommand
    fullName: SuperOffice.CRM.Services.CustomCommand
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.CustomCommand
    name: CustomCommand
    nameWithType: CustomCommand
    fullName: SuperOffice.CRM.Services.CustomCommand
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand
  isExternal: true
  name: ExecuteUserCommand
  nameWithType: IUserAgent.ExecuteUserCommand
  fullName: SuperOffice.CRM.Services.IUserAgent.ExecuteUserCommand
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.CommandActionResult
  isExternal: true
  name: CommandActionResult
  nameWithType: CommandActionResult
  fullName: SuperOffice.Data.CommandActionResult
- uid: SuperOffice.CRM.Services.CommandResult
  commentId: T:SuperOffice.CRM.Services.CommandResult
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: CommandResult
  nameWithType: CommandResult
  fullName: SuperOffice.CRM.Services.CommandResult
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteUser
  isExternal: true
  name: DeleteUser
  nameWithType: IUserAgent.DeleteUser
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUser
- uid: SuperOffice.CRM.Services.IUserAgent.SaveCredential*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveCredential
  isExternal: true
  name: SaveCredential
  nameWithType: IUserAgent.SaveCredential
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveCredential
- uid: SuperOffice.CRM.Services.Credential
  commentId: T:SuperOffice.CRM.Services.Credential
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: Credential
  nameWithType: Credential
  fullName: SuperOffice.CRM.Services.Credential
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteCredential*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteCredential
  isExternal: true
  name: DeleteCredential
  nameWithType: IUserAgent.DeleteCredential
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteCredential
- uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups
  isExternal: true
  name: FindCredentialsGroups
  nameWithType: IUserAgent.FindCredentialsGroups
  fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialsGroups
- uid: SuperOffice.CRM.Services.CredentialsGroup[]
  isExternal: true
  name: CredentialsGroup[]
  nameWithType: CredentialsGroup[]
  fullName: SuperOffice.CRM.Services.CredentialsGroup[]
  nameWithType.vb: CredentialsGroup()
  fullName.vb: SuperOffice.CRM.Services.CredentialsGroup()
  name.vb: CredentialsGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.CredentialsGroup
    name: CredentialsGroup
    nameWithType: CredentialsGroup
    fullName: SuperOffice.CRM.Services.CredentialsGroup
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.CredentialsGroup
    name: CredentialsGroup
    nameWithType: CredentialsGroup
    fullName: SuperOffice.CRM.Services.CredentialsGroup
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers
  isExternal: true
  name: FindCredentialUsers
  nameWithType: IUserAgent.FindCredentialUsers
  fullName: SuperOffice.CRM.Services.IUserAgent.FindCredentialUsers
- uid: SuperOffice.CRM.Services.CredentialsGroupUsers
  commentId: T:SuperOffice.CRM.Services.CredentialsGroupUsers
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: CredentialsGroupUsers
  nameWithType: CredentialsGroupUsers
  fullName: SuperOffice.CRM.Services.CredentialsGroupUsers
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup
  isExternal: true
  name: GetCredentialUsersInGroup
  nameWithType: IUserAgent.GetCredentialUsersInGroup
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialUsersInGroup
- uid: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetServiceAuth
  isExternal: true
  name: GetServiceAuth
  nameWithType: IUserAgent.GetServiceAuth
  fullName: SuperOffice.CRM.Services.IUserAgent.GetServiceAuth
- uid: SuperOffice.CRM.Services.IUserAgent.GetRole*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetRole
  isExternal: true
  name: GetRole
  nameWithType: IUserAgent.GetRole
  fullName: SuperOffice.CRM.Services.IUserAgent.GetRole
- uid: SuperOffice.CRM.Services.Role
  commentId: T:SuperOffice.CRM.Services.Role
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: Role
  nameWithType: Role
  fullName: SuperOffice.CRM.Services.Role
- uid: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetRoleEntity
  isExternal: true
  name: GetRoleEntity
  nameWithType: IUserAgent.GetRoleEntity
  fullName: SuperOffice.CRM.Services.IUserAgent.GetRoleEntity
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteRole*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteRole
  isExternal: true
  name: DeleteRole
  nameWithType: IUserAgent.DeleteRole
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteRole
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllRoles*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetAllRoles
  isExternal: true
  name: GetAllRoles
  nameWithType: IUserAgent.GetAllRoles
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllRoles
- uid: SuperOffice.Data.RoleType
  isExternal: true
  name: RoleType
  nameWithType: RoleType
  fullName: SuperOffice.Data.RoleType
- uid: SuperOffice.CRM.Services.SelectableMDOListItem[]
  isExternal: true
  name: SelectableMDOListItem[]
  nameWithType: SelectableMDOListItem[]
  fullName: SuperOffice.CRM.Services.SelectableMDOListItem[]
  nameWithType.vb: SelectableMDOListItem()
  fullName.vb: SuperOffice.CRM.Services.SelectableMDOListItem()
  name.vb: SelectableMDOListItem()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.SelectableMDOListItem
    name: SelectableMDOListItem
    nameWithType: SelectableMDOListItem
    fullName: SuperOffice.CRM.Services.SelectableMDOListItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.SelectableMDOListItem
    name: SelectableMDOListItem
    nameWithType: SelectableMDOListItem
    fullName: SuperOffice.CRM.Services.SelectableMDOListItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights
  isExternal: true
  name: GetAllFunctionalRights
  nameWithType: IUserAgent.GetAllFunctionalRights
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights
  isExternal: true
  name: GetFunctionalRights
  nameWithType: IUserAgent.GetFunctionalRights
  fullName: SuperOffice.CRM.Services.IUserAgent.GetFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights
  isExternal: true
  name: SetFunctionalRights
  nameWithType: IUserAgent.SetFunctionalRights
  fullName: SuperOffice.CRM.Services.IUserAgent.SetFunctionalRights
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.SetDataRight*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetDataRight
  isExternal: true
  name: SetDataRight
  nameWithType: IUserAgent.SetDataRight
  fullName: SuperOffice.CRM.Services.IUserAgent.SetDataRight
- uid: SuperOffice.CRM.Services.Util.RoleRelationToOwner
  commentId: T:SuperOffice.CRM.Services.Util.RoleRelationToOwner
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  name: RoleRelationToOwner
  nameWithType: RoleRelationToOwner
  fullName: SuperOffice.CRM.Services.Util.RoleRelationToOwner
- uid: SuperOffice.CRM.Services.Util
  commentId: N:SuperOffice.CRM.Services.Util
  isExternal: true
  name: SuperOffice.CRM.Services.Util
  nameWithType: SuperOffice.CRM.Services.Util
  fullName: SuperOffice.CRM.Services.Util
- uid: SuperOffice.CRM.Services.IUserAgent.GetDataRight*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetDataRight
  isExternal: true
  name: GetDataRight
  nameWithType: IUserAgent.GetDataRight
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRight
- uid: SuperOffice.CRM.Services.IUserAgent.GetDataRights*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetDataRights
  isExternal: true
  name: GetDataRights
  nameWithType: IUserAgent.GetDataRights
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDataRights
- uid: SuperOffice.CRM.Services.StringDictionary
  isExternal: true
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: SuperOffice.CRM.Services.StringDictionary
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType
  isExternal: true
  name: CreateDefaultRoleEntityFromType
  nameWithType: IUserAgent.CreateDefaultRoleEntityFromType
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultRoleEntityFromType
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight
  isExternal: true
  name: FindRolesWithFunctionalRight
  nameWithType: IUserAgent.FindRolesWithFunctionalRight
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRight
- uid: SuperOffice.CRM.Services.MDOListItem[]
  isExternal: true
  name: MDOListItem[]
  nameWithType: MDOListItem[]
  fullName: SuperOffice.CRM.Services.MDOListItem[]
  nameWithType.vb: MDOListItem()
  fullName.vb: SuperOffice.CRM.Services.MDOListItem()
  name.vb: MDOListItem()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.MDOListItem
    name: MDOListItem
    nameWithType: MDOListItem
    fullName: SuperOffice.CRM.Services.MDOListItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.MDOListItem
    name: MDOListItem
    nameWithType: MDOListItem
    fullName: SuperOffice.CRM.Services.MDOListItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights
  isExternal: true
  name: FindRolesWithFunctionalRights
  nameWithType: IUserAgent.FindRolesWithFunctionalRights
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithFunctionalRights
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights
  isExternal: true
  name: FindRolesWithoutFunctionalRights
  nameWithType: IUserAgent.FindRolesWithoutFunctionalRights
  fullName: SuperOffice.CRM.Services.IUserAgent.FindRolesWithoutFunctionalRights
- uid: SuperOffice.CRM.Services.IUserAgent.GetUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUser
  isExternal: true
  name: GetUser
  nameWithType: IUserAgent.GetUser
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserFromName
  isExternal: true
  name: GetUserFromName
  nameWithType: IUserAgent.GetUserFromName
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromName
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveUserFromName
  isExternal: true
  name: SaveUserFromName
  nameWithType: IUserAgent.SaveUserFromName
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserFromName
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName
  isExternal: true
  name: DeleteUserFromName
  nameWithType: IUserAgent.DeleteUserFromName
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserFromName
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
  isExternal: true
  name: GetCredentialTypes
  nameWithType: IUserAgent.GetCredentialTypes
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypes
- uid: SuperOffice.CRM.Services.CredentialType[]
  isExternal: true
  name: CredentialType[]
  nameWithType: CredentialType[]
  fullName: SuperOffice.CRM.Services.CredentialType[]
  nameWithType.vb: CredentialType()
  fullName.vb: SuperOffice.CRM.Services.CredentialType()
  name.vb: CredentialType()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.CredentialType
    name: CredentialType
    nameWithType: CredentialType
    fullName: SuperOffice.CRM.Services.CredentialType
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.CredentialType
    name: CredentialType
    nameWithType: CredentialType
    fullName: SuperOffice.CRM.Services.CredentialType
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType
  isExternal: true
  name: GetCredentialTypesForUserType
  nameWithType: IUserAgent.GetCredentialTypesForUserType
  fullName: SuperOffice.CRM.Services.IUserAgent.GetCredentialTypesForUserType
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials
  isExternal: true
  name: SaveUntrustedCredentials
  nameWithType: IUserAgent.SaveUntrustedCredentials
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials
  isExternal: true
  name: GetUntrustedCredentials
  nameWithType: IUserAgent.GetUntrustedCredentials
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentials
- uid: SuperOffice.CRM.Services.UntrustedCredentials[]
  isExternal: true
  name: UntrustedCredentials[]
  nameWithType: UntrustedCredentials[]
  fullName: SuperOffice.CRM.Services.UntrustedCredentials[]
  nameWithType.vb: UntrustedCredentials()
  fullName.vb: SuperOffice.CRM.Services.UntrustedCredentials()
  name.vb: UntrustedCredentials()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.CRM.Services.UntrustedCredentials
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate
  isExternal: true
  name: GetUntrustedCredentialsForAssociate
  nameWithType: IUserAgent.GetUntrustedCredentialsForAssociate
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUntrustedCredentialsForAssociate
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate
  isExternal: true
  name: SaveUntrustedCredentialsForAssociate
  nameWithType: IUserAgent.SaveUntrustedCredentialsForAssociate
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUntrustedCredentialsForAssociate
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials
  isExternal: true
  name: RemoveUntrustedCredentials
  nameWithType: IUserAgent.RemoveUntrustedCredentials
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentials
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate
  isExternal: true
  name: RemoveUntrustedCredentialsForAssociate
  nameWithType: IUserAgent.RemoveUntrustedCredentialsForAssociate
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveUntrustedCredentialsForAssociate
- uid: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateExternalUser
  isExternal: true
  name: CreateExternalUser
  nameWithType: IUserAgent.CreateExternalUser
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateExternalUser
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser
  isExternal: true
  name: DeleteExternalUser
  nameWithType: IUserAgent.DeleteExternalUser
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteExternalUser
- uid: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo
  isExternal: true
  name: SetExternalUserInfo
  nameWithType: IUserAgent.SetExternalUserInfo
  fullName: SuperOffice.CRM.Services.IUserAgent.SetExternalUserInfo
- uid: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
  commentId: T:SuperOffice.CRM.Services.Util.ExternalUserInfoModification
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  name: ExternalUserInfoModification
  nameWithType: ExternalUserInfoModification
  fullName: SuperOffice.CRM.Services.Util.ExternalUserInfoModification
- uid: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser
  isExternal: true
  name: GenerateNewPasswordForExternalUser
  nameWithType: IUserAgent.GenerateNewPasswordForExternalUser
  fullName: SuperOffice.CRM.Services.IUserAgent.GenerateNewPasswordForExternalUser
- uid: SuperOffice.CRM.Services.IUserAgent.CanChangePassword*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CanChangePassword
  isExternal: true
  name: CanChangePassword
  nameWithType: IUserAgent.CanChangePassword
  fullName: SuperOffice.CRM.Services.IUserAgent.CanChangePassword
- uid: SuperOffice.CRM.Services.IUserAgent.ChangePassword*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ChangePassword
  isExternal: true
  name: ChangePassword
  nameWithType: IUserAgent.ChangePassword
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangePassword
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId
  isExternal: true
  name: GetUserFromPersonId
  nameWithType: IUserAgent.GetUserFromPersonId
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromPersonId
- uid: SuperOffice.CRM.Services.User[]
  isExternal: true
  name: User[]
  nameWithType: User[]
  fullName: SuperOffice.CRM.Services.User[]
  nameWithType.vb: User()
  fullName.vb: SuperOffice.CRM.Services.User()
  name.vb: User()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.User
    name: User
    nameWithType: User
    fullName: SuperOffice.CRM.Services.User
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
  isExternal: true
  name: CreateDefaultUserFromUserTypeAndPersonId
  nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndPersonId
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType
  isExternal: true
  name: CreateDefaultUserFromUserType
  nameWithType: IUserAgent.CreateDefaultUserFromUserType
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserType
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId
  isExternal: true
  name: GetUserFromEjUserId
  nameWithType: IUserAgent.GetUserFromEjUserId
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserFromEjUserId
- uid: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName
  isExternal: true
  name: SetPasswordFromName
  nameWithType: IUserAgent.SetPasswordFromName
  fullName: SuperOffice.CRM.Services.IUserAgent.SetPasswordFromName
- uid: SuperOffice.CRM.Services.IUserAgent.SetPassword*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetPassword
  isExternal: true
  name: SetPassword
  nameWithType: IUserAgent.SetPassword
  fullName: SuperOffice.CRM.Services.IUserAgent.SetPassword
- uid: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword
  isExternal: true
  name: ChangeOwnPassword
  nameWithType: IUserAgent.ChangeOwnPassword
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangeOwnPassword
- uid: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName
  isExternal: true
  name: ChangePasswordFromName
  nameWithType: IUserAgent.ChangePasswordFromName
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangePasswordFromName
- uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.IsUserNameValid
  isExternal: true
  name: IsUserNameValid
  nameWithType: IUserAgent.IsUserNameValid
  fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValid
- uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.IsPasswordValid
  isExternal: true
  name: IsPasswordValid
  nameWithType: IUserAgent.IsPasswordValid
  fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValid
- uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword
  isExternal: true
  name: SetGeneratedPassword
  nameWithType: IUserAgent.SetGeneratedPassword
  fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPassword
- uid: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName
  isExternal: true
  name: SetGeneratedPasswordFromName
  nameWithType: IUserAgent.SetGeneratedPasswordFromName
  fullName: SuperOffice.CRM.Services.IUserAgent.SetGeneratedPasswordFromName
- uid: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason
  isExternal: true
  name: IsPasswordValidWithReason
  nameWithType: IUserAgent.IsPasswordValidWithReason
  fullName: SuperOffice.CRM.Services.IUserAgent.IsPasswordValidWithReason
- uid: SuperOffice.CRM.Services.UserValidationResult
  commentId: T:SuperOffice.CRM.Services.UserValidationResult
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UserValidationResult
  nameWithType: UserValidationResult
  fullName: SuperOffice.CRM.Services.UserValidationResult
- uid: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason
  isExternal: true
  name: IsUserNameValidWithReason
  nameWithType: IUserAgent.IsUserNameValidWithReason
  fullName: SuperOffice.CRM.Services.IUserAgent.IsUserNameValidWithReason
- uid: SuperOffice.CRM.Services.IUserAgent.ChangeUserType*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ChangeUserType
  isExternal: true
  name: ChangeUserType
  nameWithType: IUserAgent.ChangeUserType
  fullName: SuperOffice.CRM.Services.IUserAgent.ChangeUserType
- uid: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential
  isExternal: true
  name: CreateDefaultUserFromUserTypeAndCredential
  nameWithType: IUserAgent.CreateDefaultUserFromUserTypeAndCredential
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateDefaultUserFromUserTypeAndCredential
- uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetValidUserName
  isExternal: true
  name: GetValidUserName
  nameWithType: IUserAgent.GetValidUserName
  fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserName
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.RemoveLicenses
  isExternal: true
  name: RemoveLicenses
  nameWithType: IUserAgent.RemoveLicenses
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveLicenses
- uid: SuperOffice.CRM.Services.IUserAgent.MakeRetired*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.MakeRetired
  isExternal: true
  name: MakeRetired
  nameWithType: IUserAgent.MakeRetired
  fullName: SuperOffice.CRM.Services.IUserAgent.MakeRetired
- uid: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.AddOwnerContact
  isExternal: true
  name: AddOwnerContact
  nameWithType: IUserAgent.AddOwnerContact
  fullName: SuperOffice.CRM.Services.IUserAgent.AddOwnerContact
- uid: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact
  isExternal: true
  name: RemoveOwnerContact
  nameWithType: IUserAgent.RemoveOwnerContact
  fullName: SuperOffice.CRM.Services.IUserAgent.RemoveOwnerContact
- uid: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo
  isExternal: true
  name: ResolveUserFromInfo
  nameWithType: IUserAgent.ResolveUserFromInfo
  fullName: SuperOffice.CRM.Services.IUserAgent.ResolveUserFromInfo
- uid: SuperOffice.CRM.Services.ResolvedUser
  commentId: T:SuperOffice.CRM.Services.ResolvedUser
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: ResolvedUser
  nameWithType: ResolvedUser
  fullName: SuperOffice.CRM.Services.ResolvedUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetAccessToken*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetAccessToken
  isExternal: true
  name: GetAccessToken
  nameWithType: IUserAgent.GetAccessToken
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessToken
- uid: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser
  isExternal: true
  name: GetValidUserNameForNewUser
  nameWithType: IUserAgent.GetValidUserNameForNewUser
  fullName: SuperOffice.CRM.Services.IUserAgent.GetValidUserNameForNewUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName
  isExternal: true
  name: GetDefaultAssociateUserName
  nameWithType: IUserAgent.GetDefaultAssociateUserName
  fullName: SuperOffice.CRM.Services.IUserAgent.GetDefaultAssociateUserName
- uid: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique
  isExternal: true
  name: IsNickNameUnique
  nameWithType: IUserAgent.IsNickNameUnique
  fullName: SuperOffice.CRM.Services.IUserAgent.IsNickNameUnique
- uid: SuperOffice.CRM.Services.IUserAgent.ValidateUser*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.ValidateUser
  isExternal: true
  name: ValidateUser
  nameWithType: IUserAgent.ValidateUser
  fullName: SuperOffice.CRM.Services.IUserAgent.ValidateUser
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserGroup
  isExternal: true
  name: GetUserGroup
  nameWithType: IUserAgent.GetUserGroup
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroup
- uid: SuperOffice.CRM.Services.UserGroup
  commentId: T:SuperOffice.CRM.Services.UserGroup
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UserGroup
  nameWithType: UserGroup
  fullName: SuperOffice.CRM.Services.UserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveUserGroup
  isExternal: true
  name: SaveUserGroup
  nameWithType: IUserAgent.SaveUserGroup
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups
  isExternal: true
  name: GetAllUserGroups
  nameWithType: IUserAgent.GetAllUserGroups
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAllUserGroups
- uid: SuperOffice.CRM.Services.UserGroup[]
  isExternal: true
  name: UserGroup[]
  nameWithType: UserGroup[]
  fullName: SuperOffice.CRM.Services.UserGroup[]
  nameWithType.vb: UserGroup()
  fullName.vb: SuperOffice.CRM.Services.UserGroup()
  name.vb: UserGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.UserGroup
    name: UserGroup
    nameWithType: UserGroup
    fullName: SuperOffice.CRM.Services.UserGroup
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.UserGroup
    name: UserGroup
    nameWithType: UserGroup
    fullName: SuperOffice.CRM.Services.UserGroup
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
  isExternal: true
  name: CreateUserGroup
  nameWithType: IUserAgent.CreateUserGroup
  fullName: SuperOffice.CRM.Services.IUserAgent.CreateUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup
  isExternal: true
  name: DeleteUserGroup
  nameWithType: IUserAgent.DeleteUserGroup
  fullName: SuperOffice.CRM.Services.IUserAgent.DeleteUserGroup
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserGroupList
  isExternal: true
  name: GetUserGroupList
  nameWithType: IUserAgent.GetUserGroupList
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserGroupList
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfo*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserInfo
  isExternal: true
  name: GetUserInfo
  nameWithType: IUserAgent.GetUserInfo
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfo
- uid: SuperOffice.CRM.Services.UserInfo
  commentId: T:SuperOffice.CRM.Services.UserInfo
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: UserInfo
  nameWithType: UserInfo
  fullName: SuperOffice.CRM.Services.UserInfo
- uid: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetUserInfoList
  isExternal: true
  name: GetUserInfoList
  nameWithType: IUserAgent.GetUserInfoList
  fullName: SuperOffice.CRM.Services.IUserAgent.GetUserInfoList
- uid: SuperOffice.CRM.Services.UserInfo[]
  isExternal: true
  name: UserInfo[]
  nameWithType: UserInfo[]
  fullName: SuperOffice.CRM.Services.UserInfo[]
  nameWithType.vb: UserInfo()
  fullName.vb: SuperOffice.CRM.Services.UserInfo()
  name.vb: UserInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.UserInfo
    name: UserInfo
    nameWithType: UserInfo
    fullName: SuperOffice.CRM.Services.UserInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.UserInfo
    name: UserInfo
    nameWithType: UserInfo
    fullName: SuperOffice.CRM.Services.UserInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
  isExternal: true
  name: GetAccessGatewayInfo
  nameWithType: IUserAgent.GetAccessGatewayInfo
  fullName: SuperOffice.CRM.Services.IUserAgent.GetAccessGatewayInfo
- uid: SuperOffice.CRM.Services.AccessGatewayInfo
  commentId: T:SuperOffice.CRM.Services.AccessGatewayInfo
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: AccessGatewayInfo
  nameWithType: AccessGatewayInfo
  fullName: SuperOffice.CRM.Services.AccessGatewayInfo
- uid: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo
  isExternal: true
  name: GetOrRegisterAccessGatewayInfo
  nameWithType: IUserAgent.GetOrRegisterAccessGatewayInfo
  fullName: SuperOffice.CRM.Services.IUserAgent.GetOrRegisterAccessGatewayInfo
- uid: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway
  isExternal: true
  name: RegisterWithAccessGateway
  nameWithType: IUserAgent.RegisterWithAccessGateway
  fullName: SuperOffice.CRM.Services.IUserAgent.RegisterWithAccessGateway
- uid: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
  isExternal: true
  name: CheckAccessGatewayRegistration
  nameWithType: IUserAgent.CheckAccessGatewayRegistration
  fullName: SuperOffice.CRM.Services.IUserAgent.CheckAccessGatewayRegistration
- uid: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens
  isExternal: true
  name: SaveExternalTokens
  nameWithType: IUserAgent.SaveExternalTokens
  fullName: SuperOffice.CRM.Services.IUserAgent.SaveExternalTokens
- uid: SuperOffice.CRM.Services.TokenManagementInfo
  commentId: T:SuperOffice.CRM.Services.TokenManagementInfo
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: TokenManagementInfo
  nameWithType: TokenManagementInfo
  fullName: SuperOffice.CRM.Services.TokenManagementInfo
- uid: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens
  isExternal: true
  name: DecryptAndSaveExternalTokens
  nameWithType: IUserAgent.DecryptAndSaveExternalTokens
  fullName: SuperOffice.CRM.Services.IUserAgent.DecryptAndSaveExternalTokens
- uid: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens*
  commentId: Overload:SuperOffice.CRM.Services.IUserAgent.GetExternalTokens
  isExternal: true
  name: GetExternalTokens
  nameWithType: IUserAgent.GetExternalTokens
  fullName: SuperOffice.CRM.Services.IUserAgent.GetExternalTokens
