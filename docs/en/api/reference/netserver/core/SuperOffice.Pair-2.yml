### YamlMime:ManagedReference
items:
- uid: SuperOffice.Pair`2
  commentId: T:SuperOffice.Pair`2
  id: Pair`2
  parent: SuperOffice
  children:
  - SuperOffice.Pair`2.#ctor
  - SuperOffice.Pair`2.#ctor(`0,`1)
  - SuperOffice.Pair`2.First
  - SuperOffice.Pair`2.Second
  langs:
  - csharp
  - vb
  name: Pair<TFirst, TSecond>
  nameWithType: Pair<TFirst, TSecond>
  fullName: SuperOffice.Pair<TFirst, TSecond>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\n\n"
  syntax:
    content: public class Pair<TFirst, TSecond>
    typeParameters:
    - id: TFirst
    - id: TSecond
    content.vb: Public Class Pair(Of TFirst, TSecond)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Pair`2.EnumUtil.MapEnums``2
  - SuperOffice.Pair`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Pair{{TFirst},{TSecond}})
  - SuperOffice.Pair`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Pair`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: Pair(Of TFirst, TSecond)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SuperOffice.Pair(Of TFirst, TSecond)
  name.vb: Pair(Of TFirst, TSecond)
- uid: SuperOffice.Pair`2.First
  commentId: F:SuperOffice.Pair`2.First
  id: First
  parent: SuperOffice.Pair`2
  langs:
  - csharp
  - vb
  name: First
  nameWithType: Pair<TFirst, TSecond>.First
  fullName: SuperOffice.Pair<TFirst, TSecond>.First
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\n\n"
  syntax:
    content: public TFirst First
    return:
      type: '{TFirst}'
    content.vb: Public First As TFirst
  nameWithType.vb: Pair(Of TFirst, TSecond).First
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Pair(Of TFirst, TSecond).First
- uid: SuperOffice.Pair`2.Second
  commentId: F:SuperOffice.Pair`2.Second
  id: Second
  parent: SuperOffice.Pair`2
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: Pair<TFirst, TSecond>.Second
  fullName: SuperOffice.Pair<TFirst, TSecond>.Second
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\n\n"
  syntax:
    content: public TSecond Second
    return:
      type: '{TSecond}'
    content.vb: Public Second As TSecond
  nameWithType.vb: Pair(Of TFirst, TSecond).Second
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Pair(Of TFirst, TSecond).Second
- uid: SuperOffice.Pair`2.#ctor(`0,`1)
  commentId: M:SuperOffice.Pair`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: SuperOffice.Pair`2
  langs:
  - csharp
  - vb
  name: Pair(TFirst, TSecond)
  nameWithType: Pair<TFirst, TSecond>.Pair(TFirst, TSecond)
  fullName: SuperOffice.Pair<TFirst, TSecond>.Pair(TFirst, TSecond)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\n\n"
  syntax:
    content: public Pair(TFirst first, TSecond second)
    parameters:
    - id: first
      type: '{TFirst}'
    - id: second
      type: '{TSecond}'
    content.vb: Public Sub New(first As TFirst, second As TSecond)
  overload: SuperOffice.Pair`2.#ctor*
  nameWithType.vb: Pair(Of TFirst, TSecond).Pair(TFirst, TSecond)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Pair(Of TFirst, TSecond).Pair(TFirst, TSecond)
- uid: SuperOffice.Pair`2.#ctor
  commentId: M:SuperOffice.Pair`2.#ctor
  id: '#ctor'
  parent: SuperOffice.Pair`2
  langs:
  - csharp
  - vb
  name: Pair()
  nameWithType: Pair<TFirst, TSecond>.Pair()
  fullName: SuperOffice.Pair<TFirst, TSecond>.Pair()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\n\n"
  syntax:
    content: public Pair()
    content.vb: Public Sub New
  overload: SuperOffice.Pair`2.#ctor*
  nameWithType.vb: Pair(Of TFirst, TSecond).Pair()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Pair(Of TFirst, TSecond).Pair()
references:
- uid: SuperOffice
  commentId: N:SuperOffice
  isExternal: true
  name: SuperOffice
  nameWithType: SuperOffice
  fullName: SuperOffice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Pair`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<Pair<TFirst, TSecond>, To>()
  nameWithType: EnumUtil.MapEnums<Pair<TFirst, TSecond>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Pair<TFirst, TSecond>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of Pair(Of TFirst, TSecond), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Pair(Of TFirst, TSecond), To)()
  name.vb: MapEnums(Of Pair(Of TFirst, TSecond), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<Pair<TFirst, TSecond>, To>
    nameWithType: EnumUtil.MapEnums<Pair<TFirst, TSecond>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Pair<TFirst, TSecond>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of Pair(Of TFirst, TSecond), To)
    nameWithType: EnumUtil.MapEnums(Of Pair(Of TFirst, TSecond), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Pair(Of TFirst, TSecond), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Pair`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Pair{{TFirst},{TSecond}})
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<Pair<TFirst, TSecond>>(Pair<TFirst, TSecond>)
  nameWithType: ObjectExtensions.AssignByReflection<Pair<TFirst, TSecond>>(Pair<TFirst, TSecond>)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Pair<TFirst, TSecond>>(SuperOffice.Pair<TFirst, TSecond>)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of Pair(Of TFirst, TSecond))(Pair(Of TFirst, TSecond))
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Pair(Of TFirst, TSecond))(SuperOffice.Pair(Of TFirst, TSecond))
  name.vb: AssignByReflection(Of Pair(Of TFirst, TSecond))(Pair(Of TFirst, TSecond))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<Pair<TFirst, TSecond>>
    nameWithType: ObjectExtensions.AssignByReflection<Pair<TFirst, TSecond>>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Pair<TFirst, TSecond>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: SuperOffice.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of Pair(Of TFirst, TSecond))
    nameWithType: ObjectExtensions.AssignByReflection(Of Pair(Of TFirst, TSecond))
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Pair(Of TFirst, TSecond))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: SuperOffice.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Pair`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<Pair<TFirst, TSecond>>()
  nameWithType: ObjectExtensions.GraphCopy<Pair<TFirst, TSecond>>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Pair<TFirst, TSecond>>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of Pair(Of TFirst, TSecond))()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Pair(Of TFirst, TSecond))()
  name.vb: GraphCopy(Of Pair(Of TFirst, TSecond))()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<Pair<TFirst, TSecond>>
    nameWithType: ObjectExtensions.GraphCopy<Pair<TFirst, TSecond>>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Pair<TFirst, TSecond>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of Pair(Of TFirst, TSecond))
    nameWithType: ObjectExtensions.GraphCopy(Of Pair(Of TFirst, TSecond))
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Pair(Of TFirst, TSecond))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Pair`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<Pair<TFirst, TSecond>, To>()
  nameWithType: Converters.MapEnums<Pair<TFirst, TSecond>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Pair<TFirst, TSecond>, To>()
  nameWithType.vb: Converters.MapEnums(Of Pair(Of TFirst, TSecond), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Pair(Of TFirst, TSecond), To)()
  name.vb: MapEnums(Of Pair(Of TFirst, TSecond), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<Pair<TFirst, TSecond>, To>
    nameWithType: Converters.MapEnums<Pair<TFirst, TSecond>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Pair<TFirst, TSecond>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of Pair(Of TFirst, TSecond), To)
    nameWithType: Converters.MapEnums(Of Pair(Of TFirst, TSecond), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Pair(Of TFirst, TSecond), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: '{TFirst}'
  commentId: '!:TFirst'
  definition: TFirst
  name: TFirst
  nameWithType: TFirst
  fullName: TFirst
- uid: TFirst
  name: TFirst
  nameWithType: TFirst
  fullName: TFirst
- uid: '{TSecond}'
  commentId: '!:TSecond'
  definition: TSecond
  name: TSecond
  nameWithType: TSecond
  fullName: TSecond
- uid: TSecond
  name: TSecond
  nameWithType: TSecond
  fullName: TSecond
- uid: SuperOffice.Pair`2.#ctor*
  commentId: Overload:SuperOffice.Pair`2.#ctor
  isExternal: true
  name: Pair
  nameWithType: Pair<TFirst, TSecond>.Pair
  fullName: SuperOffice.Pair<TFirst, TSecond>.Pair
  nameWithType.vb: Pair(Of TFirst, TSecond).Pair
  fullName.vb: SuperOffice.Pair(Of TFirst, TSecond).Pair
