### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.UrlHelper
  commentId: T:SuperOffice.Util.UrlHelper
  id: UrlHelper
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.UrlHelper.Combine(System.String,System.String,System.Boolean)
  - SuperOffice.Util.UrlHelper.ResolveApplicationRoot(System.String)
  - SuperOffice.Util.UrlHelper.ResolveServiceUrl(System.String,System.String)
  langs:
  - csharp
  - vb
  name: UrlHelper
  nameWithType: UrlHelper
  fullName: SuperOffice.Util.UrlHelper
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nClass to assist working with URLs.\n"
  syntax:
    content: public static class UrlHelper
    content.vb: Public Module UrlHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Util.UrlHelper.ResolveApplicationRoot(System.String)
  commentId: M:SuperOffice.Util.UrlHelper.ResolveApplicationRoot(System.String)
  id: ResolveApplicationRoot(System.String)
  parent: SuperOffice.Util.UrlHelper
  langs:
  - csharp
  - vb
  name: ResolveApplicationRoot(String)
  nameWithType: UrlHelper.ResolveApplicationRoot(String)
  fullName: SuperOffice.Util.UrlHelper.ResolveApplicationRoot(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nTry to resolve a the application-root url based on a pre-provided URL stem which may or may not \ncontain noise.\n\nExample of usage is asking user for URL to the CRM website.\nThe user will typically copy paste from the browser:\nhttp://server.com/virtualdir/default.aspx?lotsOfParameters\n\nThey may copy things from config-files\nhttp://server.com/virtualdir/remote/Services75\n\nOr the link may actually be correctly formatted:\nhttp://server.com/virtualdir/\n\nFrom any of these inputs we want to be able find the appliaction root.\n"
  syntax:
    content: public static string ResolveApplicationRoot(string providedUrl)
    parameters:
    - id: providedUrl
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function ResolveApplicationRoot(providedUrl As String) As String
  overload: SuperOffice.Util.UrlHelper.ResolveApplicationRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.UrlHelper.Combine(System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.Util.UrlHelper.Combine(System.String,System.String,System.Boolean)
  id: Combine(System.String,System.String,System.Boolean)
  parent: SuperOffice.Util.UrlHelper
  langs:
  - csharp
  - vb
  name: Combine(String, String, Boolean)
  nameWithType: UrlHelper.Combine(String, String, Boolean)
  fullName: SuperOffice.Util.UrlHelper.Combine(System.String, System.String, System.Boolean)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nSafely appends one URL-segment on to another.\nThis involves validating the individual URL parts and possibly throwing on invalid data or combinations of parts.\n"
  syntax:
    content: public static string Combine(string baseUrl, string suffix, bool allowUnrooted = false)
    parameters:
    - id: baseUrl
      type: System.String
      description: Must be an absolute path, unless allowUnrooted is set true.
    - id: suffix
      type: System.String
      description: Cannot be an absolute path.
    - id: allowUnrooted
      type: System.Boolean
    return:
      type: System.String
    content.vb: Public Shared Function Combine(baseUrl As String, suffix As String, allowUnrooted As Boolean = False) As String
  overload: SuperOffice.Util.UrlHelper.Combine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.UrlHelper.ResolveServiceUrl(System.String,System.String)
  commentId: M:SuperOffice.Util.UrlHelper.ResolveServiceUrl(System.String,System.String)
  id: ResolveServiceUrl(System.String,System.String)
  parent: SuperOffice.Util.UrlHelper
  langs:
  - csharp
  - vb
  name: ResolveServiceUrl(String, String)
  nameWithType: UrlHelper.ResolveServiceUrl(String, String)
  fullName: SuperOffice.Util.UrlHelper.ResolveServiceUrl(System.String, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nResolve the location of a service based on a URL which represents a part of the current\napplication, and which may contains &quot;noise&quot;.\n"
  syntax:
    content: public static string ResolveServiceUrl(string providedUrl, string serviceSuffix)
    parameters:
    - id: providedUrl
      type: System.String
      description: URL which may or may not contain noise.
    - id: serviceSuffix
      type: System.String
      description: Service-suffix from application-root.
    return:
      type: System.String
    content.vb: Public Shared Function ResolveServiceUrl(providedUrl As String, serviceSuffix As String) As String
  overload: SuperOffice.Util.UrlHelper.ResolveServiceUrl*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Util.UrlHelper.ResolveApplicationRoot*
  commentId: Overload:SuperOffice.Util.UrlHelper.ResolveApplicationRoot
  isExternal: true
  name: ResolveApplicationRoot
  nameWithType: UrlHelper.ResolveApplicationRoot
  fullName: SuperOffice.Util.UrlHelper.ResolveApplicationRoot
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Util.UrlHelper.Combine*
  commentId: Overload:SuperOffice.Util.UrlHelper.Combine
  isExternal: true
  name: Combine
  nameWithType: UrlHelper.Combine
  fullName: SuperOffice.Util.UrlHelper.Combine
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Util.UrlHelper.ResolveServiceUrl*
  commentId: Overload:SuperOffice.Util.UrlHelper.ResolveServiceUrl
  isExternal: true
  name: ResolveServiceUrl
  nameWithType: UrlHelper.ResolveServiceUrl
  fullName: SuperOffice.Util.UrlHelper.ResolveServiceUrl
