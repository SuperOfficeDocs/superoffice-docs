### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.ICredentialsManager
  commentId: T:SuperOffice.Security.ICredentialsManager
  id: ICredentialsManager
  parent: SuperOffice.Security
  children:
  - SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  - SuperOffice.Security.ICredentialsManager.GetAllPlugins
  - SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  - SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.Refresh
  - SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICredentialsManager
  nameWithType: ICredentialsManager
  fullName: SuperOffice.Security.ICredentialsManager
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  syntax:
    content: public interface ICredentialsManager
    content.vb: Public Interface ICredentialsManager
  extensionMethods:
  - SuperOffice.Security.ICredentialsManager.EnumUtil.MapEnums``2
  - SuperOffice.Security.ICredentialsManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  commentId: M:SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  id: GetAllInstalledPluginNames
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetAllInstalledPluginNames()
  nameWithType: ICredentialsManager.GetAllInstalledPluginNames()
  fullName: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nReturn a list of all credential plugins that are available (including those that .\ni.e. all plugins that are installed are returned, including those without a corresponding license.\n"
  syntax:
    content: string[] GetAllInstalledPluginNames()
    return:
      type: System.String[]
      description: 'List of all ICredntialPlugin names e.g: &quot;ActiveDirectory&quot;, &quot;CRM5/PASSWORD&quot;'
    content.vb: Function GetAllInstalledPluginNames As String()
  overload: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames*
- uid: SuperOffice.Security.ICredentialsManager.GetAllPlugins
  commentId: M:SuperOffice.Security.ICredentialsManager.GetAllPlugins
  id: GetAllPlugins
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetAllPlugins()
  nameWithType: ICredentialsManager.GetAllPlugins()
  fullName: SuperOffice.Security.ICredentialsManager.GetAllPlugins()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nReturn a list of all credential plugins that are licensed and available.\ni.e. some plugins that are installed may not be present, because the corresponding license is not present.\n"
  syntax:
    content: Dictionary<string, IUserCredentialPlugin> GetAllPlugins()
    return:
      type: System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
      description: 'Dictionary of plugin name to plugin instance.  e.g: &quot;ActiveDirectory&quot;=ActiveDirectoryCredentialPlugin'
    content.vb: Function GetAllPlugins As Dictionary(Of String, IUserCredentialPlugin)
  overload: SuperOffice.Security.ICredentialsManager.GetAllPlugins*
- uid: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetDefaultCredentialPlugin(UserType, Int32)
  nameWithType: ICredentialsManager.GetDefaultCredentialPlugin(UserType, Int32)
  fullName: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  syntax:
    content: IUserCredentialPlugin GetDefaultCredentialPlugin(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Administration.IUserCredentialPlugin
    content.vb: Function GetDefaultCredentialPlugin(userType As UserType, personId As Integer) As IUserCredentialPlugin
  overload: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin*
- uid: SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  id: GetPlugin(System.String)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetPlugin(String)
  nameWithType: ICredentialsManager.GetPlugin(String)
  fullName: SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet the plugin associated with a given credential type. \n"
  syntax:
    content: IUserCredentialPlugin GetPlugin(string credentialType)
    parameters:
    - id: credentialType
      type: System.String
      description: 'Name of credential plugin: &quot;CRM5/PASSWORD&quot; or &quot;ActiveDirectory&quot;.'
    return:
      type: SuperOffice.CRM.Administration.IUserCredentialPlugin
      description: Plugin interface, or null if plugin is not available/licensed.
    content.vb: Function GetPlugin(credentialType As String) As IUserCredentialPlugin
  overload: SuperOffice.Security.ICredentialsManager.GetPlugin*
- uid: SuperOffice.Security.ICredentialsManager.Refresh
  commentId: M:SuperOffice.Security.ICredentialsManager.Refresh
  id: Refresh
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: Refresh()
  nameWithType: ICredentialsManager.Refresh()
  fullName: SuperOffice.Security.ICredentialsManager.Refresh()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nRefresh the list of credential plugins. Useful if you have just loaded some new licenses.\n"
  syntax:
    content: void Refresh()
    content.vb: Sub Refresh
  overload: SuperOffice.Security.ICredentialsManager.Refresh*
- uid: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentialsAsync(String, Int32, String, CancellationToken)
  nameWithType: ICredentialsManager.RemoveUntrustedCredentialsAsync(String, Int32, String, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String, System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nRemove a credentials entry for an associate\n"
  syntax:
    content: Task RemoveUntrustedCredentialsAsync(string type, int associateId, string publicValue, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: associateId
      type: System.Int32
      description: Id of associate to remove for
    - id: publicValue
      type: System.String
      description: PublicValue of credential to remove
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveUntrustedCredentialsAsync(type As String, associateId As Integer, publicValue As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync*
- uid: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentialsAsync(String, String, CancellationToken)
  nameWithType: ICredentialsManager.RemoveUntrustedCredentialsAsync(String, String, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nRemove a credentials entry for authenticated user\n"
  syntax:
    content: Task RemoveUntrustedCredentialsAsync(string type, string publicValue, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: publicValue
      type: System.String
      description: PublicValue of credential to remove
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveUntrustedCredentialsAsync(type As String, publicValue As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync*
- uid: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  id: SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentialsAsync(String, Int32, UntrustedCredentials, CancellationToken)
  nameWithType: ICredentialsManager.SaveUntrustedCredentialsAsync(String, Int32, UntrustedCredentials, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String, System.Int32, SuperOffice.Security.UntrustedCredentials, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nSave credentials for a specified associate\n"
  syntax:
    content: Task SaveUntrustedCredentialsAsync(string type, int associateId, UntrustedCredentials credentials, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: associateId
      type: System.Int32
      description: Id of associate to save for
    - id: credentials
      type: SuperOffice.Security.UntrustedCredentials
      description: Credentials to save
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SaveUntrustedCredentialsAsync(type As String, associateId As Integer, credentials As UntrustedCredentials, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync*
- uid: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  id: SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentialsAsync(String, UntrustedCredentials, CancellationToken)
  nameWithType: ICredentialsManager.SaveUntrustedCredentialsAsync(String, UntrustedCredentials, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String, SuperOffice.Security.UntrustedCredentials, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nSave credentials for authenticated associate\n"
  syntax:
    content: Task SaveUntrustedCredentialsAsync(string type, UntrustedCredentials credentials, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: credentials
      type: SuperOffice.Security.UntrustedCredentials
      description: Credentials to save
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SaveUntrustedCredentialsAsync(type As String, credentials As UntrustedCredentials, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync*
- uid: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  id: GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentialsAsync(String, CancellationToken)
  nameWithType: ICredentialsManager.GetUntrustedCredentialsAsync(String, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet a set of credentials for authenticated associate\n"
  syntax:
    content: Task<UntrustedCredentials[]> GetUntrustedCredentialsAsync(string type, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials to retrieve
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
      description: Arrow of populated credential objects.
    content.vb: Function GetUntrustedCredentialsAsync(type As String, cancellationToken As CancellationToken = Nothing) As Task(Of UntrustedCredentials())
  overload: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync*
- uid: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentialsAsync(String, Int32, CancellationToken)
  nameWithType: ICredentialsManager.GetUntrustedCredentialsAsync(String, Int32, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet a set of credentials for a specified associate\n"
  syntax:
    content: Task<UntrustedCredentials[]> GetUntrustedCredentialsAsync(string type, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials to retrieve
    - id: associateId
      type: System.Int32
      description: Id of associate to retrieve credentials for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
      description: Arrow of populated credential objects. SecretValue is left blank for security purposes if associate is not authenticated user or a system user.
    content.vb: Function GetUntrustedCredentialsAsync(type As String, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of UntrustedCredentials())
  overload: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync*
references:
- uid: SuperOffice.Security
  commentId: N:SuperOffice.Security
  isExternal: true
  name: SuperOffice.Security
  nameWithType: SuperOffice.Security
  fullName: SuperOffice.Security
- uid: SuperOffice.Security.ICredentialsManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ICredentialsManager, To>()
  nameWithType: EnumUtil.MapEnums<ICredentialsManager, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Security.ICredentialsManager, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ICredentialsManager, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Security.ICredentialsManager, To)()
  name.vb: MapEnums(Of ICredentialsManager, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ICredentialsManager, To>
    nameWithType: EnumUtil.MapEnums<ICredentialsManager, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Security.ICredentialsManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ICredentialsManager, To)
    nameWithType: EnumUtil.MapEnums(Of ICredentialsManager, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Security.ICredentialsManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.ICredentialsManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ICredentialsManager, To>()
  nameWithType: Converters.MapEnums<ICredentialsManager, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.ICredentialsManager, To>()
  nameWithType.vb: Converters.MapEnums(Of ICredentialsManager, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.ICredentialsManager, To)()
  name.vb: MapEnums(Of ICredentialsManager, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ICredentialsManager, To>
    nameWithType: Converters.MapEnums<ICredentialsManager, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.ICredentialsManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ICredentialsManager, To)
    nameWithType: Converters.MapEnums(Of ICredentialsManager, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.ICredentialsManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  isExternal: true
  name: GetAllInstalledPluginNames
  nameWithType: ICredentialsManager.GetAllInstalledPluginNames
  fullName: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Security.ICredentialsManager.GetAllPlugins*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetAllPlugins
  isExternal: true
  name: GetAllPlugins
  nameWithType: ICredentialsManager.GetAllPlugins
  fullName: SuperOffice.Security.ICredentialsManager.GetAllPlugins
- uid: System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, IUserCredentialPlugin>
  nameWithType: Dictionary<String, IUserCredentialPlugin>
  fullName: System.Collections.Generic.Dictionary<System.String, SuperOffice.CRM.Administration.IUserCredentialPlugin>
  nameWithType.vb: Dictionary(Of String, IUserCredentialPlugin)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SuperOffice.CRM.Administration.IUserCredentialPlugin)
  name.vb: Dictionary(Of String, IUserCredentialPlugin)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    nameWithType: IUserCredentialPlugin
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    nameWithType: IUserCredentialPlugin
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin
  isExternal: true
  name: GetDefaultCredentialPlugin
  nameWithType: ICredentialsManager.GetDefaultCredentialPlugin
  fullName: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
- uid: SuperOffice.Security.ICredentialsManager.GetPlugin*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetPlugin
  isExternal: true
  name: GetPlugin
  nameWithType: ICredentialsManager.GetPlugin
  fullName: SuperOffice.Security.ICredentialsManager.GetPlugin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Security.ICredentialsManager.Refresh*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.Refresh
  isExternal: true
  name: Refresh
  nameWithType: ICredentialsManager.Refresh
  fullName: SuperOffice.Security.ICredentialsManager.Refresh
- uid: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync
  isExternal: true
  name: RemoveUntrustedCredentialsAsync
  nameWithType: ICredentialsManager.RemoveUntrustedCredentialsAsync
  fullName: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync
  isExternal: true
  name: SaveUntrustedCredentialsAsync
  nameWithType: ICredentialsManager.SaveUntrustedCredentialsAsync
  fullName: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync
- uid: SuperOffice.Security.UntrustedCredentials
  commentId: T:SuperOffice.Security.UntrustedCredentials
  parent: SuperOffice.Security
  isExternal: true
  name: UntrustedCredentials
  nameWithType: UntrustedCredentials
  fullName: SuperOffice.Security.UntrustedCredentials
- uid: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync
  isExternal: true
  name: GetUntrustedCredentialsAsync
  nameWithType: ICredentialsManager.GetUntrustedCredentialsAsync
  fullName: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<UntrustedCredentials[]>
  nameWithType: Task<UntrustedCredentials[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.Security.UntrustedCredentials[]>
  nameWithType.vb: Task(Of UntrustedCredentials())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.Security.UntrustedCredentials())
  name.vb: Task(Of UntrustedCredentials())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Security.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.Security.UntrustedCredentials
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Security.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.Security.UntrustedCredentials
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
