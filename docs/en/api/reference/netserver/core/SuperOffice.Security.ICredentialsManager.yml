### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.ICredentialsManager
  commentId: T:SuperOffice.Security.ICredentialsManager
  id: ICredentialsManager
  parent: SuperOffice.Security
  children:
  - SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  - SuperOffice.Security.ICredentialsManager.GetAllPlugins
  - SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  - SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.Refresh
  - SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  - SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICredentialsManager
  nameWithType: ICredentialsManager
  fullName: SuperOffice.Security.ICredentialsManager
  type: Interface
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  syntax:
    content: public interface ICredentialsManager
    content.vb: Public Interface ICredentialsManager
  extensionMethods:
  - SuperOffice.Security.ICredentialsManager.EnumUtil.MapEnums``2
  - SuperOffice.Security.ICredentialsManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
- uid: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  commentId: M:SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  id: GetAllInstalledPluginNames
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetAllInstalledPluginNames()
  nameWithType: ICredentialsManager.GetAllInstalledPluginNames()
  fullName: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: >-
    Return a list of all credential plugins that are available (including those that .

    i.e. all plugins that are installed are returned, including those without a corresponding license.
  example: []
  syntax:
    content: string[] GetAllInstalledPluginNames()
    return:
      type: System.String[]
      description: 'List of all ICredntialPlugin names e.g: "ActiveDirectory", "CRM5/PASSWORD"'
    content.vb: Function GetAllInstalledPluginNames() As String()
  overload: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames*
- uid: SuperOffice.Security.ICredentialsManager.GetAllPlugins
  commentId: M:SuperOffice.Security.ICredentialsManager.GetAllPlugins
  id: GetAllPlugins
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetAllPlugins()
  nameWithType: ICredentialsManager.GetAllPlugins()
  fullName: SuperOffice.Security.ICredentialsManager.GetAllPlugins()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: >-
    Return a list of all credential plugins that are licensed and available.

    i.e. some plugins that are installed may not be present, because the corresponding license is not present.
  example: []
  syntax:
    content: Dictionary<string, IUserCredentialPlugin> GetAllPlugins()
    return:
      type: System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
      description: 'Dictionary of plugin name to plugin instance.  e.g: "ActiveDirectory"=ActiveDirectoryCredentialPlugin'
    content.vb: Function GetAllPlugins() As Dictionary(Of String, IUserCredentialPlugin)
  overload: SuperOffice.Security.ICredentialsManager.GetAllPlugins*
- uid: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetDefaultCredentialPlugin(UserType, int)
  nameWithType: ICredentialsManager.GetDefaultCredentialPlugin(UserType, int)
  fullName: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType, int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  syntax:
    content: IUserCredentialPlugin GetDefaultCredentialPlugin(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Administration.IUserCredentialPlugin
    content.vb: Function GetDefaultCredentialPlugin(userType As UserType, personId As Integer) As IUserCredentialPlugin
  overload: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin*
  nameWithType.vb: ICredentialsManager.GetDefaultCredentialPlugin(UserType, Integer)
  fullName.vb: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType, Integer)
  name.vb: GetDefaultCredentialPlugin(UserType, Integer)
- uid: SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetPlugin(System.String)
  id: GetPlugin(System.String)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetPlugin(string)
  nameWithType: ICredentialsManager.GetPlugin(string)
  fullName: SuperOffice.Security.ICredentialsManager.GetPlugin(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Get the plugin associated with a given credential type.
  example: []
  syntax:
    content: IUserCredentialPlugin GetPlugin(string credentialType)
    parameters:
    - id: credentialType
      type: System.String
      description: 'Name of credential plugin: "CRM5/PASSWORD" or "ActiveDirectory".'
    return:
      type: SuperOffice.CRM.Administration.IUserCredentialPlugin
      description: Plugin interface, or null if plugin is not available/licensed.
    content.vb: Function GetPlugin(credentialType As String) As IUserCredentialPlugin
  overload: SuperOffice.Security.ICredentialsManager.GetPlugin*
  nameWithType.vb: ICredentialsManager.GetPlugin(String)
  fullName.vb: SuperOffice.Security.ICredentialsManager.GetPlugin(String)
  name.vb: GetPlugin(String)
- uid: SuperOffice.Security.ICredentialsManager.Refresh
  commentId: M:SuperOffice.Security.ICredentialsManager.Refresh
  id: Refresh
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: Refresh()
  nameWithType: ICredentialsManager.Refresh()
  fullName: SuperOffice.Security.ICredentialsManager.Refresh()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Refresh the list of credential plugins. Useful if you have just loaded some new licenses.
  example: []
  syntax:
    content: void Refresh()
    content.vb: Sub Refresh()
  overload: SuperOffice.Security.ICredentialsManager.Refresh*
- uid: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: RemoveUntrustedCredentialsAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentialsAsync(string, int, string, CancellationToken)
  nameWithType: ICredentialsManager.RemoveUntrustedCredentialsAsync(string, int, string, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(string, int, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Remove a credentials entry for an associate
  example: []
  syntax:
    content: Task RemoveUntrustedCredentialsAsync(string type, int associateId, string publicValue, CancellationToken cancellationToken = default)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: "imap", "smtp")'
    - id: associateId
      type: System.Int32
      description: Id of associate to remove for
    - id: publicValue
      type: System.String
      description: PublicValue of credential to remove
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveUntrustedCredentialsAsync(type As String, associateId As Integer, publicValue As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync*
  nameWithType.vb: ICredentialsManager.RemoveUntrustedCredentialsAsync(String, Integer, String, CancellationToken)
  fullName.vb: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(String, Integer, String, System.Threading.CancellationToken)
  name.vb: RemoveUntrustedCredentialsAsync(String, Integer, String, CancellationToken)
- uid: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RemoveUntrustedCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentialsAsync(string, string, CancellationToken)
  nameWithType: ICredentialsManager.RemoveUntrustedCredentialsAsync(string, string, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Remove a credentials entry for authenticated user
  example: []
  syntax:
    content: Task RemoveUntrustedCredentialsAsync(string type, string publicValue, CancellationToken cancellationToken = default)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: "imap", "smtp")'
    - id: publicValue
      type: System.String
      description: PublicValue of credential to remove
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveUntrustedCredentialsAsync(type As String, publicValue As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync*
  nameWithType.vb: ICredentialsManager.RemoveUntrustedCredentialsAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync(String, String, System.Threading.CancellationToken)
  name.vb: RemoveUntrustedCredentialsAsync(String, String, CancellationToken)
- uid: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  id: SaveUntrustedCredentialsAsync(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentialsAsync(string, int, UntrustedCredentials, CancellationToken)
  nameWithType: ICredentialsManager.SaveUntrustedCredentialsAsync(string, int, UntrustedCredentials, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(string, int, SuperOffice.Security.UntrustedCredentials, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Save credentials for a specified associate
  example: []
  syntax:
    content: Task SaveUntrustedCredentialsAsync(string type, int associateId, UntrustedCredentials credentials, CancellationToken cancellationToken = default)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: "imap", "smtp")'
    - id: associateId
      type: System.Int32
      description: Id of associate to save for
    - id: credentials
      type: SuperOffice.Security.UntrustedCredentials
      description: Credentials to save
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SaveUntrustedCredentialsAsync(type As String, associateId As Integer, credentials As UntrustedCredentials, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync*
  nameWithType.vb: ICredentialsManager.SaveUntrustedCredentialsAsync(String, Integer, UntrustedCredentials, CancellationToken)
  fullName.vb: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(String, Integer, SuperOffice.Security.UntrustedCredentials, System.Threading.CancellationToken)
  name.vb: SaveUntrustedCredentialsAsync(String, Integer, UntrustedCredentials, CancellationToken)
- uid: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  id: SaveUntrustedCredentialsAsync(System.String,SuperOffice.Security.UntrustedCredentials,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentialsAsync(string, UntrustedCredentials, CancellationToken)
  nameWithType: ICredentialsManager.SaveUntrustedCredentialsAsync(string, UntrustedCredentials, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(string, SuperOffice.Security.UntrustedCredentials, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Save credentials for authenticated associate
  example: []
  syntax:
    content: Task SaveUntrustedCredentialsAsync(string type, UntrustedCredentials credentials, CancellationToken cancellationToken = default)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: "imap", "smtp")'
    - id: credentials
      type: SuperOffice.Security.UntrustedCredentials
      description: Credentials to save
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SaveUntrustedCredentialsAsync(type As String, credentials As UntrustedCredentials, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync*
  nameWithType.vb: ICredentialsManager.SaveUntrustedCredentialsAsync(String, UntrustedCredentials, CancellationToken)
  fullName.vb: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync(String, SuperOffice.Security.UntrustedCredentials, System.Threading.CancellationToken)
  name.vb: SaveUntrustedCredentialsAsync(String, UntrustedCredentials, CancellationToken)
- uid: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  id: GetUntrustedCredentialsAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentialsAsync(string, CancellationToken)
  nameWithType: ICredentialsManager.GetUntrustedCredentialsAsync(string, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Get a set of credentials for authenticated associate
  example: []
  syntax:
    content: Task<UntrustedCredentials[]> GetUntrustedCredentialsAsync(string type, CancellationToken cancellationToken = default)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials to retrieve
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
      description: Arrow of populated credential objects.
    content.vb: Function GetUntrustedCredentialsAsync(type As String, cancellationToken As CancellationToken = Nothing) As Task(Of UntrustedCredentials())
  overload: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync*
  nameWithType.vb: ICredentialsManager.GetUntrustedCredentialsAsync(String, CancellationToken)
  fullName.vb: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(String, System.Threading.CancellationToken)
  name.vb: GetUntrustedCredentialsAsync(String, CancellationToken)
- uid: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: GetUntrustedCredentialsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Security.ICredentialsManager
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentialsAsync(string, int, CancellationToken)
  nameWithType: ICredentialsManager.GetUntrustedCredentialsAsync(string, int, CancellationToken)
  fullName: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(string, int, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: Get a set of credentials for a specified associate
  example: []
  syntax:
    content: Task<UntrustedCredentials[]> GetUntrustedCredentialsAsync(string type, int associateId, CancellationToken cancellationToken = default)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials to retrieve
    - id: associateId
      type: System.Int32
      description: Id of associate to retrieve credentials for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
      description: Arrow of populated credential objects. SecretValue is left blank for security purposes if associate is not authenticated user or a system user.
    content.vb: Function GetUntrustedCredentialsAsync(type As String, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of UntrustedCredentials())
  overload: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync*
  nameWithType.vb: ICredentialsManager.GetUntrustedCredentialsAsync(String, Integer, CancellationToken)
  fullName.vb: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync(String, Integer, System.Threading.CancellationToken)
  name.vb: GetUntrustedCredentialsAsync(String, Integer, CancellationToken)
references:
- uid: SuperOffice.Security
  commentId: N:SuperOffice.Security
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Security
  nameWithType: SuperOffice.Security
  fullName: SuperOffice.Security
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Security
    name: Security
    isExternal: true
    href: SuperOffice.Security.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Security
    name: Security
    isExternal: true
    href: SuperOffice.Security.html
- uid: SuperOffice.Security.ICredentialsManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<ICredentialsManager, To>(ICredentialsManager)
  nameWithType: EnumUtil.MapEnums<ICredentialsManager, To>(ICredentialsManager)
  fullName: EnumUtil.MapEnums<SuperOffice.Security.ICredentialsManager, To>(SuperOffice.Security.ICredentialsManager)
  nameWithType.vb: EnumUtil.MapEnums(Of ICredentialsManager, To)(ICredentialsManager)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Security.ICredentialsManager, To)(SuperOffice.Security.ICredentialsManager)
  name.vb: MapEnums(Of ICredentialsManager, To)(ICredentialsManager)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.Security.ICredentialsManager)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.Security.ICredentialsManager)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: )
- uid: SuperOffice.Security.ICredentialsManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<ICredentialsManager, To>(ICredentialsManager)
  nameWithType: Converters.MapEnums<ICredentialsManager, To>(ICredentialsManager)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.ICredentialsManager, To>(SuperOffice.Security.ICredentialsManager)
  nameWithType.vb: Converters.MapEnums(Of ICredentialsManager, To)(ICredentialsManager)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.ICredentialsManager, To)(SuperOffice.Security.ICredentialsManager)
  name.vb: MapEnums(Of ICredentialsManager, To)(ICredentialsManager)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.Security.ICredentialsManager)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.Security.ICredentialsManager)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.Security.ICredentialsManager
    name: ICredentialsManager
    isExternal: true
    href: SuperOffice.Security.ICredentialsManager.html
  - name: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_GetAllInstalledPluginNames
  name: GetAllInstalledPluginNames
  nameWithType: ICredentialsManager.GetAllInstalledPluginNames
  fullName: SuperOffice.Security.ICredentialsManager.GetAllInstalledPluginNames
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: SuperOffice.Security.ICredentialsManager.GetAllPlugins*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetAllPlugins
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_GetAllPlugins
  name: GetAllPlugins
  nameWithType: ICredentialsManager.GetAllPlugins
  fullName: SuperOffice.Security.ICredentialsManager.GetAllPlugins
- uid: System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
  commentId: T:System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, IUserCredentialPlugin>
  nameWithType: Dictionary<string, IUserCredentialPlugin>
  fullName: System.Collections.Generic.Dictionary<string, SuperOffice.CRM.Administration.IUserCredentialPlugin>
  nameWithType.vb: Dictionary(Of String, IUserCredentialPlugin)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, SuperOffice.CRM.Administration.IUserCredentialPlugin)
  name.vb: Dictionary(Of String, IUserCredentialPlugin)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_GetDefaultCredentialPlugin_SuperOffice_License_UserType_System_Int32_
  name: GetDefaultCredentialPlugin
  nameWithType: ICredentialsManager.GetDefaultCredentialPlugin
  fullName: SuperOffice.Security.ICredentialsManager.GetDefaultCredentialPlugin
- uid: SuperOffice.License.UserType
  commentId: T:SuperOffice.License.UserType
  parent: SuperOffice.License
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Administration
    name: Administration
    isExternal: true
    href: SuperOffice.CRM.Administration.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Administration
    name: Administration
    isExternal: true
    href: SuperOffice.CRM.Administration.html
- uid: SuperOffice.Security.ICredentialsManager.GetPlugin*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetPlugin
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_GetPlugin_System_String_
  name: GetPlugin
  nameWithType: ICredentialsManager.GetPlugin
  fullName: SuperOffice.Security.ICredentialsManager.GetPlugin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.Security.ICredentialsManager.Refresh*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.Refresh
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_Refresh
  name: Refresh
  nameWithType: ICredentialsManager.Refresh
  fullName: SuperOffice.Security.ICredentialsManager.Refresh
- uid: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_RemoveUntrustedCredentialsAsync_System_String_System_Int32_System_String_System_Threading_CancellationToken_
  name: RemoveUntrustedCredentialsAsync
  nameWithType: ICredentialsManager.RemoveUntrustedCredentialsAsync
  fullName: SuperOffice.Security.ICredentialsManager.RemoveUntrustedCredentialsAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_SaveUntrustedCredentialsAsync_System_String_System_Int32_SuperOffice_Security_UntrustedCredentials_System_Threading_CancellationToken_
  name: SaveUntrustedCredentialsAsync
  nameWithType: ICredentialsManager.SaveUntrustedCredentialsAsync
  fullName: SuperOffice.Security.ICredentialsManager.SaveUntrustedCredentialsAsync
- uid: SuperOffice.Security.UntrustedCredentials
  commentId: T:SuperOffice.Security.UntrustedCredentials
  parent: SuperOffice.Security
  isExternal: true
  href: SuperOffice.Security.UntrustedCredentials.html
  name: UntrustedCredentials
  nameWithType: UntrustedCredentials
  fullName: SuperOffice.Security.UntrustedCredentials
- uid: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync*
  commentId: Overload:SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync
  isExternal: true
  href: SuperOffice.Security.ICredentialsManager.html#SuperOffice_Security_ICredentialsManager_GetUntrustedCredentialsAsync_System_String_System_Threading_CancellationToken_
  name: GetUntrustedCredentialsAsync
  nameWithType: ICredentialsManager.GetUntrustedCredentialsAsync
  fullName: SuperOffice.Security.ICredentialsManager.GetUntrustedCredentialsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.Security.UntrustedCredentials[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<UntrustedCredentials[]>
  nameWithType: Task<UntrustedCredentials[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.Security.UntrustedCredentials[]>
  nameWithType.vb: Task(Of UntrustedCredentials())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.Security.UntrustedCredentials())
  name.vb: Task(Of UntrustedCredentials())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.Security.UntrustedCredentials
    name: UntrustedCredentials
    isExternal: true
    href: SuperOffice.Security.UntrustedCredentials.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Security.UntrustedCredentials
    name: UntrustedCredentials
    isExternal: true
    href: SuperOffice.Security.UntrustedCredentials.html
  - name: (
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
