### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  commentId: T:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  id: UserPreferenceArchiveHelper
  parent: SuperOffice.CRM.ArchiveLists
  children:
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName(System.Int32)
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName(SuperOffice.Data.PreferenceLevel)
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName(SuperOffice.Data.PreferenceLevel)
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName(SuperOffice.Data.PreferenceLevel,System.Int32)
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue(System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: UserPreferenceArchiveHelper
  nameWithType: UserPreferenceArchiveHelper
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nHelper class to decode / populate preference values; provides shared logic for the\n<xref href=\"SuperOffice.CRM.ArchiveLists.UserPreferenceExtenderBase\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.ArchiveLists.MappedPreferenceProvider\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [SoInject("Database")]

      public class UserPreferenceArchiveHelper : Object
    content.vb: >-
      <SoInject("Database")>

      Public Class UserPreferenceArchiveHelper
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.EnumUtil.MapEnums``2
  - SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Database
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName(SuperOffice.Data.PreferenceLevel)
  commentId: M:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName(SuperOffice.Data.PreferenceLevel)
  id: GetLevelName(SuperOffice.Data.PreferenceLevel)
  parent: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  langs:
  - csharp
  - vb
  name: GetLevelName(PreferenceLevel)
  nameWithType: UserPreferenceArchiveHelper.GetLevelName(PreferenceLevel)
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName(SuperOffice.Data.PreferenceLevel)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public string GetLevelName(PreferenceLevel deflevel)
    parameters:
    - id: deflevel
      type: SuperOffice.Data.PreferenceLevel
    return:
      type: System.String
    content.vb: Public Function GetLevelName(deflevel As PreferenceLevel) As String
  overload: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName(SuperOffice.Data.PreferenceLevel)
  commentId: M:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName(SuperOffice.Data.PreferenceLevel)
  id: GetLevelEntityName(SuperOffice.Data.PreferenceLevel)
  parent: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  langs:
  - csharp
  - vb
  name: GetLevelEntityName(PreferenceLevel)
  nameWithType: UserPreferenceArchiveHelper.GetLevelEntityName(PreferenceLevel)
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName(SuperOffice.Data.PreferenceLevel)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public string GetLevelEntityName(PreferenceLevel deflevel)
    parameters:
    - id: deflevel
      type: SuperOffice.Data.PreferenceLevel
    return:
      type: System.String
    content.vb: Public Function GetLevelEntityName(deflevel As PreferenceLevel) As String
  overload: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName(SuperOffice.Data.PreferenceLevel,System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName(SuperOffice.Data.PreferenceLevel,System.Int32)
  id: GetOwnerName(SuperOffice.Data.PreferenceLevel,System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  langs:
  - csharp
  - vb
  name: GetOwnerName(PreferenceLevel, Int32)
  nameWithType: UserPreferenceArchiveHelper.GetOwnerName(PreferenceLevel, Int32)
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName(SuperOffice.Data.PreferenceLevel, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public string GetOwnerName(PreferenceLevel deflevel, int ownerId)
    parameters:
    - id: deflevel
      type: SuperOffice.Data.PreferenceLevel
    - id: ownerId
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Function GetOwnerName(deflevel As PreferenceLevel, ownerId As Integer) As String
  overload: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName(System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName(System.Int32)
  id: GetDatabaseName(System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  langs:
  - csharp
  - vb
  name: GetDatabaseName(Int32)
  nameWithType: UserPreferenceArchiveHelper.GetDatabaseName(Int32)
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public string GetDatabaseName(int ownerId)
    parameters:
    - id: ownerId
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Function GetDatabaseName(ownerId As Integer) As String
  overload: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue(System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue(System.String,System.String,System.String)
  id: GetPreferenceValue(System.String,System.String,System.String)
  parent: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper
  langs:
  - csharp
  - vb
  name: GetPreferenceValue(String, String, String)
  nameWithType: UserPreferenceArchiveHelper.GetPreferenceValue(String, String, String)
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue(System.String, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public ValueTuple<string, string> GetPreferenceValue(string section, string key, string rawValue)
    parameters:
    - id: section
      type: System.String
    - id: key
      type: System.String
    - id: rawValue
      type: System.String
    return:
      type: System.ValueTuple{System.String,System.String}
    content.vb: Public Function GetPreferenceValue(section As String, key As String, rawValue As String) As ValueTuple(Of String, String)
  overload: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.ArchiveLists
  commentId: N:SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: SuperOffice.CRM.ArchiveLists
  nameWithType: SuperOffice.CRM.ArchiveLists
  fullName: SuperOffice.CRM.ArchiveLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<UserPreferenceArchiveHelper, To>()
  nameWithType: EnumUtil.MapEnums<UserPreferenceArchiveHelper, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of UserPreferenceArchiveHelper, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To)()
  name.vb: MapEnums(Of UserPreferenceArchiveHelper, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<UserPreferenceArchiveHelper, To>
    nameWithType: EnumUtil.MapEnums<UserPreferenceArchiveHelper, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of UserPreferenceArchiveHelper, To)
    nameWithType: EnumUtil.MapEnums(Of UserPreferenceArchiveHelper, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<UserPreferenceArchiveHelper, To>()
  nameWithType: Converters.MapEnums<UserPreferenceArchiveHelper, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To>()
  nameWithType.vb: Converters.MapEnums(Of UserPreferenceArchiveHelper, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To)()
  name.vb: MapEnums(Of UserPreferenceArchiveHelper, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<UserPreferenceArchiveHelper, To>
    nameWithType: Converters.MapEnums<UserPreferenceArchiveHelper, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of UserPreferenceArchiveHelper, To)
    nameWithType: Converters.MapEnums(Of UserPreferenceArchiveHelper, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName
  isExternal: true
  name: GetLevelName
  nameWithType: UserPreferenceArchiveHelper.GetLevelName
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelName
- uid: SuperOffice.Data.PreferenceLevel
  commentId: T:SuperOffice.Data.PreferenceLevel
  parent: SuperOffice.Data
  isExternal: true
  name: PreferenceLevel
  nameWithType: PreferenceLevel
  fullName: SuperOffice.Data.PreferenceLevel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName
  isExternal: true
  name: GetLevelEntityName
  nameWithType: UserPreferenceArchiveHelper.GetLevelEntityName
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetLevelEntityName
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName
  isExternal: true
  name: GetOwnerName
  nameWithType: UserPreferenceArchiveHelper.GetOwnerName
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetOwnerName
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName
  isExternal: true
  name: GetDatabaseName
  nameWithType: UserPreferenceArchiveHelper.GetDatabaseName
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetDatabaseName
- uid: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue
  isExternal: true
  name: GetPreferenceValue
  nameWithType: UserPreferenceArchiveHelper.GetPreferenceValue
  fullName: SuperOffice.CRM.ArchiveLists.UserPreferenceArchiveHelper.GetPreferenceValue
- uid: System.ValueTuple{System.String,System.String}
  commentId: '!:System.ValueTuple{System.String,System.String}'
  definition: System.ValueTuple`2
  name: ValueTuple<String, String>
  nameWithType: ValueTuple<String, String>
  fullName: System.ValueTuple<System.String, System.String>
  nameWithType.vb: ValueTuple(Of String, String)
  fullName.vb: System.ValueTuple(Of System.String, System.String)
  name.vb: ValueTuple(Of String, String)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  isExternal: true
  name: ValueTuple<, >
  nameWithType: ValueTuple<, >
  fullName: System.ValueTuple<, >
  nameWithType.vb: ValueTuple(Of , )
  fullName.vb: System.ValueTuple(Of , )
  name.vb: ValueTuple(Of , )
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
