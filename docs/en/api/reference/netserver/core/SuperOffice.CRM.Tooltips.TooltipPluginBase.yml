### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase
  commentId: T:SuperOffice.CRM.Tooltips.TooltipPluginBase
  id: TooltipPluginBase
  parent: SuperOffice.CRM.Tooltips
  children:
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.#ctor
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText(System.String)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues(System.String)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.ImageHint
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint(System.String,System.Int32)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines(System.String)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.SimpleHint
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String,System.Boolean@)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint(System.String,System.DateTime@)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String,System.Int32@)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String,System.String@)
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.UpdatedHint
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated
  langs:
  - csharp
  - vb
  name: TooltipPluginBase
  nameWithType: TooltipPluginBase
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nBase class for tooltip provide plugins. This class contains some useful helper functions,\nand implements the Template Method pattern. Derived classes need to implement the \n<xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip\" data-throw-if-not-resolved=\"false\"></xref> method, and can use the <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String%2cSystem.Int32%40)\" data-throw-if-not-resolved=\"false\"></xref> and\nsimilar methods to obtain values from the tooltip hint. \n"
  remarks: "\nThe tooltip hints are accessible through the <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints\" data-throw-if-not-resolved=\"false\"></xref> property, but clients should\nusually find the provided access methods sufficient. <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String%2cSystem.Int32%40)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String%2cSystem.String%40)\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String%2cSystem.Boolean%40)\" data-throw-if-not-resolved=\"false\"></xref> look for and parse the given type of key, and return a bool value\nthat specifies whether the given key was found.\n<p></p>\n<xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple\" data-throw-if-not-resolved=\"false\"></xref> are boolean properties that give the result of a\nsearch for &apos;images=true&apos; and &apos;simple=true&apos;, to promote a common way of specifying these two properties.\n<p></p>\nThe class implements the <xref href=\"SuperOffice.CRM.Tooltips.ITooltipProviderPlugin\" data-throw-if-not-resolved=\"false\"></xref> and thereby also the <see cref=\"!:IPlugin\"></see>\ninterfaces. Derived classes need to be marked with the <see cref=\"!:TooltipProviderPluginAttribute\"></see> attribute,\nspecifying a provider name (please prefix with your company to help make it unique and recognizable), and\noptionally a priority. The attribute is also used to register hint keys; the derived class will be called\nonly for requests matching at least one key.\n"
  syntax:
    content: 'public abstract class TooltipPluginBase : ITooltipProviderPlugin, IPlugin'
    content.vb: >-
      Public MustInherit Class TooltipPluginBase
          Implements ITooltipProviderPlugin, IPlugin
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Tooltips.ActivityTypeTooltipPlugin
  - SuperOffice.CRM.Tooltips.AppointmentMotherTooltipPlugin
  - SuperOffice.CRM.Tooltips.AppointmentTooltipPlugin
  - SuperOffice.CRM.Tooltips.AssociateTooltipPlugin
  - SuperOffice.CRM.Tooltips.CalendarDayTooltipPlugin
  - SuperOffice.CRM.Tooltips.ChatSessionTooltipPlugin
  - SuperOffice.CRM.Tooltips.ConflictTooltipPlugin
  - SuperOffice.CRM.Tooltips.ConsentPurposeTooltipPlugin
  - SuperOffice.CRM.Tooltips.ConsentTooltipPlugin
  - SuperOffice.CRM.Tooltips.ContactTooltipPlugin
  - SuperOffice.CRM.Tooltips.DashboardTileTooltipPlugin
  - SuperOffice.CRM.Tooltips.DashboardTooltipPlugin
  - SuperOffice.CRM.Tooltips.DocumentTooltipPlugin
  - SuperOffice.CRM.Tooltips.EmailTooltipPlugin
  - SuperOffice.CRM.Tooltips.FilterTooltipPlugin
  - SuperOffice.CRM.Tooltips.InterestTooltipPlugin
  - SuperOffice.CRM.Tooltips.KbEntryTooltipPlugin
  - SuperOffice.CRM.Tooltips.MailItemTooltipPlugin
  - SuperOffice.CRM.Tooltips.MDOTooltipPlugin
  - SuperOffice.CRM.Tooltips.ModuleLicenseTooltipPlugin
  - SuperOffice.CRM.Tooltips.NavigatorButtonTooltipPlugin
  - SuperOffice.CRM.Tooltips.NoteTooltipBase
  - SuperOffice.CRM.Tooltips.PersonTooltipPlugin
  - SuperOffice.CRM.Tooltips.PhoneTooltipPlugin
  - SuperOffice.CRM.Tooltips.ProductTooltipPlugin
  - SuperOffice.CRM.Tooltips.ProjectMemberTooltipPlugin
  - SuperOffice.CRM.Tooltips.ProjectTooltipPlugin
  - SuperOffice.CRM.Tooltips.QuoteLineTooltipPlugin
  - SuperOffice.CRM.Tooltips.QuoteVersionTooltipPlugin
  - SuperOffice.CRM.Tooltips.SaleStakeholderTooltipPlugin
  - SuperOffice.CRM.Tooltips.SaleTooltipPlugin
  - SuperOffice.CRM.Tooltips.SelectionTooltipPlugin
  - SuperOffice.CRM.Tooltips.TextTooltipPlugin
  - SuperOffice.CRM.Tooltips.TicketTooltipPlugin
  - SuperOffice.CRM.Tooltips.TimeZoneTooltipPlugin
  - SuperOffice.CRM.Tooltips.UdefFieldTooltipPlugin
  - SuperOffice.CRM.Tooltips.UserPreferenceTooltipPlugin
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Tooltips.TooltipPluginBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.ImageHint
  commentId: F:SuperOffice.CRM.Tooltips.TooltipPluginBase.ImageHint
  id: ImageHint
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: ImageHint
  nameWithType: TooltipPluginBase.ImageHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.ImageHint
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  syntax:
    content: public const string ImageHint = "images"
    return:
      type: System.String
    content.vb: Public Const ImageHint As String = "images"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.SimpleHint
  commentId: F:SuperOffice.CRM.Tooltips.TooltipPluginBase.SimpleHint
  id: SimpleHint
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: SimpleHint
  nameWithType: TooltipPluginBase.SimpleHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.SimpleHint
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  syntax:
    content: public const string SimpleHint = "simple"
    return:
      type: System.String
    content.vb: Public Const SimpleHint As String = "simple"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.UpdatedHint
  commentId: F:SuperOffice.CRM.Tooltips.TooltipPluginBase.UpdatedHint
  id: UpdatedHint
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: UpdatedHint
  nameWithType: TooltipPluginBase.UpdatedHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.UpdatedHint
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  syntax:
    content: public const string UpdatedHint = "updated"
    return:
      type: System.String
    content.vb: Public Const UpdatedHint As String = "updated"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})
  id: GetTooltip(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: GetTooltip(Dictionary<String, List<String>>)
  nameWithType: TooltipPluginBase.GetTooltip(Dictionary<String, List<String>>)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip(System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.String>>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nImplements the interface method; caches this hints and calls the inner method\n"
  syntax:
    content: public string GetTooltip(Dictionary<string, List<string>> hints)
    parameters:
    - id: hints
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
      description: Tooltip hints
    return:
      type: System.String
      description: Tooltip text, or string.Empty
    content.vb: Public Function GetTooltip(hints As Dictionary(Of String, List(Of String))) As String
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip*
  nameWithType.vb: TooltipPluginBase.GetTooltip(Dictionary(Of String, List(Of String)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip(System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of System.String)))
  name.vb: GetTooltip(Dictionary(Of String, List(Of String)))
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip
  id: InnerGetTooltip
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: InnerGetTooltip()
  nameWithType: TooltipPluginBase.InnerGetTooltip()
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nSubclass contract: derived class must implement their tooltip logicin this method. \n"
  remarks: "\nThe tooltip hints are accessible through the <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints\" data-throw-if-not-resolved=\"false\"></xref> property, but clients should\nusually find the provided access methods sufficient. <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String%2cSystem.Int32%40)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String%2cSystem.String%40)\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String%2cSystem.Boolean%40)\" data-throw-if-not-resolved=\"false\"></xref> look for and parse the given type of key, and return a bool value\nthat specifies whether the given key was found.\n"
  syntax:
    content: protected abstract string InnerGetTooltip()
    return:
      type: System.String
      description: Tooltip text, or an empty string
    content.vb: Protected MustOverride Function InnerGetTooltip As String
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String,System.Int32@)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String,System.Int32@)
  id: TryGetIntHint(System.String,System.Int32@)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: TryGetIntHint(String, out Int32)
  nameWithType: TooltipPluginBase.TryGetIntHint(String, out Int32)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String, out System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nSearch the hints dictionary (this is an O(1) operation) for the given hint, and try to parse it as an int.\nZero is the result if the key is not found or has an invalid format. The return value is true iff the hint\nis found and is parseable as an int. Formats accepted are as for <see cref=\"!:SuperOffice.Util.CultureDataFormatter.TryParse\"></see>.\nIf more than one hint of the same name exists, the value of the first one will be used.\n"
  syntax:
    content: protected bool TryGetIntHint(string hintName, out int result)
    parameters:
    - id: hintName
      type: System.String
      description: Hint key to look for
    - id: result
      type: System.Int32
      description: 'Out: found value, or 0'
    return:
      type: System.Boolean
      description: True if the hint is found and is valid
    content.vb: Protected Function TryGetIntHint(hintName As String, ByRef result As Integer) As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint*
  nameWithType.vb: TooltipPluginBase.TryGetIntHint(String, ByRef Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint(System.String, ByRef System.Int32)
  name.vb: TryGetIntHint(String, ByRef Int32)
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String,System.String@)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String,System.String@)
  id: TryGetStringHint(System.String,System.String@)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: TryGetStringHint(String, out String)
  nameWithType: TooltipPluginBase.TryGetStringHint(String, out String)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String, out System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nSearch the hints dictionary (this is an O(1) operation) for the given hint. The return value is true iff the hint\nis found.\nIf more than one hint of the same name exists, the value of the first one will be used.\n"
  syntax:
    content: protected bool TryGetStringHint(string hintName, out string result)
    parameters:
    - id: hintName
      type: System.String
      description: Hint key to look for
    - id: result
      type: System.String
      description: 'Out: found value, or null'
    return:
      type: System.Boolean
      description: True if the hint is found and is valid
    content.vb: Protected Function TryGetStringHint(hintName As String, ByRef result As String) As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint*
  nameWithType.vb: TooltipPluginBase.TryGetStringHint(String, ByRef String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint(System.String, ByRef System.String)
  name.vb: TryGetStringHint(String, ByRef String)
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String,System.Boolean@)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String,System.Boolean@)
  id: TryGetBoolHint(System.String,System.Boolean@)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: TryGetBoolHint(String, out Boolean)
  nameWithType: TooltipPluginBase.TryGetBoolHint(String, out Boolean)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String, out System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nSearch the hints dictionary (this is an O(1) operation) for the given hint, and try to parse it as a bool.\nFalse is the result if the key is not found or has an invalid format. The return value is true if the hint\nis found and is parseable as a bool. Strings accepted are as for <xref href=\"System.Boolean.TryParse(System.String%2cSystem.Boolean%40)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf more than one hint of the same name exists, the value of the first one will be used.\n"
  syntax:
    content: protected bool TryGetBoolHint(string hintName, out bool result)
    parameters:
    - id: hintName
      type: System.String
      description: Hint key to look for
    - id: result
      type: System.Boolean
      description: 'Out: found value, or false'
    return:
      type: System.Boolean
      description: True if the hint is found and is valid
    content.vb: Protected Function TryGetBoolHint(hintName As String, ByRef result As Boolean) As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint*
  nameWithType.vb: TooltipPluginBase.TryGetBoolHint(String, ByRef Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint(System.String, ByRef System.Boolean)
  name.vb: TryGetBoolHint(String, ByRef Boolean)
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint(System.String,System.DateTime@)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint(System.String,System.DateTime@)
  id: TryGetDateHint(System.String,System.DateTime@)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: TryGetDateHint(String, out DateTime)
  nameWithType: TooltipPluginBase.TryGetDateHint(String, out DateTime)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint(System.String, out System.DateTime)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nSearch the hints dictionary (this is an O(1) operation) for the given hint, and try to parse it as a datetime.\nDateTime.MinValue is the result if the key is not found or has an invalid format. The return value is true iff the hint\nis found and is parseable as a datetime. Both the invariant and current cultures are used, in that order.\nIf more than one hint of the same name exists, the value of the first one will be used.\n"
  syntax:
    content: protected bool TryGetDateHint(string hintName, out DateTime result)
    parameters:
    - id: hintName
      type: System.String
      description: Hint key to look for
    - id: result
      type: System.DateTime
      description: 'Out: found value, or false'
    return:
      type: System.Boolean
      description: True if the hint is found and is valid
    content.vb: Protected Function TryGetDateHint(hintName As String, ByRef result As Date) As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint*
  nameWithType.vb: TooltipPluginBase.TryGetDateHint(String, ByRef DateTime)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint(System.String, ByRef System.DateTime)
  name.vb: TryGetDateHint(String, ByRef DateTime)
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues(System.String)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues(System.String)
  id: GetRawValues(System.String)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: GetRawValues(String)
  nameWithType: TooltipPluginBase.GetRawValues(String)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nGet raw hint values, based on the hint name\n"
  syntax:
    content: protected List<string> GetRawValues(string hintName)
    parameters:
    - id: hintName
      type: System.String
      description: Hint key to look for
    return:
      type: System.Collections.Generic.List{System.String}
      description: List of raw values, or null if the hint did not exist
    content.vb: Protected Function GetRawValues(hintName As String) As List(Of String)
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint(System.String,System.Int32)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint(System.String,System.Int32)
  id: MakeImageHint(System.String,System.Int32)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: MakeImageHint(String, Int32)
  nameWithType: TooltipPluginBase.MakeImageHint(String, Int32)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint(System.String, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nUtility method for creating an image hint with the correct syntax, from a key and id combination.\nThis method will automatically take into account the <xref href=\"SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages\" data-throw-if-not-resolved=\"false\"></xref> property of the current instance.\n"
  syntax:
    content: protected string MakeImageHint(string key, int id)
    parameters:
    - id: key
      type: System.String
      description: Key name, for instance person_id. This key must be something that is recognized by the image streaming service.
    - id: id
      type: System.Int32
      description: ID for the given key
    return:
      type: System.String
      description: Image hint
    content.vb: Protected Function MakeImageHint(key As String, id As Integer) As String
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines(System.String)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines(System.String)
  id: RemoveBlankLines(System.String)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: RemoveBlankLines(String)
  nameWithType: TooltipPluginBase.RemoveBlankLines(String)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nRemove blank lines from a string, and convert \\r\\n to just \\n. If the remainder of the string after processing is just \\n, \nan empty string will be returned as the final result; otherwise we just remove single or multiple blank lines.\n"
  syntax:
    content: protected static string RemoveBlankLines(string text)
    parameters:
    - id: text
      type: System.String
      description: String to process
    return:
      type: System.String
      description: Result with no blank lines
    content.vb: Protected Shared Function RemoveBlankLines(text As String) As String
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText(System.String)
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText(System.String)
  id: FormatDescriptionText(System.String)
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: FormatDescriptionText(String)
  nameWithType: TooltipPluginBase.FormatDescriptionText(String)
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nRemove blank lines from a string and make sure the length of the string does not exceed 256 characters.\nThis method should be used to format the Text property of an entity like Appointment, Sale and Project, \nbecause the length of the text property is unlimited.\n"
  syntax:
    content: protected static string FormatDescriptionText(string text)
    parameters:
    - id: text
      type: System.String
      description: String to process
    return:
      type: System.String
      description: Result with no blank lines and maximum 256 characters long
    content.vb: Protected Shared Function FormatDescriptionText(text As String) As String
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.#ctor
  commentId: M:SuperOffice.CRM.Tooltips.TooltipPluginBase.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: TooltipPluginBase()
  nameWithType: TooltipPluginBase.TooltipPluginBase()
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TooltipPluginBase()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  syntax:
    content: protected TooltipPluginBase()
    content.vb: Protected Sub New
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints
  commentId: P:SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints
  id: Hints
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: Hints
  nameWithType: TooltipPluginBase.Hints
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nThe raw hints dictionary\n"
  syntax:
    content: protected Dictionary<string, List<string>> Hints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
    content.vb: Protected ReadOnly Property Hints As Dictionary(Of String, List(Of String))
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages
  commentId: P:SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages
  id: WantImages
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: WantImages
  nameWithType: TooltipPluginBase.WantImages
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nTrue if the hints dictionary contains the property &apos;images=true&apos;, or if there is no images property in the hint\n"
  syntax:
    content: protected bool WantImages { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property WantImages As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple
  commentId: P:SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple
  id: WantSimple
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: WantSimple
  nameWithType: TooltipPluginBase.WantSimple
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nTrue if the hints dictionary contains the property &apos;simple=true&apos;\n"
  syntax:
    content: protected bool WantSimple { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property WantSimple As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated
  commentId: P:SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated
  id: WantUpdated
  parent: SuperOffice.CRM.Tooltips.TooltipPluginBase
  langs:
  - csharp
  - vb
  name: WantUpdated
  nameWithType: TooltipPluginBase.WantUpdated
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Tooltips
  summary: "\nTrue if the hints dictionary contains the property &apos;updated=true&apos;, or if the property is missing. False if the \nhints dictionary contains the property &apos;updated=false&apos;\n"
  syntax:
    content: protected bool WantUpdated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property WantUpdated As Boolean
  overload: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
references:
- uid: SuperOffice.CRM.Tooltips
  commentId: N:SuperOffice.CRM.Tooltips
  isExternal: true
  name: SuperOffice.CRM.Tooltips
  nameWithType: SuperOffice.CRM.Tooltips
  fullName: SuperOffice.CRM.Tooltips
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<TooltipPluginBase, To>()
  nameWithType: EnumUtil.MapEnums<TooltipPluginBase, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Tooltips.TooltipPluginBase, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of TooltipPluginBase, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Tooltips.TooltipPluginBase, To)()
  name.vb: MapEnums(Of TooltipPluginBase, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<TooltipPluginBase, To>
    nameWithType: EnumUtil.MapEnums<TooltipPluginBase, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Tooltips.TooltipPluginBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of TooltipPluginBase, To)
    nameWithType: EnumUtil.MapEnums(Of TooltipPluginBase, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Tooltips.TooltipPluginBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<TooltipPluginBase, To>()
  nameWithType: Converters.MapEnums<TooltipPluginBase, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Tooltips.TooltipPluginBase, To>()
  nameWithType.vb: Converters.MapEnums(Of TooltipPluginBase, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Tooltips.TooltipPluginBase, To)()
  name.vb: MapEnums(Of TooltipPluginBase, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<TooltipPluginBase, To>
    nameWithType: Converters.MapEnums<TooltipPluginBase, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Tooltips.TooltipPluginBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of TooltipPluginBase, To)
    nameWithType: Converters.MapEnums(Of TooltipPluginBase, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Tooltips.TooltipPluginBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip
  isExternal: true
  name: GetTooltip
  nameWithType: TooltipPluginBase.GetTooltip
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetTooltip
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<String>>
  nameWithType: Dictionary<String, List<String>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.String>>
  nameWithType.vb: Dictionary(Of String, List(Of String))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of System.String))
  name.vb: Dictionary(Of String, List(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip
  isExternal: true
  name: InnerGetTooltip
  nameWithType: TooltipPluginBase.InnerGetTooltip
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.InnerGetTooltip
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint
  isExternal: true
  name: TryGetIntHint
  nameWithType: TooltipPluginBase.TryGetIntHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetIntHint
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint
  isExternal: true
  name: TryGetStringHint
  nameWithType: TooltipPluginBase.TryGetStringHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetStringHint
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint
  isExternal: true
  name: TryGetBoolHint
  nameWithType: TooltipPluginBase.TryGetBoolHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetBoolHint
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint
  isExternal: true
  name: TryGetDateHint
  nameWithType: TooltipPluginBase.TryGetDateHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TryGetDateHint
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues
  isExternal: true
  name: GetRawValues
  nameWithType: TooltipPluginBase.GetRawValues
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.GetRawValues
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint
  isExternal: true
  name: MakeImageHint
  nameWithType: TooltipPluginBase.MakeImageHint
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.MakeImageHint
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines
  isExternal: true
  name: RemoveBlankLines
  nameWithType: TooltipPluginBase.RemoveBlankLines
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.RemoveBlankLines
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText
  isExternal: true
  name: FormatDescriptionText
  nameWithType: TooltipPluginBase.FormatDescriptionText
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.FormatDescriptionText
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.#ctor*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.#ctor
  isExternal: true
  name: TooltipPluginBase
  nameWithType: TooltipPluginBase.TooltipPluginBase
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.TooltipPluginBase
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints
  isExternal: true
  name: Hints
  nameWithType: TooltipPluginBase.Hints
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.Hints
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages
  isExternal: true
  name: WantImages
  nameWithType: TooltipPluginBase.WantImages
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantImages
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple
  isExternal: true
  name: WantSimple
  nameWithType: TooltipPluginBase.WantSimple
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantSimple
- uid: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated*
  commentId: Overload:SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated
  isExternal: true
  name: WantUpdated
  nameWithType: TooltipPluginBase.WantUpdated
  fullName: SuperOffice.CRM.Tooltips.TooltipPluginBase.WantUpdated
