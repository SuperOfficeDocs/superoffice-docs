### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2
  commentId: T:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2
  id: CollectionOps.GetKeyFromValueItem`2
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.#ctor(System.Object,System.IntPtr)
  - SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.BeginInvoke(`1,System.AsyncCallback,System.Object)
  - SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EndInvoke(System.IAsyncResult)
  - SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.Invoke(`1)
  langs:
  - csharp
  - vb
  name: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>
  type: Delegate
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nDelegate for the <xref href=\"SuperOffice.Util.CollectionOps.CreateDictionaryFromArray%60%602(%60%601%5b%5d%2cSuperOffice.Util.CollectionOps.GetKeyFromValueItem%7b%60%600%2c%60%601%7d)\" data-throw-if-not-resolved=\"false\"></xref> methods, whose task is to extract whatever is the\nkey from the given item\n"
  syntax:
    content: public delegate KeyType GetKeyFromValueItem<KeyType, ValueType>(ValueType item);
    parameters:
    - id: item
      type: '{ValueType}'
      description: Item to extract key from
    typeParameters:
    - id: KeyType
      description: Type to return as key
    - id: ValueType
      description: Value type, same as the incoming item type
    return:
      type: '{KeyType}'
      description: Item of type KeyType
    content.vb: Public Delegate Function GetKeyFromValueItem(Of KeyType, ValueType)(item As ValueType) As KeyType
  extensionMethods:
  - SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EnumUtil.MapEnums``2
  - SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType)
  name.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType)
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.#ctor(System.Object,System.IntPtr)
  commentId: M:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.#ctor(System.Object,System.IntPtr)
  id: '#ctor(System.Object,System.IntPtr)'
  parent: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2
  langs:
  - csharp
  - vb
  name: GetKeyFromValueItem(Object, IntPtr)
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.GetKeyFromValueItem(Object, IntPtr)
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.GetKeyFromValueItem(System.Object, System.IntPtr)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public GetKeyFromValueItem(object object, IntPtr method)
    parameters:
    - id: object
      type: System.Object
    - id: method
      type: System.IntPtr
    content.vb: Public Sub New(object As Object, method As IntPtr)
  overload: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.#ctor*
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).GetKeyFromValueItem(Object, IntPtr)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).GetKeyFromValueItem(System.Object, System.IntPtr)
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.Invoke(`1)
  commentId: M:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.Invoke(`1)
  id: Invoke(`1)
  parent: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2
  langs:
  - csharp
  - vb
  name: Invoke(ValueType)
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.Invoke(ValueType)
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.Invoke(ValueType)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public virtual KeyType Invoke(ValueType item)
    parameters:
    - id: item
      type: '{ValueType}'
    return:
      type: '{KeyType}'
    content.vb: Public Overridable Function Invoke(item As ValueType) As KeyType
  overload: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.Invoke*
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).Invoke(ValueType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).Invoke(ValueType)
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.BeginInvoke(`1,System.AsyncCallback,System.Object)
  commentId: M:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.BeginInvoke(`1,System.AsyncCallback,System.Object)
  id: BeginInvoke(`1,System.AsyncCallback,System.Object)
  parent: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2
  langs:
  - csharp
  - vb
  name: BeginInvoke(ValueType, AsyncCallback, Object)
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.BeginInvoke(ValueType, AsyncCallback, Object)
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.BeginInvoke(ValueType, System.AsyncCallback, System.Object)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public virtual IAsyncResult BeginInvoke(ValueType item, AsyncCallback callback, object object)
    parameters:
    - id: item
      type: '{ValueType}'
    - id: callback
      type: System.AsyncCallback
    - id: object
      type: System.Object
    return:
      type: System.IAsyncResult
    content.vb: Public Overridable Function BeginInvoke(item As ValueType, callback As AsyncCallback, object As Object) As IAsyncResult
  overload: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.BeginInvoke*
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).BeginInvoke(ValueType, AsyncCallback, Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).BeginInvoke(ValueType, System.AsyncCallback, System.Object)
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EndInvoke(System.IAsyncResult)
  commentId: M:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2
  langs:
  - csharp
  - vb
  name: EndInvoke(IAsyncResult)
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.EndInvoke(IAsyncResult)
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.EndInvoke(System.IAsyncResult)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public virtual KeyType EndInvoke(IAsyncResult result)
    parameters:
    - id: result
      type: System.IAsyncResult
    return:
      type: '{KeyType}'
    content.vb: Public Overridable Function EndInvoke(result As IAsyncResult) As KeyType
  overload: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EndInvoke*
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).EndInvoke(IAsyncResult)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).EndInvoke(System.IAsyncResult)
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>()
  nameWithType: EnumUtil.MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)()
  name.vb: MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>
    nameWithType: EnumUtil.MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)
    nameWithType: EnumUtil.MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>()
  nameWithType: Converters.MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>()
  nameWithType.vb: Converters.MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)()
  name.vb: MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>
    nameWithType: Converters.MapEnums<CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)
    nameWithType: Converters.MapEnums(Of CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{ValueType}'
  commentId: '!:ValueType'
  definition: ValueType
  name: ValueType
  nameWithType: ValueType
  fullName: ValueType
- uid: '{KeyType}'
  commentId: '!:KeyType'
  definition: KeyType
  name: KeyType
  nameWithType: KeyType
  fullName: KeyType
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: ValueType
  name: ValueType
  nameWithType: ValueType
  fullName: ValueType
- uid: KeyType
  name: KeyType
  nameWithType: KeyType
  fullName: KeyType
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.#ctor*
  commentId: Overload:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.#ctor
  isExternal: true
  name: GetKeyFromValueItem
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.GetKeyFromValueItem
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.GetKeyFromValueItem
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).GetKeyFromValueItem
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).GetKeyFromValueItem
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.Invoke*
  commentId: Overload:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.Invoke
  isExternal: true
  name: Invoke
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.Invoke
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.Invoke
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).Invoke
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).Invoke
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.BeginInvoke*
  commentId: Overload:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.BeginInvoke
  isExternal: true
  name: BeginInvoke
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.BeginInvoke
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.BeginInvoke
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).BeginInvoke
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).BeginInvoke
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EndInvoke*
  commentId: Overload:SuperOffice.Util.CollectionOps.GetKeyFromValueItem`2.EndInvoke
  isExternal: true
  name: EndInvoke
  nameWithType: CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.EndInvoke
  fullName: SuperOffice.Util.CollectionOps.GetKeyFromValueItem<KeyType, ValueType>.EndInvoke
  nameWithType.vb: CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).EndInvoke
  fullName.vb: SuperOffice.Util.CollectionOps.GetKeyFromValueItem(Of KeyType, ValueType).EndInvoke
