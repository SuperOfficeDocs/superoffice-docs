### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.RecurrencePattern
  commentId: T:SuperOffice.Data.RecurrencePattern
  id: RecurrencePattern
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.RecurrencePattern.Custom
  - SuperOffice.Data.RecurrencePattern.Daily
  - SuperOffice.Data.RecurrencePattern.Monthly
  - SuperOffice.Data.RecurrencePattern.Unknown
  - SuperOffice.Data.RecurrencePattern.Weekly
  - SuperOffice.Data.RecurrencePattern.Yearly
  langs:
  - csharp
  - vb
  name: RecurrencePattern
  nameWithType: RecurrencePattern
  fullName: SuperOffice.Data.RecurrencePattern
  type: Enum
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nEnumerator describing the main pattern of recurrence.\nThis Enum is used by:  RecurrenceRule.pattern\n"
  syntax:
    content: 'public enum RecurrencePattern : short'
    content.vb: Public Enum RecurrencePattern As Short
  extensionMethods:
  - SuperOffice.Data.RecurrencePattern.EnumUtil.MapEnums``2
  - SuperOffice.Data.RecurrencePattern.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.RecurrencePattern)
  - SuperOffice.Data.RecurrencePattern.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.RecurrencePattern.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: SuperOffice.Data.RecurrencePattern.Unknown
  commentId: F:SuperOffice.Data.RecurrencePattern.Unknown
  id: Unknown
  parent: SuperOffice.Data.RecurrencePattern
  langs:
  - csharp
  - vb
  name: Unknown
  nameWithType: RecurrencePattern.Unknown
  fullName: SuperOffice.Data.RecurrencePattern.Unknown
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n0: 0: Unknown/undecided type\n"
  syntax:
    content: Unknown = 0
    return:
      type: SuperOffice.Data.RecurrencePattern
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.RecurrencePattern.Daily
  commentId: F:SuperOffice.Data.RecurrencePattern.Daily
  id: Daily
  parent: SuperOffice.Data.RecurrencePattern
  langs:
  - csharp
  - vb
  name: Daily
  nameWithType: RecurrencePattern.Daily
  fullName: SuperOffice.Data.RecurrencePattern.Daily
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n1: Dayly recurrence.\n"
  syntax:
    content: Daily = 1
    return:
      type: SuperOffice.Data.RecurrencePattern
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.RecurrencePattern.Weekly
  commentId: F:SuperOffice.Data.RecurrencePattern.Weekly
  id: Weekly
  parent: SuperOffice.Data.RecurrencePattern
  langs:
  - csharp
  - vb
  name: Weekly
  nameWithType: RecurrencePattern.Weekly
  fullName: SuperOffice.Data.RecurrencePattern.Weekly
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n2: Weekly recurrence.\n"
  syntax:
    content: Weekly = 2
    return:
      type: SuperOffice.Data.RecurrencePattern
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.RecurrencePattern.Monthly
  commentId: F:SuperOffice.Data.RecurrencePattern.Monthly
  id: Monthly
  parent: SuperOffice.Data.RecurrencePattern
  langs:
  - csharp
  - vb
  name: Monthly
  nameWithType: RecurrencePattern.Monthly
  fullName: SuperOffice.Data.RecurrencePattern.Monthly
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n3: Monthly recurrence.\n"
  syntax:
    content: Monthly = 3
    return:
      type: SuperOffice.Data.RecurrencePattern
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.RecurrencePattern.Yearly
  commentId: F:SuperOffice.Data.RecurrencePattern.Yearly
  id: Yearly
  parent: SuperOffice.Data.RecurrencePattern
  langs:
  - csharp
  - vb
  name: Yearly
  nameWithType: RecurrencePattern.Yearly
  fullName: SuperOffice.Data.RecurrencePattern.Yearly
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n4: Yearly recurrence.\n"
  syntax:
    content: Yearly = 4
    return:
      type: SuperOffice.Data.RecurrencePattern
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.RecurrencePattern.Custom
  commentId: F:SuperOffice.Data.RecurrencePattern.Custom
  id: Custom
  parent: SuperOffice.Data.RecurrencePattern
  langs:
  - csharp
  - vb
  name: Custom
  nameWithType: RecurrencePattern.Custom
  fullName: SuperOffice.Data.RecurrencePattern.Custom
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n5: Custom recurrence, only dates are specified.  See RecurrenceDayPattern for details\n"
  syntax:
    content: Custom = 5
    return:
      type: SuperOffice.Data.RecurrencePattern
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.RecurrencePattern.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<RecurrencePattern, To>()
  nameWithType: EnumUtil.MapEnums<RecurrencePattern, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.RecurrencePattern, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of RecurrencePattern, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.RecurrencePattern, To)()
  name.vb: MapEnums(Of RecurrencePattern, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<RecurrencePattern, To>
    nameWithType: EnumUtil.MapEnums<RecurrencePattern, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.RecurrencePattern, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of RecurrencePattern, To)
    nameWithType: EnumUtil.MapEnums(Of RecurrencePattern, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.RecurrencePattern, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RecurrencePattern.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.RecurrencePattern)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<RecurrencePattern>(RecurrencePattern)
  nameWithType: ObjectExtensions.AssignByReflection<RecurrencePattern>(RecurrencePattern)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.RecurrencePattern>(SuperOffice.Data.RecurrencePattern)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of RecurrencePattern)(RecurrencePattern)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.RecurrencePattern)(SuperOffice.Data.RecurrencePattern)
  name.vb: AssignByReflection(Of RecurrencePattern)(RecurrencePattern)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<RecurrencePattern>
    nameWithType: ObjectExtensions.AssignByReflection<RecurrencePattern>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.RecurrencePattern>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RecurrencePattern
    name: RecurrencePattern
    nameWithType: RecurrencePattern
    fullName: SuperOffice.Data.RecurrencePattern
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of RecurrencePattern)
    nameWithType: ObjectExtensions.AssignByReflection(Of RecurrencePattern)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.RecurrencePattern)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.RecurrencePattern
    name: RecurrencePattern
    nameWithType: RecurrencePattern
    fullName: SuperOffice.Data.RecurrencePattern
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RecurrencePattern.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<RecurrencePattern>()
  nameWithType: ObjectExtensions.GraphCopy<RecurrencePattern>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.RecurrencePattern>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of RecurrencePattern)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.RecurrencePattern)()
  name.vb: GraphCopy(Of RecurrencePattern)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<RecurrencePattern>
    nameWithType: ObjectExtensions.GraphCopy<RecurrencePattern>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.RecurrencePattern>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of RecurrencePattern)
    nameWithType: ObjectExtensions.GraphCopy(Of RecurrencePattern)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.RecurrencePattern)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RecurrencePattern.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<RecurrencePattern, To>()
  nameWithType: Converters.MapEnums<RecurrencePattern, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.RecurrencePattern, To>()
  nameWithType.vb: Converters.MapEnums(Of RecurrencePattern, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.RecurrencePattern, To)()
  name.vb: MapEnums(Of RecurrencePattern, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<RecurrencePattern, To>
    nameWithType: Converters.MapEnums<RecurrencePattern, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.RecurrencePattern, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of RecurrencePattern, To)
    nameWithType: Converters.MapEnums(Of RecurrencePattern, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.RecurrencePattern, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.RecurrencePattern
  commentId: T:SuperOffice.Data.RecurrencePattern
  parent: SuperOffice.Data
  isExternal: true
  name: RecurrencePattern
  nameWithType: RecurrencePattern
  fullName: SuperOffice.Data.RecurrencePattern
