### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.AcceptingContext
  commentId: T:SuperOffice.License.AcceptingContext
  id: AcceptingContext
  parent: SuperOffice.License
  children:
  - SuperOffice.License.AcceptingContext.#ctor
  - SuperOffice.License.AcceptingContext.IsAccepting
  - SuperOffice.License.AcceptingContext.StartAccept
  langs:
  - csharp
  - vb
  name: AcceptingContext
  nameWithType: AcceptingContext
  fullName: SuperOffice.License.AcceptingContext
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nUsed for blocking SuperId soft trigger during Accept of license, \nalso allow online override to block sending of e-mails.\nUsed by LicenseManager to throttle the calls to SuperId.\nSee the UpdateSuperIdSoftTriggerPlugin in Online for usage.\n"
  syntax:
    content: >-
      [SoInject("Operation")]

      public class AcceptingContext : Object
    content.vb: >-
      <SoInject("Operation")>

      Public Class AcceptingContext
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.License.AcceptingContext.EnumUtil.MapEnums``2
  - SuperOffice.License.AcceptingContext.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.AcceptingContext)
  - SuperOffice.License.AcceptingContext.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.License.AcceptingContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Operation
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.License.AcceptingContext.#ctor
  commentId: M:SuperOffice.License.AcceptingContext.#ctor
  id: '#ctor'
  parent: SuperOffice.License.AcceptingContext
  langs:
  - csharp
  - vb
  name: AcceptingContext()
  nameWithType: AcceptingContext.AcceptingContext()
  fullName: SuperOffice.License.AcceptingContext.AcceptingContext()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nctor\n"
  syntax:
    content: public AcceptingContext()
    content.vb: Public Sub New
  overload: SuperOffice.License.AcceptingContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.AcceptingContext.StartAccept
  commentId: M:SuperOffice.License.AcceptingContext.StartAccept
  id: StartAccept
  parent: SuperOffice.License.AcceptingContext
  langs:
  - csharp
  - vb
  name: StartAccept()
  nameWithType: AcceptingContext.StartAccept()
  fullName: SuperOffice.License.AcceptingContext.StartAccept()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nStart blocking SuperId updates until Disposed.\n"
  syntax:
    content: public IDisposable StartAccept()
    return:
      type: System.IDisposable
      description: Disposable AcceptingSession
    content.vb: Public Function StartAccept As IDisposable
  overload: SuperOffice.License.AcceptingContext.StartAccept*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.AcceptingContext.IsAccepting
  commentId: P:SuperOffice.License.AcceptingContext.IsAccepting
  id: IsAccepting
  parent: SuperOffice.License.AcceptingContext
  langs:
  - csharp
  - vb
  name: IsAccepting
  nameWithType: AcceptingContext.IsAccepting
  fullName: SuperOffice.License.AcceptingContext.IsAccepting
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nAre we in the process of Accepting a new license? True if so we don&apos;t want to send notifications to SuperId.\n"
  syntax:
    content: public bool IsAccepting { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAccepting As Boolean
  overload: SuperOffice.License.AcceptingContext.IsAccepting*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.License.AcceptingContext.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<AcceptingContext, To>()
  nameWithType: EnumUtil.MapEnums<AcceptingContext, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.AcceptingContext, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of AcceptingContext, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.AcceptingContext, To)()
  name.vb: MapEnums(Of AcceptingContext, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<AcceptingContext, To>
    nameWithType: EnumUtil.MapEnums<AcceptingContext, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.AcceptingContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of AcceptingContext, To)
    nameWithType: EnumUtil.MapEnums(Of AcceptingContext, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.AcceptingContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.AcceptingContext.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.AcceptingContext)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<AcceptingContext>(AcceptingContext)
  nameWithType: ObjectExtensions.AssignByReflection<AcceptingContext>(AcceptingContext)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.AcceptingContext>(SuperOffice.License.AcceptingContext)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of AcceptingContext)(AcceptingContext)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.AcceptingContext)(SuperOffice.License.AcceptingContext)
  name.vb: AssignByReflection(Of AcceptingContext)(AcceptingContext)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<AcceptingContext>
    nameWithType: ObjectExtensions.AssignByReflection<AcceptingContext>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.AcceptingContext>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.AcceptingContext
    name: AcceptingContext
    nameWithType: AcceptingContext
    fullName: SuperOffice.License.AcceptingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of AcceptingContext)
    nameWithType: ObjectExtensions.AssignByReflection(Of AcceptingContext)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.AcceptingContext)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.AcceptingContext
    name: AcceptingContext
    nameWithType: AcceptingContext
    fullName: SuperOffice.License.AcceptingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.AcceptingContext.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<AcceptingContext>()
  nameWithType: ObjectExtensions.GraphCopy<AcceptingContext>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.AcceptingContext>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of AcceptingContext)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.AcceptingContext)()
  name.vb: GraphCopy(Of AcceptingContext)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<AcceptingContext>
    nameWithType: ObjectExtensions.GraphCopy<AcceptingContext>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.AcceptingContext>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of AcceptingContext)
    nameWithType: ObjectExtensions.GraphCopy(Of AcceptingContext)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.AcceptingContext)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.AcceptingContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<AcceptingContext, To>()
  nameWithType: Converters.MapEnums<AcceptingContext, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.AcceptingContext, To>()
  nameWithType.vb: Converters.MapEnums(Of AcceptingContext, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.AcceptingContext, To)()
  name.vb: MapEnums(Of AcceptingContext, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<AcceptingContext, To>
    nameWithType: Converters.MapEnums<AcceptingContext, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.AcceptingContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of AcceptingContext, To)
    nameWithType: Converters.MapEnums(Of AcceptingContext, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.AcceptingContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.AcceptingContext.#ctor*
  commentId: Overload:SuperOffice.License.AcceptingContext.#ctor
  isExternal: true
  name: AcceptingContext
  nameWithType: AcceptingContext.AcceptingContext
  fullName: SuperOffice.License.AcceptingContext.AcceptingContext
- uid: SuperOffice.License.AcceptingContext.StartAccept*
  commentId: Overload:SuperOffice.License.AcceptingContext.StartAccept
  isExternal: true
  name: StartAccept
  nameWithType: AcceptingContext.StartAccept
  fullName: SuperOffice.License.AcceptingContext.StartAccept
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.License.AcceptingContext.IsAccepting*
  commentId: Overload:SuperOffice.License.AcceptingContext.IsAccepting
  isExternal: true
  name: IsAccepting
  nameWithType: AcceptingContext.IsAccepting
  fullName: SuperOffice.License.AcceptingContext.IsAccepting
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
