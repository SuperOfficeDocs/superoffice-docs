### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Documents.PhysicalDocument
  commentId: T:SuperOffice.CRM.Documents.PhysicalDocument
  id: PhysicalDocument
  parent: SuperOffice.CRM.Documents
  children:
  - SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  - SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync(System.String[],System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync(System.Int32,System.String,SuperOffice.IO.TagContainer,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync(System.Threading.CancellationToken,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  - SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  - SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  - SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync(System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync(System.Int32,System.Threading.CancellationToken,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync(System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  - SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.Length
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(System.String[],System.IO.Stream,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync(System.Int32,System.IO.Stream,System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: PhysicalDocument
  nameWithType: PhysicalDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nFacade for the Document Plugin system, and one-stop-shop for physical-document operations\n"
  remarks: "\nAn instance of this class represents a physical document in a document archive, and can be\nused to manipulate (Load, Save) that document and its metadata. Instances are constructed\nusing a static factory function, always based on an already existing information in the\ndatabase.\n<p></p>\nStatic methods also provide access to document template functions and other\nnon-document specific functions.\n"
  syntax:
    content: 'public sealed class PhysicalDocument : Object, IStreamProvider'
    content.vb: >-
      Public NotInheritable Class PhysicalDocument
          Inherits Object
          Implements IStreamProvider
  inheritance:
  - System.Object
  implements:
  - SuperOffice.IO.IStreamProvider
  extensionMethods:
  - SuperOffice.CRM.Documents.PhysicalDocument.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Documents.PhysicalDocument.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  id: GetDocument(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocument(Int32)
  nameWithType: PhysicalDocument.GetDocument(Int32)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static PhysicalDocument GetDocument(int documentId)
    parameters:
    - id: documentId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Documents.PhysicalDocument
    content.vb: Public Shared Function GetDocument(documentId As Integer) As PhysicalDocument
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  id: GetDocument(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocument(IDocumentInfo)
  nameWithType: PhysicalDocument.GetDocument(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static PhysicalDocument GetDocument(IDocumentInfo incomingInfo)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    return:
      type: SuperOffice.CRM.Documents.PhysicalDocument
    content.vb: Public Shared Function GetDocument(incomingInfo As IDocumentInfo) As PhysicalDocument
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  id: CreateNewEmptyAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewEmptyAsync(IDocumentInfo, String, String[], String, String[], CancellationToken)
  nameWithType: PhysicalDocument.CreateNewEmptyAsync(IDocumentInfo, String, String[], String, String[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<ValueTuple<string, string>> CreateNewEmptyAsync(IDocumentInfo incomingInfo, string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields, CancellationToken cancellationToken = null)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
    content.vb: Public Shared Function CreateNewEmptyAsync(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ValueTuple(Of String, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync*
  nameWithType.vb: PhysicalDocument.CreateNewEmptyAsync(IDocumentInfo, String, String(), String, String(), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String(), System.Threading.CancellationToken)
  name.vb: CreateNewEmptyAsync(IDocumentInfo, String, String(), String, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  id: CreateNewEmptyByRefAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewEmptyByRefAsync(IDocumentInfo, String, String[], String, String[])
  nameWithType: PhysicalDocument.CreateNewEmptyByRefAsync(IDocumentInfo, String, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<ValueTuple<string, IDocumentInfo, string>> CreateNewEmptyByRefAsync(IDocumentInfo incomingInfo, string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.String,SuperOffice.CRM.IDocumentInfo,System.String}}
    content.vb: Public Shared Function CreateNewEmptyByRefAsync(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String()) As Task(Of ValueTuple(Of String, IDocumentInfo, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync*
  nameWithType.vb: PhysicalDocument.CreateNewEmptyByRefAsync(IDocumentInfo, String, String(), String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String())
  name.vb: CreateNewEmptyByRefAsync(IDocumentInfo, String, String(), String, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.String,System.Threading.CancellationToken)
  id: CreateNewFromTemplateAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewFromTemplateAsync(IDocumentInfo, String, String[], String, String[], String, CancellationToken)
  nameWithType: PhysicalDocument.CreateNewFromTemplateAsync(IDocumentInfo, String, String[], String, String[], String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate a new document in the document archive without replacing template tags\n"
  remarks: "\nThis method will create a new physical document, using the physical template <strong>unchanged</strong>.\nNo template tag substitution will be attempted, no document conversions, nothing.\n<p></p>\nThe method is generally used for creating mailmerge template documents\n"
  syntax:
    content: public static Task<ValueTuple<string, string>> CreateNewFromTemplateAsync(IDocumentInfo incomingInfo, string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields, string uiCulture, CancellationToken cancellationToken = null)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    - id: uiCulture
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
      description: Reference to the newly created document in the document archive.
    content.vb: Public Shared Function CreateNewFromTemplateAsync(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String(), uiCulture As String, cancellationToken As CancellationToken = Nothing) As Task(Of ValueTuple(Of String, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync*
  nameWithType.vb: PhysicalDocument.CreateNewFromTemplateAsync(IDocumentInfo, String, String(), String, String(), String, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String(), System.String, System.Threading.CancellationToken)
  name.vb: CreateNewFromTemplateAsync(IDocumentInfo, String, String(), String, String(), String, CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String,System.Threading.CancellationToken)
  id: CreateNewFromTemplateWithTagsAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewFromTemplateWithTagsAsync(IDocumentInfo, String, String[], String, String[], TagContainer, String, CancellationToken)
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTagsAsync(IDocumentInfo, String, String[], String, String[], TagContainer, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[], SuperOffice.IO.TagContainer, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate a new document in the document archive, replacing template tags\n"
  remarks: "\nThis method will create a new physical document, using the physical template and\nreplacing all tags passed in through the TagContainer parameter.\n"
  syntax:
    content: public static Task<ValueTuple<string, string>> CreateNewFromTemplateWithTagsAsync(IDocumentInfo incomingInfo, string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields, TagContainer templateTags, string uiCulture, CancellationToken cancellationToken = null)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    - id: templateTags
      type: SuperOffice.IO.TagContainer
    - id: uiCulture
      type: System.String
      description: UI Language (en-US or nb-NO) - used to select appropriate doc template
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
      description: Reference to the newly created document in the document archive.
    content.vb: Public Shared Function CreateNewFromTemplateWithTagsAsync(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String(), templateTags As TagContainer, uiCulture As String, cancellationToken As CancellationToken = Nothing) As Task(Of ValueTuple(Of String, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync*
  nameWithType.vb: PhysicalDocument.CreateNewFromTemplateWithTagsAsync(IDocumentInfo, String, String(), String, String(), TagContainer, String, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String(), SuperOffice.IO.TagContainer, System.String, System.Threading.CancellationToken)
  name.vb: CreateNewFromTemplateWithTagsAsync(IDocumentInfo, String, String(), String, String(), TagContainer, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync(System.Threading.CancellationToken)
  id: SuggestFilenameAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SuggestFilenameAsync(CancellationToken)
  nameWithType: PhysicalDocument.SuggestFilenameAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<string> SuggestFilenameAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function SuggestFilenameAsync(cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  id: SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveDocumentFromStreamAsync(IDocumentInfo, String[], Stream, CancellationToken)
  nameWithType: PhysicalDocument.SaveDocumentFromStreamAsync(IDocumentInfo, String[], Stream, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo, System.String[], System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<ReturnInfo> SaveDocumentFromStreamAsync(IDocumentInfo incomingInfo, string[] allowedReturnTypes, Stream content, CancellationToken cancellationToken = null)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: allowedReturnTypes
      type: System.String[]
    - id: content
      type: System.IO.Stream
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
    content.vb: Public Shared Function SaveDocumentFromStreamAsync(incomingInfo As IDocumentInfo, allowedReturnTypes As String(), content As Stream, cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync*
  nameWithType.vb: PhysicalDocument.SaveDocumentFromStreamAsync(IDocumentInfo, String(), Stream, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo, System.String(), System.IO.Stream, System.Threading.CancellationToken)
  name.vb: SaveDocumentFromStreamAsync(IDocumentInfo, String(), Stream, CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(System.String[],System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(System.String[],System.IO.Stream,System.Threading.CancellationToken)
  id: SaveDocumentFromStreamAsync(System.String[],System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveDocumentFromStreamAsync(String[], Stream, CancellationToken)
  nameWithType: PhysicalDocument.SaveDocumentFromStreamAsync(String[], Stream, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(System.String[], System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<ReturnInfo> SaveDocumentFromStreamAsync(string[] allowedReturnTypes, Stream content, CancellationToken cancellationToken = null)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    - id: content
      type: System.IO.Stream
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
    content.vb: Public Function SaveDocumentFromStreamAsync(allowedReturnTypes As String(), content As Stream, cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync*
  nameWithType.vb: PhysicalDocument.SaveDocumentFromStreamAsync(String(), Stream, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync(System.String(), System.IO.Stream, System.Threading.CancellationToken)
  name.vb: SaveDocumentFromStreamAsync(String(), Stream, CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  id: LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentStreamAsync(IDocumentInfo, String, CancellationToken)
  nameWithType: PhysicalDocument.LoadDocumentStreamAsync(IDocumentInfo, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<Stream> LoadDocumentStreamAsync(IDocumentInfo incomingInfo, string versionId, CancellationToken cancellationToken = null)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Shared Function LoadDocumentStreamAsync(incomingInfo As IDocumentInfo, versionId As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.String,System.Threading.CancellationToken)
  id: LoadDocumentStreamAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentStreamAsync(String, CancellationToken)
  nameWithType: PhysicalDocument.LoadDocumentStreamAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<Stream> LoadDocumentStreamAsync(string versionId, CancellationToken cancellationToken = null)
    parameters:
    - id: versionId
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function LoadDocumentStreamAsync(versionId As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.Threading.CancellationToken)
  id: LoadDocumentStreamAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentStreamAsync(CancellationToken)
  nameWithType: PhysicalDocument.LoadDocumentStreamAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<Stream> LoadDocumentStreamAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function LoadDocumentStreamAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync(System.Threading.CancellationToken)
  id: GetDatabaseLanguageCodeAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDatabaseLanguageCodeAsync(CancellationToken)
  nameWithType: PhysicalDocument.GetDatabaseLanguageCodeAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nReturns the database language for the current SuperOffice installation as stored in the ProductVersion table &quot;SuperOffice&quot; &quot;DatabaseLanguage&quot;. &quot;US&quot;\n"
  syntax:
    content: public static Task<string> GetDatabaseLanguageCodeAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: 'SuperOffice Language code: &quot;US&quot;, &quot;SW&quot;, &quot;GE&quot; etc. NULL if nothing is configured.'
    content.vb: Public Shared Function GetDatabaseLanguageCodeAsync(cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync(System.Threading.CancellationToken)
  id: GetDatabaseLanguageCultureAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDatabaseLanguageCultureAsync(CancellationToken)
  nameWithType: PhysicalDocument.GetDatabaseLanguageCultureAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nReturns the database language for the current SuperOffice installation as stored in the ProductVersion table &quot;SuperOffice&quot; &quot;DatabaseLanguage&quot;. &quot;US&quot;\n"
  syntax:
    content: public static Task<CultureInfo> GetDatabaseLanguageCultureAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Globalization.CultureInfo}
      description: 'CultureInfo based on the neutral ISO language: &quot;en&quot;, &quot;sv&quot;, &quot;de&quot; etc. NULL if nothing is configured.'
    content.vb: Public Shared Function GetDatabaseLanguageCultureAsync(cancellationToken As CancellationToken = Nothing) As Task(Of CultureInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  id: GetTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetTemplateLanguagesAsync(IDocumentTemplateInfo, CancellationToken)
  nameWithType: PhysicalDocument.GetTemplateLanguagesAsync(IDocumentTemplateInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nReturn the list of language-specific variants of a given document template, excepting the default language (&quot;&quot;).\nThe DatabaseLanguage should be used to determine the default language.\n"
  syntax:
    content: public static Task<string[]> GetTemplateLanguagesAsync(IDocumentTemplateInfo templateInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: The document template info
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: 'Array of ISO language codes identifying language variants: [&quot;en&quot;, &quot;sv&quot;, &quot;de&quot;]. Empty array if no variants'
    content.vb: Public Shared Function GetTemplateLanguagesAsync(templateInfo As IDocumentTemplateInfo, cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: Throws if templateInfo is null or id 0
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.Threading.CancellationToken)
  id: GetDocumentUrlAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentUrlAsync(CancellationToken)
  nameWithType: PhysicalDocument.GetDocumentUrlAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<string> GetDocumentUrlAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetDocumentUrlAsync(cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetDocumentUrlAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentUrlAsync(String, Boolean, CancellationToken)
  nameWithType: PhysicalDocument.GetDocumentUrlAsync(String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<string> GetDocumentUrlAsync(string versionId, bool writeableUrl, CancellationToken cancellationToken = null)
    parameters:
    - id: versionId
      type: System.String
    - id: writeableUrl
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetDocumentUrlAsync(versionId As String, writeableUrl As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentUrlAsync(IDocumentInfo, String, Boolean, CancellationToken)
  nameWithType: PhysicalDocument.GetDocumentUrlAsync(IDocumentInfo, String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<string> GetDocumentUrlAsync(IDocumentInfo incomingInfo, string versionId, bool writeableUrl, CancellationToken cancellationToken = null)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
    - id: writeableUrl
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function GetDocumentUrlAsync(incomingInfo As IDocumentInfo, versionId As String, writeableUrl As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync(System.Threading.CancellationToken,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync(System.Threading.CancellationToken,System.String[])
  id: DeleteDocumentAsync(System.Threading.CancellationToken,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DeleteDocumentAsync(CancellationToken, String[])
  nameWithType: PhysicalDocument.DeleteDocumentAsync(CancellationToken, String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync(System.Threading.CancellationToken, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<ReturnInfo> DeleteDocumentAsync(CancellationToken cancellationToken = null, params string[] allowedReturnTypes)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: allowedReturnTypes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
    content.vb: Public Function DeleteDocumentAsync(cancellationToken As CancellationToken = Nothing, ParamArray allowedReturnTypes As String()) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync*
  nameWithType.vb: PhysicalDocument.DeleteDocumentAsync(CancellationToken, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync(System.Threading.CancellationToken, System.String())
  name.vb: DeleteDocumentAsync(CancellationToken, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync(System.String,System.Threading.CancellationToken)
  id: RenameDocumentAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: RenameDocumentAsync(String, CancellationToken)
  nameWithType: PhysicalDocument.RenameDocumentAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<string> RenameDocumentAsync(string suggestedNewName, CancellationToken cancellationToken = null)
    parameters:
    - id: suggestedNewName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function RenameDocumentAsync(suggestedNewName As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  id: GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentIdFromPathAsync(String, CancellationToken)
  nameWithType: PhysicalDocument.GetDocumentIdFromPathAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<int> GetDocumentIdFromPathAsync(string documentNameAndPath, CancellationToken cancellationToken = null)
    parameters:
    - id: documentNameAndPath
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function GetDocumentIdFromPathAsync(documentNameAndPath As String, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  id: GetPluginCapabilities(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetPluginCapabilities(Int32)
  nameWithType: PhysicalDocument.GetPluginCapabilities(Int32)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Dictionary<string, string> GetPluginCapabilities(int pluginId)
    parameters:
    - id: pluginId
      type: System.Int32
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared Function GetPluginCapabilities(pluginId As Integer) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  id: LoadDocumentTemplateStreamAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStreamAsync(String, Boolean, String, CancellationToken)
  nameWithType: PhysicalDocument.LoadDocumentTemplateStreamAsync(String, Boolean, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.String, System.Boolean, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRetrieve data stream for a document template based on an identifier(Ex: the filename).\nAll available document plugins are searched.  The first available template is returned.\n"
  syntax:
    content: public static Task<Stream> LoadDocumentTemplateStreamAsync(string templateIdentifier, bool allowPersonalTemplate, string uiCulture, CancellationToken cancellationToken = null)
    parameters:
    - id: templateIdentifier
      type: System.String
      description: 'Identifier for a template. Ex: &quot;myTemplate.txt&quot;'
    - id: allowPersonalTemplate
      type: System.Boolean
      description: Should we search for personal templates before central
    - id: uiCulture
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Data stream for template or null if not found
    content.vb: Public Shared Function LoadDocumentTemplateStreamAsync(templateIdentifier As String, allowPersonalTemplate As Boolean, uiCulture As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.Int32,System.String,System.Threading.CancellationToken)
  id: LoadDocumentTemplateStreamAsync(System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStreamAsync(Int32, String, CancellationToken)
  nameWithType: PhysicalDocument.LoadDocumentTemplateStreamAsync(Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync(System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet data stream for document template\n"
  syntax:
    content: public static Task<ValueTuple<Stream, string>> LoadDocumentTemplateStreamAsync(int documentTemplateId, string uiCulture, CancellationToken cancellationToken = null)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: Identity of document template
    - id: uiCulture
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.IO.Stream,System.String}}
      description: Opens stream with data for document template
    content.vb: Public Shared Function LoadDocumentTemplateStreamAsync(documentTemplateId As Integer, uiCulture As String, cancellationToken As CancellationToken = Nothing) As Task(Of ValueTuple(Of Stream, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync(System.Int32,System.String,SuperOffice.IO.TagContainer,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync(System.Int32,System.String,SuperOffice.IO.TagContainer,System.Threading.CancellationToken)
  id: CreateNewFromTemplateWithTagsAsStreamAsync(System.Int32,System.String,SuperOffice.IO.TagContainer,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewFromTemplateWithTagsAsStreamAsync(Int32, String, TagContainer, CancellationToken)
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync(Int32, String, TagContainer, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync(System.Int32, System.String, SuperOffice.IO.TagContainer, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<Stream> CreateNewFromTemplateWithTagsAsStreamAsync(int templateId, string uiCulture, TagContainer templateTags, CancellationToken cancellationToken = null)
    parameters:
    - id: templateId
      type: System.Int32
    - id: uiCulture
      type: System.String
    - id: templateTags
      type: SuperOffice.IO.TagContainer
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Shared Function CreateNewFromTemplateWithTagsAsStreamAsync(templateId As Integer, uiCulture As String, templateTags As TagContainer, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync(System.Int32,System.IO.Stream,System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync(System.Int32,System.IO.Stream,System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: SaveDocumentTemplateStreamAsync(System.Int32,System.IO.Stream,System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveDocumentTemplateStreamAsync(Int32, Stream, String, Int32, String, CancellationToken)
  nameWithType: PhysicalDocument.SaveDocumentTemplateStreamAsync(Int32, Stream, String, Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync(System.Int32, System.IO.Stream, System.String, System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate or update the document template contents. Usually used when uploading a file to a new document template.\n"
  syntax:
    content: public static Task<TemplateInfo> SaveDocumentTemplateStreamAsync(int documentTemplateId, Stream content, string uiCulture, int pluginId, string providedFilename = null, CancellationToken cancellationToken = null)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: 'Document template record id the database. '
    - id: content
      type: System.IO.Stream
      description: Stream containing file content
    - id: uiCulture
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    - id: pluginId
      type: System.Int32
      description: If negative, use the plugin specified in the document template&apos;s load-from-plugin-id field
    - id: providedFilename
      type: System.String
      description: If provided and non-ewmpty, will be used to override extref value passed along to document plugin. Required to support replacing file-formats for existing templates (among other things)
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
      description: Template information with ExtRef/Filename and MimeType filled in. These values are saved in the DocTmpl record.
    content.vb: Public Shared Function SaveDocumentTemplateStreamAsync(documentTemplateId As Integer, content As Stream, uiCulture As String, pluginId As Integer, providedFilename As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of TemplateInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync(System.Int32,System.Threading.CancellationToken)
  id: GetTemplateExtensionAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetTemplateExtensionAsync(Int32, CancellationToken)
  nameWithType: PhysicalDocument.GetTemplateExtensionAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the &quot;extension&quot; for the template, i.e., what the file extension would have been - to\nhelp identify the stream content format.\n"
  remarks: "\nTemplate documents are generally created in text editors and stored as files of some kind. The\nfile extension indicates the kind of document - doc, docx, xls, txt, and so on. While the template\nmay be stored inside the document repository as any kind of data byte collection, a concept\nakin to the file extension is still needed to help identify the document format, ahead of actually\nreading the template content.\n"
  syntax:
    content: public static Task<string> GetTemplateExtensionAsync(int documentTemplateId, CancellationToken cancellationToken = null)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: Document template primary key id
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String equivalent to a file extension, for instance &quot;.docx&quot;
    content.vb: Public Shared Function GetTemplateExtensionAsync(documentTemplateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  id: GetDocumentTypesForDocumentTemplates(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentTypesForDocumentTemplates(Int32)
  nameWithType: PhysicalDocument.GetDocumentTypesForDocumentTemplates(Int32)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a list of supported document template types.\n"
  syntax:
    content: public static Dictionary<int, string> GetDocumentTypesForDocumentTemplates(int pluginId)
    parameters:
    - id: pluginId
      type: System.Int32
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
      description: An dictionary of key=display-name for supported document types for template. Empty dictionary if no document types supported.
    content.vb: Public Shared Function GetDocumentTypesForDocumentTemplates(pluginId As Integer) As Dictionary(Of Integer, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: CreateDefaultDocumentTemplateAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateDefaultDocumentTemplateAsync(Int32, Int32, CancellationToken)
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplateAsync(Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate a blank default document based on the given documentTypeId. Called when creating a new template.\n"
  syntax:
    content: public static Task<string> CreateDefaultDocumentTemplateAsync(int documentTypeKey, int documentTemplateId, CancellationToken cancellationToken = null)
    parameters:
    - id: documentTypeKey
      type: System.Int32
      description: Id for a document type. Ignored if document plugin does not use document types.
    - id: documentTemplateId
      type: System.Int32
      description: Document template id
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >
        Extref/Filename for new template. This value is written to the template&apos;s Filename property in the database.
    content.vb: Public Shared Function CreateDefaultDocumentTemplateAsync(documentTypeKey As Integer, documentTemplateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync(System.Int32,System.Threading.CancellationToken,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync(System.Int32,System.Threading.CancellationToken,System.String[])
  id: GetDocumentTemplatePropertiesAsync(System.Int32,System.Threading.CancellationToken,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentTemplatePropertiesAsync(Int32, CancellationToken, String[])
  nameWithType: PhysicalDocument.GetDocumentTemplatePropertiesAsync(Int32, CancellationToken, String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync(System.Int32, System.Threading.CancellationToken, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<Dictionary<string, string>> GetDocumentTemplatePropertiesAsync(int documentTemplateId, CancellationToken cancellationToken = null, params string[] requestedProperties)
    parameters:
    - id: documentTemplateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: requestedProperties
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
    content.vb: Public Shared Function GetDocumentTemplatePropertiesAsync(documentTemplateId As Integer, cancellationToken As CancellationToken = Nothing, ParamArray requestedProperties As String()) As Task(Of Dictionary(Of String, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync*
  nameWithType.vb: PhysicalDocument.GetDocumentTemplatePropertiesAsync(Int32, CancellationToken, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync(System.Int32, System.Threading.CancellationToken, System.String())
  name.vb: GetDocumentTemplatePropertiesAsync(Int32, CancellationToken, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync(System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync(System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)
  id: GetDocumentTemplateUrlAsync(System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateUrlAsync(Int32, Boolean, String, CancellationToken)
  nameWithType: PhysicalDocument.GetDocumentTemplateUrlAsync(Int32, Boolean, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync(System.Int32, System.Boolean, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a WebDAV-compliant URL referring to the given document template\n"
  remarks: "\nDocument plugins may support document access via WebDAV. This call is used to retrieve a WebDAV url that\nwill give the specified access to the document. This URL will be passed to the ultimate client\n(most probably a text editor application), and control will not return to NetServer.\n<p></p>\nThe string returned here should be a fully resolved URL that can be given directly to the editor application.\n"
  syntax:
    content: public static Task<string> GetDocumentTemplateUrlAsync(int documentTemplateId, bool writableUrl, string languageCode, CancellationToken cancellationToken = null)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: The id of the document template
    - id: writableUrl
      type: System.Boolean
    - id: languageCode
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >-
        URL that gives access to the document. If the document plugin

        does not support URL access, then a blank string should be returned.
    content.vb: Public Shared Function GetDocumentTemplateUrlAsync(documentTemplateId As Integer, writableUrl As Boolean, languageCode As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync(System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync(System.String[],System.Threading.CancellationToken)
  id: GetDocumentPropertiesAsync(System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentPropertiesAsync(String[], CancellationToken)
  nameWithType: PhysicalDocument.GetDocumentPropertiesAsync(String[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync(System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the values of certain properties, for a given document\n"
  remarks: "\nEach document can have a number of properties associated with it. A set of standard properties\nis defined in the <xref href=\"SuperOffice.CRM.Documents.Constants.Properties\" data-throw-if-not-resolved=\"false\"></xref> class. Ideally, retrieving properties should\nbe a lightweight operation.\n<p></p>\nNote that &apos;properties&apos; are a one-way mechanism where the document plugin provides information about\nthe document or certain aspects of it. This is not the same as document-specific\nmetadata, which is handled by the <xref href=\"SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>\nmethods.\n"
  syntax:
    content: public Task<Dictionary<string, string>> GetDocumentPropertiesAsync(string[] requestedProperties, CancellationToken cancellationToken = null)
    parameters:
    - id: requestedProperties
      type: System.String[]
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
      description: >-
        Dictionary of key=value pairs, where the key is one of the requested property strings, and the value

        is the value of that property for the given document.
    content.vb: Public Function GetDocumentPropertiesAsync(requestedProperties As String(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of String, String))
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync*
  nameWithType.vb: PhysicalDocument.GetDocumentPropertiesAsync(String(), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync(System.String(), System.Threading.CancellationToken)
  name.vb: GetDocumentPropertiesAsync(String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  id: GetDocumentCommands(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentCommands(String[])
  nameWithType: PhysicalDocument.GetDocumentCommands(String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a list of custom commands, applicable to a specific document. Note that commands related to\nstandard locking and versioning operations have their own API calls and are not &apos;custom commands&apos; in this sense.\n"
  remarks: "\nThis API is called before a menu, task button or other GUI item that gives access to document-specific commands is shown.\nIt is used to populate the GUI with available commands for a particular document, the results are not cached by the GUI.\n<p></p>\nDepending on the return type indicated in the command, the command might be filtered by GUI. More information can\nbe found in the <xref href=\"SuperOffice.CRM.Documents.CommandInfo\" data-throw-if-not-resolved=\"false\"></xref> topic.\n"
  syntax:
    content: public CommandInfo[] GetDocumentCommands(params string[] allowedReturnTypes)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.Documents.CommandInfo[]
      description: Array of command descriptions. If there are no custom commands available, an empty array should be returned.
    content.vb: Public Function GetDocumentCommands(ParamArray allowedReturnTypes As String()) As CommandInfo()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands*
  nameWithType.vb: PhysicalDocument.GetDocumentCommands(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String())
  name.vb: GetDocumentCommands(String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  id: ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ExecuteDocumentCommand(String, String[], String, String[])
  nameWithType: PhysicalDocument.ExecuteDocumentCommand(String, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String, System.String[], System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nExecute a custom command on a specified document and version\n"
  remarks: "\nThis command is called when the user chooses an action item from a dropdown/context menu.\nIt is also reflected in the DocumentAgent service interface, so that custom GUI’s and external\ncode can directly execute document plugin commands; this is useful if a plugin also has some\ncorresponding custom GUI that needs to execute commands depending on user interaction.\n<p></p>\nThe parameter <code data-dev-comment-type=\"paramref\" class=\"paramref\">allowedReturnTypes</code> can be used by clients to hint to the plugin\nwhat kind of return value processing is available. For instance, a mobile client might\nonly offer None and Message, and this information can be used by the document plugin to adapt\nthe processing of a command, if it wants to (for instance, use default values instead of\ntriggering some more advanced workflow).\n<p></p>\nThe command is obtained from the <xref href=\"SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  syntax:
    content: public ReturnInfo ExecuteDocumentCommand(string versionId, string[] allowedReturnTypes, string command, params string[] additionalData)
    parameters:
    - id: versionId
      type: System.String
      description: Version identifier, blank implies &apos;latest&apos; version
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    - id: command
      type: System.String
      description: >-
        Command name, taken from an earlier call to <xref href="SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String%5b%5d)" data-throw-if-not-resolved="false"></xref>

        - or any other command name that is understood by the provider. &apos;Private&apos; commands that

        are not declared in GetDocumentCommands but are known to the authors of custom GUI code

        or OK.
    - id: additionalData
      type: System.String[]
      description: >-
        Array of strings containing whatever additional data the command

        may need. This parameter is intended for authors of more complex custom GUI&apos;s and works as

        a tunnel between the ultimate client and the document plugin. Standard GUI made by SuperOffice,

        such as a context menu connected to a document item in an archive, will not populate this

        member.<br />It is strongly suggested that the convention of using name=value for each string

        array element be followed here.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value object, specifying failure or success plus any optional, additional processing to be triggered
    content.vb: Public Function ExecuteDocumentCommand(versionId As String, allowedReturnTypes As String(), command As String, ParamArray additionalData As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand*
  nameWithType.vb: PhysicalDocument.ExecuteDocumentCommand(String, String(), String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String, System.String(), System.String, System.String())
  name.vb: ExecuteDocumentCommand(String, String(), String, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  id: LoadMetaData
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadMetaData()
  nameWithType: PhysicalDocument.LoadMetaData()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRetrieve metadata owned by the plugin/repository, related to one document (excluding version-dependent metadata)\n"
  remarks: "\nA document plugin may consume and provide an arbitrary number of metadata fields. These are placed\nin a string, string dictionary, representing name/value pairs. This call should <strong>not</strong>\nretrieve metadata related to any particular version, only data related to the document as a whole.\n<p></p>\nThe NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call\nto this API to populate the ExtraFields property of the document entity carrier. Note, however,\nthat the carrier handed over to the client may contain other fields in addition to those\nsupplied by the document plugin, since the extrafields mechanism is generic and\nthere may be other metadata providers along the line.\n<p></p>\nAttribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the\n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\n"
  syntax:
    content: public string[] LoadMetaData()
    return:
      type: System.String[]
      description: >
        Array of name=value strings, each representing one key and one value.
    content.vb: Public Function LoadMetaData As String()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  id: LoadVersionInfo(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadVersionInfo(String)
  nameWithType: PhysicalDocument.LoadVersionInfo(String)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRetrieve metadata owned by the plugin/repository, related to one particular\nversion of one document\n"
  remarks: "\nA document plugin may consume and provide an arbitrary number of metadata fields. These are placed\nin a string, string dictionary, representing name/value pairs. This call should only retrieve\nmetadata related to a version.\n<p></p>\nThe NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call\nto this API to populate the VersionInfo property of the document entity carrier.\n<p></p>\nAttribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the\n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\n<p></p>\nTo efficiently retrieve information about <strong>all</strong> versions, use the\n<xref href=\"SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> method, instead of iterating\nover this method.\n"
  syntax:
    content: public VersionInfo LoadVersionInfo(string versionId)
    parameters:
    - id: versionId
      type: System.String
      description: Version identifier, blank implies &apos;latest&apos; version
    return:
      type: SuperOffice.CRM.Documents.VersionInfo
      description: Fully populated version info structure
    content.vb: Public Function LoadVersionInfo(versionId As String) As VersionInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  id: SaveMetaData(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveMetaData(String[])
  nameWithType: PhysicalDocument.SaveMetaData(String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nStore/update plugin-dependent document metadata in the repository\n"
  remarks: "\nThis call is made when the document metadata should be stored, and is the complement of the\n<xref href=\"SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThe document plugin should extract whatever elements it\nrecognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception,\nas there may be other plugins along the line (not document plugins, but service-level field providers) that own the data.\nLikewise, absence of a value should be taken to imply “no change” to that value - not &quot;delete&quot;.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the\n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\n"
  syntax:
    content: public void SaveMetaData(string[] pluginData)
    parameters:
    - id: pluginData
      type: System.String[]
      description: Name=value array containing metadata
    content.vb: Public Sub SaveMetaData(pluginData As String())
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData*
  nameWithType.vb: PhysicalDocument.SaveMetaData(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String())
  name.vb: SaveMetaData(String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync(System.Threading.CancellationToken)
  id: ExistsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ExistsAsync(CancellationToken)
  nameWithType: PhysicalDocument.ExistsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<bool> ExistsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function ExistsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync(System.String,System.Threading.CancellationToken)
  id: GetLengthAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetLengthAsync(String, CancellationToken)
  nameWithType: PhysicalDocument.GetLengthAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<long> GetLengthAsync(string versionId = null, CancellationToken cancellationToken = null)
    parameters:
    - id: versionId
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Public Function GetLengthAsync(versionId As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of Long)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync(System.Threading.CancellationToken)
  id: GetCheckoutStateAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetCheckoutStateAsync(CancellationToken)
  nameWithType: PhysicalDocument.GetCheckoutStateAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<CheckoutInfo> GetCheckoutStateAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.CheckoutInfo}
    content.vb: Public Function GetCheckoutStateAsync(cancellationToken As CancellationToken = Nothing) As Task(Of CheckoutInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  id: CheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CheckoutDocumentAsync(CancellationToken, String[])
  nameWithType: PhysicalDocument.CheckoutDocumentAsync(CancellationToken, String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync(System.Threading.CancellationToken, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<ReturnInfo> CheckoutDocumentAsync(CancellationToken cancellationToken = null, params string[] allowedReturnTypes)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: allowedReturnTypes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
    content.vb: Public Function CheckoutDocumentAsync(cancellationToken As CancellationToken = Nothing, ParamArray allowedReturnTypes As String()) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync*
  nameWithType.vb: PhysicalDocument.CheckoutDocumentAsync(CancellationToken, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync(System.Threading.CancellationToken, System.String())
  name.vb: CheckoutDocumentAsync(CancellationToken, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync(System.String[],System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync(System.String[],System.String,System.String[],System.Threading.CancellationToken)
  id: CheckinDocumentAsync(System.String[],System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CheckinDocumentAsync(String[], String, String[], CancellationToken)
  nameWithType: PhysicalDocument.CheckinDocumentAsync(String[], String, String[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync(System.String[], System.String, System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<ReturnInfo> CheckinDocumentAsync(string[] allowedReturnTypes, string versionDescription, string[] versionExtraFields, CancellationToken cancellationToken = null)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    - id: versionDescription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
    content.vb: Public Function CheckinDocumentAsync(allowedReturnTypes As String(), versionDescription As String, versionExtraFields As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync*
  nameWithType.vb: PhysicalDocument.CheckinDocumentAsync(String(), String, String(), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync(System.String(), System.String, System.String(), System.Threading.CancellationToken)
  name.vb: CheckinDocumentAsync(String(), String, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  id: UndoCheckoutDocumentAsync(System.Threading.CancellationToken,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: UndoCheckoutDocumentAsync(CancellationToken, String[])
  nameWithType: PhysicalDocument.UndoCheckoutDocumentAsync(CancellationToken, String[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync(System.Threading.CancellationToken, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<ReturnInfo> UndoCheckoutDocumentAsync(CancellationToken cancellationToken = null, params string[] allowedReturnTypes)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: allowedReturnTypes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
    content.vb: Public Function UndoCheckoutDocumentAsync(cancellationToken As CancellationToken = Nothing, ParamArray allowedReturnTypes As String()) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync*
  nameWithType.vb: PhysicalDocument.UndoCheckoutDocumentAsync(CancellationToken, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync(System.Threading.CancellationToken, System.String())
  name.vb: UndoCheckoutDocumentAsync(CancellationToken, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  id: GetVersionList
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetVersionList()
  nameWithType: PhysicalDocument.GetVersionList()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public VersionInfo[] GetVersionList()
    return:
      type: SuperOffice.CRM.Documents.VersionInfo[]
    content.vb: Public Function GetVersionList As VersionInfo()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  id: GetPlugin(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetPlugin(Int32)
  nameWithType: PhysicalDocument.GetPlugin(Int32)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nReturn the plugin specified by its plugin-id\n"
  syntax:
    content: public static IDocumentPlugin2 GetPlugin(int pluginId)
    parameters:
    - id: pluginId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Documents.IDocumentPlugin2
    content.vb: Public Shared Function GetPlugin(pluginId As Integer) As IDocumentPlugin2
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync(System.Threading.CancellationToken)
  id: BeginWriteAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: BeginWriteAsync(CancellationToken)
  nameWithType: PhysicalDocument.BeginWriteAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task BeginWriteAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function BeginWriteAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync*
  implements:
  - SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: WriteAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  nameWithType: PhysicalDocument.WriteAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync(System.Int64, System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nWrite a block of data\n"
  syntax:
    content: public Task WriteAsync(long filePosition, byte[] buffer, int bufferStartPosition, int length, CancellationToken cancellationToken)
    parameters:
    - id: filePosition
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferStartPosition
      type: System.Int32
    - id: length
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function WriteAsync(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, length As Integer, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  implements:
  - SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  nameWithType.vb: PhysicalDocument.WriteAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync(System.Int64, System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Int64, Byte(), Int32, Int32, CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  id: Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Write(Int64, Byte[], Int32, Int32)
  nameWithType: PhysicalDocument.Write(Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public void Write(long filePosition, byte[] buffer, int bufferStartPosition, int lenght)
    parameters:
    - id: filePosition
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferStartPosition
      type: System.Int32
    - id: lenght
      type: System.Int32
    content.vb: Public Sub Write(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, lenght As Integer)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Write*
  implements:
  - SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: PhysicalDocument.Write(Int64, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Int64, Byte(), Int32, Int32)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync(System.Threading.CancellationToken)
  id: EndWriteAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: EndWriteAsync(CancellationToken)
  nameWithType: PhysicalDocument.EndWriteAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task EndWriteAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function EndWriteAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync*
  implements:
  - SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync(System.Threading.CancellationToken)
  id: BeginReadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: BeginReadAsync(CancellationToken)
  nameWithType: PhysicalDocument.BeginReadAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task BeginReadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function BeginReadAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync*
  implements:
  - SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ReadAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  nameWithType: PhysicalDocument.ReadAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync(System.Int64, System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task<int> ReadAsync(long filePosition, byte[] buffer, int bufferStartPosition, int length, CancellationToken cancellationToken)
    parameters:
    - id: filePosition
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferStartPosition
      type: System.Int32
    - id: length
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function ReadAsync(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, length As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync*
  implements:
  - SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  nameWithType.vb: PhysicalDocument.ReadAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync(System.Int64, System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Int64, Byte(), Int32, Int32, CancellationToken)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync(System.Threading.CancellationToken)
  id: EndReadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: EndReadAsync(CancellationToken)
  nameWithType: PhysicalDocument.EndReadAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Task EndReadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function EndReadAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync*
  implements:
  - SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  id: CreateDefaultDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateDefaultDocumentTemplateLanguageAsync(IDocumentTemplateInfo, String, CancellationToken)
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync(IDocumentTemplateInfo, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate a new template language alternative based on the existing template\n"
  syntax:
    content: public static Task CreateDefaultDocumentTemplateLanguageAsync(IDocumentTemplateInfo docInfo, string languageCode, CancellationToken cancellationToken = null)
    parameters:
    - id: docInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    - id: languageCode
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function CreateDefaultDocumentTemplateLanguageAsync(docInfo As IDocumentTemplateInfo, languageCode As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  id: DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo, String, CancellationToken)
  nameWithType: PhysicalDocument.DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDeletes the document template language.\n"
  syntax:
    content: public static Task DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo templateInfo, string languageCode, CancellationToken cancellationToken = null)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Information about the template. The fields id and external reference must be filled out
    - id: languageCode
      type: System.String
      description: The language code (&apos;en-US, &apos;nb-NO&apos;, etc). Field cannot be empty.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function DeleteDocumentTemplateLanguageAsync(templateInfo As IDocumentTemplateInfo, languageCode As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  id: SetDocumentTemplateFromDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SetDocumentTemplateFromDocumentTemplateAsync(IDocumentTemplateInfo, IDocumentTemplateInfo, CancellationToken)
  nameWithType: PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync(IDocumentTemplateInfo, IDocumentTemplateInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo, SuperOffice.CRM.IDocumentTemplateInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Task<TemplateInfo> SetDocumentTemplateFromDocumentTemplateAsync(IDocumentTemplateInfo sourceTemplateInfo, IDocumentTemplateInfo destTemplateInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    - id: destTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
    content.vb: Public Shared Function SetDocumentTemplateFromDocumentTemplateAsync(sourceTemplateInfo As IDocumentTemplateInfo, destTemplateInfo As IDocumentTemplateInfo, cancellationToken As CancellationToken = Nothing) As Task(Of TemplateInfo)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  id: CreateFilenameForNewTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateFilenameForNewTemplateAsync(IDocumentTemplateInfo, String, CancellationToken)
  nameWithType: PhysicalDocument.CreateFilenameForNewTemplateAsync(IDocumentTemplateInfo, String, CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCalculates a new name for a template based on the properties from an existing template.\nShould only be used when copying existing templates.\n"
  syntax:
    content: public static Task<string> CreateFilenameForNewTemplateAsync(IDocumentTemplateInfo sourceTemplateInfo, string newTemplateName, CancellationToken cancellationToken = null)
    parameters:
    - id: sourceTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    - id: newTemplateName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: newer null
    content.vb: Public Shared Function CreateFilenameForNewTemplateAsync(sourceTemplateInfo As IDocumentTemplateInfo, newTemplateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync(System.Threading.CancellationToken)
  id: GetDefaultDocumentPluginIdAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDefaultDocumentPluginIdAsync(CancellationToken)
  nameWithType: PhysicalDocument.GetDefaultDocumentPluginIdAsync(CancellationToken)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the default document plugin id\n"
  syntax:
    content: public static Task<int> GetDefaultDocumentPluginIdAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function GetDefaultDocumentPluginIdAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String,System.String)
  id: AssociateRename(System.String,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: AssociateRename(String, String)
  nameWithType: PhysicalDocument.AssociateRename(String, String)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nInvokes document plugins that implements the <xref href=\"SuperOffice.Plugins.CRM.Documents.IAssociateRename\" data-throw-if-not-resolved=\"false\"></xref> interface.\n"
  syntax:
    content: public static void AssociateRename(string oldName, string newName)
    parameters:
    - id: oldName
      type: System.String
    - id: newName
      type: System.String
    content.vb: Public Shared Sub AssociateRename(oldName As String, newName As String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  id: IsNameValid(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: IsNameValid(String)
  nameWithType: PhysicalDocument.IsNameValid(String)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static bool IsNameValid(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNameValid(name As String) As Boolean
  overload: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  id: GetAllDocPlugins
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetAllDocPlugins()
  nameWithType: PhysicalDocument.GetAllDocPlugins()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Dictionary<int, string> GetAllDocPlugins()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
    content.vb: Public Shared Function GetAllDocPlugins As Dictionary(Of Integer, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  id: Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Read(Int64, Byte[], Int32, Int32)
  nameWithType: PhysicalDocument.Read(Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public int Read(long filePosition, byte[] buffer, int bufferStartPosition, int lenght)
    parameters:
    - id: filePosition
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferStartPosition
      type: System.Int32
    - id: lenght
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function Read(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, lenght As Integer) As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Read*
  implements:
  - SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: PhysicalDocument.Read(Int64, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Int64, Byte(), Int32, Int32)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  id: DocumentInfo
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DocumentInfo
  nameWithType: PhysicalDocument.DocumentInfo
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDocument Info object - created by this class from documentId if needed\n"
  syntax:
    content: public IDocumentInfo DocumentInfo { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.IDocumentInfo
    content.vb: Public ReadOnly Property DocumentInfo As IDocumentInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  id: DocumentId
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DocumentId
  nameWithType: PhysicalDocument.DocumentId
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nID of document row this physical document is related to\n"
  syntax:
    content: public int DocumentId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DocumentId As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  id: ArchiveProvider
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ArchiveProvider
  nameWithType: PhysicalDocument.ArchiveProvider
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nThe numeric plugin ID of the plugin responsible for this physical document\n"
  syntax:
    content: public int ArchiveProvider { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ArchiveProvider As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Length
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.Length
  id: Length
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: PhysicalDocument.Length
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Length
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Length As Long
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Length*
  implements:
  - SuperOffice.IO.IStreamProvider.Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.Documents
  commentId: N:SuperOffice.CRM.Documents
  isExternal: true
  name: SuperOffice.CRM.Documents
  nameWithType: SuperOffice.CRM.Documents
  fullName: SuperOffice.CRM.Documents
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.IO.IStreamProvider
  commentId: T:SuperOffice.IO.IStreamProvider
  parent: SuperOffice.IO
  isExternal: true
  name: IStreamProvider
  nameWithType: IStreamProvider
  fullName: SuperOffice.IO.IStreamProvider
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<PhysicalDocument, To>()
  nameWithType: EnumUtil.MapEnums<PhysicalDocument, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.PhysicalDocument, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of PhysicalDocument, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.PhysicalDocument, To)()
  name.vb: MapEnums(Of PhysicalDocument, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<PhysicalDocument, To>
    nameWithType: EnumUtil.MapEnums<PhysicalDocument, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.PhysicalDocument, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of PhysicalDocument, To)
    nameWithType: EnumUtil.MapEnums(Of PhysicalDocument, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.PhysicalDocument, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<PhysicalDocument, To>()
  nameWithType: Converters.MapEnums<PhysicalDocument, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.PhysicalDocument, To>()
  nameWithType.vb: Converters.MapEnums(Of PhysicalDocument, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.PhysicalDocument, To)()
  name.vb: MapEnums(Of PhysicalDocument, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<PhysicalDocument, To>
    nameWithType: Converters.MapEnums<PhysicalDocument, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.PhysicalDocument, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of PhysicalDocument, To)
    nameWithType: Converters.MapEnums(Of PhysicalDocument, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.PhysicalDocument, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocument
  isExternal: true
  name: GetDocument
  nameWithType: PhysicalDocument.GetDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Documents.PhysicalDocument
  commentId: T:SuperOffice.CRM.Documents.PhysicalDocument
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: PhysicalDocument
  nameWithType: PhysicalDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument
- uid: SuperOffice.CRM.IDocumentInfo
  commentId: T:SuperOffice.CRM.IDocumentInfo
  parent: SuperOffice.CRM
  isExternal: true
  name: IDocumentInfo
  nameWithType: IDocumentInfo
  fullName: SuperOffice.CRM.IDocumentInfo
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync
  isExternal: true
  name: CreateNewEmptyAsync
  nameWithType: PhysicalDocument.CreateNewEmptyAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
  commentId: '!:System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<String, String>>
  nameWithType: Task<ValueTuple<String, String>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.String, System.String>>
  nameWithType.vb: Task(Of ValueTuple(Of String, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.String, System.String))
  name.vb: Task(Of ValueTuple(Of String, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync
  isExternal: true
  name: CreateNewEmptyByRefAsync
  nameWithType: PhysicalDocument.CreateNewEmptyByRefAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRefAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.String,SuperOffice.CRM.IDocumentInfo,System.String}}
  commentId: '!:System.Threading.Tasks.Task{System.ValueTuple{System.String,SuperOffice.CRM.IDocumentInfo,System.String}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<String, IDocumentInfo, String>>
  nameWithType: Task<ValueTuple<String, IDocumentInfo, String>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.String, SuperOffice.CRM.IDocumentInfo, System.String>>
  nameWithType.vb: Task(Of ValueTuple(Of String, IDocumentInfo, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.String, SuperOffice.CRM.IDocumentInfo, System.String))
  name.vb: Task(Of ValueTuple(Of String, IDocumentInfo, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync
  isExternal: true
  name: CreateNewFromTemplateAsync
  nameWithType: PhysicalDocument.CreateNewFromTemplateAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync
  isExternal: true
  name: CreateNewFromTemplateWithTagsAsync
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTagsAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsync
- uid: SuperOffice.IO.TagContainer
  commentId: T:SuperOffice.IO.TagContainer
  parent: SuperOffice.IO
  isExternal: true
  name: TagContainer
  nameWithType: TagContainer
  fullName: SuperOffice.IO.TagContainer
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync
  isExternal: true
  name: SuggestFilenameAsync
  nameWithType: PhysicalDocument.SuggestFilenameAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilenameAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync
  isExternal: true
  name: SaveDocumentFromStreamAsync
  nameWithType: PhysicalDocument.SaveDocumentFromStreamAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStreamAsync
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ReturnInfo>
  nameWithType: Task<ReturnInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.ReturnInfo>
  nameWithType.vb: Task(Of ReturnInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.ReturnInfo)
  name.vb: Task(Of ReturnInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.ReturnInfo
    name: ReturnInfo
    nameWithType: ReturnInfo
    fullName: SuperOffice.CRM.ReturnInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.ReturnInfo
    name: ReturnInfo
    nameWithType: ReturnInfo
    fullName: SuperOffice.CRM.ReturnInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync
  isExternal: true
  name: LoadDocumentStreamAsync
  nameWithType: PhysicalDocument.LoadDocumentStreamAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStreamAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: '!:System.Threading.Tasks.Task{System.IO.Stream}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync
  isExternal: true
  name: GetDatabaseLanguageCodeAsync
  nameWithType: PhysicalDocument.GetDatabaseLanguageCodeAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCodeAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync
  isExternal: true
  name: GetDatabaseLanguageCultureAsync
  nameWithType: PhysicalDocument.GetDatabaseLanguageCultureAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCultureAsync
- uid: System.Threading.Tasks.Task{System.Globalization.CultureInfo}
  commentId: '!:System.Threading.Tasks.Task{System.Globalization.CultureInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<CultureInfo>
  nameWithType: Task<CultureInfo>
  fullName: System.Threading.Tasks.Task<System.Globalization.CultureInfo>
  nameWithType.vb: Task(Of CultureInfo)
  fullName.vb: System.Threading.Tasks.Task(Of System.Globalization.CultureInfo)
  name.vb: Task(Of CultureInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync
  isExternal: true
  name: GetTemplateLanguagesAsync
  nameWithType: PhysicalDocument.GetTemplateLanguagesAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguagesAsync
- uid: SuperOffice.Exceptions.SoIllegalOperationException
  commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  isExternal: true
  name: SoIllegalOperationException
  nameWithType: SoIllegalOperationException
  fullName: SuperOffice.Exceptions.SoIllegalOperationException
- uid: SuperOffice.CRM.IDocumentTemplateInfo
  commentId: T:SuperOffice.CRM.IDocumentTemplateInfo
  parent: SuperOffice.CRM
  isExternal: true
  name: IDocumentTemplateInfo
  nameWithType: IDocumentTemplateInfo
  fullName: SuperOffice.CRM.IDocumentTemplateInfo
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: '!:System.Threading.Tasks.Task{System.String[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync
  isExternal: true
  name: GetDocumentUrlAsync
  nameWithType: PhysicalDocument.GetDocumentUrlAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrlAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync
  isExternal: true
  name: DeleteDocumentAsync
  nameWithType: PhysicalDocument.DeleteDocumentAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync
  isExternal: true
  name: RenameDocumentAsync
  nameWithType: PhysicalDocument.RenameDocumentAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocumentAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync
  isExternal: true
  name: GetDocumentIdFromPathAsync
  nameWithType: PhysicalDocument.GetDocumentIdFromPathAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPathAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities
  isExternal: true
  name: GetPluginCapabilities
  nameWithType: PhysicalDocument.GetPluginCapabilities
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.String}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync
  isExternal: true
  name: LoadDocumentTemplateStreamAsync
  nameWithType: PhysicalDocument.LoadDocumentTemplateStreamAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStreamAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.IO.Stream,System.String}}
  commentId: '!:System.Threading.Tasks.Task{System.ValueTuple{System.IO.Stream,System.String}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<Stream, String>>
  nameWithType: Task<ValueTuple<Stream, String>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.IO.Stream, System.String>>
  nameWithType.vb: Task(Of ValueTuple(Of Stream, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.IO.Stream, System.String))
  name.vb: Task(Of ValueTuple(Of Stream, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync
  isExternal: true
  name: CreateNewFromTemplateWithTagsAsStreamAsync
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStreamAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync
  isExternal: true
  name: SaveDocumentTemplateStreamAsync
  nameWithType: PhysicalDocument.SaveDocumentTemplateStreamAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStreamAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TemplateInfo>
  nameWithType: Task<TemplateInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Documents.TemplateInfo>
  nameWithType.vb: Task(Of TemplateInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Documents.TemplateInfo)
  name.vb: Task(Of TemplateInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Documents.TemplateInfo
    name: TemplateInfo
    nameWithType: TemplateInfo
    fullName: SuperOffice.CRM.Documents.TemplateInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Documents.TemplateInfo
    name: TemplateInfo
    nameWithType: TemplateInfo
    fullName: SuperOffice.CRM.Documents.TemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync
  isExternal: true
  name: GetTemplateExtensionAsync
  nameWithType: PhysicalDocument.GetTemplateExtensionAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtensionAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates
  isExternal: true
  name: GetDocumentTypesForDocumentTemplates
  nameWithType: PhysicalDocument.GetDocumentTypesForDocumentTemplates
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates
- uid: System.Collections.Generic.Dictionary{System.Int32,System.String}
  commentId: '!:System.Collections.Generic.Dictionary{System.Int32,System.String}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int32, String>
  nameWithType: Dictionary<Int32, String>
  fullName: System.Collections.Generic.Dictionary<System.Int32, System.String>
  nameWithType.vb: Dictionary(Of Int32, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int32, System.String)
  name.vb: Dictionary(Of Int32, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync
  isExternal: true
  name: CreateDefaultDocumentTemplateAsync
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplateAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync
  isExternal: true
  name: GetDocumentTemplatePropertiesAsync
  nameWithType: PhysicalDocument.GetDocumentTemplatePropertiesAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplatePropertiesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<String, String>>
  nameWithType: Task<Dictionary<String, String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String, System.String>>
  nameWithType.vb: Task(Of Dictionary(Of String, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Task(Of Dictionary(Of String, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync
  isExternal: true
  name: GetDocumentTemplateUrlAsync
  nameWithType: PhysicalDocument.GetDocumentTemplateUrlAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrlAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync
  isExternal: true
  name: GetDocumentPropertiesAsync
  nameWithType: PhysicalDocument.GetDocumentPropertiesAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentPropertiesAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands
  isExternal: true
  name: GetDocumentCommands
  nameWithType: PhysicalDocument.GetDocumentCommands
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands
- uid: SuperOffice.CRM.Documents.CommandInfo[]
  isExternal: true
  name: CommandInfo[]
  nameWithType: CommandInfo[]
  fullName: SuperOffice.CRM.Documents.CommandInfo[]
  nameWithType.vb: CommandInfo()
  fullName.vb: SuperOffice.CRM.Documents.CommandInfo()
  name.vb: CommandInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: SuperOffice.CRM.Documents.CommandInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: SuperOffice.CRM.Documents.CommandInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand
  isExternal: true
  name: ExecuteDocumentCommand
  nameWithType: PhysicalDocument.ExecuteDocumentCommand
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand
- uid: SuperOffice.CRM.ReturnInfo
  commentId: T:SuperOffice.CRM.ReturnInfo
  parent: SuperOffice.CRM
  isExternal: true
  name: ReturnInfo
  nameWithType: ReturnInfo
  fullName: SuperOffice.CRM.ReturnInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  isExternal: true
  name: LoadMetaData
  nameWithType: PhysicalDocument.LoadMetaData
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo
  isExternal: true
  name: LoadVersionInfo
  nameWithType: PhysicalDocument.LoadVersionInfo
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo
- uid: SuperOffice.CRM.Documents.VersionInfo
  commentId: T:SuperOffice.CRM.Documents.VersionInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: VersionInfo
  nameWithType: VersionInfo
  fullName: SuperOffice.CRM.Documents.VersionInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData
  isExternal: true
  name: SaveMetaData
  nameWithType: PhysicalDocument.SaveMetaData
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync
  isExternal: true
  name: ExistsAsync
  nameWithType: PhysicalDocument.ExistsAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync
  isExternal: true
  name: GetLengthAsync
  nameWithType: PhysicalDocument.GetLengthAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetLengthAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: '!:System.Threading.Tasks.Task{System.Int64}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync
  isExternal: true
  name: GetCheckoutStateAsync
  nameWithType: PhysicalDocument.GetCheckoutStateAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutStateAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.CheckoutInfo}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Documents.CheckoutInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<CheckoutInfo>
  nameWithType: Task<CheckoutInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Documents.CheckoutInfo>
  nameWithType.vb: Task(Of CheckoutInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Documents.CheckoutInfo)
  name.vb: Task(Of CheckoutInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Documents.CheckoutInfo
    name: CheckoutInfo
    nameWithType: CheckoutInfo
    fullName: SuperOffice.CRM.Documents.CheckoutInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Documents.CheckoutInfo
    name: CheckoutInfo
    nameWithType: CheckoutInfo
    fullName: SuperOffice.CRM.Documents.CheckoutInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync
  isExternal: true
  name: CheckoutDocumentAsync
  nameWithType: PhysicalDocument.CheckoutDocumentAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocumentAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync
  isExternal: true
  name: CheckinDocumentAsync
  nameWithType: PhysicalDocument.CheckinDocumentAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocumentAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync
  isExternal: true
  name: UndoCheckoutDocumentAsync
  nameWithType: PhysicalDocument.UndoCheckoutDocumentAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocumentAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  isExternal: true
  name: GetVersionList
  nameWithType: PhysicalDocument.GetVersionList
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
- uid: SuperOffice.CRM.Documents.VersionInfo[]
  isExternal: true
  name: VersionInfo[]
  nameWithType: VersionInfo[]
  fullName: SuperOffice.CRM.Documents.VersionInfo[]
  nameWithType.vb: VersionInfo()
  fullName.vb: SuperOffice.CRM.Documents.VersionInfo()
  name.vb: VersionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    nameWithType: VersionInfo
    fullName: SuperOffice.CRM.Documents.VersionInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    nameWithType: VersionInfo
    fullName: SuperOffice.CRM.Documents.VersionInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin
  isExternal: true
  name: GetPlugin
  nameWithType: PhysicalDocument.GetPlugin
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2
  commentId: T:SuperOffice.CRM.Documents.IDocumentPlugin2
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: IDocumentPlugin2
  nameWithType: IDocumentPlugin2
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync
  isExternal: true
  name: BeginWriteAsync
  nameWithType: PhysicalDocument.BeginWriteAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginWriteAsync
- uid: SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: BeginWriteAsync(CancellationToken)
  nameWithType: IStreamProvider.BeginWriteAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
    name: BeginWriteAsync
    nameWithType: IStreamProvider.BeginWriteAsync
    fullName: SuperOffice.IO.IStreamProvider.BeginWriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
    name: BeginWriteAsync
    nameWithType: IStreamProvider.BeginWriteAsync
    fullName: SuperOffice.IO.IStreamProvider.BeginWriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync
  isExternal: true
  name: WriteAsync
  nameWithType: PhysicalDocument.WriteAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.WriteAsync
- uid: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: WriteAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  nameWithType: IStreamProvider.WriteAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64, System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: IStreamProvider.WriteAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  fullName.vb: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64, System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: IStreamProvider.WriteAsync
    fullName: SuperOffice.IO.IStreamProvider.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: IStreamProvider.WriteAsync
    fullName: SuperOffice.IO.IStreamProvider.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Write*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Write
  isExternal: true
  name: Write
  nameWithType: PhysicalDocument.Write
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Write
- uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: Write(Int64, Byte[], Int32, Int32)
  nameWithType: IStreamProvider.Write(Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.IO.IStreamProvider.Write(System.Int64, System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: IStreamProvider.Write(Int64, Byte(), Int32, Int32)
  fullName.vb: SuperOffice.IO.IStreamProvider.Write(System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Int64, Byte(), Int32, Int32)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: IStreamProvider.Write
    fullName: SuperOffice.IO.IStreamProvider.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: IStreamProvider.Write
    fullName: SuperOffice.IO.IStreamProvider.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync
  isExternal: true
  name: EndWriteAsync
  nameWithType: PhysicalDocument.EndWriteAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndWriteAsync
- uid: SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: EndWriteAsync(CancellationToken)
  nameWithType: IStreamProvider.EndWriteAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
    name: EndWriteAsync
    nameWithType: IStreamProvider.EndWriteAsync
    fullName: SuperOffice.IO.IStreamProvider.EndWriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
    name: EndWriteAsync
    nameWithType: IStreamProvider.EndWriteAsync
    fullName: SuperOffice.IO.IStreamProvider.EndWriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync
  isExternal: true
  name: BeginReadAsync
  nameWithType: PhysicalDocument.BeginReadAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginReadAsync
- uid: SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: BeginReadAsync(CancellationToken)
  nameWithType: IStreamProvider.BeginReadAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
    name: BeginReadAsync
    nameWithType: IStreamProvider.BeginReadAsync
    fullName: SuperOffice.IO.IStreamProvider.BeginReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
    name: BeginReadAsync
    nameWithType: IStreamProvider.BeginReadAsync
    fullName: SuperOffice.IO.IStreamProvider.BeginReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync
  isExternal: true
  name: ReadAsync
  nameWithType: PhysicalDocument.ReadAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ReadAsync
- uid: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: ReadAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  nameWithType: IStreamProvider.ReadAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64, System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: IStreamProvider.ReadAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  fullName.vb: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64, System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: IStreamProvider.ReadAsync
    fullName: SuperOffice.IO.IStreamProvider.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: IStreamProvider.ReadAsync
    fullName: SuperOffice.IO.IStreamProvider.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync
  isExternal: true
  name: EndReadAsync
  nameWithType: PhysicalDocument.EndReadAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndReadAsync
- uid: SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: EndReadAsync(CancellationToken)
  nameWithType: IStreamProvider.EndReadAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
    name: EndReadAsync
    nameWithType: IStreamProvider.EndReadAsync
    fullName: SuperOffice.IO.IStreamProvider.EndReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
    name: EndReadAsync
    nameWithType: IStreamProvider.EndReadAsync
    fullName: SuperOffice.IO.IStreamProvider.EndReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync
  isExternal: true
  name: CreateDefaultDocumentTemplateLanguageAsync
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguageAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync
  isExternal: true
  name: DeleteDocumentTemplateLanguageAsync
  nameWithType: PhysicalDocument.DeleteDocumentTemplateLanguageAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguageAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync
  isExternal: true
  name: SetDocumentTemplateFromDocumentTemplateAsync
  nameWithType: PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplateAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync
  isExternal: true
  name: CreateFilenameForNewTemplateAsync
  nameWithType: PhysicalDocument.CreateFilenameForNewTemplateAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplateAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync
  isExternal: true
  name: GetDefaultDocumentPluginIdAsync
  nameWithType: PhysicalDocument.GetDefaultDocumentPluginIdAsync
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginIdAsync
- uid: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename
  isExternal: true
  name: AssociateRename
  nameWithType: PhysicalDocument.AssociateRename
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename
- uid: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid
  isExternal: true
  name: IsNameValid
  nameWithType: PhysicalDocument.IsNameValid
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  isExternal: true
  name: GetAllDocPlugins
  nameWithType: PhysicalDocument.GetAllDocPlugins
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Read*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Read
  isExternal: true
  name: Read
  nameWithType: PhysicalDocument.Read
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Read
- uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: Read(Int64, Byte[], Int32, Int32)
  nameWithType: IStreamProvider.Read(Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.IO.IStreamProvider.Read(System.Int64, System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: IStreamProvider.Read(Int64, Byte(), Int32, Int32)
  fullName.vb: SuperOffice.IO.IStreamProvider.Read(System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Int64, Byte(), Int32, Int32)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: IStreamProvider.Read
    fullName: SuperOffice.IO.IStreamProvider.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: IStreamProvider.Read
    fullName: SuperOffice.IO.IStreamProvider.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  isExternal: true
  name: DocumentInfo
  nameWithType: PhysicalDocument.DocumentInfo
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  isExternal: true
  name: DocumentId
  nameWithType: PhysicalDocument.DocumentId
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  isExternal: true
  name: ArchiveProvider
  nameWithType: PhysicalDocument.ArchiveProvider
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Length*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Length
  isExternal: true
  name: Length
  nameWithType: PhysicalDocument.Length
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Length
- uid: SuperOffice.IO.IStreamProvider.Length
  commentId: P:SuperOffice.IO.IStreamProvider.Length
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: Length
  nameWithType: IStreamProvider.Length
  fullName: SuperOffice.IO.IStreamProvider.Length
