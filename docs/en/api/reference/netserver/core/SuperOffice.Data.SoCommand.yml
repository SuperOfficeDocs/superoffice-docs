### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SoCommand
  commentId: T:SuperOffice.Data.SoCommand
  id: SoCommand
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.SoCommand.Cancel
  - SuperOffice.Data.SoCommand.Connection
  - SuperOffice.Data.SoCommand.Dispose
  - SuperOffice.Data.SoCommand.ExecuteNonQuery
  - SuperOffice.Data.SoCommand.ExecutePassThrough(System.String)
  - SuperOffice.Data.SoCommand.ExecuteReader
  - SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior)
  - SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior,System.Int32,System.Int32)
  - SuperOffice.Data.SoCommand.ExecuteReader(System.Int32,System.Int32)
  - SuperOffice.Data.SoCommand.ExecuteScalar
  - SuperOffice.Data.SoCommand.IsAutoSentry
  - SuperOffice.Data.SoCommand.IsDefaultTransaction
  - SuperOffice.Data.SoCommand.LogNonQuery(System.TimeSpan,System.Int32,System.String)
  - SuperOffice.Data.SoCommand.LogQueryReader(System.TimeSpan,System.Int32,System.String)
  - SuperOffice.Data.SoCommand.LogQueryScalar(System.TimeSpan,System.Int32,System.String)
  - SuperOffice.Data.SoCommand.Prepare
  - SuperOffice.Data.SoCommand.Sentries
  - SuperOffice.Data.SoCommand.SqlCommand
  - SuperOffice.Data.SoCommand.Transaction
  - SuperOffice.Data.SoCommand.UpdatedRowSource
  langs:
  - csharp
  - vb
  name: SoCommand
  nameWithType: SoCommand
  fullName: SuperOffice.Data.SoCommand
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nImplements the IDbCommand.\n"
  syntax:
    content: 'public sealed class SoCommand : IDbCommand, IDisposable'
    content.vb: >-
      Public NotInheritable Class SoCommand
          Implements IDbCommand, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Data.IDbCommand
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SoCommand.EnumUtil.MapEnums``2
  - SuperOffice.Data.SoCommand.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Data.SoCommand.LogQueryReader(System.TimeSpan,System.Int32,System.String)
  commentId: M:SuperOffice.Data.SoCommand.LogQueryReader(System.TimeSpan,System.Int32,System.String)
  id: LogQueryReader(System.TimeSpan,System.Int32,System.String)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: LogQueryReader(TimeSpan, Int32, String)
  nameWithType: SoCommand.LogQueryReader(TimeSpan, Int32, String)
  fullName: SuperOffice.Data.SoCommand.LogQueryReader(System.TimeSpan, System.Int32, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public void LogQueryReader(TimeSpan executionTime, int rowsAffected, string exceptionMessage)
    parameters:
    - id: executionTime
      type: System.TimeSpan
    - id: rowsAffected
      type: System.Int32
    - id: exceptionMessage
      type: System.String
    content.vb: Public Sub LogQueryReader(executionTime As TimeSpan, rowsAffected As Integer, exceptionMessage As String)
  overload: SuperOffice.Data.SoCommand.LogQueryReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.LogQueryScalar(System.TimeSpan,System.Int32,System.String)
  commentId: M:SuperOffice.Data.SoCommand.LogQueryScalar(System.TimeSpan,System.Int32,System.String)
  id: LogQueryScalar(System.TimeSpan,System.Int32,System.String)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: LogQueryScalar(TimeSpan, Int32, String)
  nameWithType: SoCommand.LogQueryScalar(TimeSpan, Int32, String)
  fullName: SuperOffice.Data.SoCommand.LogQueryScalar(System.TimeSpan, System.Int32, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public void LogQueryScalar(TimeSpan executionTime, int rowsAffected, string exceptionMessage)
    parameters:
    - id: executionTime
      type: System.TimeSpan
    - id: rowsAffected
      type: System.Int32
    - id: exceptionMessage
      type: System.String
    content.vb: Public Sub LogQueryScalar(executionTime As TimeSpan, rowsAffected As Integer, exceptionMessage As String)
  overload: SuperOffice.Data.SoCommand.LogQueryScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.LogNonQuery(System.TimeSpan,System.Int32,System.String)
  commentId: M:SuperOffice.Data.SoCommand.LogNonQuery(System.TimeSpan,System.Int32,System.String)
  id: LogNonQuery(System.TimeSpan,System.Int32,System.String)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: LogNonQuery(TimeSpan, Int32, String)
  nameWithType: SoCommand.LogNonQuery(TimeSpan, Int32, String)
  fullName: SuperOffice.Data.SoCommand.LogNonQuery(System.TimeSpan, System.Int32, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public void LogNonQuery(TimeSpan executionTime, int rowsAffected, string exceptionMessage)
    parameters:
    - id: executionTime
      type: System.TimeSpan
    - id: rowsAffected
      type: System.Int32
    - id: exceptionMessage
      type: System.String
    content.vb: Public Sub LogNonQuery(executionTime As TimeSpan, rowsAffected As Integer, exceptionMessage As String)
  overload: SuperOffice.Data.SoCommand.LogNonQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecutePassThrough(System.String)
  commentId: M:SuperOffice.Data.SoCommand.ExecutePassThrough(System.String)
  id: ExecutePassThrough(System.String)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecutePassThrough(String)
  nameWithType: SoCommand.ExecutePassThrough(String)
  fullName: SuperOffice.Data.SoCommand.ExecutePassThrough(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public void ExecutePassThrough(string nonQuerySql)
    parameters:
    - id: nonQuerySql
      type: System.String
    content.vb: Public Sub ExecutePassThrough(nonQuerySql As String)
  overload: SuperOffice.Data.SoCommand.ExecutePassThrough*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.Dispose
  commentId: M:SuperOffice.Data.SoCommand.Dispose
  id: Dispose
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SoCommand.Dispose()
  fullName: SuperOffice.Data.SoCommand.Dispose()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SuperOffice.Data.SoCommand.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.Cancel
  commentId: M:SuperOffice.Data.SoCommand.Cancel
  id: Cancel
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: Cancel()
  nameWithType: SoCommand.Cancel()
  fullName: SuperOffice.Data.SoCommand.Cancel()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAttempts to cancels the execution of an <xref href=\"System.Data.IDbCommand\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public void Cancel()
    content.vb: Public Sub Cancel
  overload: SuperOffice.Data.SoCommand.Cancel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecuteNonQuery
  commentId: M:SuperOffice.Data.SoCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery()
  nameWithType: SoCommand.ExecuteNonQuery()
  fullName: SuperOffice.Data.SoCommand.ExecuteNonQuery()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nExecutes an SQL statement against the Connection object of a .NET Framework data provider, and returns the number of rows affected.\n"
  syntax:
    content: public int ExecuteNonQuery()
    return:
      type: System.Int32
      description: The number of rows affected.
    content.vb: Public Function ExecuteNonQuery As Integer
  overload: SuperOffice.Data.SoCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The connection does not exist.-or- The connection is not open. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecuteReader
  commentId: M:SuperOffice.Data.SoCommand.ExecuteReader
  id: ExecuteReader
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader()
  nameWithType: SoCommand.ExecuteReader()
  fullName: SuperOffice.Data.SoCommand.ExecuteReader()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nExecute the <see cref=\"!:CommandText\"></see> on the <xref href=\"SuperOffice.Data.SoCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, create an\nSoDataReader to read the results, and return it. The reader will start on row 1 and go\nthrough the whole result set.\n"
  syntax:
    content: public SoDataReader ExecuteReader()
    return:
      type: SuperOffice.Data.SoDataReader
      description: SoDataReader, which implements the IDataReader interface as well as SuperOffice functionality
    content.vb: Public Function ExecuteReader As SoDataReader
  overload: SuperOffice.Data.SoCommand.ExecuteReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior)
  commentId: M:SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader(CommandBehavior)
  nameWithType: SoCommand.ExecuteReader(CommandBehavior)
  fullName: SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nExecute the <see cref=\"!:CommandText\"></see> on the <xref href=\"SuperOffice.Data.SoCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, create an\nSoDataReader to read the results, and return it. The reader will start on row 1 and go\nthrough the whole result set.\n"
  syntax:
    content: public SoDataReader ExecuteReader(CommandBehavior behaviour)
    parameters:
    - id: behaviour
      type: System.Data.CommandBehavior
      description: Command behaviour, passed through to the underlying ADO.NET provider
    return:
      type: SuperOffice.Data.SoDataReader
      description: SoDataReader, which implements the IDataReader interface as well as SuperOffice functionality
    content.vb: Public Function ExecuteReader(behaviour As CommandBehavior) As SoDataReader
  overload: SuperOffice.Data.SoCommand.ExecuteReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior,System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior,System.Int32,System.Int32)
  id: ExecuteReader(System.Data.CommandBehavior,System.Int32,System.Int32)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader(CommandBehavior, Int32, Int32)
  nameWithType: SoCommand.ExecuteReader(CommandBehavior, Int32, Int32)
  fullName: SuperOffice.Data.SoCommand.ExecuteReader(System.Data.CommandBehavior, System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nExecute the <see cref=\"!:CommandText\"></see> on the <xref href=\"SuperOffice.Data.SoCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, create an\nSoDataReader to read the results, and return it. The reader will return one page of records,\nas defined by the page size and starting point.\n"
  syntax:
    content: public SoDataReader ExecuteReader(CommandBehavior behaviour, int pageSize, int pageWanted)
    parameters:
    - id: behaviour
      type: System.Data.CommandBehavior
      description: Command behaviour, passed through to the underlying ADO.NET provider
    - id: pageSize
      type: System.Int32
      description: Number of records per page; only one page will be returned by the reader
    - id: pageWanted
      type: System.Int32
      description: Desired page, starting at 0.
    return:
      type: SuperOffice.Data.SoDataReader
      description: SoDataReader, which implements the IDataReader interface as well as SuperOffice functionality
    content.vb: Public Function ExecuteReader(behaviour As CommandBehavior, pageSize As Integer, pageWanted As Integer) As SoDataReader
  overload: SuperOffice.Data.SoCommand.ExecuteReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecuteReader(System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.SoCommand.ExecuteReader(System.Int32,System.Int32)
  id: ExecuteReader(System.Int32,System.Int32)
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader(Int32, Int32)
  nameWithType: SoCommand.ExecuteReader(Int32, Int32)
  fullName: SuperOffice.Data.SoCommand.ExecuteReader(System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nExecute the <see cref=\"!:CommandText\"></see> on the <xref href=\"SuperOffice.Data.SoCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref>, create an\nSoDataReader to read the results, and return it. The reader will return one page of records,\nas defined by the page size and starting point.\n"
  syntax:
    content: public SoDataReader ExecuteReader(int pageSize, int pageWanted)
    parameters:
    - id: pageSize
      type: System.Int32
      description: Number of records per page; only one page will be returned by the reader
    - id: pageWanted
      type: System.Int32
      description: Desired page, starting at 0.
    return:
      type: SuperOffice.Data.SoDataReader
      description: SoDataReader, which implements the IDataReader interface as well as SuperOffice functionality
    content.vb: Public Function ExecuteReader(pageSize As Integer, pageWanted As Integer) As SoDataReader
  overload: SuperOffice.Data.SoCommand.ExecuteReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.ExecuteScalar
  commentId: M:SuperOffice.Data.SoCommand.ExecuteScalar
  id: ExecuteScalar
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: ExecuteScalar()
  nameWithType: SoCommand.ExecuteScalar()
  fullName: SuperOffice.Data.SoCommand.ExecuteScalar()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nExecutes the query, and returns the first column of the first row in the resultset returned by the query.\nExtra columns or rows are ignored.\n"
  syntax:
    content: public object ExecuteScalar()
    return:
      type: System.Object
      description: "\nThe first column of the first row in the resultset.\n"
    content.vb: Public Function ExecuteScalar As Object
  overload: SuperOffice.Data.SoCommand.ExecuteScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.Prepare
  commentId: M:SuperOffice.Data.SoCommand.Prepare
  id: Prepare
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: Prepare()
  nameWithType: SoCommand.Prepare()
  fullName: SuperOffice.Data.SoCommand.Prepare()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCreates a prepared (or compiled) version of the command on the data source.\n"
  syntax:
    content: public void Prepare()
    content.vb: Public Sub Prepare
  overload: SuperOffice.Data.SoCommand.Prepare*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The <xref href="System.Data.OleDb.OleDbCommand.Connection" data-throw-if-not-resolved="false"></xref> is not set.-or- The <xref href="System.Data.OleDb.OleDbCommand.Connection" data-throw-if-not-resolved="false"></xref> is not <see cref="!:System.Data.OleDb.OleDbConnection.Open"></see>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.SqlCommand
  commentId: P:SuperOffice.Data.SoCommand.SqlCommand
  id: SqlCommand
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: SqlCommand
  nameWithType: SoCommand.SqlCommand
  fullName: SuperOffice.Data.SoCommand.SqlCommand
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nThe sql command to be processed\n"
  syntax:
    content: public SqlCommand SqlCommand { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.SqlCommand
    content.vb: Public Property SqlCommand As SqlCommand
  overload: SuperOffice.Data.SoCommand.SqlCommand*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.Connection
  commentId: P:SuperOffice.Data.SoCommand.Connection
  id: Connection
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: SoCommand.Connection
  fullName: SuperOffice.Data.SoCommand.Connection
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nConnection to be used for execution of this command\n"
  syntax:
    content: public SoConnection Connection { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SoConnection
    content.vb: Public Property Connection As SoConnection
  overload: SuperOffice.Data.SoCommand.Connection*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.IsDefaultTransaction
  commentId: P:SuperOffice.Data.SoCommand.IsDefaultTransaction
  id: IsDefaultTransaction
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: IsDefaultTransaction
  nameWithType: SoCommand.IsDefaultTransaction
  fullName: SuperOffice.Data.SoCommand.IsDefaultTransaction
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nFlag indicating whether the <xref href=\"SuperOffice.Data.SoCommand.Transaction\" data-throw-if-not-resolved=\"false\"></xref> property is an internally-generated\ndefault transaction. If false, then the transaction was created by the calling code and is\nthat code&apos;s responsibility.\n"
  syntax:
    content: public bool IsDefaultTransaction { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDefaultTransaction As Boolean
  overload: SuperOffice.Data.SoCommand.IsDefaultTransaction*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoCommand.Transaction
  commentId: P:SuperOffice.Data.SoCommand.Transaction
  id: Transaction
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: Transaction
  nameWithType: SoCommand.Transaction
  fullName: SuperOffice.Data.SoCommand.Transaction
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nTransaction that this command will be a member of\n"
  syntax:
    content: public SoTransaction Transaction { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SoTransaction
    content.vb: Public Property Transaction As SoTransaction
  overload: SuperOffice.Data.SoCommand.Transaction*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.UpdatedRowSource
  commentId: P:SuperOffice.Data.SoCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: UpdatedRowSource
  nameWithType: SoCommand.UpdatedRowSource
  fullName: SuperOffice.Data.SoCommand.UpdatedRowSource
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public UpdateRowSource UpdatedRowSource { get; set; }
    parameters: []
    return:
      type: System.Data.UpdateRowSource
    content.vb: Public Property UpdatedRowSource As UpdateRowSource
  overload: SuperOffice.Data.SoCommand.UpdatedRowSource*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoCommand.Sentries
  commentId: P:SuperOffice.Data.SoCommand.Sentries
  id: Sentries
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: Sentries
  nameWithType: SoCommand.Sentries
  fullName: SuperOffice.Data.SoCommand.Sentries
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCollection of Sentries relevant to the execution of this command\n"
  syntax:
    content: public SentryCollection Sentries { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Security.SentryCollection
    content.vb: Public ReadOnly Property Sentries As SentryCollection
  overload: SuperOffice.Data.SoCommand.Sentries*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoCommand.IsAutoSentry
  commentId: P:SuperOffice.Data.SoCommand.IsAutoSentry
  id: IsAutoSentry
  parent: SuperOffice.Data.SoCommand
  langs:
  - csharp
  - vb
  name: IsAutoSentry
  nameWithType: SoCommand.IsAutoSentry
  fullName: SuperOffice.Data.SoCommand.IsAutoSentry
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nDoes this command use the AutoSentry system, where sentries are automatically created based on an analysis of the command\n"
  syntax:
    content: public bool IsAutoSentry { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAutoSentry As Boolean
  overload: SuperOffice.Data.SoCommand.IsAutoSentry*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.IDbCommand
  commentId: '!:System.Data.IDbCommand'
  isExternal: true
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoCommand.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoCommand, To>()
  nameWithType: EnumUtil.MapEnums<SoCommand, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SoCommand, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoCommand, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SoCommand, To)()
  name.vb: MapEnums(Of SoCommand, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoCommand, To>
    nameWithType: EnumUtil.MapEnums<SoCommand, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SoCommand, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoCommand, To)
    nameWithType: EnumUtil.MapEnums(Of SoCommand, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SoCommand, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoCommand.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoCommand, To>()
  nameWithType: Converters.MapEnums<SoCommand, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SoCommand, To>()
  nameWithType.vb: Converters.MapEnums(Of SoCommand, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SoCommand, To)()
  name.vb: MapEnums(Of SoCommand, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoCommand, To>
    nameWithType: Converters.MapEnums<SoCommand, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SoCommand, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoCommand, To)
    nameWithType: Converters.MapEnums(Of SoCommand, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SoCommand, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SoCommand.LogQueryReader*
  commentId: Overload:SuperOffice.Data.SoCommand.LogQueryReader
  isExternal: true
  name: LogQueryReader
  nameWithType: SoCommand.LogQueryReader
  fullName: SuperOffice.Data.SoCommand.LogQueryReader
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SoCommand.LogQueryScalar*
  commentId: Overload:SuperOffice.Data.SoCommand.LogQueryScalar
  isExternal: true
  name: LogQueryScalar
  nameWithType: SoCommand.LogQueryScalar
  fullName: SuperOffice.Data.SoCommand.LogQueryScalar
- uid: SuperOffice.Data.SoCommand.LogNonQuery*
  commentId: Overload:SuperOffice.Data.SoCommand.LogNonQuery
  isExternal: true
  name: LogNonQuery
  nameWithType: SoCommand.LogNonQuery
  fullName: SuperOffice.Data.SoCommand.LogNonQuery
- uid: SuperOffice.Data.SoCommand.ExecutePassThrough*
  commentId: Overload:SuperOffice.Data.SoCommand.ExecutePassThrough
  isExternal: true
  name: ExecutePassThrough
  nameWithType: SoCommand.ExecutePassThrough
  fullName: SuperOffice.Data.SoCommand.ExecutePassThrough
- uid: SuperOffice.Data.SoCommand.Dispose*
  commentId: Overload:SuperOffice.Data.SoCommand.Dispose
  isExternal: true
  name: Dispose
  nameWithType: SoCommand.Dispose
  fullName: SuperOffice.Data.SoCommand.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoCommand.Cancel*
  commentId: Overload:SuperOffice.Data.SoCommand.Cancel
  isExternal: true
  name: Cancel
  nameWithType: SoCommand.Cancel
  fullName: SuperOffice.Data.SoCommand.Cancel
- uid: SuperOffice.Data.SoCommand.ExecuteNonQuery*
  commentId: Overload:SuperOffice.Data.SoCommand.ExecuteNonQuery
  isExternal: true
  name: ExecuteNonQuery
  nameWithType: SoCommand.ExecuteNonQuery
  fullName: SuperOffice.Data.SoCommand.ExecuteNonQuery
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: SuperOffice.Data.SoCommand.ExecuteReader*
  commentId: Overload:SuperOffice.Data.SoCommand.ExecuteReader
  isExternal: true
  name: ExecuteReader
  nameWithType: SoCommand.ExecuteReader
  fullName: SuperOffice.Data.SoCommand.ExecuteReader
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: System.Data.CommandBehavior
  isExternal: true
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: SuperOffice.Data.SoCommand.ExecuteScalar*
  commentId: Overload:SuperOffice.Data.SoCommand.ExecuteScalar
  isExternal: true
  name: ExecuteScalar
  nameWithType: SoCommand.ExecuteScalar
  fullName: SuperOffice.Data.SoCommand.ExecuteScalar
- uid: SuperOffice.Data.SoCommand.Prepare*
  commentId: Overload:SuperOffice.Data.SoCommand.Prepare
  isExternal: true
  name: Prepare
  nameWithType: SoCommand.Prepare
  fullName: SuperOffice.Data.SoCommand.Prepare
- uid: SuperOffice.Data.SoCommand.SqlCommand*
  commentId: Overload:SuperOffice.Data.SoCommand.SqlCommand
  isExternal: true
  name: SqlCommand
  nameWithType: SoCommand.SqlCommand
  fullName: SuperOffice.Data.SoCommand.SqlCommand
- uid: SuperOffice.Data.SQL.SqlCommand
  commentId: T:SuperOffice.Data.SQL.SqlCommand
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: SuperOffice.Data.SQL.SqlCommand
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.Data.SoCommand.Connection*
  commentId: Overload:SuperOffice.Data.SoCommand.Connection
  isExternal: true
  name: Connection
  nameWithType: SoCommand.Connection
  fullName: SuperOffice.Data.SoCommand.Connection
- uid: SuperOffice.Data.SoConnection
  commentId: T:SuperOffice.Data.SoConnection
  parent: SuperOffice.Data
  isExternal: true
  name: SoConnection
  nameWithType: SoConnection
  fullName: SuperOffice.Data.SoConnection
- uid: SuperOffice.Data.SoCommand.IsDefaultTransaction*
  commentId: Overload:SuperOffice.Data.SoCommand.IsDefaultTransaction
  isExternal: true
  name: IsDefaultTransaction
  nameWithType: SoCommand.IsDefaultTransaction
  fullName: SuperOffice.Data.SoCommand.IsDefaultTransaction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SoCommand.Transaction*
  commentId: Overload:SuperOffice.Data.SoCommand.Transaction
  isExternal: true
  name: Transaction
  nameWithType: SoCommand.Transaction
  fullName: SuperOffice.Data.SoCommand.Transaction
- uid: SuperOffice.Data.SoTransaction
  commentId: T:SuperOffice.Data.SoTransaction
  parent: SuperOffice.Data
  isExternal: true
  name: SoTransaction
  nameWithType: SoTransaction
  fullName: SuperOffice.Data.SoTransaction
- uid: SuperOffice.Data.SoCommand.UpdatedRowSource*
  commentId: Overload:SuperOffice.Data.SoCommand.UpdatedRowSource
  isExternal: true
  name: UpdatedRowSource
  nameWithType: SoCommand.UpdatedRowSource
  fullName: SuperOffice.Data.SoCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  commentId: '!:System.Data.UpdateRowSource'
  isExternal: true
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: SuperOffice.Data.SoCommand.Sentries*
  commentId: Overload:SuperOffice.Data.SoCommand.Sentries
  isExternal: true
  name: Sentries
  nameWithType: SoCommand.Sentries
  fullName: SuperOffice.Data.SoCommand.Sentries
- uid: SuperOffice.CRM.Security.SentryCollection
  commentId: T:SuperOffice.CRM.Security.SentryCollection
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: SentryCollection
  nameWithType: SentryCollection
  fullName: SuperOffice.CRM.Security.SentryCollection
- uid: SuperOffice.CRM.Security
  commentId: N:SuperOffice.CRM.Security
  isExternal: true
  name: SuperOffice.CRM.Security
  nameWithType: SuperOffice.CRM.Security
  fullName: SuperOffice.CRM.Security
- uid: SuperOffice.Data.SoCommand.IsAutoSentry*
  commentId: Overload:SuperOffice.Data.SoCommand.IsAutoSentry
  isExternal: true
  name: IsAutoSentry
  nameWithType: SoCommand.IsAutoSentry
  fullName: SuperOffice.Data.SoCommand.IsAutoSentry
