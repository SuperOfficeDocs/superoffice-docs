### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SoPreference
  commentId: T:SuperOffice.Data.SoPreference
  id: SoPreference
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.SoPreference.CacheLifetime
  - SuperOffice.Data.SoPreference.GetBool(System.String,System.String,System.Boolean)
  - SuperOffice.Data.SoPreference.GetBoolAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetInt(System.String,System.String,System.Int32)
  - SuperOffice.Data.SoPreference.GetIntAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetKeysAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetPreference(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean)
  - SuperOffice.Data.SoPreference.GetPreferenceAsync(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetSectionAndKeyFromId(System.Int32)
  - SuperOffice.Data.SoPreference.GetSectionsAsync(System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetString(System.String,System.String)
  - SuperOffice.Data.SoPreference.GetString(System.String,System.String,System.String)
  - SuperOffice.Data.SoPreference.GetStringAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.GetStringAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.IndividualCacheKey(System.String,System.String)
  - SuperOffice.Data.SoPreference.ParseBooleanPreference(System.String,System.Boolean)
  - SuperOffice.Data.SoPreference.SectionCacheKey(System.String)
  - SuperOffice.Data.SoPreference.SetCachedValue(System.Int32,System.String,System.String,System.String,SuperOffice.Data.PreferenceLevel)
  - SuperOffice.Data.SoPreference.SetCachedValue(System.String,System.String,System.String)
  - SuperOffice.Data.SoPreference.SetKeys(System.String,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: SoPreference
  nameWithType: SoPreference
  fullName: SuperOffice.Data.SoPreference
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReads user preferences at several levels, returning the preference value that is defined at the lowest level.\n<p>\nA user preference defined at level 5 is more specific than a preference read at level 2.\n</p>\n"
  remarks: "\nCaching is done using the SoPrincipal-based cache mechanism. This is emptied on every roundtrip.\nThat is intentional, to avoid stale data. In the interest of performance, we read complete sections,\nso if you ask for one preference we read-ahead all the preferences in that section and cache them for this\nroundtrip.\n<p></p>\nWe assume that the <see cref=\"!:SetCachedItem\"></see> in CurrentPrincipal will accept multiple Set calls\non the same item, and that the latest value will be the one that survives.\n"
  syntax:
    content: 'public static class SoPreference : Object'
    content.vb: >-
      Public Module SoPreference
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Data.SoPreference.GetSectionsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetSectionsAsync(System.Threading.CancellationToken)
  id: GetSectionsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetSectionsAsync(CancellationToken)
  nameWithType: SoPreference.GetSectionsAsync(CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetSectionsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet all sections defined for the current associate, from the cache if possible, otherwise from the database.\n"
  remarks: "\nAn intended side effect is that the key cache for each section plus the value\ncache for each key are set.\n"
  syntax:
    content: public static Task<string[]> GetSectionsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: Array of sections
    content.vb: Public Shared Function GetSectionsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.Data.SoPreference.GetSectionsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetKeysAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetKeysAsync(System.String,System.Threading.CancellationToken)
  id: GetKeysAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetKeysAsync(String, CancellationToken)
  nameWithType: SoPreference.GetKeysAsync(String, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetKeysAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet all available keys within a section from the cache if possible, otherwise from the database.\n"
  remarks: "\nAn intended side effect is that the value\ncache for each key are set.\n"
  syntax:
    content: public static Task<string[]> GetKeysAsync(string section, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: Available keys in the section.
    content.vb: Public Shared Function GetKeysAsync(section As String, cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.Data.SoPreference.GetKeysAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetKeys(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.SetKeys(System.String,System.Threading.CancellationToken)
  id: SetKeys(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetKeys(String, CancellationToken)
  nameWithType: SoPreference.SetKeys(String, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.SetKeys(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public static Task<string[]> SetKeys(string section, CancellationToken cancellationToken)
    parameters:
    - id: section
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
    content.vb: Public Shared Function SetKeys(section As String, cancellationToken As CancellationToken) As Task(Of String())
  overload: SuperOffice.Data.SoPreference.SetKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetSectionAndKeyFromId(System.Int32)
  commentId: M:SuperOffice.Data.SoPreference.GetSectionAndKeyFromId(System.Int32)
  id: GetSectionAndKeyFromId(System.Int32)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetSectionAndKeyFromId(Int32)
  nameWithType: SoPreference.GetSectionAndKeyFromId(Int32)
  fullName: SuperOffice.Data.SoPreference.GetSectionAndKeyFromId(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public static UserPreferenceCacheObject GetSectionAndKeyFromId(int primaryId)
    parameters:
    - id: primaryId
      type: System.Int32
    return:
      type: SuperOffice.Data.UserPreferenceCacheObject
    content.vb: Public Shared Function GetSectionAndKeyFromId(primaryId As Integer) As UserPreferenceCacheObject
  overload: SuperOffice.Data.SoPreference.GetSectionAndKeyFromId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetStringAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetStringAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: GetStringAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetStringAsync(String, String, String, CancellationToken)
  nameWithType: SoPreference.GetStringAsync(String, String, String, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetStringAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet string value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<string> GetStringAsync(string section, string key, string defaultValue, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.String
      description: Default value
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nUser preference.  If the user preference does not exist, the defualtValue is returned.\n"
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetStringAsync(section As String, key As String, defaultValue As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.Data.SoPreference.GetStringAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetCachedValue(System.String,System.String,System.String)
  commentId: M:SuperOffice.Data.SoPreference.SetCachedValue(System.String,System.String,System.String)
  id: SetCachedValue(System.String,System.String,System.String)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetCachedValue(String, String, String)
  nameWithType: SoPreference.SetCachedValue(String, String, String)
  fullName: SuperOffice.Data.SoPreference.SetCachedValue(System.String, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nUpdate the cache with one item. This method is internal since it is also called from UserPreferenceRow/implementation,\nto keep the cache up to date with saved changes. NOTE that this does NOT take into account farm/cluster situations,\nwhere we instead rely on a fairly short cache lifetime... that may or may not be good enough.\n"
  syntax:
    content: public static void SetCachedValue(string section, string key, string value)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: value
      type: System.String
      description: Raw value to set
    content.vb: Public Shared Sub SetCachedValue(section As String, key As String, value As String)
  overload: SuperOffice.Data.SoPreference.SetCachedValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetCachedValue(System.Int32,System.String,System.String,System.String,SuperOffice.Data.PreferenceLevel)
  commentId: M:SuperOffice.Data.SoPreference.SetCachedValue(System.Int32,System.String,System.String,System.String,SuperOffice.Data.PreferenceLevel)
  id: SetCachedValue(System.Int32,System.String,System.String,System.String,SuperOffice.Data.PreferenceLevel)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetCachedValue(Int32, String, String, String, PreferenceLevel)
  nameWithType: SoPreference.SetCachedValue(Int32, String, String, String, PreferenceLevel)
  fullName: SuperOffice.Data.SoPreference.SetCachedValue(System.Int32, System.String, System.String, System.String, SuperOffice.Data.PreferenceLevel)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nUpdate individual and section caches\n"
  syntax:
    content: public static void SetCachedValue(int primaryId, string section, string key, string value, PreferenceLevel level)
    parameters:
    - id: primaryId
      type: System.Int32
      description: Obsolete, not used
    - id: section
      type: System.String
    - id: key
      type: System.String
    - id: value
      type: System.String
    - id: level
      type: SuperOffice.Data.PreferenceLevel
      description: Obsolete, not used
    content.vb: Public Shared Sub SetCachedValue(primaryId As Integer, section As String, key As String, value As String, level As PreferenceLevel)
  overload: SuperOffice.Data.SoPreference.SetCachedValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetStringAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetStringAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetStringAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetStringAsync(String, String, CancellationToken)
  nameWithType: SoPreference.GetStringAsync(String, String, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetStringAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet string value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<string> GetStringAsync(string section, string key, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: User preference.  If the user preference does not exist, <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref> is returned.
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetStringAsync(section As String, key As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.Data.SoPreference.GetStringAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetBoolAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetBoolAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetBoolAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetBoolAsync(String, String, Boolean, CancellationToken)
  nameWithType: SoPreference.GetBoolAsync(String, String, Boolean, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetBoolAsync(System.String, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet boolean value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<bool> GetBoolAsync(string section, string key, bool defaultValue, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.Boolean
      description: Default value
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: User preference.  If the user preference does not excist, the defualtValue is returned.
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetBoolAsync(section As String, key As String, defaultValue As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.Data.SoPreference.GetBoolAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.ParseBooleanPreference(System.String,System.Boolean)
  commentId: M:SuperOffice.Data.SoPreference.ParseBooleanPreference(System.String,System.Boolean)
  id: ParseBooleanPreference(System.String,System.Boolean)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: ParseBooleanPreference(String, Boolean)
  nameWithType: SoPreference.ParseBooleanPreference(String, Boolean)
  fullName: SuperOffice.Data.SoPreference.ParseBooleanPreference(System.String, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nParse a string value into a boolean; if that is not possible then return the default instead\n"
  syntax:
    content: public static bool ParseBooleanPreference(string value, bool defaultValue)
    parameters:
    - id: value
      type: System.String
    - id: defaultValue
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Shared Function ParseBooleanPreference(value As String, defaultValue As Boolean) As Boolean
  overload: SuperOffice.Data.SoPreference.ParseBooleanPreference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetIntAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetIntAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  id: GetIntAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetIntAsync(String, String, Int32, CancellationToken)
  nameWithType: SoPreference.GetIntAsync(String, String, Int32, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetIntAsync(System.String, System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet integer value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> GetIntAsync(string section, string key, int defaultValue, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.Int32
      description: Default value
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: User preference.  If the user preference does not exist, the defualtValue is returned.
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetIntAsync(section As String, key As String, defaultValue As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.SoPreference.GetIntAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  id: GetDateTimeAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetDateTimeAsync(String, String, DateTime, CancellationToken)
  nameWithType: SoPreference.GetDateTimeAsync(String, String, DateTime, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String, System.String, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet DateTime value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: public static Task<DateTime> GetDateTimeAsync(string section, string key, DateTime defaultValue, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.DateTime
      description: Default value
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.DateTime}
      description: User preference.  If the user preference does not exist, the defualtValue is returned.
    content.vb: Public Shared Function GetDateTimeAsync(section As String, key As String, defaultValue As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of DateTime)
  overload: SuperOffice.Data.SoPreference.GetDateTimeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetDateTimeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetDateTimeAsync(String, String, CancellationToken)
  nameWithType: SoPreference.GetDateTimeAsync(String, String, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetDateTimeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet DateTime value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: public static Task<DateTime> GetDateTimeAsync(string section, string key, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.DateTime}
      description: User preference.  If the user preference does not exist, midnight January 1st, 1970 is returned.
    content.vb: Public Shared Function GetDateTimeAsync(section As String, key As String, cancellationToken As CancellationToken = Nothing) As Task(Of DateTime)
  overload: SuperOffice.Data.SoPreference.GetDateTimeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  id: SetPreferenceAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetPreferenceAsync(String, String, Int32, CancellationToken)
  nameWithType: SoPreference.SetPreferenceAsync(String, String, Int32, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String, System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nSet a preference on the Individual (associate) level\n"
  syntax:
    content: public static Task SetPreferenceAsync(string section, string key, int value, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: value
      type: System.Int32
      description: New value, will overwrite the old or create a new record if no associate-level preference existed for the current associate
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function SetPreferenceAsync(section As String, key As String, value As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Data.SoPreference.SetPreferenceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  id: SetPreferenceAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetPreferenceAsync(String, String, Boolean, CancellationToken)
  nameWithType: SoPreference.SetPreferenceAsync(String, String, Boolean, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nSet a preference on the Individual (associate) level\n"
  syntax:
    content: public static Task SetPreferenceAsync(string section, string key, bool value, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: value
      type: System.Boolean
      description: New value, will overwrite the old or create a new record if no associate-level preference existed for the current associate
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function SetPreferenceAsync(section As String, key As String, value As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Data.SoPreference.SetPreferenceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  id: SetPreferenceAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetPreferenceAsync(String, String, DateTime, CancellationToken)
  nameWithType: SoPreference.SetPreferenceAsync(String, String, DateTime, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String, System.String, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nSet a preference on the Individual (associate) level\n"
  syntax:
    content: public static Task SetPreferenceAsync(string section, string key, DateTime value, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: value
      type: System.DateTime
      description: New value, will overwrite the old or create a new record if no associate-level preference existed for the current associate
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function SetPreferenceAsync(section As String, key As String, value As DateTime, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Data.SoPreference.SetPreferenceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SetPreferenceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetPreferenceAsync(String, String, String, CancellationToken)
  nameWithType: SoPreference.SetPreferenceAsync(String, String, String, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nSet a preference on the maximum supported level for the given preference. If the maximum level is &quot;Individual&quot; - .an associate level preference will be created.\nIf the maxiumum level is &quot;Group&quot;, a group level preference for the current associate will be created.\n"
  syntax:
    content: public static Task SetPreferenceAsync(string section, string key, string value, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: value
      type: System.String
      description: New value, will overwrite the old or create a new record if no preference existed for the maximum supported level
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function SetPreferenceAsync(section As String, key As String, value As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Data.SoPreference.SetPreferenceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String,System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: SetPreferenceAsync(System.String,System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SetPreferenceAsync(String, String, String, Int32, PreferenceLevel, Boolean, Boolean, CancellationToken)
  nameWithType: SoPreference.SetPreferenceAsync(String, String, String, Int32, PreferenceLevel, Boolean, Boolean, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.SetPreferenceAsync(System.String, System.String, System.String, System.Int32, SuperOffice.Data.PreferenceLevel, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nSet a preference \n"
  syntax:
    content: public static Task<int> SetPreferenceAsync(string section, string key, string value, int ownerId, PreferenceLevel level, bool removeOnLowerLevels = false, bool skipPermissionCheck = false, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: value
      type: System.String
      description: New value, will overwrite the old or create a new record if no associate-level preference existed for the associate
    - id: ownerId
      type: System.Int32
      description: The id to set for the ownerId field. This will point to different id type depending on the preference type
    - id: level
      type: SuperOffice.Data.PreferenceLevel
      description: The level to set for this preference
    - id: removeOnLowerLevels
      type: System.Boolean
      description: Will remove same preference on lower levels if set to true
    - id: skipPermissionCheck
      type: System.Boolean
      description: Set this to true to skip the check for setting system wide preferences
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function SetPreferenceAsync(section As String, key As String, value As String, ownerId As Integer, level As PreferenceLevel, removeOnLowerLevels As Boolean = False, skipPermissionCheck As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.SoPreference.SetPreferenceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetPreferenceAsync(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.SoPreference.GetPreferenceAsync(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Threading.CancellationToken)
  id: GetPreferenceAsync(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetPreferenceAsync(String, String, Int32, PreferenceLevel, Boolean, CancellationToken)
  nameWithType: SoPreference.GetPreferenceAsync(String, String, Int32, PreferenceLevel, Boolean, CancellationToken)
  fullName: SuperOffice.Data.SoPreference.GetPreferenceAsync(System.String, System.String, System.Int32, SuperOffice.Data.PreferenceLevel, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet a preference value directly from the database, specifying a full section/key/level/owner independent of the current user\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<string> GetPreferenceAsync(string section, string key, int ownerId, PreferenceLevel level, bool skipPermissionCheck = false, CancellationToken cancellationToken = null)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: ownerId
      type: System.Int32
      description: The id to set for the ownerId field. This will point to different id type depending on the preference type
    - id: level
      type: SuperOffice.Data.PreferenceLevel
      description: The level to set for this preference
    - id: skipPermissionCheck
      type: System.Boolean
      description: Set this to true to skip the check for setting system wide preferences
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetPreferenceAsync(section As String, key As String, ownerId As Integer, level As PreferenceLevel, skipPermissionCheck As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.Data.SoPreference.GetPreferenceAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.SectionCacheKey(System.String)
  commentId: M:SuperOffice.Data.SoPreference.SectionCacheKey(System.String)
  id: SectionCacheKey(System.String)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: SectionCacheKey(String)
  nameWithType: SoPreference.SectionCacheKey(String)
  fullName: SuperOffice.Data.SoPreference.SectionCacheKey(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the cache key for the list of keys in one section\n"
  syntax:
    content: public static string SectionCacheKey(string section)
    parameters:
    - id: section
      type: System.String
      description: Section name
    return:
      type: System.String
      description: Cache key for use in SoPrincipal
    content.vb: Public Shared Function SectionCacheKey(section As String) As String
  overload: SuperOffice.Data.SoPreference.SectionCacheKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.IndividualCacheKey(System.String,System.String)
  commentId: M:SuperOffice.Data.SoPreference.IndividualCacheKey(System.String,System.String)
  id: IndividualCacheKey(System.String,System.String)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: IndividualCacheKey(String, String)
  nameWithType: SoPreference.IndividualCacheKey(String, String)
  fullName: SuperOffice.Data.SoPreference.IndividualCacheKey(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the cache key for one single value\n"
  syntax:
    content: public static string IndividualCacheKey(string section, string key)
    parameters:
    - id: section
      type: System.String
      description: Section name
    - id: key
      type: System.String
      description: Key name
    return:
      type: System.String
      description: Cache key for use in SoPrincipal
    content.vb: Public Shared Function IndividualCacheKey(section As String, key As String) As String
  overload: SuperOffice.Data.SoPreference.IndividualCacheKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetString(System.String,System.String,System.String)
  commentId: M:SuperOffice.Data.SoPreference.GetString(System.String,System.String,System.String)
  id: GetString(System.String,System.String,System.String)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetString(String, String, String)
  nameWithType: SoPreference.GetString(String, String, String)
  fullName: SuperOffice.Data.SoPreference.GetString(System.String, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet string value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: public static string GetString(string section, string key, string defaultValue)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.String
      description: Default value
    return:
      type: System.String
      description: "\nUser preference.  If the user preference does not exist, the defualtValue is returned.\n"
    content.vb: Public Shared Function GetString(section As String, key As String, defaultValue As String) As String
  overload: SuperOffice.Data.SoPreference.GetString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetString(System.String,System.String)
  commentId: M:SuperOffice.Data.SoPreference.GetString(System.String,System.String)
  id: GetString(System.String,System.String)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetString(String, String)
  nameWithType: SoPreference.GetString(String, String)
  fullName: SuperOffice.Data.SoPreference.GetString(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet string value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: public static string GetString(string section, string key)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    return:
      type: System.String
      description: User preference.  If the user preference does not exist, <see cref="!:String.Empty"></see> is returned.
    content.vb: Public Shared Function GetString(section As String, key As String) As String
  overload: SuperOffice.Data.SoPreference.GetString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetBool(System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.Data.SoPreference.GetBool(System.String,System.String,System.Boolean)
  id: GetBool(System.String,System.String,System.Boolean)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetBool(String, String, Boolean)
  nameWithType: SoPreference.GetBool(String, String, Boolean)
  fullName: SuperOffice.Data.SoPreference.GetBool(System.String, System.String, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet boolean value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: public static bool GetBool(string section, string key, bool defaultValue)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.Boolean
      description: Default value
    return:
      type: System.Boolean
      description: User preference.  If the user preference does not excist, the defualtValue is returned.
    content.vb: Public Shared Function GetBool(section As String, key As String, defaultValue As Boolean) As Boolean
  overload: SuperOffice.Data.SoPreference.GetBool*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetInt(System.String,System.String,System.Int32)
  commentId: M:SuperOffice.Data.SoPreference.GetInt(System.String,System.String,System.Int32)
  id: GetInt(System.String,System.String,System.Int32)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetInt(String, String, Int32)
  nameWithType: SoPreference.GetInt(String, String, Int32)
  fullName: SuperOffice.Data.SoPreference.GetInt(System.String, System.String, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet integer value for a user preference, from the cache if possible. If not, read all keys and their\nvalues from the database, update the caches, and return the wanted value.\n"
  syntax:
    content: public static int GetInt(string section, string key, int defaultValue)
    parameters:
    - id: section
      type: System.String
      description: Name of the section.
    - id: key
      type: System.String
      description: Name of the key.
    - id: defaultValue
      type: System.Int32
      description: Default value
    return:
      type: System.Int32
      description: User preference.  If the user preference does not exist, the defualtValue is returned.
    content.vb: Public Shared Function GetInt(section As String, key As String, defaultValue As Integer) As Integer
  overload: SuperOffice.Data.SoPreference.GetInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.GetPreference(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean)
  commentId: M:SuperOffice.Data.SoPreference.GetPreference(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean)
  id: GetPreference(System.String,System.String,System.Int32,SuperOffice.Data.PreferenceLevel,System.Boolean)
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: GetPreference(String, String, Int32, PreferenceLevel, Boolean)
  nameWithType: SoPreference.GetPreference(String, String, Int32, PreferenceLevel, Boolean)
  fullName: SuperOffice.Data.SoPreference.GetPreference(System.String, System.String, System.Int32, SuperOffice.Data.PreferenceLevel, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet a preference value directly from the database, specifying a full section/key/level/owner independent of the current user\n"
  syntax:
    content: public static string GetPreference(string section, string key, int ownerId, PreferenceLevel level, bool skipPermissionCheck = false)
    parameters:
    - id: section
      type: System.String
      description: Preference section
    - id: key
      type: System.String
      description: Preference key
    - id: ownerId
      type: System.Int32
      description: The id to set for the ownerId field. This will point to different id type depending on the preference type
    - id: level
      type: SuperOffice.Data.PreferenceLevel
      description: The level to set for this preference
    - id: skipPermissionCheck
      type: System.Boolean
      description: Set this to true to skip the check for setting system wide preferences
    return:
      type: System.String
    content.vb: Public Shared Function GetPreference(section As String, key As String, ownerId As Integer, level As PreferenceLevel, skipPermissionCheck As Boolean = False) As String
  overload: SuperOffice.Data.SoPreference.GetPreference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.SoPreference.CacheLifetime
  commentId: P:SuperOffice.Data.SoPreference.CacheLifetime
  id: CacheLifetime
  parent: SuperOffice.Data.SoPreference
  langs:
  - csharp
  - vb
  name: CacheLifetime
  nameWithType: SoPreference.CacheLifetime
  fullName: SuperOffice.Data.SoPreference.CacheLifetime
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCache lifetime in seconds for user preferences; note that the cache used will expire when principal is recycled (roundtrip end if in typical Web context)\n"
  syntax:
    content: public static double CacheLifetime { get; set; }
    parameters: []
    return:
      type: System.Double
      description: The cache lifetime in seconds (default 60).
    content.vb: Public Shared Property CacheLifetime As Double
  overload: SuperOffice.Data.SoPreference.CacheLifetime*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.SoPreference.GetSectionsAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetSectionsAsync
  isExternal: true
  name: GetSectionsAsync
  nameWithType: SoPreference.GetSectionsAsync
  fullName: SuperOffice.Data.SoPreference.GetSectionsAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: '!:System.Threading.Tasks.Task{System.String[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoPreference.GetKeysAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetKeysAsync
  isExternal: true
  name: GetKeysAsync
  nameWithType: SoPreference.GetKeysAsync
  fullName: SuperOffice.Data.SoPreference.GetKeysAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SoPreference.SetKeys*
  commentId: Overload:SuperOffice.Data.SoPreference.SetKeys
  isExternal: true
  name: SetKeys
  nameWithType: SoPreference.SetKeys
  fullName: SuperOffice.Data.SoPreference.SetKeys
- uid: SuperOffice.Data.SoPreference.GetSectionAndKeyFromId*
  commentId: Overload:SuperOffice.Data.SoPreference.GetSectionAndKeyFromId
  isExternal: true
  name: GetSectionAndKeyFromId
  nameWithType: SoPreference.GetSectionAndKeyFromId
  fullName: SuperOffice.Data.SoPreference.GetSectionAndKeyFromId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.UserPreferenceCacheObject
  commentId: T:SuperOffice.Data.UserPreferenceCacheObject
  parent: SuperOffice.Data
  isExternal: true
  name: UserPreferenceCacheObject
  nameWithType: UserPreferenceCacheObject
  fullName: SuperOffice.Data.UserPreferenceCacheObject
- uid: SuperOffice.Data.SoPreference.GetStringAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetStringAsync
  isExternal: true
  name: GetStringAsync
  nameWithType: SoPreference.GetStringAsync
  fullName: SuperOffice.Data.SoPreference.GetStringAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoPreference.SetCachedValue*
  commentId: Overload:SuperOffice.Data.SoPreference.SetCachedValue
  isExternal: true
  name: SetCachedValue
  nameWithType: SoPreference.SetCachedValue
  fullName: SuperOffice.Data.SoPreference.SetCachedValue
- uid: SuperOffice.Data.PreferenceLevel
  commentId: T:SuperOffice.Data.PreferenceLevel
  parent: SuperOffice.Data
  isExternal: true
  name: PreferenceLevel
  nameWithType: PreferenceLevel
  fullName: SuperOffice.Data.PreferenceLevel
- uid: SuperOffice.Data.SoPreference.GetBoolAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetBoolAsync
  isExternal: true
  name: GetBoolAsync
  nameWithType: SoPreference.GetBoolAsync
  fullName: SuperOffice.Data.SoPreference.GetBoolAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoPreference.ParseBooleanPreference*
  commentId: Overload:SuperOffice.Data.SoPreference.ParseBooleanPreference
  isExternal: true
  name: ParseBooleanPreference
  nameWithType: SoPreference.ParseBooleanPreference
  fullName: SuperOffice.Data.SoPreference.ParseBooleanPreference
- uid: SuperOffice.Data.SoPreference.GetIntAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetIntAsync
  isExternal: true
  name: GetIntAsync
  nameWithType: SoPreference.GetIntAsync
  fullName: SuperOffice.Data.SoPreference.GetIntAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoPreference.GetDateTimeAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetDateTimeAsync
  isExternal: true
  name: GetDateTimeAsync
  nameWithType: SoPreference.GetDateTimeAsync
  fullName: SuperOffice.Data.SoPreference.GetDateTimeAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Threading.Tasks.Task{System.DateTime}
  commentId: '!:System.Threading.Tasks.Task{System.DateTime}'
  definition: System.Threading.Tasks.Task`1
  name: Task<DateTime>
  nameWithType: Task<DateTime>
  fullName: System.Threading.Tasks.Task<System.DateTime>
  nameWithType.vb: Task(Of DateTime)
  fullName.vb: System.Threading.Tasks.Task(Of System.DateTime)
  name.vb: Task(Of DateTime)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoPreference.SetPreferenceAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.SetPreferenceAsync
  isExternal: true
  name: SetPreferenceAsync
  nameWithType: SoPreference.SetPreferenceAsync
  fullName: SuperOffice.Data.SoPreference.SetPreferenceAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Data.SoPreference.GetPreferenceAsync*
  commentId: Overload:SuperOffice.Data.SoPreference.GetPreferenceAsync
  isExternal: true
  name: GetPreferenceAsync
  nameWithType: SoPreference.GetPreferenceAsync
  fullName: SuperOffice.Data.SoPreference.GetPreferenceAsync
- uid: SuperOffice.Data.SoPreference.SectionCacheKey*
  commentId: Overload:SuperOffice.Data.SoPreference.SectionCacheKey
  isExternal: true
  name: SectionCacheKey
  nameWithType: SoPreference.SectionCacheKey
  fullName: SuperOffice.Data.SoPreference.SectionCacheKey
- uid: SuperOffice.Data.SoPreference.IndividualCacheKey*
  commentId: Overload:SuperOffice.Data.SoPreference.IndividualCacheKey
  isExternal: true
  name: IndividualCacheKey
  nameWithType: SoPreference.IndividualCacheKey
  fullName: SuperOffice.Data.SoPreference.IndividualCacheKey
- uid: SuperOffice.Data.SoPreference.GetString*
  commentId: Overload:SuperOffice.Data.SoPreference.GetString
  isExternal: true
  name: GetString
  nameWithType: SoPreference.GetString
  fullName: SuperOffice.Data.SoPreference.GetString
- uid: SuperOffice.Data.SoPreference.GetBool*
  commentId: Overload:SuperOffice.Data.SoPreference.GetBool
  isExternal: true
  name: GetBool
  nameWithType: SoPreference.GetBool
  fullName: SuperOffice.Data.SoPreference.GetBool
- uid: SuperOffice.Data.SoPreference.GetInt*
  commentId: Overload:SuperOffice.Data.SoPreference.GetInt
  isExternal: true
  name: GetInt
  nameWithType: SoPreference.GetInt
  fullName: SuperOffice.Data.SoPreference.GetInt
- uid: SuperOffice.Data.SoPreference.GetPreference*
  commentId: Overload:SuperOffice.Data.SoPreference.GetPreference
  isExternal: true
  name: GetPreference
  nameWithType: SoPreference.GetPreference
  fullName: SuperOffice.Data.SoPreference.GetPreference
- uid: SuperOffice.Data.SoPreference.CacheLifetime*
  commentId: Overload:SuperOffice.Data.SoPreference.CacheLifetime
  isExternal: true
  name: CacheLifetime
  nameWithType: SoPreference.CacheLifetime
  fullName: SuperOffice.Data.SoPreference.CacheLifetime
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
