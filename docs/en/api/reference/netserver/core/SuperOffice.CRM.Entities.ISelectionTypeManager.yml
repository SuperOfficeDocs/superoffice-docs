### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager
  commentId: T:SuperOffice.CRM.Entities.ISelectionTypeManager
  id: ISelectionTypeManager
  parent: SuperOffice.CRM.Entities
  children:
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName(System.Int32)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType(System.Int16,SuperOffice.CRM.Entities.SelectionTypeInfo)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading(System.Int16,System.Int32)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.Int32)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.String)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName(System.String)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId(System.Int32)
  - SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes
  langs:
  - csharp
  - vb
  name: ISelectionTypeManager
  nameWithType: ISelectionTypeManager
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public interface ISelectionTypeManager
    content.vb: Public Interface ISelectionTypeManager
  extensionMethods:
  - SuperOffice.CRM.Entities.ISelectionTypeManager.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Entities.ISelectionTypeManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName(System.Int32)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName(System.Int32)
  id: GetProviderName(System.Int32)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetProviderName(Int32)
  nameWithType: ISelectionTypeManager.GetProviderName(Int32)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: string GetProviderName(int selectionId)
    parameters:
    - id: selectionId
      type: System.Int32
    return:
      type: System.String
    content.vb: Function GetProviderName(selectionId As Integer) As String
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType(System.Int16,SuperOffice.CRM.Entities.SelectionTypeInfo)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType(System.Int16,SuperOffice.CRM.Entities.SelectionTypeInfo)
  id: GetProviderNameByType(System.Int16,SuperOffice.CRM.Entities.SelectionTypeInfo)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetProviderNameByType(Int16, SelectionTypeInfo)
  nameWithType: ISelectionTypeManager.GetProviderNameByType(Int16, SelectionTypeInfo)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType(System.Int16, SuperOffice.CRM.Entities.SelectionTypeInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: string GetProviderNameByType(short selType, SelectionTypeInfo selTypeInfo)
    parameters:
    - id: selType
      type: System.Int16
    - id: selTypeInfo
      type: SuperOffice.CRM.Entities.SelectionTypeInfo
    return:
      type: System.String
    content.vb: Function GetProviderNameByType(selType As Short, selTypeInfo As SelectionTypeInfo) As String
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading(System.Int16,System.Int32)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading(System.Int16,System.Int32)
  id: GetSelectionMainHeading(System.Int16,System.Int32)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetSelectionMainHeading(Int16, Int32)
  nameWithType: ISelectionTypeManager.GetSelectionMainHeading(Int16, Int32)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading(System.Int16, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: string GetSelectionMainHeading(short selType, int tableNumber)
    parameters:
    - id: selType
      type: System.Int16
    - id: tableNumber
      type: System.Int32
    return:
      type: System.String
    content.vb: Function GetSelectionMainHeading(selType As Short, tableNumber As Integer) As String
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.Int32)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.Int32)
  id: GetSelectionType(System.Int32)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetSelectionType(Int32)
  nameWithType: ISelectionTypeManager.GetSelectionType(Int32)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: SelectionTypeInfo GetSelectionType(int tableNumber)
    parameters:
    - id: tableNumber
      type: System.Int32
    return:
      type: SuperOffice.CRM.Entities.SelectionTypeInfo
    content.vb: Function GetSelectionType(tableNumber As Integer) As SelectionTypeInfo
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.String)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.String)
  id: GetSelectionType(System.String)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetSelectionType(String)
  nameWithType: ISelectionTypeManager.GetSelectionType(String)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: SelectionTypeInfo GetSelectionType(string entity)
    parameters:
    - id: entity
      type: System.String
    return:
      type: SuperOffice.CRM.Entities.SelectionTypeInfo
    content.vb: Function GetSelectionType(entity As String) As SelectionTypeInfo
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName(System.String)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName(System.String)
  id: GetSelectionTypeFromProviderName(System.String)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetSelectionTypeFromProviderName(String)
  nameWithType: ISelectionTypeManager.GetSelectionTypeFromProviderName(String)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: SelectionTypeInfo GetSelectionTypeFromProviderName(string providerName)
    parameters:
    - id: providerName
      type: System.String
    return:
      type: SuperOffice.CRM.Entities.SelectionTypeInfo
    content.vb: Function GetSelectionTypeFromProviderName(providerName As String) As SelectionTypeInfo
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId(System.Int32)
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId(System.Int32)
  id: GetSelectionTypeFromSelectionId(System.Int32)
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetSelectionTypeFromSelectionId(Int32)
  nameWithType: ISelectionTypeManager.GetSelectionTypeFromSelectionId(Int32)
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: SelectionTypeInfo GetSelectionTypeFromSelectionId(int selectionId)
    parameters:
    - id: selectionId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Entities.SelectionTypeInfo
    content.vb: Function GetSelectionTypeFromSelectionId(selectionId As Integer) As SelectionTypeInfo
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId*
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes
  commentId: M:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes
  id: GetSelectionTypes
  parent: SuperOffice.CRM.Entities.ISelectionTypeManager
  langs:
  - csharp
  - vb
  name: GetSelectionTypes()
  nameWithType: ISelectionTypeManager.GetSelectionTypes()
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: List<SelectionTypeInfo> GetSelectionTypes()
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.Entities.SelectionTypeInfo}
    content.vb: Function GetSelectionTypes As List(Of SelectionTypeInfo)
  overload: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes*
references:
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ISelectionTypeManager, To>()
  nameWithType: EnumUtil.MapEnums<ISelectionTypeManager, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Entities.ISelectionTypeManager, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ISelectionTypeManager, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Entities.ISelectionTypeManager, To)()
  name.vb: MapEnums(Of ISelectionTypeManager, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ISelectionTypeManager, To>
    nameWithType: EnumUtil.MapEnums<ISelectionTypeManager, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Entities.ISelectionTypeManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ISelectionTypeManager, To)
    nameWithType: EnumUtil.MapEnums(Of ISelectionTypeManager, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Entities.ISelectionTypeManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ISelectionTypeManager, To>()
  nameWithType: Converters.MapEnums<ISelectionTypeManager, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Entities.ISelectionTypeManager, To>()
  nameWithType.vb: Converters.MapEnums(Of ISelectionTypeManager, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Entities.ISelectionTypeManager, To)()
  name.vb: MapEnums(Of ISelectionTypeManager, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ISelectionTypeManager, To>
    nameWithType: Converters.MapEnums<ISelectionTypeManager, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Entities.ISelectionTypeManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ISelectionTypeManager, To)
    nameWithType: Converters.MapEnums(Of ISelectionTypeManager, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Entities.ISelectionTypeManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName
  isExternal: true
  name: GetProviderName
  nameWithType: ISelectionTypeManager.GetProviderName
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderName
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType
  isExternal: true
  name: GetProviderNameByType
  nameWithType: ISelectionTypeManager.GetProviderNameByType
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetProviderNameByType
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: SuperOffice.CRM.Entities.SelectionTypeInfo
  commentId: T:SuperOffice.CRM.Entities.SelectionTypeInfo
  parent: SuperOffice.CRM.Entities
  isExternal: true
  name: SelectionTypeInfo
  nameWithType: SelectionTypeInfo
  fullName: SuperOffice.CRM.Entities.SelectionTypeInfo
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading
  isExternal: true
  name: GetSelectionMainHeading
  nameWithType: ISelectionTypeManager.GetSelectionMainHeading
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionMainHeading
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType
  isExternal: true
  name: GetSelectionType
  nameWithType: ISelectionTypeManager.GetSelectionType
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionType
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName
  isExternal: true
  name: GetSelectionTypeFromProviderName
  nameWithType: ISelectionTypeManager.GetSelectionTypeFromProviderName
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromProviderName
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId
  isExternal: true
  name: GetSelectionTypeFromSelectionId
  nameWithType: ISelectionTypeManager.GetSelectionTypeFromSelectionId
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypeFromSelectionId
- uid: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes*
  commentId: Overload:SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes
  isExternal: true
  name: GetSelectionTypes
  nameWithType: ISelectionTypeManager.GetSelectionTypes
  fullName: SuperOffice.CRM.Entities.ISelectionTypeManager.GetSelectionTypes
- uid: System.Collections.Generic.List{SuperOffice.CRM.Entities.SelectionTypeInfo}
  commentId: '!:System.Collections.Generic.List{SuperOffice.CRM.Entities.SelectionTypeInfo}'
  definition: System.Collections.Generic.List`1
  name: List<SelectionTypeInfo>
  nameWithType: List<SelectionTypeInfo>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Entities.SelectionTypeInfo>
  nameWithType.vb: List(Of SelectionTypeInfo)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Entities.SelectionTypeInfo)
  name.vb: List(Of SelectionTypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Entities.SelectionTypeInfo
    name: SelectionTypeInfo
    nameWithType: SelectionTypeInfo
    fullName: SuperOffice.CRM.Entities.SelectionTypeInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Entities.SelectionTypeInfo
    name: SelectionTypeInfo
    nameWithType: SelectionTypeInfo
    fullName: SuperOffice.CRM.Entities.SelectionTypeInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
