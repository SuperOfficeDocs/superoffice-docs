### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  commentId: T:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  id: ITicketStatusRegistryHelper
  parent: SuperOffice.CRM.Ticket
  children:
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync(SuperOffice.Data.TicketBaseStatus,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault(System.Int32)
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue(System.Int32)
  langs:
  - csharp
  - vb
  name: ITicketStatusRegistryHelper
  nameWithType: ITicketStatusRegistryHelper
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: public interface ITicketStatusRegistryHelper
    content.vb: Public Interface ITicketStatusRegistryHelper
  extensionMethods:
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync(SuperOffice.Data.TicketBaseStatus,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync(SuperOffice.Data.TicketBaseStatus,System.Int32,System.Threading.CancellationToken)
  id: AddToDefaultTicketStatusRegistryAsync(SuperOffice.Data.TicketBaseStatus,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: AddToDefaultTicketStatusRegistryAsync(TicketBaseStatus, Int32, CancellationToken)
  nameWithType: ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync(TicketBaseStatus, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync(SuperOffice.Data.TicketBaseStatus, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: Task AddToDefaultTicketStatusRegistryAsync(TicketBaseStatus status, int ticketStatusId, CancellationToken cancellationToken = null)
    parameters:
    - id: status
      type: SuperOffice.Data.TicketBaseStatus
    - id: ticketStatusId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddToDefaultTicketStatusRegistryAsync(status As TicketBaseStatus, ticketStatusId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync(System.Threading.CancellationToken)
  id: InitializeAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: InitializeAsync(CancellationToken)
  nameWithType: ITicketStatusRegistryHelper.InitializeAsync(CancellationToken)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: Task InitializeAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function InitializeAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  id: GetDefaultTicketStatusRegistryRowAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: GetDefaultTicketStatusRegistryRowAsync(TicketBaseStatus, CancellationToken)
  nameWithType: ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync(TicketBaseStatus, CancellationToken)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync(SuperOffice.Data.TicketBaseStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: Task<RegistryRow> GetDefaultTicketStatusRegistryRowAsync(TicketBaseStatus ticketStatus, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketStatus
      type: SuperOffice.Data.TicketBaseStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.RegistryRow}
    content.vb: Function GetDefaultTicketStatusRegistryRowAsync(ticketStatus As TicketBaseStatus, cancellationToken As CancellationToken = Nothing) As Task(Of RegistryRow)
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault(System.Int32)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault(System.Int32)
  id: IsDefault(System.Int32)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: IsDefault(Int32)
  nameWithType: ITicketStatusRegistryHelper.IsDefault(Int32)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: bool IsDefault(int ticketStatusId)
    parameters:
    - id: ticketStatusId
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Function IsDefault(ticketStatusId As Integer) As Boolean
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync(System.Int32,System.Threading.CancellationToken)
  id: RemoveFromUsedInQueueRegistryAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: RemoveFromUsedInQueueRegistryAsync(Int32, CancellationToken)
  nameWithType: ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: Task RemoveFromUsedInQueueRegistryAsync(int ticketStatusId, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketStatusId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveFromUsedInQueueRegistryAsync(ticketStatusId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)
  id: UpdateUsedInQueueRegistryAsync(System.Boolean,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: UpdateUsedInQueueRegistryAsync(Boolean, Int32, CancellationToken)
  nameWithType: ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync(Boolean, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync(System.Boolean, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: Task UpdateUsedInQueueRegistryAsync(bool usedInQueue, int ticketStatusId, CancellationToken cancellationToken = null)
    parameters:
    - id: usedInQueue
      type: System.Boolean
    - id: ticketStatusId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateUsedInQueueRegistryAsync(usedInQueue As Boolean, ticketStatusId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue(System.Int32)
  commentId: M:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue(System.Int32)
  id: UsedInQueue(System.Int32)
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: UsedInQueue(Int32)
  nameWithType: ITicketStatusRegistryHelper.UsedInQueue(Int32)
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: bool UsedInQueue(int ticketStatusId)
    parameters:
    - id: ticketStatusId
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Function UsedInQueue(ticketStatusId As Integer) As Boolean
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue*
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  commentId: P:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  id: StatusesWithUsedInQueueFlag
  parent: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper
  langs:
  - csharp
  - vb
  name: StatusesWithUsedInQueueFlag
  nameWithType: ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Ticket
  syntax:
    content: List<int> StatusesWithUsedInQueueFlag { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: ReadOnly Property StatusesWithUsedInQueueFlag As List(Of Integer)
  overload: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: SuperOffice.CRM.Ticket
  commentId: N:SuperOffice.CRM.Ticket
  isExternal: true
  name: SuperOffice.CRM.Ticket
  nameWithType: SuperOffice.CRM.Ticket
  fullName: SuperOffice.CRM.Ticket
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ITicketStatusRegistryHelper, To>()
  nameWithType: EnumUtil.MapEnums<ITicketStatusRegistryHelper, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ITicketStatusRegistryHelper, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To)()
  name.vb: MapEnums(Of ITicketStatusRegistryHelper, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ITicketStatusRegistryHelper, To>
    nameWithType: EnumUtil.MapEnums<ITicketStatusRegistryHelper, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ITicketStatusRegistryHelper, To)
    nameWithType: EnumUtil.MapEnums(Of ITicketStatusRegistryHelper, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ITicketStatusRegistryHelper, To>()
  nameWithType: Converters.MapEnums<ITicketStatusRegistryHelper, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To>()
  nameWithType.vb: Converters.MapEnums(Of ITicketStatusRegistryHelper, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To)()
  name.vb: MapEnums(Of ITicketStatusRegistryHelper, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ITicketStatusRegistryHelper, To>
    nameWithType: Converters.MapEnums<ITicketStatusRegistryHelper, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ITicketStatusRegistryHelper, To)
    nameWithType: Converters.MapEnums(Of ITicketStatusRegistryHelper, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync
  isExternal: true
  name: AddToDefaultTicketStatusRegistryAsync
  nameWithType: ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.AddToDefaultTicketStatusRegistryAsync
- uid: SuperOffice.Data.TicketBaseStatus
  commentId: T:SuperOffice.Data.TicketBaseStatus
  parent: SuperOffice.Data
  isExternal: true
  name: TicketBaseStatus
  nameWithType: TicketBaseStatus
  fullName: SuperOffice.Data.TicketBaseStatus
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync
  isExternal: true
  name: InitializeAsync
  nameWithType: ITicketStatusRegistryHelper.InitializeAsync
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.InitializeAsync
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync
  isExternal: true
  name: GetDefaultTicketStatusRegistryRowAsync
  nameWithType: ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.GetDefaultTicketStatusRegistryRowAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.RegistryRow}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.RegistryRow}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RegistryRow>
  nameWithType: Task<RegistryRow>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.RegistryRow>
  nameWithType.vb: Task(Of RegistryRow)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.RegistryRow)
  name.vb: Task(Of RegistryRow)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.RegistryRow
    name: RegistryRow
    nameWithType: RegistryRow
    fullName: SuperOffice.CRM.Rows.RegistryRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.RegistryRow
    name: RegistryRow
    nameWithType: RegistryRow
    fullName: SuperOffice.CRM.Rows.RegistryRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault
  isExternal: true
  name: IsDefault
  nameWithType: ITicketStatusRegistryHelper.IsDefault
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.IsDefault
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync
  isExternal: true
  name: RemoveFromUsedInQueueRegistryAsync
  nameWithType: ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.RemoveFromUsedInQueueRegistryAsync
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync
  isExternal: true
  name: UpdateUsedInQueueRegistryAsync
  nameWithType: ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UpdateUsedInQueueRegistryAsync
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue
  isExternal: true
  name: UsedInQueue
  nameWithType: ITicketStatusRegistryHelper.UsedInQueue
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.UsedInQueue
- uid: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag*
  commentId: Overload:SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  isExternal: true
  name: StatusesWithUsedInQueueFlag
  nameWithType: ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
  fullName: SuperOffice.CRM.Ticket.ITicketStatusRegistryHelper.StatusesWithUsedInQueueFlag
- uid: System.Collections.Generic.List{System.Int32}
  commentId: '!:System.Collections.Generic.List{System.Int32}'
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
