### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin
  commentId: T:SuperOffice.Diagnostics.Logging.ISoMetricsPlugin
  id: ISoMetricsPlugin
  parent: SuperOffice.Diagnostics.Logging
  children:
  - SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  - SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation(System.String,System.Collections.Specialized.NameValueCollection)
  langs:
  - csharp
  - vb
  name: ISoMetricsPlugin
  nameWithType: ISoMetricsPlugin
  fullName: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics.Logging
  summary: "\nCustom metrics reporting. Report counter values to a suitable back-end.\n"
  syntax:
    content: 'public interface ISoMetricsPlugin : IPlugin'
    content.vb: >-
      Public Interface ISoMetricsPlugin
          Inherits IPlugin
  extensionMethods:
  - SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.EnumUtil.MapEnums``2
  - SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  commentId: M:SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  id: Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  parent: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin
  langs:
  - csharp
  - vb
  name: Count(String, NameValueCollection, Dictionary<String, Double>)
  nameWithType: ISoMetricsPlugin.Count(String, NameValueCollection, Dictionary<String, Double>)
  fullName: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count(System.String, System.Collections.Specialized.NameValueCollection, System.Collections.Generic.Dictionary<System.String, System.Double>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics.Logging
  summary: "\nCount many values\n"
  syntax:
    content: void Count(string eventName, NameValueCollection tags, Dictionary<string, double> metrics)
    parameters:
    - id: eventName
      type: System.String
      description: What is happening?
    - id: tags
      type: System.Collections.Specialized.NameValueCollection
      description: Tags associated with this event. Some logging systems use this to allow filtering/grouping of counts
    - id: metrics
      type: System.Collections.Generic.Dictionary{System.String,System.Double}
      description: measures
    content.vb: Sub Count(eventName As String, tags As NameValueCollection, metrics As Dictionary(Of String, Double))
  overload: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count*
  nameWithType.vb: ISoMetricsPlugin.Count(String, NameValueCollection, Dictionary(Of String, Double))
  fullName.vb: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count(System.String, System.Collections.Specialized.NameValueCollection, System.Collections.Generic.Dictionary(Of System.String, System.Double))
  name.vb: Count(String, NameValueCollection, Dictionary(Of String, Double))
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation(System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation(System.String,System.Collections.Specialized.NameValueCollection)
  id: TraceOperation(System.String,System.Collections.Specialized.NameValueCollection)
  parent: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin
  langs:
  - csharp
  - vb
  name: TraceOperation(String, NameValueCollection)
  nameWithType: ISoMetricsPlugin.TraceOperation(String, NameValueCollection)
  fullName: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation(System.String, System.Collections.Specialized.NameValueCollection)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics.Logging
  summary: "\nLog operation start. Dispose of the returned value to log the operation duration.\n"
  syntax:
    content: IDisposable TraceOperation(string operationName, NameValueCollection tags)
    parameters:
    - id: operationName
      type: System.String
      description: Name of the operation
    - id: tags
      type: System.Collections.Specialized.NameValueCollection
      description: parameters to add to operation trace
    return:
      type: System.IDisposable
      description: disposable object
    content.vb: Function TraceOperation(operationName As String, tags As NameValueCollection) As IDisposable
  overload: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation*
references:
- uid: SuperOffice.Diagnostics.Logging
  commentId: N:SuperOffice.Diagnostics.Logging
  isExternal: true
  name: SuperOffice.Diagnostics.Logging
  nameWithType: SuperOffice.Diagnostics.Logging
  fullName: SuperOffice.Diagnostics.Logging
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ISoMetricsPlugin, To>()
  nameWithType: EnumUtil.MapEnums<ISoMetricsPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ISoMetricsPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To)()
  name.vb: MapEnums(Of ISoMetricsPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ISoMetricsPlugin, To>
    nameWithType: EnumUtil.MapEnums<ISoMetricsPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ISoMetricsPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of ISoMetricsPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ISoMetricsPlugin, To>()
  nameWithType: Converters.MapEnums<ISoMetricsPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of ISoMetricsPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To)()
  name.vb: MapEnums(Of ISoMetricsPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ISoMetricsPlugin, To>
    nameWithType: Converters.MapEnums<ISoMetricsPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ISoMetricsPlugin, To)
    nameWithType: Converters.MapEnums(Of ISoMetricsPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.Logging.ISoMetricsPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count*
  commentId: Overload:SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count
  isExternal: true
  name: Count
  nameWithType: ISoMetricsPlugin.Count
  fullName: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.Count
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.NameValueCollection
  isExternal: true
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Collections.Generic.Dictionary{System.String,System.Double}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Double>
  nameWithType: Dictionary<String, Double>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Double>
  nameWithType.vb: Dictionary(Of String, Double)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Double)
  name.vb: Dictionary(Of String, Double)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation*
  commentId: Overload:SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation
  isExternal: true
  name: TraceOperation
  nameWithType: ISoMetricsPlugin.TraceOperation
  fullName: SuperOffice.Diagnostics.Logging.ISoMetricsPlugin.TraceOperation
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
