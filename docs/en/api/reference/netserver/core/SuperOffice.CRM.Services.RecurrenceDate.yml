### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.RecurrenceDate
  commentId: T:SuperOffice.CRM.Services.RecurrenceDate
  id: RecurrenceDate
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.RecurrenceDate.#ctor
  - SuperOffice.CRM.Services.RecurrenceDate.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  - SuperOffice.CRM.Services.RecurrenceDate.Date
  - SuperOffice.CRM.Services.RecurrenceDate.Description
  - SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint
  - SuperOffice.CRM.Services.RecurrenceDate.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  - SuperOffice.CRM.Services.RecurrenceDate.Equals(System.Object)
  - SuperOffice.CRM.Services.RecurrenceDate.GetHashCode
  - SuperOffice.CRM.Services.RecurrenceDate.IsConflict
  - SuperOffice.CRM.Services.RecurrenceDate.op_Equality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  - SuperOffice.CRM.Services.RecurrenceDate.op_Inequality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  - SuperOffice.CRM.Services.RecurrenceDate.Tooltip
  - SuperOffice.CRM.Services.RecurrenceDate.ToString
  langs:
  - csharp
  - vb
  name: RecurrenceDate
  nameWithType: RecurrenceDate
  fullName: SuperOffice.CRM.Services.RecurrenceDate
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nClass representing a Date for recurrence.\n"
  syntax:
    content: 'public class RecurrenceDate : IEquatable<RecurrenceDate>, IComparable<RecurrenceDate>'
    content.vb: >-
      Public Class RecurrenceDate
          Implements IEquatable(Of RecurrenceDate), IComparable(Of RecurrenceDate)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}
  - System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Services.RecurrenceDate.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Services.RecurrenceDate.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Services.RecurrenceDate)
  - SuperOffice.CRM.Services.RecurrenceDate.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.CRM.Services.RecurrenceDate.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Services.RecurrenceDate.#ctor
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: RecurrenceDate()
  nameWithType: RecurrenceDate.RecurrenceDate()
  fullName: SuperOffice.CRM.Services.RecurrenceDate.RecurrenceDate()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  syntax:
    content: public RecurrenceDate()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Services.RecurrenceDate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.ToString
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.ToString
  id: ToString
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RecurrenceDate.ToString()
  fullName: SuperOffice.CRM.Services.RecurrenceDate.ToString()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.CRM.Services.RecurrenceDate.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.CRM.Services.RecurrenceDate.op_Equality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.op_Equality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  id: op_Equality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Equality(RecurrenceDate, RecurrenceDate)
  nameWithType: RecurrenceDate.Equality(RecurrenceDate, RecurrenceDate)
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Equality(SuperOffice.CRM.Services.RecurrenceDate, SuperOffice.CRM.Services.RecurrenceDate)
  type: Operator
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nDetermine if a is equal to b.\n"
  syntax:
    content: public static bool operator ==(RecurrenceDate a, RecurrenceDate b)
    parameters:
    - id: a
      type: SuperOffice.CRM.Services.RecurrenceDate
      description: First object.
    - id: b
      type: SuperOffice.CRM.Services.RecurrenceDate
      description: Second object.
    return:
      type: System.Boolean
      description: True if the objects are equal.
    content.vb: Public Shared Operator =(a As RecurrenceDate, b As RecurrenceDate) As Boolean
  overload: SuperOffice.CRM.Services.RecurrenceDate.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Services.RecurrenceDate.op_Inequality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.op_Inequality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  id: op_Inequality(SuperOffice.CRM.Services.RecurrenceDate,SuperOffice.CRM.Services.RecurrenceDate)
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Inequality(RecurrenceDate, RecurrenceDate)
  nameWithType: RecurrenceDate.Inequality(RecurrenceDate, RecurrenceDate)
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Inequality(SuperOffice.CRM.Services.RecurrenceDate, SuperOffice.CRM.Services.RecurrenceDate)
  type: Operator
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nDetermine if the objects are not equal.\n"
  syntax:
    content: public static bool operator !=(RecurrenceDate a, RecurrenceDate b)
    parameters:
    - id: a
      type: SuperOffice.CRM.Services.RecurrenceDate
      description: Frist object.
    - id: b
      type: SuperOffice.CRM.Services.RecurrenceDate
      description: Second object.
    return:
      type: System.Boolean
      description: True, if the objects differ.
    content.vb: Public Shared Operator <>(a As RecurrenceDate, b As RecurrenceDate) As Boolean
  overload: SuperOffice.CRM.Services.RecurrenceDate.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Services.RecurrenceDate.Equals(System.Object)
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.Equals(System.Object)
  id: Equals(System.Object)
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: RecurrenceDate.Equals(Object)
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Equals(System.Object)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nCheck if the two objects are the equal.\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object to determine if it is equal.
    return:
      type: System.Boolean
      description: True, if the objects are equal.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: SuperOffice.CRM.Services.RecurrenceDate.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.CRM.Services.RecurrenceDate.GetHashCode
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.GetHashCode
  id: GetHashCode
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: RecurrenceDate.GetHashCode()
  fullName: SuperOffice.CRM.Services.RecurrenceDate.GetHashCode()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: SuperOffice.CRM.Services.RecurrenceDate.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.CRM.Services.RecurrenceDate.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  id: Equals(SuperOffice.CRM.Services.RecurrenceDate)
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Equals(RecurrenceDate)
  nameWithType: RecurrenceDate.Equals(RecurrenceDate)
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\n\n"
  syntax:
    content: public bool Equals(RecurrenceDate other)
    parameters:
    - id: other
      type: SuperOffice.CRM.Services.RecurrenceDate
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As RecurrenceDate) As Boolean
  overload: SuperOffice.CRM.Services.RecurrenceDate.Equals*
  implements:
  - System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:SuperOffice.CRM.Services.RecurrenceDate.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  id: CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: CompareTo(RecurrenceDate)
  nameWithType: RecurrenceDate.CompareTo(RecurrenceDate)
  fullName: SuperOffice.CRM.Services.RecurrenceDate.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  syntax:
    content: public int CompareTo(RecurrenceDate other)
    parameters:
    - id: other
      type: SuperOffice.CRM.Services.RecurrenceDate
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As RecurrenceDate) As Integer
  overload: SuperOffice.CRM.Services.RecurrenceDate.CompareTo*
  implements:
  - System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.Date
  commentId: P:SuperOffice.CRM.Services.RecurrenceDate.Date
  id: Date
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Date
  nameWithType: RecurrenceDate.Date
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Date
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nDate of the recurrence.\n"
  syntax:
    content: public DateTime Date { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property Date As Date
  overload: SuperOffice.CRM.Services.RecurrenceDate.Date*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.IsConflict
  commentId: P:SuperOffice.CRM.Services.RecurrenceDate.IsConflict
  id: IsConflict
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: IsConflict
  nameWithType: RecurrenceDate.IsConflict
  fullName: SuperOffice.CRM.Services.RecurrenceDate.IsConflict
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nIs there a conflict for this occurrence.\n"
  syntax:
    content: public bool IsConflict { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsConflict As Boolean
  overload: SuperOffice.CRM.Services.RecurrenceDate.IsConflict*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.Description
  commentId: P:SuperOffice.CRM.Services.RecurrenceDate.Description
  id: Description
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: RecurrenceDate.Description
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Description
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nConflict or day (e.g. red, blue, etc. letter-day) name.\n"
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: SuperOffice.CRM.Services.RecurrenceDate.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint
  commentId: P:SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint
  id: DescriptionStyleHint
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: DescriptionStyleHint
  nameWithType: RecurrenceDate.DescriptionStyleHint
  fullName: SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nStyle hint for the description (i.e. red for red-letter-days)\n"
  syntax:
    content: public string DescriptionStyleHint { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DescriptionStyleHint As String
  overload: SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Services.RecurrenceDate.Tooltip
  commentId: P:SuperOffice.CRM.Services.RecurrenceDate.Tooltip
  id: Tooltip
  parent: SuperOffice.CRM.Services.RecurrenceDate
  langs:
  - csharp
  - vb
  name: Tooltip
  nameWithType: RecurrenceDate.Tooltip
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Tooltip
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nDescription of conflict or other things happening this day.\n"
  syntax:
    content: public string Tooltip { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Tooltip As String
  overload: SuperOffice.CRM.Services.RecurrenceDate.Tooltip*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}
  commentId: T:System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<RecurrenceDate>
  nameWithType: IEquatable<RecurrenceDate>
  fullName: System.IEquatable<SuperOffice.CRM.Services.RecurrenceDate>
  nameWithType.vb: IEquatable(Of RecurrenceDate)
  fullName.vb: System.IEquatable(Of SuperOffice.CRM.Services.RecurrenceDate)
  name.vb: IEquatable(Of RecurrenceDate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}
  commentId: T:System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}
  parent: System
  definition: System.IComparable`1
  name: IComparable<RecurrenceDate>
  nameWithType: IComparable<RecurrenceDate>
  fullName: System.IComparable<SuperOffice.CRM.Services.RecurrenceDate>
  nameWithType.vb: IComparable(Of RecurrenceDate)
  fullName.vb: System.IComparable(Of SuperOffice.CRM.Services.RecurrenceDate)
  name.vb: IComparable(Of RecurrenceDate)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<RecurrenceDate, To>()
  nameWithType: EnumUtil.MapEnums<RecurrenceDate, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Services.RecurrenceDate, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of RecurrenceDate, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Services.RecurrenceDate, To)()
  name.vb: MapEnums(Of RecurrenceDate, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<RecurrenceDate, To>
    nameWithType: EnumUtil.MapEnums<RecurrenceDate, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Services.RecurrenceDate, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of RecurrenceDate, To)
    nameWithType: EnumUtil.MapEnums(Of RecurrenceDate, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Services.RecurrenceDate, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<RecurrenceDate>(RecurrenceDate)
  nameWithType: ObjectExtensions.AssignByReflection<RecurrenceDate>(RecurrenceDate)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Services.RecurrenceDate>(SuperOffice.CRM.Services.RecurrenceDate)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of RecurrenceDate)(RecurrenceDate)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Services.RecurrenceDate)(SuperOffice.CRM.Services.RecurrenceDate)
  name.vb: AssignByReflection(Of RecurrenceDate)(RecurrenceDate)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<RecurrenceDate>
    nameWithType: ObjectExtensions.AssignByReflection<RecurrenceDate>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Services.RecurrenceDate>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of RecurrenceDate)
    nameWithType: ObjectExtensions.AssignByReflection(Of RecurrenceDate)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Services.RecurrenceDate)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<RecurrenceDate>()
  nameWithType: ObjectExtensions.GraphCopy<RecurrenceDate>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Services.RecurrenceDate>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of RecurrenceDate)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Services.RecurrenceDate)()
  name.vb: GraphCopy(Of RecurrenceDate)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<RecurrenceDate>
    nameWithType: ObjectExtensions.GraphCopy<RecurrenceDate>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Services.RecurrenceDate>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of RecurrenceDate)
    nameWithType: ObjectExtensions.GraphCopy(Of RecurrenceDate)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Services.RecurrenceDate)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<RecurrenceDate, To>()
  nameWithType: Converters.MapEnums<RecurrenceDate, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Services.RecurrenceDate, To>()
  nameWithType.vb: Converters.MapEnums(Of RecurrenceDate, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Services.RecurrenceDate, To)()
  name.vb: MapEnums(Of RecurrenceDate, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<RecurrenceDate, To>
    nameWithType: Converters.MapEnums<RecurrenceDate, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Services.RecurrenceDate, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of RecurrenceDate, To)
    nameWithType: Converters.MapEnums(Of RecurrenceDate, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Services.RecurrenceDate, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Services.RecurrenceDate.#ctor*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.#ctor
  isExternal: true
  name: RecurrenceDate
  nameWithType: RecurrenceDate.RecurrenceDate
  fullName: SuperOffice.CRM.Services.RecurrenceDate.RecurrenceDate
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.ToString*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.ToString
  isExternal: true
  name: ToString
  nameWithType: RecurrenceDate.ToString
  fullName: SuperOffice.CRM.Services.RecurrenceDate.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Services.RecurrenceDate.op_Equality*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.op_Equality
  isExternal: true
  name: Equality
  nameWithType: RecurrenceDate.Equality
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Equality
- uid: SuperOffice.CRM.Services.RecurrenceDate
  commentId: T:SuperOffice.CRM.Services.RecurrenceDate
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: RecurrenceDate
  nameWithType: RecurrenceDate
  fullName: SuperOffice.CRM.Services.RecurrenceDate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Services.RecurrenceDate.op_Inequality*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.op_Inequality
  isExternal: true
  name: Inequality
  nameWithType: RecurrenceDate.Inequality
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Inequality
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.Equals*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.Equals
  isExternal: true
  name: Equals
  nameWithType: RecurrenceDate.Equals
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.GetHashCode*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: RecurrenceDate.GetHashCode
  fullName: SuperOffice.CRM.Services.RecurrenceDate.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  parent: System.IEquatable{SuperOffice.CRM.Services.RecurrenceDate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(RecurrenceDate)
  nameWithType: IEquatable<RecurrenceDate>.Equals(RecurrenceDate)
  fullName: System.IEquatable<SuperOffice.CRM.Services.RecurrenceDate>.Equals(SuperOffice.CRM.Services.RecurrenceDate)
  nameWithType.vb: IEquatable(Of RecurrenceDate).Equals(RecurrenceDate)
  fullName.vb: System.IEquatable(Of SuperOffice.CRM.Services.RecurrenceDate).Equals(SuperOffice.CRM.Services.RecurrenceDate)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<RecurrenceDate>.Equals
    fullName: System.IEquatable<SuperOffice.CRM.Services.RecurrenceDate>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of RecurrenceDate).Equals
    fullName: System.IEquatable(Of SuperOffice.CRM.Services.RecurrenceDate).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.CompareTo*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.CompareTo
  isExternal: true
  name: CompareTo
  nameWithType: RecurrenceDate.CompareTo
  fullName: SuperOffice.CRM.Services.RecurrenceDate.CompareTo
- uid: System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  commentId: M:System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  parent: System.IComparable{SuperOffice.CRM.Services.RecurrenceDate}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(RecurrenceDate)
  nameWithType: IComparable<RecurrenceDate>.CompareTo(RecurrenceDate)
  fullName: System.IComparable<SuperOffice.CRM.Services.RecurrenceDate>.CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  nameWithType.vb: IComparable(Of RecurrenceDate).CompareTo(RecurrenceDate)
  fullName.vb: System.IComparable(Of SuperOffice.CRM.Services.RecurrenceDate).CompareTo(SuperOffice.CRM.Services.RecurrenceDate)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<RecurrenceDate>.CompareTo
    fullName: System.IComparable<SuperOffice.CRM.Services.RecurrenceDate>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of RecurrenceDate).CompareTo
    fullName: System.IComparable(Of SuperOffice.CRM.Services.RecurrenceDate).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrenceDate.Date*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.Date
  isExternal: true
  name: Date
  nameWithType: RecurrenceDate.Date
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Date
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.CRM.Services.RecurrenceDate.IsConflict*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.IsConflict
  isExternal: true
  name: IsConflict
  nameWithType: RecurrenceDate.IsConflict
  fullName: SuperOffice.CRM.Services.RecurrenceDate.IsConflict
- uid: SuperOffice.CRM.Services.RecurrenceDate.Description*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.Description
  isExternal: true
  name: Description
  nameWithType: RecurrenceDate.Description
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Description
- uid: SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint
  isExternal: true
  name: DescriptionStyleHint
  nameWithType: RecurrenceDate.DescriptionStyleHint
  fullName: SuperOffice.CRM.Services.RecurrenceDate.DescriptionStyleHint
- uid: SuperOffice.CRM.Services.RecurrenceDate.Tooltip*
  commentId: Overload:SuperOffice.CRM.Services.RecurrenceDate.Tooltip
  isExternal: true
  name: Tooltip
  nameWithType: RecurrenceDate.Tooltip
  fullName: SuperOffice.CRM.Services.RecurrenceDate.Tooltip
