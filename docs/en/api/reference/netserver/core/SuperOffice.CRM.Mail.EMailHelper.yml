### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Mail.EMailHelper
  commentId: T:SuperOffice.CRM.Mail.EMailHelper
  id: EMailHelper
  parent: SuperOffice.CRM.Mail
  children:
  - SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet(System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope},System.Int32,System.Int32,System.Boolean)
  - SuperOffice.CRM.Mail.EMailHelper.GetMissingIds(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope},SuperOffice.CRM.Mail.MailEnvelope[])
  - SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody(System.String)
  - SuperOffice.CRM.Mail.EMailHelper.GetSortString(SuperOffice.CRM.Mail.MailSortCriterion,SuperOffice.CRM.Mail.MailEnvelope)
  - SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  - SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  - SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.Int32[])
  - SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.String,System.Boolean)
  - SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(SuperOffice.CRM.Mail.MailItem)
  - SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress})
  langs:
  - csharp
  - vb
  name: EMailHelper
  nameWithType: EMailHelper
  fullName: SuperOffice.CRM.Mail.EMailHelper
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nHelper class for mail tasks\n"
  syntax:
    content: public static class EMailHelper
    content.vb: Public Module EMailHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet(System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope},System.Int32,System.Int32,System.Boolean)
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet(System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope},System.Int32,System.Int32,System.Boolean)
  id: GetEnvelopeSet(System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope},System.Int32,System.Int32,System.Boolean)
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: GetEnvelopeSet(SortedDictionary<String, MailEnvelope>, Int32, Int32, Boolean)
  nameWithType: EMailHelper.GetEnvelopeSet(SortedDictionary<String, MailEnvelope>, Int32, Int32, Boolean)
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet(System.Collections.Generic.SortedDictionary<System.String, SuperOffice.CRM.Mail.MailEnvelope>, System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nGiven a sorted list of MailEnvelopes, retrieve a specific set\n"
  syntax:
    content: public static List<MailEnvelope> GetEnvelopeSet(SortedDictionary<string, MailEnvelope> sortedEnvelopes, int from, int to, bool reverse)
    parameters:
    - id: sortedEnvelopes
      type: System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope}
      description: Source list to retrieve items from
    - id: from
      type: System.Int32
      description: Retrieve items from this index
    - id: to
      type: System.Int32
      description: Retrieve items to this index
    - id: reverse
      type: System.Boolean
      description: If true, retrieve items starting from the end of the list
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope}
      description: List of MailEnvelopes as specified by input parameters
    content.vb: Public Shared Function GetEnvelopeSet(sortedEnvelopes As SortedDictionary(Of String, MailEnvelope), from As Integer, to As Integer, reverse As Boolean) As List(Of MailEnvelope)
  overload: SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet*
  nameWithType.vb: EMailHelper.GetEnvelopeSet(SortedDictionary(Of String, MailEnvelope), Int32, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet(System.Collections.Generic.SortedDictionary(Of System.String, SuperOffice.CRM.Mail.MailEnvelope), System.Int32, System.Int32, System.Boolean)
  name.vb: GetEnvelopeSet(SortedDictionary(Of String, MailEnvelope), Int32, Int32, Boolean)
- uid: SuperOffice.CRM.Mail.EMailHelper.GetMissingIds(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope},SuperOffice.CRM.Mail.MailEnvelope[])
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.GetMissingIds(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope},SuperOffice.CRM.Mail.MailEnvelope[])
  id: GetMissingIds(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope},SuperOffice.CRM.Mail.MailEnvelope[])
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: GetMissingIds(List<MailEnvelope>, MailEnvelope[])
  nameWithType: EMailHelper.GetMissingIds(List<MailEnvelope>, MailEnvelope[])
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetMissingIds(System.Collections.Generic.List<SuperOffice.CRM.Mail.MailEnvelope>, SuperOffice.CRM.Mail.MailEnvelope[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nFind all items that exist in first set, and not in second set\n"
  syntax:
    content: public static List<int> GetMissingIds(List<MailEnvelope> first, MailEnvelope[] second)
    parameters:
    - id: first
      type: System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope}
      description: First set of MailEnvelope items
    - id: second
      type: SuperOffice.CRM.Mail.MailEnvelope[]
      description: Second set of MailEnvelope items
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: List of MailEnvelope.ServerId
    content.vb: Public Shared Function GetMissingIds(first As List(Of MailEnvelope), second As MailEnvelope()) As List(Of Integer)
  overload: SuperOffice.CRM.Mail.EMailHelper.GetMissingIds*
  nameWithType.vb: EMailHelper.GetMissingIds(List(Of MailEnvelope), MailEnvelope())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Mail.EMailHelper.GetMissingIds(System.Collections.Generic.List(Of SuperOffice.CRM.Mail.MailEnvelope), SuperOffice.CRM.Mail.MailEnvelope())
  name.vb: GetMissingIds(List(Of MailEnvelope), MailEnvelope())
- uid: SuperOffice.CRM.Mail.EMailHelper.GetSortString(SuperOffice.CRM.Mail.MailSortCriterion,SuperOffice.CRM.Mail.MailEnvelope)
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.GetSortString(SuperOffice.CRM.Mail.MailSortCriterion,SuperOffice.CRM.Mail.MailEnvelope)
  id: GetSortString(SuperOffice.CRM.Mail.MailSortCriterion,SuperOffice.CRM.Mail.MailEnvelope)
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: GetSortString(MailSortCriterion, MailEnvelope)
  nameWithType: EMailHelper.GetSortString(MailSortCriterion, MailEnvelope)
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetSortString(SuperOffice.CRM.Mail.MailSortCriterion, SuperOffice.CRM.Mail.MailEnvelope)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nBased on a sort order, find and format the proper value of MailEnvelope\n"
  syntax:
    content: public static string GetSortString(MailSortCriterion sortOrder, MailEnvelope env)
    parameters:
    - id: sortOrder
      type: SuperOffice.CRM.Mail.MailSortCriterion
      description: What field to use for sorting
    - id: env
      type: SuperOffice.CRM.Mail.MailEnvelope
      description: The envelope instance to get data from
    return:
      type: System.String
      description: Formatted string that may be used for sorting a set of MailEnvelopes
    content.vb: Public Shared Function GetSortString(sortOrder As MailSortCriterion, env As MailEnvelope) As String
  overload: SuperOffice.CRM.Mail.EMailHelper.GetSortString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  id: PopulateEnvelopesCompanyPersonInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: PopulateEnvelopesCompanyPersonInfo(MailEnvelope[])
  nameWithType: EMailHelper.PopulateEnvelopesCompanyPersonInfo(MailEnvelope[])
  fullName: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nLoop through envelopes and find companies and persons from SuperOffice that match \nthe e-mails in sender properties (From address) of the envelope\n"
  syntax:
    content: public static void PopulateEnvelopesCompanyPersonInfo(MailEnvelope[] envelopes)
    parameters:
    - id: envelopes
      type: SuperOffice.CRM.Mail.MailEnvelope[]
      description: Envelopes to populate
    content.vb: Public Shared Sub PopulateEnvelopesCompanyPersonInfo(envelopes As MailEnvelope())
  overload: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo*
  nameWithType.vb: EMailHelper.PopulateEnvelopesCompanyPersonInfo(MailEnvelope())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo(SuperOffice.CRM.Mail.MailEnvelope())
  name.vb: PopulateEnvelopesCompanyPersonInfo(MailEnvelope())
- uid: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  id: PopulateEnvelopesArchivedInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: PopulateEnvelopesArchivedInfo(MailEnvelope[])
  nameWithType: EMailHelper.PopulateEnvelopesArchivedInfo(MailEnvelope[])
  fullName: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo(SuperOffice.CRM.Mail.MailEnvelope[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nLoop through envelopes and find connections to archived activities/documents\n"
  syntax:
    content: public static void PopulateEnvelopesArchivedInfo(MailEnvelope[] envelopes)
    parameters:
    - id: envelopes
      type: SuperOffice.CRM.Mail.MailEnvelope[]
      description: Envelopes to populate
    content.vb: Public Shared Sub PopulateEnvelopesArchivedInfo(envelopes As MailEnvelope())
  overload: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo*
  nameWithType.vb: EMailHelper.PopulateEnvelopesArchivedInfo(MailEnvelope())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo(SuperOffice.CRM.Mail.MailEnvelope())
  name.vb: PopulateEnvelopesArchivedInfo(MailEnvelope())
- uid: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.String,System.Boolean)
  id: ResolveAddress(System.String,System.Boolean)
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: ResolveAddress(String, Boolean)
  nameWithType: EMailHelper.ResolveAddress(String, Boolean)
  fullName: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.String, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nSearch database for a single e-mail address, and return list with matched data\n"
  syntax:
    content: public static MailAddress[] ResolveAddress(string address, bool onlyEmail = false)
    parameters:
    - id: address
      type: System.String
      description: Address to look for
    - id: onlyEmail
      type: System.Boolean
      description: Bool we only want to search for EmailType.Email
    return:
      type: SuperOffice.CRM.Mail.MailAddress[]
      description: List of MailAddress instances with matched data
    content.vb: Public Shared Function ResolveAddress(address As String, onlyEmail As Boolean = False) As MailAddress()
  overload: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.Int32[])
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.Int32[])
  id: ResolveAddress(System.Int32[])
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: ResolveAddress(Int32[])
  nameWithType: EMailHelper.ResolveAddress(Int32[])
  fullName: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.Int32[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nSearch database for one or more e-mail addresses by id, and return list with matched data\n"
  syntax:
    content: public static MailAddress[] ResolveAddress(int[] emailIds)
    parameters:
    - id: emailIds
      type: System.Int32[]
    return:
      type: SuperOffice.CRM.Mail.MailAddress[]
      description: List of MailAddress instances with matched data
    content.vb: Public Shared Function ResolveAddress(emailIds As Integer()) As MailAddress()
  overload: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress*
  nameWithType.vb: EMailHelper.ResolveAddress(Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress(System.Int32())
  name.vb: ResolveAddress(Int32())
- uid: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(SuperOffice.CRM.Mail.MailItem)
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(SuperOffice.CRM.Mail.MailItem)
  id: ResolveAddresses(SuperOffice.CRM.Mail.MailItem)
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: ResolveAddresses(MailItem)
  nameWithType: EMailHelper.ResolveAddresses(MailItem)
  fullName: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(SuperOffice.CRM.Mail.MailItem)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nSearch database for all addresses in the provided set of MailAddress instances\nLimit each query to kMaxQueryInCount in parameters\n"
  syntax:
    content: public static void ResolveAddresses(MailItem mailItem)
    parameters:
    - id: mailItem
      type: SuperOffice.CRM.Mail.MailItem
      description: MailItem whose addresses we want to resolve.
    content.vb: Public Shared Sub ResolveAddresses(mailItem As MailItem)
  overload: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress})
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress})
  id: ResolveAddresses(System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress})
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: ResolveAddresses(List<MailAddress>)
  nameWithType: EMailHelper.ResolveAddresses(List<MailAddress>)
  fullName: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(System.Collections.Generic.List<SuperOffice.CRM.Mail.MailAddress>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nSearch database for all addresses in the provided set of MailAddress instances\nLimit each query to kMaxQueryInCount in parameters\n"
  syntax:
    content: public static void ResolveAddresses(List<MailAddress> addressObjects)
    parameters:
    - id: addressObjects
      type: System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress}
      description: List of MailAddress instances. MailAddress.Address property need to be populated in advance.
    content.vb: Public Shared Sub ResolveAddresses(addressObjects As List(Of MailAddress))
  overload: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses*
  nameWithType.vb: EMailHelper.ResolveAddresses(List(Of MailAddress))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses(System.Collections.Generic.List(Of SuperOffice.CRM.Mail.MailAddress))
  name.vb: ResolveAddresses(List(Of MailAddress))
- uid: SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody(System.String)
  commentId: M:SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody(System.String)
  id: GetPlainHTMLBody(System.String)
  parent: SuperOffice.CRM.Mail.EMailHelper
  langs:
  - csharp
  - vb
  name: GetPlainHTMLBody(String)
  nameWithType: EMailHelper.GetPlainHTMLBody(String)
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Mail
  summary: "\nRetrieve plain text version of a html source\n"
  syntax:
    content: public static string GetPlainHTMLBody(string source)
    parameters:
    - id: source
      type: System.String
      description: HTML to convert to plain text
    return:
      type: System.String
      description: Plain text version of the provided html
    content.vb: Public Shared Function GetPlainHTMLBody(source As String) As String
  overload: SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.CRM.Mail
  commentId: N:SuperOffice.CRM.Mail
  isExternal: true
  name: SuperOffice.CRM.Mail
  nameWithType: SuperOffice.CRM.Mail
  fullName: SuperOffice.CRM.Mail
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet
  isExternal: true
  name: GetEnvelopeSet
  nameWithType: EMailHelper.GetEnvelopeSet
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetEnvelopeSet
- uid: System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope}
  commentId: '!:System.Collections.Generic.SortedDictionary{System.String,SuperOffice.CRM.Mail.MailEnvelope}'
  definition: System.Collections.Generic.SortedDictionary`2
  name: SortedDictionary<String, MailEnvelope>
  nameWithType: SortedDictionary<String, MailEnvelope>
  fullName: System.Collections.Generic.SortedDictionary<System.String, SuperOffice.CRM.Mail.MailEnvelope>
  nameWithType.vb: SortedDictionary(Of String, MailEnvelope)
  fullName.vb: System.Collections.Generic.SortedDictionary(Of System.String, SuperOffice.CRM.Mail.MailEnvelope)
  name.vb: SortedDictionary(Of String, MailEnvelope)
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    nameWithType: SortedDictionary
    fullName: System.Collections.Generic.SortedDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Mail.MailEnvelope
    name: MailEnvelope
    nameWithType: MailEnvelope
    fullName: SuperOffice.CRM.Mail.MailEnvelope
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    nameWithType: SortedDictionary
    fullName: System.Collections.Generic.SortedDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Mail.MailEnvelope
    name: MailEnvelope
    nameWithType: MailEnvelope
    fullName: SuperOffice.CRM.Mail.MailEnvelope
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.Mail.MailEnvelope}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MailEnvelope>
  nameWithType: List<MailEnvelope>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Mail.MailEnvelope>
  nameWithType.vb: List(Of MailEnvelope)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Mail.MailEnvelope)
  name.vb: List(Of MailEnvelope)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Mail.MailEnvelope
    name: MailEnvelope
    nameWithType: MailEnvelope
    fullName: SuperOffice.CRM.Mail.MailEnvelope
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Mail.MailEnvelope
    name: MailEnvelope
    nameWithType: MailEnvelope
    fullName: SuperOffice.CRM.Mail.MailEnvelope
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedDictionary`2
  commentId: '!:System.Collections.Generic.SortedDictionary`2'
  isExternal: true
  name: SortedDictionary<, >
  nameWithType: SortedDictionary<, >
  fullName: System.Collections.Generic.SortedDictionary<, >
  nameWithType.vb: SortedDictionary(Of , )
  fullName.vb: System.Collections.Generic.SortedDictionary(Of , )
  name.vb: SortedDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    nameWithType: SortedDictionary
    fullName: System.Collections.Generic.SortedDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    nameWithType: SortedDictionary
    fullName: System.Collections.Generic.SortedDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.Mail.EMailHelper.GetMissingIds*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.GetMissingIds
  isExternal: true
  name: GetMissingIds
  nameWithType: EMailHelper.GetMissingIds
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetMissingIds
- uid: SuperOffice.CRM.Mail.MailEnvelope[]
  isExternal: true
  name: MailEnvelope[]
  nameWithType: MailEnvelope[]
  fullName: SuperOffice.CRM.Mail.MailEnvelope[]
  nameWithType.vb: MailEnvelope()
  fullName.vb: SuperOffice.CRM.Mail.MailEnvelope()
  name.vb: MailEnvelope()
  spec.csharp:
  - uid: SuperOffice.CRM.Mail.MailEnvelope
    name: MailEnvelope
    nameWithType: MailEnvelope
    fullName: SuperOffice.CRM.Mail.MailEnvelope
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Mail.MailEnvelope
    name: MailEnvelope
    nameWithType: MailEnvelope
    fullName: SuperOffice.CRM.Mail.MailEnvelope
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Mail.EMailHelper.GetSortString*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.GetSortString
  isExternal: true
  name: GetSortString
  nameWithType: EMailHelper.GetSortString
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetSortString
- uid: SuperOffice.CRM.Mail.MailSortCriterion
  isExternal: true
  name: MailSortCriterion
  nameWithType: MailSortCriterion
  fullName: SuperOffice.CRM.Mail.MailSortCriterion
- uid: SuperOffice.CRM.Mail.MailEnvelope
  isExternal: true
  name: MailEnvelope
  nameWithType: MailEnvelope
  fullName: SuperOffice.CRM.Mail.MailEnvelope
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo
  isExternal: true
  name: PopulateEnvelopesCompanyPersonInfo
  nameWithType: EMailHelper.PopulateEnvelopesCompanyPersonInfo
  fullName: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesCompanyPersonInfo
- uid: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo
  isExternal: true
  name: PopulateEnvelopesArchivedInfo
  nameWithType: EMailHelper.PopulateEnvelopesArchivedInfo
  fullName: SuperOffice.CRM.Mail.EMailHelper.PopulateEnvelopesArchivedInfo
- uid: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.ResolveAddress
  isExternal: true
  name: ResolveAddress
  nameWithType: EMailHelper.ResolveAddress
  fullName: SuperOffice.CRM.Mail.EMailHelper.ResolveAddress
- uid: SuperOffice.CRM.Mail.MailAddress[]
  isExternal: true
  name: MailAddress[]
  nameWithType: MailAddress[]
  fullName: SuperOffice.CRM.Mail.MailAddress[]
  nameWithType.vb: MailAddress()
  fullName.vb: SuperOffice.CRM.Mail.MailAddress()
  name.vb: MailAddress()
  spec.csharp:
  - uid: SuperOffice.CRM.Mail.MailAddress
    name: MailAddress
    nameWithType: MailAddress
    fullName: SuperOffice.CRM.Mail.MailAddress
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Mail.MailAddress
    name: MailAddress
    nameWithType: MailAddress
    fullName: SuperOffice.CRM.Mail.MailAddress
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses
  isExternal: true
  name: ResolveAddresses
  nameWithType: EMailHelper.ResolveAddresses
  fullName: SuperOffice.CRM.Mail.EMailHelper.ResolveAddresses
- uid: SuperOffice.CRM.Mail.MailItem
  isExternal: true
  name: MailItem
  nameWithType: MailItem
  fullName: SuperOffice.CRM.Mail.MailItem
- uid: System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.Mail.MailAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MailAddress>
  nameWithType: List<MailAddress>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Mail.MailAddress>
  nameWithType.vb: List(Of MailAddress)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Mail.MailAddress)
  name.vb: List(Of MailAddress)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Mail.MailAddress
    name: MailAddress
    nameWithType: MailAddress
    fullName: SuperOffice.CRM.Mail.MailAddress
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Mail.MailAddress
    name: MailAddress
    nameWithType: MailAddress
    fullName: SuperOffice.CRM.Mail.MailAddress
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody*
  commentId: Overload:SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody
  isExternal: true
  name: GetPlainHTMLBody
  nameWithType: EMailHelper.GetPlainHTMLBody
  fullName: SuperOffice.CRM.Mail.EMailHelper.GetPlainHTMLBody
