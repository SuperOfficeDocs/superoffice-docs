### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.ExpiringDictionary`2
  commentId: T:SuperOffice.Util.ExpiringDictionary`2
  id: ExpiringDictionary`2
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.ExpiringDictionary`2.#ctor
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  - SuperOffice.Util.ExpiringDictionary`2.Add(`0,`1)
  - SuperOffice.Util.ExpiringDictionary`2.Clear
  - SuperOffice.Util.ExpiringDictionary`2.Comparer
  - SuperOffice.Util.ExpiringDictionary`2.ContainsKey(`0)
  - SuperOffice.Util.ExpiringDictionary`2.Count
  - SuperOffice.Util.ExpiringDictionary`2.Dispose
  - SuperOffice.Util.ExpiringDictionary`2.Finalize
  - SuperOffice.Util.ExpiringDictionary`2.Item(`0)
  - SuperOffice.Util.ExpiringDictionary`2.Remove(`0)
  - SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  - SuperOffice.Util.ExpiringDictionary`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  - vb
  name: ExpiringDictionary<TKey, TValue>
  nameWithType: ExpiringDictionary<TKey, TValue>
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nRepresents a collection of keys and values, where each element will expire and be automatically removed according to the properties &quot;SlidingExpiration&quot; and &quot;AbsoluteExpiration&quot;\n"
  remarks: "\nThe ExpiringDictionary generic class provides a mapping from a set of keys to a set of values. Each addition to the ExpiringDictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the ExpiringDictionary class is implemented with an internal Dictionary witch is implemented as a hash table.\n<code>Note</code>  \nThe speed of retrieval depends on the quality of the hashing algorithm of the type specified for TKey. \nAs long as an object is used as a key in the ExpiringDictionary, it must not change in any way that affects its hash value. Every key in an ExpiringDictionary must be unique according to the ExpiringDictionary&apos;s equality comparer. A key cannot be a null reference, but a value can be, if the value type TValue is a reference type.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. You can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter; if you do not specify an implementation, the default generic equality comparer EqualityComparer.Default is used. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.\nThe capacity of an ExpiringDictionary is the number of elements the ExpiringDictionary can hold. In this implementation, the default initial capacity for an ExpiringDictionary is 3; however, that default might change in future versions of the .NET Framework. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.\n"
  syntax:
    content: 'public class ExpiringDictionary<TKey, TValue> : IDisposable'
    typeParameters:
    - id: TKey
      description: The type of the keys in the ExpiringDictionary.
    - id: TValue
      description: The type of the values in the ExpiringDictionary
    content.vb: >-
      Public Class ExpiringDictionary(Of TKey, TValue)
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Util.ExpiringDictionary`2.EnumUtil.MapEnums``2
  - SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.ExpiringDictionary{{TKey},{TValue}})
  - SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Util.ExpiringDictionary`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue)
  name.vb: ExpiringDictionary(Of TKey, TValue)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary()
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the default equality comparer for the key type. \n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the default equality comparer.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary()
    content.vb: Public Sub New
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary()
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.TimeSpan)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the default equality comparer for the key type, and uses a specific sliding expiration.\n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the default equality comparer.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(TimeSpan slidingExpiration)
    parameters:
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(IEqualityComparer<TKey>)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(IEqualityComparer<TKey>)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the specified IEqualityComparer. \n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the specified comparer.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(IEqualityComparer<TKey> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ExpiringDictionary(IEqualityComparer(Of TKey))
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(IEqualityComparer<TKey>, TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(IEqualityComparer<TKey>, TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Collections.Generic.IEqualityComparer<TKey>, System.TimeSpan)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the specified IEqualityComparer, and uses a specific sliding expiration.\n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the specified comparer.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(IEqualityComparer<TKey> comparer, TimeSpan slidingExpiration)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey), slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(IEqualityComparer(Of TKey), TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.Collections.Generic.IEqualityComparer(Of TKey), System.TimeSpan)
  name.vb: ExpiringDictionary(IEqualityComparer(Of TKey), TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(Int32)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(Int32)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Int32)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type. \n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the default equality comparer.\nThe capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.\nIf the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    content.vb: Public Sub New(capacity As Integer)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.Int32)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.TimeSpan)
  id: '#ctor(System.Int32,System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(Int32, TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(Int32, TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Int32, System.TimeSpan)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type, and uses a specific sliding expiration.\n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the default equality comparer.\nThe capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.\nIf the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(int capacity, TimeSpan slidingExpiration)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(capacity As Integer, slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(Int32, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.Int32, System.TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(Int32, IEqualityComparer<TKey>)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(Int32, IEqualityComparer<TKey>)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the specified IEqualityComparer. \n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the specified comparer.\nThe capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.\nIf the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(int capacity, IEqualityComparer<TKey> comparer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of TKey))
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(Int32, IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ExpiringDictionary(Int32, IEqualityComparer(Of TKey))
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(Int32, IEqualityComparer<TKey>, TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(Int32, IEqualityComparer<TKey>, TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Int32, System.Collections.Generic.IEqualityComparer<TKey>, System.TimeSpan)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the specified IEqualityComparer, and uses a specific sliding expiration.\n"
  remarks: "\nEvery key in an ExpiringDictionary must be unique according to the specified comparer.\nThe capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.\nIf the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.\nExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.\nThis constructor is an O(1) operation.\n"
  syntax:
    content: public ExpiringDictionary(int capacity, IEqualityComparer<TKey> comparer, TimeSpan slidingExpiration)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of TKey), slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(Int32, IEqualityComparer(Of TKey), TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary(System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey), System.TimeSpan)
  name.vb: ExpiringDictionary(Int32, IEqualityComparer(Of TKey), TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.Add(`0,`1)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: ExpiringDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nAdds the specified key and value to the ExpiringDictionary. \n"
  remarks: "\nYou can also use the Item property to add new elements by setting the value of a key that does not exist in the ExpiringDictionary; for example, myExpiringDictionary[myKey] = myValue. However, if the specified key already exists in the ExpiringDictionary, setting the Item property overwrites the old value. In contrast, the Add method throws an exception if a value with the specified key already exists.\nIf the Count property value already equals the capacity, the capacity of the ExpiringDictionary is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.\nA key cannot be a null reference, but a value can be, if TValue is a reference type.\nIf Count is less than the capacity, this method approaches an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(n) operation, where n is Count.\n"
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be a null reference
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: SuperOffice.Util.ExpiringDictionary`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element with the same key already exists in the ExpiringDictionary.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Add(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: SuperOffice.Util.ExpiringDictionary`2.Clear
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Clear
  id: Clear
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ExpiringDictionary<TKey, TValue>.Clear()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nRemoves all keys and values from the ExpiringDictionary. \n"
  remarks: "\nThe Count property is set to 0, and references to other objects from elements of the collection are also released. The capacity remains unchanged.\nThis method is an O(n) operation, where n is Count.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: SuperOffice.Util.ExpiringDictionary`2.Clear*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Clear()
- uid: SuperOffice.Util.ExpiringDictionary`2.ContainsKey(`0)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: ExpiringDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nDetermines whether the ExpiringDictionary contains the specified key. \n"
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the ExpiringDictionary.
    return:
      type: System.Boolean
      description: true if the ExpiringDictionary contains an element with the specified key; otherwise, false.
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: SuperOffice.Util.ExpiringDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: SuperOffice.Util.ExpiringDictionary`2.Remove(`0)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: ExpiringDictionary<TKey, TValue>.Remove(TKey)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nRemoves the value with the specified key from the ExpiringDictionary. \n"
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the ExpiringDictionary.
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: SuperOffice.Util.ExpiringDictionary`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Remove(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Remove(TKey)
- uid: SuperOffice.Util.ExpiringDictionary`2.TryGetValue(`0,`1@)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: ExpiringDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGets the value associated with the specified key. \n"
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: <code>true</code> if the ExpiringDictionary contains an element with the specified key; otherwise, <code>false</code>.
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
  overload: SuperOffice.Util.ExpiringDictionary`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
- uid: SuperOffice.Util.ExpiringDictionary`2.Dispose
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Dispose
  id: Dispose
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ExpiringDictionary<TKey, TValue>.Dispose()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Dispose()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SuperOffice.Util.ExpiringDictionary`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Dispose()
- uid: SuperOffice.Util.ExpiringDictionary`2.Finalize
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Finalize
  id: Finalize
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: ExpiringDictionary<TKey, TValue>.Finalize()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Finalize()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: SuperOffice.Util.ExpiringDictionary`2.Finalize*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Finalize()
- uid: SuperOffice.Util.ExpiringDictionary`2.Comparer
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.Comparer
  id: Comparer
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: ExpiringDictionary<TKey, TValue>.Comparer
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Comparer
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGets the IEqualityComparer that is used to determine equality of keys for the ExpiringDictionary. \n"
  remarks: "\nExpiringDictionary requires an equality implementation to determine whether keys are equal. You can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter; if you do not specify one, the default generic equality comparer EqualityComparer.Default is used.\nGetting the value of this property is an O(1) operation.\n"
  syntax:
    content: public IEqualityComparer<TKey> Comparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\nThe IEqualityComparer generic interface implementation that is used to determine equality of keys for the current ExpiringDictionary and to provide hash values for the keys. \n"
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)
  overload: SuperOffice.Util.ExpiringDictionary`2.Comparer*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Comparer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Comparer
- uid: SuperOffice.Util.ExpiringDictionary`2.Count
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.Count
  id: Count
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ExpiringDictionary<TKey, TValue>.Count
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Count
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGets the number of key/value pairs contained in the ExpiringDictionary. \n"
  remarks: "\nCount also includes elements that has expired but is not yet removed by the timer function.\nThe capacity of an ExpiringDictionary is the number of elements that the ExpiringDictionary can store. The Count property is the number of elements that are actually in the ExpiringDictionary.\nThe capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.\nGetting the value of this property is an O(1) operation.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe number of key/value pairs contained in the ExpiringDictionary. \n"
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.Util.ExpiringDictionary`2.Count*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Count
- uid: SuperOffice.Util.ExpiringDictionary`2.Item(`0)
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.Item(`0)
  id: Item(`0)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: ExpiringDictionary<TKey, TValue>.Item[TKey]
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGets or sets the value associated with the specified key. \n"
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get or set.
    return:
      type: '{TValue}'
      description: The value associated with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException, and a set operation creates a new element with the specified key.
    content.vb: Public Property Item(key As TKey) As TValue
  overload: SuperOffice.Util.ExpiringDictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'key is a null reference '
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and key does not exist in the collection.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  id: SlidingExpiration
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: SlidingExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.SlidingExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.SlidingExpiration
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nThe interval between the time the element was last accessed and the time at which that element expires.\n"
  remarks: Setting this property to <code>TimeSpan.Zero</code> will prevent the ExpiringDictionary from using sliding expiration.
  syntax:
    content: public TimeSpan SlidingExpiration { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating how long an element can remain untouched before it is automatically removed from the ExpiringDictionary.
    content.vb: Public Property SlidingExpiration As TimeSpan
  overload: SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).SlidingExpiration
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).SlidingExpiration
- uid: SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  id: AbsoluteExpiration
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: AbsoluteExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nThe interval between the time the element was created and the time at which that element expires.\n"
  remarks: Setting this property to <code>TimeSpan.Zero</code> will prevent the ExpiringDictionary from using absolute expiration.
  syntax:
    content: public TimeSpan AbsoluteExpiration { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating how long an element can remain in the ExpiringDictionary before it is automatically removed.
    content.vb: Public Property AbsoluteExpiration As TimeSpan
  overload: SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ExpiringDictionary`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ExpiringDictionary<TKey, TValue>, To>()
  nameWithType: EnumUtil.MapEnums<ExpiringDictionary<TKey, TValue>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.ExpiringDictionary<TKey, TValue>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), To)()
  name.vb: MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ExpiringDictionary<TKey, TValue>, To>
    nameWithType: EnumUtil.MapEnums<ExpiringDictionary<TKey, TValue>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.ExpiringDictionary<TKey, TValue>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)
    nameWithType: EnumUtil.MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.ExpiringDictionary{{TKey},{TValue}})
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<ExpiringDictionary<TKey, TValue>>(ExpiringDictionary<TKey, TValue>)
  nameWithType: ObjectExtensions.AssignByReflection<ExpiringDictionary<TKey, TValue>>(ExpiringDictionary<TKey, TValue>)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.ExpiringDictionary<TKey, TValue>>(SuperOffice.Util.ExpiringDictionary<TKey, TValue>)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of ExpiringDictionary(Of TKey, TValue))(ExpiringDictionary(Of TKey, TValue))
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))(SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
  name.vb: AssignByReflection(Of ExpiringDictionary(Of TKey, TValue))(ExpiringDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<ExpiringDictionary<TKey, TValue>>
    nameWithType: ObjectExtensions.AssignByReflection<ExpiringDictionary<TKey, TValue>>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.ExpiringDictionary<TKey, TValue>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    nameWithType: ExpiringDictionary
    fullName: SuperOffice.Util.ExpiringDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of ExpiringDictionary(Of TKey, TValue))
    nameWithType: ObjectExtensions.AssignByReflection(Of ExpiringDictionary(Of TKey, TValue))
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    nameWithType: ExpiringDictionary
    fullName: SuperOffice.Util.ExpiringDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<ExpiringDictionary<TKey, TValue>>()
  nameWithType: ObjectExtensions.GraphCopy<ExpiringDictionary<TKey, TValue>>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.ExpiringDictionary<TKey, TValue>>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of ExpiringDictionary(Of TKey, TValue))()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))()
  name.vb: GraphCopy(Of ExpiringDictionary(Of TKey, TValue))()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<ExpiringDictionary<TKey, TValue>>
    nameWithType: ObjectExtensions.GraphCopy<ExpiringDictionary<TKey, TValue>>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.ExpiringDictionary<TKey, TValue>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of ExpiringDictionary(Of TKey, TValue))
    nameWithType: ObjectExtensions.GraphCopy(Of ExpiringDictionary(Of TKey, TValue))
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ExpiringDictionary`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ExpiringDictionary<TKey, TValue>, To>()
  nameWithType: Converters.MapEnums<ExpiringDictionary<TKey, TValue>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.ExpiringDictionary<TKey, TValue>, To>()
  nameWithType.vb: Converters.MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), To)()
  name.vb: MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ExpiringDictionary<TKey, TValue>, To>
    nameWithType: Converters.MapEnums<ExpiringDictionary<TKey, TValue>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.ExpiringDictionary<TKey, TValue>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)
    nameWithType: Converters.MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.#ctor
  isExternal: true
  name: ExpiringDictionary
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ExpiringDictionary
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ExpiringDictionary
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Util.ExpiringDictionary`2.Add*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Add
  isExternal: true
  name: Add
  nameWithType: ExpiringDictionary<TKey, TValue>.Add
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Add
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Add
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Add
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: SuperOffice.Util.ExpiringDictionary`2.Clear*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Clear
  isExternal: true
  name: Clear
  nameWithType: ExpiringDictionary<TKey, TValue>.Clear
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Clear
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Clear
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Clear
- uid: SuperOffice.Util.ExpiringDictionary`2.ContainsKey*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.ContainsKey
  isExternal: true
  name: ContainsKey
  nameWithType: ExpiringDictionary<TKey, TValue>.ContainsKey
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ContainsKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Util.ExpiringDictionary`2.Remove*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Remove
  isExternal: true
  name: Remove
  nameWithType: ExpiringDictionary<TKey, TValue>.Remove
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Remove
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Remove
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Remove
- uid: SuperOffice.Util.ExpiringDictionary`2.TryGetValue*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.TryGetValue
  isExternal: true
  name: TryGetValue
  nameWithType: ExpiringDictionary<TKey, TValue>.TryGetValue
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).TryGetValue
- uid: SuperOffice.Util.ExpiringDictionary`2.Dispose*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Dispose
  isExternal: true
  name: Dispose
  nameWithType: ExpiringDictionary<TKey, TValue>.Dispose
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Dispose
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Dispose
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ExpiringDictionary`2.Finalize*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Finalize
  isExternal: true
  name: Finalize
  nameWithType: ExpiringDictionary<TKey, TValue>.Finalize
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Finalize
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Finalize
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Finalize
- uid: SuperOffice.Util.ExpiringDictionary`2.Comparer*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Comparer
  isExternal: true
  name: Comparer
  nameWithType: ExpiringDictionary<TKey, TValue>.Comparer
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Comparer
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Comparer
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Comparer
- uid: SuperOffice.Util.ExpiringDictionary`2.Count*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Count
  isExternal: true
  name: Count
  nameWithType: ExpiringDictionary<TKey, TValue>.Count
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Count
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Count
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Count
- uid: SuperOffice.Util.ExpiringDictionary`2.Item*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Item
  isExternal: true
  name: Item
  nameWithType: ExpiringDictionary<TKey, TValue>.Item
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Item
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Item
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Item
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
- uid: SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  isExternal: true
  name: SlidingExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.SlidingExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.SlidingExpiration
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).SlidingExpiration
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).SlidingExpiration
- uid: SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  isExternal: true
  name: AbsoluteExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
