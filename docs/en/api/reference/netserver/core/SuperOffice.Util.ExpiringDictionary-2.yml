### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.ExpiringDictionary`2
  commentId: T:SuperOffice.Util.ExpiringDictionary`2
  id: ExpiringDictionary`2
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.ExpiringDictionary`2.#ctor
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.#ctor(System.TimeSpan)
  - SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  - SuperOffice.Util.ExpiringDictionary`2.Add(`0,`1)
  - SuperOffice.Util.ExpiringDictionary`2.Clear
  - SuperOffice.Util.ExpiringDictionary`2.Comparer
  - SuperOffice.Util.ExpiringDictionary`2.ContainsKey(`0)
  - SuperOffice.Util.ExpiringDictionary`2.Count
  - SuperOffice.Util.ExpiringDictionary`2.Dispose
  - SuperOffice.Util.ExpiringDictionary`2.Finalize
  - SuperOffice.Util.ExpiringDictionary`2.Item(`0)
  - SuperOffice.Util.ExpiringDictionary`2.Remove(`0)
  - SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  - SuperOffice.Util.ExpiringDictionary`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  - vb
  name: ExpiringDictionary<TKey, TValue>
  nameWithType: ExpiringDictionary<TKey, TValue>
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>
  type: Class
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Represents a collection of keys and values, where each element will expire and be automatically removed according to the properties "SlidingExpiration" and "AbsoluteExpiration"
  remarks: >-
    The ExpiringDictionary generic class provides a mapping from a set of keys to a set of values. Each addition to the ExpiringDictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the ExpiringDictionary class is implemented with an internal Dictionary witch is implemented as a hash table.

    <code>Note</code>  

    The speed of retrieval depends on the quality of the hashing algorithm of the type specified for TKey. 

    As long as an object is used as a key in the ExpiringDictionary, it must not change in any way that affects its hash value. Every key in an ExpiringDictionary must be unique according to the ExpiringDictionary's equality comparer. A key cannot be a null reference, but a value can be, if the value type TValue is a reference type.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. You can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter; if you do not specify an implementation, the default generic equality comparer EqualityComparer.Default is used. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.

    The capacity of an ExpiringDictionary is the number of elements the ExpiringDictionary can hold. In this implementation, the default initial capacity for an ExpiringDictionary is 3; however, that default might change in future versions of the .NET Framework. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.
  example: []
  syntax:
    content: 'public class ExpiringDictionary<TKey, TValue> : IDisposable'
    typeParameters:
    - id: TKey
      description: The type of the keys in the ExpiringDictionary.
    - id: TValue
      description: The type of the values in the ExpiringDictionary
    content.vb: Public Class ExpiringDictionary(Of TKey, TValue) Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Util.ExpiringDictionary`2.EnumUtil.MapEnums``2
  - SuperOffice.Util.ExpiringDictionary`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  - SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.ExpiringDictionary{{TKey},{TValue}})
  - SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue)
  name.vb: ExpiringDictionary(Of TKey, TValue)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary()
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary()
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the default equality comparer.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary()
    content.vb: Public Sub New()
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New()
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New()
  name.vb: New()
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.TimeSpan)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the default equality comparer for the key type, and uses a specific sliding expiration.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the default equality comparer.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(TimeSpan slidingExpiration)
    parameters:
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(TimeSpan)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(System.TimeSpan)
  name.vb: New(TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(IEqualityComparer<TKey>)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(IEqualityComparer<TKey>)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the specified IEqualityComparer.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the specified comparer.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(IEqualityComparer<TKey> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(IEqualityComparer(Of TKey))
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: New(IEqualityComparer(Of TKey))
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(IEqualityComparer<TKey>, TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(IEqualityComparer<TKey>, TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(System.Collections.Generic.IEqualityComparer<TKey>, System.TimeSpan)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the default initial capacity, and uses the specified IEqualityComparer, and uses a specific sliding expiration.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the specified comparer.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(IEqualityComparer<TKey> comparer, TimeSpan slidingExpiration)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey), slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(IEqualityComparer(Of TKey), TimeSpan)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(System.Collections.Generic.IEqualityComparer(Of TKey), System.TimeSpan)
  name.vb: New(IEqualityComparer(Of TKey), TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(int)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the default equality comparer.

    The capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.

    If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    content.vb: Public Sub New(capacity As Integer)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(Integer)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(Integer)
  name.vb: New(Integer)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.TimeSpan)
  id: '#ctor(System.Int32,System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(int, TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int, TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int, System.TimeSpan)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type, and uses a specific sliding expiration.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the default equality comparer.

    The capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.

    If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(int capacity, TimeSpan slidingExpiration)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(capacity As Integer, slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(Integer, TimeSpan)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(Integer, System.TimeSpan)
  name.vb: New(Integer, TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(int, IEqualityComparer<TKey>)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int, IEqualityComparer<TKey>)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the specified IEqualityComparer.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the specified comparer.

    The capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.

    If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(int capacity, IEqualityComparer<TKey> comparer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of TKey))
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(Integer, IEqualityComparer(Of TKey))
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(Integer, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: New(Integer, IEqualityComparer(Of TKey))
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.TimeSpan)'
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ExpiringDictionary(int, IEqualityComparer<TKey>, TimeSpan)
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int, IEqualityComparer<TKey>, TimeSpan)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary(int, System.Collections.Generic.IEqualityComparer<TKey>, System.TimeSpan)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Initializes a new instance of the ExpiringDictionary class that is empty, has the specified initial capacity, and uses the specified IEqualityComparer, and uses a specific sliding expiration.
  remarks: >-
    Every key in an ExpiringDictionary must be unique according to the specified comparer.

    The capacity of an ExpiringDictionary is the number of elements that can be added to the ExpiringDictionary before resizing is necessary. As elements are added to an ExpiringDictionary, the capacity is automatically increased as required by reallocating the internal array.

    If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the ExpiringDictionary.

    ExpiringDictionary requires an equality implementation to determine whether keys are equal. If comparer is a null reference, this constructor uses the default generic equality comparer, EqualityComparer.Default. If type TKey implements the System.IEquatable generic interface, the default equality comparer uses that implementation.

    This constructor is an O(1) operation.
  example: []
  syntax:
    content: public ExpiringDictionary(int capacity, IEqualityComparer<TKey> comparer, TimeSpan slidingExpiration)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the ExpiringDictionary can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer implementation to use when comparing keys, or a null reference to use the default EqualityComparer for the type of the key.
    - id: slidingExpiration
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating the period of sliding expiration
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of TKey), slidingExpiration As TimeSpan)
  overload: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: capacity is less than 0.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New(Integer, IEqualityComparer(Of TKey), TimeSpan)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New(Integer, System.Collections.Generic.IEqualityComparer(Of TKey), System.TimeSpan)
  name.vb: New(Integer, IEqualityComparer(Of TKey), TimeSpan)
- uid: SuperOffice.Util.ExpiringDictionary`2.Add(`0,`1)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: ExpiringDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Adds the specified key and value to the ExpiringDictionary.
  remarks: >-
    You can also use the Item property to add new elements by setting the value of a key that does not exist in the ExpiringDictionary; for example, myExpiringDictionary[myKey] = myValue. However, if the specified key already exists in the ExpiringDictionary, setting the Item property overwrites the old value. In contrast, the Add method throws an exception if a value with the specified key already exists.

    If the Count property value already equals the capacity, the capacity of the ExpiringDictionary is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.

    A key cannot be a null reference, but a value can be, if TValue is a reference type.

    If Count is less than the capacity, this method approaches an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(n) operation, where n is Count.
  example: []
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be a null reference
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: SuperOffice.Util.ExpiringDictionary`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element with the same key already exists in the ExpiringDictionary.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: SuperOffice.Util.ExpiringDictionary`2.Clear
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Clear
  id: Clear
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ExpiringDictionary<TKey, TValue>.Clear()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Clear()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Removes all keys and values from the ExpiringDictionary.
  remarks: >-
    The Count property is set to 0, and references to other objects from elements of the collection are also released. The capacity remains unchanged.

    This method is an O(n) operation, where n is Count.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: SuperOffice.Util.ExpiringDictionary`2.Clear*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Clear()
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Clear()
- uid: SuperOffice.Util.ExpiringDictionary`2.ContainsKey(`0)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: ExpiringDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Determines whether the ExpiringDictionary contains the specified key.
  example: []
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the ExpiringDictionary.
    return:
      type: System.Boolean
      description: true if the ExpiringDictionary contains an element with the specified key; otherwise, false.
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: SuperOffice.Util.ExpiringDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: SuperOffice.Util.ExpiringDictionary`2.Remove(`0)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: ExpiringDictionary<TKey, TValue>.Remove(TKey)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Removes the value with the specified key from the ExpiringDictionary.
  example: []
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the ExpiringDictionary.
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: SuperOffice.Util.ExpiringDictionary`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Remove(TKey)
- uid: SuperOffice.Util.ExpiringDictionary`2.TryGetValue(`0,`1@)
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: ExpiringDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Gets the value associated with the specified key.
  example: []
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: <code>true</code> if the ExpiringDictionary contains an element with the specified key; otherwise, <code>false</code>.
    content.vb: Public Function TryGetValue(key As TKey, value As TValue) As Boolean
  overload: SuperOffice.Util.ExpiringDictionary`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
- uid: SuperOffice.Util.ExpiringDictionary`2.Dispose
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Dispose
  id: Dispose
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ExpiringDictionary<TKey, TValue>.Dispose()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Dispose()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: SuperOffice.Util.ExpiringDictionary`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Dispose()
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Dispose()
- uid: SuperOffice.Util.ExpiringDictionary`2.Finalize
  commentId: M:SuperOffice.Util.ExpiringDictionary`2.Finalize
  id: Finalize
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: ~ExpiringDictionary()
  nameWithType: ExpiringDictionary<TKey, TValue>.~ExpiringDictionary()
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.~ExpiringDictionary()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: protected ~ExpiringDictionary()
    content.vb: 'Protected '
  overload: SuperOffice.Util.ExpiringDictionary`2.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: SuperOffice.Util.ExpiringDictionary`2.Comparer
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.Comparer
  id: Comparer
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: ExpiringDictionary<TKey, TValue>.Comparer
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Comparer
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Gets the IEqualityComparer that is used to determine equality of keys for the ExpiringDictionary.
  remarks: >-
    ExpiringDictionary requires an equality implementation to determine whether keys are equal. You can specify an implementation of the IEqualityComparer generic interface by using a constructor that accepts a comparer parameter; if you do not specify one, the default generic equality comparer EqualityComparer.Default is used.

    Getting the value of this property is an O(1) operation.
  example: []
  syntax:
    content: public IEqualityComparer<TKey> Comparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The IEqualityComparer generic interface implementation that is used to determine equality of keys for the current ExpiringDictionary and to provide hash values for the keys.
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)
  overload: SuperOffice.Util.ExpiringDictionary`2.Comparer*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Comparer
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Comparer
- uid: SuperOffice.Util.ExpiringDictionary`2.Count
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.Count
  id: Count
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ExpiringDictionary<TKey, TValue>.Count
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Count
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Gets the number of key/value pairs contained in the ExpiringDictionary.
  remarks: >-
    Count also includes elements that has expired but is not yet removed by the timer function.

    The capacity of an ExpiringDictionary is the number of elements that the ExpiringDictionary can store. The Count property is the number of elements that are actually in the ExpiringDictionary.

    The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.

    Getting the value of this property is an O(1) operation.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the ExpiringDictionary.
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.Util.ExpiringDictionary`2.Count*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Count
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Count
- uid: SuperOffice.Util.ExpiringDictionary`2.Item(`0)
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.Item(`0)
  id: Item(`0)
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: ExpiringDictionary<TKey, TValue>.this[TKey]
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.this[TKey]
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Gets or sets the value associated with the specified key.
  example: []
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get or set.
    return:
      type: '{TValue}'
      description: The value associated with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException, and a set operation creates a new element with the specified key.
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: SuperOffice.Util.ExpiringDictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: key is a null reference
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and key does not exist in the collection.
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  id: SlidingExpiration
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: SlidingExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.SlidingExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.SlidingExpiration
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: The interval between the time the element was last accessed and the time at which that element expires.
  remarks: Setting this property to <code>TimeSpan.Zero</code> will prevent the ExpiringDictionary from using sliding expiration.
  example: []
  syntax:
    content: public TimeSpan SlidingExpiration { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating how long an element can remain untouched before it is automatically removed from the ExpiringDictionary.
    content.vb: Public Property SlidingExpiration As TimeSpan
  overload: SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).SlidingExpiration
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).SlidingExpiration
- uid: SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  commentId: P:SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  id: AbsoluteExpiration
  parent: SuperOffice.Util.ExpiringDictionary`2
  langs:
  - csharp
  - vb
  name: AbsoluteExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: The interval between the time the element was created and the time at which that element expires.
  remarks: Setting this property to <code>TimeSpan.Zero</code> will prevent the ExpiringDictionary from using absolute expiration.
  example: []
  syntax:
    content: public TimeSpan AbsoluteExpiration { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: A <code>TimeSpan</code> indicating how long an element can remain in the ExpiringDictionary before it is automatically removed.
    content.vb: Public Property AbsoluteExpiration As TimeSpan
  overload: SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration*
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.Util.ExpiringDictionary`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<ExpiringDictionary<TKey, TValue>, To>(ExpiringDictionary<TKey, TValue>)
  nameWithType: EnumUtil.MapEnums<ExpiringDictionary<TKey, TValue>, To>(ExpiringDictionary<TKey, TValue>)
  fullName: EnumUtil.MapEnums<SuperOffice.Util.ExpiringDictionary<TKey, TValue>, To>(SuperOffice.Util.ExpiringDictionary<TKey, TValue>)
  nameWithType.vb: EnumUtil.MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)(ExpiringDictionary(Of TKey, TValue))
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), To)(SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
  name.vb: MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)(ExpiringDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: SuperOffice.Util.ExpiringDictionary`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<ExpiringDictionary<TKey, TValue>, To>(ExpiringDictionary<TKey, TValue>)
  nameWithType: Converters.MapEnums<ExpiringDictionary<TKey, TValue>, To>(ExpiringDictionary<TKey, TValue>)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.ExpiringDictionary<TKey, TValue>, To>(SuperOffice.Util.ExpiringDictionary<TKey, TValue>)
  nameWithType.vb: Converters.MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)(ExpiringDictionary(Of TKey, TValue))
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), To)(SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
  name.vb: MapEnums(Of ExpiringDictionary(Of TKey, TValue), To)(ExpiringDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.ExpiringDictionary{{TKey},{TValue}})
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<ExpiringDictionary<TKey, TValue>>(ExpiringDictionary<TKey, TValue>, ExpiringDictionary<TKey, TValue>)
  nameWithType: ObjectExtensions.AssignByReflection<ExpiringDictionary<TKey, TValue>>(ExpiringDictionary<TKey, TValue>, ExpiringDictionary<TKey, TValue>)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.ExpiringDictionary<TKey, TValue>>(SuperOffice.Util.ExpiringDictionary<TKey, TValue>, SuperOffice.Util.ExpiringDictionary<TKey, TValue>)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of ExpiringDictionary(Of TKey, TValue))(ExpiringDictionary(Of TKey, TValue), ExpiringDictionary(Of TKey, TValue))
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))(SuperOffice.Util.ExpiringDictionary(Of TKey, TValue), SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
  name.vb: AssignByReflection(Of ExpiringDictionary(Of TKey, TValue))(ExpiringDictionary(Of TKey, TValue), ExpiringDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.ExpiringDictionary{`0,`1},SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.ExpiringDictionary{`0,`1},SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: SuperOffice.Util.ExpiringDictionary`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<ExpiringDictionary<TKey, TValue>>(ExpiringDictionary<TKey, TValue>)
  nameWithType: ObjectExtensions.GraphCopy<ExpiringDictionary<TKey, TValue>>(ExpiringDictionary<TKey, TValue>)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.ExpiringDictionary<TKey, TValue>>(SuperOffice.Util.ExpiringDictionary<TKey, TValue>)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of ExpiringDictionary(Of TKey, TValue))(ExpiringDictionary(Of TKey, TValue))
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))(SuperOffice.Util.ExpiringDictionary(Of TKey, TValue))
  name.vb: GraphCopy(Of ExpiringDictionary(Of TKey, TValue))(ExpiringDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.Util.ExpiringDictionary{`0,`1})
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - uid: SuperOffice.Util.ExpiringDictionary`2
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Util.ExpiringDictionary`2.#ctor*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.#ctor
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2__ctor
  name: ExpiringDictionary
  nameWithType: ExpiringDictionary<TKey, TValue>.ExpiringDictionary
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ExpiringDictionary
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).New
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).New
  name.vb: New
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: SuperOffice.Util.ExpiringDictionary`2.Add*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Add
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Add__0__1_
  name: Add
  nameWithType: ExpiringDictionary<TKey, TValue>.Add
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Add
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Add
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Add
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: SuperOffice.Util.ExpiringDictionary`2.Clear*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Clear
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Clear
  name: Clear
  nameWithType: ExpiringDictionary<TKey, TValue>.Clear
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Clear
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Clear
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Clear
- uid: SuperOffice.Util.ExpiringDictionary`2.ContainsKey*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.ContainsKey
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: ExpiringDictionary<TKey, TValue>.ContainsKey
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).ContainsKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.Util.ExpiringDictionary`2.Remove*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Remove
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Remove__0_
  name: Remove
  nameWithType: ExpiringDictionary<TKey, TValue>.Remove
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Remove
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Remove
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Remove
- uid: SuperOffice.Util.ExpiringDictionary`2.TryGetValue*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.TryGetValue
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_TryGetValue__0__1__
  name: TryGetValue
  nameWithType: ExpiringDictionary<TKey, TValue>.TryGetValue
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).TryGetValue
- uid: SuperOffice.Util.ExpiringDictionary`2.Dispose*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Dispose
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Dispose
  name: Dispose
  nameWithType: ExpiringDictionary<TKey, TValue>.Dispose
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Dispose
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Dispose
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: SuperOffice.Util.ExpiringDictionary`2.Finalize*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Finalize
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Finalize
  name: ~ExpiringDictionary
  nameWithType: ExpiringDictionary<TKey, TValue>.~ExpiringDictionary
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.~ExpiringDictionary
  spec.csharp:
  - name: "~"
  - uid: SuperOffice.Util.ExpiringDictionary`2.Finalize*
    name: ExpiringDictionary
    isExternal: true
    href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Finalize
- uid: SuperOffice.Util.ExpiringDictionary`2.Comparer*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Comparer
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Comparer
  name: Comparer
  nameWithType: ExpiringDictionary<TKey, TValue>.Comparer
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Comparer
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Comparer
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Comparer
- uid: SuperOffice.Util.ExpiringDictionary`2.Count*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Count
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Count
  name: Count
  nameWithType: ExpiringDictionary<TKey, TValue>.Count
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.Count
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).Count
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: SuperOffice.Util.ExpiringDictionary`2.Item*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.Item
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_Item__0_
  name: this
  nameWithType: ExpiringDictionary<TKey, TValue>.this
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.this
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).this[]
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.SlidingExpiration
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_SlidingExpiration
  name: SlidingExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.SlidingExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.SlidingExpiration
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).SlidingExpiration
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).SlidingExpiration
- uid: SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration*
  commentId: Overload:SuperOffice.Util.ExpiringDictionary`2.AbsoluteExpiration
  isExternal: true
  href: SuperOffice.Util.ExpiringDictionary-2.html#SuperOffice_Util_ExpiringDictionary_2_AbsoluteExpiration
  name: AbsoluteExpiration
  nameWithType: ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  fullName: SuperOffice.Util.ExpiringDictionary<TKey, TValue>.AbsoluteExpiration
  nameWithType.vb: ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
  fullName.vb: SuperOffice.Util.ExpiringDictionary(Of TKey, TValue).AbsoluteExpiration
