### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.CredentialControlType
  commentId: T:SuperOffice.Data.CredentialControlType
  id: CredentialControlType
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.CredentialControlType.Edit
  - SuperOffice.Data.CredentialControlType.Hidden
  - SuperOffice.Data.CredentialControlType.Link
  - SuperOffice.Data.CredentialControlType.Password
  - SuperOffice.Data.CredentialControlType.Static
  langs:
  - csharp
  - vb
  name: CredentialControlType
  nameWithType: CredentialControlType
  fullName: SuperOffice.Data.CredentialControlType
  type: Enum
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nTypes of control used with user administration work with credentials\n"
  syntax:
    content: public enum CredentialControlType
    content.vb: Public Enum CredentialControlType
  extensionMethods:
  - SuperOffice.Data.CredentialControlType.EnumUtil.MapEnums``2
  - SuperOffice.Data.CredentialControlType.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.CredentialControlType)
  - SuperOffice.Data.CredentialControlType.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.CredentialControlType.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: SuperOffice.Data.CredentialControlType.Static
  commentId: F:SuperOffice.Data.CredentialControlType.Static
  id: Static
  parent: SuperOffice.Data.CredentialControlType
  langs:
  - csharp
  - vb
  name: Static
  nameWithType: CredentialControlType.Static
  fullName: SuperOffice.Data.CredentialControlType.Static
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n0: The value is static and can not be modified by the user interface.\n"
  syntax:
    content: Static = 0
    return:
      type: SuperOffice.Data.CredentialControlType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.CredentialControlType.Edit
  commentId: F:SuperOffice.Data.CredentialControlType.Edit
  id: Edit
  parent: SuperOffice.Data.CredentialControlType
  langs:
  - csharp
  - vb
  name: Edit
  nameWithType: CredentialControlType.Edit
  fullName: SuperOffice.Data.CredentialControlType.Edit
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n1: The value is a normal edit field\n"
  syntax:
    content: Edit = 1
    return:
      type: SuperOffice.Data.CredentialControlType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.CredentialControlType.Password
  commentId: F:SuperOffice.Data.CredentialControlType.Password
  id: Password
  parent: SuperOffice.Data.CredentialControlType
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: CredentialControlType.Password
  fullName: SuperOffice.Data.CredentialControlType.Password
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n2: The value is a password field and a pasword control should be used.\n"
  syntax:
    content: Password = 2
    return:
      type: SuperOffice.Data.CredentialControlType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.CredentialControlType.Link
  commentId: F:SuperOffice.Data.CredentialControlType.Link
  id: Link
  parent: SuperOffice.Data.CredentialControlType
  langs:
  - csharp
  - vb
  name: Link
  nameWithType: CredentialControlType.Link
  fullName: SuperOffice.Data.CredentialControlType.Link
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n3: The GetCredentialsGroups and GetCredentialUsers needs to be used to select a value.\n"
  syntax:
    content: Link = 3
    return:
      type: SuperOffice.Data.CredentialControlType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.CredentialControlType.Hidden
  commentId: F:SuperOffice.Data.CredentialControlType.Hidden
  id: Hidden
  parent: SuperOffice.Data.CredentialControlType
  langs:
  - csharp
  - vb
  name: Hidden
  nameWithType: CredentialControlType.Hidden
  fullName: SuperOffice.Data.CredentialControlType.Hidden
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n4: The value should be hidden in the user interface.\n"
  syntax:
    content: Hidden = 4
    return:
      type: SuperOffice.Data.CredentialControlType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.CredentialControlType.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CredentialControlType, To>()
  nameWithType: EnumUtil.MapEnums<CredentialControlType, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.CredentialControlType, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CredentialControlType, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.CredentialControlType, To)()
  name.vb: MapEnums(Of CredentialControlType, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CredentialControlType, To>
    nameWithType: EnumUtil.MapEnums<CredentialControlType, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.CredentialControlType, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CredentialControlType, To)
    nameWithType: EnumUtil.MapEnums(Of CredentialControlType, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.CredentialControlType, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.CredentialControlType.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.CredentialControlType)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<CredentialControlType>(CredentialControlType)
  nameWithType: ObjectExtensions.AssignByReflection<CredentialControlType>(CredentialControlType)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.CredentialControlType>(SuperOffice.Data.CredentialControlType)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of CredentialControlType)(CredentialControlType)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.CredentialControlType)(SuperOffice.Data.CredentialControlType)
  name.vb: AssignByReflection(Of CredentialControlType)(CredentialControlType)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<CredentialControlType>
    nameWithType: ObjectExtensions.AssignByReflection<CredentialControlType>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.CredentialControlType>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.CredentialControlType
    name: CredentialControlType
    nameWithType: CredentialControlType
    fullName: SuperOffice.Data.CredentialControlType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of CredentialControlType)
    nameWithType: ObjectExtensions.AssignByReflection(Of CredentialControlType)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.CredentialControlType)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.CredentialControlType
    name: CredentialControlType
    nameWithType: CredentialControlType
    fullName: SuperOffice.Data.CredentialControlType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.CredentialControlType.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<CredentialControlType>()
  nameWithType: ObjectExtensions.GraphCopy<CredentialControlType>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.CredentialControlType>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of CredentialControlType)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.CredentialControlType)()
  name.vb: GraphCopy(Of CredentialControlType)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<CredentialControlType>
    nameWithType: ObjectExtensions.GraphCopy<CredentialControlType>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.CredentialControlType>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of CredentialControlType)
    nameWithType: ObjectExtensions.GraphCopy(Of CredentialControlType)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.CredentialControlType)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.CredentialControlType.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CredentialControlType, To>()
  nameWithType: Converters.MapEnums<CredentialControlType, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.CredentialControlType, To>()
  nameWithType.vb: Converters.MapEnums(Of CredentialControlType, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.CredentialControlType, To)()
  name.vb: MapEnums(Of CredentialControlType, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CredentialControlType, To>
    nameWithType: Converters.MapEnums<CredentialControlType, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.CredentialControlType, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CredentialControlType, To)
    nameWithType: Converters.MapEnums(Of CredentialControlType, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.CredentialControlType, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.CredentialControlType
  commentId: T:SuperOffice.Data.CredentialControlType
  parent: SuperOffice.Data
  isExternal: true
  name: CredentialControlType
  nameWithType: CredentialControlType
  fullName: SuperOffice.Data.CredentialControlType
