### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  commentId: T:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  id: CurrencyConversionHelper
  parent: SuperOffice.CRM.Rows.Util
  children:
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,SuperOffice.CRM.Rows.CurrencyRecordData,SuperOffice.CRM.Rows.CurrencyRecordData)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,System.Double,System.Double,System.Double,System.Double)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,System.Int32,System.Int32)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase(System.Double,System.Int32)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur(System.Double,System.Int32)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId
  - SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: CurrencyConversionHelper
  nameWithType: CurrencyConversionHelper
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nCurrency conversions, the one-stop-shop. Methods and properties for determining whether\ncurrency is enabled, and for doing currency conversions.\n"
  syntax:
    content: 'public static class CurrencyConversionHelper : Object'
    content.vb: >-
      Public Module CurrencyConversionHelper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,System.Int32,System.Int32)
  id: ConvertAmount(System.Double,System.Int32,System.Int32)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmount(Double, Int32, Int32)
  nameWithType: CurrencyConversionHelper.ConvertAmount(Double, Int32, Int32)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double, System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from one currency to another, based on the ID&apos;s of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: public static double ConvertAmount(double amount, int fromCurrencyId, int toCurrencyId)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: fromCurrencyId
      type: System.Int32
      description: ID of currency to convert from
    - id: toCurrencyId
      type: System.Int32
      description: ID of currency to convert to
    return:
      type: System.Double
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: Public Shared Function ConvertAmount(amount As Double, fromCurrencyId As Integer, toCurrencyId As Integer) As Double
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,SuperOffice.CRM.Rows.CurrencyRecordData,SuperOffice.CRM.Rows.CurrencyRecordData)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,SuperOffice.CRM.Rows.CurrencyRecordData,SuperOffice.CRM.Rows.CurrencyRecordData)
  id: ConvertAmount(System.Double,SuperOffice.CRM.Rows.CurrencyRecordData,SuperOffice.CRM.Rows.CurrencyRecordData)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmount(Double, CurrencyRecordData, CurrencyRecordData)
  nameWithType: CurrencyConversionHelper.ConvertAmount(Double, CurrencyRecordData, CurrencyRecordData)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double, SuperOffice.CRM.Rows.CurrencyRecordData, SuperOffice.CRM.Rows.CurrencyRecordData)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from one currency to another, based on currency rows of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: public static double ConvertAmount(double amount, CurrencyRecordData from, CurrencyRecordData to)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: from
      type: SuperOffice.CRM.Rows.CurrencyRecordData
      description: Currency record to convert from
    - id: to
      type: SuperOffice.CRM.Rows.CurrencyRecordData
      description: Currency record to convert to
    return:
      type: System.Double
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: Public Shared Function ConvertAmount(amount As Double, from As CurrencyRecordData, to As CurrencyRecordData) As Double
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,System.Double,System.Double,System.Double,System.Double)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double,System.Double,System.Double,System.Double,System.Double)
  id: ConvertAmount(System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmount(Double, Double, Double, Double, Double)
  nameWithType: CurrencyConversionHelper.ConvertAmount(Double, Double, Double, Double, Double)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount(System.Double, System.Double, System.Double, System.Double, System.Double)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from one currency to another, based on the rates and units of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: public static double ConvertAmount(double amount, double fromRate, double fromUnits, double toRate, double toUnits)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: fromRate
      type: System.Double
      description: Currency rate of original currency
    - id: fromUnits
      type: System.Double
      description: Units of rate of original currency
    - id: toRate
      type: System.Double
      description: Currency rate of target currency
    - id: toUnits
      type: System.Double
      description: Units of rate of target currency
    return:
      type: System.Double
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: Public Shared Function ConvertAmount(amount As Double, fromRate As Double, fromUnits As Double, toRate As Double, toUnits As Double) As Double
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  id: ConvertAmountToBaseAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmountToBaseAsync(Double, Int32, CancellationToken)
  nameWithType: CurrencyConversionHelper.ConvertAmountToBaseAsync(Double, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync(System.Double, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from a currency to base corrency for the database, based on the ID&apos;s of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<double> ConvertAmountToBaseAsync(double amount, int fromCurrencyId, CancellationToken cancellationToken = null)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: fromCurrencyId
      type: System.Int32
      description: ID of currency to convert from
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function ConvertAmountToBaseAsync(amount As Double, fromCurrencyId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Double)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  id: ConvertAmountToOurAsync(System.Double,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmountToOurAsync(Double, Int32, CancellationToken)
  nameWithType: CurrencyConversionHelper.ConvertAmountToOurAsync(Double, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync(System.Double, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from a currency to own corrency set as a preference, based on the ID&apos;s of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<double> ConvertAmountToOurAsync(double amount, int fromCurrencyId, CancellationToken cancellationToken = null)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: fromCurrencyId
      type: System.Int32
      description: ID of currency to convert from
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function ConvertAmountToOurAsync(amount As Double, fromCurrencyId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Double)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync(System.Threading.CancellationToken)
  id: IsCurrencyEnabledAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: IsCurrencyEnabledAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.IsCurrencyEnabledAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nIs the use of currency enabled (preference)?\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<bool> IsCurrencyEnabledAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function IsCurrencyEnabledAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync(System.Threading.CancellationToken)
  id: OurCurrencyIdAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: OurCurrencyIdAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.OurCurrencyIdAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the ID of &apos;our&apos; currency (preference).  BaseCurrencyId will be returned if our currency is not defined.\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> OurCurrencyIdAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function OurCurrencyIdAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync(System.Threading.CancellationToken)
  id: BaseCurrencyIdAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: BaseCurrencyIdAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.BaseCurrencyIdAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the ID of the &apos;base&apos; currency (preference)\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> BaseCurrencyIdAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function BaseCurrencyIdAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync(System.Threading.CancellationToken)
  id: BaseCurrencyAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: BaseCurrencyAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.BaseCurrencyAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the Currency row of the base currency; if it does not exist or currency is disabled, null is returned\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<CurrencyRecordData> BaseCurrencyAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.CurrencyRecordData}
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function BaseCurrencyAsync(cancellationToken As CancellationToken = Nothing) As Task(Of CurrencyRecordData)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync(System.Threading.CancellationToken)
  id: OurCurrencyAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: OurCurrencyAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.OurCurrencyAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the Currency row of our currency; if it does not exist or currency is disabled, null is returned\n"
  syntax:
    content: public static Task<CurrencyRecordData> OurCurrencyAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.CurrencyRecordData}
    content.vb: Public Shared Function OurCurrencyAsync(cancellationToken As CancellationToken = Nothing) As Task(Of CurrencyRecordData)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync(System.Threading.CancellationToken)
  id: GetOurCurrencyIdAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: GetOurCurrencyIdAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.GetOurCurrencyIdAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nCalculates the currency id for the current user\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> GetOurCurrencyIdAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetOurCurrencyIdAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync(System.Threading.CancellationToken)
  id: GetOwnerCompanysCurrencyIdAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: GetOwnerCompanysCurrencyIdAsync(CancellationToken)
  nameWithType: CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  syntax:
    content: public static Task<int> GetOwnerCompanysCurrencyIdAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Shared Function GetOwnerCompanysCurrencyIdAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase(System.Double,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase(System.Double,System.Int32)
  id: ConvertAmountToBase(System.Double,System.Int32)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmountToBase(Double, Int32)
  nameWithType: CurrencyConversionHelper.ConvertAmountToBase(Double, Int32)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase(System.Double, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from a currency to base corrency for the database, based on the ID&apos;s of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: public static double ConvertAmountToBase(double amount, int fromCurrencyId)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: fromCurrencyId
      type: System.Int32
      description: ID of currency to convert from
    return:
      type: System.Double
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: Public Shared Function ConvertAmountToBase(amount As Double, fromCurrencyId As Integer) As Double
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur(System.Double,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur(System.Double,System.Int32)
  id: ConvertAmountToOur(System.Double,System.Int32)
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: ConvertAmountToOur(Double, Int32)
  nameWithType: CurrencyConversionHelper.ConvertAmountToOur(Double, Int32)
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur(System.Double, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nConvert an amount from a currency to own corrency set as a preference, based on the ID&apos;s of the currencies involved.\nThis method is silently fail-safe and will return the original amount unconverted if any errors occur\n(like missing currencies, rate=0 or other nasty things that can happen).\n"
  syntax:
    content: public static double ConvertAmountToOur(double amount, int fromCurrencyId)
    parameters:
    - id: amount
      type: System.Double
      description: Amount to convert
    - id: fromCurrencyId
      type: System.Int32
      description: ID of currency to convert from
    return:
      type: System.Double
      description: Converted amount, or original if anything went wrong (silent failure)
    content.vb: Public Shared Function ConvertAmountToOur(amount As Double, fromCurrencyId As Integer) As Double
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled
  id: IsCurrencyEnabled
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: IsCurrencyEnabled()
  nameWithType: CurrencyConversionHelper.IsCurrencyEnabled()
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nIs the use of currency enabled (preference)?\n"
  syntax:
    content: public static bool IsCurrencyEnabled()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsCurrencyEnabled As Boolean
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId
  id: OurCurrencyId
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: OurCurrencyId()
  nameWithType: CurrencyConversionHelper.OurCurrencyId()
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the ID of &apos;our&apos; currency (preference).  BaseCurrencyId will be returned if our currency is not defined.\n"
  syntax:
    content: public static int OurCurrencyId()
    return:
      type: System.Int32
    content.vb: Public Shared Function OurCurrencyId As Integer
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId
  id: BaseCurrencyId
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: BaseCurrencyId()
  nameWithType: CurrencyConversionHelper.BaseCurrencyId()
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the ID of the &apos;base&apos; currency (preference)\n"
  syntax:
    content: public static int BaseCurrencyId()
    return:
      type: System.Int32
    content.vb: Public Shared Function BaseCurrencyId As Integer
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency
  id: BaseCurrency
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: BaseCurrency()
  nameWithType: CurrencyConversionHelper.BaseCurrency()
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nRetrieve the Currency row of the base currency; if it does not exist or currency is disabled, null is returned\n"
  syntax:
    content: public static CurrencyRecordData BaseCurrency()
    return:
      type: SuperOffice.CRM.Rows.CurrencyRecordData
    content.vb: Public Shared Function BaseCurrency As CurrencyRecordData
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId
  commentId: M:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId
  id: GetOurCurrencyId
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: GetOurCurrencyId()
  nameWithType: CurrencyConversionHelper.GetOurCurrencyId()
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  summary: "\nCalculates the currency id for the current user\n"
  syntax:
    content: public static int GetOurCurrencyId()
    return:
      type: System.Int32
    content.vb: Public Shared Function GetOurCurrencyId As Integer
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId
  commentId: P:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId
  id: HomeCountryCurrencyId
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: HomeCountryCurrencyId
  nameWithType: CurrencyConversionHelper.HomeCountryCurrencyId
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  syntax:
    content: public static int HomeCountryCurrencyId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property HomeCountryCurrencyId As Integer
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency
  commentId: P:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency
  id: HomeCountryCurrency
  parent: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper
  langs:
  - csharp
  - vb
  name: HomeCountryCurrency
  nameWithType: CurrencyConversionHelper.HomeCountryCurrency
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows.Util
  syntax:
    content: public static CurrencyRecordData HomeCountryCurrency { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Rows.CurrencyRecordData
    content.vb: Public Shared ReadOnly Property HomeCountryCurrency As CurrencyRecordData
  overload: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: SuperOffice.CRM.Rows.Util
  commentId: N:SuperOffice.CRM.Rows.Util
  isExternal: true
  name: SuperOffice.CRM.Rows.Util
  nameWithType: SuperOffice.CRM.Rows.Util
  fullName: SuperOffice.CRM.Rows.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount
  isExternal: true
  name: ConvertAmount
  nameWithType: CurrencyConversionHelper.ConvertAmount
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmount
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Rows.CurrencyRecordData
  commentId: T:SuperOffice.CRM.Rows.CurrencyRecordData
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: CurrencyRecordData
  nameWithType: CurrencyRecordData
  fullName: SuperOffice.CRM.Rows.CurrencyRecordData
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync
  isExternal: true
  name: ConvertAmountToBaseAsync
  nameWithType: CurrencyConversionHelper.ConvertAmountToBaseAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBaseAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Double}
  commentId: '!:System.Threading.Tasks.Task{System.Double}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Double>
  nameWithType: Task<Double>
  fullName: System.Threading.Tasks.Task<System.Double>
  nameWithType.vb: Task(Of Double)
  fullName.vb: System.Threading.Tasks.Task(Of System.Double)
  name.vb: Task(Of Double)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync
  isExternal: true
  name: ConvertAmountToOurAsync
  nameWithType: CurrencyConversionHelper.ConvertAmountToOurAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOurAsync
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync
  isExternal: true
  name: IsCurrencyEnabledAsync
  nameWithType: CurrencyConversionHelper.IsCurrencyEnabledAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabledAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync
  isExternal: true
  name: OurCurrencyIdAsync
  nameWithType: CurrencyConversionHelper.OurCurrencyIdAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyIdAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync
  isExternal: true
  name: BaseCurrencyIdAsync
  nameWithType: CurrencyConversionHelper.BaseCurrencyIdAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyIdAsync
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync
  isExternal: true
  name: BaseCurrencyAsync
  nameWithType: CurrencyConversionHelper.BaseCurrencyAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.CurrencyRecordData}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.CurrencyRecordData}'
  definition: System.Threading.Tasks.Task`1
  name: Task<CurrencyRecordData>
  nameWithType: Task<CurrencyRecordData>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.CurrencyRecordData>
  nameWithType.vb: Task(Of CurrencyRecordData)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.CurrencyRecordData)
  name.vb: Task(Of CurrencyRecordData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.CurrencyRecordData
    name: CurrencyRecordData
    nameWithType: CurrencyRecordData
    fullName: SuperOffice.CRM.Rows.CurrencyRecordData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.CurrencyRecordData
    name: CurrencyRecordData
    nameWithType: CurrencyRecordData
    fullName: SuperOffice.CRM.Rows.CurrencyRecordData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync
  isExternal: true
  name: OurCurrencyAsync
  nameWithType: CurrencyConversionHelper.OurCurrencyAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyAsync
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync
  isExternal: true
  name: GetOurCurrencyIdAsync
  nameWithType: CurrencyConversionHelper.GetOurCurrencyIdAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyIdAsync
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync
  isExternal: true
  name: GetOwnerCompanysCurrencyIdAsync
  nameWithType: CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOwnerCompanysCurrencyIdAsync
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase
  isExternal: true
  name: ConvertAmountToBase
  nameWithType: CurrencyConversionHelper.ConvertAmountToBase
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToBase
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur
  isExternal: true
  name: ConvertAmountToOur
  nameWithType: CurrencyConversionHelper.ConvertAmountToOur
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.ConvertAmountToOur
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled
  isExternal: true
  name: IsCurrencyEnabled
  nameWithType: CurrencyConversionHelper.IsCurrencyEnabled
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.IsCurrencyEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId
  isExternal: true
  name: OurCurrencyId
  nameWithType: CurrencyConversionHelper.OurCurrencyId
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.OurCurrencyId
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId
  isExternal: true
  name: BaseCurrencyId
  nameWithType: CurrencyConversionHelper.BaseCurrencyId
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrencyId
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency
  isExternal: true
  name: BaseCurrency
  nameWithType: CurrencyConversionHelper.BaseCurrency
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.BaseCurrency
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId
  isExternal: true
  name: GetOurCurrencyId
  nameWithType: CurrencyConversionHelper.GetOurCurrencyId
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.GetOurCurrencyId
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId
  isExternal: true
  name: HomeCountryCurrencyId
  nameWithType: CurrencyConversionHelper.HomeCountryCurrencyId
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrencyId
- uid: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency*
  commentId: Overload:SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency
  isExternal: true
  name: HomeCountryCurrency
  nameWithType: CurrencyConversionHelper.HomeCountryCurrency
  fullName: SuperOffice.CRM.Rows.Util.CurrencyConversionHelper.HomeCountryCurrency
