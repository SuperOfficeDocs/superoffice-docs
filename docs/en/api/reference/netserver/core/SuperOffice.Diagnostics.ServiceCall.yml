### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.ServiceCall
  commentId: T:SuperOffice.Diagnostics.ServiceCall
  id: ServiceCall
  parent: SuperOffice.Diagnostics
  children:
  - SuperOffice.Diagnostics.ServiceCall.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.ValueTuple{System.String,System.Object}[])
  - SuperOffice.Diagnostics.ServiceCall.Agent
  - SuperOffice.Diagnostics.ServiceCall.ContextIdentifier
  - SuperOffice.Diagnostics.ServiceCall.DatabaseCalls
  - SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds
  - SuperOffice.Diagnostics.ServiceCall.DatabaseRows
  - SuperOffice.Diagnostics.ServiceCall.Method
  - SuperOffice.Diagnostics.ServiceCall.Parameters
  - SuperOffice.Diagnostics.ServiceCall.Started
  - SuperOffice.Diagnostics.ServiceCall.User
  langs:
  - csharp
  - vb
  name: ServiceCall
  nameWithType: ServiceCall
  fullName: SuperOffice.Diagnostics.ServiceCall
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: 'public class ServiceCall : Object'
    content.vb: >-
      Public Class ServiceCall
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Diagnostics.ServiceCall.EnumUtil.MapEnums``2
  - SuperOffice.Diagnostics.ServiceCall.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Diagnostics.ServiceCall.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.ValueTuple{System.String,System.Object}[])
  commentId: M:SuperOffice.Diagnostics.ServiceCall.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.ValueTuple{System.String,System.Object}[])
  id: '#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.ValueTuple{System.String,System.Object}[])'
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: ServiceCall(String, String, String, String, DateTimeOffset, ValueTuple<String, Object>[])
  nameWithType: ServiceCall.ServiceCall(String, String, String, String, DateTimeOffset, ValueTuple<String, Object>[])
  fullName: SuperOffice.Diagnostics.ServiceCall.ServiceCall(System.String, System.String, System.String, System.String, System.DateTimeOffset, System.ValueTuple<System.String, System.Object>[])
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public ServiceCall(string agent, string method, string databaseContext, string user, DateTimeOffset started, params ValueTuple<string, object>[] parameters)
    parameters:
    - id: agent
      type: System.String
    - id: method
      type: System.String
    - id: databaseContext
      type: System.String
    - id: user
      type: System.String
    - id: started
      type: System.DateTimeOffset
    - id: parameters
      type: System.ValueTuple{System.String,System.Object}[]
    content.vb: Public Sub New(agent As String, method As String, databaseContext As String, user As String, started As DateTimeOffset, ParamArray parameters As ValueTuple(Of String, Object)())
  overload: SuperOffice.Diagnostics.ServiceCall.#ctor*
  nameWithType.vb: ServiceCall.ServiceCall(String, String, String, String, DateTimeOffset, ValueTuple(Of String, Object)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Diagnostics.ServiceCall.ServiceCall(System.String, System.String, System.String, System.String, System.DateTimeOffset, System.ValueTuple(Of System.String, System.Object)())
  name.vb: ServiceCall(String, String, String, String, DateTimeOffset, ValueTuple(Of String, Object)())
- uid: SuperOffice.Diagnostics.ServiceCall.ContextIdentifier
  commentId: P:SuperOffice.Diagnostics.ServiceCall.ContextIdentifier
  id: ContextIdentifier
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: ContextIdentifier
  nameWithType: ServiceCall.ContextIdentifier
  fullName: SuperOffice.Diagnostics.ServiceCall.ContextIdentifier
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public string ContextIdentifier { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ContextIdentifier As String
  overload: SuperOffice.Diagnostics.ServiceCall.ContextIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Diagnostics.ServiceCall.User
  commentId: P:SuperOffice.Diagnostics.ServiceCall.User
  id: User
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: User
  nameWithType: ServiceCall.User
  fullName: SuperOffice.Diagnostics.ServiceCall.User
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public string User { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property User As String
  overload: SuperOffice.Diagnostics.ServiceCall.User*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Diagnostics.ServiceCall.Agent
  commentId: P:SuperOffice.Diagnostics.ServiceCall.Agent
  id: Agent
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: Agent
  nameWithType: ServiceCall.Agent
  fullName: SuperOffice.Diagnostics.ServiceCall.Agent
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public string Agent { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Agent As String
  overload: SuperOffice.Diagnostics.ServiceCall.Agent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Diagnostics.ServiceCall.Method
  commentId: P:SuperOffice.Diagnostics.ServiceCall.Method
  id: Method
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: ServiceCall.Method
  fullName: SuperOffice.Diagnostics.ServiceCall.Method
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public string Method { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Method As String
  overload: SuperOffice.Diagnostics.ServiceCall.Method*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Diagnostics.ServiceCall.Started
  commentId: P:SuperOffice.Diagnostics.ServiceCall.Started
  id: Started
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: Started
  nameWithType: ServiceCall.Started
  fullName: SuperOffice.Diagnostics.ServiceCall.Started
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public DateTimeOffset Started { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
    content.vb: Public ReadOnly Property Started As DateTimeOffset
  overload: SuperOffice.Diagnostics.ServiceCall.Started*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Diagnostics.ServiceCall.Parameters
  commentId: P:SuperOffice.Diagnostics.ServiceCall.Parameters
  id: Parameters
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: ServiceCall.Parameters
  fullName: SuperOffice.Diagnostics.ServiceCall.Parameters
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public ValueTuple<string, object>[] Parameters { get; }
    parameters: []
    return:
      type: System.ValueTuple{System.String,System.Object}[]
    content.vb: Public ReadOnly Property Parameters As ValueTuple(Of String, Object)()
  overload: SuperOffice.Diagnostics.ServiceCall.Parameters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Diagnostics.ServiceCall.DatabaseCalls
  commentId: P:SuperOffice.Diagnostics.ServiceCall.DatabaseCalls
  id: DatabaseCalls
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: DatabaseCalls
  nameWithType: ServiceCall.DatabaseCalls
  fullName: SuperOffice.Diagnostics.ServiceCall.DatabaseCalls
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public int DatabaseCalls { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DatabaseCalls As Integer
  overload: SuperOffice.Diagnostics.ServiceCall.DatabaseCalls*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.ServiceCall.DatabaseRows
  commentId: P:SuperOffice.Diagnostics.ServiceCall.DatabaseRows
  id: DatabaseRows
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: DatabaseRows
  nameWithType: ServiceCall.DatabaseRows
  fullName: SuperOffice.Diagnostics.ServiceCall.DatabaseRows
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public int DatabaseRows { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DatabaseRows As Integer
  overload: SuperOffice.Diagnostics.ServiceCall.DatabaseRows*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds
  commentId: P:SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds
  id: DatabaseMilliseconds
  parent: SuperOffice.Diagnostics.ServiceCall
  langs:
  - csharp
  - vb
  name: DatabaseMilliseconds
  nameWithType: ServiceCall.DatabaseMilliseconds
  fullName: SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public int DatabaseMilliseconds { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DatabaseMilliseconds As Integer
  overload: SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Diagnostics
  commentId: N:SuperOffice.Diagnostics
  isExternal: true
  name: SuperOffice.Diagnostics
  nameWithType: SuperOffice.Diagnostics
  fullName: SuperOffice.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Diagnostics.ServiceCall.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ServiceCall, To>()
  nameWithType: EnumUtil.MapEnums<ServiceCall, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.ServiceCall, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ServiceCall, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.ServiceCall, To)()
  name.vb: MapEnums(Of ServiceCall, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ServiceCall, To>
    nameWithType: EnumUtil.MapEnums<ServiceCall, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.ServiceCall, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ServiceCall, To)
    nameWithType: EnumUtil.MapEnums(Of ServiceCall, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.ServiceCall, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.ServiceCall.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ServiceCall, To>()
  nameWithType: Converters.MapEnums<ServiceCall, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.ServiceCall, To>()
  nameWithType.vb: Converters.MapEnums(Of ServiceCall, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.ServiceCall, To)()
  name.vb: MapEnums(Of ServiceCall, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ServiceCall, To>
    nameWithType: Converters.MapEnums<ServiceCall, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.ServiceCall, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ServiceCall, To)
    nameWithType: Converters.MapEnums(Of ServiceCall, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.ServiceCall, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Diagnostics.ServiceCall.#ctor*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.#ctor
  isExternal: true
  name: ServiceCall
  nameWithType: ServiceCall.ServiceCall
  fullName: SuperOffice.Diagnostics.ServiceCall.ServiceCall
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.ValueTuple{System.String,System.Object}[]
  isExternal: true
  name: ValueTuple<String, Object>[]
  nameWithType: ValueTuple<String, Object>[]
  fullName: System.ValueTuple<System.String, System.Object>[]
  nameWithType.vb: ValueTuple(Of String, Object)()
  fullName.vb: System.ValueTuple(Of System.String, System.Object)()
  name.vb: ValueTuple(Of String, Object)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Diagnostics.ServiceCall.ContextIdentifier*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.ContextIdentifier
  isExternal: true
  name: ContextIdentifier
  nameWithType: ServiceCall.ContextIdentifier
  fullName: SuperOffice.Diagnostics.ServiceCall.ContextIdentifier
- uid: SuperOffice.Diagnostics.ServiceCall.User*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.User
  isExternal: true
  name: User
  nameWithType: ServiceCall.User
  fullName: SuperOffice.Diagnostics.ServiceCall.User
- uid: SuperOffice.Diagnostics.ServiceCall.Agent*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.Agent
  isExternal: true
  name: Agent
  nameWithType: ServiceCall.Agent
  fullName: SuperOffice.Diagnostics.ServiceCall.Agent
- uid: SuperOffice.Diagnostics.ServiceCall.Method*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.Method
  isExternal: true
  name: Method
  nameWithType: ServiceCall.Method
  fullName: SuperOffice.Diagnostics.ServiceCall.Method
- uid: SuperOffice.Diagnostics.ServiceCall.Started*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.Started
  isExternal: true
  name: Started
  nameWithType: ServiceCall.Started
  fullName: SuperOffice.Diagnostics.ServiceCall.Started
- uid: SuperOffice.Diagnostics.ServiceCall.Parameters*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.Parameters
  isExternal: true
  name: Parameters
  nameWithType: ServiceCall.Parameters
  fullName: SuperOffice.Diagnostics.ServiceCall.Parameters
- uid: SuperOffice.Diagnostics.ServiceCall.DatabaseCalls*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.DatabaseCalls
  isExternal: true
  name: DatabaseCalls
  nameWithType: ServiceCall.DatabaseCalls
  fullName: SuperOffice.Diagnostics.ServiceCall.DatabaseCalls
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Diagnostics.ServiceCall.DatabaseRows*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.DatabaseRows
  isExternal: true
  name: DatabaseRows
  nameWithType: ServiceCall.DatabaseRows
  fullName: SuperOffice.Diagnostics.ServiceCall.DatabaseRows
- uid: SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds*
  commentId: Overload:SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds
  isExternal: true
  name: DatabaseMilliseconds
  nameWithType: ServiceCall.DatabaseMilliseconds
  fullName: SuperOffice.Diagnostics.ServiceCall.DatabaseMilliseconds
