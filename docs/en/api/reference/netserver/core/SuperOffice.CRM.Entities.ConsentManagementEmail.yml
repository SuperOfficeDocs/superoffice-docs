### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail
  commentId: T:SuperOffice.CRM.Entities.ConsentManagementEmail
  id: ConsentManagementEmail
  parent: SuperOffice.CRM.Entities
  children:
  - SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(SuperOffice.CRM.Entities.Person,System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.String[],System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables
  - SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate
  - SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists
  langs:
  - csharp
  - vb
  name: ConsentManagementEmail
  nameWithType: ConsentManagementEmail
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: 'public class ConsentManagementEmail : Object'
    content.vb: >-
      Public Class ConsentManagementEmail
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.CRM.Entities.ConsentManagementEmail.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Entities.ConsentManagementEmail.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: CreateAsync(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: CreateAsync(Int32, String, Int32, Int32, String, CancellationToken)
  nameWithType: ConsentManagementEmail.CreateAsync(Int32, String, Int32, Int32, String, CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(System.Int32, System.String, System.Int32, System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public static Task<ConsentManagementEmail> CreateAsync(int personId, string emailAddress, int emailTemplateId, int cultureLcidId, string subject, CancellationToken cancellationToken = null)
    parameters:
    - id: personId
      type: System.Int32
    - id: emailAddress
      type: System.String
    - id: emailTemplateId
      type: System.Int32
    - id: cultureLcidId
      type: System.Int32
    - id: subject
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Entities.ConsentManagementEmail}
    content.vb: Public Shared Function CreateAsync(personId As Integer, emailAddress As String, emailTemplateId As Integer, cultureLcidId As Integer, subject As String, cancellationToken As CancellationToken = Nothing) As Task(Of ConsentManagementEmail)
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(SuperOffice.CRM.Entities.Person,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(SuperOffice.CRM.Entities.Person,System.Threading.CancellationToken)
  id: CreateAsync(SuperOffice.CRM.Entities.Person,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: CreateAsync(Person, CancellationToken)
  nameWithType: ConsentManagementEmail.CreateAsync(Person, CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync(SuperOffice.CRM.Entities.Person, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public static Task<ConsentManagementEmail> CreateAsync(Person person, CancellationToken cancellationToken = null)
    parameters:
    - id: person
      type: SuperOffice.CRM.Entities.Person
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Entities.ConsentManagementEmail}
    content.vb: Public Shared Function CreateAsync(person As Person, cancellationToken As CancellationToken = Nothing) As Task(Of ConsentManagementEmail)
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync(System.String,System.Threading.CancellationToken)
  id: GetSupportedLanguagesForDocTemplateAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetSupportedLanguagesForDocTemplateAsync(String, CancellationToken)
  nameWithType: ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nGets template languages for a given document template filename\n"
  syntax:
    content: public static Task<string[]> GetSupportedLanguagesForDocTemplateAsync(string tmplName, CancellationToken cancellationToken = null)
    parameters:
    - id: tmplName
      type: System.String
      description: Template filename
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: 'SuperOffice language codes: [&quot;US&quot;, &quot;SW&quot;, &quot;GE&quot;] or empty array if no language-specific variant exists'
    content.vb: Public Shared Function GetSupportedLanguagesForDocTemplateAsync(tmplName As String, cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetBestLanguageForPersonAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetBestLanguageForPersonAsync(Int32, Int32, CancellationToken)
  nameWithType: ConsentManagementEmail.GetBestLanguageForPersonAsync(Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public static Task<string> GetBestLanguageForPersonAsync(int personId, int templateId, CancellationToken cancellationToken = null)
    parameters:
    - id: personId
      type: System.Int32
    - id: templateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function GetBestLanguageForPersonAsync(personId As Integer, templateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.String[],System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.String[],System.Int32,System.Threading.CancellationToken)
  id: GetBestLanguageForPersonAsync(System.String[],System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetBestLanguageForPersonAsync(String[], Int32, CancellationToken)
  nameWithType: ConsentManagementEmail.GetBestLanguageForPersonAsync(String[], Int32, CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.String[], System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public static Task<string> GetBestLanguageForPersonAsync(string[] supportedLanguages, int personId, CancellationToken cancellationToken = null)
    parameters:
    - id: supportedLanguages
      type: System.String[]
    - id: personId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function GetBestLanguageForPersonAsync(supportedLanguages As String(), personId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync*
  nameWithType.vb: ConsentManagementEmail.GetBestLanguageForPersonAsync(String(), Int32, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.String(), System.Int32, System.Threading.CancellationToken)
  name.vb: GetBestLanguageForPersonAsync(String(), Int32, CancellationToken)
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetBestLanguageForPersonAsync(System.Int32,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetBestLanguageForPersonAsync(Int32, String[], Int32, Int32, CancellationToken)
  nameWithType: ConsentManagementEmail.GetBestLanguageForPersonAsync(Int32, String[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32, System.String[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public static Task<string> GetBestLanguageForPersonAsync(int supportLangId, string[] supportedLanguages, int countryId, int overrideLcid, CancellationToken cancellationToken = null)
    parameters:
    - id: supportLangId
      type: System.Int32
    - id: supportedLanguages
      type: System.String[]
    - id: countryId
      type: System.Int32
    - id: overrideLcid
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function GetBestLanguageForPersonAsync(supportLangId As Integer, supportedLanguages As String(), countryId As Integer, overrideLcid As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync*
  nameWithType.vb: ConsentManagementEmail.GetBestLanguageForPersonAsync(Int32, String(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync(System.Int32, System.String(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: GetBestLanguageForPersonAsync(Int32, String(), Int32, Int32, CancellationToken)
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync(System.Threading.CancellationToken)
  id: SendNewPersonConfirmationEmailAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: SendNewPersonConfirmationEmailAsync(CancellationToken)
  nameWithType: ConsentManagementEmail.SendNewPersonConfirmationEmailAsync(CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nSend email to the new person and archive as a document on the newly created person. \n"
  syntax:
    content: public Task SendNewPersonConfirmationEmailAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SendNewPersonConfirmationEmailAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress
  id: GetFromAddress
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetFromAddress()
  nameWithType: ConsentManagementEmail.GetFromAddress()
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nGet the From: address to use.\n\n1. Get the default email address (first) of the logged in user\nIf in a context without logged in user:\n2. If override address is provided, use this (default sender adress from smtp config is provided here)\n\nreturns empty string otherwise.\n"
  syntax:
    content: public string GetFromAddress()
    return:
      type: System.String
      description: From address to use or empty string
    content.vb: Public Function GetFromAddress As String
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists
  id: SmtpConnectionExists
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: SmtpConnectionExists()
  nameWithType: ConsentManagementEmail.SmtpConnectionExists()
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public bool SmtpConnectionExists()
    return:
      type: System.Boolean
    content.vb: Public Function SmtpConnectionExists As Boolean
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync(System.Threading.CancellationToken)
  id: GetPersonEmailAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetPersonEmailAsync(CancellationToken)
  nameWithType: ConsentManagementEmail.GetPersonEmailAsync(CancellationToken)
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public Task<string> GetPersonEmailAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetPersonEmailAsync(cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables
  commentId: M:SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables
  id: GetTemplateVariables
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: GetTemplateVariables()
  nameWithType: ConsentManagementEmail.GetTemplateVariables()
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public TemplateVariables GetTemplateVariables()
    return:
      type: SuperOffice.CRM.Globalization.TemplateVariables
    content.vb: Public Function GetTemplateVariables As TemplateVariables
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate
  commentId: P:SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate
  id: HasTemplate
  parent: SuperOffice.CRM.Entities.ConsentManagementEmail
  langs:
  - csharp
  - vb
  name: HasTemplate
  nameWithType: ConsentManagementEmail.HasTemplate
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  syntax:
    content: public bool HasTemplate { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasTemplate As Boolean
  overload: SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ConsentManagementEmail, To>()
  nameWithType: EnumUtil.MapEnums<ConsentManagementEmail, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Entities.ConsentManagementEmail, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ConsentManagementEmail, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Entities.ConsentManagementEmail, To)()
  name.vb: MapEnums(Of ConsentManagementEmail, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ConsentManagementEmail, To>
    nameWithType: EnumUtil.MapEnums<ConsentManagementEmail, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Entities.ConsentManagementEmail, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ConsentManagementEmail, To)
    nameWithType: EnumUtil.MapEnums(Of ConsentManagementEmail, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Entities.ConsentManagementEmail, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ConsentManagementEmail, To>()
  nameWithType: Converters.MapEnums<ConsentManagementEmail, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Entities.ConsentManagementEmail, To>()
  nameWithType.vb: Converters.MapEnums(Of ConsentManagementEmail, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Entities.ConsentManagementEmail, To)()
  name.vb: MapEnums(Of ConsentManagementEmail, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ConsentManagementEmail, To>
    nameWithType: Converters.MapEnums<ConsentManagementEmail, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Entities.ConsentManagementEmail, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ConsentManagementEmail, To)
    nameWithType: Converters.MapEnums(Of ConsentManagementEmail, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Entities.ConsentManagementEmail, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync
  isExternal: true
  name: CreateAsync
  nameWithType: ConsentManagementEmail.CreateAsync
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.CreateAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Entities.ConsentManagementEmail}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Entities.ConsentManagementEmail}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ConsentManagementEmail>
  nameWithType: Task<ConsentManagementEmail>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Entities.ConsentManagementEmail>
  nameWithType.vb: Task(Of ConsentManagementEmail)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Entities.ConsentManagementEmail)
  name.vb: Task(Of ConsentManagementEmail)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Entities.ConsentManagementEmail
    name: ConsentManagementEmail
    nameWithType: ConsentManagementEmail
    fullName: SuperOffice.CRM.Entities.ConsentManagementEmail
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Entities.ConsentManagementEmail
    name: ConsentManagementEmail
    nameWithType: ConsentManagementEmail
    fullName: SuperOffice.CRM.Entities.ConsentManagementEmail
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Entities.Person
  commentId: T:SuperOffice.CRM.Entities.Person
  parent: SuperOffice.CRM.Entities
  isExternal: true
  name: Person
  nameWithType: Person
  fullName: SuperOffice.CRM.Entities.Person
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync
  isExternal: true
  name: GetSupportedLanguagesForDocTemplateAsync
  nameWithType: ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetSupportedLanguagesForDocTemplateAsync
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: '!:System.Threading.Tasks.Task{System.String[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync
  isExternal: true
  name: GetBestLanguageForPersonAsync
  nameWithType: ConsentManagementEmail.GetBestLanguageForPersonAsync
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetBestLanguageForPersonAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync
  isExternal: true
  name: SendNewPersonConfirmationEmailAsync
  nameWithType: ConsentManagementEmail.SendNewPersonConfirmationEmailAsync
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.SendNewPersonConfirmationEmailAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress
  isExternal: true
  name: GetFromAddress
  nameWithType: ConsentManagementEmail.GetFromAddress
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetFromAddress
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists
  isExternal: true
  name: SmtpConnectionExists
  nameWithType: ConsentManagementEmail.SmtpConnectionExists
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.SmtpConnectionExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync
  isExternal: true
  name: GetPersonEmailAsync
  nameWithType: ConsentManagementEmail.GetPersonEmailAsync
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetPersonEmailAsync
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables
  isExternal: true
  name: GetTemplateVariables
  nameWithType: ConsentManagementEmail.GetTemplateVariables
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.GetTemplateVariables
- uid: SuperOffice.CRM.Globalization.TemplateVariables
  commentId: T:SuperOffice.CRM.Globalization.TemplateVariables
  parent: SuperOffice.CRM.Globalization
  isExternal: true
  name: TemplateVariables
  nameWithType: TemplateVariables
  fullName: SuperOffice.CRM.Globalization.TemplateVariables
- uid: SuperOffice.CRM.Globalization
  commentId: N:SuperOffice.CRM.Globalization
  isExternal: true
  name: SuperOffice.CRM.Globalization
  nameWithType: SuperOffice.CRM.Globalization
  fullName: SuperOffice.CRM.Globalization
- uid: SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate*
  commentId: Overload:SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate
  isExternal: true
  name: HasTemplate
  nameWithType: ConsentManagementEmail.HasTemplate
  fullName: SuperOffice.CRM.Entities.ConsentManagementEmail.HasTemplate
