### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.CachedSequence
  commentId: T:SuperOffice.Data.CachedSequence
  id: CachedSequence
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.CachedSequence.Flush
  - SuperOffice.Data.CachedSequence.Flush(System.String)
  - SuperOffice.Data.CachedSequence.GetNextAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Data.CachedSequence.ToString
  langs:
  - csharp
  - vb
  name: CachedSequence
  nameWithType: CachedSequence
  fullName: SuperOffice.Data.CachedSequence
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nThis class is used to get sequence numbers (primary keys) for tables,\nwhere the physical sequence table is updated in batches.\n"
  remarks: "\nPicking from sequence one-by-one is the default and usually correct approach, since it (almost) guarantees\na chronological order in the target table, and no holes. However, there are cases where, for performance reasons,\nit is better to &quot;burn&quot; an interval. This is kept in-memory and then given out. If the process recycles\nor another process does the same, holes may result; and the target table id&apos;s may not be in chronological order.\n"
  syntax:
    content: >-
      [SoInject("Database")]

      public class CachedSequence : Object
    content.vb: >-
      <SoInject("Database")>

      Public Class CachedSequence
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Data.CachedSequence.EnumUtil.MapEnums``2
  - SuperOffice.Data.CachedSequence.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Database
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.CachedSequence.ToString
  commentId: M:SuperOffice.Data.CachedSequence.ToString
  id: ToString
  parent: SuperOffice.Data.CachedSequence
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CachedSequence.ToString()
  fullName: SuperOffice.Data.CachedSequence.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SuperOffice.Data.CachedSequence.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.CachedSequence.GetNextAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.CachedSequence.GetNextAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: GetNextAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Data.CachedSequence
  langs:
  - csharp
  - vb
  name: GetNextAsync(String, Int32, CancellationToken)
  nameWithType: CachedSequence.GetNextAsync(String, Int32, CancellationToken)
  fullName: SuperOffice.Data.CachedSequence.GetNextAsync(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public Task<int> GetNextAsync(string tableName, int physicalBatchSize = 100, CancellationToken cancellationToken = null)
    parameters:
    - id: tableName
      type: System.String
    - id: physicalBatchSize
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function GetNextAsync(tableName As String, physicalBatchSize As Integer = 100, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.CachedSequence.GetNextAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.CachedSequence.Flush
  commentId: M:SuperOffice.Data.CachedSequence.Flush
  id: Flush
  parent: SuperOffice.Data.CachedSequence
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: CachedSequence.Flush()
  fullName: SuperOffice.Data.CachedSequence.Flush()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReset all the cached sequences. Start over.\n"
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  overload: SuperOffice.Data.CachedSequence.Flush*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.CachedSequence.Flush(System.String)
  commentId: M:SuperOffice.Data.CachedSequence.Flush(System.String)
  id: Flush(System.String)
  parent: SuperOffice.Data.CachedSequence
  langs:
  - csharp
  - vb
  name: Flush(String)
  nameWithType: CachedSequence.Flush(String)
  fullName: SuperOffice.Data.CachedSequence.Flush(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReset a single table from the cache.\n"
  syntax:
    content: public void Flush(string tableName)
    parameters:
    - id: tableName
      type: System.String
    content.vb: Public Sub Flush(tableName As String)
  overload: SuperOffice.Data.CachedSequence.Flush*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.CachedSequence.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CachedSequence, To>()
  nameWithType: EnumUtil.MapEnums<CachedSequence, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.CachedSequence, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CachedSequence, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.CachedSequence, To)()
  name.vb: MapEnums(Of CachedSequence, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CachedSequence, To>
    nameWithType: EnumUtil.MapEnums<CachedSequence, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.CachedSequence, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CachedSequence, To)
    nameWithType: EnumUtil.MapEnums(Of CachedSequence, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.CachedSequence, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.CachedSequence.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CachedSequence, To>()
  nameWithType: Converters.MapEnums<CachedSequence, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.CachedSequence, To>()
  nameWithType.vb: Converters.MapEnums(Of CachedSequence, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.CachedSequence, To)()
  name.vb: MapEnums(Of CachedSequence, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CachedSequence, To>
    nameWithType: Converters.MapEnums<CachedSequence, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.CachedSequence, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CachedSequence, To)
    nameWithType: Converters.MapEnums(Of CachedSequence, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.CachedSequence, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.CachedSequence.ToString*
  commentId: Overload:SuperOffice.Data.CachedSequence.ToString
  isExternal: true
  name: ToString
  nameWithType: CachedSequence.ToString
  fullName: SuperOffice.Data.CachedSequence.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.CachedSequence.GetNextAsync*
  commentId: Overload:SuperOffice.Data.CachedSequence.GetNextAsync
  isExternal: true
  name: GetNextAsync
  nameWithType: CachedSequence.GetNextAsync
  fullName: SuperOffice.Data.CachedSequence.GetNextAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.CachedSequence.Flush*
  commentId: Overload:SuperOffice.Data.CachedSequence.Flush
  isExternal: true
  name: Flush
  nameWithType: CachedSequence.Flush
  fullName: SuperOffice.Data.CachedSequence.Flush
