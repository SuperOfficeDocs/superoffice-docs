### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.SoModuleLicenseNames
  commentId: T:SuperOffice.License.SoModuleLicenseNames
  id: SoModuleLicenseNames
  parent: SuperOffice.License
  children:
  - SuperOffice.License.SoModuleLicenseNames.Area
  - SuperOffice.License.SoModuleLicenseNames.Audience
  - SuperOffice.License.SoModuleLicenseNames.Collaboration
  - SuperOffice.License.SoModuleLicenseNames.ConfidentialAppointment
  - SuperOffice.License.SoModuleLicenseNames.CreateExternalPerson
  - SuperOffice.License.SoModuleLicenseNames.Demo
  - SuperOffice.License.SoModuleLicenseNames.ExpanderKey
  - SuperOffice.License.SoModuleLicenseNames.Integration
  - SuperOffice.License.SoModuleLicenseNames.Login
  - SuperOffice.License.SoModuleLicenseNames.ModuleOwner
  - SuperOffice.License.SoModuleLicenseNames.NetClient
  - SuperOffice.License.SoModuleLicenseNames.NotesMailLink
  - SuperOffice.License.SoModuleLicenseNames.OnlineProfessional
  - SuperOffice.License.SoModuleLicenseNames.OnlineStandard
  - SuperOffice.License.SoModuleLicenseNames.Pocket
  - SuperOffice.License.SoModuleLicenseNames.Publish
  - SuperOffice.License.SoModuleLicenseNames.RemoteTravel
  - SuperOffice.License.SoModuleLicenseNames.ReporterStudio
  - SuperOffice.License.SoModuleLicenseNames.Repstudio
  - SuperOffice.License.SoModuleLicenseNames.saint
  - SuperOffice.License.SoModuleLicenseNames.Satellite
  - SuperOffice.License.SoModuleLicenseNames.Server
  - SuperOffice.License.SoModuleLicenseNames.SyncEngine
  - SuperOffice.License.SoModuleLicenseNames.Travel
  - SuperOffice.License.SoModuleLicenseNames.WebLogin
  - SuperOffice.License.SoModuleLicenseNames.WinLogin
  langs:
  - csharp
  - vb
  name: SoModuleLicenseNames
  nameWithType: SoModuleLicenseNames
  fullName: SuperOffice.License.SoModuleLicenseNames
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: >-
      [Obsolete("Use SuperOffice.License.SoLicenseNames instead", true)]

      public static class SoModuleLicenseNames
    content.vb: >-
      <Obsolete("Use SuperOffice.License.SoLicenseNames instead", True)>

      Public Module SoModuleLicenseNames
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Use SuperOffice.License.SoLicenseNames instead
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.License.SoModuleLicenseNames.ModuleOwner
  commentId: F:SuperOffice.License.SoModuleLicenseNames.ModuleOwner
  id: ModuleOwner
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: ModuleOwner
  nameWithType: SoModuleLicenseNames.ModuleOwner
  fullName: SuperOffice.License.SoModuleLicenseNames.ModuleOwner
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public const string ModuleOwner = "SuperOffice"
    return:
      type: System.String
    content.vb: Public Const ModuleOwner As String = "SuperOffice"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Server
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Server
  id: Server
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Server
  nameWithType: SoModuleLicenseNames.Server
  fullName: SuperOffice.License.SoModuleLicenseNames.Server
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice Site license\n"
  syntax:
    content: public const string Server = "server"
    return:
      type: System.String
    content.vb: Public Const Server As String = "server"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.ExpanderKey
  commentId: F:SuperOffice.License.SoModuleLicenseNames.ExpanderKey
  id: ExpanderKey
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: ExpanderKey
  nameWithType: SoModuleLicenseNames.ExpanderKey
  fullName: SuperOffice.License.SoModuleLicenseNames.ExpanderKey
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice Expander Key\n"
  syntax:
    content: public const string ExpanderKey = "expander-key"
    return:
      type: System.String
    content.vb: Public Const ExpanderKey As String = "expander-key"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Audience
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Audience
  id: Audience
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Audience
  nameWithType: SoModuleLicenseNames.Audience
  fullName: SuperOffice.License.SoModuleLicenseNames.Audience
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice Audience license\n"
  syntax:
    content: public const string Audience = "audience"
    return:
      type: System.String
    content.vb: Public Const Audience As String = "audience"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Collaboration
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Collaboration
  id: Collaboration
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Collaboration
  nameWithType: SoModuleLicenseNames.Collaboration
  fullName: SuperOffice.License.SoModuleLicenseNames.Collaboration
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice Collaboration license\n"
  syntax:
    content: public const string Collaboration = "collaboration"
    return:
      type: System.String
    content.vb: Public Const Collaboration As String = "collaboration"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Integration
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Integration
  id: Integration
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Integration
  nameWithType: SoModuleLicenseNames.Integration
  fullName: SuperOffice.License.SoModuleLicenseNames.Integration
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Enterprise Integration license\n"
  syntax:
    content: public const string Integration = "integration"
    return:
      type: System.String
    content.vb: Public Const Integration As String = "integration"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Demo
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Demo
  id: Demo
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Demo
  nameWithType: SoModuleLicenseNames.Demo
  fullName: SuperOffice.License.SoModuleLicenseNames.Demo
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Demo Site License\n"
  syntax:
    content: public const string Demo = "demo"
    return:
      type: System.String
    content.vb: Public Const Demo As String = "demo"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Repstudio
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Repstudio
  id: Repstudio
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Repstudio
  nameWithType: SoModuleLicenseNames.Repstudio
  fullName: SuperOffice.License.SoModuleLicenseNames.Repstudio
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Reporter Studio\n"
  syntax:
    content: public const string Repstudio = "repstudio"
    return:
      type: System.String
    content.vb: Public Const Repstudio As String = "repstudio"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.NotesMailLink
  commentId: F:SuperOffice.License.SoModuleLicenseNames.NotesMailLink
  id: NotesMailLink
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: NotesMailLink
  nameWithType: SoModuleLicenseNames.NotesMailLink
  fullName: SuperOffice.License.SoModuleLicenseNames.NotesMailLink
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Notes Mail Link\n"
  syntax:
    content: public const string NotesMailLink = "notes-mail-link"
    return:
      type: System.String
    content.vb: Public Const NotesMailLink As String = "notes-mail-link"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.saint
  commentId: F:SuperOffice.License.SoModuleLicenseNames.saint
  id: saint
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: saint
  nameWithType: SoModuleLicenseNames.saint
  fullName: SuperOffice.License.SoModuleLicenseNames.saint
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Sales Intelligence (SAINT)\n"
  syntax:
    content: public const string saint = "saint"
    return:
      type: System.String
    content.vb: Public Const saint As String = "saint"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.OnlineStandard
  commentId: F:SuperOffice.License.SoModuleLicenseNames.OnlineStandard
  id: OnlineStandard
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: OnlineStandard
  nameWithType: SoModuleLicenseNames.OnlineStandard
  fullName: SuperOffice.License.SoModuleLicenseNames.OnlineStandard
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nOnline, standard edition\n"
  syntax:
    content: public const string OnlineStandard = "OnlineStandard"
    return:
      type: System.String
    content.vb: Public Const OnlineStandard As String = "OnlineStandard"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.OnlineProfessional
  commentId: F:SuperOffice.License.SoModuleLicenseNames.OnlineProfessional
  id: OnlineProfessional
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: OnlineProfessional
  nameWithType: SoModuleLicenseNames.OnlineProfessional
  fullName: SuperOffice.License.SoModuleLicenseNames.OnlineProfessional
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nOnline, professional edition\n"
  syntax:
    content: public const string OnlineProfessional = "OnlineProfessional"
    return:
      type: System.String
    content.vb: Public Const OnlineProfessional As String = "OnlineProfessional"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Area
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Area
  id: Area
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: SoModuleLicenseNames.Area
  fullName: SuperOffice.License.SoModuleLicenseNames.Area
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Area Management License\n"
  syntax:
    content: public const string Area = "area"
    return:
      type: System.String
    content.vb: Public Const Area As String = "area"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Satellite
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Satellite
  id: Satellite
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Satellite
  nameWithType: SoModuleLicenseNames.Satellite
  fullName: SuperOffice.License.SoModuleLicenseNames.Satellite
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Satellite License\n"
  syntax:
    content: public const string Satellite = "sat"
    return:
      type: System.String
    content.vb: Public Const Satellite As String = "sat"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Login
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Login
  id: Login
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Login
  nameWithType: SoModuleLicenseNames.Login
  fullName: SuperOffice.License.SoModuleLicenseNames.Login
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Login Right\n"
  syntax:
    content: public const string Login = "client"
    return:
      type: System.String
    content.vb: Public Const Login As String = "client"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.WinLogin
  commentId: F:SuperOffice.License.SoModuleLicenseNames.WinLogin
  id: WinLogin
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: WinLogin
  nameWithType: SoModuleLicenseNames.WinLogin
  fullName: SuperOffice.License.SoModuleLicenseNames.WinLogin
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Windows Client\n"
  syntax:
    content: public const string WinLogin = "winclient"
    return:
      type: System.String
    content.vb: Public Const WinLogin As String = "winclient"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.WebLogin
  commentId: F:SuperOffice.License.SoModuleLicenseNames.WebLogin
  id: WebLogin
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: WebLogin
  nameWithType: SoModuleLicenseNames.WebLogin
  fullName: SuperOffice.License.SoModuleLicenseNames.WebLogin
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Web Client\n"
  syntax:
    content: public const string WebLogin = "webclient"
    return:
      type: System.String
    content.vb: Public Const WebLogin As String = "webclient"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.NetClient
  commentId: F:SuperOffice.License.SoModuleLicenseNames.NetClient
  id: NetClient
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: NetClient
  nameWithType: SoModuleLicenseNames.NetClient
  fullName: SuperOffice.License.SoModuleLicenseNames.NetClient
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Extended Login\n"
  syntax:
    content: public const string NetClient = "netclient"
    return:
      type: System.String
    content.vb: Public Const NetClient As String = "netclient"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.RemoteTravel
  commentId: F:SuperOffice.License.SoModuleLicenseNames.RemoteTravel
  id: RemoteTravel
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: RemoteTravel
  nameWithType: SoModuleLicenseNames.RemoteTravel
  fullName: SuperOffice.License.SoModuleLicenseNames.RemoteTravel
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to use remote travel.\n"
  syntax:
    content: public const string RemoteTravel = "remote-travel"
    return:
      type: System.String
    content.vb: Public Const RemoteTravel As String = "remote-travel"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.SyncEngine
  commentId: F:SuperOffice.License.SoModuleLicenseNames.SyncEngine
  id: SyncEngine
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: SyncEngine
  nameWithType: SoModuleLicenseNames.SyncEngine
  fullName: SuperOffice.License.SoModuleLicenseNames.SyncEngine
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Sync Engine\n"
  syntax:
    content: public const string SyncEngine = "sync-engine"
    return:
      type: System.String
    content.vb: Public Const SyncEngine As String = "sync-engine"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Pocket
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Pocket
  id: Pocket
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Pocket
  nameWithType: SoModuleLicenseNames.Pocket
  fullName: SuperOffice.License.SoModuleLicenseNames.Pocket
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to log on to Pocket CRM\n"
  syntax:
    content: public const string Pocket = "pocket"
    return:
      type: System.String
    content.vb: Public Const Pocket As String = "pocket"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.ConfidentialAppointment
  commentId: F:SuperOffice.License.SoModuleLicenseNames.ConfidentialAppointment
  id: ConfidentialAppointment
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: ConfidentialAppointment
  nameWithType: SoModuleLicenseNames.ConfidentialAppointment
  fullName: SuperOffice.License.SoModuleLicenseNames.ConfidentialAppointment
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSuperOffice	Can set Private\n"
  syntax:
    content: public const string ConfidentialAppointment = "visible-for"
    return:
      type: System.String
    content.vb: Public Const ConfidentialAppointment As String = "visible-for"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Publish
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Publish
  id: Publish
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Publish
  nameWithType: SoModuleLicenseNames.Publish
  fullName: SuperOffice.License.SoModuleLicenseNames.Publish
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nCan set Publish\n"
  syntax:
    content: public const string Publish = "publish"
    return:
      type: System.String
    content.vb: Public Const Publish As String = "publish"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.Travel
  commentId: F:SuperOffice.License.SoModuleLicenseNames.Travel
  id: Travel
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: Travel
  nameWithType: SoModuleLicenseNames.Travel
  fullName: SuperOffice.License.SoModuleLicenseNames.Travel
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nCan Travel\n"
  syntax:
    content: public const string Travel = "travel"
    return:
      type: System.String
    content.vb: Public Const Travel As String = "travel"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.ReporterStudio
  commentId: F:SuperOffice.License.SoModuleLicenseNames.ReporterStudio
  id: ReporterStudio
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: ReporterStudio
  nameWithType: SoModuleLicenseNames.ReporterStudio
  fullName: SuperOffice.License.SoModuleLicenseNames.ReporterStudio
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to use reporter studio.\n"
  syntax:
    content: public const string ReporterStudio = "repstudio-user"
    return:
      type: System.String
    content.vb: Public Const ReporterStudio As String = "repstudio-user"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.SoModuleLicenseNames.CreateExternalPerson
  commentId: F:SuperOffice.License.SoModuleLicenseNames.CreateExternalPerson
  id: CreateExternalPerson
  parent: SuperOffice.License.SoModuleLicenseNames
  langs:
  - csharp
  - vb
  name: CreateExternalPerson
  nameWithType: SoModuleLicenseNames.CreateExternalPerson
  fullName: SuperOffice.License.SoModuleLicenseNames.CreateExternalPerson
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nCan admin external users\n"
  syntax:
    content: public static string CreateExternalPerson
    return:
      type: System.String
    content.vb: Public Shared CreateExternalPerson As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
