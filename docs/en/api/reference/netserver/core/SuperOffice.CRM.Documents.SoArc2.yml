### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Documents.SoArc2
  commentId: T:SuperOffice.CRM.Documents.SoArc2
  id: SoArc2
  parent: SuperOffice.CRM.Documents
  children:
  - SuperOffice.CRM.Documents.SoArc2.#ctor(SuperOffice.CRM.IConfiguration)
  - SuperOffice.CRM.Documents.SoArc2._checkoutHelper
  - SuperOffice.CRM.Documents.SoArc2.AssociateRename(System.String,System.String)
  - SuperOffice.CRM.Documents.SoArc2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  - SuperOffice.CRM.Documents.SoArc2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.Exists(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.SoArc2.FastExists
  - SuperOffice.CRM.Documents.SoArc2.FastLockStatus
  - SuperOffice.CRM.Documents.SoArc2.FastVersionList
  - SuperOffice.CRM.Documents.SoArc2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath(System.String)
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  - SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  - SuperOffice.CRM.Documents.SoArc2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  - SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities
  - SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates
  - SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  - SuperOffice.CRM.Documents.SoArc2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.SoArc2.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  - SuperOffice.CRM.Documents.SoArc2.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  - SuperOffice.CRM.Documents.SoArc2.IsNameValid(System.String)
  - SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  - SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  - SuperOffice.CRM.Documents.SoArc2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  - SuperOffice.CRM.Documents.SoArc2.Locking
  - SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize
  - SuperOffice.CRM.Documents.SoArc2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  - SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  - SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  - SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  - SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  - SuperOffice.CRM.Documents.SoArc2.Timeout
  - SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  - SuperOffice.CRM.Documents.SoArc2.Versioning
  langs:
  - csharp
  - vb
  name: SoArc2
  nameWithType: SoArc2
  fullName: SuperOffice.CRM.Documents.SoArc2
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDocument plugin for SuperOffice standard document archive (i.e SO_ARC) with Check-in/Check-out &amp; versioning features.\n"
  syntax:
    content: >-
      [DocumentPlugin2("SO Archive", 0)]

      public class SoArc2 : IDocumentPlugin2, IPlugin, IAssociateRename, IDocumentPluginTravel
    content.vb: >-
      <DocumentPlugin2("SO Archive", 0)>

      Public Class SoArc2
          Implements IDocumentPlugin2, IPlugin, IAssociateRename, IDocumentPluginTravel
  inheritance:
  - System.Object
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2
  - SuperOffice.Plugins.CRM.Documents.IAssociateRename
  - SuperOffice.CRM.Documents.IDocumentPluginTravel
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Documents.SoArc2.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Documents.SoArc2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.CRM.Documents.DocumentPlugin2Attribute
    ctor: SuperOffice.CRM.Documents.DocumentPlugin2Attribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: SO Archive
    - type: System.Int32
      value: 0
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Documents.SoArc2._checkoutHelper
  commentId: F:SuperOffice.CRM.Documents.SoArc2._checkoutHelper
  id: _checkoutHelper
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: _checkoutHelper
  nameWithType: SoArc2._checkoutHelper
  fullName: SuperOffice.CRM.Documents.SoArc2._checkoutHelper
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: protected SoArc2CheckoutHelper _checkoutHelper
    return:
      type: SuperOffice.CRM.Documents.SoArc2CheckoutHelper
    content.vb: Protected _checkoutHelper As SoArc2CheckoutHelper
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Documents.SoArc2.AssociateRename(System.String,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.AssociateRename(System.String,System.String)
  id: AssociateRename(System.String,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: AssociateRename(String, String)
  nameWithType: SoArc2.AssociateRename(String, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.AssociateRename(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRenames the path associated with the associate.\n"
  syntax:
    content: public void AssociateRename(string oldName, string newName)
    parameters:
    - id: oldName
      type: System.String
    - id: newName
      type: System.String
    content.vb: Public Sub AssociateRename(oldName As String, newName As String)
  overload: SuperOffice.CRM.Documents.SoArc2.AssociateRename*
  implements:
  - SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.#ctor(SuperOffice.CRM.IConfiguration)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.#ctor(SuperOffice.CRM.IConfiguration)
  id: '#ctor(SuperOffice.CRM.IConfiguration)'
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: SoArc2(IConfiguration)
  nameWithType: SoArc2.SoArc2(IConfiguration)
  fullName: SuperOffice.CRM.Documents.SoArc2.SoArc2(SuperOffice.CRM.IConfiguration)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate the document plugin. Check configuration to see if the TestCommand should be enabled?\n"
  remarks: "\nReads Config properties:<p></p>\n&lt;SuperOffice>&lt;Documents>&lt;add key=&quot;TestCommand&quot; value=&quot;true&quot; />\n<p></p>\n&lt;SuperOffice>&lt;Documents>&lt;add key=&quot;CanCreateDocumentTemplates&quot; value=&quot;false&quot; />\n"
  syntax:
    content: public SoArc2(IConfiguration config)
    parameters:
    - id: config
      type: SuperOffice.CRM.IConfiguration
      description: configuration settings
    content.vb: Public Sub New(config As IConfiguration)
  overload: SuperOffice.CRM.Documents.SoArc2.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities
  id: GetPluginCapabilities
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetPluginCapabilities()
  nameWithType: SoArc2.GetPluginCapabilities()
  fullName: SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a list of capabilities (functionality) supported by this document plugin\n"
  remarks: "\nThe purpose of this call is to enable NetServer and clients to determine what functionality this plugin can offer. \nPlugins should populate the return array with all capabilities they know about. NetServer will call this API only once.\n<p></p>\nAs an example of use, the Document archive provider inside NetServer will look at plugin capabilities, \nand read document properties as appropriate. i.e. if “fast-lock-status=false”, then the archive provider \nwill not call the IsCheckedOut(externalReference) function. Otherwise it will make the call (if the client has requested\nthe appropriate column in the GUI), so that the user can see which documents are checked out.\n<p></p>\nString constants for capabilities are available in the <xref href=\"SuperOffice.CRM.Documents.Constants.Capabilities\" data-throw-if-not-resolved=\"false\"></xref> static class.\n"
  syntax:
    content: public Dictionary<string, string> GetPluginCapabilities()
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Array of name=value strings listing all known capabilities and their values
    content.vb: Public Function GetPluginCapabilities As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  id: GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentProperties(IDocumentInfo, String[])
  nameWithType: SoArc2.GetDocumentProperties(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the values of certain properties, for a given document\n"
  remarks: "\nEach document can have a number of properties associated with it. A set of standard properties\nis defined in the <xref href=\"SuperOffice.CRM.Documents.Constants.Properties\" data-throw-if-not-resolved=\"false\"></xref> class. Ideally, retrieving properties should\nbe a lightweight operation.\n<p></p>\nNote that &apos;properties&apos; are a one-way mechanism where the document plugin provides information about\nthe document or certain aspects of it. This is not the same as document-specific\nmetadata, which is handled by the <xref href=\"SuperOffice.CRM.Documents.SoArc2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo%2cSystem.Collections.Generic.Dictionary%7bSystem.String%2cSystem.String%7d)\" data-throw-if-not-resolved=\"false\"></xref>\nmethods.\n"
  syntax:
    content: public Dictionary<string, string> GetDocumentProperties(IDocumentInfo documentInfo, string[] requestedProperties)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: requestedProperties
      type: System.String[]
      description: Array of property strings, for which values are requested
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: >-
        Array of name=value pairs, where the name is one of the requested property strings, and the value

        is the value of that property for the given document.
    content.vb: Public Function GetDocumentProperties(documentInfo As IDocumentInfo, requestedProperties As String()) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  nameWithType.vb: SoArc2.GetDocumentProperties(IDocumentInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: GetDocumentProperties(IDocumentInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  id: GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentCommands(IDocumentInfo, String[])
  nameWithType: SoArc2.GetDocumentCommands(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a list of custom commands, applicable to a specific document. Note that commands related to\nstandard locking and versioning operations have their own API calls and are not &apos;custom commands&apos; in this sense.\n"
  remarks: "\nThis API is called before a menu, task button or other GUI item that gives access to document-specific commands is shown.\nIt is used to populate the GUI with available commands for a particular document, the results are not cached by the GUI.\n<p></p>\nDepending on the return type indicated in the command, the command might be filtered by GUI. More information can\nbe found in the <xref href=\"SuperOffice.CRM.Documents.CommandInfo\" data-throw-if-not-resolved=\"false\"></xref> topic.\n"
  syntax:
    content: public CommandInfo[] GetDocumentCommands(IDocumentInfo documentInfo, string[] allowedReturnTypes)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.Documents.CommandInfo[]
      description: Array of command descriptions. If there are no custom commands available, an empty array should be returned.
    content.vb: Public Function GetDocumentCommands(documentInfo As IDocumentInfo, allowedReturnTypes As String()) As CommandInfo()
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  nameWithType.vb: SoArc2.GetDocumentCommands(IDocumentInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: GetDocumentCommands(IDocumentInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  id: ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: ExecuteDocumentCommand(IDocumentInfo, String, String[], String, String[])
  nameWithType: SoArc2.ExecuteDocumentCommand(IDocumentInfo, String, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nExecute a custom command on a specified document and version\n"
  remarks: "\nThis command is called when the user chooses an action item from a dropdown/context menu. \nIt is also reflected in the DocumentAgent service interface, so that custom GUI’s and external \ncode can directly execute document plugin commands; this is useful if a plugin also has some \ncorresponding custom GUI that needs to execute commands depending on user interaction.\n<p></p>\nThe parameter <see cref=\"!:allowedReturnTypes\"></see> can be used by clients to hint to the plugin\nwhat kind of return value processing is available. For instance, a mobile client might\nonly offer None and Message, and this information can be used by the document plugin to adapt\nthe processing of a command, if it wants to (for instance, use default values instead of\ntriggering some more advanced workflow).\n"
  syntax:
    content: public ReturnInfo ExecuteDocumentCommand(IDocumentInfo documentInfo, string versionId, string[] allowedReturnTypes, string command, params string[] additionalData)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
      description: Version identifier, blank implies &apos;latest&apos; version
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    - id: command
      type: System.String
      description: >-
        Command name, taken from an earlier call to <xref href="SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d)" data-throw-if-not-resolved="false"></xref>

        - or any other command name that is understood by the provider. &apos;Private&apos; commands that

        are not declared in GetDocumentCommands but are known to the authors of custom GUI code

        or OK.
    - id: additionalData
      type: System.String[]
      description: >-
        Array of strings containing whatever additional data the command

        may need. This parameter is intended for authors of more complex custom GUI&apos;s and works as

        a tunnel between the ultimate client and the document plugin. Standard GUI made by SuperOffice,

        such as a context menu connected to a document item in an archive, will not populate this

        member.<br />It is strongly suggested that the convention of using name=value for each string

        array element be followed here.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value object, specifying failure or success plus any optional, additional processing to be triggered
    content.vb: Public Function ExecuteDocumentCommand(documentInfo As IDocumentInfo, versionId As String, allowedReturnTypes As String(), command As String, ParamArray additionalData As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  nameWithType.vb: SoArc2.ExecuteDocumentCommand(IDocumentInfo, String, String(), String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String())
  name.vb: ExecuteDocumentCommand(IDocumentInfo, String, String(), String, String())
- uid: SuperOffice.CRM.Documents.SoArc2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  id: LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: LoadMetaData(IDocumentInfo)
  nameWithType: SoArc2.LoadMetaData(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRetrieve metadata owned by the plugin/repository, related to one document (excluding version-dependent metadata)\n"
  remarks: "\nA document plugin may consume and provide an arbitrary number of metadata fields. These are placed\nin a string, string dictionary, representing name/value pairs. This call should <strong>not</strong>\nretrieve metadata related to any particular version, only data related to the document as a whole.\n<p></p>\nThe NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call \nto this API to populate the ExtraFields property of the document entity carrier. Note, however, \nthat the carrier handed over to the client may contain other fields in addition to those \nsupplied by the document plugin, since the extrafields mechanism is generic and \nthere may be other metadata providers along the line.\n<p></p>\nAttribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the \n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\n"
  syntax:
    content: public Dictionary<string, string> LoadMetaData(IDocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document info used by the document plugin
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: >
        Dictionary of name=value strings, each representing one key and one value.

        Always throws InvalidOperationException.
    content.vb: Public Function LoadMetaData(documentInfo As IDocumentInfo) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.SoArc2.LoadMetaData*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  id: LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: LoadVersionInfo(IDocumentInfo, String)
  nameWithType: SoArc2.LoadVersionInfo(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRetrieve metadata owned by the plugin/repository, related to one particular\nversion of one document\n"
  remarks: "\nA document plugin may consume and provide an arbitrary number of metadata fields. These are placed\nin a string, string dictionary, representing name/value pairs. This call should only retrieve\nmetadata related to a version.\n<p></p>\nThe NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call \nto this API to populate the VersionInfo property of the document entity carrier. \n<p></p>\nAttribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the \n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\n<p></p>\nTo efficiently retrieve information about <strong>all</strong> versions, use the \n<xref href=\"SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> method, instead of iterating\nover this method.\n"
  syntax:
    content: public VersionInfo LoadVersionInfo(IDocumentInfo documentInfo, string versionId)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
      description: Version identifier, blank implies &apos;latest&apos; version
    return:
      type: SuperOffice.CRM.Documents.VersionInfo
      description: >
        Fully populated version info structure.

        Always throws InvalidOperationException.
    content.vb: Public Function LoadVersionInfo(documentInfo As IDocumentInfo, versionId As String) As VersionInfo
  overload: SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  id: SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: SaveMetaData(IDocumentInfo, Dictionary<String, String>)
  nameWithType: SoArc2.SaveMetaData(IDocumentInfo, Dictionary<String, String>)
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nStore/update plugin-dependent document metadata in the repository\n"
  remarks: "\nThis call is made when the document metadata should be stored, and is the complement of the\n<xref href=\"SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThe document plugin should extract whatever elements it \nrecognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception, \nas there may be other plugins along the line (not document plugins, but service-level field providers) that own the data. \nLikewise, absence of a value should be taken to imply “no change” to that value - not &quot;delete&quot;.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the \n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\n\nSoArc plugin does not use metadata.\n"
  syntax:
    content: public void SaveMetaData(IDocumentInfo incomingInfo, Dictionary<string, string> pluginData)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: >-
        SuperOffice document information. Note that the plugin is <strong>not</strong> responsible

        for storing this data; however, it is allowed to look at it, in case it influences how the document

        is stored. However, it should always be possible to retrieve a document using the ExternalReference

        or DocumentId keys alone.
    - id: pluginData
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Name/value dictionary containing metadata
    content.vb: Public Sub SaveMetaData(incomingInfo As IDocumentInfo, pluginData As Dictionary(Of String, String))
  overload: SuperOffice.CRM.Documents.SoArc2.SaveMetaData*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  nameWithType.vb: SoArc2.SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
- uid: SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  id: SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: SaveVersionInfo(IDocumentInfo, VersionInfo)
  nameWithType: SoArc2.SaveVersionInfo(IDocumentInfo, VersionInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo, SuperOffice.CRM.Documents.VersionInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nStore/update plugin-dependent document version metadata in the repository\n"
  remarks: "\nThis call is made when the document <strong>version</strong> metadata should be stored, and is the complement of the\n<xref href=\"SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThe document plugin should extract whatever elements it \nrecognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception, \nas there may be other plugins along the line (not document plugins, but service-level field providers) that own the data. \nLikewise, absence of a value should be taken to imply “no change” to that value - not &quot;delete&quot;.\n<p></p>\nIt is <strong>strongly suggested</strong> that non-string data be formatted according to the rules followed by the \n<xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class, to avoid problems\nwhen parsing dates and floating-point types between different cultures and platforms.\nAlways throws InvalidOperationException.\n"
  syntax:
    content: public void SaveVersionInfo(IDocumentInfo docInfo, VersionInfo versionInfo)
    parameters:
    - id: docInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionInfo
      type: SuperOffice.CRM.Documents.VersionInfo
      description: Version information to be saved
    content.vb: Public Sub SaveVersionInfo(docInfo As IDocumentInfo, versionInfo As VersionInfo)
  overload: SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.Exists(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.Exists(SuperOffice.CRM.IDocumentInfo)
  id: Exists(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: Exists(IDocumentInfo)
  nameWithType: SoArc2.Exists(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.Exists(SuperOffice.CRM.IDocumentInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDetermine if the document exists in the repository\n"
  remarks: "\nThe plugin should declare, through the <xref href=\"SuperOffice.CRM.Documents.Constants.Capabilities.FastExists\" data-throw-if-not-resolved=\"false\"></xref> property,\nwhether this call is highly efficient or not. If it is efficient, then document archive providers and similar code\nwill call it when populating an archive, otherwise not.\n"
  syntax:
    content: public bool Exists(IDocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
    return:
      type: System.Boolean
      description: true if the document exists in the repository, otherwise false
    content.vb: Public Function Exists(documentInfo As IDocumentInfo) As Boolean
  overload: SuperOffice.CRM.Documents.SoArc2.Exists*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  id: GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetLength(IDocumentInfo, String)
  nameWithType: SoArc2.GetLength(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetLength(SuperOffice.CRM.IDocumentInfo, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nReturn the length of the physical document. This should be an efficient method\n"
  syntax:
    content: public long GetLength(IDocumentInfo documentInfo, string versionId)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
      description: Version identifier, blank implies &apos;latest&apos; version
    return:
      type: System.Int64
      description: >-
        Physical document length in bytes - this should be the same as the length of the stream

        returned by the LoadDocumentStream method.
    content.vb: Public Function GetLength(documentInfo As IDocumentInfo, versionId As String) As Long
  overload: SuperOffice.CRM.Documents.SoArc2.GetLength*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  id: GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetTemplateExtension(IDocumentTemplateInfo)
  nameWithType: SoArc2.GetTemplateExtension(IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the &quot;extension&quot; for the template, i.e., what the file extension would have been - to \nhelp identify the stream content format\n"
  remarks: "\nTemplate documents are generally created in text editors and stored as files of some kind. The\nfile extension indicates the kind of document - doc, docx, xls, txt, and so on. While the template\nmay be stored inside the document repository as any kind of data byte collection, a concept\nakin to the file extension is still needed to help identify the document format, ahead of actually\nreading the template content.\n"
  syntax:
    content: public string GetTemplateExtension(IDocumentTemplateInfo templateInfo)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: 'Document template info: contains the extref/filename, template id, mime type.'
    return:
      type: System.String
      description: String equivalent to a file extension, for instance &quot;.docx&quot;
    content.vb: Public Function GetTemplateExtension(templateInfo As IDocumentTemplateInfo) As String
  overload: SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  id: LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStream(IDocumentTemplateInfo, String)
  nameWithType: SoArc2.LoadDocumentTemplateStream(IDocumentTemplateInfo, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the document template content as a stream. NetServer will read-to-end and close this stream\n"
  remarks: "\nDocument templates may be stored in a repository, with or without special content tags.\nBecause a document template does not have a corresponding document record within\nSuperOffice, there is no documentId to identify it.\n<p></p>\nThis call is used by NetServer to retrieve a document template based on either\nan externalreference value stored in the corresponding DocTmpl.Filename field,\nor the Id of the doctmpl record itself. The document plugin is free\nto use either method of identification.\n<p></p>\nMail templates are passed in using extref = &quot;filename=xyz&amp;allowPersonal=1&quot; and docTemplateId = 0\n"
  syntax:
    content: public Stream LoadDocumentTemplateStream(IDocumentTemplateInfo templateInfo, string languageCode)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: "Document template info: contains the extref/filename, template id, mime type.\nTemplateInfo.Id = 0 when archiving mail messages. \n"
    - id: languageCode
      type: System.String
      description: Language (en-US, nb-NO, etc) that the user is using in the user interface. Can be used to select language-specific templates.
    return:
      type: System.IO.Stream
      description: Stream containing the template content. Null if no suitable template found.
    content.vb: Public Function LoadDocumentTemplateStream(templateInfo As IDocumentTemplateInfo, languageCode As String) As Stream
  overload: SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  id: SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: SaveDocumentTemplateStream(IDocumentTemplateInfo, Stream, String)
  nameWithType: SoArc2.SaveDocumentTemplateStream(IDocumentTemplateInfo, Stream, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo, System.IO.Stream, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate or update the document template contents. Usually used when uploading a file to a new document template.\n"
  syntax:
    content: public TemplateInfo SaveDocumentTemplateStream(IDocumentTemplateInfo templateInfo, Stream content, string languageCode)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Name and tooltip from the document template record in the database. The ExtRef/Filename may be set if this is an edit rather than an add.
    - id: content
      type: System.IO.Stream
      description: Stream containing file content
    - id: languageCode
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    return:
      type: SuperOffice.CRM.Documents.TemplateInfo
      description: Template information with ExtRef/Filename and MimeType filled in. These values are saved in the DocTmpl record.
    content.vb: Public Function SaveDocumentTemplateStream(templateInfo As IDocumentTemplateInfo, content As Stream, languageCode As String) As TemplateInfo
  overload: SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  id: CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: CreateDocument(IDocumentInfo, ref String, String[], String, String[])
  nameWithType: SoArc2.CreateDocument(IDocumentInfo, ref String, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.CreateDocument(SuperOffice.CRM.IDocumentInfo, ref System.String, System.String[], System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate a document in the repository, intially without content\n"
  remarks: "\nExecution of this method should result in the creation of a document instance in the\nunderlying repository, with empty content. If locking is supported, the status should\nbe &apos;Checked-out&apos;; the document should not be visible to other users. If locking is not \nsupported, a zero-length content sh.ould be the result.\n<p></p>\nAll metadata should be saved, an externalReference key should be assigned, and\nthe file name/document name validated and reserved.\n<p></p><strong>Notes on semantics</strong><br />\nThe IDocumentInfo.<see cref=\"!:SuperOffice.CRM.IDocumentInfo.Semantics\"></see> property is used to specify the\nlocking/versioning semantics requested and implemented for a document. Semantics actually implemtned\nwill be the lowest of what is requested and what is supported. Thus, a document may request \n<see cref=\"!:SuperOffice.Data.DocumentSemantics.None\"></see> semantics even if versioning is optionally supported\nby the document plugin, and in that case no versioning or locking should be performed.\n<p></p>\nOn creation, if locking and/or versioning is supported and requested, then the document stream should\nbe saved to a temporary area. Calls to GetDocumentStream should return an empty stream until the first\ncall to CheckinDocument has succeeded. The result of that Checkin call will be the base version \n(version 1).\n<p></p>\nLocking semantics are set on creation and cannot be changed later.\n"
  syntax:
    content: public string CreateDocument(IDocumentInfo incomingInfo, ref string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: >-
        SuperOffice metadata for the document, including the document Id

        and locking/versioning sematics requested for this document.
    - id: fileName
      type: System.String
      description: >-
        Suggested file name/document name. The document plugin must validate this

        name and amend it if needed (this is a ref parameter). If the name needs to be changed

        for any reason, a new and valid name must be generated by the plugin, and returned

        to the caller.
    - id: extraFields
      type: System.String[]
      description: >-
        Plugin-dependent metadata for the document as a whole. The

        usual caveats apply, i.e., there may be name/value pairs in the parameter that

        belong to other parts of the system. Failure to recognize a name is not an error.
    - id: versionDecription
      type: System.String
      description: >-
        Description of the initial version, if versioning is supported

        and enabled for the document.
    - id: versionExtraFields
      type: System.String[]
      description: Plugin-dependent metadata for the initial version
    return:
      type: System.String
    content.vb: Public Function CreateDocument(incomingInfo As IDocumentInfo, ByRef fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String()) As String
  overload: SuperOffice.CRM.Documents.SoArc2.CreateDocument*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  nameWithType.vb: SoArc2.CreateDocument(IDocumentInfo, ByRef String, String(), String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.CreateDocument(SuperOffice.CRM.IDocumentInfo, ByRef System.String, System.String(), System.String, System.String())
  name.vb: CreateDocument(IDocumentInfo, ByRef String, String(), String, String())
- uid: SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  id: SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: SaveDocumentFromStream(IDocumentInfo, String[], Stream)
  nameWithType: SoArc2.SaveDocumentFromStream(IDocumentInfo, String[], Stream)
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo, System.String[], System.IO.Stream)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nSave the stream as the document content in the repository; depending on the state, this\nmay imply creating a temporary save pending a final checkin, or an immediately visible result.\n"
  remarks: "\nIf the document is currently checked out to the current user, then the stream should be saved, \nbut this call does not imply the automatic creation of a new version (visible to other users) \nor automatic checkin. However, it is an advantage if subsequent GetDocument calls made by \nthe same user using the same key return the latest known content – while other users see \nthe latest checked-in version.\n<p></p>\nIf the plugin does not support locking agnd versioning (or such semantics are not requested, see below), \nthen each call to this API overwrites \nany prior content completely and becomes the new, official content immediately. The Save operation \nshould be atomic, and should not destroy earlier content if it fails.\n<p></p>\nIf locking is supported and requested, the document is checked out and some other associate than the one \nthat has checked it out calls this API, a failure message should be returned.\n"
  syntax:
    content: public ReturnInfo SaveDocumentFromStream(IDocumentInfo incomingInfo, string[] allowedReturnTypes, Stream content)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: >-
        Incoming document metadata, used to identify the document. Metadata

        changes are <strong>not</strong> to be checked or saved by this operation - only the document stream is saved.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    - id: content
      type: System.IO.Stream
      description: >-
        Document content, a binary stream about which nothing is assumed. The

        document plugin should read-to-end and close this stream.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function SaveDocumentFromStream(incomingInfo As IDocumentInfo, allowedReturnTypes As String(), content As Stream) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  nameWithType.vb: SoArc2.SaveDocumentFromStream(IDocumentInfo, String(), Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo, System.String(), System.IO.Stream)
  name.vb: SaveDocumentFromStream(IDocumentInfo, String(), Stream)
- uid: SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  id: LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: LoadDocumentStream(IDocumentInfo, String)
  nameWithType: SoArc2.LoadDocumentStream(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet document content as a stream. NetServer will read-to-end and close this stream.\n"
  remarks: "\nIt is up to the document plugin whether it can open a stream directly into the underlying repository, \nor whether it has to extract the document to some temporary area and then stream that – \nhowever, the fewer buffers the better.\n"
  syntax:
    content: public Stream LoadDocumentStream(IDocumentInfo incomingInfo, string versionId)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document.
    - id: versionId
      type: System.String
      description: Optional version identifier, blank implies &apos;latest&apos; version
    return:
      type: System.IO.Stream
      description: Document content stream
    content.vb: Public Function LoadDocumentStream(incomingInfo As IDocumentInfo, versionId As String) As Stream
  overload: SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  id: GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentUrl(IDocumentInfo, String, Boolean)
  nameWithType: SoArc2.GetDocumentUrl(IDocumentInfo, String, Boolean)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo, System.String, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a WebDAV-compliant URL referring to the given document\n"
  remarks: "\nDocument plugins may support document access via WebDAV. This call is used to retrieve a WebDAV url that \nwill give the specified access to the document. This URL will be passed to the ultimate client \n(most probably a text editor application), and control will not return to NetServer.\n<p></p>\nThe string returned here should be a fully resolved URL that can be given directly to the editor application.\n"
  syntax:
    content: public string GetDocumentUrl(IDocumentInfo incomingInfo, string versionId, bool writeableUrl)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document.
    - id: versionId
      type: System.String
      description: Optional version identifier, blank implies &apos;latest&apos; version
    - id: writeableUrl
      type: System.Boolean
      description: >-
        If true, then the request URL should allow the document editor to write content

        back to the repository; otherwise, a url that does not support writeback should be supplied

        if possible.
    return:
      type: System.String
      description: '&quot;file:////fileserver/soarc/user/2013.2/file.ext&quot;'
    content.vb: Public Function GetDocumentUrl(incomingInfo As IDocumentInfo, versionId As String, writeableUrl As Boolean) As String
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  id: DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: DeleteDocument(IDocumentInfo, String[])
  nameWithType: SoArc2.DeleteDocument(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.DeleteDocument(SuperOffice.CRM.IDocumentInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDelete a document, all versions and all metadata from the repository\n"
  syntax:
    content: public ReturnInfo DeleteDocument(IDocumentInfo documentInfo, string[] allowedReturnTypes)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function DeleteDocument(documentInfo As IDocumentInfo, allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.DeleteDocument*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  nameWithType.vb: SoArc2.DeleteDocument(IDocumentInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.DeleteDocument(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: DeleteDocument(IDocumentInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  id: RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: RenameDocument(IDocumentInfo, String)
  nameWithType: SoArc2.RenameDocument(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.RenameDocument(SuperOffice.CRM.IDocumentInfo, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nRename a document in the repository\n"
  remarks: "\nThe document name should be changed from the existing to the new name. However,\nif the new name is not valid (or collides with an existing name of some other\ndocument), then the plugin should amend the name to a valid one and return\nit, instead of throwing an exception.\n"
  syntax:
    content: public string RenameDocument(IDocumentInfo documentInfo, string newFileName)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: newFileName
      type: System.String
      description: Suggested new document name
    return:
      type: System.String
      description: >-
        Actual new document name, limited to 254 characters

        If renaming was not occured this will return an empty string
    content.vb: Public Function RenameDocument(documentInfo As IDocumentInfo, newFileName As String) As String
  overload: SuperOffice.CRM.Documents.SoArc2.RenameDocument*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  id: GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetCheckoutState(IDocumentInfo)
  nameWithType: SoArc2.GetCheckoutState(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the checkout state of a document\n"
  remarks: "\nThis API is called from inside document archive providers if the plugin has declared that it\nsupports fast fetching of this attribute. If the document plugin does not support locking or\nversioning, then the return value should have state NotCheckedOut, associate id 0 and blank name.\n"
  syntax:
    content: public CheckoutInfo GetCheckoutState(IDocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    return:
      type: SuperOffice.CRM.Documents.CheckoutInfo
      description: Object that describes the checkout state of the document
    content.vb: Public Function GetCheckoutState(documentInfo As IDocumentInfo) As CheckoutInfo
  overload: SuperOffice.CRM.Documents.SoArc2.GetCheckoutState*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  id: CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: CheckoutDocument(IDocumentInfo, String[])
  nameWithType: SoArc2.CheckoutDocument(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCheck out the document for editing\n"
  remarks: "\nA document plugin that supports versioning may internally prepare to receive new content and \nprepare a new internal version, but a subsequent GetDocumentVersionList call should <strong>not</strong> \nshow this version – not until CheckInDocument has been called. \n<p></p>\nAfter the completion of this call, the document is in checked out state and <xref href=\"SuperOffice.CRM.Documents.SoArc2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> \nshould return “Own” as the status. <see cref=\"!:PutDocumentFromStream\"></see> calls on behalf of other users should\nfail, as should <xref href=\"SuperOffice.CRM.Documents.SoArc2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.Documents.SoArc2.CheckinDocument(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d%2cSystem.String%2cSystem.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> calls on behalf of other users.\n<p></p>\nIf the document plugin does not support locking or versioning, then this call should perform no action.\n"
  syntax:
    content: public ReturnInfo CheckoutDocument(IDocumentInfo documentInfo, string[] allowedReturnTypes)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function CheckoutDocument(documentInfo As IDocumentInfo, allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.CheckoutDocument*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  nameWithType.vb: SoArc2.CheckoutDocument(IDocumentInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: CheckoutDocument(IDocumentInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  id: CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: CheckinDocument(IDocumentInfo, String[], String, String[])
  nameWithType: SoArc2.CheckinDocument(IDocumentInfo, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.CheckinDocument(SuperOffice.CRM.IDocumentInfo, System.String[], System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCheck in a currently checked-out document\n"
  remarks: "\nIf the document plugin supports locking and the requesting user is the one who checked out the document, \nthen the last-saved content by that user should become the new publicly visible content, and \nthe checkout state should be reset. Calls by other users should result in failure and no state change.\n<p></p>\nIf the document plugin does not support locking or versioning, then this call should perform no action.\n"
  syntax:
    content: public ReturnInfo CheckinDocument(IDocumentInfo documentInfo, string[] allowedReturnTypes, string versionDescription, string[] versionExtraFields)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    - id: versionDescription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function CheckinDocument(documentInfo As IDocumentInfo, allowedReturnTypes As String(), versionDescription As String, versionExtraFields As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.CheckinDocument*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  nameWithType.vb: SoArc2.CheckinDocument(IDocumentInfo, String(), String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.CheckinDocument(SuperOffice.CRM.IDocumentInfo, System.String(), System.String, System.String())
  name.vb: CheckinDocument(IDocumentInfo, String(), String, String())
- uid: SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  id: UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: UndoCheckoutDocument(IDocumentInfo, String[])
  nameWithType: SoArc2.UndoCheckoutDocument(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nUndo (abandon) a checkout\n"
  remarks: "\nIf the document plugin supports locking and the requesting user is the one who checked out the document, \nthen any content saved since the checkout should be discarded and the checkout state reset. \nThe content will be as before checkout. \n<p></p>\nCalls by other users should result in failure and no state change – except if the calling user has the right to force an undo\n<p></p>\nIf the document plugin does not support locking or versioning, then this call should perform no action.\n"
  syntax:
    content: public ReturnInfo UndoCheckoutDocument(IDocumentInfo documentInfo, string[] allowedReturnTypes)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function UndoCheckoutDocument(documentInfo As IDocumentInfo, allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  nameWithType.vb: SoArc2.UndoCheckoutDocument(IDocumentInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: UndoCheckoutDocument(IDocumentInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  id: GetVersionList(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetVersionList(IDocumentInfo)
  nameWithType: SoArc2.GetVersionList(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the list of current versions for the given document\n"
  remarks: "\nThe list should not include an “in-work” version, if the document is currently checked out – only \nversions visible and accessible to any authorized user.\n<p></p>\nIf the document plugin does not support versioning, then this call should return an empty array.\n"
  syntax:
    content: public VersionInfo[] GetVersionList(IDocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    return:
      type: SuperOffice.CRM.Documents.VersionInfo[]
      description: Array of objects describing the existing, committed versions for this document
    content.vb: Public Function GetVersionList(documentInfo As IDocumentInfo) As VersionInfo()
  overload: SuperOffice.CRM.Documents.SoArc2.GetVersionList*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  id: GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GoTravel(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  nameWithType: SoArc2.GoTravel(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  fullName: SuperOffice.CRM.Documents.SoArc2.GoTravel(System.Int32, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nStart a Travel (offline) session. This method is called at a time when both the central and local storage\nsystems are available, and should copy or otherwise prepare for an offline session. \n"
  remarks: "\nWhile offline, the following document archive items need to be available:\n<ul><li>All templates, in all language variants</li><li>All documents for the current user, in the current period</li><li>All documents for the current user, in the previous period</li></ul>\nA period is half a year. In May this would mean the Jul-Dec + Jan-Jun. Since there may be <strong>many</strong> templates,\ncaching them between travel sessions is highly recommended, almost mandatory; otherwise template/document copying\nmay be the major time consumer when going on travel.\n"
  syntax:
    content: public ReturnInfo GoTravel(int associateId, string localArchiveRoot, ProgressEstimateCallback estimate, ProgressStepCallback step)
    parameters:
    - id: associateId
      type: System.Int32
      description: ID of associate who is the document owner
    - id: localArchiveRoot
      type: System.String
      description: "ROot directory of local archive. This is a value that is only known to the \nTravel system in the Windows client, so it has to be passed in as a parameter"
    - id: estimate
      type: SuperOffice.CRM.ProgressEstimateCallback
      description: Callback to set the expected number of items to copy, to scale the progress bar
    - id: step
      type: SuperOffice.CRM.ProgressStepCallback
      description: Callback to advance the progress bar by one step
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function GoTravel(associateId As Integer, localArchiveRoot As String, estimate As ProgressEstimateCallback, step As ProgressStepCallback) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.GoTravel*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  id: HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: HomeComing(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  nameWithType: SoArc2.HomeComing(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  fullName: SuperOffice.CRM.Documents.SoArc2.HomeComing(System.Int32, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nEnd a Travel (offline) session. This method is called at a time when both the central and local storage\nsystems are available, and should update any documents whose content has been changed locally, into the central storage.\nTemplates cannot be changed locally and should not be copied back!\n"
  remarks: "\n"
  syntax:
    content: public ReturnInfo HomeComing(int associateId, string centralArchiveRoot, ProgressEstimateCallback estimate, ProgressStepCallback step)
    parameters:
    - id: associateId
      type: System.Int32
      description: ID of associate who is the document owner
    - id: centralArchiveRoot
      type: System.String
      description: "Root directory of <strong>central!</strong> archive. This is a value that is only known to the \nTravel system in the Windows client at this time, so it has to be passed in as a parameter (ArchivePath points to the local archive)"
    - id: estimate
      type: SuperOffice.CRM.ProgressEstimateCallback
      description: Callback to set the expected number of items to copy, to scale the progress bar
    - id: step
      type: SuperOffice.CRM.ProgressStepCallback
      description: Callback to advance the progress bar by one step
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function HomeComing(associateId As Integer, centralArchiveRoot As String, estimate As ProgressEstimateCallback, step As ProgressStepCallback) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.HomeComing*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  id: CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: CreateDefaultDocumentTemplate(Int32, IDocumentTemplateInfo)
  nameWithType: SoArc2.CreateDefaultDocumentTemplate(Int32, IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate(System.Int32, SuperOffice.CRM.IDocumentTemplateInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nCreate a default document based on the given documentType. Called when creating a new template.\n"
  syntax:
    content: public TemplateInfo CreateDefaultDocumentTemplate(int documentTypeKey, IDocumentTemplateInfo documentTemplateInfo)
    parameters:
    - id: documentTypeKey
      type: System.Int32
      description: Id for a document type. NULL or blank if no types are supported.
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Document template info
    return:
      type: SuperOffice.CRM.Documents.TemplateInfo
      description: >-
        Extref/Filename for new template. This value is written to the template&apos;s Filename property.

        Return NULL if no change, or if no document created.
    content.vb: Public Function CreateDefaultDocumentTemplate(documentTypeKey As Integer, documentTemplateInfo As IDocumentTemplateInfo) As TemplateInfo
  overload: SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates
  id: GetSupportedDocumentTypesForDocumentTemplates
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetSupportedDocumentTypesForDocumentTemplates()
  nameWithType: SoArc2.GetSupportedDocumentTypesForDocumentTemplates()
  fullName: SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a list of supported document template types. \n"
  syntax:
    content: public Dictionary<int, string> GetSupportedDocumentTypesForDocumentTemplates()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
      description: An dictionary of key=display-name for supported document types for template. Empty dictionary if no document types supported.
    content.vb: Public Function GetSupportedDocumentTypesForDocumentTemplates As Dictionary(Of Integer, String)
  overload: SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  id: GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateProperties(IDocumentTemplateInfo, String[])
  nameWithType: SoArc2.GetDocumentTemplateProperties(IDocumentTemplateInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the values of certain properties, for a given document template\n"
  remarks: "\nEach document can have a number of properties associated with it. A set of standard properties\nis defined in the <xref href=\"SuperOffice.CRM.Documents.Constants.Properties\" data-throw-if-not-resolved=\"false\"></xref> class. Ideally, retrieving properties should\nbe a lightweight operation.\n<p></p>\nNote that &apos;properties&apos; are a one-way mechanism where the document plugin provides information about\nthe document or certain aspects of it. This is not the same as document-specific\nmetadata, which is handled by the <xref href=\"SuperOffice.CRM.Documents.SoArc2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.Documents.SoArc2.SaveMetaData(SuperOffice.CRM.IDocumentInfo%2cSystem.Collections.Generic.Dictionary%7bSystem.String%2cSystem.String%7d)\" data-throw-if-not-resolved=\"false\"></xref>\nmethods.\n"
  syntax:
    content: public Dictionary<string, string> GetDocumentTemplateProperties(IDocumentTemplateInfo templateInfo, string[] requestedProperties)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    - id: requestedProperties
      type: System.String[]
      description: Array of property strings, for which values are requested
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: >-
        Dictionary of name=value pairs, where the name is one of the requested property strings, and the value

        is the value of that property for the given document.
    content.vb: Public Function GetDocumentTemplateProperties(templateInfo As IDocumentTemplateInfo, requestedProperties As String()) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  nameWithType.vb: SoArc2.GetDocumentTemplateProperties(IDocumentTemplateInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo, System.String())
  name.vb: GetDocumentTemplateProperties(IDocumentTemplateInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  id: GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateUrl(IDocumentTemplateInfo, Boolean, String)
  nameWithType: SoArc2.GetDocumentTemplateUrl(IDocumentTemplateInfo, Boolean, String)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo, System.Boolean, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet a URL referring to the given document template:  &quot;file:////fileserver/soarc/template/file.ext&quot;\n"
  remarks: "\nDocument plugins may support document access via URLs. This call is used to retrieve a url that \nwill give the specified access to the document. This URL will be passed to the ultimate client \n(most probably a browser, but could be a text editor application), and control will not return to NetServer.\n<p></p>\nThe string returned here should be a fully resolved URL that can be given directly to the editor application.\n"
  syntax:
    content: public string GetDocumentTemplateUrl(IDocumentTemplateInfo documentTemplateInfo, bool writeableUrl, string languageCode)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: The document template info from database
    - id: writeableUrl
      type: System.Boolean
      description: >-
        If true, then the request URL should allow the document editor to write content

        back to the repository; otherwise, a url that does not support writeback should be supplied

        if possible.
    - id: languageCode
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    return:
      type: System.String
      description: 'URL that gives access to the template: &quot;file:////fileserver/soarc/template/file.ext&quot;'
    content.vb: Public Function GetDocumentTemplateUrl(documentTemplateInfo As IDocumentTemplateInfo, writeableUrl As Boolean, languageCode As String) As String
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  id: GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateLanguages(IDocumentTemplateInfo)
  nameWithType: SoArc2.GetDocumentTemplateLanguages(IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nGet the list of languages supported by the given template, not including the default (blank) language.\n"
  remarks: Used when populating the dropdown list in the admin client or the document dialog.
  syntax:
    content: public string[] GetDocumentTemplateLanguages(IDocumentTemplateInfo documentTemplateInfo)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: The template we are curious about
    return:
      type: System.String[]
      description: 'Array of ISO codes: (&quot;en-US&quot;, &quot;nb-NO&quot;, &quot;fr&quot;)'
    content.vb: Public Function GetDocumentTemplateLanguages(documentTemplateInfo As IDocumentTemplateInfo) As String()
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  id: DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: DeleteDocumentTemplate(IDocumentTemplateInfo, String[])
  nameWithType: SoArc2.DeleteDocumentTemplate(IDocumentTemplateInfo, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDelete a document template, all language variations and all metadata from the repository\n"
  syntax:
    content: public ReturnInfo DeleteDocumentTemplate(IDocumentTemplateInfo documentTemplateInfo, string[] allowedReturnTypes)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is

        empty then no limits are placed on return type. (&quot;None&quot;, &quot;Message&quot;, &quot;SoProtocol&quot;, &quot;CustomGUI&quot;, &quot;Other&quot;)
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function DeleteDocumentTemplate(documentTemplateInfo As IDocumentTemplateInfo, allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  nameWithType.vb: SoArc2.DeleteDocumentTemplate(IDocumentTemplateInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo, System.String())
  name.vb: DeleteDocumentTemplate(IDocumentTemplateInfo, String())
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath(System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath(System.String)
  id: GetDocumentIdFromPath(System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: GetDocumentIdFromPath(String)
  nameWithType: SoArc2.GetDocumentIdFromPath(String)
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nMap file path to a document id.\n"
  syntax:
    content: public int GetDocumentIdFromPath(string documentPathAndName)
    parameters:
    - id: documentPathAndName
      type: System.String
      description: '&quot;C:\SO_ARC\USER\2014.1\foobar.docx&quot;'
    return:
      type: System.Int32
      description: "123"
    content.vb: Public Function GetDocumentIdFromPath(documentPathAndName As String) As Integer
  overload: SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  id: DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String[])
  nameWithType: SoArc2.DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String[])
  fullName: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: "\nDelete a specific language variation from the document template\n"
  syntax:
    content: public ReturnInfo DeleteDocumentTemplateLanguage(IDocumentTemplateInfo documentTemplateInfo, string languageCode, string[] allowedReturnTypes)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Fully populated document template metadata used to identity the template.
    - id: languageCode
      type: System.String
      description: The language variation to delete
    - id: allowedReturnTypes
      type: System.String[]
      description: Array of names of allowed return types.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Public Function DeleteDocumentTemplateLanguage(documentTemplateInfo As IDocumentTemplateInfo, languageCode As String, allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage*
  implements:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  nameWithType.vb: SoArc2.DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.String())
  name.vb: DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String())
- uid: SuperOffice.CRM.Documents.SoArc2.IsNameValid(System.String)
  commentId: M:SuperOffice.CRM.Documents.SoArc2.IsNameValid(System.String)
  id: IsNameValid(System.String)
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: IsNameValid(String)
  nameWithType: SoArc2.IsNameValid(String)
  fullName: SuperOffice.CRM.Documents.SoArc2.IsNameValid(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public bool IsNameValid(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsNameValid(name As String) As Boolean
  overload: SuperOffice.CRM.Documents.SoArc2.IsNameValid*
  implements:
  - SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.SoArc2.Locking
  commentId: P:SuperOffice.CRM.Documents.SoArc2.Locking
  id: Locking
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: Locking
  nameWithType: SoArc2.Locking
  fullName: SuperOffice.CRM.Documents.SoArc2.Locking
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string Locking { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Locking As String
  overload: SuperOffice.CRM.Documents.SoArc2.Locking*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.SoArc2.FastLockStatus
  commentId: P:SuperOffice.CRM.Documents.SoArc2.FastLockStatus
  id: FastLockStatus
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: FastLockStatus
  nameWithType: SoArc2.FastLockStatus
  fullName: SuperOffice.CRM.Documents.SoArc2.FastLockStatus
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string FastLockStatus { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FastLockStatus As String
  overload: SuperOffice.CRM.Documents.SoArc2.FastLockStatus*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.SoArc2.Versioning
  commentId: P:SuperOffice.CRM.Documents.SoArc2.Versioning
  id: Versioning
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: Versioning
  nameWithType: SoArc2.Versioning
  fullName: SuperOffice.CRM.Documents.SoArc2.Versioning
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string Versioning { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Versioning As String
  overload: SuperOffice.CRM.Documents.SoArc2.Versioning*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.SoArc2.FastVersionList
  commentId: P:SuperOffice.CRM.Documents.SoArc2.FastVersionList
  id: FastVersionList
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: FastVersionList
  nameWithType: SoArc2.FastVersionList
  fullName: SuperOffice.CRM.Documents.SoArc2.FastVersionList
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string FastVersionList { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FastVersionList As String
  overload: SuperOffice.CRM.Documents.SoArc2.FastVersionList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.SoArc2.FastExists
  commentId: P:SuperOffice.CRM.Documents.SoArc2.FastExists
  id: FastExists
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: FastExists
  nameWithType: SoArc2.FastExists
  fullName: SuperOffice.CRM.Documents.SoArc2.FastExists
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string FastExists { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FastExists As String
  overload: SuperOffice.CRM.Documents.SoArc2.FastExists*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize
  commentId: P:SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize
  id: MaxDocumentSize
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: MaxDocumentSize
  nameWithType: SoArc2.MaxDocumentSize
  fullName: SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public int MaxDocumentSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxDocumentSize As Integer
  overload: SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Documents.SoArc2.Timeout
  commentId: P:SuperOffice.CRM.Documents.SoArc2.Timeout
  id: Timeout
  parent: SuperOffice.CRM.Documents.SoArc2
  langs:
  - csharp
  - vb
  name: Timeout
  nameWithType: SoArc2.Timeout
  fullName: SuperOffice.CRM.Documents.SoArc2.Timeout
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public int Timeout { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Timeout As Integer
  overload: SuperOffice.CRM.Documents.SoArc2.Timeout*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.Documents
  commentId: N:SuperOffice.CRM.Documents
  isExternal: true
  name: SuperOffice.CRM.Documents
  nameWithType: SuperOffice.CRM.Documents
  fullName: SuperOffice.CRM.Documents
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2
  commentId: T:SuperOffice.CRM.Documents.IDocumentPlugin2
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: IDocumentPlugin2
  nameWithType: IDocumentPlugin2
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2
- uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename
  commentId: T:SuperOffice.Plugins.CRM.Documents.IAssociateRename
  parent: SuperOffice.Plugins.CRM.Documents
  isExternal: true
  name: IAssociateRename
  nameWithType: IAssociateRename
  fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename
- uid: SuperOffice.CRM.Documents.IDocumentPluginTravel
  commentId: T:SuperOffice.CRM.Documents.IDocumentPluginTravel
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: IDocumentPluginTravel
  nameWithType: IDocumentPluginTravel
  fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoArc2, To>()
  nameWithType: EnumUtil.MapEnums<SoArc2, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.SoArc2, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoArc2, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.SoArc2, To)()
  name.vb: MapEnums(Of SoArc2, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoArc2, To>
    nameWithType: EnumUtil.MapEnums<SoArc2, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.SoArc2, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoArc2, To)
    nameWithType: EnumUtil.MapEnums(Of SoArc2, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.SoArc2, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoArc2, To>()
  nameWithType: Converters.MapEnums<SoArc2, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.SoArc2, To>()
  nameWithType.vb: Converters.MapEnums(Of SoArc2, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.SoArc2, To)()
  name.vb: MapEnums(Of SoArc2, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoArc2, To>
    nameWithType: Converters.MapEnums<SoArc2, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.SoArc2, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoArc2, To)
    nameWithType: Converters.MapEnums(Of SoArc2, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.SoArc2, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Plugins.CRM.Documents
  commentId: N:SuperOffice.Plugins.CRM.Documents
  isExternal: true
  name: SuperOffice.Plugins.CRM.Documents
  nameWithType: SuperOffice.Plugins.CRM.Documents
  fullName: SuperOffice.Plugins.CRM.Documents
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Documents.SoArc2CheckoutHelper
  commentId: T:SuperOffice.CRM.Documents.SoArc2CheckoutHelper
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: SoArc2CheckoutHelper
  nameWithType: SoArc2CheckoutHelper
  fullName: SuperOffice.CRM.Documents.SoArc2CheckoutHelper
- uid: SuperOffice.CRM.Documents.SoArc2.AssociateRename*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.AssociateRename
  isExternal: true
  name: AssociateRename
  nameWithType: SoArc2.AssociateRename
  fullName: SuperOffice.CRM.Documents.SoArc2.AssociateRename
- uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String,System.String)
  commentId: M:SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String,System.String)
  parent: SuperOffice.Plugins.CRM.Documents.IAssociateRename
  isExternal: true
  name: AssociateRename(String, String)
  nameWithType: IAssociateRename.AssociateRename(String, String)
  fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String,System.String)
    name: AssociateRename
    nameWithType: IAssociateRename.AssociateRename
    fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String,System.String)
    name: AssociateRename
    nameWithType: IAssociateRename.AssociateRename
    fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Documents.SoArc2.#ctor*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.#ctor
  isExternal: true
  name: SoArc2
  nameWithType: SoArc2.SoArc2
  fullName: SuperOffice.CRM.Documents.SoArc2.SoArc2
- uid: SuperOffice.CRM.IConfiguration
  commentId: T:SuperOffice.CRM.IConfiguration
  parent: SuperOffice.CRM
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: SuperOffice.CRM.IConfiguration
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
- uid: SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities
  isExternal: true
  name: GetPluginCapabilities
  nameWithType: SoArc2.GetPluginCapabilities
  fullName: SuperOffice.CRM.Documents.SoArc2.GetPluginCapabilities
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetPluginCapabilities()
  nameWithType: IDocumentPlugin2.GetPluginCapabilities()
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
    name: GetPluginCapabilities
    nameWithType: IDocumentPlugin2.GetPluginCapabilities
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
    name: GetPluginCapabilities
    nameWithType: IDocumentPlugin2.GetPluginCapabilities
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties
  isExternal: true
  name: GetDocumentProperties
  nameWithType: SoArc2.GetDocumentProperties
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentProperties
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentProperties(IDocumentInfo, String[])
  nameWithType: IDocumentPlugin2.GetDocumentProperties(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.GetDocumentProperties(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: GetDocumentProperties(IDocumentInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: GetDocumentProperties
    nameWithType: IDocumentPlugin2.GetDocumentProperties
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: GetDocumentProperties
    nameWithType: IDocumentPlugin2.GetDocumentProperties
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.IDocumentInfo
  commentId: T:SuperOffice.CRM.IDocumentInfo
  parent: SuperOffice.CRM
  isExternal: true
  name: IDocumentInfo
  nameWithType: IDocumentInfo
  fullName: SuperOffice.CRM.IDocumentInfo
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands
  isExternal: true
  name: GetDocumentCommands
  nameWithType: SoArc2.GetDocumentCommands
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentCommands
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentCommands(IDocumentInfo, String[])
  nameWithType: IDocumentPlugin2.GetDocumentCommands(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.GetDocumentCommands(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: GetDocumentCommands(IDocumentInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: GetDocumentCommands
    nameWithType: IDocumentPlugin2.GetDocumentCommands
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: GetDocumentCommands
    nameWithType: IDocumentPlugin2.GetDocumentCommands
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.CommandInfo[]
  isExternal: true
  name: CommandInfo[]
  nameWithType: CommandInfo[]
  fullName: SuperOffice.CRM.Documents.CommandInfo[]
  nameWithType.vb: CommandInfo()
  fullName.vb: SuperOffice.CRM.Documents.CommandInfo()
  name.vb: CommandInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: SuperOffice.CRM.Documents.CommandInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: SuperOffice.CRM.Documents.CommandInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand
  isExternal: true
  name: ExecuteDocumentCommand
  nameWithType: SoArc2.ExecuteDocumentCommand
  fullName: SuperOffice.CRM.Documents.SoArc2.ExecuteDocumentCommand
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: ExecuteDocumentCommand(IDocumentInfo, String, String[], String, String[])
  nameWithType: IDocumentPlugin2.ExecuteDocumentCommand(IDocumentInfo, String, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[])
  nameWithType.vb: IDocumentPlugin2.ExecuteDocumentCommand(IDocumentInfo, String, String(), String, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String())
  name.vb: ExecuteDocumentCommand(IDocumentInfo, String, String(), String, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
    name: ExecuteDocumentCommand
    nameWithType: IDocumentPlugin2.ExecuteDocumentCommand
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
    name: ExecuteDocumentCommand
    nameWithType: IDocumentPlugin2.ExecuteDocumentCommand
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ReturnInfo
  commentId: T:SuperOffice.CRM.ReturnInfo
  parent: SuperOffice.CRM
  isExternal: true
  name: ReturnInfo
  nameWithType: ReturnInfo
  fullName: SuperOffice.CRM.ReturnInfo
- uid: SuperOffice.CRM.Documents.SoArc2.LoadMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.LoadMetaData
  isExternal: true
  name: LoadMetaData
  nameWithType: SoArc2.LoadMetaData
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadMetaData
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: LoadMetaData(IDocumentInfo)
  nameWithType: IDocumentPlugin2.LoadMetaData(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
    name: LoadMetaData
    nameWithType: IDocumentPlugin2.LoadMetaData
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
    name: LoadMetaData
    nameWithType: IDocumentPlugin2.LoadMetaData
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo
  isExternal: true
  name: LoadVersionInfo
  nameWithType: SoArc2.LoadVersionInfo
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadVersionInfo
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: LoadVersionInfo(IDocumentInfo, String)
  nameWithType: IDocumentPlugin2.LoadVersionInfo(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
    name: LoadVersionInfo
    nameWithType: IDocumentPlugin2.LoadVersionInfo
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
    name: LoadVersionInfo
    nameWithType: IDocumentPlugin2.LoadVersionInfo
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.VersionInfo
  commentId: T:SuperOffice.CRM.Documents.VersionInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: VersionInfo
  nameWithType: VersionInfo
  fullName: SuperOffice.CRM.Documents.VersionInfo
- uid: SuperOffice.CRM.Documents.SoArc2.SaveMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.SaveMetaData
  isExternal: true
  name: SaveMetaData
  nameWithType: SoArc2.SaveMetaData
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveMetaData
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: SaveMetaData(IDocumentInfo, Dictionary<String, String>)
  nameWithType: IDocumentPlugin2.SaveMetaData(IDocumentInfo, Dictionary<String, String>)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: IDocumentPlugin2.SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
    name: SaveMetaData
    nameWithType: IDocumentPlugin2.SaveMetaData
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
    name: SaveMetaData
    nameWithType: IDocumentPlugin2.SaveMetaData
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo
  isExternal: true
  name: SaveVersionInfo
  nameWithType: SoArc2.SaveVersionInfo
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveVersionInfo
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: SaveVersionInfo(IDocumentInfo, VersionInfo)
  nameWithType: IDocumentPlugin2.SaveVersionInfo(IDocumentInfo, VersionInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo, SuperOffice.CRM.Documents.VersionInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
    name: SaveVersionInfo
    nameWithType: IDocumentPlugin2.SaveVersionInfo
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    nameWithType: VersionInfo
    fullName: SuperOffice.CRM.Documents.VersionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
    name: SaveVersionInfo
    nameWithType: IDocumentPlugin2.SaveVersionInfo
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    nameWithType: VersionInfo
    fullName: SuperOffice.CRM.Documents.VersionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.Exists*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.Exists
  isExternal: true
  name: Exists
  nameWithType: SoArc2.Exists
  fullName: SuperOffice.CRM.Documents.SoArc2.Exists
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: Exists(IDocumentInfo)
  nameWithType: IDocumentPlugin2.Exists(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)
    name: Exists
    nameWithType: IDocumentPlugin2.Exists
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)
    name: Exists
    nameWithType: IDocumentPlugin2.Exists
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Documents.SoArc2.GetLength*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetLength
  isExternal: true
  name: GetLength
  nameWithType: SoArc2.GetLength
  fullName: SuperOffice.CRM.Documents.SoArc2.GetLength
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetLength(IDocumentInfo, String)
  nameWithType: IDocumentPlugin2.GetLength(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
    name: GetLength
    nameWithType: IDocumentPlugin2.GetLength
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)
    name: GetLength
    nameWithType: IDocumentPlugin2.GetLength
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension
  isExternal: true
  name: GetTemplateExtension
  nameWithType: SoArc2.GetTemplateExtension
  fullName: SuperOffice.CRM.Documents.SoArc2.GetTemplateExtension
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetTemplateExtension(IDocumentTemplateInfo)
  nameWithType: IDocumentPlugin2.GetTemplateExtension(IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
    name: GetTemplateExtension
    nameWithType: IDocumentPlugin2.GetTemplateExtension
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)
    name: GetTemplateExtension
    nameWithType: IDocumentPlugin2.GetTemplateExtension
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.IDocumentTemplateInfo
  commentId: T:SuperOffice.CRM.IDocumentTemplateInfo
  parent: SuperOffice.CRM
  isExternal: true
  name: IDocumentTemplateInfo
  nameWithType: IDocumentTemplateInfo
  fullName: SuperOffice.CRM.IDocumentTemplateInfo
- uid: SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream
  isExternal: true
  name: LoadDocumentTemplateStream
  nameWithType: SoArc2.LoadDocumentTemplateStream
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadDocumentTemplateStream
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: LoadDocumentTemplateStream(IDocumentTemplateInfo, String)
  nameWithType: IDocumentPlugin2.LoadDocumentTemplateStream(IDocumentTemplateInfo, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
    name: LoadDocumentTemplateStream
    nameWithType: IDocumentPlugin2.LoadDocumentTemplateStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
    name: LoadDocumentTemplateStream
    nameWithType: IDocumentPlugin2.LoadDocumentTemplateStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream
  isExternal: true
  name: SaveDocumentTemplateStream
  nameWithType: SoArc2.SaveDocumentTemplateStream
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveDocumentTemplateStream
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: SaveDocumentTemplateStream(IDocumentTemplateInfo, Stream, String)
  nameWithType: IDocumentPlugin2.SaveDocumentTemplateStream(IDocumentTemplateInfo, Stream, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo, System.IO.Stream, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
    name: SaveDocumentTemplateStream
    nameWithType: IDocumentPlugin2.SaveDocumentTemplateStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)
    name: SaveDocumentTemplateStream
    nameWithType: IDocumentPlugin2.SaveDocumentTemplateStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.TemplateInfo
  commentId: T:SuperOffice.CRM.Documents.TemplateInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: TemplateInfo
  nameWithType: TemplateInfo
  fullName: SuperOffice.CRM.Documents.TemplateInfo
- uid: SuperOffice.CRM.Documents.SoArc2.CreateDocument*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.CreateDocument
  isExternal: true
  name: CreateDocument
  nameWithType: SoArc2.CreateDocument
  fullName: SuperOffice.CRM.Documents.SoArc2.CreateDocument
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: CreateDocument(IDocumentInfo, String, String[], String, String[])
  nameWithType: IDocumentPlugin2.CreateDocument(IDocumentInfo, String, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo, System.String, System.String[], System.String, System.String[])
  nameWithType.vb: IDocumentPlugin2.CreateDocument(IDocumentInfo, String, String(), String, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo, System.String, System.String(), System.String, System.String())
  name.vb: CreateDocument(IDocumentInfo, String, String(), String, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
    name: CreateDocument
    nameWithType: IDocumentPlugin2.CreateDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
    name: CreateDocument
    nameWithType: IDocumentPlugin2.CreateDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream
  isExternal: true
  name: SaveDocumentFromStream
  nameWithType: SoArc2.SaveDocumentFromStream
  fullName: SuperOffice.CRM.Documents.SoArc2.SaveDocumentFromStream
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: SaveDocumentFromStream(IDocumentInfo, String[], Stream)
  nameWithType: IDocumentPlugin2.SaveDocumentFromStream(IDocumentInfo, String[], Stream)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo, System.String[], System.IO.Stream)
  nameWithType.vb: IDocumentPlugin2.SaveDocumentFromStream(IDocumentInfo, String(), Stream)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo, System.String(), System.IO.Stream)
  name.vb: SaveDocumentFromStream(IDocumentInfo, String(), Stream)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
    name: SaveDocumentFromStream
    nameWithType: IDocumentPlugin2.SaveDocumentFromStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
    name: SaveDocumentFromStream
    nameWithType: IDocumentPlugin2.SaveDocumentFromStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream
  isExternal: true
  name: LoadDocumentStream
  nameWithType: SoArc2.LoadDocumentStream
  fullName: SuperOffice.CRM.Documents.SoArc2.LoadDocumentStream
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: LoadDocumentStream(IDocumentInfo, String)
  nameWithType: IDocumentPlugin2.LoadDocumentStream(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
    name: LoadDocumentStream
    nameWithType: IDocumentPlugin2.LoadDocumentStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
    name: LoadDocumentStream
    nameWithType: IDocumentPlugin2.LoadDocumentStream
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl
  isExternal: true
  name: GetDocumentUrl
  nameWithType: SoArc2.GetDocumentUrl
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentUrl
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentUrl(IDocumentInfo, String, Boolean)
  nameWithType: IDocumentPlugin2.GetDocumentUrl(IDocumentInfo, String, Boolean)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo, System.String, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
    name: GetDocumentUrl
    nameWithType: IDocumentPlugin2.GetDocumentUrl
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
    name: GetDocumentUrl
    nameWithType: IDocumentPlugin2.GetDocumentUrl
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.DeleteDocument*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.DeleteDocument
  isExternal: true
  name: DeleteDocument
  nameWithType: SoArc2.DeleteDocument
  fullName: SuperOffice.CRM.Documents.SoArc2.DeleteDocument
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: DeleteDocument(IDocumentInfo, String[])
  nameWithType: IDocumentPlugin2.DeleteDocument(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.DeleteDocument(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: DeleteDocument(IDocumentInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: DeleteDocument
    nameWithType: IDocumentPlugin2.DeleteDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: DeleteDocument
    nameWithType: IDocumentPlugin2.DeleteDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.RenameDocument*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.RenameDocument
  isExternal: true
  name: RenameDocument
  nameWithType: SoArc2.RenameDocument
  fullName: SuperOffice.CRM.Documents.SoArc2.RenameDocument
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: RenameDocument(IDocumentInfo, String)
  nameWithType: IDocumentPlugin2.RenameDocument(IDocumentInfo, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
    name: RenameDocument
    nameWithType: IDocumentPlugin2.RenameDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)
    name: RenameDocument
    nameWithType: IDocumentPlugin2.RenameDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetCheckoutState*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetCheckoutState
  isExternal: true
  name: GetCheckoutState
  nameWithType: SoArc2.GetCheckoutState
  fullName: SuperOffice.CRM.Documents.SoArc2.GetCheckoutState
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetCheckoutState(IDocumentInfo)
  nameWithType: IDocumentPlugin2.GetCheckoutState(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
    name: GetCheckoutState
    nameWithType: IDocumentPlugin2.GetCheckoutState
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)
    name: GetCheckoutState
    nameWithType: IDocumentPlugin2.GetCheckoutState
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.CheckoutInfo
  commentId: T:SuperOffice.CRM.Documents.CheckoutInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  name: CheckoutInfo
  nameWithType: CheckoutInfo
  fullName: SuperOffice.CRM.Documents.CheckoutInfo
- uid: SuperOffice.CRM.Documents.SoArc2.CheckoutDocument*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.CheckoutDocument
  isExternal: true
  name: CheckoutDocument
  nameWithType: SoArc2.CheckoutDocument
  fullName: SuperOffice.CRM.Documents.SoArc2.CheckoutDocument
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: CheckoutDocument(IDocumentInfo, String[])
  nameWithType: IDocumentPlugin2.CheckoutDocument(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.CheckoutDocument(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: CheckoutDocument(IDocumentInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: CheckoutDocument
    nameWithType: IDocumentPlugin2.CheckoutDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: CheckoutDocument
    nameWithType: IDocumentPlugin2.CheckoutDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.CheckinDocument*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.CheckinDocument
  isExternal: true
  name: CheckinDocument
  nameWithType: SoArc2.CheckinDocument
  fullName: SuperOffice.CRM.Documents.SoArc2.CheckinDocument
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: CheckinDocument(IDocumentInfo, String[], String, String[])
  nameWithType: IDocumentPlugin2.CheckinDocument(IDocumentInfo, String[], String, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo, System.String[], System.String, System.String[])
  nameWithType.vb: IDocumentPlugin2.CheckinDocument(IDocumentInfo, String(), String, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo, System.String(), System.String, System.String())
  name.vb: CheckinDocument(IDocumentInfo, String(), String, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
    name: CheckinDocument
    nameWithType: IDocumentPlugin2.CheckinDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])
    name: CheckinDocument
    nameWithType: IDocumentPlugin2.CheckinDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument
  isExternal: true
  name: UndoCheckoutDocument
  nameWithType: SoArc2.UndoCheckoutDocument
  fullName: SuperOffice.CRM.Documents.SoArc2.UndoCheckoutDocument
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: UndoCheckoutDocument(IDocumentInfo, String[])
  nameWithType: IDocumentPlugin2.UndoCheckoutDocument(IDocumentInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.UndoCheckoutDocument(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo, System.String())
  name.vb: UndoCheckoutDocument(IDocumentInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: UndoCheckoutDocument
    nameWithType: IDocumentPlugin2.UndoCheckoutDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: UndoCheckoutDocument
    nameWithType: IDocumentPlugin2.UndoCheckoutDocument
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetVersionList*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetVersionList
  isExternal: true
  name: GetVersionList
  nameWithType: SoArc2.GetVersionList
  fullName: SuperOffice.CRM.Documents.SoArc2.GetVersionList
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetVersionList(IDocumentInfo)
  nameWithType: IDocumentPlugin2.GetVersionList(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
    name: GetVersionList
    nameWithType: IDocumentPlugin2.GetVersionList
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
    name: GetVersionList
    nameWithType: IDocumentPlugin2.GetVersionList
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    nameWithType: IDocumentInfo
    fullName: SuperOffice.CRM.IDocumentInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.VersionInfo[]
  isExternal: true
  name: VersionInfo[]
  nameWithType: VersionInfo[]
  fullName: SuperOffice.CRM.Documents.VersionInfo[]
  nameWithType.vb: VersionInfo()
  fullName.vb: SuperOffice.CRM.Documents.VersionInfo()
  name.vb: VersionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    nameWithType: VersionInfo
    fullName: SuperOffice.CRM.Documents.VersionInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    nameWithType: VersionInfo
    fullName: SuperOffice.CRM.Documents.VersionInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Documents.SoArc2.GoTravel*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GoTravel
  isExternal: true
  name: GoTravel
  nameWithType: SoArc2.GoTravel
  fullName: SuperOffice.CRM.Documents.SoArc2.GoTravel
- uid: SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  parent: SuperOffice.CRM.Documents.IDocumentPluginTravel
  isExternal: true
  name: GoTravel(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  nameWithType: IDocumentPluginTravel.GoTravel(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
    name: GoTravel
    nameWithType: IDocumentPluginTravel.GoTravel
    fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    nameWithType: ProgressEstimateCallback
    fullName: SuperOffice.CRM.ProgressEstimateCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    nameWithType: ProgressStepCallback
    fullName: SuperOffice.CRM.ProgressStepCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
    name: GoTravel
    nameWithType: IDocumentPluginTravel.GoTravel
    fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    nameWithType: ProgressEstimateCallback
    fullName: SuperOffice.CRM.ProgressEstimateCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    nameWithType: ProgressStepCallback
    fullName: SuperOffice.CRM.ProgressStepCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.ProgressEstimateCallback
  commentId: T:SuperOffice.CRM.ProgressEstimateCallback
  parent: SuperOffice.CRM
  isExternal: true
  name: ProgressEstimateCallback
  nameWithType: ProgressEstimateCallback
  fullName: SuperOffice.CRM.ProgressEstimateCallback
- uid: SuperOffice.CRM.ProgressStepCallback
  commentId: T:SuperOffice.CRM.ProgressStepCallback
  parent: SuperOffice.CRM
  isExternal: true
  name: ProgressStepCallback
  nameWithType: ProgressStepCallback
  fullName: SuperOffice.CRM.ProgressStepCallback
- uid: SuperOffice.CRM.Documents.SoArc2.HomeComing*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.HomeComing
  isExternal: true
  name: HomeComing
  nameWithType: SoArc2.HomeComing
  fullName: SuperOffice.CRM.Documents.SoArc2.HomeComing
- uid: SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
  parent: SuperOffice.CRM.Documents.IDocumentPluginTravel
  isExternal: true
  name: HomeComing(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  nameWithType: IDocumentPluginTravel.HomeComing(Int32, String, ProgressEstimateCallback, ProgressStepCallback)
  fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
    name: HomeComing
    nameWithType: IDocumentPluginTravel.HomeComing
    fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    nameWithType: ProgressEstimateCallback
    fullName: SuperOffice.CRM.ProgressEstimateCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    nameWithType: ProgressStepCallback
    fullName: SuperOffice.CRM.ProgressStepCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)
    name: HomeComing
    nameWithType: IDocumentPluginTravel.HomeComing
    fullName: SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    nameWithType: ProgressEstimateCallback
    fullName: SuperOffice.CRM.ProgressEstimateCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    nameWithType: ProgressStepCallback
    fullName: SuperOffice.CRM.ProgressStepCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate
  isExternal: true
  name: CreateDefaultDocumentTemplate
  nameWithType: SoArc2.CreateDefaultDocumentTemplate
  fullName: SuperOffice.CRM.Documents.SoArc2.CreateDefaultDocumentTemplate
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: CreateDefaultDocumentTemplate(Int32, IDocumentTemplateInfo)
  nameWithType: IDocumentPlugin2.CreateDefaultDocumentTemplate(Int32, IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32, SuperOffice.CRM.IDocumentTemplateInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
    name: CreateDefaultDocumentTemplate
    nameWithType: IDocumentPlugin2.CreateDefaultDocumentTemplate
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)
    name: CreateDefaultDocumentTemplate
    nameWithType: IDocumentPlugin2.CreateDefaultDocumentTemplate
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates
  isExternal: true
  name: GetSupportedDocumentTypesForDocumentTemplates
  nameWithType: SoArc2.GetSupportedDocumentTypesForDocumentTemplates
  fullName: SuperOffice.CRM.Documents.SoArc2.GetSupportedDocumentTypesForDocumentTemplates
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetSupportedDocumentTypesForDocumentTemplates()
  nameWithType: IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates()
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    name: GetSupportedDocumentTypesForDocumentTemplates
    nameWithType: IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    name: GetSupportedDocumentTypesForDocumentTemplates
    nameWithType: IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.Int32,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int32, String>
  nameWithType: Dictionary<Int32, String>
  fullName: System.Collections.Generic.Dictionary<System.Int32, System.String>
  nameWithType.vb: Dictionary(Of Int32, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int32, System.String)
  name.vb: Dictionary(Of Int32, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties
  isExternal: true
  name: GetDocumentTemplateProperties
  nameWithType: SoArc2.GetDocumentTemplateProperties
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateProperties
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentTemplateProperties(IDocumentTemplateInfo, String[])
  nameWithType: IDocumentPlugin2.GetDocumentTemplateProperties(IDocumentTemplateInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.GetDocumentTemplateProperties(IDocumentTemplateInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo, System.String())
  name.vb: GetDocumentTemplateProperties(IDocumentTemplateInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
    name: GetDocumentTemplateProperties
    nameWithType: IDocumentPlugin2.GetDocumentTemplateProperties
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
    name: GetDocumentTemplateProperties
    nameWithType: IDocumentPlugin2.GetDocumentTemplateProperties
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl
  isExternal: true
  name: GetDocumentTemplateUrl
  nameWithType: SoArc2.GetDocumentTemplateUrl
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateUrl
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentTemplateUrl(IDocumentTemplateInfo, Boolean, String)
  nameWithType: IDocumentPlugin2.GetDocumentTemplateUrl(IDocumentTemplateInfo, Boolean, String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo, System.Boolean, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
    name: GetDocumentTemplateUrl
    nameWithType: IDocumentPlugin2.GetDocumentTemplateUrl
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)
    name: GetDocumentTemplateUrl
    nameWithType: IDocumentPlugin2.GetDocumentTemplateUrl
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages
  isExternal: true
  name: GetDocumentTemplateLanguages
  nameWithType: SoArc2.GetDocumentTemplateLanguages
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentTemplateLanguages
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentTemplateLanguages(IDocumentTemplateInfo)
  nameWithType: IDocumentPlugin2.GetDocumentTemplateLanguages(IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
    name: GetDocumentTemplateLanguages
    nameWithType: IDocumentPlugin2.GetDocumentTemplateLanguages
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
    name: GetDocumentTemplateLanguages
    nameWithType: IDocumentPlugin2.GetDocumentTemplateLanguages
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate
  isExternal: true
  name: DeleteDocumentTemplate
  nameWithType: SoArc2.DeleteDocumentTemplate
  fullName: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplate
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: DeleteDocumentTemplate(IDocumentTemplateInfo, String[])
  nameWithType: IDocumentPlugin2.DeleteDocumentTemplate(IDocumentTemplateInfo, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo, System.String[])
  nameWithType.vb: IDocumentPlugin2.DeleteDocumentTemplate(IDocumentTemplateInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo, System.String())
  name.vb: DeleteDocumentTemplate(IDocumentTemplateInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
    name: DeleteDocumentTemplate
    nameWithType: IDocumentPlugin2.DeleteDocumentTemplate
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])
    name: DeleteDocumentTemplate
    nameWithType: IDocumentPlugin2.DeleteDocumentTemplate
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath
  isExternal: true
  name: GetDocumentIdFromPath
  nameWithType: SoArc2.GetDocumentIdFromPath
  fullName: SuperOffice.CRM.Documents.SoArc2.GetDocumentIdFromPath
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: GetDocumentIdFromPath(String)
  nameWithType: IDocumentPlugin2.GetDocumentIdFromPath(String)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)
    name: GetDocumentIdFromPath
    nameWithType: IDocumentPlugin2.GetDocumentIdFromPath
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)
    name: GetDocumentIdFromPath
    nameWithType: IDocumentPlugin2.GetDocumentIdFromPath
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage
  isExternal: true
  name: DeleteDocumentTemplateLanguage
  nameWithType: SoArc2.DeleteDocumentTemplateLanguage
  fullName: SuperOffice.CRM.Documents.SoArc2.DeleteDocumentTemplateLanguage
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  name: DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String[])
  nameWithType: IDocumentPlugin2.DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.String[])
  nameWithType.vb: IDocumentPlugin2.DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, System.String, System.String())
  name.vb: DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
    name: DeleteDocumentTemplateLanguage
    nameWithType: IDocumentPlugin2.DeleteDocumentTemplateLanguage
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])
    name: DeleteDocumentTemplateLanguage
    nameWithType: IDocumentPlugin2.DeleteDocumentTemplateLanguage
    fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    nameWithType: IDocumentTemplateInfo
    fullName: SuperOffice.CRM.IDocumentTemplateInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.IsNameValid*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.IsNameValid
  isExternal: true
  name: IsNameValid
  nameWithType: SoArc2.IsNameValid
  fullName: SuperOffice.CRM.Documents.SoArc2.IsNameValid
- uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)
  commentId: M:SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)
  parent: SuperOffice.Plugins.CRM.Documents.IAssociateRename
  isExternal: true
  name: IsNameValid(String)
  nameWithType: IAssociateRename.IsNameValid(String)
  fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)
  spec.csharp:
  - uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)
    name: IsNameValid
    nameWithType: IAssociateRename.IsNameValid
    fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)
    name: IsNameValid
    nameWithType: IAssociateRename.IsNameValid
    fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.SoArc2.Locking*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.Locking
  isExternal: true
  name: Locking
  nameWithType: SoArc2.Locking
  fullName: SuperOffice.CRM.Documents.SoArc2.Locking
- uid: SuperOffice.CRM.Documents.SoArc2.FastLockStatus*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.FastLockStatus
  isExternal: true
  name: FastLockStatus
  nameWithType: SoArc2.FastLockStatus
  fullName: SuperOffice.CRM.Documents.SoArc2.FastLockStatus
- uid: SuperOffice.CRM.Documents.SoArc2.Versioning*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.Versioning
  isExternal: true
  name: Versioning
  nameWithType: SoArc2.Versioning
  fullName: SuperOffice.CRM.Documents.SoArc2.Versioning
- uid: SuperOffice.CRM.Documents.SoArc2.FastVersionList*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.FastVersionList
  isExternal: true
  name: FastVersionList
  nameWithType: SoArc2.FastVersionList
  fullName: SuperOffice.CRM.Documents.SoArc2.FastVersionList
- uid: SuperOffice.CRM.Documents.SoArc2.FastExists*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.FastExists
  isExternal: true
  name: FastExists
  nameWithType: SoArc2.FastExists
  fullName: SuperOffice.CRM.Documents.SoArc2.FastExists
- uid: SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize
  isExternal: true
  name: MaxDocumentSize
  nameWithType: SoArc2.MaxDocumentSize
  fullName: SuperOffice.CRM.Documents.SoArc2.MaxDocumentSize
- uid: SuperOffice.CRM.Documents.SoArc2.Timeout*
  commentId: Overload:SuperOffice.CRM.Documents.SoArc2.Timeout
  isExternal: true
  name: Timeout
  nameWithType: SoArc2.Timeout
  fullName: SuperOffice.CRM.Documents.SoArc2.Timeout
