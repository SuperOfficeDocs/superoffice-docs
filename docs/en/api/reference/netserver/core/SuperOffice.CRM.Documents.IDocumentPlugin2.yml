### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2
  commentId: T:SuperOffice.CRM.Documents.IDocumentPlugin2
  id: IDocumentPlugin2
  parent: SuperOffice.CRM.Documents
  children:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  - SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDocumentPlugin2
  nameWithType: IDocumentPlugin2
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2
  type: Interface
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: >-
    This is the API that needs to be implemented by document plugins - objects that provide the

    link between a document repository and SuperOffice NetServer
  remarks: >-
    A document plugin must support basic operations for storing and retrieving documents, according 

    to keys it generates itself. Optionally, it can support locking, versions, and WebDAV access.

    <p></p>

    Locking and versioning, if supported, can be selected on a per-document basis - support for versioning

    does not have to imply that <b>every</b> document in the plugins' repository is versioned.

    <p></p>

    Custom GUI declaration is not part of this interface, since the various clients that exist, may

    have different ways of declaring or implementing custom user interfaces. A document plugin

    that wants to implement a custom GUI should additionally implement the

    <xref href="SuperOffice.UI.Configuration.ICustomUIProvider" data-throw-if-not-resolved="false"></xref> or other (future) GUI-declaration interface,

    thereby making it possible to add GUI options in the future, without changing this basic

    document plugin interface.

    <p></p>

    NetServer will attempt to construct your object in two different ways:<p></p>

    1. With an <xref href="SuperOffice.CRM.IConfiguration" data-throw-if-not-resolved="false"></xref> parameter. This allows you to access config values and licenses without linking to SoCore/SoDatabase.<p></p>

    2. With no parameters. This is just the default constructor.<p></p>

    Implement the constructor that is most suitable for your plugin.  Throw an exception from the constructor if your plugin does not want to be created. The exception is logged as Information, and 

    your plugin will not be used.<p></p>
  example: []
  syntax:
    content: public interface IDocumentPlugin2
    content.vb: Public Interface IDocumentPlugin2
  extensionMethods:
  - SuperOffice.CRM.Documents.IDocumentPlugin2.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Documents.IDocumentPlugin2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  id: GetPluginCapabilities
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetPluginCapabilities()
  nameWithType: IDocumentPlugin2.GetPluginCapabilities()
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities()
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get a list of capabilities (functionality) supported by this document plugin
  remarks: >-
    The purpose of this call is to enable NetServer and clients to determine what functionality this plugin can offer. 

    Plugins should populate the return array with all capabilities they know about. NetServer will call this API only once.

    <p></p>

    As an example of use, the Document archive provider inside NetServer will look at plugin capabilities, 

    and read document properties as appropriate. 

    <p></p>

    i.e. if “fast-lock-status=false”, then the archive provider 

    will not call the IsCheckedOut(externalReference) function. Otherwise it will make the call (if the client has requested

    the appropriate column in the GUI), so that the user can see which documents are checked out.

    <p></p>

    String constants for capabilities are available in the <xref href="SuperOffice.CRM.Documents.Constants.Capabilities" data-throw-if-not-resolved="false"></xref> static class.
  example: []
  syntax:
    content: Dictionary<string, string> GetPluginCapabilities()
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Dictionary of name=value strings listing all known capabilities and their values
    content.vb: Function GetPluginCapabilities() As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  id: GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentPropertiesAsync(IDocumentInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentPropertiesAsync(IDocumentInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get the values of certain properties, for a given document
  remarks: >-
    Each document can have a number of properties associated with it. A set of standard properties

    is defined in the <xref href="SuperOffice.CRM.Documents.Constants.Properties" data-throw-if-not-resolved="false"></xref> class. Ideally, retrieving properties should

    be a lightweight operation.

    <p></p>

    Note that 'properties' are a one-way mechanism where the document plugin provides information about

    the document or certain aspects of it. This is not the same as document-specific

    metadata, which is handled by the <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> and <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo%2cSystem.Collections.Generic.Dictionary%7bSystem.String%2cSystem.String%7d)" data-throw-if-not-resolved="false"></xref>

    methods.
  example: []
  syntax:
    content: Task<Dictionary<string, string>> GetDocumentPropertiesAsync(IDocumentInfo documentInfo, string[] requestedProperties, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document record with filename, extref and primary key (document id).
    - id: requestedProperties
      type: System.String[]
      description: Array of property strings, for which values are requested
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
      description: >-
        Dictionary of key=value pairs, where the key is one of the requested property strings, and the value
                    is the value of that property for the given document.
    content.vb: Function GetDocumentPropertiesAsync(documentInfo As IDocumentInfo, requestedProperties As String(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of String, String))
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync*
  nameWithType.vb: IDocumentPlugin2.GetDocumentPropertiesAsync(IDocumentInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo, String(), System.Threading.CancellationToken)
  name.vb: GetDocumentPropertiesAsync(IDocumentInfo, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  id: GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentCommands(IDocumentInfo, string[])
  nameWithType: IDocumentPlugin2.GetDocumentCommands(IDocumentInfo, string[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, string[])
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Get a list of custom commands, applicable to a specific document. Note that commands related to

    standard locking and versioning operations have their own API calls and are not 'custom commands' in this sense.
  remarks: >-
    This API is called before a menu, task button or other GUI item that gives access to document-specific commands is shown.

    It is used to populate the GUI with available commands for a particular document, the results are not cached by the GUI.

    <p></p>

    Depending on the return type indicated in the command, the command might be filtered by GUI. More information can

    be found in the <xref href="SuperOffice.CRM.Documents.CommandInfo" data-throw-if-not-resolved="false"></xref> topic.
  example: []
  syntax:
    content: CommandInfo[] GetDocumentCommands(IDocumentInfo documentInfo, string[] allowedReturnTypes)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document info from the SuperOffice database
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.Documents.CommandInfo[]
      description: Array of command descriptions. If there are no custom commands available, an empty array should be returned.
    content.vb: Function GetDocumentCommands(documentInfo As IDocumentInfo, allowedReturnTypes As String()) As CommandInfo()
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands*
  nameWithType.vb: IDocumentPlugin2.GetDocumentCommands(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, String())
  name.vb: GetDocumentCommands(IDocumentInfo, String())
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  id: ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: ExecuteDocumentCommand(IDocumentInfo, string, string[], string, params string[])
  nameWithType: IDocumentPlugin2.ExecuteDocumentCommand(IDocumentInfo, string, string[], string, params string[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo, string, string[], string, params string[])
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Execute a custom command on a specified document and version
  remarks: >-
    This command is called when the user chooses an action item from a dropdown/context menu. 

    It is also reflected in the DocumentAgent service interface, so that custom GUI’s and external 

    code can directly execute document plugin commands; this is useful if a plugin also has some 

    corresponding custom GUI that needs to execute commands depending on user interaction.

    <p></p>

    The parameter <code class="paramref">allowedReturnTypes</code> can be used by clients to hint to the plugin

    what kind of return value processing is available. For instance, a mobile client might

    only offer None and Message, and this information can be used by the document plugin to adapt

    the processing of a command, if it wants to (for instance, use default values instead of

    triggering some more advanced workflow).

    <p></p>

    The command is obtained from the <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: ReturnInfo ExecuteDocumentCommand(IDocumentInfo documentInfo, string versionId, string[] allowedReturnTypes, string command, params string[] additionalData)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document info from the SuperOffice database
    - id: versionId
      type: System.String
      description: Version identifier, blank implies 'latest' version
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type.
    - id: command
      type: System.String
      description: >-
        Command name, taken from an earlier call to <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d)" data-throw-if-not-resolved="false"></xref>
                    - or any other command name that is understood by the provider. 'Private' commands that
                    are not declared in GetDocumentCommands but are known to the authors of custom GUI code
                    or OK.
    - id: additionalData
      type: System.String[]
      description: >-
        Array of strings containing whatever additional data the command
                    may need. This parameter is intended for authors of more complex custom GUI's and works as
                    a tunnel between the ultimate client and the document plugin. Standard GUI made by SuperOffice,
                    such as a context menu connected to a document item in an archive, will not populate this
                    member.<br />It is strongly suggested that the convention of using name=value for each string
                    array element be followed here.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value object, specifying failure or success plus any optional, additional processing to be triggered
    content.vb: Function ExecuteDocumentCommand(documentInfo As IDocumentInfo, versionId As String, allowedReturnTypes As String(), command As String, ParamArray additionalData As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand*
  nameWithType.vb: IDocumentPlugin2.ExecuteDocumentCommand(IDocumentInfo, String, String(), String, ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo, String, String(), String, ParamArray String())
  name.vb: ExecuteDocumentCommand(IDocumentInfo, String, String(), String, ParamArray String())
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  id: LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: LoadMetaData(IDocumentInfo)
  nameWithType: IDocumentPlugin2.LoadMetaData(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Retrieve metadata owned by the plugin/repository, related to one document (excluding version-dependent metadata)
  remarks: >-
    A document plugin may consume and provide an arbitrary number of metadata fields. These are placed

    in a string, string dictionary, representing name/value pairs. This call should <b>not</b>

    retrieve metadata related to any particular version, only data related to the document as a whole.

    <p></p>

    The NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call 

    to this API to populate the ExtraFields property of the document entity carrier. Note, however, 

    that the carrier handed over to the client may contain other fields in addition to those 

    supplied by the document plugin, since the extrafields mechanism is generic and 

    there may be other metadata providers along the line.

    <p></p>

    Attribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.
  example: []
  syntax:
    content: Dictionary<string, string> LoadMetaData(IDocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Contains extref and primary key, filename of the document.
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: >-
        Array of name=value strings, each representing one key and one value. The same
                    convention is used here as in the <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities" data-throw-if-not-resolved="false"></xref> and 
                    <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> methods.
    content.vb: Function LoadMetaData(documentInfo As IDocumentInfo) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  id: LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: LoadVersionInfo(IDocumentInfo, string)
  nameWithType: IDocumentPlugin2.LoadVersionInfo(IDocumentInfo, string)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo, string)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Retrieve metadata owned by the plugin/repository, related to one particular

    version of one document
  remarks: >-
    A document plugin may consume and provide an arbitrary number of metadata fields. These are placed

    in a string, string dictionary, representing name/value pairs. This call should only retrieve

    metadata related to a version.

    <p></p>

    The NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call 

    to this API to populate the VersionInfo property of the document entity carrier. 

    <p></p>

    Attribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.

    <p></p>

    To efficiently retrieve information about <b>all</b> versions, use the 

    <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> method, instead of iterating

    over this method.
  example: []
  syntax:
    content: VersionInfo LoadVersionInfo(IDocumentInfo documentInfo, string versionId)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document info from the SuperOffice database
    - id: versionId
      type: System.String
      description: Version identifier, blank implies 'latest' version
    return:
      type: SuperOffice.CRM.Documents.VersionInfo
      description: Fully populated version info structure
    content.vb: Function LoadVersionInfo(documentInfo As IDocumentInfo, versionId As String) As VersionInfo
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo*
  nameWithType.vb: IDocumentPlugin2.LoadVersionInfo(IDocumentInfo, String)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo, String)
  name.vb: LoadVersionInfo(IDocumentInfo, String)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  id: SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: SaveMetaData(IDocumentInfo, Dictionary<string, string>)
  nameWithType: IDocumentPlugin2.SaveMetaData(IDocumentInfo, Dictionary<string, string>)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary<string, string>)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Store/update plugin-dependent document metadata in the repository
  remarks: >-
    This call is made when the document metadata should be stored, and is the complement of the

    <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> method.

    The document plugin should extract whatever elements it 

    recognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception, 

    as there may be other plugins along the line (not document plugins, but service-level field providers) that own the data. 

    Likewise, absence of a value should be taken to imply “no change” to that value - not "delete".

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.
  example: []
  syntax:
    content: void SaveMetaData(IDocumentInfo incomingInfo, Dictionary<string, string> pluginData)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: >-
        SuperOffice metadata. Note that the plugin is <b>not</b> responsible
                    for storing this data; however, it is allowed to look at it, in case it influences how the document
                    is stored. However, it should always be possible to retrieve a document using the ExternalReference
                    or DocumentId keys alone.
    - id: pluginData
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Name/value dictionary containing metadata
    content.vb: Sub SaveMetaData(incomingInfo As IDocumentInfo, pluginData As Dictionary(Of String, String))
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData*
  nameWithType.vb: IDocumentPlugin2.SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary(Of String, String))
  name.vb: SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  id: SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: SaveVersionInfo(IDocumentInfo, VersionInfo)
  nameWithType: IDocumentPlugin2.SaveVersionInfo(IDocumentInfo, VersionInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo, SuperOffice.CRM.Documents.VersionInfo)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Store/update plugin-dependent document version metadata in the repository
  remarks: >-
    This call is made when the document <b>version</b> metadata should be stored, and is the complement of the

    <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo%2cSystem.String)" data-throw-if-not-resolved="false"></xref> method.

    The document plugin should extract whatever elements it 

    recognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception, 

    as there may be other plugins along the line (not document plugins, but service-level field providers) that own the data. 

    Likewise, absence of a value should be taken to imply “no change” to that value - not "delete".

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.
  example: []
  syntax:
    content: void SaveVersionInfo(IDocumentInfo documentInfo, VersionInfo versionInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document that version is being saved on
    - id: versionInfo
      type: SuperOffice.CRM.Documents.VersionInfo
      description: Version information to be saved
    content.vb: Sub SaveVersionInfo(documentInfo As IDocumentInfo, versionInfo As VersionInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  id: ExistsAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: ExistsAsync(IDocumentInfo, CancellationToken)
  nameWithType: IDocumentPlugin2.ExistsAsync(IDocumentInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync(SuperOffice.CRM.IDocumentInfo, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Determine if the document exists in the repository
  remarks: >-
    The plugin should declare, through the <xref href="SuperOffice.CRM.Documents.Constants.Capabilities.FastExists" data-throw-if-not-resolved="false"></xref> property,

    whether this call is highly efficient or not. If it is efficient, then document archive providers and similar code

    will call it when populating an archive, otherwise not.
  example: []
  syntax:
    content: Task<bool> ExistsAsync(IDocumentInfo documentInfo, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document info used by the document plugin
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true if the document exists in the repository, otherwise false
    content.vb: Function ExistsAsync(documentInfo As IDocumentInfo, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  id: GetLengthAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetLengthAsync(IDocumentInfo, string, CancellationToken)
  nameWithType: IDocumentPlugin2.GetLengthAsync(IDocumentInfo, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync(SuperOffice.CRM.IDocumentInfo, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Return the length of the physical document. This should be an efficient method
  example: []
  syntax:
    content: Task<long> GetLengthAsync(IDocumentInfo documentInfo, string versionId, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Document info used by the document plugin
    - id: versionId
      type: System.String
      description: Version identifier, blank implies 'latest' version
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: >-
        Physical document length in bytes - this should be the same as the length of the stream
                    returned by the LoadDocumentStream method.
    content.vb: Function GetLengthAsync(documentInfo As IDocumentInfo, versionId As String, cancellationToken As CancellationToken = Nothing) As Task(Of Long)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync*
  nameWithType.vb: IDocumentPlugin2.GetLengthAsync(IDocumentInfo, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync(SuperOffice.CRM.IDocumentInfo, String, System.Threading.CancellationToken)
  name.vb: GetLengthAsync(IDocumentInfo, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String,System.Threading.CancellationToken)
  id: SaveDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: SaveDocumentTemplateStreamAsync(IDocumentTemplateInfo, Stream, string, CancellationToken)
  nameWithType: IDocumentPlugin2.SaveDocumentTemplateStreamAsync(IDocumentTemplateInfo, Stream, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.IO.Stream, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Create or update the document template contents. Usually used when uploading a file to a new document template.
  example: []
  syntax:
    content: Task<TemplateInfo> SaveDocumentTemplateStreamAsync(IDocumentTemplateInfo templateInfo, Stream content, string languageCode, CancellationToken cancellationToken = default)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Name, tooltip and mime type from the document template record in the database. The ExtRef/Filename may be set if this is an edit rather than an add.
    - id: content
      type: System.IO.Stream
      description: Stream containing file content
    - id: languageCode
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
      description: Template information with ExtRef/Filename and MimeType filled in. These values are saved in the DocTmpl record.
    content.vb: Function SaveDocumentTemplateStreamAsync(templateInfo As IDocumentTemplateInfo, content As Stream, languageCode As String, cancellationToken As CancellationToken = Nothing) As Task(Of TemplateInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync*
  nameWithType.vb: IDocumentPlugin2.SaveDocumentTemplateStreamAsync(IDocumentTemplateInfo, Stream, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.IO.Stream, String, System.Threading.CancellationToken)
  name.vb: SaveDocumentTemplateStreamAsync(IDocumentTemplateInfo, Stream, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  id: LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, string, CancellationToken)
  nameWithType: IDocumentPlugin2.LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get the document template content as a stream. NetServer will read-to-end and close this stream
  remarks: >-
    Document templates may be stored in a repository, with or without special content tags.

    Because a document template does not have a corresponding document record within

    SuperOffice, there is no documentId to identify it.

    <p></p>

    This call is used by NetServer to retrieve a document template based on either

    an externalreference value stored in the corresponding doctmpl record,

    or the Id of the doctmpl record itself. The document plugin is free

    to use either method of identification.

    <p></p>

    Mail templates are passed in using extref = "filename=xyz&amp;allowPersonal=1" and docTemplateId = 0
  example: []
  syntax:
    content: Task<Stream> LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo documentTemplateInfo, string languageCode, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: >-
        Document template info: contains the extref/filename, template id, mime type.
                    TemplateInfo.Id = 0 when archiving mail messages.
    - id: languageCode
      type: System.String
      description: Language (en-US, nb-NO, etc) that the user is using in the user interface. Can be used to select language-specific templates.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Stream containing the template content for the appropriate language. Null if no suitable template content found in this plugin.
    content.vb: Function LoadDocumentTemplateStreamAsync(documentTemplateInfo As IDocumentTemplateInfo, languageCode As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync*
  nameWithType.vb: IDocumentPlugin2.LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo, String, System.Threading.CancellationToken)
  name.vb: LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  id: GetTemplateExtensionAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetTemplateExtensionAsync(IDocumentTemplateInfo, CancellationToken)
  nameWithType: IDocumentPlugin2.GetTemplateExtensionAsync(IDocumentTemplateInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Get the "extension" for the template, i.e., what the file extension would have been - to 

    help identify the stream content format
  remarks: >-
    Template documents are generally created in text editors and stored as files of some kind. The

    file extension indicates the kind of document - doc, docx, xls, txt, and so on. While the template

    may be stored inside the document repository as any kind of data byte collection, a concept

    akin to the file extension is still needed to help identify the document format, ahead of actually

    reading the template content.
  example: []
  syntax:
    content: Task<string> GetTemplateExtensionAsync(IDocumentTemplateInfo documentTemplateInfo, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: 'Document template info: contains the extref/filename, template id, mime type'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String equivalent to a file extension, for instance ".docx"
    content.vb: Function GetTemplateExtensionAsync(documentTemplateInfo As IDocumentTemplateInfo, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  id: CreateDefaultDocumentTemplateAsync(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: CreateDefaultDocumentTemplateAsync(int, IDocumentTemplateInfo, CancellationToken)
  nameWithType: IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(int, IDocumentTemplateInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(int, SuperOffice.CRM.IDocumentTemplateInfo, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Create a default document based on the given documentType. Called when creating a new template.
  example: []
  syntax:
    content: Task<TemplateInfo> CreateDefaultDocumentTemplateAsync(int documentTypeKey, IDocumentTemplateInfo documentTemplateInfo, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTypeKey
      type: System.Int32
      description: Id for a document type. 0 if plugin does not use document types.
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Document template info
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
      description: >-
        Template info object, with MimeType and Extref/Filename for new template filled in. These values are written to the template record by NetServer.
                    Other fields like TemplateInfo.PluginId or TemplateInfo.Name are ignored in the result. The plugin cannot alter these.
                    Return NULL if no change, or if no blank document created.
    content.vb: Function CreateDefaultDocumentTemplateAsync(documentTypeKey As Integer, documentTemplateInfo As IDocumentTemplateInfo, cancellationToken As CancellationToken = Nothing) As Task(Of TemplateInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync*
  seealso:
  - linkId: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  nameWithType.vb: IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(Integer, IDocumentTemplateInfo, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync(Integer, SuperOffice.CRM.IDocumentTemplateInfo, System.Threading.CancellationToken)
  name.vb: CreateDefaultDocumentTemplateAsync(Integer, IDocumentTemplateInfo, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  id: GetSupportedDocumentTypesForDocumentTemplates
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetSupportedDocumentTypesForDocumentTemplates()
  nameWithType: IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates()
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates()
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get a list of supported document template types for this document plugin. May be empty.
  example: []
  syntax:
    content: Dictionary<int, string> GetSupportedDocumentTypesForDocumentTemplates()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
      description: An dictionary of key=display-name for supported document types for template. Empty dictionary if no document types supported.
    content.vb: Function GetSupportedDocumentTypesForDocumentTemplates() As Dictionary(Of Integer, String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  id: GetDocumentTemplatePropertiesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentTemplatePropertiesAsync(IDocumentTemplateInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(IDocumentTemplateInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(SuperOffice.CRM.IDocumentTemplateInfo, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get the values of certain properties, for a given document template
  remarks: >-
    Each document can have a number of properties associated with it. A set of standard properties

    is defined in the <xref href="SuperOffice.CRM.Documents.Constants.Properties" data-throw-if-not-resolved="false"></xref> class. Ideally, retrieving properties should

    be a lightweight operation.

    <p></p>

    Note that 'properties' are a one-way mechanism where the document plugin provides information about

    the document or certain aspects of it. This is not the same as document-specific

    metadata, which is handled by the <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> and <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo%2cSystem.Collections.Generic.Dictionary%7bSystem.String%2cSystem.String%7d)" data-throw-if-not-resolved="false"></xref>

    methods.
  example: []
  syntax:
    content: Task<Dictionary<string, string>> GetDocumentTemplatePropertiesAsync(IDocumentTemplateInfo documentTemplateInfo, string[] requestedProperties, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Document template record from the SuperOffice database
    - id: requestedProperties
      type: System.String[]
      description: Array of property strings, for which values are requested
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
      description: >-
        Dictionary of name=value pairs, where the name is one of the requested property strings, and the value
                    is the value of that property for the given document.
    content.vb: Function GetDocumentTemplatePropertiesAsync(documentTemplateInfo As IDocumentTemplateInfo, requestedProperties As String(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of String, String))
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync*
  nameWithType.vb: IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(IDocumentTemplateInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync(SuperOffice.CRM.IDocumentTemplateInfo, String(), System.Threading.CancellationToken)
  name.vb: GetDocumentTemplatePropertiesAsync(IDocumentTemplateInfo, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String,System.Threading.CancellationToken)
  id: GetDocumentTemplateUrlAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateUrlAsync(IDocumentTemplateInfo, bool, string, CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentTemplateUrlAsync(IDocumentTemplateInfo, bool, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync(SuperOffice.CRM.IDocumentTemplateInfo, bool, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get a URL referring to the given document template
  remarks: >-
    Document plugins may support document access via URLs. This call is used to retrieve a url that 

    will give the specified access to the document. This URL will be passed to the ultimate client 

    (most probably a browser, but could be a text editor application), and control will not return to NetServer.

    <p></p>

    The string returned here should be a fully resolved URL that can be given directly to the editor application.
  example: []
  syntax:
    content: Task<string> GetDocumentTemplateUrlAsync(IDocumentTemplateInfo documentTemplateInfo, bool writeableUrl, string languageCode, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: The document template info from database
    - id: writeableUrl
      type: System.Boolean
      description: >-
        If true, then the request URL should allow the document editor to write content
                    back to the repository; otherwise, a url that does not support writeback should be supplied
                    if possible.
    - id: languageCode
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >-
        URL that gives access to the template document. If the document plugin
                    does not support URL access, then a blank string should be returned.
    content.vb: Function GetDocumentTemplateUrlAsync(documentTemplateInfo As IDocumentTemplateInfo, writeableUrl As Boolean, languageCode As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync*
  nameWithType.vb: IDocumentPlugin2.GetDocumentTemplateUrlAsync(IDocumentTemplateInfo, Boolean, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync(SuperOffice.CRM.IDocumentTemplateInfo, Boolean, String, System.Threading.CancellationToken)
  name.vb: GetDocumentTemplateUrlAsync(IDocumentTemplateInfo, Boolean, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  id: GetDocumentTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateLanguagesAsync(IDocumentTemplateInfo, CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentTemplateLanguagesAsync(IDocumentTemplateInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync(SuperOffice.CRM.IDocumentTemplateInfo, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get the list of languages supported by the given template, not including the default (blank) language.
  remarks: Used when populating the dropdown list in the admin client or the document dialog.
  example: []
  syntax:
    content: Task<string[]> GetDocumentTemplateLanguagesAsync(IDocumentTemplateInfo documentTemplateInfo, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: The template we are curious about
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: 'Array of ISO codes: ("en-US", "nb-NO", "fr")'
    content.vb: Function GetDocumentTemplateLanguagesAsync(documentTemplateInfo As IDocumentTemplateInfo, cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  id: DeleteDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: DeleteDocumentTemplateAsync(IDocumentTemplateInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.DeleteDocumentTemplateAsync(IDocumentTemplateInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Delete a document template, all language variations and all metadata from the repository
  example: []
  syntax:
    content: Task<ReturnInfo> DeleteDocumentTemplateAsync(IDocumentTemplateInfo documentTemplateInfo, string[] allowedReturnTypes, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function DeleteDocumentTemplateAsync(documentTemplateInfo As IDocumentTemplateInfo, allowedReturnTypes As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync*
  nameWithType.vb: IDocumentPlugin2.DeleteDocumentTemplateAsync(IDocumentTemplateInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync(SuperOffice.CRM.IDocumentTemplateInfo, String(), System.Threading.CancellationToken)
  name.vb: DeleteDocumentTemplateAsync(IDocumentTemplateInfo, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[],System.Threading.CancellationToken)
  id: DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo, string, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo, string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo, string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Delete a specific language variation from the document template
  example: []
  syntax:
    content: Task<ReturnInfo> DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo documentTemplateInfo, string languageCode, string[] allowedReturnTypes, CancellationToken cancellationToken = default)
    parameters:
    - id: documentTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Fully populated document template metadata used to identity the template.
    - id: languageCode
      type: System.String
      description: The language variation to delete
    - id: allowedReturnTypes
      type: System.String[]
      description: Array of names of allowed return types.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function DeleteDocumentTemplateLanguageAsync(documentTemplateInfo As IDocumentTemplateInfo, languageCode As String, allowedReturnTypes As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync*
  nameWithType.vb: IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo, String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync(SuperOffice.CRM.IDocumentTemplateInfo, String, String(), System.Threading.CancellationToken)
  name.vb: DeleteDocumentTemplateLanguageAsync(IDocumentTemplateInfo, String, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  id: CreateDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: CreateDocumentAsync(IDocumentInfo, string, string[], string, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.CreateDocumentAsync(IDocumentInfo, string, string[], string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync(SuperOffice.CRM.IDocumentInfo, string, string[], string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Create an empty document file in the repository, returning the external reference that 

    uniquely identifies the document in the repository.
  remarks: >-
    Execution of this method should result in the creation of a document instance in the

    underlying repository, with empty content. If locking is supported, the status should

    be 'Checked-out'; the document should not be visible to other users. If locking is not 

    supported, a zero-length content should be the result.

    <p></p>

    All metadata should be saved, an externalReference key should be assigned, and

    the file name/document name validated and reserved.

    <p></p><b>Notes on semantics</b><br />

    The IDocumentInfo.SuperOffice.CRM.IDocumentInfo.Semantics property is used to specify the

    locking/versioning semantics requested and implemented for a document. Semantics actually implemtned

    will be the lowest of what is requested and what is supported. Thus, a document may request 

    SuperOffice.Data.DocumentSemantics.None semantics even if versioning is optionally supported

    by the document plugin, and in that case no versioning or locking should be performed.

    <p></p>

    On creation, if locking and/or versioning is supported and requested, then the document stream should

    be saved to a temporary area. Calls to GetDocumentStream should return an empty stream until the first

    call to CheckinDocument has succeeded. The result of that Checkin call will be the base version 

    (version 1).

    <p></p>

    Locking semantics are set on creation and cannot be changed later.

    <p></p>

    NetServer will typically call several plugin functions create a new document like this:

    <ul><li>plugin.<xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo%2cSystem.String%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> </li><li>(NetServer saves document template stream to temp file and 
      runs tag substitution on the file, replacing &lt;name&gt; with company name, etc.)</li><li>plugin.CreateDocument - creates empty file in repository.</li><li>plugin.<xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d%2cSystem.IO.Stream%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>(temp-file) - moves temp file into repository, replacing the empty file.</li></ul>
  example: []
  syntax:
    content: Task<(string extRef, string actualFileName)> CreateDocumentAsync(IDocumentInfo incomingInfo, string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields, CancellationToken cancellationToken = default)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: >-
        SuperOffice metadata for the document, including the document Id
                    and locking/versioning sematics requested for this document.
    - id: fileName
      type: System.String
      description: >-
        Suggested file name/document name. The document plugin must validate this
                    name and amend it if needed (this is a ref parameter). If the name needs to be changed
                    for any reason, a new and valid name must be generated by the plugin, and returned
                    to the caller. NetServer will update the document record's Name field with the new filename.
    - id: extraFields
      type: System.String[]
      description: >-
        Plugin-dependent metadata for the document as a whole. The
                    usual caveats apply, i.e., there may be name/value pairs in the parameter that
                    belong to other parts of the system. Failure to recognize a name is not an error.
    - id: versionDecription
      type: System.String
      description: >-
        Description of the initial version, if versioning is supported
                    and enabled for the document.
    - id: versionExtraFields
      type: System.String[]
      description: Plugin-dependent metadata for the initial version
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
      description: The external reference that identifies this document. This return value is written to the document record's ExtRef field.
    content.vb: Function CreateDocumentAsync(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String(), cancellationToken As CancellationToken = Nothing) As Task(Of (extRef As String, actualFileName As String))
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync*
  nameWithType.vb: IDocumentPlugin2.CreateDocumentAsync(IDocumentInfo, String, String(), String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync(SuperOffice.CRM.IDocumentInfo, String, String(), String, String(), System.Threading.CancellationToken)
  name.vb: CreateDocumentAsync(IDocumentInfo, String, String(), String, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  id: SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: SaveDocumentFromStreamAsync(IDocumentInfo, string[], Stream, CancellationToken)
  nameWithType: IDocumentPlugin2.SaveDocumentFromStreamAsync(IDocumentInfo, string[], Stream, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo, string[], System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Save the stream as the document content in the repository; depending on the state, this

    may imply creating a temporary save pending a final checkin, or an immediately visible result.
  remarks: >-
    An empty document must have been created in the repository with CreateDocument before content

    can be streamed into it.

    <p></p>

    If the document is currently checked out to the current user, then the stream should be saved, 

    but this call does not imply the automatic creation of a new version (visible to other users) 

    or automatic checkin. However, it is an advantage if subsequent GetDocument calls made by 

    the same user using the same key return the latest known content – while other users see 

    the latest checked-in version.

    <p></p>

    If the plugin does not support locking and versioning (or such semantics are not requested, see below), 

    then each call to this API overwrites 

    any prior content completely and becomes the new, official content immediately. The Save operation 

    should be atomic, and should not destroy earlier content if it fails.

    <p></p>

    If locking is supported and requested, the document is checked out and some other associate than the one 

    that has checked it out calls this API, a failure message should be returned.
  example: []
  syntax:
    content: Task<ReturnInfo> SaveDocumentFromStreamAsync(IDocumentInfo incomingInfo, string[] allowedReturnTypes, Stream content, CancellationToken cancellationToken = default)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: >-
        Incoming document metadata, used to identify the document. Metadata
                    changes are <b>not</b> to be checked or saved by this operation - only the document stream is saved.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")
    - id: content
      type: System.IO.Stream
      description: >-
        Document content, a binary stream about which nothing is assumed. The
                    document plugin should read-to-end and close this stream.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function SaveDocumentFromStreamAsync(incomingInfo As IDocumentInfo, allowedReturnTypes As String(), content As Stream, cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync*
  nameWithType.vb: IDocumentPlugin2.SaveDocumentFromStreamAsync(IDocumentInfo, String(), Stream, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo, String(), System.IO.Stream, System.Threading.CancellationToken)
  name.vb: SaveDocumentFromStreamAsync(IDocumentInfo, String(), Stream, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  id: LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: LoadDocumentStreamAsync(IDocumentInfo, string, CancellationToken)
  nameWithType: IDocumentPlugin2.LoadDocumentStreamAsync(IDocumentInfo, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get document content as a stream. NetServer will read-to-end and close this stream.
  remarks: >-
    It is up to the document plugin whether it can open a stream directly into the underlying repository, 

    or whether it has to extract the document to some temporary area and then stream that – 

    however, the fewer buffers the better.
  example: []
  syntax:
    content: Task<Stream> LoadDocumentStreamAsync(IDocumentInfo incomingInfo, string versionId, CancellationToken cancellationToken = default)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: versionId
      type: System.String
      description: Optional version identifier, blank implies 'latest' version
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Document content stream
    content.vb: Function LoadDocumentStreamAsync(incomingInfo As IDocumentInfo, versionId As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync*
  nameWithType.vb: IDocumentPlugin2.LoadDocumentStreamAsync(IDocumentInfo, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync(SuperOffice.CRM.IDocumentInfo, String, System.Threading.CancellationToken)
  name.vb: LoadDocumentStreamAsync(IDocumentInfo, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentUrlAsync(IDocumentInfo, string, bool, CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentUrlAsync(IDocumentInfo, string, bool, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo, string, bool, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get a WebDAV-compliant URL referring to the given document
  remarks: >-
    Document plugins may support document access via WebDAV. This call is used to retrieve a WebDAV url that 

    will give the specified access to the document. This URL will be passed to the ultimate client 

    (most probably a text editor application), and control will not return to NetServer.

    <p></p>

    The string returned here should be a fully resolved URL that can be given directly to the editor application.
  example: []
  syntax:
    content: Task<string> GetDocumentUrlAsync(IDocumentInfo incomingInfo, string versionId, bool writeableUrl, CancellationToken cancellationToken = default)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: versionId
      type: System.String
      description: Optional version identifier, blank implies 'latest' version
    - id: writeableUrl
      type: System.Boolean
      description: >-
        If true, then the request URL should allow the document editor to write content
                    back to the repository; otherwise, a url that does not support writeback should be supplied
                    if possible.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >-
        WebDAV-compliant URL that gives access to the document. If the document plugin
                    does not support WebDAV access, then a blank string should be returned.
    content.vb: Function GetDocumentUrlAsync(incomingInfo As IDocumentInfo, versionId As String, writeableUrl As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync*
  nameWithType.vb: IDocumentPlugin2.GetDocumentUrlAsync(IDocumentInfo, String, Boolean, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync(SuperOffice.CRM.IDocumentInfo, String, Boolean, System.Threading.CancellationToken)
  name.vb: GetDocumentUrlAsync(IDocumentInfo, String, Boolean, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  id: DeleteDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: DeleteDocumentAsync(IDocumentInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.DeleteDocumentAsync(IDocumentInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync(SuperOffice.CRM.IDocumentInfo, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Delete a document, all versions and all metadata from the repository
  example: []
  syntax:
    content: Task<ReturnInfo> DeleteDocumentAsync(IDocumentInfo documentInfo, string[] allowedReturnTypes, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function DeleteDocumentAsync(documentInfo As IDocumentInfo, allowedReturnTypes As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync*
  nameWithType.vb: IDocumentPlugin2.DeleteDocumentAsync(IDocumentInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync(SuperOffice.CRM.IDocumentInfo, String(), System.Threading.CancellationToken)
  name.vb: DeleteDocumentAsync(IDocumentInfo, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  id: RenameDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: RenameDocumentAsync(IDocumentInfo, string, CancellationToken)
  nameWithType: IDocumentPlugin2.RenameDocumentAsync(IDocumentInfo, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync(SuperOffice.CRM.IDocumentInfo, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Rename a document in the repository
  remarks: >-
    The document name should be changed from the existing to the new name. However,

    if the new name is not valid (or collides with an existing name of some other

    document), then the plugin should amend the name to a valid one and return

    it, instead of throwing an exception.
  example: []
  syntax:
    content: Task<string> RenameDocumentAsync(IDocumentInfo documentInfo, string suggestedNewName, CancellationToken cancellationToken)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: suggestedNewName
      type: System.String
      description: Suggested new document name
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Actual new document name, limited to 254 characters
    content.vb: Function RenameDocumentAsync(documentInfo As IDocumentInfo, suggestedNewName As String, cancellationToken As CancellationToken) As Task(Of String)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync*
  nameWithType.vb: IDocumentPlugin2.RenameDocumentAsync(IDocumentInfo, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync(SuperOffice.CRM.IDocumentInfo, String, System.Threading.CancellationToken)
  name.vb: RenameDocumentAsync(IDocumentInfo, String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  id: GetDocumentIdFromPathAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetDocumentIdFromPathAsync(string, CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentIdFromPathAsync(string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Map a file path to a document. Return 0 if the plugin cannot map the path.
  example: []
  syntax:
    content: Task<int> GetDocumentIdFromPathAsync(string documentPathAndName, CancellationToken cancellationToken = default)
    parameters:
    - id: documentPathAndName
      type: System.String
      description: "\"c:\\path\\to\\a-document.docx\""
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Document id that matches, or 0 if no match
    content.vb: Function GetDocumentIdFromPathAsync(documentPathAndName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync*
  nameWithType.vb: IDocumentPlugin2.GetDocumentIdFromPathAsync(String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync(String, System.Threading.CancellationToken)
  name.vb: GetDocumentIdFromPathAsync(String, CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  id: GetCheckoutStateAsync(SuperOffice.CRM.IDocumentInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetCheckoutStateAsync(IDocumentInfo, CancellationToken)
  nameWithType: IDocumentPlugin2.GetCheckoutStateAsync(IDocumentInfo, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync(SuperOffice.CRM.IDocumentInfo, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get the checkout state of a document
  remarks: >-
    This API is called from inside document archive providers if the plugin has declared that it

    supports fast fetching of this attribute. If the document plugin does not support locking or

    versioning, then the return value should have state NotCheckedOut, associate id 0 and blank name.
  example: []
  syntax:
    content: Task<CheckoutInfo> GetCheckoutStateAsync(IDocumentInfo documentInfo, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.CheckoutInfo}
      description: Object that describes the checkout state of the document
    content.vb: Function GetCheckoutStateAsync(documentInfo As IDocumentInfo, cancellationToken As CancellationToken = Nothing) As Task(Of CheckoutInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync*
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  id: CheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: CheckoutDocumentAsync(IDocumentInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.CheckoutDocumentAsync(IDocumentInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Check out the document for editing
  remarks: >-
    A document plugin that supports versioning may internally prepare to receive new content and 

    prepare a new internal version, but a subsequent <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> call should <b>not</b> 

    show this version – not until CheckinDocument has been called. 

    <p></p>

    After the completion of this call, the document is in checked out state and GetCheckoutState 

    should return “Own” as the status. <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d%2cSystem.IO.Stream%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> calls on behalf of other users should

    fail, as should CheckoutDocument and CheckinDocument calls on behalf of other users.

    <p></p>

    If the document plugin does not support locking or versioning, then this call should perform no action.
  example: []
  syntax:
    content: Task<ReturnInfo> CheckoutDocumentAsync(IDocumentInfo documentInfo, string[] allowedReturnTypes, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function CheckoutDocumentAsync(documentInfo As IDocumentInfo, allowedReturnTypes As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync*
  nameWithType.vb: IDocumentPlugin2.CheckoutDocumentAsync(IDocumentInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo, String(), System.Threading.CancellationToken)
  name.vb: CheckoutDocumentAsync(IDocumentInfo, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  id: CheckinDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: CheckinDocumentAsync(IDocumentInfo, string[], string, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.CheckinDocumentAsync(IDocumentInfo, string[], string, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync(SuperOffice.CRM.IDocumentInfo, string[], string, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Check in a currently checked-out document
  remarks: >-
    If the document plugin supports locking and the requesting user is the one who checked out the document, 

    then the last-saved content by that user should become the new publicly visible content, and 

    the checkout state should be reset. Calls by other users should result in failure and no state change.

    <p></p>

    If the document plugin does not support locking or versioning, then this call should perform no action.
  example: []
  syntax:
    content: Task<ReturnInfo> CheckinDocumentAsync(IDocumentInfo documentInfo, string[] allowedReturnTypes, string versionDescription, string[] versionExtraFields, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")
    - id: versionDescription
      type: System.String
      description: Version description.
    - id: versionExtraFields
      type: System.String[]
      description: Extra fields
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function CheckinDocumentAsync(documentInfo As IDocumentInfo, allowedReturnTypes As String(), versionDescription As String, versionExtraFields As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync*
  nameWithType.vb: IDocumentPlugin2.CheckinDocumentAsync(IDocumentInfo, String(), String, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync(SuperOffice.CRM.IDocumentInfo, String(), String, String(), System.Threading.CancellationToken)
  name.vb: CheckinDocumentAsync(IDocumentInfo, String(), String, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  id: UndoCheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: UndoCheckoutDocumentAsync(IDocumentInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.UndoCheckoutDocumentAsync(IDocumentInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo, string[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Undo (abandon) a checkout
  remarks: >-
    If the document plugin supports locking and the requesting user is the one who checked out the document, 

    then any content saved since the checkout should be discarded and the checkout state reset. 

    The content will be as before checkout. 

    <p></p>

    Calls by other users should result in failure and no state change – except if the calling user has the right to force an undo

    <p></p>

    If the document plugin does not support locking or versioning, then this call should perform no action.
  example: []
  syntax:
    content: Task<ReturnInfo> UndoCheckoutDocumentAsync(IDocumentInfo documentInfo, string[] allowedReturnTypes, CancellationToken cancellationToken = default)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
      description: Return value, indicating success/failure and any optional processing to be performed
    content.vb: Function UndoCheckoutDocumentAsync(documentInfo As IDocumentInfo, allowedReturnTypes As String(), cancellationToken As CancellationToken = Nothing) As Task(Of ReturnInfo)
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync*
  nameWithType.vb: IDocumentPlugin2.UndoCheckoutDocumentAsync(IDocumentInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync(SuperOffice.CRM.IDocumentInfo, String(), System.Threading.CancellationToken)
  name.vb: UndoCheckoutDocumentAsync(IDocumentInfo, String(), CancellationToken)
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  id: GetVersionList(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  langs:
  - csharp
  - vb
  name: GetVersionList(IDocumentInfo)
  nameWithType: IDocumentPlugin2.GetVersionList(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  type: Method
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: Get the list of current versions for the given document
  remarks: >-
    The list should not include an “in-work” version, if the document is currently checked out – only 

    versions visible and accessible to any authorized user.

    <p></p>

    If the document plugin does not support versioning, then this call should return an empty array.
  example: []
  syntax:
    content: VersionInfo[] GetVersionList(IDocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type: SuperOffice.CRM.IDocumentInfo
      description: Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.
    return:
      type: SuperOffice.CRM.Documents.VersionInfo[]
      description: Array of objects describing the existing, committed versions for this document
    content.vb: Function GetVersionList(documentInfo As IDocumentInfo) As VersionInfo()
  overload: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList*
references:
- uid: SuperOffice.UI.Configuration.ICustomUIProvider
  commentId: T:SuperOffice.UI.Configuration.ICustomUIProvider
  isExternal: true
  href: SuperOffice.UI.Configuration.ICustomUIProvider.html
  name: ICustomUIProvider
  nameWithType: ICustomUIProvider
  fullName: SuperOffice.UI.Configuration.ICustomUIProvider
- uid: SuperOffice.CRM.IConfiguration
  commentId: T:SuperOffice.CRM.IConfiguration
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.IConfiguration.html
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: SuperOffice.CRM.IConfiguration
- uid: SuperOffice.CRM.Documents
  commentId: N:SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Documents
  nameWithType: SuperOffice.CRM.Documents
  fullName: SuperOffice.CRM.Documents
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Documents
    name: Documents
    isExternal: true
    href: SuperOffice.CRM.Documents.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Documents
    name: Documents
    isExternal: true
    href: SuperOffice.CRM.Documents.html
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<IDocumentPlugin2, To>(IDocumentPlugin2)
  nameWithType: EnumUtil.MapEnums<IDocumentPlugin2, To>(IDocumentPlugin2)
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.IDocumentPlugin2, To>(SuperOffice.CRM.Documents.IDocumentPlugin2)
  nameWithType.vb: EnumUtil.MapEnums(Of IDocumentPlugin2, To)(IDocumentPlugin2)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.IDocumentPlugin2, To)(SuperOffice.CRM.Documents.IDocumentPlugin2)
  name.vb: MapEnums(Of IDocumentPlugin2, To)(IDocumentPlugin2)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Documents.IDocumentPlugin2)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Documents.IDocumentPlugin2)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<IDocumentPlugin2, To>(IDocumentPlugin2)
  nameWithType: Converters.MapEnums<IDocumentPlugin2, To>(IDocumentPlugin2)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.IDocumentPlugin2, To>(SuperOffice.CRM.Documents.IDocumentPlugin2)
  nameWithType.vb: Converters.MapEnums(Of IDocumentPlugin2, To)(IDocumentPlugin2)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.IDocumentPlugin2, To)(SuperOffice.CRM.Documents.IDocumentPlugin2)
  name.vb: MapEnums(Of IDocumentPlugin2, To)(IDocumentPlugin2)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Documents.IDocumentPlugin2)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Documents.IDocumentPlugin2)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2
    name: IDocumentPlugin2
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  - name: )
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.CRM.Documents.Constants.Capabilities
  commentId: T:SuperOffice.CRM.Documents.Constants.Capabilities
  isExternal: true
  href: SuperOffice.CRM.Documents.Constants.html
  name: Constants.Capabilities
  nameWithType: Constants.Capabilities
  fullName: SuperOffice.CRM.Documents.Constants.Capabilities
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.Constants
    name: Constants
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.html
  - name: .
  - uid: SuperOffice.CRM.Documents.Constants.Capabilities
    name: Capabilities
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.Capabilities.html
  spec.vb:
  - uid: SuperOffice.CRM.Documents.Constants
    name: Constants
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.html
  - name: .
  - uid: SuperOffice.CRM.Documents.Constants.Capabilities
    name: Capabilities
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.Capabilities.html
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetPluginCapabilities
  name: GetPluginCapabilities
  nameWithType: IDocumentPlugin2.GetPluginCapabilities
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: SuperOffice.CRM.Documents.Constants.Properties
  commentId: T:SuperOffice.CRM.Documents.Constants.Properties
  isExternal: true
  href: SuperOffice.CRM.Documents.Constants.html
  name: Constants.Properties
  nameWithType: Constants.Properties
  fullName: SuperOffice.CRM.Documents.Constants.Properties
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.Constants
    name: Constants
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.html
  - name: .
  - uid: SuperOffice.CRM.Documents.Constants.Properties
    name: Properties
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.Properties.html
  spec.vb:
  - uid: SuperOffice.CRM.Documents.Constants
    name: Constants
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.html
  - name: .
  - uid: SuperOffice.CRM.Documents.Constants.Properties
    name: Properties
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.Properties.html
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  name: LoadMetaData(IDocumentInfo)
  nameWithType: IDocumentPlugin2.LoadMetaData(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
    name: LoadMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
    name: LoadMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveMetaData_SuperOffice_CRM_IDocumentInfo_System_Collections_Generic_Dictionary_System_String_System_String__
  name: SaveMetaData(IDocumentInfo, Dictionary<string, string>)
  nameWithType: IDocumentPlugin2.SaveMetaData(IDocumentInfo, Dictionary<string, string>)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary<string, string>)
  nameWithType.vb: IDocumentPlugin2.SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo, System.Collections.Generic.Dictionary(Of String, String))
  name.vb: SaveMetaData(IDocumentInfo, Dictionary(Of String, String))
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
    name: SaveMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveMetaData_SuperOffice_CRM_IDocumentInfo_System_Collections_Generic_Dictionary_System_String_System_String__
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})
    name: SaveMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveMetaData_SuperOffice_CRM_IDocumentInfo_System_Collections_Generic_Dictionary_System_String_System_String__
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentPropertiesAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  name: GetDocumentPropertiesAsync
  nameWithType: IDocumentPlugin2.GetDocumentPropertiesAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync
- uid: SuperOffice.CRM.IDocumentInfo
  commentId: T:SuperOffice.CRM.IDocumentInfo
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.IDocumentInfo.html
  name: IDocumentInfo
  nameWithType: IDocumentInfo
  fullName: SuperOffice.CRM.IDocumentInfo
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Dictionary<string, string>>
  nameWithType: Task<Dictionary<string, string>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>>
  nameWithType.vb: Task(Of Dictionary(Of String, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of String, String))
  name.vb: Task(Of Dictionary(Of String, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2
  commentId: T:SuperOffice.CRM.Documents.IDocumentPlugin2
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  name: IDocumentPlugin2
  nameWithType: IDocumentPlugin2
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.CRM.Documents.CommandInfo
  commentId: T:SuperOffice.CRM.Documents.CommandInfo
  isExternal: true
  href: SuperOffice.CRM.Documents.CommandInfo.html
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: SuperOffice.CRM.Documents.CommandInfo
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentCommands_SuperOffice_CRM_IDocumentInfo_System_String___
  name: GetDocumentCommands
  nameWithType: IDocumentPlugin2.GetDocumentCommands
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands
- uid: SuperOffice.CRM.Documents.CommandInfo[]
  isExternal: true
  href: SuperOffice.CRM.Documents.CommandInfo.html
  name: CommandInfo[]
  nameWithType: CommandInfo[]
  fullName: SuperOffice.CRM.Documents.CommandInfo[]
  nameWithType.vb: CommandInfo()
  fullName.vb: SuperOffice.CRM.Documents.CommandInfo()
  name.vb: CommandInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.CommandInfo.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.CommandInfo.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentCommands_SuperOffice_CRM_IDocumentInfo_System_String___
  name: GetDocumentCommands(IDocumentInfo, string[])
  nameWithType: IDocumentPlugin2.GetDocumentCommands(IDocumentInfo, string[])
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, string[])
  nameWithType.vb: IDocumentPlugin2.GetDocumentCommands(IDocumentInfo, String())
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo, String())
  name.vb: GetDocumentCommands(IDocumentInfo, String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: GetDocumentCommands
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentCommands_SuperOffice_CRM_IDocumentInfo_System_String___
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])
    name: GetDocumentCommands
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentCommands_SuperOffice_CRM_IDocumentInfo_System_String___
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_ExecuteDocumentCommand_SuperOffice_CRM_IDocumentInfo_System_String_System_String___System_String_System_String___
  name: ExecuteDocumentCommand
  nameWithType: IDocumentPlugin2.ExecuteDocumentCommand
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.CRM.ReturnInfo
  commentId: T:SuperOffice.CRM.ReturnInfo
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.ReturnInfo.html
  name: ReturnInfo
  nameWithType: ReturnInfo
  fullName: SuperOffice.CRM.ReturnInfo
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Globalization.CultureDataFormatter
  commentId: T:SuperOffice.CRM.Globalization.CultureDataFormatter
  isExternal: true
  href: SuperOffice.CRM.Globalization.CultureDataFormatter.html
  name: CultureDataFormatter
  nameWithType: CultureDataFormatter
  fullName: SuperOffice.CRM.Globalization.CultureDataFormatter
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetPluginCapabilities
  name: GetPluginCapabilities()
  nameWithType: IDocumentPlugin2.GetPluginCapabilities()
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
    name: GetPluginCapabilities
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetPluginCapabilities
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities
    name: GetPluginCapabilities
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetPluginCapabilities
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentPropertiesAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  name: GetDocumentPropertiesAsync(IDocumentInfo, string[], CancellationToken)
  nameWithType: IDocumentPlugin2.GetDocumentPropertiesAsync(IDocumentInfo, string[], CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo, string[], System.Threading.CancellationToken)
  nameWithType.vb: IDocumentPlugin2.GetDocumentPropertiesAsync(IDocumentInfo, String(), CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo, String(), System.Threading.CancellationToken)
  name.vb: GetDocumentPropertiesAsync(IDocumentInfo, String(), CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
    name: GetDocumentPropertiesAsync
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentPropertiesAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentPropertiesAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.Threading.CancellationToken)
    name: GetDocumentPropertiesAsync
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentPropertiesAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  name: LoadMetaData
  nameWithType: IDocumentPlugin2.LoadMetaData
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  name: GetVersionList(IDocumentInfo)
  nameWithType: IDocumentPlugin2.GetVersionList(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
    name: GetVersionList
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
    name: GetVersionList
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadVersionInfo_SuperOffice_CRM_IDocumentInfo_System_String_
  name: LoadVersionInfo
  nameWithType: IDocumentPlugin2.LoadVersionInfo
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo
- uid: SuperOffice.CRM.Documents.VersionInfo
  commentId: T:SuperOffice.CRM.Documents.VersionInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.VersionInfo.html
  name: VersionInfo
  nameWithType: VersionInfo
  fullName: SuperOffice.CRM.Documents.VersionInfo
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveMetaData_SuperOffice_CRM_IDocumentInfo_System_Collections_Generic_Dictionary_System_String_System_String__
  name: SaveMetaData
  nameWithType: IDocumentPlugin2.SaveMetaData
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadVersionInfo_SuperOffice_CRM_IDocumentInfo_System_String_
  name: LoadVersionInfo(IDocumentInfo, string)
  nameWithType: IDocumentPlugin2.LoadVersionInfo(IDocumentInfo, string)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo, string)
  nameWithType.vb: IDocumentPlugin2.LoadVersionInfo(IDocumentInfo, String)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo, String)
  name.vb: LoadVersionInfo(IDocumentInfo, String)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
    name: LoadVersionInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadVersionInfo_SuperOffice_CRM_IDocumentInfo_System_String_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)
    name: LoadVersionInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadVersionInfo_SuperOffice_CRM_IDocumentInfo_System_String_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveVersionInfo_SuperOffice_CRM_IDocumentInfo_SuperOffice_CRM_Documents_VersionInfo_
  name: SaveVersionInfo
  nameWithType: IDocumentPlugin2.SaveVersionInfo
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo
- uid: SuperOffice.CRM.Documents.Constants.Capabilities.FastExists
  commentId: F:SuperOffice.CRM.Documents.Constants.Capabilities.FastExists
  isExternal: true
  href: SuperOffice.CRM.Documents.Constants.Capabilities.html#SuperOffice_CRM_Documents_Constants_Capabilities_FastExists
  name: FastExists
  nameWithType: Constants.Capabilities.FastExists
  fullName: SuperOffice.CRM.Documents.Constants.Capabilities.FastExists
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_ExistsAsync_SuperOffice_CRM_IDocumentInfo_System_Threading_CancellationToken_
  name: ExistsAsync
  nameWithType: IDocumentPlugin2.ExistsAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.ExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetLengthAsync_SuperOffice_CRM_IDocumentInfo_System_String_System_Threading_CancellationToken_
  name: GetLengthAsync
  nameWithType: IDocumentPlugin2.GetLengthAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetLengthAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<long>
  nameWithType: Task<long>
  fullName: System.Threading.Tasks.Task<long>
  nameWithType.vb: Task(Of Long)
  fullName.vb: System.Threading.Tasks.Task(Of Long)
  name.vb: Task(Of Long)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveDocumentTemplateStreamAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_IO_Stream_System_String_System_Threading_CancellationToken_
  name: SaveDocumentTemplateStreamAsync
  nameWithType: IDocumentPlugin2.SaveDocumentTemplateStreamAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStreamAsync
- uid: SuperOffice.CRM.IDocumentTemplateInfo
  commentId: T:SuperOffice.CRM.IDocumentTemplateInfo
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.IDocumentTemplateInfo.html
  name: IDocumentTemplateInfo
  nameWithType: IDocumentTemplateInfo
  fullName: SuperOffice.CRM.IDocumentTemplateInfo
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Documents.TemplateInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TemplateInfo>
  nameWithType: Task<TemplateInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Documents.TemplateInfo>
  nameWithType.vb: Task(Of TemplateInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Documents.TemplateInfo)
  name.vb: Task(Of TemplateInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Documents.TemplateInfo
    name: TemplateInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.TemplateInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Documents.TemplateInfo
    name: TemplateInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.TemplateInfo.html
  - name: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadDocumentTemplateStreamAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String_System_Threading_CancellationToken_
  name: LoadDocumentTemplateStreamAsync
  nameWithType: IDocumentPlugin2.LoadDocumentTemplateStreamAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetTemplateExtensionAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_Threading_CancellationToken_
  name: GetTemplateExtensionAsync
  nameWithType: IDocumentPlugin2.GetTemplateExtensionAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtensionAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetSupportedDocumentTypesForDocumentTemplates
  name: GetSupportedDocumentTypesForDocumentTemplates()
  nameWithType: IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates()
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    name: GetSupportedDocumentTypesForDocumentTemplates
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetSupportedDocumentTypesForDocumentTemplates
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
    name: GetSupportedDocumentTypesForDocumentTemplates
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetSupportedDocumentTypesForDocumentTemplates
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_CreateDefaultDocumentTemplateAsync_System_Int32_SuperOffice_CRM_IDocumentTemplateInfo_System_Threading_CancellationToken_
  name: CreateDefaultDocumentTemplateAsync
  nameWithType: IDocumentPlugin2.CreateDefaultDocumentTemplateAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplateAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetSupportedDocumentTypesForDocumentTemplates
  name: GetSupportedDocumentTypesForDocumentTemplates
  nameWithType: IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates
- uid: System.Collections.Generic.Dictionary{System.Int32,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, string>
  nameWithType: Dictionary<int, string>
  fullName: System.Collections.Generic.Dictionary<int, string>
  nameWithType.vb: Dictionary(Of Integer, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, String)
  name.vb: Dictionary(Of Integer, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentTemplatePropertiesAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String___System_Threading_CancellationToken_
  name: GetDocumentTemplatePropertiesAsync
  nameWithType: IDocumentPlugin2.GetDocumentTemplatePropertiesAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplatePropertiesAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentTemplateUrlAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_Boolean_System_String_System_Threading_CancellationToken_
  name: GetDocumentTemplateUrlAsync
  nameWithType: IDocumentPlugin2.GetDocumentTemplateUrlAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrlAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentTemplateLanguagesAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_Threading_CancellationToken_
  name: GetDocumentTemplateLanguagesAsync
  nameWithType: IDocumentPlugin2.GetDocumentTemplateLanguagesAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguagesAsync
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: T:System.Threading.Tasks.Task{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string[]>
  nameWithType: Task<string[]>
  fullName: System.Threading.Tasks.Task<string[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_DeleteDocumentTemplateAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String___System_Threading_CancellationToken_
  name: DeleteDocumentTemplateAsync
  nameWithType: IDocumentPlugin2.DeleteDocumentTemplateAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.ReturnInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ReturnInfo>
  nameWithType: Task<ReturnInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.ReturnInfo>
  nameWithType.vb: Task(Of ReturnInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.ReturnInfo)
  name.vb: Task(Of ReturnInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.ReturnInfo
    name: ReturnInfo
    isExternal: true
    href: SuperOffice.CRM.ReturnInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.ReturnInfo
    name: ReturnInfo
    isExternal: true
    href: SuperOffice.CRM.ReturnInfo.html
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_DeleteDocumentTemplateLanguageAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String_System_String___System_Threading_CancellationToken_
  name: DeleteDocumentTemplateLanguageAsync
  nameWithType: IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguageAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadDocumentTemplateStreamAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String_System_Threading_CancellationToken_
  name: LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, string, CancellationToken)
  nameWithType: IDocumentPlugin2.LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, string, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo, string, System.Threading.CancellationToken)
  nameWithType.vb: IDocumentPlugin2.LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo, String, System.Threading.CancellationToken)
  name.vb: LoadDocumentTemplateStreamAsync(IDocumentTemplateInfo, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
    name: LoadDocumentTemplateStreamAsync
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadDocumentTemplateStreamAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentTemplateInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStreamAsync(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.Threading.CancellationToken)
    name: LoadDocumentTemplateStreamAsync
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadDocumentTemplateStreamAsync_SuperOffice_CRM_IDocumentTemplateInfo_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.CRM.IDocumentTemplateInfo
    name: IDocumentTemplateInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentTemplateInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveDocumentFromStreamAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_IO_Stream_System_Threading_CancellationToken_
  name: SaveDocumentFromStreamAsync(IDocumentInfo, string[], Stream, CancellationToken)
  nameWithType: IDocumentPlugin2.SaveDocumentFromStreamAsync(IDocumentInfo, string[], Stream, CancellationToken)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo, string[], System.IO.Stream, System.Threading.CancellationToken)
  nameWithType.vb: IDocumentPlugin2.SaveDocumentFromStreamAsync(IDocumentInfo, String(), Stream, CancellationToken)
  fullName.vb: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo, String(), System.IO.Stream, System.Threading.CancellationToken)
  name.vb: SaveDocumentFromStreamAsync(IDocumentInfo, String(), Stream, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
    name: SaveDocumentFromStreamAsync
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveDocumentFromStreamAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_IO_Stream_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream,System.Threading.CancellationToken)
    name: SaveDocumentFromStreamAsync
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveDocumentFromStreamAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_IO_Stream_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_CreateDocumentAsync_SuperOffice_CRM_IDocumentInfo_System_String_System_String___System_String_System_String___System_Threading_CancellationToken_
  name: CreateDocumentAsync
  nameWithType: IDocumentPlugin2.CreateDocumentAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocumentAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(string value, string tooltip)>
  nameWithType: Task<(string value, string tooltip)>
  fullName: System.Threading.Tasks.Task<(string value, string tooltip)>
  nameWithType.vb: Task(Of (value As String, tooltip As String))
  fullName.vb: System.Threading.Tasks.Task(Of (value As String, tooltip As String))
  name.vb: Task(Of (value As String, tooltip As String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.value
    name: value
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.value
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.tooltip
    name: tooltip
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.tooltip
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.String,System.String}.value
    name: value
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.value
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.tooltip
    name: tooltip
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.tooltip
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_SaveDocumentFromStreamAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_IO_Stream_System_Threading_CancellationToken_
  name: SaveDocumentFromStreamAsync
  nameWithType: IDocumentPlugin2.SaveDocumentFromStreamAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStreamAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadDocumentStreamAsync_SuperOffice_CRM_IDocumentInfo_System_String_System_Threading_CancellationToken_
  name: LoadDocumentStreamAsync
  nameWithType: IDocumentPlugin2.LoadDocumentStreamAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStreamAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentUrlAsync_SuperOffice_CRM_IDocumentInfo_System_String_System_Boolean_System_Threading_CancellationToken_
  name: GetDocumentUrlAsync
  nameWithType: IDocumentPlugin2.GetDocumentUrlAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrlAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_DeleteDocumentAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  name: DeleteDocumentAsync
  nameWithType: IDocumentPlugin2.DeleteDocumentAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_RenameDocumentAsync_SuperOffice_CRM_IDocumentInfo_System_String_System_Threading_CancellationToken_
  name: RenameDocumentAsync
  nameWithType: IDocumentPlugin2.RenameDocumentAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocumentAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetDocumentIdFromPathAsync_System_String_System_Threading_CancellationToken_
  name: GetDocumentIdFromPathAsync
  nameWithType: IDocumentPlugin2.GetDocumentIdFromPathAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPathAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetCheckoutStateAsync_SuperOffice_CRM_IDocumentInfo_System_Threading_CancellationToken_
  name: GetCheckoutStateAsync
  nameWithType: IDocumentPlugin2.GetCheckoutStateAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutStateAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Documents.CheckoutInfo}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Documents.CheckoutInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<CheckoutInfo>
  nameWithType: Task<CheckoutInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Documents.CheckoutInfo>
  nameWithType.vb: Task(Of CheckoutInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Documents.CheckoutInfo)
  name.vb: Task(Of CheckoutInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Documents.CheckoutInfo
    name: CheckoutInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.CheckoutInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Documents.CheckoutInfo
    name: CheckoutInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.CheckoutInfo.html
  - name: )
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_CheckoutDocumentAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  name: CheckoutDocumentAsync
  nameWithType: IDocumentPlugin2.CheckoutDocumentAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocumentAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_CheckinDocumentAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_String_System_String___System_Threading_CancellationToken_
  name: CheckinDocumentAsync
  nameWithType: IDocumentPlugin2.CheckinDocumentAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocumentAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_UndoCheckoutDocumentAsync_SuperOffice_CRM_IDocumentInfo_System_String___System_Threading_CancellationToken_
  name: UndoCheckoutDocumentAsync
  nameWithType: IDocumentPlugin2.UndoCheckoutDocumentAsync
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocumentAsync
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList*
  commentId: Overload:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  name: GetVersionList
  nameWithType: IDocumentPlugin2.GetVersionList
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList
- uid: SuperOffice.CRM.Documents.VersionInfo[]
  isExternal: true
  href: SuperOffice.CRM.Documents.VersionInfo.html
  name: VersionInfo[]
  nameWithType: VersionInfo[]
  fullName: SuperOffice.CRM.Documents.VersionInfo[]
  nameWithType.vb: VersionInfo()
  fullName.vb: SuperOffice.CRM.Documents.VersionInfo()
  name.vb: VersionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.VersionInfo.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.VersionInfo.html
  - name: (
  - name: )
