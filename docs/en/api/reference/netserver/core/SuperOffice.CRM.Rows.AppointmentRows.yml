### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Rows.AppointmentRows
  commentId: T:SuperOffice.CRM.Rows.AppointmentRows
  id: AppointmentRows
  parent: SuperOffice.CRM.Rows
  children:
  - SuperOffice.CRM.Rows.AppointmentRows.Add(SuperOffice.CRM.Rows.AppointmentRow)
  - SuperOffice.CRM.Rows.AppointmentRows.AddNew
  - SuperOffice.CRM.Rows.AppointmentRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow})
  - SuperOffice.CRM.Rows.AppointmentRows.CreateChild
  - SuperOffice.CRM.Rows.AppointmentRows.CreateNew
  - SuperOffice.CRM.Rows.AppointmentRows.Find(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  - SuperOffice.CRM.Rows.AppointmentRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  - SuperOffice.CRM.Rows.AppointmentRows.ForEach(System.Action{SuperOffice.CRM.Rows.AppointmentRow})
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.AppointmentRows.CustomSearch,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync(SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync(SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.AppointmentTableInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.AppointmentRows.Item(System.Int32)
  - SuperOffice.CRM.Rows.AppointmentRows.Remove(SuperOffice.CRM.Rows.AppointmentRow)
  - SuperOffice.CRM.Rows.AppointmentRows.ToArray
  - SuperOffice.CRM.Rows.AppointmentRows.ToString
  langs:
  - csharp
  - vb
  name: AppointmentRows
  nameWithType: AppointmentRows
  fullName: SuperOffice.CRM.Rows.AppointmentRows
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nTasks, appointments, followups, phone calls; and documents (document_id != 0). An appointment always has a corresponding record in VisibleFor specifying who may see this. \nCollection of AppointmentRow. Each element of the collection represents one row in the Appointment\ntable. \n"
  remarks: "\nRow collections can be created in several ways. \n<ul><li>Use the static <xref href=\"SuperOffice.CRM.Rows.AppointmentRows.CreateNew\" data-throw-if-not-resolved=\"false\"></xref> method to create a new, empty collection. You can then add objects of type\n<xref href=\"SuperOffice.CRM.Rows.AppointmentRow\" data-throw-if-not-resolved=\"false\"></xref> to it, and use methods like <see cref=\"!:Save\"></see> to operate on the whole collection.</li><li>You can create a (nested) AppointmentRows <xref href=\"SuperOffice.CRM.Rows.AppointmentRows.CustomSearch\" data-throw-if-not-resolved=\"false\"></xref> object to obtain a query pre-populated with\nthe correct tableinfo and return fields. This query can be modified with restrictions, etc. Then, use the static <see cref=\"!:GetFromCustomSearch\"></see> method\nto apply the query to the database and obtain the result as a Rows object, with one item for each table row that matched your query.</li><li>For each non-unique index defined for the table, there is a corresponding GetFromIdx method to make retrieving data via the indexes easy.</li></ul>\nUnique indexes are handled through the <xref href=\"SuperOffice.CRM.Rows.AppointmentRow\" data-throw-if-not-resolved=\"false\"></xref> object directly,\nwhich has nested classes and GetFromIdx methods for each unique index. Similarly, there is a <see cref=\"!:SuperOffice.CRM.Rows.AppointmentRows.GetFromReader\"></see>\nmethod to retrieve the results of queries that return more than one row (this method will iterate over the reader to fetch ALL results, so beware of fetching\nhuge result sets).\n<p></p>\n"
  syntax:
    content: 'public class AppointmentRows : TableRowsBase, INestedPersist, IEnumerable<INestedPersist>, IList, ICollection, IEnumerable, INotifyCollectionChanged, IBindingList'
    content.vb: >-
      Public Class AppointmentRows
          Inherits TableRowsBase
          Implements INestedPersist, IEnumerable(Of INestedPersist), IList, ICollection, IEnumerable, INotifyCollectionChanged, IBindingList
  inheritance:
  - System.Object
  - SuperOffice.Data.NestedPersist
  - SuperOffice.Data.NestedPersistFacade
  - SuperOffice.Data.NestedCollectionPersist
  - SuperOffice.CRM.Rows.TableRowsBase
  implements:
  - SuperOffice.Data.INestedPersist
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.IBindingList
  inheritedMembers:
  - SuperOffice.CRM.Rows.TableRowsBase._innerList
  - SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  - SuperOffice.CRM.Rows.TableRowsBase._sentries
  - SuperOffice.CRM.Rows.TableRowsBase._idx
  - SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  - SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  - SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  - SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  - SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  - SuperOffice.CRM.Rows.TableRowsBase.Clear
  - SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  - SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  - SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  - SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  - SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  - SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  - SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  - SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  - SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  - SuperOffice.CRM.Rows.TableRowsBase.Sentries
  - SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  - SuperOffice.CRM.Rows.TableRowsBase.Index
  - SuperOffice.CRM.Rows.TableRowsBase.Count
  - SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  - SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  - SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  - SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  - SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  - SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  - SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  - SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  - SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  - SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  - SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  - SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  - SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  - SuperOffice.Data.NestedCollectionPersist.IsDeleted
  - SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  - SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  - SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  - SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  - SuperOffice.Data.NestedPersist._saveOwner
  - SuperOffice.Data.NestedPersist._isSaving
  - SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  - SuperOffice.Data.NestedPersist.SaveAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  - SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  - SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  - SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  - SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  - SuperOffice.Data.NestedPersist.IsSaving
  - SuperOffice.Data.NestedPersist.OnElementSaved
  - SuperOffice.Data.NestedPersist.OnElementIdUpdate
  extensionMethods:
  - SuperOffice.CRM.Rows.AppointmentRows.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Rows.AppointmentRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Rows.AppointmentRows.ForEach(System.Action{SuperOffice.CRM.Rows.AppointmentRow})
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.ForEach(System.Action{SuperOffice.CRM.Rows.AppointmentRow})
  id: ForEach(System.Action{SuperOffice.CRM.Rows.AppointmentRow})
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: ForEach(Action<AppointmentRow>)
  nameWithType: AppointmentRows.ForEach(Action<AppointmentRow>)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.ForEach(System.Action<SuperOffice.CRM.Rows.AppointmentRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nMethod that iterates over all members and applies the action parameter to each of them\n"
  syntax:
    content: public void ForEach(Action<AppointmentRow> whatToDo)
    parameters:
    - id: whatToDo
      type: System.Action{SuperOffice.CRM.Rows.AppointmentRow}
    content.vb: Public Sub ForEach(whatToDo As Action(Of AppointmentRow))
  overload: SuperOffice.CRM.Rows.AppointmentRows.ForEach*
  nameWithType.vb: AppointmentRows.ForEach(Action(Of AppointmentRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.AppointmentRows.ForEach(System.Action(Of SuperOffice.CRM.Rows.AppointmentRow))
  name.vb: ForEach(Action(Of AppointmentRow))
- uid: SuperOffice.CRM.Rows.AppointmentRows.Find(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.Find(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  id: Find(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: Find(Predicate<AppointmentRow>)
  nameWithType: AppointmentRows.Find(Predicate<AppointmentRow>)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Find(System.Predicate<SuperOffice.CRM.Rows.AppointmentRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nApply the predicate to each element of the collection and return the first row that matches; if no match then return null\n"
  syntax:
    content: public AppointmentRow Find(Predicate<AppointmentRow> condition)
    parameters:
    - id: condition
      type: System.Predicate{SuperOffice.CRM.Rows.AppointmentRow}
    return:
      type: SuperOffice.CRM.Rows.AppointmentRow
    content.vb: Public Function Find(condition As Predicate(Of AppointmentRow)) As AppointmentRow
  overload: SuperOffice.CRM.Rows.AppointmentRows.Find*
  nameWithType.vb: AppointmentRows.Find(Predicate(Of AppointmentRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.AppointmentRows.Find(System.Predicate(Of SuperOffice.CRM.Rows.AppointmentRow))
  name.vb: Find(Predicate(Of AppointmentRow))
- uid: SuperOffice.CRM.Rows.AppointmentRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  id: FindAll(System.Predicate{SuperOffice.CRM.Rows.AppointmentRow})
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<AppointmentRow>)
  nameWithType: AppointmentRows.FindAll(Predicate<AppointmentRow>)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.FindAll(System.Predicate<SuperOffice.CRM.Rows.AppointmentRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nReturn a new collection that contains only those elements that match the condition. Elements are shared, not clones! of the original collection\n"
  syntax:
    content: public AppointmentRows FindAll(Predicate<AppointmentRow> condition)
    parameters:
    - id: condition
      type: System.Predicate{SuperOffice.CRM.Rows.AppointmentRow}
    return:
      type: SuperOffice.CRM.Rows.AppointmentRows
    content.vb: Public Function FindAll(condition As Predicate(Of AppointmentRow)) As AppointmentRows
  overload: SuperOffice.CRM.Rows.AppointmentRows.FindAll*
  nameWithType.vb: AppointmentRows.FindAll(Predicate(Of AppointmentRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.AppointmentRows.FindAll(System.Predicate(Of SuperOffice.CRM.Rows.AppointmentRow))
  name.vb: FindAll(Predicate(Of AppointmentRow))
- uid: SuperOffice.CRM.Rows.AppointmentRows.CreateNew
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.CreateNew
  id: CreateNew
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: CreateNew()
  nameWithType: AppointmentRows.CreateNew()
  fullName: SuperOffice.CRM.Rows.AppointmentRows.CreateNew()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRows object. This collection will contain no rows.\n"
  syntax:
    content: public static AppointmentRows CreateNew()
    return:
      type: SuperOffice.CRM.Rows.AppointmentRows
      description: "\nA new instance of the AppointmentRows object.\n"
    content.vb: Public Shared Function CreateNew As AppointmentRows
  overload: SuperOffice.CRM.Rows.AppointmentRows.CreateNew*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.AppointmentRows.CustomSearch,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.AppointmentRows.CustomSearch,System.Threading.CancellationToken)
  id: GetFromCustomSearchAsync(SuperOffice.CRM.Rows.AppointmentRows.CustomSearch,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromCustomSearchAsync(AppointmentRows.CustomSearch, CancellationToken)
  nameWithType: AppointmentRows.GetFromCustomSearchAsync(AppointmentRows.CustomSearch, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.AppointmentRows.CustomSearch, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRows object, and populate it with data from a custom search.\nIf the search returns no results, an empty collection will be returned; if the result contains\nrows, a collection of AppointmentRow objects representing each row will be returned. \n"
  syntax:
    content: public static Task<AppointmentRows> GetFromCustomSearchAsync(AppointmentRows.CustomSearch query, CancellationToken cancellationToken = null)
    parameters:
    - id: query
      type: SuperOffice.CRM.Rows.AppointmentRows.CustomSearch
      description: The custom search to execute against the database
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: A new instance of the AppointmentRows object, reflecting the result of the query.
    content.vb: Public Shared Function GetFromCustomSearchAsync(query As AppointmentRows.CustomSearch, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxContactIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxContactIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntCont_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxContactIdAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxContactIdAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxPersonIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxPersonIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntPers_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxPersonIdAsync(int personId, CancellationToken cancellationToken = null)
    parameters:
    - id: personId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxPersonIdAsync(personId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxGroupIdxAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxGroupIdxAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxGroupIdxAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntGrp_idx&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxGroupIdxAsync(int groupIdx, CancellationToken cancellationToken = null)
    parameters:
    - id: groupIdx
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxGroupIdxAsync(groupIdx As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxDoneAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDoneAsync(DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxDoneAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntDone&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxDoneAsync(DateTime done, CancellationToken cancellationToken = null)
    parameters:
    - id: done
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDoneAsync(done As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxDoByAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDoByAsync(DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxDoByAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntDo_by&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxDoByAsync(DateTime doBy, CancellationToken cancellationToken = null)
    parameters:
    - id: doBy
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDoByAsync(doBy As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxTextIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxTextIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxTextIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntText_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxTextIdAsync(int textId, CancellationToken cancellationToken = null)
    parameters:
    - id: textId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxTextIdAsync(textId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntProj_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdAsync(int projectId, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdAsync(projectId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntMother_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdAsync(int motherId, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdAsync(motherId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDocumentIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxDocumentIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntDoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxDocumentIdAsync(int documentId, CancellationToken cancellationToken = null)
    parameters:
    - id: documentId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDocumentIdAsync(documentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxActiveDateAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxActiveDateAsync(DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxActiveDateAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntActiveDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxActiveDateAsync(DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxActiveDateAsync(activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  id: GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxSourceAsync(Int16, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxSourceAsync(Int16, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync(System.Int16, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntSource&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxSourceAsync(short source, CancellationToken cancellationToken = null)
    parameters:
    - id: source
      type: System.Int16
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxSourceAsync(source As Short, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxUserdefIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxUserdefIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntUdef_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxUserdefIdAsync(int userdefId, CancellationToken cancellationToken = null)
    parameters:
    - id: userdefId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxUserdefIdAsync(userdefId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxUserdef2IdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxUserdef2IdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntUdef2_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxUserdef2IdAsync(int userdef2Id, CancellationToken cancellationToken = null)
    parameters:
    - id: userdef2Id
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxUserdef2IdAsync(userdef2Id As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxSaleIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxSaleIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxSaleIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntSale_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxSaleIdAsync(int saleId, CancellationToken cancellationToken = null)
    parameters:
    - id: saleId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxSaleIdAsync(saleId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxSuggestedAppointmentIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxSuggestedAppointmentIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntSuggestedAppointmentId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxSuggestedAppointmentIdAsync(int suggestedAppointmentId, CancellationToken cancellationToken = null)
    parameters:
    - id: suggestedAppointmentId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxSuggestedAppointmentIdAsync(suggestedAppointmentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxSuggestedDocumentIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxSuggestedDocumentIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxSuggestedDocumentIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntSuggestedDocumentId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxSuggestedDocumentIdAsync(int suggestedDocumentId, CancellationToken cancellationToken = null)
    parameters:
    - id: suggestedDocumentId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxSuggestedDocumentIdAsync(suggestedDocumentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeAsync(Int32, AppointmentType, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeAsync(Int32, AppointmentType, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync(System.Int32, SuperOffice.Data.AppointmentType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idType&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeAsync(int projectId, AppointmentType type, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeAsync(projectId As Integer, type As AppointmentType, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  id: GetFromIdxContactIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxContactIdTypeAsync(Int32, AppointmentType, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxContactIdTypeAsync(Int32, AppointmentType, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync(System.Int32, SuperOffice.Data.AppointmentType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;ICont_idType&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxContactIdTypeAsync(int contactId, AppointmentType type, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxContactIdTypeAsync(contactId As Integer, type As AppointmentType, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeStatusDone&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdAsync(int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdAsync(associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeAsync(System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeAsync(Int32, AppointmentType, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeAsync(Int32, AppointmentType, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync(System.Int32, SuperOffice.Data.AppointmentType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeStatusDone&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeAsync(int associateId, AppointmentType type, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeAsync(associateId As Integer, type As AppointmentType, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeStatusAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeStatusAsync(Int32, AppointmentType, AppointmentStatus, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync(Int32, AppointmentType, AppointmentStatus, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync(System.Int32, SuperOffice.Data.AppointmentType, SuperOffice.Data.AppointmentStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeStatusDone&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeStatusAsync(int associateId, AppointmentType type, AppointmentStatus status, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeStatusAsync(associateId As Integer, type As AppointmentType, status As AppointmentStatus, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeStatusDoneAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeStatusDoneAsync(Int32, AppointmentType, AppointmentStatus, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync(Int32, AppointmentType, AppointmentStatus, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync(System.Int32, SuperOffice.Data.AppointmentType, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeStatusDone&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeStatusDoneAsync(int associateId, AppointmentType type, AppointmentStatus status, DateTime done, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: done
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeStatusDoneAsync(associateId As Integer, type As AppointmentType, status As AppointmentStatus, done As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeStatusDoByAsync(Int32, AppointmentType, AppointmentStatus, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync(Int32, AppointmentType, AppointmentStatus, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync(System.Int32, SuperOffice.Data.AppointmentType, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeStatusDo_by&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeStatusDoByAsync(int associateId, AppointmentType type, AppointmentStatus status, DateTime doBy, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: doBy
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeStatusDoByAsync(associateId As Integer, type As AppointmentType, status As AppointmentStatus, doBy As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeEndDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeEndDateAsync(Int32, AppointmentType, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync(Int32, AppointmentType, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeEndDateDo_by&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeEndDateAsync(int associateId, AppointmentType type, DateTime endDate, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: endDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeEndDateAsync(associateId As Integer, type As AppointmentType, endDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeEndDateDoByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeEndDateDoByAsync(Int32, AppointmentType, DateTime, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync(Int32, AppointmentType, DateTime, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeEndDateDo_by&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeEndDateDoByAsync(int associateId, AppointmentType type, DateTime endDate, DateTime doBy, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: endDate
      type: System.DateTime
    - id: doBy
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeEndDateDoByAsync(associateId As Integer, type As AppointmentType, endDate As DateTime, doBy As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdTypeStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdTypeStatusActiveDateAsync(Int32, AppointmentType, AppointmentStatus, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync(Int32, AppointmentType, AppointmentStatus, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync(System.Int32, SuperOffice.Data.AppointmentType, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idTypeStatusActiveDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdTypeStatusActiveDateAsync(int associateId, AppointmentType type, AppointmentStatus status, DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdTypeStatusActiveDateAsync(associateId As Integer, type As AppointmentType, status As AppointmentStatus, activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxRecurrenceRuleIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxRecurrenceRuleIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IRecurrenceRuleIdActiveDateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxRecurrenceRuleIdAsync(int recurrenceRuleId, CancellationToken cancellationToken = null)
    parameters:
    - id: recurrenceRuleId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxRecurrenceRuleIdAsync(recurrenceRuleId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxRecurrenceRuleIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxRecurrenceRuleIdActiveDateAsync(Int32, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync(Int32, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync(System.Int32, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IRecurrenceRuleIdActiveDateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxRecurrenceRuleIdActiveDateAsync(int recurrenceRuleId, DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: recurrenceRuleId
      type: System.Int32
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxRecurrenceRuleIdActiveDateAsync(recurrenceRuleId As Integer, activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(Int32, DateTime, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IRecurrenceRuleIdActiveDateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(int recurrenceRuleId, DateTime activeDate, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: recurrenceRuleId
      type: System.Int32
    - id: activeDate
      type: System.DateTime
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync(recurrenceRuleId As Integer, activeDate As DateTime, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(Int32, DateTime, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IRecurrenceRuleIdActiveDateMother_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(int recurrenceRuleId, DateTime activeDate, int motherId, CancellationToken cancellationToken = null)
    parameters:
    - id: recurrenceRuleId
      type: System.Int32
    - id: activeDate
      type: System.DateTime
    - id: motherId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync(recurrenceRuleId As Integer, activeDate As DateTime, motherId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdActiveDateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdActiveDateAsync(Int32, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdActiveDateAsync(Int32, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync(System.Int32, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idActiveDateMother_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdActiveDateAsync(int associateId, DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdActiveDateAsync(associateId As Integer, activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdActiveDateMotherIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdActiveDateMotherIdAsync(Int32, DateTime, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync(Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync(System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idActiveDateMother_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdActiveDateMotherIdAsync(int associateId, DateTime activeDate, int motherId, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: activeDate
      type: System.DateTime
    - id: motherId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdActiveDateMotherIdAsync(associateId As Integer, activeDate As DateTime, motherId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusAsync(Int32, AppointmentStatus, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusAsync(Int32, AppointmentStatus, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusAsync(int motherId, AppointmentStatus status, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusAsync(motherId As Integer, status As AppointmentStatus, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateAsync(Int32, AppointmentStatus, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync(Int32, AppointmentStatus, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateAsync(int motherId, AppointmentStatus status, DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(Int32, AppointmentStatus, DateTime, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(Int32, AppointmentStatus, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(int motherId, AppointmentStatus status, DateTime activeDate, int registeredAssociateId, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: registeredAssociateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, registeredAssociateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Int32, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(int motherId, AppointmentStatus status, DateTime activeDate, int registeredAssociateId, DateTime registered, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: registeredAssociateId
      type: System.Int32
    - id: registered
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, registeredAssociateId As Integer, registered As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(int motherId, AppointmentStatus status, DateTime activeDate, int registeredAssociateId, DateTime registered, int assignedBy, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: registeredAssociateId
      type: System.Int32
    - id: registered
      type: System.DateTime
    - id: assignedBy
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, registeredAssociateId As Integer, registered As DateTime, assignedBy As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Int32, System.DateTime, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(int motherId, AppointmentStatus status, DateTime activeDate, int registeredAssociateId, DateTime registered, int assignedBy, int groupIdx, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: registeredAssociateId
      type: System.Int32
    - id: registered
      type: System.DateTime
    - id: assignedBy
      type: System.Int32
    - id: groupIdx
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, registeredAssociateId As Integer, registered As DateTime, assignedBy As Integer, groupIdx As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, Int32, AppointmentType, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, Int32, AppointmentType, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Int32, System.DateTime, System.Int32, System.Int32, SuperOffice.Data.AppointmentType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(int motherId, AppointmentStatus status, DateTime activeDate, int registeredAssociateId, DateTime registered, int assignedBy, int groupIdx, AppointmentType type, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: registeredAssociateId
      type: System.Int32
    - id: registered
      type: System.DateTime
    - id: assignedBy
      type: System.Int32
    - id: groupIdx
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, registeredAssociateId As Integer, registered As DateTime, assignedBy As Integer, groupIdx As Integer, type As AppointmentType, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32,SuperOffice.Data.AppointmentType,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, Int32, AppointmentType, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(Int32, AppointmentStatus, DateTime, Int32, DateTime, Int32, Int32, AppointmentType, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Int32, System.DateTime, System.Int32, System.Int32, SuperOffice.Data.AppointmentType, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IMother_idStatusActiveDateReg_idRegAssignedByGrp_idxTypeAssoc_idId&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(int motherId, AppointmentStatus status, DateTime activeDate, int registeredAssociateId, DateTime registered, int assignedBy, int groupIdx, AppointmentType type, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: motherId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: activeDate
      type: System.DateTime
    - id: registeredAssociateId
      type: System.Int32
    - id: registered
      type: System.DateTime
    - id: assignedBy
      type: System.Int32
    - id: groupIdx
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync(motherId As Integer, status As AppointmentStatus, activeDate As DateTime, registeredAssociateId As Integer, registered As DateTime, assignedBy As Integer, groupIdx As Integer, type As AppointmentType, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeActiveDateAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeActiveDateAsync(Int32, AppointmentType, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync(Int32, AppointmentType, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idTypeActiveDateDoc_idAssoc_idGrp_idxMother_idAssignedByIdRegReg_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeActiveDateAsync(int projectId, AppointmentType type, DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeActiveDateAsync(projectId As Integer, type As AppointmentType, activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(Int32, AppointmentType, DateTime, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(Int32, AppointmentType, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idTypeActiveDateDoc_idAssoc_idGrp_idxMother_idAssignedByIdRegReg_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(int projectId, AppointmentType type, DateTime activeDate, int documentId, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: documentId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeActiveDateDocumentIdAsync(projectId As Integer, type As AppointmentType, activeDate As DateTime, documentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(Int32, AppointmentType, DateTime, Int32, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(Int32, AppointmentType, DateTime, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idTypeActiveDateDoc_idAssoc_idGrp_idxMother_idAssignedByIdRegReg_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(int projectId, AppointmentType type, DateTime activeDate, int documentId, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: documentId
      type: System.Int32
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync(projectId As Integer, type As AppointmentType, activeDate As DateTime, documentId As Integer, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(Int32, AppointmentType, DateTime, Int32, Int32, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(Int32, AppointmentType, DateTime, Int32, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Int32, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idTypeActiveDateDoc_idAssoc_idGrp_idxMother_idAssignedByIdRegReg_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(int projectId, AppointmentType type, DateTime activeDate, int documentId, int associateId, int groupIdx, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: documentId
      type: System.Int32
    - id: associateId
      type: System.Int32
    - id: groupIdx
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync(projectId As Integer, type As AppointmentType, activeDate As DateTime, documentId As Integer, associateId As Integer, groupIdx As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(Int32, AppointmentType, DateTime, Int32, Int32, Int32, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(Int32, AppointmentType, DateTime, Int32, Int32, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Int32, System.Int32, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idTypeActiveDateDoc_idAssoc_idGrp_idxMother_idAssignedByIdRegReg_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(int projectId, AppointmentType type, DateTime activeDate, int documentId, int associateId, int groupIdx, int motherId, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: documentId
      type: System.Int32
    - id: associateId
      type: System.Int32
    - id: groupIdx
      type: System.Int32
    - id: motherId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync(projectId As Integer, type As AppointmentType, activeDate As DateTime, documentId As Integer, associateId As Integer, groupIdx As Integer, motherId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(System.Int32,SuperOffice.Data.AppointmentType,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(Int32, AppointmentType, DateTime, Int32, Int32, Int32, Int32, Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(Int32, AppointmentType, DateTime, Int32, Int32, Int32, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(System.Int32, SuperOffice.Data.AppointmentType, System.DateTime, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IProj_idTypeActiveDateDoc_idAssoc_idGrp_idxMother_idAssignedByIdRegReg_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(int projectId, AppointmentType type, DateTime activeDate, int documentId, int associateId, int groupIdx, int motherId, int assignedBy, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: documentId
      type: System.Int32
    - id: associateId
      type: System.Int32
    - id: groupIdx
      type: System.Int32
    - id: motherId
      type: System.Int32
    - id: assignedBy
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync(projectId As Integer, type As AppointmentType, activeDate As DateTime, documentId As Integer, associateId As Integer, groupIdx As Integer, motherId As Integer, assignedBy As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxAgendaTextIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAgendaTextIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAgendaTextIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntAgenda_text_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAgendaTextIdAsync(int agendaTextId, CancellationToken cancellationToken = null)
    parameters:
    - id: agendaTextId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAgendaTextIdAsync(agendaTextId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync(SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync(SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  id: GetFromIdxTypeAsync(SuperOffice.Data.AppointmentType,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxTypeAsync(AppointmentType, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxTypeAsync(AppointmentType, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync(SuperOffice.Data.AppointmentType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;ITypeActiveDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxTypeAsync(AppointmentType type, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxTypeAsync(type As AppointmentType, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync(SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync(SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxTypeActiveDateAsync(SuperOffice.Data.AppointmentType,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxTypeActiveDateAsync(AppointmentType, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxTypeActiveDateAsync(AppointmentType, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync(SuperOffice.Data.AppointmentType, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;ITypeActiveDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxTypeActiveDateAsync(AppointmentType type, DateTime activeDate, CancellationToken cancellationToken = null)
    parameters:
    - id: type
      type: SuperOffice.Data.AppointmentType
    - id: activeDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxTypeActiveDateAsync(type As AppointmentType, activeDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCreatedByWorkflowIdAsync(Int32, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IDXAppntCreated_by_workflow_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxCreatedByWorkflowIdAsync(int createdByWorkflowId, CancellationToken cancellationToken = null)
    parameters:
    - id: createdByWorkflowId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCreatedByWorkflowIdAsync(createdByWorkflowId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdStatusAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdStatusAsync(Int32, AppointmentStatus, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdStatusAsync(Int32, AppointmentStatus, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idStatusDo_byEndDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdStatusAsync(int associateId, AppointmentStatus status, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdStatusAsync(associateId As Integer, status As AppointmentStatus, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdStatusDoByAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdStatusDoByAsync(Int32, AppointmentStatus, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync(Int32, AppointmentStatus, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idStatusDo_byEndDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdStatusDoByAsync(int associateId, AppointmentStatus status, DateTime doBy, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: doBy
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdStatusDoByAsync(associateId As Integer, status As AppointmentStatus, doBy As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdStatusDoByEndDateAsync(System.Int32,SuperOffice.Data.AppointmentStatus,System.DateTime,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdStatusDoByEndDateAsync(Int32, AppointmentStatus, DateTime, DateTime, CancellationToken)
  nameWithType: AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync(Int32, AppointmentStatus, DateTime, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync(System.Int32, SuperOffice.Data.AppointmentStatus, System.DateTime, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRow object, by querying the database table via the index &apos;IAssoc_idStatusDo_byEndDate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Appointment table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.AppointmentRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromIdxAssociateIdStatusDoByEndDateAsync(int associateId, AppointmentStatus status, DateTime doBy, DateTime endDate, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: status
      type: SuperOffice.Data.AppointmentStatus
    - id: doBy
      type: System.DateTime
    - id: endDate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdStatusDoByEndDateAsync(associateId As Integer, status As AppointmentStatus, doBy As DateTime, endDate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.AppointmentTableInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.AppointmentTableInfo,System.Threading.CancellationToken)
  id: GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.AppointmentTableInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: GetFromReaderAsync(SoDataReader, AppointmentTableInfo, CancellationToken)
  nameWithType: AppointmentRows.GetFromReaderAsync(SoDataReader, AppointmentTableInfo, CancellationToken)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader, SuperOffice.CRM.Data.AppointmentTableInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the AppointmentRows object, and populate it with data from a reader.\nIf the search returns no results, an empty collection will be returned; if the result contains\nrows, a collection of AppointmentRow objects representing each row will be returned. \n<p></p>Note that the internal logic starts by calling reader.<xref href=\"SuperOffice.Data.SoDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref>, \nwhich is correct if you hand the method the result of an <xref href=\"SuperOffice.Data.SoCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>,\nbut if the reader has already been advanced one or more rows, the current row will be skipped and collection\npopulation will start with the next row.\n"
  syntax:
    content: public static Task<AppointmentRows> GetFromReaderAsync(SoDataReader reader, AppointmentTableInfo tableInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: <xref href="SuperOffice.Data.SoDataReader" data-throw-if-not-resolved="false"></xref> positioned to a valid database row.
    - id: tableInfo
      type: SuperOffice.CRM.Data.AppointmentTableInfo
      description: >-
        <xref href="SuperOffice.CRM.Data.AppointmentTableInfo" data-throw-if-not-resolved="false"></xref> instance used in the query that is the source of the reader.
                    The fields used from the reader will be those owned by this tableinfo object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
    content.vb: Public Shared Function GetFromReaderAsync(reader As SoDataReader, tableInfo As AppointmentTableInfo, cancellationToken As CancellationToken = Nothing) As Task(Of AppointmentRows)
  overload: SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.AppointmentRows.Add(SuperOffice.CRM.Rows.AppointmentRow)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.Add(SuperOffice.CRM.Rows.AppointmentRow)
  id: Add(SuperOffice.CRM.Rows.AppointmentRow)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: Add(AppointmentRow)
  nameWithType: AppointmentRows.Add(AppointmentRow)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Add(SuperOffice.CRM.Rows.AppointmentRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd one AppointmentRow to the collection.\n"
  syntax:
    content: public int Add(AppointmentRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.AppointmentRow
      description: An instance of AppointmentRow to be added to the collection.
    return:
      type: System.Int32
      description: The index of the added AppointmentRow.
    content.vb: Public Function Add(row As AppointmentRow) As Integer
  overload: SuperOffice.CRM.Rows.AppointmentRows.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.AppointmentRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow})
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow})
  id: AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow})
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<AppointmentRow>)
  nameWithType: AppointmentRows.AddRange(IEnumerable<AppointmentRow>)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.AddRange(System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.AppointmentRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd a range of AppointmentRow to the collection.\n"
  syntax:
    content: public AppointmentRows AddRange(IEnumerable<AppointmentRow> rows)
    parameters:
    - id: rows
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow}
    return:
      type: SuperOffice.CRM.Rows.AppointmentRows
      description: The updated AppointmentRows collection object.
    content.vb: Public Function AddRange(rows As IEnumerable(Of AppointmentRow)) As AppointmentRows
  overload: SuperOffice.CRM.Rows.AppointmentRows.AddRange*
  nameWithType.vb: AppointmentRows.AddRange(IEnumerable(Of AppointmentRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.AppointmentRows.AddRange(System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.AppointmentRow))
  name.vb: AddRange(IEnumerable(Of AppointmentRow))
- uid: SuperOffice.CRM.Rows.AppointmentRows.AddNew
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.AddNew
  id: AddNew
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: AddNew()
  nameWithType: AppointmentRows.AddNew()
  fullName: SuperOffice.CRM.Rows.AppointmentRows.AddNew()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd a new instance of AppointmentRow added to the collection.\n"
  syntax:
    content: public AppointmentRow AddNew()
    return:
      type: SuperOffice.CRM.Rows.AppointmentRow
      description: A new instance of AppointmentRow added to the collection.
    content.vb: Public Function AddNew As AppointmentRow
  overload: SuperOffice.CRM.Rows.AppointmentRows.AddNew*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.AppointmentRows.Remove(SuperOffice.CRM.Rows.AppointmentRow)
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.Remove(SuperOffice.CRM.Rows.AppointmentRow)
  id: Remove(SuperOffice.CRM.Rows.AppointmentRow)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: Remove(AppointmentRow)
  nameWithType: AppointmentRows.Remove(AppointmentRow)
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Remove(SuperOffice.CRM.Rows.AppointmentRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nRemoves the given AppointmentRow from the collection\n"
  syntax:
    content: public void Remove(AppointmentRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.AppointmentRow
      description: the AppointmentRow to be removed
    content.vb: Public Sub Remove(row As AppointmentRow)
  overload: SuperOffice.CRM.Rows.AppointmentRows.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.AppointmentRows.CreateChild
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.CreateChild
  id: CreateChild
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: CreateChild()
  nameWithType: AppointmentRows.CreateChild()
  fullName: SuperOffice.CRM.Rows.AppointmentRows.CreateChild()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of AppointmentRow\n"
  syntax:
    content: protected override TableRowBase CreateChild()
    return:
      type: SuperOffice.CRM.Rows.TableRowBase
      description: New instance of AppointmentRow
    content.vb: Protected Overrides Function CreateChild As TableRowBase
  overridden: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  overload: SuperOffice.CRM.Rows.AppointmentRows.CreateChild*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.CRM.Rows.AppointmentRows.ToArray
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.ToArray
  id: ToArray
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: AppointmentRows.ToArray()
  fullName: SuperOffice.CRM.Rows.AppointmentRows.ToArray()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  syntax:
    content: public AppointmentRow[] ToArray()
    return:
      type: SuperOffice.CRM.Rows.AppointmentRow[]
    content.vb: Public Function ToArray As AppointmentRow()
  overload: SuperOffice.CRM.Rows.AppointmentRows.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.AppointmentRows.ToString
  commentId: M:SuperOffice.CRM.Rows.AppointmentRows.ToString
  id: ToString
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AppointmentRows.ToString()
  fullName: SuperOffice.CRM.Rows.AppointmentRows.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nFor debugging: Number of members, and the first (up to) 5 items\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SuperOffice.CRM.Rows.AppointmentRows.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.CRM.Rows.AppointmentRows.Item(System.Int32)
  commentId: P:SuperOffice.CRM.Rows.AppointmentRows.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.CRM.Rows.AppointmentRows
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: AppointmentRows.Item[Int32]
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nGet a AppointmentRow given its index in the collection.\n"
  syntax:
    content: public AppointmentRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the AppointmentRow in the collection
    return:
      type: SuperOffice.CRM.Rows.AppointmentRow
    content.vb: Public ReadOnly Property Item(index As Integer) As AppointmentRow
  overload: SuperOffice.CRM.Rows.AppointmentRows.Item*
  nameWithType.vb: AppointmentRows.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Rows.AppointmentRows.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.NestedPersist
  commentId: T:SuperOffice.Data.NestedPersist
  parent: SuperOffice.Data
  isExternal: true
  name: NestedPersist
  nameWithType: NestedPersist
  fullName: SuperOffice.Data.NestedPersist
- uid: SuperOffice.Data.NestedPersistFacade
  commentId: T:SuperOffice.Data.NestedPersistFacade
  parent: SuperOffice.Data
  isExternal: true
  name: NestedPersistFacade
  nameWithType: NestedPersistFacade
  fullName: SuperOffice.Data.NestedPersistFacade
- uid: SuperOffice.Data.NestedCollectionPersist
  commentId: T:SuperOffice.Data.NestedCollectionPersist
  parent: SuperOffice.Data
  isExternal: true
  name: NestedCollectionPersist
  nameWithType: NestedCollectionPersist
  fullName: SuperOffice.Data.NestedCollectionPersist
- uid: SuperOffice.CRM.Rows.TableRowsBase
  commentId: T:SuperOffice.CRM.Rows.TableRowsBase
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TableRowsBase
  nameWithType: TableRowsBase
  fullName: SuperOffice.CRM.Rows.TableRowsBase
- uid: SuperOffice.Data.INestedPersist
  commentId: T:SuperOffice.Data.INestedPersist
  parent: SuperOffice.Data
  isExternal: true
  name: INestedPersist
  nameWithType: INestedPersist
  fullName: SuperOffice.Data.INestedPersist
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INestedPersist>
  nameWithType: IEnumerable<INestedPersist>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.INestedPersist>
  nameWithType.vb: IEnumerable(Of INestedPersist)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.INestedPersist)
  name.vb: IEnumerable(Of INestedPersist)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.IBindingList
  isExternal: true
  name: IBindingList
  nameWithType: IBindingList
  fullName: System.ComponentModel.IBindingList
- uid: SuperOffice.CRM.Rows.TableRowsBase._innerList
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._innerList
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _innerList
  nameWithType: TableRowsBase._innerList
  fullName: SuperOffice.CRM.Rows.TableRowsBase._innerList
- uid: SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _allHasBeenMarkedForDelete
  nameWithType: TableRowsBase._allHasBeenMarkedForDelete
  fullName: SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
- uid: SuperOffice.CRM.Rows.TableRowsBase._sentries
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._sentries
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _sentries
  nameWithType: TableRowsBase._sentries
  fullName: SuperOffice.CRM.Rows.TableRowsBase._sentries
- uid: SuperOffice.CRM.Rows.TableRowsBase._idx
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._idx
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _idx
  nameWithType: TableRowsBase._idx
  fullName: SuperOffice.CRM.Rows.TableRowsBase._idx
- uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: OnIndexChanged(IdxBase)
  nameWithType: TableRowsBase.OnIndexChanged(IdxBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
    name: OnIndexChanged
    nameWithType: TableRowsBase.OnIndexChanged
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
    name: OnIndexChanged
    nameWithType: TableRowsBase.OnIndexChanged
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: LoadAsync(IdxBase, CancellationToken)
  nameWithType: TableRowsBase.LoadAsync(IdxBase, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
    name: LoadAsync
    nameWithType: TableRowsBase.LoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
    name: LoadAsync
    nameWithType: TableRowsBase.LoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoadAsync(CancellationToken)
  nameWithType: TableRowsBase.RowsLoadAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoadAsync(ITableRowLoadHandlerFactory, CancellationToken)
  nameWithType: TableRowsBase.RowsLoadAsync(ITableRowLoadHandlerFactory, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: DeleteAsync()
  nameWithType: TableRowsBase.DeleteAsync()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    name: DeleteAsync
    nameWithType: TableRowsBase.DeleteAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    name: DeleteAsync
    nameWithType: TableRowsBase.DeleteAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: GetEnumerator()
  nameWithType: TableRowsBase.GetEnumerator()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    name: GetEnumerator
    nameWithType: TableRowsBase.GetEnumerator
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    name: GetEnumerator
    nameWithType: TableRowsBase.GetEnumerator
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Add(TableRowBase)
  nameWithType: TableRowsBase.Add(TableRowBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
    name: Add
    nameWithType: TableRowsBase.Add
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
    name: Add
    nameWithType: TableRowsBase.Add
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Remove(TableRowBase)
  nameWithType: TableRowsBase.Remove(TableRowBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
    name: Remove
    nameWithType: TableRowsBase.Remove
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
    name: Remove
    nameWithType: TableRowsBase.Remove
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Clear
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Clear()
  nameWithType: TableRowsBase.Clear()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
    name: Clear
    nameWithType: TableRowsBase.Clear
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
    name: Clear
    nameWithType: TableRowsBase.Clear
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Sort(IComparer)
  nameWithType: TableRowsBase.Sort(IComparer)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
    name: Sort
    nameWithType: TableRowsBase.Sort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
    name: Sort
    nameWithType: TableRowsBase.Sort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: GetPrimaryKeys()
  nameWithType: TableRowsBase.GetPrimaryKeys()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    name: GetPrimaryKeys
    nameWithType: TableRowsBase.GetPrimaryKeys
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    name: GetPrimaryKeys
    nameWithType: TableRowsBase.GetPrimaryKeys
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: OnAdded(Object, Int32)
  nameWithType: TableRowsBase.OnAdded(Object, Int32)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
    name: OnAdded
    nameWithType: TableRowsBase.OnAdded
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
    name: OnAdded
    nameWithType: TableRowsBase.OnAdded
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: TableRowsBase.CopyTo(Array, Int32)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: TableRowsBase.CopyTo
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: TableRowsBase.CopyTo
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IndexOf(Object)
  nameWithType: TableRowsBase.IndexOf(Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
    name: IndexOf
    nameWithType: TableRowsBase.IndexOf
    fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
    name: IndexOf
    nameWithType: TableRowsBase.IndexOf
    fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Contains(Object)
  nameWithType: TableRowsBase.Contains(Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
    name: Contains
    nameWithType: TableRowsBase.Contains
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
    name: Contains
    nameWithType: TableRowsBase.Contains
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AddIndex(PropertyDescriptor)
  nameWithType: TableRowsBase.AddIndex(PropertyDescriptor)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
    name: AddIndex
    nameWithType: TableRowsBase.AddIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
    name: AddIndex
    nameWithType: TableRowsBase.AddIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: ApplySort(PropertyDescriptor, ListSortDirection)
  nameWithType: TableRowsBase.ApplySort(PropertyDescriptor, ListSortDirection)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    name: ApplySort
    nameWithType: TableRowsBase.ApplySort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    name: ApplySort
    nameWithType: TableRowsBase.ApplySort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Find(PropertyDescriptor, Object)
  nameWithType: TableRowsBase.Find(PropertyDescriptor, Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor, System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    name: Find
    nameWithType: TableRowsBase.Find
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    name: Find
    nameWithType: TableRowsBase.Find
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RemoveIndex(PropertyDescriptor)
  nameWithType: TableRowsBase.RemoveIndex(PropertyDescriptor)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    name: RemoveIndex
    nameWithType: TableRowsBase.RemoveIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    name: RemoveIndex
    nameWithType: TableRowsBase.RemoveIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RemoveSort()
  nameWithType: TableRowsBase.RemoveSort()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    name: RemoveSort
    nameWithType: TableRowsBase.RemoveSort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    name: RemoveSort
    nameWithType: TableRowsBase.RemoveSort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Load(IdxBase)
  nameWithType: TableRowsBase.Load(IdxBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
    name: Load
    nameWithType: TableRowsBase.Load
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
    name: Load
    nameWithType: TableRowsBase.Load
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoad()
  nameWithType: TableRowsBase.RowsLoad()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoad(ITableRowLoadHandlerFactory)
  nameWithType: TableRowsBase.RowsLoad(ITableRowLoadHandlerFactory)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Sentries
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Sentries
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Sentries
  nameWithType: TableRowsBase.Sentries
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Sentries
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsDirty
  nameWithType: TableRowsBase.IsDirty
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsDirty
- uid: SuperOffice.CRM.Rows.TableRowsBase.Index
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Index
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Index
  nameWithType: TableRowsBase.Index
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Index
- uid: SuperOffice.CRM.Rows.TableRowsBase.Count
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Count
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Count
  nameWithType: TableRowsBase.Count
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Count
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsMarkedForDelete
  nameWithType: TableRowsBase.IsMarkedForDelete
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsFixedSize
  nameWithType: TableRowsBase.IsFixedSize
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsReadOnly
  nameWithType: TableRowsBase.IsReadOnly
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowEdit
  nameWithType: TableRowsBase.AllowEdit
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowNew
  nameWithType: TableRowsBase.AllowNew
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowNew
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowRemove
  nameWithType: TableRowsBase.AllowRemove
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsSorted
  nameWithType: TableRowsBase.IsSorted
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsSorted
- uid: SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SortDirection
  nameWithType: TableRowsBase.SortDirection
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SortDirection
- uid: SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SortProperty
  nameWithType: TableRowsBase.SortProperty
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SortProperty
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsChangeNotification
  nameWithType: TableRowsBase.SupportsChangeNotification
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsSearching
  nameWithType: TableRowsBase.SupportsSearching
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsSorting
  nameWithType: TableRowsBase.SupportsSorting
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
- uid: SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _onCollectionChanged
  nameWithType: TableRowsBase._onCollectionChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
- uid: SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CollectionChanged
  nameWithType: TableRowsBase.CollectionChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
- uid: SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: ListChanged
  nameWithType: TableRowsBase.ListChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase.ListChanged
- uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  commentId: M:SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  parent: SuperOffice.Data.NestedCollectionPersist
  isExternal: true
  name: GetFacadingItems()
  nameWithType: NestedCollectionPersist.GetFacadingItems()
  fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems()
  spec.csharp:
  - uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    name: GetFacadingItems
    nameWithType: NestedCollectionPersist.GetFacadingItems
    fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    name: GetFacadingItems
    nameWithType: NestedCollectionPersist.GetFacadingItems
    fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedCollectionPersist.IsDeleted
  commentId: P:SuperOffice.Data.NestedCollectionPersist.IsDeleted
  parent: SuperOffice.Data.NestedCollectionPersist
  isExternal: true
  name: IsDeleted
  nameWithType: NestedCollectionPersist.IsDeleted
  fullName: SuperOffice.Data.NestedCollectionPersist.IsDeleted
- uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPreIdUpdateAsync()
  nameWithType: NestedPersistFacade.OnPreIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    name: OnPreIdUpdateAsync
    nameWithType: NestedPersistFacade.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    name: OnPreIdUpdateAsync
    nameWithType: NestedPersistFacade.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPrimaryKeyRequestAsync(PKContainer)
  nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyRequestAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyRequestAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPrimaryKeyUpdateAsync(PKContainer)
  nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnIdUpdateAsync()
  nameWithType: NestedPersistFacade.OnIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    name: OnIdUpdateAsync
    nameWithType: NestedPersistFacade.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    name: OnIdUpdateAsync
    nameWithType: NestedPersistFacade.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnSaveAsync(BatchSave)
  nameWithType: NestedPersistFacade.OnSaveAsync(BatchSave)
  fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: OnSaveAsync
    nameWithType: NestedPersistFacade.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: OnSaveAsync
    nameWithType: NestedPersistFacade.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnSavedAsync(Boolean)
  nameWithType: NestedPersistFacade.OnSavedAsync(Boolean)
  fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
    name: OnSavedAsync
    nameWithType: NestedPersistFacade.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
    name: OnSavedAsync
    nameWithType: NestedPersistFacade.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist._saveOwner
  commentId: F:SuperOffice.Data.NestedPersist._saveOwner
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: _saveOwner
  nameWithType: NestedPersist._saveOwner
  fullName: SuperOffice.Data.NestedPersist._saveOwner
- uid: SuperOffice.Data.NestedPersist._isSaving
  commentId: F:SuperOffice.Data.NestedPersist._isSaving
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: _isSaving
  nameWithType: NestedPersist._isSaving
  fullName: SuperOffice.Data.NestedPersist._isSaving
- uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  commentId: M:SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: SetSaveOwner(INestedPersist)
  nameWithType: NestedPersist.SetSaveOwner(INestedPersist)
  fullName: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
    name: SetSaveOwner
    nameWithType: NestedPersist.SetSaveOwner
    fullName: SuperOffice.Data.NestedPersist.SetSaveOwner
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
    name: SetSaveOwner
    nameWithType: NestedPersist.SetSaveOwner
    fullName: SuperOffice.Data.NestedPersist.SetSaveOwner
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SaveAsync
  commentId: M:SuperOffice.Data.NestedPersist.SaveAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: SaveAsync()
  nameWithType: NestedPersist.SaveAsync()
  fullName: SuperOffice.Data.NestedPersist.SaveAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SaveAsync
    name: SaveAsync
    nameWithType: NestedPersist.SaveAsync
    fullName: SuperOffice.Data.NestedPersist.SaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SaveAsync
    name: SaveAsync
    nameWithType: NestedPersist.SaveAsync
    fullName: SuperOffice.Data.NestedPersist.SaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPreIdUpdateAsync()
  nameWithType: NestedPersist.INestedPersist.OnPreIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  name.vb: SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
    name: INestedPersist.OnPreIdUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
    name: SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  name.vb: SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: INestedPersist.OnPrimaryKeyRequestAsync
    nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  name.vb: SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: INestedPersist.OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnIdUpdateAsync()
  nameWithType: NestedPersist.INestedPersist.OnIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  name.vb: SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
    name: INestedPersist.OnIdUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
    name: SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnSaveAsync(BatchSave)
  nameWithType: NestedPersist.INestedPersist.OnSaveAsync(BatchSave)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync(BatchSave)
  name.vb: SuperOffice.Data.INestedPersist.OnSaveAsync(BatchSave)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: INestedPersist.OnSaveAsync
    nameWithType: NestedPersist.INestedPersist.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: SuperOffice.Data.INestedPersist.OnSaveAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnSavedAsync(Boolean)
  nameWithType: NestedPersist.INestedPersist.OnSavedAsync(Boolean)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync(System.Boolean)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync(Boolean)
  name.vb: SuperOffice.Data.INestedPersist.OnSavedAsync(Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
    name: INestedPersist.OnSavedAsync
    nameWithType: NestedPersist.INestedPersist.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
    name: SuperOffice.Data.INestedPersist.OnSavedAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  commentId: M:SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: add_OnElementSaved(OnSaved)
  nameWithType: NestedPersist.add_OnElementSaved(OnSaved)
  fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
    name: add_OnElementSaved
    nameWithType: NestedPersist.add_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
    name: add_OnElementSaved
    nameWithType: NestedPersist.add_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  commentId: M:SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: remove_OnElementSaved(OnSaved)
  nameWithType: NestedPersist.remove_OnElementSaved(OnSaved)
  fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
    name: remove_OnElementSaved
    nameWithType: NestedPersist.remove_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
    name: remove_OnElementSaved
    nameWithType: NestedPersist.remove_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  commentId: M:SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: add_OnElementIdUpdate(OnIdUpdate)
  nameWithType: NestedPersist.add_OnElementIdUpdate(OnIdUpdate)
  fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: add_OnElementIdUpdate
    nameWithType: NestedPersist.add_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: add_OnElementIdUpdate
    nameWithType: NestedPersist.add_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  commentId: M:SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: remove_OnElementIdUpdate(OnIdUpdate)
  nameWithType: NestedPersist.remove_OnElementIdUpdate(OnIdUpdate)
  fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: remove_OnElementIdUpdate
    nameWithType: NestedPersist.remove_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: remove_OnElementIdUpdate
    nameWithType: NestedPersist.remove_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.IsSaving
  commentId: P:SuperOffice.Data.NestedPersist.IsSaving
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: IsSaving
  nameWithType: NestedPersist.IsSaving
  fullName: SuperOffice.Data.NestedPersist.IsSaving
- uid: SuperOffice.Data.NestedPersist.OnElementSaved
  commentId: E:SuperOffice.Data.NestedPersist.OnElementSaved
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: OnElementSaved
  nameWithType: NestedPersist.OnElementSaved
  fullName: SuperOffice.Data.NestedPersist.OnElementSaved
- uid: SuperOffice.Data.NestedPersist.OnElementIdUpdate
  commentId: E:SuperOffice.Data.NestedPersist.OnElementIdUpdate
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: OnElementIdUpdate
  nameWithType: NestedPersist.OnElementIdUpdate
  fullName: SuperOffice.Data.NestedPersist.OnElementIdUpdate
- uid: SuperOffice.CRM.Rows.AppointmentRows.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<AppointmentRows, To>()
  nameWithType: EnumUtil.MapEnums<AppointmentRows, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Rows.AppointmentRows, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of AppointmentRows, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Rows.AppointmentRows, To)()
  name.vb: MapEnums(Of AppointmentRows, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<AppointmentRows, To>
    nameWithType: EnumUtil.MapEnums<AppointmentRows, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Rows.AppointmentRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of AppointmentRows, To)
    nameWithType: EnumUtil.MapEnums(Of AppointmentRows, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Rows.AppointmentRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<AppointmentRows, To>()
  nameWithType: Converters.MapEnums<AppointmentRows, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Rows.AppointmentRows, To>()
  nameWithType.vb: Converters.MapEnums(Of AppointmentRows, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Rows.AppointmentRows, To)()
  name.vb: MapEnums(Of AppointmentRows, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<AppointmentRows, To>
    nameWithType: Converters.MapEnums<AppointmentRows, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Rows.AppointmentRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of AppointmentRows, To)
    nameWithType: Converters.MapEnums(Of AppointmentRows, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Rows.AppointmentRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Rows.AppointmentRows.ForEach*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.ForEach
  isExternal: true
  name: ForEach
  nameWithType: AppointmentRows.ForEach
  fullName: SuperOffice.CRM.Rows.AppointmentRows.ForEach
- uid: System.Action{SuperOffice.CRM.Rows.AppointmentRow}
  commentId: '!:System.Action{SuperOffice.CRM.Rows.AppointmentRow}'
  definition: System.Action`1
  name: Action<AppointmentRow>
  nameWithType: Action<AppointmentRow>
  fullName: System.Action<SuperOffice.CRM.Rows.AppointmentRow>
  nameWithType.vb: Action(Of AppointmentRow)
  fullName.vb: System.Action(Of SuperOffice.CRM.Rows.AppointmentRow)
  name.vb: Action(Of AppointmentRow)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRows.Find*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.Find
  isExternal: true
  name: Find
  nameWithType: AppointmentRows.Find
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Find
- uid: System.Predicate{SuperOffice.CRM.Rows.AppointmentRow}
  commentId: '!:System.Predicate{SuperOffice.CRM.Rows.AppointmentRow}'
  definition: System.Predicate`1
  name: Predicate<AppointmentRow>
  nameWithType: Predicate<AppointmentRow>
  fullName: System.Predicate<SuperOffice.CRM.Rows.AppointmentRow>
  nameWithType.vb: Predicate(Of AppointmentRow)
  fullName.vb: System.Predicate(Of SuperOffice.CRM.Rows.AppointmentRow)
  name.vb: Predicate(Of AppointmentRow)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRow
  commentId: T:SuperOffice.CRM.Rows.AppointmentRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: AppointmentRow
  nameWithType: AppointmentRow
  fullName: SuperOffice.CRM.Rows.AppointmentRow
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRows.FindAll*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.FindAll
  isExternal: true
  name: FindAll
  nameWithType: AppointmentRows.FindAll
  fullName: SuperOffice.CRM.Rows.AppointmentRows.FindAll
- uid: SuperOffice.CRM.Rows.AppointmentRows
  commentId: T:SuperOffice.CRM.Rows.AppointmentRows
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: AppointmentRows
  nameWithType: AppointmentRows
  fullName: SuperOffice.CRM.Rows.AppointmentRows
- uid: SuperOffice.CRM.Rows.AppointmentRows.CreateNew*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.CreateNew
  isExternal: true
  name: CreateNew
  nameWithType: AppointmentRows.CreateNew
  fullName: SuperOffice.CRM.Rows.AppointmentRows.CreateNew
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync
  isExternal: true
  name: GetFromCustomSearchAsync
  nameWithType: AppointmentRows.GetFromCustomSearchAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromCustomSearchAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.CustomSearch
  commentId: T:SuperOffice.CRM.Rows.AppointmentRows.CustomSearch
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: AppointmentRows.CustomSearch
  nameWithType: AppointmentRows.CustomSearch
  fullName: SuperOffice.CRM.Rows.AppointmentRows.CustomSearch
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.AppointmentRows}'
  definition: System.Threading.Tasks.Task`1
  name: Task<AppointmentRows>
  nameWithType: Task<AppointmentRows>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.AppointmentRows>
  nameWithType.vb: Task(Of AppointmentRows)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.AppointmentRows)
  name.vb: Task(Of AppointmentRows)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.AppointmentRows
    name: AppointmentRows
    nameWithType: AppointmentRows
    fullName: SuperOffice.CRM.Rows.AppointmentRows
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.AppointmentRows
    name: AppointmentRows
    nameWithType: AppointmentRows
    fullName: SuperOffice.CRM.Rows.AppointmentRows
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync
  isExternal: true
  name: GetFromIdxContactIdAsync
  nameWithType: AppointmentRows.GetFromIdxContactIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync
  isExternal: true
  name: GetFromIdxPersonIdAsync
  nameWithType: AppointmentRows.GetFromIdxPersonIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxPersonIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync
  isExternal: true
  name: GetFromIdxGroupIdxAsync
  nameWithType: AppointmentRows.GetFromIdxGroupIdxAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxGroupIdxAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync
  isExternal: true
  name: GetFromIdxDoneAsync
  nameWithType: AppointmentRows.GetFromIdxDoneAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoneAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync
  isExternal: true
  name: GetFromIdxDoByAsync
  nameWithType: AppointmentRows.GetFromIdxDoByAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDoByAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync
  isExternal: true
  name: GetFromIdxTextIdAsync
  nameWithType: AppointmentRows.GetFromIdxTextIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTextIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync
  isExternal: true
  name: GetFromIdxProjectIdAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync
  isExternal: true
  name: GetFromIdxMotherIdAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync
  isExternal: true
  name: GetFromIdxDocumentIdAsync
  nameWithType: AppointmentRows.GetFromIdxDocumentIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxDocumentIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync
  isExternal: true
  name: GetFromIdxActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync
  isExternal: true
  name: GetFromIdxSourceAsync
  nameWithType: AppointmentRows.GetFromIdxSourceAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSourceAsync
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync
  isExternal: true
  name: GetFromIdxUserdefIdAsync
  nameWithType: AppointmentRows.GetFromIdxUserdefIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdefIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync
  isExternal: true
  name: GetFromIdxUserdef2IdAsync
  nameWithType: AppointmentRows.GetFromIdxUserdef2IdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxUserdef2IdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync
  isExternal: true
  name: GetFromIdxSaleIdAsync
  nameWithType: AppointmentRows.GetFromIdxSaleIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSaleIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync
  isExternal: true
  name: GetFromIdxSuggestedAppointmentIdAsync
  nameWithType: AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedAppointmentIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync
  isExternal: true
  name: GetFromIdxSuggestedDocumentIdAsync
  nameWithType: AppointmentRows.GetFromIdxSuggestedDocumentIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxSuggestedDocumentIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeAsync
- uid: SuperOffice.Data.AppointmentType
  commentId: T:SuperOffice.Data.AppointmentType
  parent: SuperOffice.Data
  isExternal: true
  name: AppointmentType
  nameWithType: AppointmentType
  fullName: SuperOffice.Data.AppointmentType
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync
  isExternal: true
  name: GetFromIdxContactIdTypeAsync
  nameWithType: AppointmentRows.GetFromIdxContactIdTypeAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxContactIdTypeAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync
  isExternal: true
  name: GetFromIdxAssociateIdAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeStatusAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusAsync
- uid: SuperOffice.Data.AppointmentStatus
  commentId: T:SuperOffice.Data.AppointmentStatus
  parent: SuperOffice.Data
  isExternal: true
  name: AppointmentStatus
  nameWithType: AppointmentStatus
  fullName: SuperOffice.Data.AppointmentStatus
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeStatusDoneAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoneAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeStatusDoByAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusDoByAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeEndDateAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeEndDateDoByAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeEndDateDoByAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync
  isExternal: true
  name: GetFromIdxAssociateIdTypeStatusActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdTypeStatusActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync
  isExternal: true
  name: GetFromIdxRecurrenceRuleIdAsync
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync
  isExternal: true
  name: GetFromIdxRecurrenceRuleIdActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync
  isExternal: true
  name: GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateAssociateIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync
  isExternal: true
  name: GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync
  nameWithType: AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxRecurrenceRuleIdActiveDateMotherIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync
  isExternal: true
  name: GetFromIdxAssociateIdActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync
  isExternal: true
  name: GetFromIdxAssociateIdActiveDateMotherIdAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdActiveDateMotherIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync
  isExternal: true
  name: GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync
  nameWithType: AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxMotherIdStatusActiveDateRegisteredAssociateIdRegisteredAssignedByGroupIdxTypeAssociateIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync
  isExternal: true
  name: GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync
  nameWithType: AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxProjectIdTypeActiveDateDocumentIdAssociateIdGroupIdxMotherIdAssignedByAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync
  isExternal: true
  name: GetFromIdxAgendaTextIdAsync
  nameWithType: AppointmentRows.GetFromIdxAgendaTextIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAgendaTextIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync
  isExternal: true
  name: GetFromIdxTypeAsync
  nameWithType: AppointmentRows.GetFromIdxTypeAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync
  isExternal: true
  name: GetFromIdxTypeActiveDateAsync
  nameWithType: AppointmentRows.GetFromIdxTypeActiveDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxTypeActiveDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync
  isExternal: true
  name: GetFromIdxCreatedByWorkflowIdAsync
  nameWithType: AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxCreatedByWorkflowIdAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync
  isExternal: true
  name: GetFromIdxAssociateIdStatusAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdStatusAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync
  isExternal: true
  name: GetFromIdxAssociateIdStatusDoByAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync
  isExternal: true
  name: GetFromIdxAssociateIdStatusDoByEndDateAsync
  nameWithType: AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromIdxAssociateIdStatusDoByEndDateAsync
- uid: SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync
  isExternal: true
  name: GetFromReaderAsync
  nameWithType: AppointmentRows.GetFromReaderAsync
  fullName: SuperOffice.CRM.Rows.AppointmentRows.GetFromReaderAsync
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: SuperOffice.CRM.Data.AppointmentTableInfo
  commentId: T:SuperOffice.CRM.Data.AppointmentTableInfo
  parent: SuperOffice.CRM.Data
  isExternal: true
  name: AppointmentTableInfo
  nameWithType: AppointmentTableInfo
  fullName: SuperOffice.CRM.Data.AppointmentTableInfo
- uid: SuperOffice.CRM.Data
  commentId: N:SuperOffice.CRM.Data
  isExternal: true
  name: SuperOffice.CRM.Data
  nameWithType: SuperOffice.CRM.Data
  fullName: SuperOffice.CRM.Data
- uid: SuperOffice.CRM.Rows.AppointmentRows.Add*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.Add
  isExternal: true
  name: Add
  nameWithType: AppointmentRows.Add
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Add
- uid: SuperOffice.CRM.Rows.AppointmentRows.AddRange*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.AddRange
  isExternal: true
  name: AddRange
  nameWithType: AppointmentRows.AddRange
  fullName: SuperOffice.CRM.Rows.AppointmentRows.AddRange
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.AppointmentRow}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<AppointmentRow>
  nameWithType: IEnumerable<AppointmentRow>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.AppointmentRow>
  nameWithType.vb: IEnumerable(Of AppointmentRow)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.AppointmentRow)
  name.vb: IEnumerable(Of AppointmentRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRows.AddNew*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.AddNew
  isExternal: true
  name: AddNew
  nameWithType: AppointmentRows.AddNew
  fullName: SuperOffice.CRM.Rows.AppointmentRows.AddNew
- uid: SuperOffice.CRM.Rows.AppointmentRows.Remove*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.Remove
  isExternal: true
  name: Remove
  nameWithType: AppointmentRows.Remove
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Remove
- uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CreateChild()
  nameWithType: TableRowsBase.CreateChild()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    name: CreateChild
    nameWithType: TableRowsBase.CreateChild
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    name: CreateChild
    nameWithType: TableRowsBase.CreateChild
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.AppointmentRows.CreateChild*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.CreateChild
  isExternal: true
  name: CreateChild
  nameWithType: AppointmentRows.CreateChild
  fullName: SuperOffice.CRM.Rows.AppointmentRows.CreateChild
- uid: SuperOffice.CRM.Rows.TableRowBase
  commentId: T:SuperOffice.CRM.Rows.TableRowBase
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TableRowBase
  nameWithType: TableRowBase
  fullName: SuperOffice.CRM.Rows.TableRowBase
- uid: SuperOffice.CRM.Rows.AppointmentRows.ToArray*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.ToArray
  isExternal: true
  name: ToArray
  nameWithType: AppointmentRows.ToArray
  fullName: SuperOffice.CRM.Rows.AppointmentRows.ToArray
- uid: SuperOffice.CRM.Rows.AppointmentRow[]
  isExternal: true
  name: AppointmentRow[]
  nameWithType: AppointmentRow[]
  fullName: SuperOffice.CRM.Rows.AppointmentRow[]
  nameWithType.vb: AppointmentRow()
  fullName.vb: SuperOffice.CRM.Rows.AppointmentRow()
  name.vb: AppointmentRow()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Rows.AppointmentRow
    name: AppointmentRow
    nameWithType: AppointmentRow
    fullName: SuperOffice.CRM.Rows.AppointmentRow
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Rows.AppointmentRows.ToString*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.ToString
  isExternal: true
  name: ToString
  nameWithType: AppointmentRows.ToString
  fullName: SuperOffice.CRM.Rows.AppointmentRows.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Rows.AppointmentRows.Item*
  commentId: Overload:SuperOffice.CRM.Rows.AppointmentRows.Item
  isExternal: true
  name: Item
  nameWithType: AppointmentRows.Item
  fullName: SuperOffice.CRM.Rows.AppointmentRows.Item
