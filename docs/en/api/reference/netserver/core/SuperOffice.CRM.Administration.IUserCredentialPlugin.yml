### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  id: IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  children:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nInterface implemented by UserCredential Plug-ins, responsible for adding credentials \nto a user.  Adding a new user from a plugin will use the <xref href=\"SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32%2cSystem.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> \nmethod to create a new person and consequent default values will be used to create \nthe user.  The credentials will finally be mapped to the user \n"
  syntax:
    content: 'public interface IUserCredentialPlugin : IPlugin'
    content.vb: >-
      Public Interface IUserCredentialPlugin
          Inherits IPlugin
  extensionMethods:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  id: FindGroups(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindGroups(String)
  nameWithType: IUserCredentialPlugin.FindGroups(String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet user groups holding users.  This method is only relevant if the CredentialType \ncontrol is of type link.  There will allways be at least one groups even if the \nunderlying provider does not support groups.\n"
  syntax:
    content: UserCredentialGroup[] FindGroups(string searchString)
    parameters:
    - id: searchString
      type: System.String
      description: Partly name of domain group.
    return:
      type: SuperOffice.CRM.Administration.UserCredentialGroup[]
    content.vb: Function FindGroups(searchString As String) As UserCredentialGroup()
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  id: GetCredentialUsersInGroup(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetCredentialUsersInGroup(String)
  nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup(String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet credential users within a user group\n"
  syntax:
    content: UserCredentialList GetCredentialUsersInGroup(string groupName)
    parameters:
    - id: groupName
      type: System.String
      description: Name of user group needed to discover the users.
    return:
      type: SuperOffice.CRM.Administration.UserCredentialList
    content.vb: Function GetCredentialUsersInGroup(groupName As String) As UserCredentialList
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  id: FindCredentialUsers(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindCredentialUsers(String)
  nameWithType: IUserCredentialPlugin.FindCredentialUsers(String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nFind users mathcing the partial name.\n"
  syntax:
    content: UserCredentialList FindCredentialUsers(string searchString)
    parameters:
    - id: searchString
      type: System.String
      description: Partly name of the user group
    return:
      type: SuperOffice.CRM.Administration.UserCredentialList
    content.vb: Function FindCredentialUsers(searchString As String) As UserCredentialList
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  id: CreatePerson(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CreatePerson(Int32, String, String)
  nameWithType: IUserCredentialPlugin.CreatePerson(Int32, String, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nCreate Person and return person id of the person created\n"
  syntax:
    content: Person CreatePerson(int contactId, string value, string displayValue)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact id for the person to create.
    - id: value
      type: System.String
      description: "\nThis is the actuall value of the credentials.  This will typically be the \npassword or teh users SID in active directory.\n"
    - id: displayValue
      type: System.String
      description: "\nThe value displayed to the user. this will typically be the users \nlogin name in active directory.\n"
    return:
      type: SuperOffice.CRM.Entities.Person
      description: Primary key of the person created
    content.vb: Function CreatePerson(contactId As Integer, value As String, displayValue As String) As Person
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanChangePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanChangePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nIs this plugin able to change password for the current\n"
  remarks: True if the plugin is able to change password.
  syntax:
    content: bool CanChangePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    return:
      type: System.Boolean
    content.vb: Function CanChangePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  id: ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: ChangePassword(CredentialsRow, String, String)
  nameWithType: IUserCredentialPlugin.ChangePassword(CredentialsRow, String, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nChanges the account password from the old password to the new password.\n"
  syntax:
    content: void ChangePassword(CredentialsRow row, string oldPassword, string newPassword)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: oldPassword
      type: System.String
      description: The old password to change from.  This must be the current calid password.
    - id: newPassword
      type: System.String
      description: The new password to change to.
    content.vb: Sub ChangePassword(row As CredentialsRow, oldPassword As String, newPassword As String)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanValidatePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanValidatePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nIs the plugin able to validfate the password.\n"
  syntax:
    content: bool CanValidatePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    return:
      type: System.Boolean
      description: True if it is possible to validate the password.
    content.vb: Function CanValidatePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  id: IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsPasswordValid(CredentialsRow, String)
  nameWithType: IUserCredentialPlugin.IsPasswordValid(CredentialsRow, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nCheck if password is valid.\n"
  syntax:
    content: bool IsPasswordValid(CredentialsRow row, string password)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: password
      type: System.String
      description: The password to check if if it is valid (e.g. that means that this is the current password.)
    return:
      type: System.Boolean
      description: True if the right password is passed in.
    content.vb: Function IsPasswordValid(row As CredentialsRow, password As String) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  id: UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: UpdateCredentialsRow(CredentialsRow, String, String, String)
  nameWithType: IUserCredentialPlugin.UpdateCredentialsRow(CredentialsRow, String, String, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, System.String, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nUpdate credential row.\n"
  syntax:
    content: void UpdateCredentialsRow(CredentialsRow row, string associateName, string value, string displayValue)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credentials row to apply the values on.
    - id: associateName
      type: System.String
      description: SuperOffice user-name of the user.
    - id: value
      type: System.String
      description: "\nThis is the actuall value of the credentials.  This will typically be the \npassword or teh users SID in active directory.\n"
    - id: displayValue
      type: System.String
      description: "\nThe value displayed to the user. this will typically be the users \nlogin name in active directory.\n"
    content.vb: Sub UpdateCredentialsRow(row As CredentialsRow, associateName As String, value As String, displayValue As String)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet value (key) to the user in the foreign system.  This can also be the password.\n"
  syntax:
    content: string GetValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credential row to get the value from.
    return:
      type: System.String
      description: "\nThis is the actuall value of the credentials.  This will typically be \nthe password or teh users SID in active directory.\n"
    content.vb: Function GetValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDisplayValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetDisplayValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet the display value of the user.\n"
  syntax:
    content: string GetDisplayValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credential row to get the value from.
    return:
      type: System.String
      description: "\nThe value displayed to the user. this will typically be the users \nlogin name in active directory.\n"
    content.vb: Function GetDisplayValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultPriority(UserType, Int32)
  nameWithType: IUserCredentialPlugin.GetDefaultPriority(UserType, Int32)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default priority for plugin.  Highest number will be the default plugin.  Password will by default be 0 as a base-line\n"
  syntax:
    content: int GetDefaultPriority(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of user
    - id: personId
      type: System.Int32
      description: PersonId if the user type is a person
    return:
      type: System.Int32
    content.vb: Function GetDefaultPriority(userType As UserType, personId As Integer) As Integer
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  id: AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: AddDefaultCredentialsToUser(SoUser)
  nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser(SoUser)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: void AddDefaultCredentialsToUser(SoUser user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Administration.SoUser
    content.vb: Sub AddDefaultCredentialsToUser(user As SoUser)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  id: CanHandle(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanHandle(UserType)
  nameWithType: IUserCredentialPlugin.CanHandle(UserType)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nCheck if the plugin can handle credentials for <xref href=\"SuperOffice.License.UserType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: bool CanHandle(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
    return:
      type: System.Boolean
      description: True if the plugin can handle the <code data-dev-comment-type="paramref" class="paramref">userType</code>
    content.vb: Function CanHandle(userType As UserType) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  id: Description
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: IUserCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nDescription of the authentication type.  This value is used in a list of \nauthentication providers that can be choosen by an end user and should be \na fairly describtive text.  This will typically be SuperOffice is responsible \nfor username and password for a password scenario.\n"
  syntax:
    content: string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Description As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  id: DisplayType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: DisplayType
  nameWithType: IUserCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nThe name of the credentials to be displayed in the user interface.  \nThis will typically be Password for user-name/password scenarios and \nActive Directoru User for AD integration.\n"
  syntax:
    content: string DisplayType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property DisplayType As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  id: ControlType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: ControlType
  nameWithType: IUserCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nType of control used to display the value.\n"
  syntax:
    content: CredentialControlType ControlType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.CredentialControlType
    content.vb: ReadOnly Property ControlType As CredentialControlType
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  id: IsUserNameSupported
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsUserNameSupported
  nameWithType: IUserCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nDoes this plugin support the associate user name field?\n"
  syntax:
    content: bool IsUserNameSupported { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsUserNameSupported As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  id: CanCreatePerson
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanCreatePerson
  nameWithType: IUserCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nCan the plugin create a person (that can be the bases for a user)\n"
  syntax:
    content: bool CanCreatePerson { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanCreatePerson As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IUserCredentialPlugin, To>()
  nameWithType: EnumUtil.MapEnums<IUserCredentialPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.IUserCredentialPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IUserCredentialPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.IUserCredentialPlugin, To)()
  name.vb: MapEnums(Of IUserCredentialPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IUserCredentialPlugin, To>
    nameWithType: EnumUtil.MapEnums<IUserCredentialPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.IUserCredentialPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IUserCredentialPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of IUserCredentialPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.IUserCredentialPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IUserCredentialPlugin, To>()
  nameWithType: Converters.MapEnums<IUserCredentialPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.IUserCredentialPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of IUserCredentialPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.IUserCredentialPlugin, To)()
  name.vb: MapEnums(Of IUserCredentialPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IUserCredentialPlugin, To>
    nameWithType: Converters.MapEnums<IUserCredentialPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.IUserCredentialPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IUserCredentialPlugin, To)
    nameWithType: Converters.MapEnums(Of IUserCredentialPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.IUserCredentialPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups
  isExternal: true
  name: FindGroups
  nameWithType: IUserCredentialPlugin.FindGroups
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Administration.UserCredentialGroup[]
  isExternal: true
  name: UserCredentialGroup[]
  nameWithType: UserCredentialGroup[]
  fullName: SuperOffice.CRM.Administration.UserCredentialGroup[]
  nameWithType.vb: UserCredentialGroup()
  fullName.vb: SuperOffice.CRM.Administration.UserCredentialGroup()
  name.vb: UserCredentialGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    nameWithType: UserCredentialGroup
    fullName: SuperOffice.CRM.Administration.UserCredentialGroup
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    nameWithType: UserCredentialGroup
    fullName: SuperOffice.CRM.Administration.UserCredentialGroup
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup
  isExternal: true
  name: GetCredentialUsersInGroup
  nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup
- uid: SuperOffice.CRM.Administration.UserCredentialList
  commentId: T:SuperOffice.CRM.Administration.UserCredentialList
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: UserCredentialList
  nameWithType: UserCredentialList
  fullName: SuperOffice.CRM.Administration.UserCredentialList
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers
  isExternal: true
  name: FindCredentialUsers
  nameWithType: IUserCredentialPlugin.FindCredentialUsers
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson
  isExternal: true
  name: CreatePerson
  nameWithType: IUserCredentialPlugin.CreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Entities.Person
  commentId: T:SuperOffice.CRM.Entities.Person
  parent: SuperOffice.CRM.Entities
  isExternal: true
  name: Person
  nameWithType: Person
  fullName: SuperOffice.CRM.Entities.Person
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword
  isExternal: true
  name: CanChangePassword
  nameWithType: IUserCredentialPlugin.CanChangePassword
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword
- uid: SuperOffice.CRM.Rows.CredentialsRow
  commentId: T:SuperOffice.CRM.Rows.CredentialsRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: CredentialsRow
  nameWithType: CredentialsRow
  fullName: SuperOffice.CRM.Rows.CredentialsRow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword
  isExternal: true
  name: ChangePassword
  nameWithType: IUserCredentialPlugin.ChangePassword
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword
  isExternal: true
  name: CanValidatePassword
  nameWithType: IUserCredentialPlugin.CanValidatePassword
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid
  isExternal: true
  name: IsPasswordValid
  nameWithType: IUserCredentialPlugin.IsPasswordValid
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow
  isExternal: true
  name: UpdateCredentialsRow
  nameWithType: IUserCredentialPlugin.UpdateCredentialsRow
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue
  isExternal: true
  name: GetValue
  nameWithType: IUserCredentialPlugin.GetValue
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue
  isExternal: true
  name: GetDisplayValue
  nameWithType: IUserCredentialPlugin.GetDisplayValue
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority
  isExternal: true
  name: GetDefaultPriority
  nameWithType: IUserCredentialPlugin.GetDefaultPriority
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser
  isExternal: true
  name: AddDefaultCredentialsToUser
  nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser
- uid: SuperOffice.CRM.Administration.SoUser
  commentId: T:SuperOffice.CRM.Administration.SoUser
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: SoUser
  nameWithType: SoUser
  fullName: SuperOffice.CRM.Administration.SoUser
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle
  isExternal: true
  name: CanHandle
  nameWithType: IUserCredentialPlugin.CanHandle
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  isExternal: true
  name: Description
  nameWithType: IUserCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  isExternal: true
  name: DisplayType
  nameWithType: IUserCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  isExternal: true
  name: ControlType
  nameWithType: IUserCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
- uid: SuperOffice.Data.CredentialControlType
  commentId: T:SuperOffice.Data.CredentialControlType
  parent: SuperOffice.Data
  isExternal: true
  name: CredentialControlType
  nameWithType: CredentialControlType
  fullName: SuperOffice.Data.CredentialControlType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  isExternal: true
  name: IsUserNameSupported
  nameWithType: IUserCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  isExternal: true
  name: CanCreatePerson
  nameWithType: IUserCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
