### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.Claims.ClaimsExtensions
  commentId: T:SuperOffice.Security.Claims.ClaimsExtensions
  id: ClaimsExtensions
  parent: SuperOffice.Security.Claims
  children:
  - SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)
  - SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.DateTime@)
  - SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  - SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  langs:
  - csharp
  - vb
  name: ClaimsExtensions
  nameWithType: ClaimsExtensions
  fullName: SuperOffice.Security.Claims.ClaimsExtensions
  type: Class
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.Security.Claims
  syntax:
    content: 'public static class ClaimsExtensions : Object'
    content.vb: >-
      Public Module ClaimsExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Claims.ClaimsExtensions
  langs:
  - csharp
  - vb
  name: GetClaimValues(IEnumerable<Claim>, String)
  nameWithType: ClaimsExtensions.GetClaimValues(IEnumerable<Claim>, String)
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Method
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.Security.Claims
  syntax:
    content: public static IEnumerable<string> GetClaimValues(this IEnumerable<Claim> claims, string claimType)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetClaimValues(claims As IEnumerable(Of Claim), claimType As String) As IEnumerable(Of String)
  overload: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues*
  nameWithType.vb: ClaimsExtensions.GetClaimValues(IEnumerable(Of Claim), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: GetClaimValues(IEnumerable(Of Claim), String)
- uid: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)
  commentId: M:SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)
  id: GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Claims.ClaimsExtensions
  langs:
  - csharp
  - vb
  name: GetClaimValue(IEnumerable<Claim>, String, String)
  nameWithType: ClaimsExtensions.GetClaimValue(IEnumerable<Claim>, String, String)
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String)
  type: Method
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.Security.Claims
  summary: "\nGet first matching claim value with provided type that has a value.\n"
  syntax:
    content: public static string GetClaimValue(this IEnumerable<Claim> claims, string claimType, string defaultValue = null)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: defaultValue
      type: System.String
      description: Default value to return if no values are found
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetClaimValue(claims As IEnumerable(Of Claim), claimType As String, defaultValue As String = Nothing) As String
  overload: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue*
  nameWithType.vb: ClaimsExtensions.GetClaimValue(IEnumerable(Of Claim), String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String)
  name.vb: GetClaimValue(IEnumerable(Of Claim), String, String)
- uid: SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  commentId: M:SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  id: TryGetValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  isExtensionMethod: true
  parent: SuperOffice.Security.Claims.ClaimsExtensions
  langs:
  - csharp
  - vb
  name: TryGetValue(IEnumerable<Claim>, String, out String)
  nameWithType: ClaimsExtensions.TryGetValue(IEnumerable<Claim>, String, out String)
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, out System.String)
  type: Method
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.Security.Claims
  summary: "\nTry get a claim value.  Resolves first if there are several.\n"
  syntax:
    content: public static bool TryGetValue(this IEnumerable<Claim> claims, string claimType, out string claimValue)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: claimValue
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetValue(claims As IEnumerable(Of Claim), claimType As String, ByRef claimValue As String) As Boolean
  overload: SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue*
  nameWithType.vb: ClaimsExtensions.TryGetValue(IEnumerable(Of Claim), String, ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, ByRef System.String)
  name.vb: TryGetValue(IEnumerable(Of Claim), String, ByRef String)
- uid: SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  commentId: M:SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  id: TryGetInt32Value(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  isExtensionMethod: true
  parent: SuperOffice.Security.Claims.ClaimsExtensions
  langs:
  - csharp
  - vb
  name: TryGetInt32Value(IEnumerable<Claim>, String, out Int32)
  nameWithType: ClaimsExtensions.TryGetInt32Value(IEnumerable<Claim>, String, out Int32)
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, out System.Int32)
  type: Method
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.Security.Claims
  summary: "\nTry get int32 claim value. Claim must be of type <xref href=\"System.Security.Claims.ClaimValueTypes.Integer32\" data-throw-if-not-resolved=\"false\"></xref>. Resolves first if there are several.\n"
  syntax:
    content: public static bool TryGetInt32Value(this IEnumerable<Claim> claims, string claimType, out int claimValue)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: claimValue
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetInt32Value(claims As IEnumerable(Of Claim), claimType As String, ByRef claimValue As Integer) As Boolean
  overload: SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value*
  nameWithType.vb: ClaimsExtensions.TryGetInt32Value(IEnumerable(Of Claim), String, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, ByRef System.Int32)
  name.vb: TryGetInt32Value(IEnumerable(Of Claim), String, ByRef Int32)
- uid: SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.DateTime@)
  commentId: M:SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.DateTime@)
  id: TryGetDateTimeValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.DateTime@)
  isExtensionMethod: true
  parent: SuperOffice.Security.Claims.ClaimsExtensions
  langs:
  - csharp
  - vb
  name: TryGetDateTimeValue(IEnumerable<Claim>, String, out DateTime)
  nameWithType: ClaimsExtensions.TryGetDateTimeValue(IEnumerable<Claim>, String, out DateTime)
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, out System.DateTime)
  type: Method
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.Security.Claims
  summary: "\nTry get a DateTime claim value.  Claim must be of type <xref href=\"System.Security.Claims.ClaimValueTypes.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. Resolves first if there are several.\n"
  syntax:
    content: public static bool TryGetDateTimeValue(this IEnumerable<Claim> claims, string claimType, out DateTime claimValue)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: claimValue
      type: System.DateTime
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetDateTimeValue(claims As IEnumerable(Of Claim), claimType As String, ByRef claimValue As DateTime) As Boolean
  overload: SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue*
  nameWithType.vb: ClaimsExtensions.TryGetDateTimeValue(IEnumerable(Of Claim), String, ByRef DateTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, ByRef System.DateTime)
  name.vb: TryGetDateTimeValue(IEnumerable(Of Claim), String, ByRef DateTime)
references:
- uid: SuperOffice.Security.Claims
  commentId: N:SuperOffice.Security.Claims
  isExternal: true
  name: SuperOffice.Security.Claims
  nameWithType: SuperOffice.Security.Claims
  fullName: SuperOffice.Security.Claims
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues*
  commentId: Overload:SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues
  isExternal: true
  name: GetClaimValues
  nameWithType: ClaimsExtensions.GetClaimValues
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: '!:System.Collections.Generic.IEnumerable{System.String}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue*
  commentId: Overload:SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue
  isExternal: true
  name: GetClaimValue
  nameWithType: ClaimsExtensions.GetClaimValue
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue
- uid: SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue*
  commentId: Overload:SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue
  isExternal: true
  name: TryGetValue
  nameWithType: ClaimsExtensions.TryGetValue
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value*
  commentId: Overload:SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value
  isExternal: true
  name: TryGetInt32Value
  nameWithType: ClaimsExtensions.TryGetInt32Value
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue*
  commentId: Overload:SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue
  isExternal: true
  name: TryGetDateTimeValue
  nameWithType: ClaimsExtensions.TryGetDateTimeValue
  fullName: SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
