### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Cache.CacheBaseV2
  commentId: T:SuperOffice.Data.Cache.CacheBaseV2
  id: CacheBaseV2
  parent: SuperOffice.Data.Cache
  children:
  - SuperOffice.Data.Cache.CacheBaseV2.#ctor
  - SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  - SuperOffice.Data.Cache.CacheBaseV2.Disposed
  - SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose
  - SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave,System.Threading.CancellationToken)
  - SuperOffice.Data.Cache.CacheBaseV2.Load
  - SuperOffice.Data.Cache.CacheBaseV2.LoadAsync(System.Threading.CancellationToken)
  - SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  - SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync(System.Threading.CancellationToken)
  - SuperOffice.Data.Cache.CacheBaseV2.TableNames
  langs:
  - csharp
  - vb
  name: CacheBaseV2
  nameWithType: CacheBaseV2
  fullName: SuperOffice.Data.Cache.CacheBaseV2
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nBase class for caches.\n"
  remarks: "\n<p>\n Implement this class if you want to implement a cache within \n NetServer.  Classes implementing this class should always be \n instantiated with the <see cref=\"!:CacheManager.Get&lt;T>\"></see> method.\n</p>\n"
  syntax:
    content: 'public abstract class CacheBaseV2 : Object, IInstanceContainerDisposable'
    content.vb: >-
      Public MustInherit Class CacheBaseV2
          Inherits Object
          Implements IInstanceContainerDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Cache.AssociateCache
  - SuperOffice.CRM.Cache.ConsentCache
  - SuperOffice.CRM.Cache.CurrencyCache
  - SuperOffice.CRM.Cache.ExtraFieldsCache
  - SuperOffice.CRM.Cache.MDOListTableCacheBase
  - SuperOffice.CRM.Cache.MDOPreferenceCache
  - SuperOffice.CRM.Cache.RelationDefinitionCache
  - SuperOffice.CRM.Cache.RoleCache
  - SuperOffice.CRM.Cache.SystemEventCache
  - SuperOffice.CRM.Cache.TicketPriorityCache
  - SuperOffice.CRM.Cache.TicketStatusCache
  - SuperOffice.CRM.Entities.SaintConfigurationCache
  - SuperOffice.CRM.Globalization.AddressFormatCache
  - SuperOffice.CRM.Globalization.CountryCache
  - SuperOffice.CRM.Rows.UDefFieldCacheBase
  - SuperOffice.CRM.Security.EjCategoryCache
  - SuperOffice.CRM.Security.ErpConnectionAccessCache
  - SuperOffice.CRM.Security.FunctionRightCache
  - SuperOffice.CRM.Security.OwnerContactCache
  - SuperOffice.CRM.Security.QuoteLineConfigurationCache
  - SuperOffice.CRM.Security.RefCountsPermissionCache
  - SuperOffice.CRM.Security.Sentry.DataRightCache
  - SuperOffice.CRM.Security.SentryPreferenceCache
  - SuperOffice.CRM.Security.UserGroupCache
  - SuperOffice.License.LicenseAssocLinkCache
  - SuperOffice.License.LicenseCache
  extensionMethods:
  - SuperOffice.Data.Cache.CacheBaseV2.EnumUtil.MapEnums``2
  - SuperOffice.Data.Cache.CacheBaseV2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.Data.Cache.CacheBaseV2.#ctor
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: CacheBaseV2()
  nameWithType: CacheBaseV2.CacheBaseV2()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.CacheBaseV2()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nDefault constructor for CacheBase\n"
  remarks: "\nClasses inheriting this class should only be instantiated through the <see cref=\"!:CacheManager.Get&lt;T>\"></see> method.\n"
  syntax:
    content: protected CacheBaseV2()
    content.vb: Protected Sub New
  overload: SuperOffice.Data.Cache.CacheBaseV2.#ctor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThis exception will be thrown if not above elements in the call stack \nis saved with the SuperOffice strong name.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave,System.Threading.CancellationToken)
  id: IsCacheInvalidatedAsync(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave,System.Threading.CancellationToken)
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: IsCacheInvalidatedAsync(String, Int32, PrivateSave, CancellationToken)
  nameWithType: CacheBaseV2.IsCacheInvalidatedAsync(String, Int32, PrivateSave, CancellationToken)
  fullName: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync(System.String, System.Int32, SuperOffice.Data.SQL.PrivateSave, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nDetermine if the change made the cache invalid. \n"
  remarks: "\nBy default, any change to a cached table will\ncause invalidation, but a cache may have a more discerning opinion; if so then implement\nthis method.\n"
  syntax:
    content: protected virtual Task<bool> IsCacheInvalidatedAsync(string tableName, int primaryKey, PrivateSave save, CancellationToken cancellationToken = null)
    parameters:
    - id: tableName
      type: System.String
    - id: primaryKey
      type: System.Int32
      description: Primary key of the record being changed.
    - id: save
      type: SuperOffice.Data.SQL.PrivateSave
      description: The SQL statement generating the change
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Protected Overridable Function IsCacheInvalidatedAsync(tableName As String, primaryKey As Integer, save As PrivateSave, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose
  id: InstanceDispose
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: InstanceDispose()
  nameWithType: CacheBaseV2.InstanceDispose()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nDispose of the cache.\n<strong>NOTE</strong> - the data in the cache should be left untouched\n"
  remarks: "\nSomeone may be using the cache, even if it is being &apos;disposed&apos; here. The meaning of dispose is &apos;this is no longer\nthe current instance of this cache&apos;; so it&apos;s taken out of all the lifetime and notification mechanisms. However,\nthe principle of immutability means that the <strong>content</strong> of the cache should not be changed. <br />\nClients that do SomeCache.GetCurrent().GetSomething() may well have a thread in the GetSomething method and\nit would be very bad to interrupt that. There the cleanup of the cache object is left to the garbage collector,\nwho knows when it is actually unreferenced. And once that happens no-one can get hold of it again.\n"
  syntax:
    content: public void InstanceDispose()
    content.vb: Public Sub InstanceDispose
  overload: SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  id: BeginDisableAutoUpdate
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: BeginDisableAutoUpdate()
  nameWithType: CacheBaseV2.BeginDisableAutoUpdate()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  syntax:
    content: public IAsyncDisposable BeginDisableAutoUpdate()
    return:
      type: System.IAsyncDisposable
    content.vb: Public Function BeginDisableAutoUpdate As IAsyncDisposable
  overload: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Cache.CacheBaseV2.LoadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.LoadAsync(System.Threading.CancellationToken)
  id: LoadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: LoadAsync(CancellationToken)
  nameWithType: CacheBaseV2.LoadAsync(CancellationToken)
  fullName: SuperOffice.Data.Cache.CacheBaseV2.LoadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nLoads the cache data\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      protected Task LoadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Protected Function LoadAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.Data.Cache.CacheBaseV2.LoadAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  id: OnLoad
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: OnLoad()
  nameWithType: CacheBaseV2.OnLoad()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  syntax:
    content: protected abstract void OnLoad()
    content.vb: Protected MustOverride Sub OnLoad
  overload: SuperOffice.Data.Cache.CacheBaseV2.OnLoad*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync(System.Threading.CancellationToken)
  id: OnLoadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: OnLoadAsync(CancellationToken)
  nameWithType: CacheBaseV2.OnLoadAsync(CancellationToken)
  fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  syntax:
    content: protected abstract Task OnLoadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected MustOverride Function OnLoadAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.Data.Cache.CacheBaseV2.Load
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Load
  id: Load
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: CacheBaseV2.Load()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Load()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nLoads the cache data\n"
  syntax:
    content: protected void Load()
    content.vb: Protected Sub Load
  overload: SuperOffice.Data.Cache.CacheBaseV2.Load*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Cache.CacheBaseV2.Disposed
  commentId: P:SuperOffice.Data.Cache.CacheBaseV2.Disposed
  id: Disposed
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: Disposed
  nameWithType: CacheBaseV2.Disposed
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Disposed
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nIndicates whether the cache is disposed/flushed. Cache data is still accessable, but might be out\nof date.\n"
  remarks: "\nThis flag is useful for debugging if we suddenly end up with an out of date cacehe and don&apos;t know\nwhy. So please don&apos;t remove this property even if it isn&apos;t in use anywhere.\n"
  syntax:
    content: public bool Disposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Disposed As Boolean
  overload: SuperOffice.Data.Cache.CacheBaseV2.Disposed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Cache.CacheBaseV2.TableNames
  commentId: P:SuperOffice.Data.Cache.CacheBaseV2.TableNames
  id: TableNames
  parent: SuperOffice.Data.Cache.CacheBaseV2
  langs:
  - csharp
  - vb
  name: TableNames
  nameWithType: CacheBaseV2.TableNames
  fullName: SuperOffice.Data.Cache.CacheBaseV2.TableNames
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nGets the names of the table data that are cached in this cache. When these tables are updated\nthe cache will be disposed so a new cache instance can take its place.\n"
  syntax:
    content: protected abstract IEnumerable<string> TableNames { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Protected MustOverride ReadOnly Property TableNames As IEnumerable(Of String)
  overload: SuperOffice.Data.Cache.CacheBaseV2.TableNames*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
references:
- uid: SuperOffice.Data.Cache
  commentId: N:SuperOffice.Data.Cache
  isExternal: true
  name: SuperOffice.Data.Cache
  nameWithType: SuperOffice.Data.Cache
  fullName: SuperOffice.Data.Cache
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Cache.CacheBaseV2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CacheBaseV2, To>()
  nameWithType: EnumUtil.MapEnums<CacheBaseV2, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Cache.CacheBaseV2, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CacheBaseV2, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Cache.CacheBaseV2, To)()
  name.vb: MapEnums(Of CacheBaseV2, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CacheBaseV2, To>
    nameWithType: EnumUtil.MapEnums<CacheBaseV2, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Cache.CacheBaseV2, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CacheBaseV2, To)
    nameWithType: EnumUtil.MapEnums(Of CacheBaseV2, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Cache.CacheBaseV2, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CacheBaseV2, To>()
  nameWithType: Converters.MapEnums<CacheBaseV2, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Cache.CacheBaseV2, To>()
  nameWithType.vb: Converters.MapEnums(Of CacheBaseV2, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Cache.CacheBaseV2, To)()
  name.vb: MapEnums(Of CacheBaseV2, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CacheBaseV2, To>
    nameWithType: Converters.MapEnums<CacheBaseV2, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Cache.CacheBaseV2, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CacheBaseV2, To)
    nameWithType: Converters.MapEnums(Of CacheBaseV2, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Cache.CacheBaseV2, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Cache.CacheBaseV2.#ctor*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.#ctor
  isExternal: true
  name: CacheBaseV2
  nameWithType: CacheBaseV2.CacheBaseV2
  fullName: SuperOffice.Data.Cache.CacheBaseV2.CacheBaseV2
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: true
- uid: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync
  isExternal: true
  name: IsCacheInvalidatedAsync
  nameWithType: CacheBaseV2.IsCacheInvalidatedAsync
  fullName: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidatedAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.PrivateSave
  commentId: T:SuperOffice.Data.SQL.PrivateSave
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: PrivateSave
  nameWithType: PrivateSave
  fullName: SuperOffice.Data.SQL.PrivateSave
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose
  isExternal: true
  name: InstanceDispose
  nameWithType: CacheBaseV2.InstanceDispose
  fullName: SuperOffice.Data.Cache.CacheBaseV2.InstanceDispose
- uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  isExternal: true
  name: BeginDisableAutoUpdate
  nameWithType: CacheBaseV2.BeginDisableAutoUpdate
  fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
- uid: System.IAsyncDisposable
  isExternal: true
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: SuperOffice.Data.Cache.CacheBaseV2.LoadAsync*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.LoadAsync
  isExternal: true
  name: LoadAsync
  nameWithType: CacheBaseV2.LoadAsync
  fullName: SuperOffice.Data.Cache.CacheBaseV2.LoadAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  isExternal: true
  name: OnLoad
  nameWithType: CacheBaseV2.OnLoad
  fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
- uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync
  isExternal: true
  name: OnLoadAsync
  nameWithType: CacheBaseV2.OnLoadAsync
  fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoadAsync
- uid: SuperOffice.Data.Cache.CacheBaseV2.Load*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.Load
  isExternal: true
  name: Load
  nameWithType: CacheBaseV2.Load
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Load
- uid: SuperOffice.Data.Cache.CacheBaseV2.Disposed*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.Disposed
  isExternal: true
  name: Disposed
  nameWithType: CacheBaseV2.Disposed
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Disposed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.Cache.CacheBaseV2.TableNames*
  commentId: Overload:SuperOffice.Data.Cache.CacheBaseV2.TableNames
  isExternal: true
  name: TableNames
  nameWithType: CacheBaseV2.TableNames
  fullName: SuperOffice.Data.Cache.CacheBaseV2.TableNames
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: '!:System.Collections.Generic.IEnumerable{System.String}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
