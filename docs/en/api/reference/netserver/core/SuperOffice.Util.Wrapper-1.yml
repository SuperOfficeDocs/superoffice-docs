### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.Wrapper`1
  commentId: T:SuperOffice.Util.Wrapper`1
  id: Wrapper`1
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.Wrapper`1.#ctor
  - SuperOffice.Util.Wrapper`1.Value
  langs:
  - csharp
  - vb
  name: Wrapper<T>
  nameWithType: Wrapper<T>
  fullName: SuperOffice.Util.Wrapper<T>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nWrapper class around a type, useful for example to avoid pass by value where we can&apos;t use the ref keyword\n"
  syntax:
    content: 'public class Wrapper<T> : Object'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class Wrapper(Of T)
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Util.Wrapper`1.EnumUtil.MapEnums``2
  - SuperOffice.Util.Wrapper`1.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.Wrapper{{T}})
  - SuperOffice.Util.Wrapper`1.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Util.Wrapper`1.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: Wrapper(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SuperOffice.Util.Wrapper(Of T)
  name.vb: Wrapper(Of T)
- uid: SuperOffice.Util.Wrapper`1.Value
  commentId: F:SuperOffice.Util.Wrapper`1.Value
  id: Value
  parent: SuperOffice.Util.Wrapper`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Wrapper<T>.Value
  fullName: SuperOffice.Util.Wrapper<T>.Value
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public T Value
    return:
      type: '{T}'
    content.vb: Public Value As T
  nameWithType.vb: Wrapper(Of T).Value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.Wrapper(Of T).Value
- uid: SuperOffice.Util.Wrapper`1.#ctor
  commentId: M:SuperOffice.Util.Wrapper`1.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.Wrapper`1
  langs:
  - csharp
  - vb
  name: Wrapper()
  nameWithType: Wrapper<T>.Wrapper()
  fullName: SuperOffice.Util.Wrapper<T>.Wrapper()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public Wrapper()
    content.vb: Public Sub New
  overload: SuperOffice.Util.Wrapper`1.#ctor*
  nameWithType.vb: Wrapper(Of T).Wrapper()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.Wrapper(Of T).Wrapper()
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Util.Wrapper`1.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<Wrapper<T>, To>()
  nameWithType: EnumUtil.MapEnums<Wrapper<T>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.Wrapper<T>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of Wrapper(Of T), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.Wrapper(Of T), To)()
  name.vb: MapEnums(Of Wrapper(Of T), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<Wrapper<T>, To>
    nameWithType: EnumUtil.MapEnums<Wrapper<T>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.Wrapper<T>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of Wrapper(Of T), To)
    nameWithType: EnumUtil.MapEnums(Of Wrapper(Of T), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.Wrapper(Of T), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.Wrapper`1.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.Wrapper{{T}})
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<Wrapper<T>>(Wrapper<T>)
  nameWithType: ObjectExtensions.AssignByReflection<Wrapper<T>>(Wrapper<T>)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.Wrapper<T>>(SuperOffice.Util.Wrapper<T>)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of Wrapper(Of T))(Wrapper(Of T))
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.Wrapper(Of T))(SuperOffice.Util.Wrapper(Of T))
  name.vb: AssignByReflection(Of Wrapper(Of T))(Wrapper(Of T))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<Wrapper<T>>
    nameWithType: ObjectExtensions.AssignByReflection<Wrapper<T>>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.Wrapper<T>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.Wrapper`1
    name: Wrapper
    nameWithType: Wrapper
    fullName: SuperOffice.Util.Wrapper
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of Wrapper(Of T))
    nameWithType: ObjectExtensions.AssignByReflection(Of Wrapper(Of T))
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.Wrapper(Of T))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.Wrapper`1
    name: Wrapper
    nameWithType: Wrapper
    fullName: SuperOffice.Util.Wrapper
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.Wrapper`1.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<Wrapper<T>>()
  nameWithType: ObjectExtensions.GraphCopy<Wrapper<T>>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.Wrapper<T>>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of Wrapper(Of T))()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.Wrapper(Of T))()
  name.vb: GraphCopy(Of Wrapper(Of T))()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<Wrapper<T>>
    nameWithType: ObjectExtensions.GraphCopy<Wrapper<T>>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.Wrapper<T>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of Wrapper(Of T))
    nameWithType: ObjectExtensions.GraphCopy(Of Wrapper(Of T))
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.Wrapper(Of T))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.Wrapper`1.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<Wrapper<T>, To>()
  nameWithType: Converters.MapEnums<Wrapper<T>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.Wrapper<T>, To>()
  nameWithType.vb: Converters.MapEnums(Of Wrapper(Of T), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.Wrapper(Of T), To)()
  name.vb: MapEnums(Of Wrapper(Of T), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<Wrapper<T>, To>
    nameWithType: Converters.MapEnums<Wrapper<T>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.Wrapper<T>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of Wrapper(Of T), To)
    nameWithType: Converters.MapEnums(Of Wrapper(Of T), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.Wrapper(Of T), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.Util.Wrapper`1.#ctor*
  commentId: Overload:SuperOffice.Util.Wrapper`1.#ctor
  isExternal: true
  name: Wrapper
  nameWithType: Wrapper<T>.Wrapper
  fullName: SuperOffice.Util.Wrapper<T>.Wrapper
  nameWithType.vb: Wrapper(Of T).Wrapper
  fullName.vb: SuperOffice.Util.Wrapper(Of T).Wrapper
