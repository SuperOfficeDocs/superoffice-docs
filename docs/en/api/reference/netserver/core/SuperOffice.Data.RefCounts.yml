### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.RefCounts
  commentId: T:SuperOffice.Data.RefCounts
  id: RefCounts
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.RefCounts.CreateCounter(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  - SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  - SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.RefCounts.Unique(SuperOffice.Data.SQL.FieldInfo)
  langs:
  - csharp
  - vb
  name: RefCounts
  nameWithType: RefCounts
  fullName: SuperOffice.Data.RefCounts
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nUtility class for dealing with reference counters.\n"
  syntax:
    content: public sealed class RefCounts
    content.vb: Public NotInheritable Class RefCounts
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.RefCounts.EnumUtil.MapEnums``2
  - SuperOffice.Data.RefCounts.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo)
  id: GetNext(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: GetNext(FieldInfo)
  nameWithType: RefCounts.GetNext(FieldInfo)
  fullName: SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next number from a <xref href=\"SuperOffice.Data.SQL.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> definition.\n"
  remarks: '&apos;0&apos; is returned if there is no previous information about the row.'
  syntax:
    content: public static int GetNext(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field to get the next number for.
    return:
      type: System.Int32
      description: The next number for the field.
    content.vb: Public Shared Function GetNext(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.RefCounts.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.Unique(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.Unique(SuperOffice.Data.SQL.FieldInfo)
  id: Unique(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: Unique(FieldInfo)
  nameWithType: RefCounts.Unique(FieldInfo)
  fullName: SuperOffice.Data.RefCounts.Unique(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static bool Unique(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function Unique(fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.RefCounts.Unique*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  id: Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: Unique(RefCountsRow, FieldInfo)
  nameWithType: RefCounts.Unique(RefCountsRow, FieldInfo)
  fullName: SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static bool Unique(RefCountsRow refCount, FieldInfo fieldInfo)
    parameters:
    - id: refCount
      type: SuperOffice.CRM.Rows.RefCountsRow
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function Unique(refCount As RefCountsRow, fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.RefCounts.Unique*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.Data.SQL.FieldInfo)
  id: AllowBlank(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: AllowBlank(FieldInfo)
  nameWithType: RefCounts.AllowBlank(FieldInfo)
  fullName: SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static bool AllowBlank(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function AllowBlank(fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.RefCounts.AllowBlank*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  id: AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: AllowBlank(RefCountsRow, FieldInfo)
  nameWithType: RefCounts.AllowBlank(RefCountsRow, FieldInfo)
  fullName: SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static bool AllowBlank(RefCountsRow refCount, FieldInfo fieldInfo)
    parameters:
    - id: refCount
      type: SuperOffice.CRM.Rows.RefCountsRow
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function AllowBlank(refCount As RefCountsRow, fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.RefCounts.AllowBlank*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  commentId: M:SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  id: GetNext(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: GetNext(FieldInfo, Int32)
  nameWithType: RefCounts.GetNext(FieldInfo, Int32)
  fullName: SuperOffice.Data.RefCounts.GetNext(SuperOffice.Data.SQL.FieldInfo, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next number from a <xref href=\"SuperOffice.Data.SQL.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> definition.\n"
  remarks: '&apos;0&apos; is returned if there is no previous information about the row.'
  syntax:
    content: public static int GetNext(FieldInfo fieldInfo, int recordId)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field to get the next number for.
    - id: recordId
      type: System.Int32
      description: The record id to get the number for.
    return:
      type: System.Int32
      description: The next number for the field.
    content.vb: Public Shared Function GetNext(fieldInfo As FieldInfo, recordId As Integer) As Integer
  overload: SuperOffice.Data.RefCounts.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.CreateCounter(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  commentId: M:SuperOffice.Data.RefCounts.CreateCounter(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  id: CreateCounter(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: CreateCounter(FieldInfo, Int32)
  nameWithType: RefCounts.CreateCounter(FieldInfo, Int32)
  fullName: SuperOffice.Data.RefCounts.CreateCounter(SuperOffice.Data.SQL.FieldInfo, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nPrivate SuperOffice function for creating new counters.\n"
  syntax:
    content: public RefCountsRow CreateCounter(FieldInfo fieldInfo, int recordId)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field to get the next number for.
    - id: recordId
      type: System.Int32
      description: The record id to get the number for.
    return:
      type: SuperOffice.CRM.Rows.RefCountsRow
      description: <xref href="SuperOffice.CRM.Rows.RefCountsRow" data-throw-if-not-resolved="false"></xref> representing the counter.
    content.vb: Public Function CreateCounter(fieldInfo As FieldInfo, recordId As Integer) As RefCountsRow
  overload: SuperOffice.Data.RefCounts.CreateCounter*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Exception is thrown if code accessing this methid is not sigend with the SuperOffice strong name key.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RefCounts.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<RefCounts, To>()
  nameWithType: EnumUtil.MapEnums<RefCounts, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.RefCounts, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of RefCounts, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.RefCounts, To)()
  name.vb: MapEnums(Of RefCounts, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<RefCounts, To>
    nameWithType: EnumUtil.MapEnums<RefCounts, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.RefCounts, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of RefCounts, To)
    nameWithType: EnumUtil.MapEnums(Of RefCounts, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.RefCounts, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RefCounts.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<RefCounts, To>()
  nameWithType: Converters.MapEnums<RefCounts, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.RefCounts, To>()
  nameWithType.vb: Converters.MapEnums(Of RefCounts, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.RefCounts, To)()
  name.vb: MapEnums(Of RefCounts, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<RefCounts, To>
    nameWithType: Converters.MapEnums<RefCounts, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.RefCounts, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of RefCounts, To)
    nameWithType: Converters.MapEnums(Of RefCounts, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.RefCounts, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.RefCounts.GetNext*
  commentId: Overload:SuperOffice.Data.RefCounts.GetNext
  isExternal: true
  name: GetNext
  nameWithType: RefCounts.GetNext
  fullName: SuperOffice.Data.RefCounts.GetNext
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.Data.RefCounts.Unique*
  commentId: Overload:SuperOffice.Data.RefCounts.Unique
  isExternal: true
  name: Unique
  nameWithType: RefCounts.Unique
  fullName: SuperOffice.Data.RefCounts.Unique
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Rows.RefCountsRow
  commentId: T:SuperOffice.CRM.Rows.RefCountsRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: RefCountsRow
  nameWithType: RefCountsRow
  fullName: SuperOffice.CRM.Rows.RefCountsRow
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: SuperOffice.Data.RefCounts.AllowBlank*
  commentId: Overload:SuperOffice.Data.RefCounts.AllowBlank
  isExternal: true
  name: AllowBlank
  nameWithType: RefCounts.AllowBlank
  fullName: SuperOffice.Data.RefCounts.AllowBlank
- uid: SuperOffice.Data.RefCounts.CreateCounter*
  commentId: Overload:SuperOffice.Data.RefCounts.CreateCounter
  isExternal: true
  name: CreateCounter
  nameWithType: RefCounts.CreateCounter
  fullName: SuperOffice.Data.RefCounts.CreateCounter
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: true
