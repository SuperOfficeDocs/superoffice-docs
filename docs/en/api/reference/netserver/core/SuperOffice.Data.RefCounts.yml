### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.RefCounts
  commentId: T:SuperOffice.Data.RefCounts
  id: RefCounts
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.RefCounts.AllowBlankAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  - SuperOffice.Data.RefCounts.GetNextAsync(SuperOffice.Data.SQL.FieldInfo,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.RefCounts.UniqueAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: RefCounts
  nameWithType: RefCounts
  fullName: SuperOffice.Data.RefCounts
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nUtility class for dealing with reference counters.\n"
  syntax:
    content: 'public sealed class RefCounts : Object'
    content.vb: >-
      Public NotInheritable Class RefCounts
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Data.RefCounts.EnumUtil.MapEnums``2
  - SuperOffice.Data.RefCounts.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Data.RefCounts.UniqueAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.RefCounts.UniqueAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  id: UniqueAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: UniqueAsync(FieldInfo, CancellationToken)
  nameWithType: RefCounts.UniqueAsync(FieldInfo, CancellationToken)
  fullName: SuperOffice.Data.RefCounts.UniqueAsync(SuperOffice.Data.SQL.FieldInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static Task<bool> UniqueAsync(FieldInfo fieldInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function UniqueAsync(fieldInfo As FieldInfo, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.Data.RefCounts.UniqueAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  id: Unique(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: Unique(RefCountsRow, FieldInfo)
  nameWithType: RefCounts.Unique(RefCountsRow, FieldInfo)
  fullName: SuperOffice.Data.RefCounts.Unique(SuperOffice.CRM.Rows.RefCountsRow, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static bool Unique(RefCountsRow refCount, FieldInfo fieldInfo)
    parameters:
    - id: refCount
      type: SuperOffice.CRM.Rows.RefCountsRow
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function Unique(refCount As RefCountsRow, fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.RefCounts.Unique*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.AllowBlankAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.RefCounts.AllowBlankAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  id: AllowBlankAsync(SuperOffice.Data.SQL.FieldInfo,System.Threading.CancellationToken)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: AllowBlankAsync(FieldInfo, CancellationToken)
  nameWithType: RefCounts.AllowBlankAsync(FieldInfo, CancellationToken)
  fullName: SuperOffice.Data.RefCounts.AllowBlankAsync(SuperOffice.Data.SQL.FieldInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static Task<bool> AllowBlankAsync(FieldInfo fieldInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function AllowBlankAsync(fieldInfo As FieldInfo, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.Data.RefCounts.AllowBlankAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  id: AllowBlank(SuperOffice.CRM.Rows.RefCountsRow,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: AllowBlank(RefCountsRow, FieldInfo)
  nameWithType: RefCounts.AllowBlank(RefCountsRow, FieldInfo)
  fullName: SuperOffice.Data.RefCounts.AllowBlank(SuperOffice.CRM.Rows.RefCountsRow, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nChecks if the unique flag is set for the field.\n"
  syntax:
    content: public static bool AllowBlank(RefCountsRow refCount, FieldInfo fieldInfo)
    parameters:
    - id: refCount
      type: SuperOffice.CRM.Rows.RefCountsRow
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function AllowBlank(refCount As RefCountsRow, fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.RefCounts.AllowBlank*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.RefCounts.GetNextAsync(SuperOffice.Data.SQL.FieldInfo,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.RefCounts.GetNextAsync(SuperOffice.Data.SQL.FieldInfo,System.Int32,System.Threading.CancellationToken)
  id: GetNextAsync(SuperOffice.Data.SQL.FieldInfo,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Data.RefCounts
  langs:
  - csharp
  - vb
  name: GetNextAsync(FieldInfo, Int32, CancellationToken)
  nameWithType: RefCounts.GetNextAsync(FieldInfo, Int32, CancellationToken)
  fullName: SuperOffice.Data.RefCounts.GetNextAsync(SuperOffice.Data.SQL.FieldInfo, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next number from a <xref href=\"SuperOffice.Data.SQL.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> definition.\n"
  remarks: '&apos;0&apos; is returned if there is no previous information about the row.'
  syntax:
    content: public static Task<int> GetNextAsync(FieldInfo fieldInfo, int recordId = 0, CancellationToken cancellationToken = null)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field to get the next number for.
    - id: recordId
      type: System.Int32
      description: The record id to get the number for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The next number for the field.
    content.vb: Public Shared Function GetNextAsync(fieldInfo As FieldInfo, recordId As Integer = 0, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.RefCounts.GetNextAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.RefCounts.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<RefCounts, To>()
  nameWithType: EnumUtil.MapEnums<RefCounts, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.RefCounts, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of RefCounts, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.RefCounts, To)()
  name.vb: MapEnums(Of RefCounts, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<RefCounts, To>
    nameWithType: EnumUtil.MapEnums<RefCounts, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.RefCounts, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of RefCounts, To)
    nameWithType: EnumUtil.MapEnums(Of RefCounts, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.RefCounts, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RefCounts.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<RefCounts, To>()
  nameWithType: Converters.MapEnums<RefCounts, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.RefCounts, To>()
  nameWithType.vb: Converters.MapEnums(Of RefCounts, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.RefCounts, To)()
  name.vb: MapEnums(Of RefCounts, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<RefCounts, To>
    nameWithType: Converters.MapEnums<RefCounts, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.RefCounts, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of RefCounts, To)
    nameWithType: Converters.MapEnums(Of RefCounts, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.RefCounts, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.RefCounts.UniqueAsync*
  commentId: Overload:SuperOffice.Data.RefCounts.UniqueAsync
  isExternal: true
  name: UniqueAsync
  nameWithType: RefCounts.UniqueAsync
  fullName: SuperOffice.Data.RefCounts.UniqueAsync
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.RefCounts.Unique*
  commentId: Overload:SuperOffice.Data.RefCounts.Unique
  isExternal: true
  name: Unique
  nameWithType: RefCounts.Unique
  fullName: SuperOffice.Data.RefCounts.Unique
- uid: SuperOffice.CRM.Rows.RefCountsRow
  commentId: T:SuperOffice.CRM.Rows.RefCountsRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: RefCountsRow
  nameWithType: RefCountsRow
  fullName: SuperOffice.CRM.Rows.RefCountsRow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: SuperOffice.Data.RefCounts.AllowBlankAsync*
  commentId: Overload:SuperOffice.Data.RefCounts.AllowBlankAsync
  isExternal: true
  name: AllowBlankAsync
  nameWithType: RefCounts.AllowBlankAsync
  fullName: SuperOffice.Data.RefCounts.AllowBlankAsync
- uid: SuperOffice.Data.RefCounts.AllowBlank*
  commentId: Overload:SuperOffice.Data.RefCounts.AllowBlank
  isExternal: true
  name: AllowBlank
  nameWithType: RefCounts.AllowBlank
  fullName: SuperOffice.Data.RefCounts.AllowBlank
- uid: SuperOffice.Data.RefCounts.GetNextAsync*
  commentId: Overload:SuperOffice.Data.RefCounts.GetNextAsync
  isExternal: true
  name: GetNextAsync
  nameWithType: RefCounts.GetNextAsync
  fullName: SuperOffice.Data.RefCounts.GetNextAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
