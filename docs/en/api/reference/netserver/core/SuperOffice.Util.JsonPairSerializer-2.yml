### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.JsonPairSerializer`2
  commentId: T:SuperOffice.Util.JsonPairSerializer`2
  id: JsonPairSerializer`2
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.JsonPairSerializer`2.Serialize(`0,`1)
  - SuperOffice.Util.JsonPairSerializer`2.SerializeAsStream(`0,`1)
  - SuperOffice.Util.JsonPairSerializer`2.TryDeserialize(System.String,`0@,`1@)
  - SuperOffice.Util.JsonPairSerializer`2.TryDeserializeFromStream(System.IO.Stream,`0@,`1@)
  langs:
  - csharp
  - vb
  name: JsonPairSerializer<T1, T2>
  nameWithType: JsonPairSerializer<T1, T2>
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nClass used to serialize related pairs of data.\nImplemented generally for reuseability across the codebase,\nbut intended specificly to support use-cases related to\nCRM WebAdmin and data-import batch-tasks.\n"
  syntax:
    content: 'public static class JsonPairSerializer<T1, T2> : Object'
    typeParameters:
    - id: T1
      description: Typically of type CRM.Services.ImportLine[]
    - id: T2
      description: Typically of type CRM.Services.ImportColumnInfo[]
    content.vb: >-
      Public Module JsonPairSerializer(Of T1, T2)
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: JsonPairSerializer(Of T1, T2)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2)
  name.vb: JsonPairSerializer(Of T1, T2)
- uid: SuperOffice.Util.JsonPairSerializer`2.Serialize(`0,`1)
  commentId: M:SuperOffice.Util.JsonPairSerializer`2.Serialize(`0,`1)
  id: Serialize(`0,`1)
  parent: SuperOffice.Util.JsonPairSerializer`2
  langs:
  - csharp
  - vb
  name: Serialize(T1, T2)
  nameWithType: JsonPairSerializer<T1, T2>.Serialize(T1, T2)
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.Serialize(T1, T2)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public static string Serialize(T1 v1, T2 v2)
    parameters:
    - id: v1
      type: '{T1}'
    - id: v2
      type: '{T2}'
    return:
      type: System.String
    content.vb: Public Shared Function Serialize(v1 As T1, v2 As T2) As String
  overload: SuperOffice.Util.JsonPairSerializer`2.Serialize*
  nameWithType.vb: JsonPairSerializer(Of T1, T2).Serialize(T1, T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).Serialize(T1, T2)
- uid: SuperOffice.Util.JsonPairSerializer`2.TryDeserialize(System.String,`0@,`1@)
  commentId: M:SuperOffice.Util.JsonPairSerializer`2.TryDeserialize(System.String,`0@,`1@)
  id: TryDeserialize(System.String,`0@,`1@)
  parent: SuperOffice.Util.JsonPairSerializer`2
  langs:
  - csharp
  - vb
  name: TryDeserialize(String, out T1, out T2)
  nameWithType: JsonPairSerializer<T1, T2>.TryDeserialize(String, out T1, out T2)
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.TryDeserialize(System.String, out T1, out T2)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public static bool TryDeserialize(string value, out T1 v1, out T2 v2)
    parameters:
    - id: value
      type: System.String
    - id: v1
      type: '{T1}'
    - id: v2
      type: '{T2}'
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryDeserialize(value As String, ByRef v1 As T1, ByRef v2 As T2) As Boolean
  overload: SuperOffice.Util.JsonPairSerializer`2.TryDeserialize*
  nameWithType.vb: JsonPairSerializer(Of T1, T2).TryDeserialize(String, ByRef T1, ByRef T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).TryDeserialize(System.String, ByRef T1, ByRef T2)
  name.vb: TryDeserialize(String, ByRef T1, ByRef T2)
- uid: SuperOffice.Util.JsonPairSerializer`2.SerializeAsStream(`0,`1)
  commentId: M:SuperOffice.Util.JsonPairSerializer`2.SerializeAsStream(`0,`1)
  id: SerializeAsStream(`0,`1)
  parent: SuperOffice.Util.JsonPairSerializer`2
  langs:
  - csharp
  - vb
  name: SerializeAsStream(T1, T2)
  nameWithType: JsonPairSerializer<T1, T2>.SerializeAsStream(T1, T2)
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.SerializeAsStream(T1, T2)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public static Stream SerializeAsStream(T1 v1, T2 v2)
    parameters:
    - id: v1
      type: '{T1}'
    - id: v2
      type: '{T2}'
    return:
      type: System.IO.Stream
    content.vb: Public Shared Function SerializeAsStream(v1 As T1, v2 As T2) As Stream
  overload: SuperOffice.Util.JsonPairSerializer`2.SerializeAsStream*
  nameWithType.vb: JsonPairSerializer(Of T1, T2).SerializeAsStream(T1, T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).SerializeAsStream(T1, T2)
- uid: SuperOffice.Util.JsonPairSerializer`2.TryDeserializeFromStream(System.IO.Stream,`0@,`1@)
  commentId: M:SuperOffice.Util.JsonPairSerializer`2.TryDeserializeFromStream(System.IO.Stream,`0@,`1@)
  id: TryDeserializeFromStream(System.IO.Stream,`0@,`1@)
  parent: SuperOffice.Util.JsonPairSerializer`2
  langs:
  - csharp
  - vb
  name: TryDeserializeFromStream(Stream, out T1, out T2)
  nameWithType: JsonPairSerializer<T1, T2>.TryDeserializeFromStream(Stream, out T1, out T2)
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.TryDeserializeFromStream(System.IO.Stream, out T1, out T2)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public static bool TryDeserializeFromStream(Stream stream, out T1 v1, out T2 v2)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: v1
      type: '{T1}'
    - id: v2
      type: '{T2}'
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryDeserializeFromStream(stream As Stream, ByRef v1 As T1, ByRef v2 As T2) As Boolean
  overload: SuperOffice.Util.JsonPairSerializer`2.TryDeserializeFromStream*
  nameWithType.vb: JsonPairSerializer(Of T1, T2).TryDeserializeFromStream(Stream, ByRef T1, ByRef T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).TryDeserializeFromStream(System.IO.Stream, ByRef T1, ByRef T2)
  name.vb: TryDeserializeFromStream(Stream, ByRef T1, ByRef T2)
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Util.JsonPairSerializer`2.Serialize*
  commentId: Overload:SuperOffice.Util.JsonPairSerializer`2.Serialize
  isExternal: true
  name: Serialize
  nameWithType: JsonPairSerializer<T1, T2>.Serialize
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.Serialize
  nameWithType.vb: JsonPairSerializer(Of T1, T2).Serialize
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).Serialize
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: SuperOffice.Util.JsonPairSerializer`2.TryDeserialize*
  commentId: Overload:SuperOffice.Util.JsonPairSerializer`2.TryDeserialize
  isExternal: true
  name: TryDeserialize
  nameWithType: JsonPairSerializer<T1, T2>.TryDeserialize
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.TryDeserialize
  nameWithType.vb: JsonPairSerializer(Of T1, T2).TryDeserialize
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).TryDeserialize
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Util.JsonPairSerializer`2.SerializeAsStream*
  commentId: Overload:SuperOffice.Util.JsonPairSerializer`2.SerializeAsStream
  isExternal: true
  name: SerializeAsStream
  nameWithType: JsonPairSerializer<T1, T2>.SerializeAsStream
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.SerializeAsStream
  nameWithType.vb: JsonPairSerializer(Of T1, T2).SerializeAsStream
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).SerializeAsStream
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: SuperOffice.Util.JsonPairSerializer`2.TryDeserializeFromStream*
  commentId: Overload:SuperOffice.Util.JsonPairSerializer`2.TryDeserializeFromStream
  isExternal: true
  name: TryDeserializeFromStream
  nameWithType: JsonPairSerializer<T1, T2>.TryDeserializeFromStream
  fullName: SuperOffice.Util.JsonPairSerializer<T1, T2>.TryDeserializeFromStream
  nameWithType.vb: JsonPairSerializer(Of T1, T2).TryDeserializeFromStream
  fullName.vb: SuperOffice.Util.JsonPairSerializer(Of T1, T2).TryDeserializeFromStream
