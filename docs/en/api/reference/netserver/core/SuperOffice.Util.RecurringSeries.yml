### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.RecurringSeries
  commentId: T:SuperOffice.Util.RecurringSeries
  id: RecurringSeries
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.RecurringSeries.#ctor(System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries})
  - SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId(System.Int32)
  - SuperOffice.Util.RecurringSeries.SubSeries
  langs:
  - csharp
  - vb
  name: RecurringSeries
  nameWithType: RecurringSeries
  fullName: SuperOffice.Util.RecurringSeries
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: 'public class RecurringSeries : Object'
    content.vb: >-
      Public Class RecurringSeries
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Util.RecurringSeries.EnumUtil.MapEnums``2
  - SuperOffice.Util.RecurringSeries.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Util.RecurringSeries.SubSeries
  commentId: F:SuperOffice.Util.RecurringSeries.SubSeries
  id: SubSeries
  parent: SuperOffice.Util.RecurringSeries
  langs:
  - csharp
  - vb
  name: SubSeries
  nameWithType: RecurringSeries.SubSeries
  fullName: SuperOffice.Util.RecurringSeries.SubSeries
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: public readonly List<RecurringSubSeries> SubSeries
    return:
      type: System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries}
    content.vb: Public ReadOnly SubSeries As List(Of RecurringSubSeries)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Util.RecurringSeries.#ctor(System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries})
  commentId: M:SuperOffice.Util.RecurringSeries.#ctor(System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries})
  id: '#ctor(System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries})'
  parent: SuperOffice.Util.RecurringSeries
  langs:
  - csharp
  - vb
  name: RecurringSeries(List<RecurringSubSeries>)
  nameWithType: RecurringSeries.RecurringSeries(List<RecurringSubSeries>)
  fullName: SuperOffice.Util.RecurringSeries.RecurringSeries(System.Collections.Generic.List<SuperOffice.Util.RecurringSubSeries>)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: public RecurringSeries(List<RecurringSubSeries> recurringSubSeries)
    parameters:
    - id: recurringSubSeries
      type: System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries}
    content.vb: Public Sub New(recurringSubSeries As List(Of RecurringSubSeries))
  overload: SuperOffice.Util.RecurringSeries.#ctor*
  nameWithType.vb: RecurringSeries.RecurringSeries(List(Of RecurringSubSeries))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.RecurringSeries.RecurringSeries(System.Collections.Generic.List(Of SuperOffice.Util.RecurringSubSeries))
  name.vb: RecurringSeries(List(Of RecurringSubSeries))
- uid: SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId(System.Int32)
  commentId: M:SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId(System.Int32)
  id: GetRecurringSubSeriesOfAppointmentId(System.Int32)
  parent: SuperOffice.Util.RecurringSeries
  langs:
  - csharp
  - vb
  name: GetRecurringSubSeriesOfAppointmentId(Int32)
  nameWithType: RecurringSeries.GetRecurringSubSeriesOfAppointmentId(Int32)
  fullName: SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  summary: "\nReturns the first <xref href=\"SuperOffice.Util.RecurringSubSeries\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"SuperOffice.Util.RecurringSeries.SubSeries\" data-throw-if-not-resolved=\"false\"></xref>-list that contains a match on appointmentid. Attempts first to match on InvitationAppointmentId, and then in the list of AppointmentRecordData&apos;s. Returns null if no match found.\n"
  syntax:
    content: public RecurringSubSeries GetRecurringSubSeriesOfAppointmentId(int appointmentId)
    parameters:
    - id: appointmentId
      type: System.Int32
    return:
      type: SuperOffice.Util.RecurringSubSeries
    content.vb: Public Function GetRecurringSubSeriesOfAppointmentId(appointmentId As Integer) As RecurringSubSeries
  overload: SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Util.RecurringSeries.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<RecurringSeries, To>()
  nameWithType: EnumUtil.MapEnums<RecurringSeries, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.RecurringSeries, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of RecurringSeries, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.RecurringSeries, To)()
  name.vb: MapEnums(Of RecurringSeries, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<RecurringSeries, To>
    nameWithType: EnumUtil.MapEnums<RecurringSeries, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.RecurringSeries, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of RecurringSeries, To)
    nameWithType: EnumUtil.MapEnums(Of RecurringSeries, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.RecurringSeries, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.RecurringSeries.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<RecurringSeries, To>()
  nameWithType: Converters.MapEnums<RecurringSeries, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.RecurringSeries, To>()
  nameWithType.vb: Converters.MapEnums(Of RecurringSeries, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.RecurringSeries, To)()
  name.vb: MapEnums(Of RecurringSeries, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<RecurringSeries, To>
    nameWithType: Converters.MapEnums<RecurringSeries, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.RecurringSeries, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of RecurringSeries, To)
    nameWithType: Converters.MapEnums(Of RecurringSeries, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.RecurringSeries, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries}
  commentId: '!:System.Collections.Generic.List{SuperOffice.Util.RecurringSubSeries}'
  definition: System.Collections.Generic.List`1
  name: List<RecurringSubSeries>
  nameWithType: List<RecurringSubSeries>
  fullName: System.Collections.Generic.List<SuperOffice.Util.RecurringSubSeries>
  nameWithType.vb: List(Of RecurringSubSeries)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.Util.RecurringSubSeries)
  name.vb: List(Of RecurringSubSeries)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Util.RecurringSubSeries
    name: RecurringSubSeries
    nameWithType: RecurringSubSeries
    fullName: SuperOffice.Util.RecurringSubSeries
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Util.RecurringSubSeries
    name: RecurringSubSeries
    nameWithType: RecurringSubSeries
    fullName: SuperOffice.Util.RecurringSubSeries
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.RecurringSeries.#ctor*
  commentId: Overload:SuperOffice.Util.RecurringSeries.#ctor
  isExternal: true
  name: RecurringSeries
  nameWithType: RecurringSeries.RecurringSeries
  fullName: SuperOffice.Util.RecurringSeries.RecurringSeries
- uid: SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId*
  commentId: Overload:SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId
  isExternal: true
  name: GetRecurringSubSeriesOfAppointmentId
  nameWithType: RecurringSeries.GetRecurringSubSeriesOfAppointmentId
  fullName: SuperOffice.Util.RecurringSeries.GetRecurringSubSeriesOfAppointmentId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Util.RecurringSubSeries
  commentId: T:SuperOffice.Util.RecurringSubSeries
  parent: SuperOffice.Util
  isExternal: true
  name: RecurringSubSeries
  nameWithType: RecurringSubSeries
  fullName: SuperOffice.Util.RecurringSubSeries
