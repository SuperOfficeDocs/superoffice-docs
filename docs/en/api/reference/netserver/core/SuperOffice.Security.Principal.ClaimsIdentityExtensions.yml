### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  commentId: T:SuperOffice.Security.Principal.ClaimsIdentityExtensions
  id: ClaimsIdentityExtensions
  parent: SuperOffice.Security.Principal
  children:
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,``0@)
  - SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  langs:
  - csharp
  - vb
  name: ClaimsIdentityExtensions
  nameWithType: ClaimsIdentityExtensions
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: 'public static class ClaimsIdentityExtensions : Object'
    content.vb: >-
      Public Module ClaimsIdentityExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: GetClaimValue(IEnumerable<Claim>, String)
  nameWithType: ClaimsIdentityExtensions.GetClaimValue(IEnumerable<Claim>, String)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static string GetClaimValue(this IEnumerable<Claim> claims, string claimType)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetClaimValue(claims As IEnumerable(Of Claim), claimType As String) As String
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue*
  nameWithType.vb: ClaimsIdentityExtensions.GetClaimValue(IEnumerable(Of Claim), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: GetClaimValue(IEnumerable(Of Claim), String)
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  id: TryGetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: TryGetClaimValue(IEnumerable<Claim>, String, out String)
  nameWithType: ClaimsIdentityExtensions.TryGetClaimValue(IEnumerable<Claim>, String, out String)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, out System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static bool TryGetClaimValue(this IEnumerable<Claim> claims, string claimType, out string claimValue)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: claimValue
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetClaimValue(claims As IEnumerable(Of Claim), claimType As String, ByRef claimValue As String) As Boolean
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue*
  nameWithType.vb: ClaimsIdentityExtensions.TryGetClaimValue(IEnumerable(Of Claim), String, ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, ByRef System.String)
  name.vb: TryGetClaimValue(IEnumerable(Of Claim), String, ByRef String)
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  id: TryGetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: TryGetIntClaimValue(IEnumerable<Claim>, String, out Int32)
  nameWithType: ClaimsIdentityExtensions.TryGetIntClaimValue(IEnumerable<Claim>, String, out Int32)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, out System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static bool TryGetIntClaimValue(this IEnumerable<Claim> claims, string claimType, out int claimValue)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: claimValue
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetIntClaimValue(claims As IEnumerable(Of Claim), claimType As String, ByRef claimValue As Integer) As Boolean
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue*
  nameWithType.vb: ClaimsIdentityExtensions.TryGetIntClaimValue(IEnumerable(Of Claim), String, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, ByRef System.Int32)
  name.vb: TryGetIntClaimValue(IEnumerable(Of Claim), String, ByRef Int32)
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,``0@)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,``0@)
  id: TryGetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,``0@)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: TryGetEnumClaimValue<TEnumType>(IEnumerable<Claim>, String, out TEnumType)
  nameWithType: ClaimsIdentityExtensions.TryGetEnumClaimValue<TEnumType>(IEnumerable<Claim>, String, out TEnumType)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue<TEnumType>(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, out TEnumType)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static bool TryGetEnumClaimValue<TEnumType>(this IEnumerable<Claim> claims, string claimType, out TEnumType claimValue)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    - id: claimValue
      type: '{TEnumType}'
    typeParameters:
    - id: TEnumType
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetEnumClaimValue(Of TEnumType)(claims As IEnumerable(Of Claim), claimType As String, ByRef claimValue As TEnumType) As Boolean
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue*
  nameWithType.vb: ClaimsIdentityExtensions.TryGetEnumClaimValue(Of TEnumType)(IEnumerable(Of Claim), String, ByRef TEnumType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue(Of TEnumType)(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, ByRef TEnumType)
  name.vb: TryGetEnumClaimValue(Of TEnumType)(IEnumerable(Of Claim), String, ByRef TEnumType)
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: GetEnumClaimValue``1(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: GetEnumClaimValue<TEnumType>(IEnumerable<Claim>, String)
  nameWithType: ClaimsIdentityExtensions.GetEnumClaimValue<TEnumType>(IEnumerable<Claim>, String)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue<TEnumType>(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static TEnumType GetEnumClaimValue<TEnumType>(this IEnumerable<Claim> claims, string claimType)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    typeParameters:
    - id: TEnumType
    return:
      type: '{TEnumType}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEnumClaimValue(Of TEnumType)(claims As IEnumerable(Of Claim), claimType As String) As TEnumType
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue*
  nameWithType.vb: ClaimsIdentityExtensions.GetEnumClaimValue(Of TEnumType)(IEnumerable(Of Claim), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue(Of TEnumType)(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: GetEnumClaimValue(Of TEnumType)(IEnumerable(Of Claim), String)
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: GetIntClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: GetIntClaimValue(IEnumerable<Claim>, String)
  nameWithType: ClaimsIdentityExtensions.GetIntClaimValue(IEnumerable<Claim>, String)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static int GetIntClaimValue(this IEnumerable<Claim> claims, string claimType)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntClaimValue(claims As IEnumerable(Of Claim), claimType As String) As Integer
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue*
  nameWithType.vb: ClaimsIdentityExtensions.GetIntClaimValue(IEnumerable(Of Claim), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: GetIntClaimValue(IEnumerable(Of Claim), String)
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.ClaimsIdentityExtensions
  langs:
  - csharp
  - vb
  name: GetClaimValues(IEnumerable<Claim>, String)
  nameWithType: ClaimsIdentityExtensions.GetClaimValues(IEnumerable<Claim>, String)
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static string[] GetClaimValues(this IEnumerable<Claim> claims, string claimType)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: claimType
      type: System.String
    return:
      type: System.String[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetClaimValues(claims As IEnumerable(Of Claim), claimType As String) As String()
  overload: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues*
  nameWithType.vb: ClaimsIdentityExtensions.GetClaimValues(IEnumerable(Of Claim), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: GetClaimValues(IEnumerable(Of Claim), String)
references:
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue
  isExternal: true
  name: GetClaimValue
  nameWithType: ClaimsIdentityExtensions.GetClaimValue
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValue
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue
  isExternal: true
  name: TryGetClaimValue
  nameWithType: ClaimsIdentityExtensions.TryGetClaimValue
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetClaimValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue
  isExternal: true
  name: TryGetIntClaimValue
  nameWithType: ClaimsIdentityExtensions.TryGetIntClaimValue
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetIntClaimValue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue
  isExternal: true
  name: TryGetEnumClaimValue
  nameWithType: ClaimsIdentityExtensions.TryGetEnumClaimValue
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.TryGetEnumClaimValue
- uid: '{TEnumType}'
  commentId: '!:TEnumType'
  definition: TEnumType
  name: TEnumType
  nameWithType: TEnumType
  fullName: TEnumType
- uid: TEnumType
  name: TEnumType
  nameWithType: TEnumType
  fullName: TEnumType
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue
  isExternal: true
  name: GetEnumClaimValue
  nameWithType: ClaimsIdentityExtensions.GetEnumClaimValue
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetEnumClaimValue
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue
  isExternal: true
  name: GetIntClaimValue
  nameWithType: ClaimsIdentityExtensions.GetIntClaimValue
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetIntClaimValue
- uid: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues*
  commentId: Overload:SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues
  isExternal: true
  name: GetClaimValues
  nameWithType: ClaimsIdentityExtensions.GetClaimValues
  fullName: SuperOffice.Security.Principal.ClaimsIdentityExtensions.GetClaimValues
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
