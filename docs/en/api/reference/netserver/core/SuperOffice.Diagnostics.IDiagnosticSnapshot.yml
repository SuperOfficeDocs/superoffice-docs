### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.IDiagnosticSnapshot
  commentId: T:SuperOffice.Diagnostics.IDiagnosticSnapshot
  id: IDiagnosticSnapshot
  parent: SuperOffice.Diagnostics
  children:
  - SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists(System.String)
  langs:
  - csharp
  - vb
  name: IDiagnosticSnapshot
  nameWithType: IDiagnosticSnapshot
  fullName: SuperOffice.Diagnostics.IDiagnosticSnapshot
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public interface IDiagnosticSnapshot
    content.vb: Public Interface IDiagnosticSnapshot
  extensionMethods:
  - SuperOffice.Diagnostics.IDiagnosticSnapshot.EnumUtil.MapEnums``2
  - SuperOffice.Diagnostics.IDiagnosticSnapshot.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists(System.String)
  commentId: M:SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists(System.String)
  id: MakeWorkLists(System.String)
  parent: SuperOffice.Diagnostics.IDiagnosticSnapshot
  langs:
  - csharp
  - vb
  name: MakeWorkLists(String)
  nameWithType: IDiagnosticSnapshot.MakeWorkLists(String)
  fullName: SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: List<WorkList> MakeWorkLists(string contextIdentifier)
    parameters:
    - id: contextIdentifier
      type: System.String
    return:
      type: System.Collections.Generic.List{SuperOffice.Diagnostics.WorkList}
    content.vb: Function MakeWorkLists(contextIdentifier As String) As List(Of WorkList)
  overload: SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists*
references:
- uid: SuperOffice.Diagnostics
  commentId: N:SuperOffice.Diagnostics
  isExternal: true
  name: SuperOffice.Diagnostics
  nameWithType: SuperOffice.Diagnostics
  fullName: SuperOffice.Diagnostics
- uid: SuperOffice.Diagnostics.IDiagnosticSnapshot.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IDiagnosticSnapshot, To>()
  nameWithType: EnumUtil.MapEnums<IDiagnosticSnapshot, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.IDiagnosticSnapshot, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IDiagnosticSnapshot, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.IDiagnosticSnapshot, To)()
  name.vb: MapEnums(Of IDiagnosticSnapshot, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IDiagnosticSnapshot, To>
    nameWithType: EnumUtil.MapEnums<IDiagnosticSnapshot, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.IDiagnosticSnapshot, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IDiagnosticSnapshot, To)
    nameWithType: EnumUtil.MapEnums(Of IDiagnosticSnapshot, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.IDiagnosticSnapshot, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.IDiagnosticSnapshot.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IDiagnosticSnapshot, To>()
  nameWithType: Converters.MapEnums<IDiagnosticSnapshot, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.IDiagnosticSnapshot, To>()
  nameWithType.vb: Converters.MapEnums(Of IDiagnosticSnapshot, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.IDiagnosticSnapshot, To)()
  name.vb: MapEnums(Of IDiagnosticSnapshot, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IDiagnosticSnapshot, To>
    nameWithType: Converters.MapEnums<IDiagnosticSnapshot, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.IDiagnosticSnapshot, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IDiagnosticSnapshot, To)
    nameWithType: Converters.MapEnums(Of IDiagnosticSnapshot, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.IDiagnosticSnapshot, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists*
  commentId: Overload:SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists
  isExternal: true
  name: MakeWorkLists
  nameWithType: IDiagnosticSnapshot.MakeWorkLists
  fullName: SuperOffice.Diagnostics.IDiagnosticSnapshot.MakeWorkLists
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{SuperOffice.Diagnostics.WorkList}
  commentId: '!:System.Collections.Generic.List{SuperOffice.Diagnostics.WorkList}'
  definition: System.Collections.Generic.List`1
  name: List<WorkList>
  nameWithType: List<WorkList>
  fullName: System.Collections.Generic.List<SuperOffice.Diagnostics.WorkList>
  nameWithType.vb: List(Of WorkList)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.Diagnostics.WorkList)
  name.vb: List(Of WorkList)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Diagnostics.WorkList
    name: WorkList
    nameWithType: WorkList
    fullName: SuperOffice.Diagnostics.WorkList
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Diagnostics.WorkList
    name: WorkList
    nameWithType: WorkList
    fullName: SuperOffice.Diagnostics.WorkList
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
