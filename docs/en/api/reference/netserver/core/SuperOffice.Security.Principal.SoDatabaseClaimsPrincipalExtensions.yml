### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  commentId: T:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  id: SoDatabaseClaimsPrincipalExtensions
  parent: SuperOffice.Security.Principal
  children:
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync(System.Security.Claims.ClaimsPrincipal,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString(System.Security.Claims.ClaimsPrincipal)
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier(System.Security.Claims.ClaimsPrincipal)
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials(System.Security.Claims.ClaimsPrincipal)
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  - SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SoDatabaseClaimsPrincipalExtensions
  nameWithType: SoDatabaseClaimsPrincipalExtensions
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: 'public static class SoDatabaseClaimsPrincipalExtensions : Object'
    content.vb: >-
      Public Module SoDatabaseClaimsPrincipalExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync(System.Security.Claims.ClaimsPrincipal,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync(System.Security.Claims.ClaimsPrincipal,System.String,System.Boolean,System.Threading.CancellationToken)
  id: GetAccessTokenAsync(System.Security.Claims.ClaimsPrincipal,System.String,System.Boolean,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: GetAccessTokenAsync(ClaimsPrincipal, String, Boolean, CancellationToken)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync(ClaimsPrincipal, String, Boolean, CancellationToken)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync(System.Security.Claims.ClaimsPrincipal, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static Task<string> GetAccessTokenAsync(this ClaimsPrincipal claimsPrincipal, string applicationToken, bool includeCsSession, CancellationToken cancellationToken = null)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    - id: applicationToken
      type: System.String
    - id: includeCsSession
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAccessTokenAsync(claimsPrincipal As ClaimsPrincipal, applicationToken As String, includeCsSession As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier(System.Security.Claims.ClaimsPrincipal)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier(System.Security.Claims.ClaimsPrincipal)
  id: GetPrincipalCarrier(System.Security.Claims.ClaimsPrincipal)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: GetPrincipalCarrier(ClaimsPrincipal)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier(ClaimsPrincipal)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static SoPrincipalCarrier GetPrincipalCarrier(this ClaimsPrincipal claimsPrincipal)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    return:
      type: SuperOffice.CRM.Services.SoPrincipalCarrier
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPrincipalCarrier(claimsPrincipal As ClaimsPrincipal) As SoPrincipalCarrier
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials(System.Security.Claims.ClaimsPrincipal)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials(System.Security.Claims.ClaimsPrincipal)
  id: GetSafeCredentials(System.Security.Claims.ClaimsPrincipal)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: GetSafeCredentials(ClaimsPrincipal)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials(ClaimsPrincipal)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static SoCredentials GetSafeCredentials(this ClaimsPrincipal claimsPrincipal)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    return:
      type: SuperOffice.Security.Principal.SoCredentials
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSafeCredentials(claimsPrincipal As ClaimsPrincipal) As SoCredentials
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  id: GetLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: GetLicense(ClaimsPrincipal, String)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetLicense(ClaimsPrincipal, String)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense(System.Security.Claims.ClaimsPrincipal, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static GrantedModuleLicense GetLicense(this ClaimsPrincipal claimsPrincipal, string fullName)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    - id: fullName
      type: System.String
    return:
      type: SuperOffice.CRM.Services.GrantedModuleLicense
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetLicense(claimsPrincipal As ClaimsPrincipal, fullName As String) As GrantedModuleLicense
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  id: HasLicense(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: HasLicense(ClaimsPrincipal, String, String)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.HasLicense(ClaimsPrincipal, String, String)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static bool HasLicense(this ClaimsPrincipal claimsPrincipal, string moduleOwner, string licenseName)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    - id: moduleOwner
      type: System.String
    - id: licenseName
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasLicense(claimsPrincipal As ClaimsPrincipal, moduleOwner As String, licenseName As String) As Boolean
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString(System.Security.Claims.ClaimsPrincipal)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString(System.Security.Claims.ClaimsPrincipal)
  id: GetGrantedLicensesAsString(System.Security.Claims.ClaimsPrincipal)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: GetGrantedLicensesAsString(ClaimsPrincipal)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString(ClaimsPrincipal)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static string GetGrantedLicensesAsString(this ClaimsPrincipal claimsPrincipal)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetGrantedLicensesAsString(claimsPrincipal As ClaimsPrincipal) As String
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  commentId: M:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  id: HasLicense(System.Security.Claims.ClaimsPrincipal,System.String)
  isExtensionMethod: true
  parent: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions
  langs:
  - csharp
  - vb
  name: HasLicense(ClaimsPrincipal, String)
  nameWithType: SoDatabaseClaimsPrincipalExtensions.HasLicense(ClaimsPrincipal, String)
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense(System.Security.Claims.ClaimsPrincipal, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public static bool HasLicense(this ClaimsPrincipal claimsPrincipal, string licenseName)
    parameters:
    - id: claimsPrincipal
      type: System.Security.Claims.ClaimsPrincipal
    - id: licenseName
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasLicense(claimsPrincipal As ClaimsPrincipal, licenseName As String) As Boolean
  overload: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync*
  commentId: Overload:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync
  isExternal: true
  name: GetAccessTokenAsync
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetAccessTokenAsync
- uid: System.Security.Claims.ClaimsPrincipal
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier*
  commentId: Overload:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier
  isExternal: true
  name: GetPrincipalCarrier
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetPrincipalCarrier
- uid: SuperOffice.CRM.Services.SoPrincipalCarrier
  commentId: T:SuperOffice.CRM.Services.SoPrincipalCarrier
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: SoPrincipalCarrier
  nameWithType: SoPrincipalCarrier
  fullName: SuperOffice.CRM.Services.SoPrincipalCarrier
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials*
  commentId: Overload:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials
  isExternal: true
  name: GetSafeCredentials
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetSafeCredentials
- uid: SuperOffice.Security.Principal.SoCredentials
  commentId: T:SuperOffice.Security.Principal.SoCredentials
  parent: SuperOffice.Security.Principal
  isExternal: true
  name: SoCredentials
  nameWithType: SoCredentials
  fullName: SuperOffice.Security.Principal.SoCredentials
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense*
  commentId: Overload:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense
  isExternal: true
  name: GetLicense
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetLicense
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetLicense
- uid: SuperOffice.CRM.Services.GrantedModuleLicense
  commentId: T:SuperOffice.CRM.Services.GrantedModuleLicense
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: GrantedModuleLicense
  nameWithType: GrantedModuleLicense
  fullName: SuperOffice.CRM.Services.GrantedModuleLicense
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense*
  commentId: Overload:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense
  isExternal: true
  name: HasLicense
  nameWithType: SoDatabaseClaimsPrincipalExtensions.HasLicense
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.HasLicense
- uid: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString*
  commentId: Overload:SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString
  isExternal: true
  name: GetGrantedLicensesAsString
  nameWithType: SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString
  fullName: SuperOffice.Security.Principal.SoDatabaseClaimsPrincipalExtensions.GetGrantedLicensesAsString
