### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  id: SoDataReader
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck
  - SuperOffice.Data.SoDataReader.Close
  - SuperOffice.Data.SoDataReader.DbRowsRead
  - SuperOffice.Data.SoDataReader.Depth
  - SuperOffice.Data.SoDataReader.Dispose
  - SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck
  - SuperOffice.Data.SoDataReader.FieldCount
  - SuperOffice.Data.SoDataReader.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetBoolean(System.Int32)
  - SuperOffice.Data.SoDataReader.GetBoolean(System.String)
  - SuperOffice.Data.SoDataReader.GetByte(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetByte(System.Int32)
  - SuperOffice.Data.SoDataReader.GetByte(System.String)
  - SuperOffice.Data.SoDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.Data.SoDataReader.GetChar(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetChar(System.Int32)
  - SuperOffice.Data.SoDataReader.GetChar(System.String)
  - SuperOffice.Data.SoDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - SuperOffice.Data.SoDataReader.GetData(System.Int32)
  - SuperOffice.Data.SoDataReader.GetDataTypeName(System.Int32)
  - SuperOffice.Data.SoDataReader.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetDateTime(System.Int32)
  - SuperOffice.Data.SoDataReader.GetDateTime(System.String)
  - SuperOffice.Data.SoDataReader.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetDecimal(System.Int32)
  - SuperOffice.Data.SoDataReader.GetDecimal(System.String)
  - SuperOffice.Data.SoDataReader.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetDouble(System.Int32)
  - SuperOffice.Data.SoDataReader.GetDouble(System.String)
  - SuperOffice.Data.SoDataReader.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetEnum``1(System.Int32)
  - SuperOffice.Data.SoDataReader.GetEnum``1(System.String)
  - SuperOffice.Data.SoDataReader.GetFieldInfo(System.Int32)
  - SuperOffice.Data.SoDataReader.GetFieldInfo(System.String)
  - SuperOffice.Data.SoDataReader.GetFieldProperty(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetFieldProperty(System.Int32)
  - SuperOffice.Data.SoDataReader.GetFieldProperty(System.String)
  - SuperOffice.Data.SoDataReader.GetFieldType(System.Int32)
  - SuperOffice.Data.SoDataReader.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetFloat(System.Int32)
  - SuperOffice.Data.SoDataReader.GetFloat(System.String)
  - SuperOffice.Data.SoDataReader.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetGuid(System.Int32)
  - SuperOffice.Data.SoDataReader.GetGuid(System.String)
  - SuperOffice.Data.SoDataReader.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetInt16(System.Int32)
  - SuperOffice.Data.SoDataReader.GetInt16(System.String)
  - SuperOffice.Data.SoDataReader.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetInt32(System.Int32)
  - SuperOffice.Data.SoDataReader.GetInt32(System.String)
  - SuperOffice.Data.SoDataReader.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetInt32Array(System.Int32)
  - SuperOffice.Data.SoDataReader.GetInt32Array(System.String)
  - SuperOffice.Data.SoDataReader.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetInt64(System.Int32)
  - SuperOffice.Data.SoDataReader.GetInt64(System.String)
  - SuperOffice.Data.SoDataReader.GetKnownFields
  - SuperOffice.Data.SoDataReader.GetName(System.Int32)
  - SuperOffice.Data.SoDataReader.GetOrdinal(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetOrdinal(System.String)
  - SuperOffice.Data.SoDataReader.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.SoDataReader.GetSchemaTable
  - SuperOffice.Data.SoDataReader.GetString(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetString(System.Int32)
  - SuperOffice.Data.SoDataReader.GetString(System.String)
  - SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.Security.FieldProperty@)
  - SuperOffice.Data.SoDataReader.GetValue(System.Int32)
  - SuperOffice.Data.SoDataReader.GetValue(System.Int32,SuperOffice.CRM.Security.FieldProperty@)
  - SuperOffice.Data.SoDataReader.GetValue(System.String)
  - SuperOffice.Data.SoDataReader.GetValue(System.String,SuperOffice.CRM.Security.FieldProperty@)
  - SuperOffice.Data.SoDataReader.GetValues(System.Object[])
  - SuperOffice.Data.SoDataReader.IsAutoClose
  - SuperOffice.Data.SoDataReader.IsClosed
  - SuperOffice.Data.SoDataReader.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.IsDBNull(System.Int32)
  - SuperOffice.Data.SoDataReader.IsDBNull(System.String)
  - SuperOffice.Data.SoDataReader.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.IsSentryIgnored
  - SuperOffice.Data.SoDataReader.Item(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SoDataReader.Item(System.Int32)
  - SuperOffice.Data.SoDataReader.Item(System.String)
  - SuperOffice.Data.SoDataReader.NextResult
  - SuperOffice.Data.SoDataReader.Read
  - SuperOffice.Data.SoDataReader.Reader
  - SuperOffice.Data.SoDataReader.RecordsAffected
  - SuperOffice.Data.SoDataReader.Sentries
  - SuperOffice.Data.SoDataReader.SetPreAcceptDelegate(System.Func{SuperOffice.Data.SoDataReader,System.Boolean})
  - SuperOffice.Data.SoDataReader.System#Collections#IEnumerable#GetEnumerator
  - SuperOffice.Data.SoDataReader.ToString
  - SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Boolean@)
  - SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.DateTime@)
  - SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Double@)
  - SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int16@)
  - SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  - SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.String@)
  langs:
  - csharp
  - vb
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nImplements the IDataReader interface.\n"
  syntax:
    content: 'public sealed class SoDataReader : MarshalByRefObject, IDataReader, IDisposable, IDataRecord, ISoDataLookup, ISentryIgnorable, IEnumerable, ISoDataRecord'
    content.vb: >-
      Public NotInheritable Class SoDataReader
          Inherits MarshalByRefObject
          Implements IDataReader, IDisposable, IDataRecord, ISoDataLookup, ISentryIgnorable, IEnumerable, ISoDataRecord
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Data.IDataReader
  - System.IDisposable
  - System.Data.IDataRecord
  - SuperOffice.CRM.Security.ISoDataLookup
  - SuperOffice.CRM.Security.ISentryIgnorable
  - System.Collections.IEnumerable
  - SuperOffice.Data.ISoDataRecord
  inheritedMembers:
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SoDataReader.EnumUtil.MapEnums``2
  - SuperOffice.Data.SoDataReader.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Data.SoDataReader.SetPreAcceptDelegate(System.Func{SuperOffice.Data.SoDataReader,System.Boolean})
  commentId: M:SuperOffice.Data.SoDataReader.SetPreAcceptDelegate(System.Func{SuperOffice.Data.SoDataReader,System.Boolean})
  id: SetPreAcceptDelegate(System.Func{SuperOffice.Data.SoDataReader,System.Boolean})
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: SetPreAcceptDelegate(Func<SoDataReader, Boolean>)
  nameWithType: SoDataReader.SetPreAcceptDelegate(Func<SoDataReader, Boolean>)
  fullName: SuperOffice.Data.SoDataReader.SetPreAcceptDelegate(System.Func<SuperOffice.Data.SoDataReader, System.Boolean>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nSet a callback method, that will be called BEFORE sentry calculations are performed for a row. If the callback\nreturns false, the row is skipped and does not count towards the row total\n"
  syntax:
    content: public void SetPreAcceptDelegate(Func<SoDataReader, bool> preAcceptCallback)
    parameters:
    - id: preAcceptCallback
      type: System.Func{SuperOffice.Data.SoDataReader,System.Boolean}
    content.vb: Public Sub SetPreAcceptDelegate(preAcceptCallback As Func(Of SoDataReader, Boolean))
  overload: SuperOffice.Data.SoDataReader.SetPreAcceptDelegate*
  nameWithType.vb: SoDataReader.SetPreAcceptDelegate(Func(Of SoDataReader, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.SetPreAcceptDelegate(System.Func(Of SuperOffice.Data.SoDataReader, System.Boolean))
  name.vb: SetPreAcceptDelegate(Func(Of SoDataReader, Boolean))
- uid: SuperOffice.Data.SoDataReader.GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.SoDataReader.GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  id: GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetRelations(TableInfo, SoTable)
  nameWithType: SoDataReader.GetRelations(TableInfo, SoTable)
  fullName: SuperOffice.Data.SoDataReader.GetRelations(SuperOffice.Data.SQL.TableInfo, SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public RelationInfo[] GetRelations(TableInfo mainTable, SoTable relatedTable)
    parameters:
    - id: mainTable
      type: SuperOffice.Data.SQL.TableInfo
    - id: relatedTable
      type: SuperOffice.Data.Dictionary.SoTable
    return:
      type: SuperOffice.Data.SQL.RelationInfo[]
    content.vb: Public Function GetRelations(mainTable As TableInfo, relatedTable As SoTable) As RelationInfo()
  overload: SuperOffice.Data.SoDataReader.GetRelations*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.Close
  commentId: M:SuperOffice.Data.SoDataReader.Close
  id: Close
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: SoDataReader.Close()
  fullName: SuperOffice.Data.SoDataReader.Close()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCloses the <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> 0bject.\n"
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: SuperOffice.Data.SoDataReader.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.NextResult
  commentId: M:SuperOffice.Data.SoDataReader.NextResult
  id: NextResult
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: NextResult()
  nameWithType: SoDataReader.NextResult()
  fullName: SuperOffice.Data.SoDataReader.NextResult()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAdvances the data reader to the next result, when reading the results of batch SQL statements.\n"
  syntax:
    content: public bool NextResult()
    return:
      type: System.Boolean
      description: "\ntrue if there are more rows; otherwise, false.\n"
    content.vb: Public Function NextResult As Boolean
  overload: SuperOffice.Data.SoDataReader.NextResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.Read
  commentId: M:SuperOffice.Data.SoDataReader.Read
  id: Read
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: SoDataReader.Read()
  fullName: SuperOffice.Data.SoDataReader.Read()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReads the first/next row of data into the reader, discarding the previous row.\nThe values are accessible through the GetXxx methods on the reader object.\n<p></p>\nIf the Select query has specified a nonzero DbRowsToSkip, this skipping will either be\ndone by database (but so far only Sybase 9 has support for that), or done in a tight loop\nhere.\n"
  syntax:
    content: public bool Read()
    return:
      type: System.Boolean
      description: True if the read succeeded. If there is no more data, returns false
    content.vb: Public Function Read As Boolean
  overload: SuperOffice.Data.SoDataReader.Read*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetSchemaTable
  commentId: M:SuperOffice.Data.SoDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetSchemaTable()
  nameWithType: SoDataReader.GetSchemaTable()
  fullName: SuperOffice.Data.SoDataReader.GetSchemaTable()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> that describes the column metadata of the <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public DataTable GetSchemaTable()
    return:
      type: System.Data.DataTable
      description: "\nA <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> that describes the column metadata.\n"
    content.vb: Public Function GetSchemaTable As DataTable
  overload: SuperOffice.Data.SoDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The <xref href="System.Data.IDataReader" data-throw-if-not-resolved="false"></xref> is closed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetName(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetName(Int32)
  nameWithType: SoDataReader.GetName(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetName(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the name of the i&apos;th column.\n"
  syntax:
    content: public string GetName(int i)
    parameters:
    - id: i
      type: System.Int32
      description: 0 based index.
    return:
      type: System.String
      description: "\nThe name of the column. Usually the same as the database column name, but it\ndepends on what you aliased the column as in your select statement\n"
    content.vb: Public Function GetName(i As Integer) As String
  overload: SuperOffice.Data.SoDataReader.GetName*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: 'The index passed was outside the range of 0 through <xref href="System.Data.IDataRecord.FieldCount" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDataTypeName(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDataTypeName(Int32)
  nameWithType: SoDataReader.GetDataTypeName(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetDataTypeName(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the name of the datatype of the i&apos;th column\n"
  syntax:
    content: public string GetDataTypeName(int i)
    parameters:
    - id: i
      type: System.Int32
      description: 0-based index.
    return:
      type: System.String
      description: "\nName of the data type in the column. for example: &quot;int&quot; or &quot;varchar&quot;\n"
    content.vb: Public Function GetDataTypeName(i As Integer) As String
  overload: SuperOffice.Data.SoDataReader.GetDataTypeName*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: 'The index passed was outside the range of 0 through <xref href="System.Data.IDataRecord.FieldCount" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFieldType(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldType(Int32)
  nameWithType: SoDataReader.GetFieldType(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetFieldType(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the actual Type class for the data type\n"
  syntax:
    content: public Type GetFieldType(int i)
    parameters:
    - id: i
      type: System.Int32
      description: 0-based index.
    return:
      type: System.Type
      description: "\nThe <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> information corresponding to the type of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that would be returned from <xref href=\"System.Data.IDataRecord.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Function GetFieldType(i As Integer) As Type
  overload: SuperOffice.Data.SoDataReader.GetFieldType*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: 'The index passed was outside the range of 0 through <xref href="System.Data.IDataRecord.FieldCount" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.ToString
  commentId: M:SuperOffice.Data.SoDataReader.ToString
  id: ToString
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SoDataReader.ToString()
  fullName: SuperOffice.Data.SoDataReader.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nOverride: Return the current row of the inner reader for debugging purposes\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.Data.SoDataReader.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SoDataReader.GetValue(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  nameWithType: SoDataReader.GetValue(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetValue(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the value of the datatype.\n"
  syntax:
    content: public object GetValue(int i)
    parameters:
    - id: i
      type: System.Int32
      description: 0-based index
    return:
      type: System.Object
      description: "A generic object. What it is depends on the type of the column. \nCould be an int. Could be a string. You won&apos;t know until you check GetDataTypeName"
    content.vb: Public Function GetValue(i As Integer) As Object
  overload: SuperOffice.Data.SoDataReader.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo)
  id: GetValue(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValue(FieldInfo)
  nameWithType: SoDataReader.GetValue(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the value of the datatype.\n"
  syntax:
    content: public object GetValue(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field info object identifying the desired field
    return:
      type: System.Object
      description: "A generic object. What it is depends on the type of the column. \nCould be an int. Could be a string. You won&apos;t know until you check GetDataTypeName"
    content.vb: Public Function GetValue(fieldInfo As FieldInfo) As Object
  overload: SuperOffice.Data.SoDataReader.GetValue*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetValue(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetValue(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetValue(System.String)
  id: GetValue(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValue(String)
  nameWithType: SoDataReader.GetValue(String)
  fullName: SuperOffice.Data.SoDataReader.GetValue(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the value of the datatype.\n"
  syntax:
    content: public object GetValue(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Object
      description: "A generic object. What it is depends on the type of the column. \nCould be an int. Could be a string. You won&apos;t know until you check GetDataTypeName"
    content.vb: Public Function GetValue(name As String) As Object
  overload: SuperOffice.Data.SoDataReader.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetValue(System.Int32,SuperOffice.CRM.Security.FieldProperty@)
  commentId: M:SuperOffice.Data.SoDataReader.GetValue(System.Int32,SuperOffice.CRM.Security.FieldProperty@)
  id: GetValue(System.Int32,SuperOffice.CRM.Security.FieldProperty@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValue(Int32, out FieldProperty)
  nameWithType: SoDataReader.GetValue(Int32, out FieldProperty)
  fullName: SuperOffice.Data.SoDataReader.GetValue(System.Int32, out SuperOffice.CRM.Security.FieldProperty)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public object GetValue(int i, out FieldProperty fieldProperty)
    parameters:
    - id: i
      type: System.Int32
    - id: fieldProperty
      type: SuperOffice.CRM.Security.FieldProperty
    return:
      type: System.Object
    content.vb: Public Function GetValue(i As Integer, ByRef fieldProperty As FieldProperty) As Object
  overload: SuperOffice.Data.SoDataReader.GetValue*
  nameWithType.vb: SoDataReader.GetValue(Int32, ByRef FieldProperty)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetValue(System.Int32, ByRef SuperOffice.CRM.Security.FieldProperty)
  name.vb: GetValue(Int32, ByRef FieldProperty)
- uid: SuperOffice.Data.SoDataReader.GetValue(System.String,SuperOffice.CRM.Security.FieldProperty@)
  commentId: M:SuperOffice.Data.SoDataReader.GetValue(System.String,SuperOffice.CRM.Security.FieldProperty@)
  id: GetValue(System.String,SuperOffice.CRM.Security.FieldProperty@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValue(String, out FieldProperty)
  nameWithType: SoDataReader.GetValue(String, out FieldProperty)
  fullName: SuperOffice.Data.SoDataReader.GetValue(System.String, out SuperOffice.CRM.Security.FieldProperty)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public object GetValue(string name, out FieldProperty fieldProperty)
    parameters:
    - id: name
      type: System.String
    - id: fieldProperty
      type: SuperOffice.CRM.Security.FieldProperty
    return:
      type: System.Object
    content.vb: Public Function GetValue(name As String, ByRef fieldProperty As FieldProperty) As Object
  overload: SuperOffice.Data.SoDataReader.GetValue*
  nameWithType.vb: SoDataReader.GetValue(String, ByRef FieldProperty)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetValue(System.String, ByRef SuperOffice.CRM.Security.FieldProperty)
  name.vb: GetValue(String, ByRef FieldProperty)
- uid: SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.Security.FieldProperty@)
  commentId: M:SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.Security.FieldProperty@)
  id: GetValue(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.Security.FieldProperty@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValue(FieldInfo, out FieldProperty)
  nameWithType: SoDataReader.GetValue(FieldInfo, out FieldProperty)
  fullName: SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo, out SuperOffice.CRM.Security.FieldProperty)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public object GetValue(FieldInfo field, out FieldProperty fieldProperty)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
    - id: fieldProperty
      type: SuperOffice.CRM.Security.FieldProperty
    return:
      type: System.Object
    content.vb: Public Function GetValue(field As FieldInfo, ByRef fieldProperty As FieldProperty) As Object
  overload: SuperOffice.Data.SoDataReader.GetValue*
  nameWithType.vb: SoDataReader.GetValue(FieldInfo, ByRef FieldProperty)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetValue(SuperOffice.Data.SQL.FieldInfo, ByRef SuperOffice.CRM.Security.FieldProperty)
  name.vb: GetValue(FieldInfo, ByRef FieldProperty)
- uid: SuperOffice.Data.SoDataReader.GetFieldProperty(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldProperty(System.Int32)
  id: GetFieldProperty(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldProperty(Int32)
  nameWithType: SoDataReader.GetFieldProperty(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetFieldProperty(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public FieldProperty GetFieldProperty(int i)
    parameters:
    - id: i
      type: System.Int32
    return:
      type: SuperOffice.CRM.Security.FieldProperty
    content.vb: Public Function GetFieldProperty(i As Integer) As FieldProperty
  overload: SuperOffice.Data.SoDataReader.GetFieldProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFieldProperty(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldProperty(System.String)
  id: GetFieldProperty(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldProperty(String)
  nameWithType: SoDataReader.GetFieldProperty(String)
  fullName: SuperOffice.Data.SoDataReader.GetFieldProperty(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public FieldProperty GetFieldProperty(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: SuperOffice.CRM.Security.FieldProperty
    content.vb: Public Function GetFieldProperty(name As String) As FieldProperty
  overload: SuperOffice.Data.SoDataReader.GetFieldProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFieldProperty(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldProperty(SuperOffice.Data.SQL.FieldInfo)
  id: GetFieldProperty(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldProperty(FieldInfo)
  nameWithType: SoDataReader.GetFieldProperty(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetFieldProperty(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public FieldProperty GetFieldProperty(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: SuperOffice.CRM.Security.FieldProperty
    content.vb: Public Function GetFieldProperty(field As FieldInfo) As FieldProperty
  overload: SuperOffice.Data.SoDataReader.GetFieldProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFieldInfo(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldInfo(System.Int32)
  id: GetFieldInfo(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldInfo(Int32)
  nameWithType: SoDataReader.GetFieldInfo(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetFieldInfo(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nObtain the FieldInfo used from the given Index.\n"
  syntax:
    content: public FieldInfo GetFieldInfo(int i)
    parameters:
    - id: i
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field info from the given index.  Null is returned if there is no valid FieldInfo at the given index.
    content.vb: Public Function GetFieldInfo(i As Integer) As FieldInfo
  overload: SuperOffice.Data.SoDataReader.GetFieldInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFieldInfo(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldInfo(System.String)
  id: GetFieldInfo(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldInfo(String)
  nameWithType: SoDataReader.GetFieldInfo(String)
  fullName: SuperOffice.Data.SoDataReader.GetFieldInfo(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nObtain the FieldInfo used at the field with the given name.\n"
  syntax:
    content: public FieldInfo GetFieldInfo(string name)
    parameters:
    - id: name
      type: System.String
      description: Name, or alias, of the returned field.
    return:
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field info for the given name.  Null is returned if there is no valid FieldInfo for the field name.
    content.vb: Public Function GetFieldInfo(name As String) As FieldInfo
  overload: SuperOffice.Data.SoDataReader.GetFieldInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetValues(System.Object[])
  commentId: M:SuperOffice.Data.SoDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetValues(Object[])
  nameWithType: SoDataReader.GetValues(Object[])
  fullName: SuperOffice.Data.SoDataReader.GetValues(System.Object[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCopy all the values of the current row into the values parameter.\n"
  remarks: "\nFields hidden by sentry are nulled out in the values array.\n"
  syntax:
    content: public int GetValues(object[] values)
    parameters:
    - id: values
      type: System.Object[]
      description: Array of objects that is filled with the values in the current row.
    return:
      type: System.Int32
      description: The number of columns copied
    content.vb: Public Function GetValues(values As Object()) As Integer
  overload: SuperOffice.Data.SoDataReader.GetValues*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetValues(System.Object[])
  nameWithType.vb: SoDataReader.GetValues(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetValues(System.Object())
  name.vb: GetValues(Object())
- uid: SuperOffice.Data.SoDataReader.GetOrdinal(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetOrdinal(String)
  nameWithType: SoDataReader.GetOrdinal(String)
  fullName: SuperOffice.Data.SoDataReader.GetOrdinal(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the index of the named field, or -1; no exceptions thrown\n"
  syntax:
    content: public int GetOrdinal(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the field
    return:
      type: System.Int32
      description: A zero-based index suitable for use with GetValue(int) and the rest of the Get functions.
    content.vb: Public Function GetOrdinal(name As String) As Integer
  overload: SuperOffice.Data.SoDataReader.GetOrdinal*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetOrdinal(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetOrdinal(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetOrdinal(SuperOffice.Data.SQL.FieldInfo)
  id: GetOrdinal(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetOrdinal(FieldInfo)
  nameWithType: SoDataReader.GetOrdinal(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetOrdinal(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the index of the field represented by the field info, or -1; no exceptions thrown\n"
  syntax:
    content: public int GetOrdinal(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Information about the field.
    return:
      type: System.Int32
      description: Ordinal of the field. First field is ordinal 0. Returns -1 if the field is not found.
    content.vb: Public Function GetOrdinal(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.SoDataReader.GetOrdinal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  id: GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetEnum<E>(FieldInfo)
  nameWithType: SoDataReader.GetEnum<E>(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetEnum<E>(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet a field from an int16-compatible database value and parse it as the given enum\n"
  syntax:
    content: public E GetEnum<E>(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field specification
    typeParameters:
    - id: E
      description: The enum type to return
    return:
      type: '{E}'
      description: Enum value, or default(E) if sentry blocks reading
    content.vb: Public Function GetEnum(Of E)(field As FieldInfo) As E
  overload: SuperOffice.Data.SoDataReader.GetEnum*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  nameWithType.vb: SoDataReader.GetEnum(Of E)(FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetEnum(Of E)(SuperOffice.Data.SQL.FieldInfo)
  name.vb: GetEnum(Of E)(FieldInfo)
- uid: SuperOffice.Data.SoDataReader.GetEnum``1(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetEnum``1(System.String)
  id: GetEnum``1(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetEnum<E>(String)
  nameWithType: SoDataReader.GetEnum<E>(String)
  fullName: SuperOffice.Data.SoDataReader.GetEnum<E>(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet a field from an int16-compatible database value and parse it as the given enum\n"
  syntax:
    content: public E GetEnum<E>(string name)
    parameters:
    - id: name
      type: System.String
      description: Field specification
    typeParameters:
    - id: E
      description: The enum type to return
    return:
      type: '{E}'
      description: Enum value, or default(E) if sentry blocks reading
    content.vb: Public Function GetEnum(Of E)(name As String) As E
  overload: SuperOffice.Data.SoDataReader.GetEnum*
  nameWithType.vb: SoDataReader.GetEnum(Of E)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetEnum(Of E)(System.String)
  name.vb: GetEnum(Of E)(String)
- uid: SuperOffice.Data.SoDataReader.GetEnum``1(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetEnum``1(System.Int32)
  id: GetEnum``1(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetEnum<E>(Int32)
  nameWithType: SoDataReader.GetEnum<E>(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetEnum<E>(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet a field from an int16-compatible database value and parse it as the given enum\n"
  syntax:
    content: public E GetEnum<E>(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Field specification
    typeParameters:
    - id: E
      description: The enum type to return
    return:
      type: '{E}'
      description: Enum value, or default(E) if sentry blocks reading
    content.vb: Public Function GetEnum(Of E)(index As Integer) As E
  overload: SuperOffice.Data.SoDataReader.GetEnum*
  nameWithType.vb: SoDataReader.GetEnum(Of E)(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetEnum(Of E)(System.Int32)
  name.vb: GetEnum(Of E)(Int32)
- uid: SuperOffice.Data.SoDataReader.GetBoolean(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetBoolean(Int32)
  nameWithType: SoDataReader.GetBoolean(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetBoolean(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a bool.\n"
  remarks: "\nReturns false if the column is hidden by a sentry\n"
  syntax:
    content: public bool GetBoolean(int i)
    parameters:
    - id: i
      type: System.Int32
      description: column index
    return:
      type: System.Boolean
    content.vb: Public Function GetBoolean(i As Integer) As Boolean
  overload: SuperOffice.Data.SoDataReader.GetBoolean*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  id: GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetBoolean(FieldInfo)
  nameWithType: SoDataReader.GetBoolean(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a bool.\n"
  remarks: "\nReturns false if the column is hidden by a sentry\n"
  syntax:
    content: public bool GetBoolean(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Boolean
      description: Boolean value
    content.vb: Public Function GetBoolean(fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.SoDataReader.GetBoolean*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetBoolean(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetBoolean(System.String)
  id: GetBoolean(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetBoolean(String)
  nameWithType: SoDataReader.GetBoolean(String)
  fullName: SuperOffice.Data.SoDataReader.GetBoolean(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a bool.\n"
  remarks: "\nReturns false if the column is hidden by a sentry\n"
  syntax:
    content: public bool GetBoolean(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Boolean
      description: Boolean value
    content.vb: Public Function GetBoolean(name As String) As Boolean
  overload: SuperOffice.Data.SoDataReader.GetBoolean*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetByte(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetByte(Int32)
  nameWithType: SoDataReader.GetByte(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetByte(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a byte.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public byte GetByte(int i)
    parameters:
    - id: i
      type: System.Int32
      description: column index
    return:
      type: System.Byte
    content.vb: Public Function GetByte(i As Integer) As Byte
  overload: SuperOffice.Data.SoDataReader.GetByte*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetByte(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetByte(SuperOffice.Data.SQL.FieldInfo)
  id: GetByte(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetByte(FieldInfo)
  nameWithType: SoDataReader.GetByte(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetByte(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a byte.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public byte GetByte(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Byte
    content.vb: Public Function GetByte(fieldInfo As FieldInfo) As Byte
  overload: SuperOffice.Data.SoDataReader.GetByte*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetByte(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetByte(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetByte(System.String)
  id: GetByte(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetByte(String)
  nameWithType: SoDataReader.GetByte(String)
  fullName: SuperOffice.Data.SoDataReader.GetByte(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a byte.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public byte GetByte(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Byte
    content.vb: Public Function GetByte(name As String) As Byte
  overload: SuperOffice.Data.SoDataReader.GetByte*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)
  nameWithType: SoDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.Data.SoDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReads a stream of bytes from the specified column offset into \nthe buffer an array starting at the given buffer offset\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    - id: fieldOffset
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferoffset
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
    content.vb: Public Function GetBytes(i As Integer, fieldOffset As Long, buffer As Byte(), bufferoffset As Integer, length As Integer) As Long
  overload: SuperOffice.Data.SoDataReader.GetBytes*
  nameWithType.vb: SoDataReader.GetBytes(Int32, Int64, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)
- uid: SuperOffice.Data.SoDataReader.GetChar(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetChar(Int32)
  nameWithType: SoDataReader.GetChar(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetChar(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a single character.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public char GetChar(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Char
    content.vb: Public Function GetChar(i As Integer) As Char
  overload: SuperOffice.Data.SoDataReader.GetChar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetChar(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetChar(SuperOffice.Data.SQL.FieldInfo)
  id: GetChar(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetChar(FieldInfo)
  nameWithType: SoDataReader.GetChar(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetChar(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a single character.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public char GetChar(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Char
    content.vb: Public Function GetChar(fieldInfo As FieldInfo) As Char
  overload: SuperOffice.Data.SoDataReader.GetChar*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetChar(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetChar(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetChar(System.String)
  id: GetChar(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetChar(String)
  nameWithType: SoDataReader.GetChar(String)
  fullName: SuperOffice.Data.SoDataReader.GetChar(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a single character.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public char GetChar(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Char
    content.vb: Public Function GetChar(name As String) As Char
  overload: SuperOffice.Data.SoDataReader.GetChar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetChars(Int32, Int64, Char[], Int32, Int32)
  nameWithType: SoDataReader.GetChars(Int32, Int64, Char[], Int32, Int32)
  fullName: SuperOffice.Data.SoDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReads a stream of characters from the specified column offset into \nthe buffer as an array starting at the given buffer offset.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    - id: fieldoffset
      type: System.Int64
    - id: buffer
      type: System.Char[]
    - id: bufferoffset
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
    content.vb: Public Function GetChars(i As Integer, fieldoffset As Long, buffer As Char(), bufferoffset As Integer, length As Integer) As Long
  overload: SuperOffice.Data.SoDataReader.GetChars*
  nameWithType.vb: SoDataReader.GetChars(Int32, Int64, Char(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)
- uid: SuperOffice.Data.SoDataReader.GetGuid(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetGuid(Int32)
  nameWithType: SoDataReader.GetGuid(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetGuid(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a globally-unique identifier (GUID).\n"
  remarks: "\nReturns Guid.Empty if the column is hidden by a sentry\n"
  syntax:
    content: public Guid GetGuid(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Guid
    content.vb: Public Function GetGuid(i As Integer) As Guid
  overload: SuperOffice.Data.SoDataReader.GetGuid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  id: GetGuid(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetGuid(FieldInfo)
  nameWithType: SoDataReader.GetGuid(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a globally-unique identifier (GUID).\n"
  remarks: "\nReturns Guid.Empty if the column is hidden by a sentry\n"
  syntax:
    content: public Guid GetGuid(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Guid
    content.vb: Public Function GetGuid(fieldInfo As FieldInfo) As Guid
  overload: SuperOffice.Data.SoDataReader.GetGuid*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetGuid(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetGuid(System.String)
  id: GetGuid(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetGuid(String)
  nameWithType: SoDataReader.GetGuid(String)
  fullName: SuperOffice.Data.SoDataReader.GetGuid(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a globally-unique identifier (GUID).\n"
  remarks: "\nReturns Guid.Empty if the column is hidden by a sentry\n"
  syntax:
    content: public Guid GetGuid(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Guid
    content.vb: Public Function GetGuid(name As String) As Guid
  overload: SuperOffice.Data.SoDataReader.GetGuid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt16(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt16(Int32)
  nameWithType: SoDataReader.GetInt16(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetInt16(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 16-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public short GetInt16(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Int16
    content.vb: Public Function GetInt16(i As Integer) As Short
  overload: SuperOffice.Data.SoDataReader.GetInt16*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  id: GetInt16(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt16(FieldInfo)
  nameWithType: SoDataReader.GetInt16(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 16-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public short GetInt16(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Int16
    content.vb: Public Function GetInt16(fieldInfo As FieldInfo) As Short
  overload: SuperOffice.Data.SoDataReader.GetInt16*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt16(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt16(System.String)
  id: GetInt16(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt16(String)
  nameWithType: SoDataReader.GetInt16(String)
  fullName: SuperOffice.Data.SoDataReader.GetInt16(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 16-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public short GetInt16(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Int16
    content.vb: Public Function GetInt16(name As String) As Short
  overload: SuperOffice.Data.SoDataReader.GetInt16*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt32(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt32(Int32)
  nameWithType: SoDataReader.GetInt32(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetInt32(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public int GetInt32(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Int32
    content.vb: Public Function GetInt32(i As Integer) As Integer
  overload: SuperOffice.Data.SoDataReader.GetInt32*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetInt32(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  id: GetInt32(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt32(FieldInfo)
  nameWithType: SoDataReader.GetInt32(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public int GetInt32(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Int32
    content.vb: Public Function GetInt32(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.SoDataReader.GetInt32*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt32(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt32(System.String)
  id: GetInt32(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt32(String)
  nameWithType: SoDataReader.GetInt32(String)
  fullName: SuperOffice.Data.SoDataReader.GetInt32(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public int GetInt32(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Int32
    content.vb: Public Function GetInt32(name As String) As Integer
  overload: SuperOffice.Data.SoDataReader.GetInt32*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt32Array(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt32Array(System.Int32)
  id: GetInt32Array(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt32Array(Int32)
  nameWithType: SoDataReader.GetInt32Array(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetInt32Array(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public int[] GetInt32Array(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Int32[]
    content.vb: Public Function GetInt32Array(i As Integer) As Integer()
  overload: SuperOffice.Data.SoDataReader.GetInt32Array*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  id: GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt32Array(FieldInfo)
  nameWithType: SoDataReader.GetInt32Array(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public int[] GetInt32Array(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Int32[]
    content.vb: Public Function GetInt32Array(fieldInfo As FieldInfo) As Integer()
  overload: SuperOffice.Data.SoDataReader.GetInt32Array*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt32Array(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt32Array(System.String)
  id: GetInt32Array(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt32Array(String)
  nameWithType: SoDataReader.GetInt32Array(String)
  fullName: SuperOffice.Data.SoDataReader.GetInt32Array(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public int[] GetInt32Array(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Int32[]
    content.vb: Public Function GetInt32Array(name As String) As Integer()
  overload: SuperOffice.Data.SoDataReader.GetInt32Array*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt64(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt64(Int32)
  nameWithType: SoDataReader.GetInt64(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetInt64(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 64-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public long GetInt64(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Int64
    content.vb: Public Function GetInt64(i As Integer) As Long
  overload: SuperOffice.Data.SoDataReader.GetInt64*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  id: GetInt64(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt64(FieldInfo)
  nameWithType: SoDataReader.GetInt64(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 64-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public long GetInt64(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Int64
    content.vb: Public Function GetInt64(fieldInfo As FieldInfo) As Long
  overload: SuperOffice.Data.SoDataReader.GetInt64*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetInt64(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetInt64(System.String)
  id: GetInt64(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetInt64(String)
  nameWithType: SoDataReader.GetInt64(String)
  fullName: SuperOffice.Data.SoDataReader.GetInt64(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a 64-bit signed integer.\n"
  remarks: "\nReturns 0 if the column is hidden by a sentry\n"
  syntax:
    content: public long GetInt64(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Int64
    content.vb: Public Function GetInt64(name As String) As Long
  overload: SuperOffice.Data.SoDataReader.GetInt64*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFloat(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFloat(Int32)
  nameWithType: SoDataReader.GetFloat(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetFloat(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a single-precision floating point number.\n"
  remarks: "\nReturns NaN if the column is hidden by a sentry\n"
  syntax:
    content: public float GetFloat(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Single
    content.vb: Public Function GetFloat(i As Integer) As Single
  overload: SuperOffice.Data.SoDataReader.GetFloat*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  id: GetFloat(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFloat(FieldInfo)
  nameWithType: SoDataReader.GetFloat(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a single-precision floating point number.\n"
  remarks: "\nReturns NaN if the column is hidden by a sentry\n"
  syntax:
    content: public float GetFloat(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Single
    content.vb: Public Function GetFloat(fieldInfo As FieldInfo) As Single
  overload: SuperOffice.Data.SoDataReader.GetFloat*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFloat(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetFloat(System.String)
  id: GetFloat(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFloat(String)
  nameWithType: SoDataReader.GetFloat(String)
  fullName: SuperOffice.Data.SoDataReader.GetFloat(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a single-precision floating point number.\n"
  remarks: "\nReturns NaN if the column is hidden by a sentry\n"
  syntax:
    content: public float GetFloat(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Single
    content.vb: Public Function GetFloat(name As String) As Single
  overload: SuperOffice.Data.SoDataReader.GetFloat*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDouble(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDouble(Int32)
  nameWithType: SoDataReader.GetDouble(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetDouble(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a double-precision floating point number.\n"
  remarks: "\nReturns NaN if the column is hidden by a sentry\n"
  syntax:
    content: public double GetDouble(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Double
    content.vb: Public Function GetDouble(i As Integer) As Double
  overload: SuperOffice.Data.SoDataReader.GetDouble*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  id: GetDouble(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDouble(FieldInfo)
  nameWithType: SoDataReader.GetDouble(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a double-precision floating point number.\n"
  remarks: "\nReturns NaN if the column is hidden by a sentry\n"
  syntax:
    content: public double GetDouble(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Double
    content.vb: Public Function GetDouble(fieldInfo As FieldInfo) As Double
  overload: SuperOffice.Data.SoDataReader.GetDouble*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDouble(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetDouble(System.String)
  id: GetDouble(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDouble(String)
  nameWithType: SoDataReader.GetDouble(String)
  fullName: SuperOffice.Data.SoDataReader.GetDouble(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a double-precision floating point number.\n"
  remarks: "\nReturns NaN if the column is hidden by a sentry\n"
  syntax:
    content: public double GetDouble(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Double
    content.vb: Public Function GetDouble(name As String) As Double
  overload: SuperOffice.Data.SoDataReader.GetDouble*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetString(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetString(Int32)
  nameWithType: SoDataReader.GetString(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetString(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a string.\n"
  remarks: "\nReturns &quot;&quot; if the column is hidden by a sentry\n"
  syntax:
    content: public string GetString(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.String
    content.vb: Public Function GetString(i As Integer) As String
  overload: SuperOffice.Data.SoDataReader.GetString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetString(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetString(SuperOffice.Data.SQL.FieldInfo)
  id: GetString(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetString(FieldInfo)
  nameWithType: SoDataReader.GetString(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetString(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a string.\n"
  remarks: "\nReturns &quot;&quot; if the column is hidden by a sentry\n"
  syntax:
    content: public string GetString(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.String
    content.vb: Public Function GetString(fieldInfo As FieldInfo) As String
  overload: SuperOffice.Data.SoDataReader.GetString*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetString(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetString(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetString(System.String)
  id: GetString(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetString(String)
  nameWithType: SoDataReader.GetString(String)
  fullName: SuperOffice.Data.SoDataReader.GetString(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a string.\n"
  remarks: "\nReturns &quot;&quot; if the column is hidden by a sentry\n"
  syntax:
    content: public string GetString(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.String
    content.vb: Public Function GetString(name As String) As String
  overload: SuperOffice.Data.SoDataReader.GetString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDecimal(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDecimal(Int32)
  nameWithType: SoDataReader.GetDecimal(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetDecimal(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a decimal.\n"
  remarks: "\nReturns Zero if the column is hidden by a sentry\n"
  syntax:
    content: public decimal GetDecimal(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Decimal
    content.vb: Public Function GetDecimal(i As Integer) As Decimal
  overload: SuperOffice.Data.SoDataReader.GetDecimal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  id: GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDecimal(FieldInfo)
  nameWithType: SoDataReader.GetDecimal(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a decimal.\n"
  remarks: "\nReturns Zero if the column is hidden by a sentry\n"
  syntax:
    content: public decimal GetDecimal(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.Decimal
    content.vb: Public Function GetDecimal(fieldInfo As FieldInfo) As Decimal
  overload: SuperOffice.Data.SoDataReader.GetDecimal*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDecimal(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetDecimal(System.String)
  id: GetDecimal(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDecimal(String)
  nameWithType: SoDataReader.GetDecimal(String)
  fullName: SuperOffice.Data.SoDataReader.GetDecimal(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a decimal.\n"
  remarks: "\nReturns Zero if the column is hidden by a sentry\n"
  syntax:
    content: public decimal GetDecimal(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.Decimal
    content.vb: Public Function GetDecimal(name As String) As Decimal
  overload: SuperOffice.Data.SoDataReader.GetDecimal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDateTime(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDateTime(Int32)
  nameWithType: SoDataReader.GetDateTime(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetDateTime(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a DateTime.\n"
  remarks: "\nReturns DateTime.MinValue if the column is hidden by a sentry\n"
  syntax:
    content: public DateTime GetDateTime(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.DateTime
    content.vb: Public Function GetDateTime(i As Integer) As Date
  overload: SuperOffice.Data.SoDataReader.GetDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  id: GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDateTime(FieldInfo)
  nameWithType: SoDataReader.GetDateTime(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a DateTime.\n"
  remarks: "\nReturns DateTime.MinValue if the column is hidden by a sentry\n"
  syntax:
    content: public DateTime GetDateTime(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column identifier
    return:
      type: System.DateTime
    content.vb: Public Function GetDateTime(fieldInfo As FieldInfo) As Date
  overload: SuperOffice.Data.SoDataReader.GetDateTime*
  implements:
  - SuperOffice.Data.ISoDataRecord.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetDateTime(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.GetDateTime(System.String)
  id: GetDateTime(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetDateTime(String)
  nameWithType: SoDataReader.GetDateTime(String)
  fullName: SuperOffice.Data.SoDataReader.GetDateTime(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the value of the specified column as a DateTime.\n"
  remarks: "\nReturns DateTime.MinValue if the column is hidden by a sentry\n"
  syntax:
    content: public DateTime GetDateTime(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name; if more than one column has this name, the first matching one is used
    return:
      type: System.DateTime
    content.vb: Public Function GetDateTime(name As String) As Date
  overload: SuperOffice.Data.SoDataReader.GetDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetData(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.GetData(System.Int32)
  id: GetData(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetData(Int32)
  nameWithType: SoDataReader.GetData(Int32)
  fullName: SuperOffice.Data.SoDataReader.GetData(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns a reader to the given column - usually used to access nested tables.\n"
  remarks: "\nReturns null if the column is hidden by a sentry\n"
  syntax:
    content: public IDataReader GetData(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Column index
    return:
      type: System.Data.IDataReader
    content.vb: Public Function GetData(i As Integer) As IDataReader
  overload: SuperOffice.Data.SoDataReader.GetData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.String@)
  commentId: M:SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.String@)
  id: TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.String@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: TryGetValue(FieldInfo, ref String)
  nameWithType: SoDataReader.TryGetValue(FieldInfo, ref String)
  fullName: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ref System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAssign the value if it is not null and sentry permits it.\n"
  syntax:
    content: public bool TryGetValue(FieldInfo field, ref string value)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Returned field from the database.
    - id: value
      type: System.String
      description: Value to be assigned.
    return:
      type: System.Boolean
      description: True if the value is assigned.
    content.vb: Public Function TryGetValue(field As FieldInfo, ByRef value As String) As Boolean
  overload: SuperOffice.Data.SoDataReader.TryGetValue*
  nameWithType.vb: SoDataReader.TryGetValue(FieldInfo, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ByRef System.String)
  name.vb: TryGetValue(FieldInfo, ByRef String)
- uid: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  commentId: M:SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  id: TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: TryGetValue(FieldInfo, ref Int32)
  nameWithType: SoDataReader.TryGetValue(FieldInfo, ref Int32)
  fullName: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ref System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAssign the value if it is not null and sentry permits it.\n"
  syntax:
    content: public bool TryGetValue(FieldInfo field, ref int value)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Returned field from the database.
    - id: value
      type: System.Int32
      description: Value to be assigned.
    return:
      type: System.Boolean
      description: True if the value is assigned.
    content.vb: Public Function TryGetValue(field As FieldInfo, ByRef value As Integer) As Boolean
  overload: SuperOffice.Data.SoDataReader.TryGetValue*
  nameWithType.vb: SoDataReader.TryGetValue(FieldInfo, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ByRef System.Int32)
  name.vb: TryGetValue(FieldInfo, ByRef Int32)
- uid: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int16@)
  commentId: M:SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int16@)
  id: TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Int16@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: TryGetValue(FieldInfo, ref Int16)
  nameWithType: SoDataReader.TryGetValue(FieldInfo, ref Int16)
  fullName: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ref System.Int16)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAssign the value if it is not null and sentry permits it.\n"
  syntax:
    content: public bool TryGetValue(FieldInfo field, ref short value)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Returned field from the database.
    - id: value
      type: System.Int16
      description: Value to be assigned.
    return:
      type: System.Boolean
      description: True if the value is assigned.
    content.vb: Public Function TryGetValue(field As FieldInfo, ByRef value As Short) As Boolean
  overload: SuperOffice.Data.SoDataReader.TryGetValue*
  nameWithType.vb: SoDataReader.TryGetValue(FieldInfo, ByRef Int16)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ByRef System.Int16)
  name.vb: TryGetValue(FieldInfo, ByRef Int16)
- uid: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Double@)
  commentId: M:SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Double@)
  id: TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Double@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: TryGetValue(FieldInfo, ref Double)
  nameWithType: SoDataReader.TryGetValue(FieldInfo, ref Double)
  fullName: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ref System.Double)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAssign the value if it is not null and sentry permits it.\n"
  syntax:
    content: public bool TryGetValue(FieldInfo field, ref double value)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Returned field from the database.
    - id: value
      type: System.Double
      description: Value to be assigned.
    return:
      type: System.Boolean
      description: True if the value is assigned.
    content.vb: Public Function TryGetValue(field As FieldInfo, ByRef value As Double) As Boolean
  overload: SuperOffice.Data.SoDataReader.TryGetValue*
  nameWithType.vb: SoDataReader.TryGetValue(FieldInfo, ByRef Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ByRef System.Double)
  name.vb: TryGetValue(FieldInfo, ByRef Double)
- uid: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.DateTime@)
  commentId: M:SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.DateTime@)
  id: TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.DateTime@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: TryGetValue(FieldInfo, ref DateTime)
  nameWithType: SoDataReader.TryGetValue(FieldInfo, ref DateTime)
  fullName: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ref System.DateTime)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAssign the value if it is not null and sentry permits it.\n"
  syntax:
    content: public bool TryGetValue(FieldInfo field, ref DateTime value)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Returned field from the database.
    - id: value
      type: System.DateTime
      description: Value to be assigned.
    return:
      type: System.Boolean
      description: True if the value is assigned.
    content.vb: Public Function TryGetValue(field As FieldInfo, ByRef value As Date) As Boolean
  overload: SuperOffice.Data.SoDataReader.TryGetValue*
  nameWithType.vb: SoDataReader.TryGetValue(FieldInfo, ByRef DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ByRef System.DateTime)
  name.vb: TryGetValue(FieldInfo, ByRef DateTime)
- uid: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Boolean@)
  commentId: M:SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Boolean@)
  id: TryGetValue(SuperOffice.Data.SQL.FieldInfo,System.Boolean@)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: TryGetValue(FieldInfo, ref Boolean)
  nameWithType: SoDataReader.TryGetValue(FieldInfo, ref Boolean)
  fullName: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ref System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAssign the value if it is not null and sentry permits it.\n"
  remarks: "\nAs boolean fields are not supported in the database, it is assumed \nthat the value requested is a numerical value and true will be \nassigned to value if the database value is greater than 0.\n"
  syntax:
    content: public bool TryGetValue(FieldInfo field, ref bool value)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Returned field from the database.
    - id: value
      type: System.Boolean
      description: Value to be assigned.
    return:
      type: System.Boolean
      description: True if the value is assigned.
    content.vb: Public Function TryGetValue(field As FieldInfo, ByRef value As Boolean) As Boolean
  overload: SuperOffice.Data.SoDataReader.TryGetValue*
  nameWithType.vb: SoDataReader.TryGetValue(FieldInfo, ByRef Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoDataReader.TryGetValue(SuperOffice.Data.SQL.FieldInfo, ByRef System.Boolean)
  name.vb: TryGetValue(FieldInfo, ByRef Boolean)
- uid: SuperOffice.Data.SoDataReader.IsDBNull(System.Int32)
  commentId: M:SuperOffice.Data.SoDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsDBNull(Int32)
  nameWithType: SoDataReader.IsDBNull(Int32)
  fullName: SuperOffice.Data.SoDataReader.IsDBNull(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns TRUE if the database column contains a NULL value (i.e not 0 or empty string, but no value at all).\nNULL values are not convertible to any value. Attempting to read a NULL as an integer or string will trigger\nan exception.\n"
  remarks: "\nReturns TRUE if the column is hidden by a sentry.\n"
  syntax:
    content: public bool IsDBNull(int i)
    parameters:
    - id: i
      type: System.Int32
      description: 0-based column index.
    return:
      type: System.Boolean
      description: "\ntrue if the specified field is set to null. Otherwise, false.\n"
    content.vb: Public Function IsDBNull(i As Integer) As Boolean
  overload: SuperOffice.Data.SoDataReader.IsDBNull*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  id: IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsDBNull(FieldInfo)
  nameWithType: SoDataReader.IsDBNull(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns TRUE if the database column contains a NULL value (i.e not 0 or empty string, but no value at all).\nNULL values are not convertible to any value. Attempting to read a NULL as an integer or string will trigger\nan exception.\n"
  remarks: "\nReturns TRUE if the column is hidden by a sentry.\n"
  syntax:
    content: public bool IsDBNull(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Column definition
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified field info is DB null, otherwise, <code>false</code>.\n"
    content.vb: Public Function IsDBNull(fieldInfo As FieldInfo) As Boolean
  overload: SuperOffice.Data.SoDataReader.IsDBNull*
  implements:
  - SuperOffice.Data.ISoDataRecord.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.IsDBNull(System.String)
  commentId: M:SuperOffice.Data.SoDataReader.IsDBNull(System.String)
  id: IsDBNull(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsDBNull(String)
  nameWithType: SoDataReader.IsDBNull(String)
  fullName: SuperOffice.Data.SoDataReader.IsDBNull(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns TRUE if the database column contains a NULL value (i.e not 0 or empty string, but no value at all).\nNULL values are not convertible to any value. Attempting to read a NULL as an integer or string will trigger\nan exception.\n"
  remarks: "\nReturns TRUE if the column is hidden by a sentry.\n"
  syntax:
    content: public bool IsDBNull(string name)
    parameters:
    - id: name
      type: System.String
      description: Column name
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified name is DB null, otherwise, <code>false</code>.\n"
    content.vb: Public Function IsDBNull(name As String) As Boolean
  overload: SuperOffice.Data.SoDataReader.IsDBNull*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.Dispose
  commentId: M:SuperOffice.Data.SoDataReader.Dispose
  id: Dispose
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SoDataReader.Dispose()
  fullName: SuperOffice.Data.SoDataReader.Dispose()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SuperOffice.Data.SoDataReader.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  id: GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetFieldValue(FieldInfo)
  nameWithType: SoDataReader.GetFieldValue(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns the current value of a field -- \nused by the sentry mechanism to determine what you are allowed to see or change.\nReturns null if the reader is closed.\n"
  syntax:
    content: public object GetFieldValue(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: The field we want to know about
    return:
      type: System.Object
      description: Null if the reader is closed, or if the current row does not match the rowid parameter.
    content.vb: Public Function GetFieldValue(field As FieldInfo) As Object
  overload: SuperOffice.Data.SoDataReader.GetFieldValue*
  implements:
  - SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  id: GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetPersistedFieldValue(FieldInfo)
  nameWithType: SoDataReader.GetPersistedFieldValue(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nYou allways select the persisted value\n"
  syntax:
    content: public object GetPersistedFieldValue(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: The field we want to know about
    return:
      type: System.Object
      description: Null if the reader is closed, or if the current row does not match the rowid parameter.
    content.vb: Public Function GetPersistedFieldValue(field As FieldInfo) As Object
  overload: SuperOffice.Data.SoDataReader.GetPersistedFieldValue*
  implements:
  - SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  id: IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsPersistedFieldValueKnown(FieldInfo)
  nameWithType: SoDataReader.IsPersistedFieldValueKnown(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nYou allways select the persisted value. \n"
  syntax:
    content: public bool IsPersistedFieldValueKnown(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: The field we want to know about
    return:
      type: System.Boolean
      description: Returns true if the field is in the result set.
    content.vb: Public Function IsPersistedFieldValueKnown(field As FieldInfo) As Boolean
  overload: SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown*
  implements:
  - SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  id: IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsGhostField(FieldInfo)
  nameWithType: SoDataReader.IsGhostField(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCheck if there is actually a valid value for the given field. If not, then this field is called\na &apos;ghost&apos;. This happens if a field is part of an outer join that missed, or null for some other reason.\n"
  syntax:
    content: public bool IsGhostField(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Specification of a field
    return:
      type: System.Boolean
      description: True if the field is a &apos;ghost&apos;, i.e., if it has NO valid known value. true is also returned for nonexistent fields.
    content.vb: Public Function IsGhostField(field As FieldInfo) As Boolean
  overload: SuperOffice.Data.SoDataReader.IsGhostField*
  implements:
  - SuperOffice.CRM.Security.ISoDataLookup.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SoDataReader.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  id: GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetIndexOfField(FieldInfo)
  nameWithType: SoDataReader.GetIndexOfField(FieldInfo)
  fullName: SuperOffice.Data.SoDataReader.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the 0-based position of a given position. Returns -1 if the field is not found in the list of columns in the result set. \nIf no field matches exactly (i.e. same object), then it returns the first matching field.\n"
  remarks: "\nThe use of IsSameField is what distinguishes this from GetOrdinal. \nThis function is looser than GetOrdinal. It is used inside the sentry logic which may not have access to the original column definitions.\n"
  syntax:
    content: public int GetIndexOfField(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field to find
    return:
      type: System.Int32
      description: 0-based index of field position
    content.vb: Public Function GetIndexOfField(field As FieldInfo) As Integer
  overload: SuperOffice.Data.SoDataReader.GetIndexOfField*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.GetKnownFields
  commentId: M:SuperOffice.Data.SoDataReader.GetKnownFields
  id: GetKnownFields
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: GetKnownFields()
  nameWithType: SoDataReader.GetKnownFields()
  fullName: SuperOffice.Data.SoDataReader.GetKnownFields()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public List<FieldInfo> GetKnownFields()
    return:
      type: System.Collections.Generic.List{SuperOffice.Data.SQL.FieldInfo}
    content.vb: Public Function GetKnownFields As List(Of FieldInfo)
  overload: SuperOffice.Data.SoDataReader.GetKnownFields*
  implements:
  - SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.System#Collections#IEnumerable#GetEnumerator
  commentId: M:SuperOffice.Data.SoDataReader.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SoDataReader.IEnumerable.GetEnumerator()
  fullName: SuperOffice.Data.SoDataReader.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: SuperOffice.Data.SoDataReader.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SoDataReader.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck
  commentId: M:SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck
  id: BeginIgnoreSentryCheck
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: BeginIgnoreSentryCheck()
  nameWithType: SoDataReader.BeginIgnoreSentryCheck()
  fullName: SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nStarts the process of ignoring sentry on the object implementing the interface on the current thread.\n"
  syntax:
    content: public IgnoreSentryCheck BeginIgnoreSentryCheck()
    return:
      type: SuperOffice.CRM.Security.IgnoreSentryCheck
      description: Disposable object that calls <xref href="SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck" data-throw-if-not-resolved="false"></xref> on Dispose.
    content.vb: Public Function BeginIgnoreSentryCheck As IgnoreSentryCheck
  overload: SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck*
  implements:
  - SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck
  commentId: M:SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck
  id: EndIgnoreSentryCheck
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: EndIgnoreSentryCheck()
  nameWithType: SoDataReader.EndIgnoreSentryCheck()
  fullName: SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nEnds the process of ignoring sentry on the object implementing the interface on the current thread.\n"
  syntax:
    content: public void EndIgnoreSentryCheck()
    content.vb: Public Sub
  overload: SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if Sentry is not ignored.
  implements:
  - SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.IsAutoClose
  commentId: P:SuperOffice.Data.SoDataReader.IsAutoClose
  id: IsAutoClose
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsAutoClose
  nameWithType: SoDataReader.IsAutoClose
  fullName: SuperOffice.Data.SoDataReader.IsAutoClose
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nShall the reader be automatically closed when the last row is read (e.g. <xref href=\"SuperOffice.Data.SoDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> returning false).\n"
  syntax:
    content: public bool IsAutoClose { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAutoClose As Boolean
  overload: SuperOffice.Data.SoDataReader.IsAutoClose*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoDataReader.Sentries
  commentId: P:SuperOffice.Data.SoDataReader.Sentries
  id: Sentries
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Sentries
  nameWithType: SoDataReader.Sentries
  fullName: SuperOffice.Data.SoDataReader.Sentries
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nThe datareaders sentry-collection.\n"
  syntax:
    content: public SentryCollection Sentries { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Security.SentryCollection
      description: The sentries.
    content.vb: Public ReadOnly Property Sentries As SentryCollection
  overload: SuperOffice.Data.SoDataReader.Sentries*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.Depth
  commentId: P:SuperOffice.Data.SoDataReader.Depth
  id: Depth
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Depth
  nameWithType: SoDataReader.Depth
  fullName: SuperOffice.Data.SoDataReader.Depth
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets a value indicating the depth of nesting for the current row.\n"
  syntax:
    content: public int Depth { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Depth As Integer
  overload: SuperOffice.Data.SoDataReader.Depth*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.IsClosed
  commentId: P:SuperOffice.Data.SoDataReader.IsClosed
  id: IsClosed
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: SoDataReader.IsClosed
  fullName: SuperOffice.Data.SoDataReader.IsClosed
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nThe reader state.\nCalling Close() on the reader will cause get methods to stop working, and set this to true.\n"
  syntax:
    content: public bool IsClosed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsClosed As Boolean
  overload: SuperOffice.Data.SoDataReader.IsClosed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.RecordsAffected
  commentId: P:SuperOffice.Data.SoDataReader.RecordsAffected
  id: RecordsAffected
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: RecordsAffected
  nameWithType: SoDataReader.RecordsAffected
  fullName: SuperOffice.Data.SoDataReader.RecordsAffected
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nRecordsAffected is only applicable to batch statements\nthat include inserts/updates/deletes.\n"
  syntax:
    content: public int RecordsAffected { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property RecordsAffected As Integer
  overload: SuperOffice.Data.SoDataReader.RecordsAffected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.DbRowsRead
  commentId: P:SuperOffice.Data.SoDataReader.DbRowsRead
  id: DbRowsRead
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: DbRowsRead
  nameWithType: SoDataReader.DbRowsRead
  fullName: SuperOffice.Data.SoDataReader.DbRowsRead
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn the number of rows actually read from the database.  Note that this\nvalue may be larger than the number of rows visible to the caller, since there may\nbe a Sentry in there eating rows that should not be visible, and skipping may have been done in order to reach a certain page.\n"
  syntax:
    content: public int DbRowsRead { get; }
    parameters: []
    return:
      type: System.Int32
      description: rows read.
    content.vb: Public ReadOnly Property DbRowsRead As Integer
  overload: SuperOffice.Data.SoDataReader.DbRowsRead*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.FieldCount
  commentId: P:SuperOffice.Data.SoDataReader.FieldCount
  id: FieldCount
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: FieldCount
  nameWithType: SoDataReader.FieldCount
  fullName: SuperOffice.Data.SoDataReader.FieldCount
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the number of columns in the current row.\n"
  syntax:
    content: public int FieldCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FieldCount As Integer
  overload: SuperOffice.Data.SoDataReader.FieldCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.Item(System.Int32)
  commentId: P:SuperOffice.Data.SoDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SoDataReader.Item[Int32]
  fullName: SuperOffice.Data.SoDataReader.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn value at column position. First column = 0.\n"
  remarks: "\nIf the column is hidden by a sentry then null is returned instead of the value.\n"
  syntax:
    content: public object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Item(i As Integer) As Object
  overload: SuperOffice.Data.SoDataReader.Item*
  nameWithType.vb: SoDataReader.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SoDataReader.Item(System.Int32)
  name.vb: Item(Int32)
- uid: SuperOffice.Data.SoDataReader.Item(System.String)
  commentId: P:SuperOffice.Data.SoDataReader.Item(System.String)
  id: Item(System.String)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SoDataReader.Item[String]
  fullName: SuperOffice.Data.SoDataReader.Item[System.String]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturn value at named column.\n"
  remarks: "\nIf the column is hidden by a sentry then null is returned instead of the value.\n"
  syntax:
    content: public object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Item(name As String) As Object
  overload: SuperOffice.Data.SoDataReader.Item*
  nameWithType.vb: SoDataReader.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SoDataReader.Item(System.String)
  name.vb: Item(String)
- uid: SuperOffice.Data.SoDataReader.Item(SuperOffice.Data.SQL.FieldInfo)
  commentId: P:SuperOffice.Data.SoDataReader.Item(SuperOffice.Data.SQL.FieldInfo)
  id: Item(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Item[FieldInfo]
  nameWithType: SoDataReader.Item[FieldInfo]
  fullName: SuperOffice.Data.SoDataReader.Item[SuperOffice.Data.SQL.FieldInfo]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReturns the value of the first matching field.\nReturns NULL if no field is found.\n"
  syntax:
    content: public object this[FieldInfo fieldInfo] { get; }
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Item(fieldInfo As FieldInfo) As Object
  overload: SuperOffice.Data.SoDataReader.Item*
  nameWithType.vb: SoDataReader.Item(FieldInfo)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SoDataReader.Item(SuperOffice.Data.SQL.FieldInfo)
  name.vb: Item(FieldInfo)
- uid: SuperOffice.Data.SoDataReader.IsSentryIgnored
  commentId: P:SuperOffice.Data.SoDataReader.IsSentryIgnored
  id: IsSentryIgnored
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: IsSentryIgnored
  nameWithType: SoDataReader.IsSentryIgnored
  fullName: SuperOffice.Data.SoDataReader.IsSentryIgnored
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet value indicating whether sentry is ignored on the current object for the current thread.\n"
  syntax:
    content: public bool IsSentryIgnored { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSentryIgnored As Boolean
  overload: SuperOffice.Data.SoDataReader.IsSentryIgnored*
  implements:
  - SuperOffice.CRM.Security.ISentryIgnorable.IsSentryIgnored
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SoDataReader.Reader
  commentId: P:SuperOffice.Data.SoDataReader.Reader
  id: Reader
  parent: SuperOffice.Data.SoDataReader
  langs:
  - csharp
  - vb
  name: Reader
  nameWithType: SoDataReader.Reader
  fullName: SuperOffice.Data.SoDataReader.Reader
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public SoDataReader Reader { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SoDataReader
    content.vb: Public ReadOnly Property Reader As SoDataReader
  overload: SuperOffice.Data.SoDataReader.Reader*
  implements:
  - SuperOffice.Data.ISoDataRecord.Reader
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.Data.IDataReader
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Data.IDataRecord
  isExternal: true
  name: IDataRecord
  nameWithType: IDataRecord
  fullName: System.Data.IDataRecord
- uid: SuperOffice.CRM.Security.ISoDataLookup
  commentId: T:SuperOffice.CRM.Security.ISoDataLookup
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: ISoDataLookup
  nameWithType: ISoDataLookup
  fullName: SuperOffice.CRM.Security.ISoDataLookup
- uid: SuperOffice.CRM.Security.ISentryIgnorable
  commentId: T:SuperOffice.CRM.Security.ISentryIgnorable
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: ISentryIgnorable
  nameWithType: ISentryIgnorable
  fullName: SuperOffice.CRM.Security.ISentryIgnorable
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: SuperOffice.Data.ISoDataRecord
  commentId: T:SuperOffice.Data.ISoDataRecord
  parent: SuperOffice.Data
  isExternal: true
  name: ISoDataRecord
  nameWithType: ISoDataRecord
  fullName: SuperOffice.Data.ISoDataRecord
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.InitializeLifetimeService
  commentId: M:System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: true
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)
  spec.csharp:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoDataReader, To>()
  nameWithType: EnumUtil.MapEnums<SoDataReader, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SoDataReader, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoDataReader, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SoDataReader, To)()
  name.vb: MapEnums(Of SoDataReader, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoDataReader, To>
    nameWithType: EnumUtil.MapEnums<SoDataReader, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SoDataReader, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoDataReader, To)
    nameWithType: EnumUtil.MapEnums(Of SoDataReader, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SoDataReader, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoDataReader, To>()
  nameWithType: Converters.MapEnums<SoDataReader, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SoDataReader, To>()
  nameWithType.vb: Converters.MapEnums(Of SoDataReader, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SoDataReader, To)()
  name.vb: MapEnums(Of SoDataReader, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoDataReader, To>
    nameWithType: Converters.MapEnums<SoDataReader, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SoDataReader, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoDataReader, To)
    nameWithType: Converters.MapEnums(Of SoDataReader, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SoDataReader, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Security
  commentId: N:SuperOffice.CRM.Security
  isExternal: true
  name: SuperOffice.CRM.Security
  nameWithType: SuperOffice.CRM.Security
  fullName: SuperOffice.CRM.Security
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SoDataReader.SetPreAcceptDelegate*
  commentId: Overload:SuperOffice.Data.SoDataReader.SetPreAcceptDelegate
  isExternal: true
  name: SetPreAcceptDelegate
  nameWithType: SoDataReader.SetPreAcceptDelegate
  fullName: SuperOffice.Data.SoDataReader.SetPreAcceptDelegate
- uid: System.Func{SuperOffice.Data.SoDataReader,System.Boolean}
  commentId: T:System.Func{SuperOffice.Data.SoDataReader,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<SoDataReader, Boolean>
  nameWithType: Func<SoDataReader, Boolean>
  fullName: System.Func<SuperOffice.Data.SoDataReader, System.Boolean>
  nameWithType.vb: Func(Of SoDataReader, Boolean)
  fullName.vb: System.Func(Of SuperOffice.Data.SoDataReader, System.Boolean)
  name.vb: Func(Of SoDataReader, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SoDataReader
    name: SoDataReader
    nameWithType: SoDataReader
    fullName: SuperOffice.Data.SoDataReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SoDataReader
    name: SoDataReader
    nameWithType: SoDataReader
    fullName: SuperOffice.Data.SoDataReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetRelations*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetRelations
  isExternal: true
  name: GetRelations
  nameWithType: SoDataReader.GetRelations
  fullName: SuperOffice.Data.SoDataReader.GetRelations
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: SuperOffice.Data.SQL.RelationInfo[]
  isExternal: true
  name: RelationInfo[]
  nameWithType: RelationInfo[]
  fullName: SuperOffice.Data.SQL.RelationInfo[]
  nameWithType.vb: RelationInfo()
  fullName.vb: SuperOffice.Data.SQL.RelationInfo()
  name.vb: RelationInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.RelationInfo
    name: RelationInfo
    nameWithType: RelationInfo
    fullName: SuperOffice.Data.SQL.RelationInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.RelationInfo
    name: RelationInfo
    nameWithType: RelationInfo
    fullName: SuperOffice.Data.SQL.RelationInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: SuperOffice.Data.SoDataReader.Close*
  commentId: Overload:SuperOffice.Data.SoDataReader.Close
  isExternal: true
  name: Close
  nameWithType: SoDataReader.Close
  fullName: SuperOffice.Data.SoDataReader.Close
- uid: SuperOffice.Data.SoDataReader.NextResult*
  commentId: Overload:SuperOffice.Data.SoDataReader.NextResult
  isExternal: true
  name: NextResult
  nameWithType: SoDataReader.NextResult
  fullName: SuperOffice.Data.SoDataReader.NextResult
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SoDataReader.Read*
  commentId: Overload:SuperOffice.Data.SoDataReader.Read
  isExternal: true
  name: Read
  nameWithType: SoDataReader.Read
  fullName: SuperOffice.Data.SoDataReader.Read
- uid: SuperOffice.Data.SoDataReader.GetSchemaTable*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetSchemaTable
  isExternal: true
  name: GetSchemaTable
  nameWithType: SoDataReader.GetSchemaTable
  fullName: SuperOffice.Data.SoDataReader.GetSchemaTable
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Data.DataTable
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: SuperOffice.Data.SoDataReader.GetName*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetName
  isExternal: true
  name: GetName
  nameWithType: SoDataReader.GetName
  fullName: SuperOffice.Data.SoDataReader.GetName
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SoDataReader.GetDataTypeName*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetDataTypeName
  isExternal: true
  name: GetDataTypeName
  nameWithType: SoDataReader.GetDataTypeName
  fullName: SuperOffice.Data.SoDataReader.GetDataTypeName
- uid: SuperOffice.Data.SoDataReader.GetFieldType*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetFieldType
  isExternal: true
  name: GetFieldType
  nameWithType: SoDataReader.GetFieldType
  fullName: SuperOffice.Data.SoDataReader.GetFieldType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.ToString*
  commentId: Overload:SuperOffice.Data.SoDataReader.ToString
  isExternal: true
  name: ToString
  nameWithType: SoDataReader.ToString
  fullName: SuperOffice.Data.SoDataReader.ToString
- uid: SuperOffice.Data.SoDataReader.GetValue*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetValue
  isExternal: true
  name: GetValue
  nameWithType: SoDataReader.GetValue
  fullName: SuperOffice.Data.SoDataReader.GetValue
- uid: SuperOffice.Data.ISoDataRecord.GetValue(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetValue(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetValue(FieldInfo)
  nameWithType: ISoDataRecord.GetValue(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetValue(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetValue(SuperOffice.Data.SQL.FieldInfo)
    name: GetValue
    nameWithType: ISoDataRecord.GetValue
    fullName: SuperOffice.Data.ISoDataRecord.GetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetValue(SuperOffice.Data.SQL.FieldInfo)
    name: GetValue
    nameWithType: ISoDataRecord.GetValue
    fullName: SuperOffice.Data.ISoDataRecord.GetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.CRM.Security.FieldProperty
  commentId: T:SuperOffice.CRM.Security.FieldProperty
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: FieldProperty
  nameWithType: FieldProperty
  fullName: SuperOffice.CRM.Security.FieldProperty
- uid: SuperOffice.Data.SoDataReader.GetFieldProperty*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetFieldProperty
  isExternal: true
  name: GetFieldProperty
  nameWithType: SoDataReader.GetFieldProperty
  fullName: SuperOffice.Data.SoDataReader.GetFieldProperty
- uid: SuperOffice.Data.SoDataReader.GetFieldInfo*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetFieldInfo
  isExternal: true
  name: GetFieldInfo
  nameWithType: SoDataReader.GetFieldInfo
  fullName: SuperOffice.Data.SoDataReader.GetFieldInfo
- uid: SuperOffice.Data.SoDataReader.GetValues*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetValues
  isExternal: true
  name: GetValues
  nameWithType: SoDataReader.GetValues
  fullName: SuperOffice.Data.SoDataReader.GetValues
- uid: SuperOffice.Data.ISoDataRecord.GetValues(System.Object[])
  commentId: M:SuperOffice.Data.ISoDataRecord.GetValues(System.Object[])
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetValues(Object[])
  nameWithType: ISoDataRecord.GetValues(Object[])
  fullName: SuperOffice.Data.ISoDataRecord.GetValues(System.Object[])
  nameWithType.vb: ISoDataRecord.GetValues(Object())
  fullName.vb: SuperOffice.Data.ISoDataRecord.GetValues(System.Object())
  name.vb: GetValues(Object())
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetValues(System.Object[])
    name: GetValues
    nameWithType: ISoDataRecord.GetValues
    fullName: SuperOffice.Data.ISoDataRecord.GetValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetValues(System.Object[])
    name: GetValues
    nameWithType: ISoDataRecord.GetValues
    fullName: SuperOffice.Data.ISoDataRecord.GetValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SoDataReader.GetOrdinal*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetOrdinal
  isExternal: true
  name: GetOrdinal
  nameWithType: SoDataReader.GetOrdinal
  fullName: SuperOffice.Data.SoDataReader.GetOrdinal
- uid: SuperOffice.Data.ISoDataRecord.GetOrdinal(System.String)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetOrdinal(System.String)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetOrdinal(String)
  nameWithType: ISoDataRecord.GetOrdinal(String)
  fullName: SuperOffice.Data.ISoDataRecord.GetOrdinal(System.String)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetOrdinal(System.String)
    name: GetOrdinal
    nameWithType: ISoDataRecord.GetOrdinal
    fullName: SuperOffice.Data.ISoDataRecord.GetOrdinal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetOrdinal(System.String)
    name: GetOrdinal
    nameWithType: ISoDataRecord.GetOrdinal
    fullName: SuperOffice.Data.ISoDataRecord.GetOrdinal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetEnum*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetEnum
  isExternal: true
  name: GetEnum
  nameWithType: SoDataReader.GetEnum
  fullName: SuperOffice.Data.SoDataReader.GetEnum
- uid: SuperOffice.Data.ISoDataRecord.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetEnum<E>(FieldInfo)
  nameWithType: ISoDataRecord.GetEnum<E>(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetEnum<E>(SuperOffice.Data.SQL.FieldInfo)
  nameWithType.vb: ISoDataRecord.GetEnum(Of E)(FieldInfo)
  fullName.vb: SuperOffice.Data.ISoDataRecord.GetEnum(Of E)(SuperOffice.Data.SQL.FieldInfo)
  name.vb: GetEnum(Of E)(FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
    name: GetEnum<E>
    nameWithType: ISoDataRecord.GetEnum<E>
    fullName: SuperOffice.Data.ISoDataRecord.GetEnum<E>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetEnum``1(SuperOffice.Data.SQL.FieldInfo)
    name: GetEnum(Of E)
    nameWithType: ISoDataRecord.GetEnum(Of E)
    fullName: SuperOffice.Data.ISoDataRecord.GetEnum(Of E)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{E}'
  commentId: '!:E'
  definition: E
  name: E
  nameWithType: E
  fullName: E
- uid: E
  name: E
  nameWithType: E
  fullName: E
- uid: SuperOffice.Data.SoDataReader.GetBoolean*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetBoolean
  isExternal: true
  name: GetBoolean
  nameWithType: SoDataReader.GetBoolean
  fullName: SuperOffice.Data.SoDataReader.GetBoolean
- uid: SuperOffice.Data.ISoDataRecord.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetBoolean(FieldInfo)
  nameWithType: ISoDataRecord.GetBoolean(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
    name: GetBoolean
    nameWithType: ISoDataRecord.GetBoolean
    fullName: SuperOffice.Data.ISoDataRecord.GetBoolean
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetBoolean(SuperOffice.Data.SQL.FieldInfo)
    name: GetBoolean
    nameWithType: ISoDataRecord.GetBoolean
    fullName: SuperOffice.Data.ISoDataRecord.GetBoolean
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetByte*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetByte
  isExternal: true
  name: GetByte
  nameWithType: SoDataReader.GetByte
  fullName: SuperOffice.Data.SoDataReader.GetByte
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: SuperOffice.Data.ISoDataRecord.GetByte(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetByte(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetByte(FieldInfo)
  nameWithType: ISoDataRecord.GetByte(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetByte(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetByte(SuperOffice.Data.SQL.FieldInfo)
    name: GetByte
    nameWithType: ISoDataRecord.GetByte
    fullName: SuperOffice.Data.ISoDataRecord.GetByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetByte(SuperOffice.Data.SQL.FieldInfo)
    name: GetByte
    nameWithType: ISoDataRecord.GetByte
    fullName: SuperOffice.Data.ISoDataRecord.GetByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetBytes*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetBytes
  isExternal: true
  name: GetBytes
  nameWithType: SoDataReader.GetBytes
  fullName: SuperOffice.Data.SoDataReader.GetBytes
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SoDataReader.GetChar*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetChar
  isExternal: true
  name: GetChar
  nameWithType: SoDataReader.GetChar
  fullName: SuperOffice.Data.SoDataReader.GetChar
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: SuperOffice.Data.ISoDataRecord.GetChar(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetChar(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetChar(FieldInfo)
  nameWithType: ISoDataRecord.GetChar(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetChar(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetChar(SuperOffice.Data.SQL.FieldInfo)
    name: GetChar
    nameWithType: ISoDataRecord.GetChar
    fullName: SuperOffice.Data.ISoDataRecord.GetChar
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetChar(SuperOffice.Data.SQL.FieldInfo)
    name: GetChar
    nameWithType: ISoDataRecord.GetChar
    fullName: SuperOffice.Data.ISoDataRecord.GetChar
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetChars*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetChars
  isExternal: true
  name: GetChars
  nameWithType: SoDataReader.GetChars
  fullName: SuperOffice.Data.SoDataReader.GetChars
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SoDataReader.GetGuid*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetGuid
  isExternal: true
  name: GetGuid
  nameWithType: SoDataReader.GetGuid
  fullName: SuperOffice.Data.SoDataReader.GetGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: SuperOffice.Data.ISoDataRecord.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetGuid(FieldInfo)
  nameWithType: ISoDataRecord.GetGuid(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetGuid(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetGuid(SuperOffice.Data.SQL.FieldInfo)
    name: GetGuid
    nameWithType: ISoDataRecord.GetGuid
    fullName: SuperOffice.Data.ISoDataRecord.GetGuid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetGuid(SuperOffice.Data.SQL.FieldInfo)
    name: GetGuid
    nameWithType: ISoDataRecord.GetGuid
    fullName: SuperOffice.Data.ISoDataRecord.GetGuid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetInt16*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetInt16
  isExternal: true
  name: GetInt16
  nameWithType: SoDataReader.GetInt16
  fullName: SuperOffice.Data.SoDataReader.GetInt16
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: SuperOffice.Data.ISoDataRecord.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetInt16(FieldInfo)
  nameWithType: ISoDataRecord.GetInt16(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetInt16(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt16(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt16
    nameWithType: ISoDataRecord.GetInt16
    fullName: SuperOffice.Data.ISoDataRecord.GetInt16
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt16(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt16
    nameWithType: ISoDataRecord.GetInt16
    fullName: SuperOffice.Data.ISoDataRecord.GetInt16
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetInt32*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetInt32
  isExternal: true
  name: GetInt32
  nameWithType: SoDataReader.GetInt32
  fullName: SuperOffice.Data.SoDataReader.GetInt32
- uid: SuperOffice.Data.ISoDataRecord.GetInt32(System.Int32)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetInt32(System.Int32)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetInt32(Int32)
  nameWithType: ISoDataRecord.GetInt32(Int32)
  fullName: SuperOffice.Data.ISoDataRecord.GetInt32(System.Int32)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt32(System.Int32)
    name: GetInt32
    nameWithType: ISoDataRecord.GetInt32
    fullName: SuperOffice.Data.ISoDataRecord.GetInt32
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt32(System.Int32)
    name: GetInt32
    nameWithType: ISoDataRecord.GetInt32
    fullName: SuperOffice.Data.ISoDataRecord.GetInt32
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.ISoDataRecord.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetInt32(FieldInfo)
  nameWithType: ISoDataRecord.GetInt32(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetInt32(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt32(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt32
    nameWithType: ISoDataRecord.GetInt32
    fullName: SuperOffice.Data.ISoDataRecord.GetInt32
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt32(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt32
    nameWithType: ISoDataRecord.GetInt32
    fullName: SuperOffice.Data.ISoDataRecord.GetInt32
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetInt32Array*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetInt32Array
  isExternal: true
  name: GetInt32Array
  nameWithType: SoDataReader.GetInt32Array
  fullName: SuperOffice.Data.SoDataReader.GetInt32Array
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.ISoDataRecord.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetInt32Array(FieldInfo)
  nameWithType: ISoDataRecord.GetInt32Array(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt32Array
    nameWithType: ISoDataRecord.GetInt32Array
    fullName: SuperOffice.Data.ISoDataRecord.GetInt32Array
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt32Array(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt32Array
    nameWithType: ISoDataRecord.GetInt32Array
    fullName: SuperOffice.Data.ISoDataRecord.GetInt32Array
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetInt64*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetInt64
  isExternal: true
  name: GetInt64
  nameWithType: SoDataReader.GetInt64
  fullName: SuperOffice.Data.SoDataReader.GetInt64
- uid: SuperOffice.Data.ISoDataRecord.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetInt64(FieldInfo)
  nameWithType: ISoDataRecord.GetInt64(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetInt64(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt64(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt64
    nameWithType: ISoDataRecord.GetInt64
    fullName: SuperOffice.Data.ISoDataRecord.GetInt64
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetInt64(SuperOffice.Data.SQL.FieldInfo)
    name: GetInt64
    nameWithType: ISoDataRecord.GetInt64
    fullName: SuperOffice.Data.ISoDataRecord.GetInt64
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetFloat*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetFloat
  isExternal: true
  name: GetFloat
  nameWithType: SoDataReader.GetFloat
  fullName: SuperOffice.Data.SoDataReader.GetFloat
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: SuperOffice.Data.ISoDataRecord.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetFloat(FieldInfo)
  nameWithType: ISoDataRecord.GetFloat(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetFloat(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetFloat(SuperOffice.Data.SQL.FieldInfo)
    name: GetFloat
    nameWithType: ISoDataRecord.GetFloat
    fullName: SuperOffice.Data.ISoDataRecord.GetFloat
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetFloat(SuperOffice.Data.SQL.FieldInfo)
    name: GetFloat
    nameWithType: ISoDataRecord.GetFloat
    fullName: SuperOffice.Data.ISoDataRecord.GetFloat
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetDouble*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetDouble
  isExternal: true
  name: GetDouble
  nameWithType: SoDataReader.GetDouble
  fullName: SuperOffice.Data.SoDataReader.GetDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SuperOffice.Data.ISoDataRecord.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetDouble(FieldInfo)
  nameWithType: ISoDataRecord.GetDouble(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetDouble(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetDouble(SuperOffice.Data.SQL.FieldInfo)
    name: GetDouble
    nameWithType: ISoDataRecord.GetDouble
    fullName: SuperOffice.Data.ISoDataRecord.GetDouble
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetDouble(SuperOffice.Data.SQL.FieldInfo)
    name: GetDouble
    nameWithType: ISoDataRecord.GetDouble
    fullName: SuperOffice.Data.ISoDataRecord.GetDouble
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetString*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetString
  isExternal: true
  name: GetString
  nameWithType: SoDataReader.GetString
  fullName: SuperOffice.Data.SoDataReader.GetString
- uid: SuperOffice.Data.ISoDataRecord.GetString(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetString(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetString(FieldInfo)
  nameWithType: ISoDataRecord.GetString(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetString(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetString(SuperOffice.Data.SQL.FieldInfo)
    name: GetString
    nameWithType: ISoDataRecord.GetString
    fullName: SuperOffice.Data.ISoDataRecord.GetString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetString(SuperOffice.Data.SQL.FieldInfo)
    name: GetString
    nameWithType: ISoDataRecord.GetString
    fullName: SuperOffice.Data.ISoDataRecord.GetString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetDecimal*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetDecimal
  isExternal: true
  name: GetDecimal
  nameWithType: SoDataReader.GetDecimal
  fullName: SuperOffice.Data.SoDataReader.GetDecimal
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: SuperOffice.Data.ISoDataRecord.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetDecimal(FieldInfo)
  nameWithType: ISoDataRecord.GetDecimal(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
    name: GetDecimal
    nameWithType: ISoDataRecord.GetDecimal
    fullName: SuperOffice.Data.ISoDataRecord.GetDecimal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetDecimal(SuperOffice.Data.SQL.FieldInfo)
    name: GetDecimal
    nameWithType: ISoDataRecord.GetDecimal
    fullName: SuperOffice.Data.ISoDataRecord.GetDecimal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetDateTime*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetDateTime
  isExternal: true
  name: GetDateTime
  nameWithType: SoDataReader.GetDateTime
  fullName: SuperOffice.Data.SoDataReader.GetDateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.Data.ISoDataRecord.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: GetDateTime(FieldInfo)
  nameWithType: ISoDataRecord.GetDateTime(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
    name: GetDateTime
    nameWithType: ISoDataRecord.GetDateTime
    fullName: SuperOffice.Data.ISoDataRecord.GetDateTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.GetDateTime(SuperOffice.Data.SQL.FieldInfo)
    name: GetDateTime
    nameWithType: ISoDataRecord.GetDateTime
    fullName: SuperOffice.Data.ISoDataRecord.GetDateTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetData*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetData
  isExternal: true
  name: GetData
  nameWithType: SoDataReader.GetData
  fullName: SuperOffice.Data.SoDataReader.GetData
- uid: SuperOffice.Data.SoDataReader.TryGetValue*
  commentId: Overload:SuperOffice.Data.SoDataReader.TryGetValue
  isExternal: true
  name: TryGetValue
  nameWithType: SoDataReader.TryGetValue
  fullName: SuperOffice.Data.SoDataReader.TryGetValue
- uid: SuperOffice.Data.SoDataReader.IsDBNull*
  commentId: Overload:SuperOffice.Data.SoDataReader.IsDBNull
  isExternal: true
  name: IsDBNull
  nameWithType: SoDataReader.IsDBNull
  fullName: SuperOffice.Data.SoDataReader.IsDBNull
- uid: SuperOffice.Data.ISoDataRecord.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.ISoDataRecord.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: IsDBNull(FieldInfo)
  nameWithType: ISoDataRecord.IsDBNull(FieldInfo)
  fullName: SuperOffice.Data.ISoDataRecord.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.Data.ISoDataRecord.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
    name: IsDBNull
    nameWithType: ISoDataRecord.IsDBNull
    fullName: SuperOffice.Data.ISoDataRecord.IsDBNull
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoDataRecord.IsDBNull(SuperOffice.Data.SQL.FieldInfo)
    name: IsDBNull
    nameWithType: ISoDataRecord.IsDBNull
    fullName: SuperOffice.Data.ISoDataRecord.IsDBNull
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.Dispose*
  commentId: Overload:SuperOffice.Data.SoDataReader.Dispose
  isExternal: true
  name: Dispose
  nameWithType: SoDataReader.Dispose
  fullName: SuperOffice.Data.SoDataReader.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetFieldValue*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetFieldValue
  isExternal: true
  name: GetFieldValue
  nameWithType: SoDataReader.GetFieldValue
  fullName: SuperOffice.Data.SoDataReader.GetFieldValue
- uid: SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.Security.ISoDataLookup
  isExternal: true
  name: GetFieldValue(FieldInfo)
  nameWithType: ISoDataLookup.GetFieldValue(FieldInfo)
  fullName: SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
    name: GetFieldValue
    nameWithType: ISoDataLookup.GetFieldValue
    fullName: SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue(SuperOffice.Data.SQL.FieldInfo)
    name: GetFieldValue
    nameWithType: ISoDataLookup.GetFieldValue
    fullName: SuperOffice.CRM.Security.ISoDataLookup.GetFieldValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetPersistedFieldValue*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetPersistedFieldValue
  isExternal: true
  name: GetPersistedFieldValue
  nameWithType: SoDataReader.GetPersistedFieldValue
  fullName: SuperOffice.Data.SoDataReader.GetPersistedFieldValue
- uid: SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.Security.ISoDataLookup
  isExternal: true
  name: GetPersistedFieldValue(FieldInfo)
  nameWithType: ISoDataLookup.GetPersistedFieldValue(FieldInfo)
  fullName: SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
    name: GetPersistedFieldValue
    nameWithType: ISoDataLookup.GetPersistedFieldValue
    fullName: SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue(SuperOffice.Data.SQL.FieldInfo)
    name: GetPersistedFieldValue
    nameWithType: ISoDataLookup.GetPersistedFieldValue
    fullName: SuperOffice.CRM.Security.ISoDataLookup.GetPersistedFieldValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown*
  commentId: Overload:SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown
  isExternal: true
  name: IsPersistedFieldValueKnown
  nameWithType: SoDataReader.IsPersistedFieldValueKnown
  fullName: SuperOffice.Data.SoDataReader.IsPersistedFieldValueKnown
- uid: SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.Security.ISoDataLookup
  isExternal: true
  name: IsPersistedFieldValueKnown(FieldInfo)
  nameWithType: ISoDataLookup.IsPersistedFieldValueKnown(FieldInfo)
  fullName: SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
    name: IsPersistedFieldValueKnown
    nameWithType: ISoDataLookup.IsPersistedFieldValueKnown
    fullName: SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown(SuperOffice.Data.SQL.FieldInfo)
    name: IsPersistedFieldValueKnown
    nameWithType: ISoDataLookup.IsPersistedFieldValueKnown
    fullName: SuperOffice.CRM.Security.ISoDataLookup.IsPersistedFieldValueKnown
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.IsGhostField*
  commentId: Overload:SuperOffice.Data.SoDataReader.IsGhostField
  isExternal: true
  name: IsGhostField
  nameWithType: SoDataReader.IsGhostField
  fullName: SuperOffice.Data.SoDataReader.IsGhostField
- uid: SuperOffice.CRM.Security.ISoDataLookup.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.Security.ISoDataLookup.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.Security.ISoDataLookup
  isExternal: true
  name: IsGhostField(FieldInfo)
  nameWithType: ISoDataLookup.IsGhostField(FieldInfo)
  fullName: SuperOffice.CRM.Security.ISoDataLookup.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
    name: IsGhostField
    nameWithType: ISoDataLookup.IsGhostField
    fullName: SuperOffice.CRM.Security.ISoDataLookup.IsGhostField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.IsGhostField(SuperOffice.Data.SQL.FieldInfo)
    name: IsGhostField
    nameWithType: ISoDataLookup.IsGhostField
    fullName: SuperOffice.CRM.Security.ISoDataLookup.IsGhostField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoDataReader.GetIndexOfField*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetIndexOfField
  isExternal: true
  name: GetIndexOfField
  nameWithType: SoDataReader.GetIndexOfField
  fullName: SuperOffice.Data.SoDataReader.GetIndexOfField
- uid: SuperOffice.Data.SoDataReader.GetKnownFields*
  commentId: Overload:SuperOffice.Data.SoDataReader.GetKnownFields
  isExternal: true
  name: GetKnownFields
  nameWithType: SoDataReader.GetKnownFields
  fullName: SuperOffice.Data.SoDataReader.GetKnownFields
- uid: SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
  commentId: M:SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
  parent: SuperOffice.CRM.Security.ISoDataLookup
  isExternal: true
  name: GetKnownFields()
  nameWithType: ISoDataLookup.GetKnownFields()
  fullName: SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields()
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
    name: GetKnownFields
    nameWithType: ISoDataLookup.GetKnownFields
    fullName: SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
    name: GetKnownFields
    nameWithType: ISoDataLookup.GetKnownFields
    fullName: SuperOffice.CRM.Security.ISoDataLookup.GetKnownFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SuperOffice.Data.SQL.FieldInfo}
  commentId: T:System.Collections.Generic.List{SuperOffice.Data.SQL.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FieldInfo>
  nameWithType: List<FieldInfo>
  fullName: System.Collections.Generic.List<SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: List(Of FieldInfo)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.Data.SQL.FieldInfo)
  name.vb: List(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.Data.SoDataReader.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:SuperOffice.Data.SoDataReader.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: SoDataReader.IEnumerable.GetEnumerator
  fullName: SuperOffice.Data.SoDataReader.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SoDataReader.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck*
  commentId: Overload:SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck
  isExternal: true
  name: BeginIgnoreSentryCheck
  nameWithType: SoDataReader.BeginIgnoreSentryCheck
  fullName: SuperOffice.Data.SoDataReader.BeginIgnoreSentryCheck
- uid: SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
  commentId: M:SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
  parent: SuperOffice.CRM.Security.ISentryIgnorable
  isExternal: true
  name: BeginIgnoreSentryCheck()
  nameWithType: ISentryIgnorable.BeginIgnoreSentryCheck()
  fullName: SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck()
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
    name: BeginIgnoreSentryCheck
    nameWithType: ISentryIgnorable.BeginIgnoreSentryCheck
    fullName: SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
    name: BeginIgnoreSentryCheck
    nameWithType: ISentryIgnorable.BeginIgnoreSentryCheck
    fullName: SuperOffice.CRM.Security.ISentryIgnorable.BeginIgnoreSentryCheck
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.IgnoreSentryCheck
  commentId: T:SuperOffice.CRM.Security.IgnoreSentryCheck
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: IgnoreSentryCheck
  nameWithType: IgnoreSentryCheck
  fullName: SuperOffice.CRM.Security.IgnoreSentryCheck
- uid: SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck*
  commentId: Overload:SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck
  isExternal: true
  name: EndIgnoreSentryCheck
  nameWithType: SoDataReader.EndIgnoreSentryCheck
  fullName: SuperOffice.Data.SoDataReader.EndIgnoreSentryCheck
- uid: SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
  commentId: M:SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
  parent: SuperOffice.CRM.Security.ISentryIgnorable
  isExternal: true
  name: EndIgnoreSentryCheck()
  nameWithType: ISentryIgnorable.EndIgnoreSentryCheck()
  fullName: SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck()
  spec.csharp:
  - uid: SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
    name: EndIgnoreSentryCheck
    nameWithType: ISentryIgnorable.EndIgnoreSentryCheck
    fullName: SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
    name: EndIgnoreSentryCheck
    nameWithType: ISentryIgnorable.EndIgnoreSentryCheck
    fullName: SuperOffice.CRM.Security.ISentryIgnorable.EndIgnoreSentryCheck
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
- uid: SuperOffice.Data.SoDataReader.IsAutoClose*
  commentId: Overload:SuperOffice.Data.SoDataReader.IsAutoClose
  isExternal: true
  name: IsAutoClose
  nameWithType: SoDataReader.IsAutoClose
  fullName: SuperOffice.Data.SoDataReader.IsAutoClose
- uid: SuperOffice.Data.SoDataReader.Sentries*
  commentId: Overload:SuperOffice.Data.SoDataReader.Sentries
  isExternal: true
  name: Sentries
  nameWithType: SoDataReader.Sentries
  fullName: SuperOffice.Data.SoDataReader.Sentries
- uid: SuperOffice.CRM.Security.SentryCollection
  commentId: T:SuperOffice.CRM.Security.SentryCollection
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: SentryCollection
  nameWithType: SentryCollection
  fullName: SuperOffice.CRM.Security.SentryCollection
- uid: SuperOffice.Data.SoDataReader.Depth*
  commentId: Overload:SuperOffice.Data.SoDataReader.Depth
  isExternal: true
  name: Depth
  nameWithType: SoDataReader.Depth
  fullName: SuperOffice.Data.SoDataReader.Depth
- uid: SuperOffice.Data.SoDataReader.IsClosed*
  commentId: Overload:SuperOffice.Data.SoDataReader.IsClosed
  isExternal: true
  name: IsClosed
  nameWithType: SoDataReader.IsClosed
  fullName: SuperOffice.Data.SoDataReader.IsClosed
- uid: SuperOffice.Data.SoDataReader.RecordsAffected*
  commentId: Overload:SuperOffice.Data.SoDataReader.RecordsAffected
  isExternal: true
  name: RecordsAffected
  nameWithType: SoDataReader.RecordsAffected
  fullName: SuperOffice.Data.SoDataReader.RecordsAffected
- uid: SuperOffice.Data.SoDataReader.DbRowsRead*
  commentId: Overload:SuperOffice.Data.SoDataReader.DbRowsRead
  isExternal: true
  name: DbRowsRead
  nameWithType: SoDataReader.DbRowsRead
  fullName: SuperOffice.Data.SoDataReader.DbRowsRead
- uid: SuperOffice.Data.SoDataReader.FieldCount*
  commentId: Overload:SuperOffice.Data.SoDataReader.FieldCount
  isExternal: true
  name: FieldCount
  nameWithType: SoDataReader.FieldCount
  fullName: SuperOffice.Data.SoDataReader.FieldCount
- uid: SuperOffice.Data.SoDataReader.Item*
  commentId: Overload:SuperOffice.Data.SoDataReader.Item
  isExternal: true
  name: Item
  nameWithType: SoDataReader.Item
  fullName: SuperOffice.Data.SoDataReader.Item
- uid: SuperOffice.Data.SoDataReader.IsSentryIgnored*
  commentId: Overload:SuperOffice.Data.SoDataReader.IsSentryIgnored
  isExternal: true
  name: IsSentryIgnored
  nameWithType: SoDataReader.IsSentryIgnored
  fullName: SuperOffice.Data.SoDataReader.IsSentryIgnored
- uid: SuperOffice.CRM.Security.ISentryIgnorable.IsSentryIgnored
  commentId: P:SuperOffice.CRM.Security.ISentryIgnorable.IsSentryIgnored
  parent: SuperOffice.CRM.Security.ISentryIgnorable
  isExternal: true
  name: IsSentryIgnored
  nameWithType: ISentryIgnorable.IsSentryIgnored
  fullName: SuperOffice.CRM.Security.ISentryIgnorable.IsSentryIgnored
- uid: SuperOffice.Data.SoDataReader.Reader*
  commentId: Overload:SuperOffice.Data.SoDataReader.Reader
  isExternal: true
  name: Reader
  nameWithType: SoDataReader.Reader
  fullName: SuperOffice.Data.SoDataReader.Reader
- uid: SuperOffice.Data.ISoDataRecord.Reader
  commentId: P:SuperOffice.Data.ISoDataRecord.Reader
  parent: SuperOffice.Data.ISoDataRecord
  isExternal: true
  name: Reader
  nameWithType: ISoDataRecord.Reader
  fullName: SuperOffice.Data.ISoDataRecord.Reader
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
