### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Notification.NotificationEventHandler
  commentId: T:SuperOffice.CRM.Notification.NotificationEventHandler
  id: NotificationEventHandler
  parent: SuperOffice.CRM.Notification
  children:
  - SuperOffice.CRM.Notification.NotificationEventHandler.#ctor
  - SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)
  - SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)
  - SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself
  - SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions
  langs:
  - csharp
  - vb
  name: NotificationEventHandler
  nameWithType: NotificationEventHandler
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  summary: "\nContains logic for handling notifications to users when certain events happen\nExample of events: A new ticket has been created, you have been invited to a meeting\n"
  syntax:
    content: 'public class NotificationEventHandler : Object'
    content.vb: >-
      Public Class NotificationEventHandler
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.CRM.Notification.NotificationEventHandler.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Notification.NotificationEventHandler.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Notification.NotificationEventHandler)
  - SuperOffice.CRM.Notification.NotificationEventHandler.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.CRM.Notification.NotificationEventHandler.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.#ctor
  commentId: M:SuperOffice.CRM.Notification.NotificationEventHandler.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: NotificationEventHandler()
  nameWithType: NotificationEventHandler.NotificationEventHandler()
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationEventHandler()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  syntax:
    content: public NotificationEventHandler()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: NotificationHandledAsync(NotificationEventType, Int32, Int32, CancellationToken)
  nameWithType: NotificationEventHandler.NotificationHandledAsync(NotificationEventType, Int32, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  syntax:
    content: public Task NotificationHandledAsync(NotificationEventType eventType, int recordId, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: eventType
      type: SuperOffice.Data.NotificationEventType
    - id: recordId
      type: System.Int32
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function NotificationHandledAsync(eventType As NotificationEventType, recordId As Integer, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)
  id: NotificationHandledAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: NotificationHandledAsync(NotificationEventType, Int32, IEnumerable<Int32>, CancellationToken)
  nameWithType: NotificationEventHandler.NotificationHandledAsync(NotificationEventType, Int32, IEnumerable<Int32>, CancellationToken)
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.Collections.Generic.IEnumerable<System.Int32>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  syntax:
    content: public Task NotificationHandledAsync(NotificationEventType eventType, int recordId, IEnumerable<int> associateIds = null, CancellationToken cancellationToken = null)
    parameters:
    - id: eventType
      type: SuperOffice.Data.NotificationEventType
    - id: recordId
      type: System.Int32
    - id: associateIds
      type: System.Collections.Generic.IEnumerable{System.Int32}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function NotificationHandledAsync(eventType As NotificationEventType, recordId As Integer, associateIds As IEnumerable(Of Integer) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync*
  nameWithType.vb: NotificationEventHandler.NotificationHandledAsync(NotificationEventType, Int32, IEnumerable(Of Int32), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.Collections.Generic.IEnumerable(Of System.Int32), System.Threading.CancellationToken)
  name.vb: NotificationHandledAsync(NotificationEventType, Int32, IEnumerable(Of Int32), CancellationToken)
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Threading.CancellationToken)
  id: NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: NotifyUsersAsync(NotificationEventType, Int32, CancellationToken)
  nameWithType: NotificationEventHandler.NotifyUsersAsync(NotificationEventType, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  summary: "\nUsed for events where all meta data can be retrieved from the recordId\n"
  syntax:
    content: public Task NotifyUsersAsync(NotificationEventType eventType, int recordId, CancellationToken cancellationToken = null)
    parameters:
    - id: eventType
      type: SuperOffice.Data.NotificationEventType
    - id: recordId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function NotifyUsersAsync(eventType As NotificationEventType, recordId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: NotifyUserAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: NotifyUserAsync(NotificationEventType, Int32, DateTime, Int32, CancellationToken)
  nameWithType: NotificationEventHandler.NotifyUserAsync(NotificationEventType, Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  summary: "\nNotify a single user about a specific event\n"
  syntax:
    content: public Task NotifyUserAsync(NotificationEventType eventType, int recordId, DateTime eventDate, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: eventType
      type: SuperOffice.Data.NotificationEventType
    - id: recordId
      type: System.Int32
    - id: eventDate
      type: System.DateTime
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function NotifyUserAsync(eventType As NotificationEventType, recordId As Integer, eventDate As DateTime, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)
  id: NotifyUsersAsync(SuperOffice.Data.NotificationEventType,System.Int32,System.DateTime,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: NotifyUsersAsync(NotificationEventType, Int32, DateTime, IEnumerable<Int32>, Dictionary<String, String>, CancellationToken)
  nameWithType: NotificationEventHandler.NotifyUsersAsync(NotificationEventType, Int32, DateTime, IEnumerable<Int32>, Dictionary<String, String>, CancellationToken)
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.DateTime, System.Collections.Generic.IEnumerable<System.Int32>, System.Collections.Generic.Dictionary<System.String, System.String>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  syntax:
    content: public Task NotifyUsersAsync(NotificationEventType eventType, int recordId, DateTime eventDate, IEnumerable<int> associateIds = null, Dictionary<string, string> extraValues = null, CancellationToken cancellationToken = null)
    parameters:
    - id: eventType
      type: SuperOffice.Data.NotificationEventType
    - id: recordId
      type: System.Int32
    - id: eventDate
      type: System.DateTime
    - id: associateIds
      type: System.Collections.Generic.IEnumerable{System.Int32}
    - id: extraValues
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function NotifyUsersAsync(eventType As NotificationEventType, recordId As Integer, eventDate As DateTime, associateIds As IEnumerable(Of Integer) = Nothing, extraValues As Dictionary(Of String, String) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync*
  nameWithType.vb: NotificationEventHandler.NotifyUsersAsync(NotificationEventType, Int32, DateTime, IEnumerable(Of Int32), Dictionary(Of String, String), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync(SuperOffice.Data.NotificationEventType, System.Int32, System.DateTime, System.Collections.Generic.IEnumerable(Of System.Int32), System.Collections.Generic.Dictionary(Of System.String, System.String), System.Threading.CancellationToken)
  name.vb: NotifyUsersAsync(NotificationEventType, Int32, DateTime, IEnumerable(Of Int32), Dictionary(Of String, String), CancellationToken)
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself
  commentId: P:SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself
  id: SendMessageToOurself
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: SendMessageToOurself
  nameWithType: NotificationEventHandler.SendMessageToOurself
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  syntax:
    content: public bool SendMessageToOurself { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property SendMessageToOurself As Boolean
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions
  commentId: P:SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions
  id: SilentExceptions
  parent: SuperOffice.CRM.Notification.NotificationEventHandler
  langs:
  - csharp
  - vb
  name: SilentExceptions
  nameWithType: NotificationEventHandler.SilentExceptions
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Notification
  syntax:
    content: public bool SilentExceptions { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property SilentExceptions As Boolean
  overload: SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Notification
  commentId: N:SuperOffice.CRM.Notification
  isExternal: true
  name: SuperOffice.CRM.Notification
  nameWithType: SuperOffice.CRM.Notification
  fullName: SuperOffice.CRM.Notification
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<NotificationEventHandler, To>()
  nameWithType: EnumUtil.MapEnums<NotificationEventHandler, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Notification.NotificationEventHandler, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of NotificationEventHandler, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Notification.NotificationEventHandler, To)()
  name.vb: MapEnums(Of NotificationEventHandler, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<NotificationEventHandler, To>
    nameWithType: EnumUtil.MapEnums<NotificationEventHandler, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Notification.NotificationEventHandler, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of NotificationEventHandler, To)
    nameWithType: EnumUtil.MapEnums(Of NotificationEventHandler, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Notification.NotificationEventHandler, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Notification.NotificationEventHandler)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<NotificationEventHandler>(NotificationEventHandler)
  nameWithType: ObjectExtensions.AssignByReflection<NotificationEventHandler>(NotificationEventHandler)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Notification.NotificationEventHandler>(SuperOffice.CRM.Notification.NotificationEventHandler)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of NotificationEventHandler)(NotificationEventHandler)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Notification.NotificationEventHandler)(SuperOffice.CRM.Notification.NotificationEventHandler)
  name.vb: AssignByReflection(Of NotificationEventHandler)(NotificationEventHandler)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<NotificationEventHandler>
    nameWithType: ObjectExtensions.AssignByReflection<NotificationEventHandler>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Notification.NotificationEventHandler>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Notification.NotificationEventHandler
    name: NotificationEventHandler
    nameWithType: NotificationEventHandler
    fullName: SuperOffice.CRM.Notification.NotificationEventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of NotificationEventHandler)
    nameWithType: ObjectExtensions.AssignByReflection(Of NotificationEventHandler)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Notification.NotificationEventHandler)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Notification.NotificationEventHandler
    name: NotificationEventHandler
    nameWithType: NotificationEventHandler
    fullName: SuperOffice.CRM.Notification.NotificationEventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<NotificationEventHandler>()
  nameWithType: ObjectExtensions.GraphCopy<NotificationEventHandler>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Notification.NotificationEventHandler>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of NotificationEventHandler)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Notification.NotificationEventHandler)()
  name.vb: GraphCopy(Of NotificationEventHandler)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<NotificationEventHandler>
    nameWithType: ObjectExtensions.GraphCopy<NotificationEventHandler>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Notification.NotificationEventHandler>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of NotificationEventHandler)
    nameWithType: ObjectExtensions.GraphCopy(Of NotificationEventHandler)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Notification.NotificationEventHandler)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<NotificationEventHandler, To>()
  nameWithType: Converters.MapEnums<NotificationEventHandler, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Notification.NotificationEventHandler, To>()
  nameWithType.vb: Converters.MapEnums(Of NotificationEventHandler, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Notification.NotificationEventHandler, To)()
  name.vb: MapEnums(Of NotificationEventHandler, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<NotificationEventHandler, To>
    nameWithType: Converters.MapEnums<NotificationEventHandler, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Notification.NotificationEventHandler, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of NotificationEventHandler, To)
    nameWithType: Converters.MapEnums(Of NotificationEventHandler, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Notification.NotificationEventHandler, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.#ctor*
  commentId: Overload:SuperOffice.CRM.Notification.NotificationEventHandler.#ctor
  isExternal: true
  name: NotificationEventHandler
  nameWithType: NotificationEventHandler.NotificationEventHandler
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationEventHandler
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync*
  commentId: Overload:SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync
  isExternal: true
  name: NotificationHandledAsync
  nameWithType: NotificationEventHandler.NotificationHandledAsync
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotificationHandledAsync
- uid: SuperOffice.Data.NotificationEventType
  commentId: T:SuperOffice.Data.NotificationEventType
  parent: SuperOffice.Data
  isExternal: true
  name: NotificationEventType
  nameWithType: NotificationEventType
  fullName: SuperOffice.Data.NotificationEventType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Int32}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: IEnumerable(Of Int32)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync*
  commentId: Overload:SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync
  isExternal: true
  name: NotifyUsersAsync
  nameWithType: NotificationEventHandler.NotifyUsersAsync
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUsersAsync
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync*
  commentId: Overload:SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync
  isExternal: true
  name: NotifyUserAsync
  nameWithType: NotificationEventHandler.NotifyUserAsync
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.NotifyUserAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.String}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself*
  commentId: Overload:SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself
  isExternal: true
  name: SendMessageToOurself
  nameWithType: NotificationEventHandler.SendMessageToOurself
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.SendMessageToOurself
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions*
  commentId: Overload:SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions
  isExternal: true
  name: SilentExceptions
  nameWithType: NotificationEventHandler.SilentExceptions
  fullName: SuperOffice.CRM.Notification.NotificationEventHandler.SilentExceptions
