### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.PrivateSelect
  commentId: T:SuperOffice.Data.SQL.PrivateSelect
  id: PrivateSelect
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.PrivateSelect.#ctor
  - SuperOffice.Data.SQL.PrivateSelect._isDistinct
  - SuperOffice.Data.SQL.PrivateSelect.Clone
  - SuperOffice.Data.SQL.PrivateSelect.CloneSelect
  - SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy
  - SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder
  - SuperOffice.Data.SQL.PrivateSelect.ForceRecompile
  - SuperOffice.Data.SQL.PrivateSelect.GetCachingHash
  - SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables
  - SuperOffice.Data.SQL.PrivateSelect.GetTableInfos
  - SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy
  - SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy
  - SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction
  - SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy
  - SuperOffice.Data.SQL.PrivateSelect.InnerRestriction
  - SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields
  - SuperOffice.Data.SQL.PrivateSelect.IsDistinct
  - SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.PrivateSelect.SqlType
  - SuperOffice.Data.SQL.PrivateSelect.ToString
  - SuperOffice.Data.SQL.PrivateSelect.ValidateJoin
  langs:
  - csharp
  - vb
  name: PrivateSelect
  nameWithType: PrivateSelect
  fullName: SuperOffice.Data.SQL.PrivateSelect
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe PrivateSelect class\n"
  syntax:
    content: 'public abstract class PrivateSelect : SqlCommand, ICloneable'
    content.vb: >-
      Public MustInherit Class PrivateSelect
          Inherits SqlCommand
          Implements ICloneable
  inheritance:
  - System.Object
  - SuperOffice.Data.SQL.SqlCommand
  derivedClasses:
  - SuperOffice.CRM.Lists.ListSelect
  - SuperOffice.CRM.Rows.IdxBase
  - SuperOffice.Data.SQL.Select
  implements:
  - System.ICloneable
  inheritedMembers:
  - SuperOffice.Data.SQL.SqlCommand.Origin
  - SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo})
  - SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
  - SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
  - SuperOffice.Data.SQL.SqlCommand.GetInserts
  - SuperOffice.Data.SQL.SqlCommand.GetUpdates
  - SuperOffice.Data.SQL.SqlCommand.GetDeletes
  - SuperOffice.Data.SQL.SqlCommand.GetSelect
  - SuperOffice.Data.SQL.SqlCommand.AutoSentryIgnoredTables
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SQL.PrivateSelect.EnumUtil.MapEnums``2
  - SuperOffice.Data.SQL.SqlCommand.SuperOffice.Data.QueryExectionExtensions.ExecuteReader(System.Boolean)
  - SuperOffice.Data.SQL.SqlCommand.SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1
  - SuperOffice.Data.SQL.SqlCommand.SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
  - SuperOffice.Data.SQL.PrivateSelect.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.Data.SQL.PrivateSelect._isDistinct
  commentId: F:SuperOffice.Data.SQL.PrivateSelect._isDistinct
  id: _isDistinct
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: _isDistinct
  nameWithType: PrivateSelect._isDistinct
  fullName: SuperOffice.Data.SQL.PrivateSelect._isDistinct
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe Distinct flag.\n"
  syntax:
    content: protected bool _isDistinct
    return:
      type: System.Boolean
    content.vb: Protected _isDistinct As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.SQL.PrivateSelect.GetTableInfos
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetTableInfos
  id: GetTableInfos
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetTableInfos()
  nameWithType: PrivateSelect.GetTableInfos()
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetTableInfos()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet a list of all tableinfos referenced by a query, in either the return fields or joins. NOTE: Tables ONLY PRESENT IN RESTRICTION will not be returned\n"
  syntax:
    content: public override TableInfo[] GetTableInfos()
    return:
      type: SuperOffice.Data.SQL.TableInfo[]
    content.vb: Public Overrides Function GetTableInfos As TableInfo()
  overridden: SuperOffice.Data.SQL.SqlCommand.GetTableInfos
  overload: SuperOffice.Data.SQL.PrivateSelect.GetTableInfos*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo)
  id: GetRelations(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetRelations(TableInfo)
  nameWithType: PrivateSelect.GetRelations(TableInfo)
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet all relations that a given table is involved in.\n"
  syntax:
    content: public RelationInfo[] GetRelations(TableInfo table)
    parameters:
    - id: table
      type: SuperOffice.Data.SQL.TableInfo
      description: Table to get relations for.
    return:
      type: SuperOffice.Data.SQL.RelationInfo[]
      description: All relations that the table is involved in.
    content.vb: Public Function GetRelations(table As TableInfo) As RelationInfo()
  overload: SuperOffice.Data.SQL.PrivateSelect.GetRelations*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  id: GetRelations(SuperOffice.Data.SQL.TableInfo,SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetRelations(TableInfo, SoTable)
  nameWithType: PrivateSelect.GetRelations(TableInfo, SoTable)
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetRelations(SuperOffice.Data.SQL.TableInfo, SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet all relations between a given pair of tables, where the first table is a tableinfo,\nand the second table is any table matching an SoTable definition\n"
  syntax:
    content: public RelationInfo[] GetRelations(TableInfo mainTable, SoTable relatedTable)
    parameters:
    - id: mainTable
      type: SuperOffice.Data.SQL.TableInfo
    - id: relatedTable
      type: SuperOffice.Data.Dictionary.SoTable
    return:
      type: SuperOffice.Data.SQL.RelationInfo[]
    content.vb: Public Function GetRelations(mainTable As TableInfo, relatedTable As SoTable) As RelationInfo()
  overload: SuperOffice.Data.SQL.PrivateSelect.GetRelations*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined(SuperOffice.Data.SQL.TableInfo)
  id: IsTableOuterJoined(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: IsTableOuterJoined(TableInfo)
  nameWithType: PrivateSelect.IsTableOuterJoined(TableInfo)
  fullName: SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nDetermine if the given table is the &apos;outer&apos; party in at least one\nleft outer or right outer join (inner joins by definition do not count here)\n"
  syntax:
    content: public bool IsTableOuterJoined(TableInfo table)
    parameters:
    - id: table
      type: SuperOffice.Data.SQL.TableInfo
    return:
      type: System.Boolean
    content.vb: Public Function IsTableOuterJoined(table As TableInfo) As Boolean
  overload: SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy
  id: GetTablesInOrderBy
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetTablesInOrderBy()
  nameWithType: PrivateSelect.GetTablesInOrderBy()
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet the TableInfos involved in orderby fields\n"
  syntax:
    content: public TableInfo[] GetTablesInOrderBy()
    return:
      type: SuperOffice.Data.SQL.TableInfo[]
    content.vb: Public Function GetTablesInOrderBy As TableInfo()
  overload: SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable(SuperOffice.Data.SQL.TableInfo)
  id: GetTablesLeadingToTable(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetTablesLeadingToTable(TableInfo)
  nameWithType: PrivateSelect.GetTablesLeadingToTable(TableInfo)
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet the tables needed for access to the target table; that is, if the target table is on the right\nside of some join, recursively get the table on the left side until the leftmost table is reached\n"
  syntax:
    content: public TableInfo[] GetTablesLeadingToTable(TableInfo target)
    parameters:
    - id: target
      type: SuperOffice.Data.SQL.TableInfo
    return:
      type: SuperOffice.Data.SQL.TableInfo[]
      description: Tables leading to the desired table, in arbitrary order; the target table is included in the result
    content.vb: Public Function GetTablesLeadingToTable(target As TableInfo) As TableInfo()
  overload: SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.ValidateJoin
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.ValidateJoin
  id: ValidateJoin
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: ValidateJoin()
  nameWithType: PrivateSelect.ValidateJoin()
  fullName: SuperOffice.Data.SQL.PrivateSelect.ValidateJoin()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nValidateJoin parses the join part of a sql (if there is any) and makes sure that everything is correct.\nWe validate using 4 rules:\n\nA) The left-hand side of the first join will be the from-table.\nB) If the from-table is used in the other joins, it will always live on the left-hand side. \nIf it does not, we throw an exception.\nC) If the from-table isn&apos;t used in the other joins, the right-hand side will always be used \nin the from-part, the INNER JOIN CRM5.project T3... part. If it has been used in a right-hand side before, \nwe throw an exception since we then will get the same tablealias twice. \nD) The table on the left-hand side of the join also needs to exist in the right-hand\nside table. If it does not live in the right-hand side table that means that the table is unknown to the \nsql (it hasn&apos;t been used in a from part yet ( the CRM5.project T3... part ).\n"
  syntax:
    content: public void ValidateJoin()
    content.vb: Public Sub ValidateJoin
  overload: SuperOffice.Data.SQL.PrivateSelect.ValidateJoin*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.Clone
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.Clone
  id: Clone
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: PrivateSelect.Clone()
  fullName: SuperOffice.Data.SQL.PrivateSelect.Clone()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public object Clone()
    return:
      type: System.Object
    content.vb: Public Function Clone As Object
  overload: SuperOffice.Data.SQL.PrivateSelect.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.CloneSelect
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.CloneSelect
  id: CloneSelect
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: CloneSelect()
  nameWithType: PrivateSelect.CloneSelect()
  fullName: SuperOffice.Data.SQL.PrivateSelect.CloneSelect()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThis partial implementation of Clone handles queries that are of SqlType\nSelect. You&apos;ll get back an Select object.\n"
  remarks: "\nThis implementation is based on the fact that HDB index classes inherit the PrivateSelect\ninterface, without implementing it by actually BEING a Select.\nSimultaneously, we would like to treat them as the basic Select command\n(in cases where that is relevant).\n<p></p>\nThis method will therefore create a new Select query, populate it\nwith relevant data from itself, and return it. \n<p></p>\nShouldn&apos;t this be ICloneable? Well - it&apos;s not a perfect clone. The main tree is copied, but the parameter values in the tree are shared.\nThis shouldn&apos;t cause a problem since the parameter nodes are pretty close to value objects. This avoids problems with table aliasing.\n"
  syntax:
    content: public Select CloneSelect()
    return:
      type: SuperOffice.Data.SQL.Select
      description: Select object
    content.vb: 'Public Function CloneSelect As '
  overload: SuperOffice.Data.SQL.PrivateSelect.CloneSelect*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: "\nYou will get an exception if you pass in something that is not a select query type.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.ToString
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.ToString
  id: ToString
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PrivateSelect.ToString()
  fullName: SuperOffice.Data.SQL.PrivateSelect.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nString output.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: SELECT ... FROM ... WHERE ...
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.Data.SQL.PrivateSelect.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SQL.PrivateSelect.GetCachingHash
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetCachingHash
  id: GetCachingHash
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetCachingHash()
  nameWithType: PrivateSelect.GetCachingHash()
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetCachingHash()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nCreate a hash of the query and current identity, that can be used to identify cached query results\n"
  syntax:
    content: public string GetCachingHash()
    return:
      type: System.String
    content.vb: Public Function GetCachingHash As String
  overload: SuperOffice.Data.SQL.PrivateSelect.GetCachingHash*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables
  id: GetRestrictionTables
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: GetRestrictionTables()
  nameWithType: PrivateSelect.GetRestrictionTables()
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet an array of TableInfo objects that correspond to the fields being used in the current Restriction.\nThis list does NOT include restrictions that are part of a JOIN clause, only those that are part of\nthe Restriction.\n"
  syntax:
    content: public TableInfo[] GetRestrictionTables()
    return:
      type: SuperOffice.Data.SQL.TableInfo[]
    content.vb: Public Function GetRestrictionTables As TableInfo()
  overload: SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy
  id: CreateOrderBy
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: CreateOrderBy()
  nameWithType: PrivateSelect.CreateOrderBy()
  fullName: SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nCreate a new instance of the OrderBy class.\n"
  syntax:
    content: protected static OrderBy CreateOrderBy()
    return:
      type: SuperOffice.Data.SQL.OrderBy
      description: New instance of the OrderBy class.
    content.vb: Protected Shared Function CreateOrderBy As OrderBy
  overload: SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: SuperOffice.Data.SQL.PrivateSelect.#ctor
  commentId: M:SuperOffice.Data.SQL.PrivateSelect.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: PrivateSelect()
  nameWithType: PrivateSelect.PrivateSelect()
  fullName: SuperOffice.Data.SQL.PrivateSelect.PrivateSelect()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: protected PrivateSelect()
    content.vb: Protected Sub New
  overload: SuperOffice.Data.SQL.PrivateSelect.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerRestriction
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.InnerRestriction
  id: InnerRestriction
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: InnerRestriction
  nameWithType: PrivateSelect.InnerRestriction
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerRestriction
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nSubclasses must implement this method to allow the \n<xref href=\"SuperOffice.Data.Dialect\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"SuperOffice.Data.SQL.Restriction\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  syntax:
    content: protected abstract Restriction InnerRestriction { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.Restriction
    content.vb: Protected MustOverride ReadOnly Property InnerRestriction As Restriction
  overload: SuperOffice.Data.SQL.PrivateSelect.InnerRestriction*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields
  id: InnerReturnFields
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: InnerReturnFields
  nameWithType: PrivateSelect.InnerReturnFields
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nSubclasses must implement this method to allow the \n<xref href=\"SuperOffice.Data.Dialect\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"SuperOffice.Data.SQL.FieldInfoCollection\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  syntax:
    content: protected abstract ReturnFieldsCollection InnerReturnFields { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.ReturnFieldsCollection
    content.vb: Protected MustOverride ReadOnly Property InnerReturnFields As ReturnFieldsCollection
  overload: SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy
  id: InnerOrderBy
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: InnerOrderBy
  nameWithType: PrivateSelect.InnerOrderBy
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe Order By clause\n"
  syntax:
    content: protected abstract OrderBy InnerOrderBy { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.OrderBy
    content.vb: Protected MustOverride ReadOnly Property InnerOrderBy As OrderBy
  overload: SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: SuperOffice.Data.SQL.PrivateSelect.IsDistinct
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.IsDistinct
  id: IsDistinct
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: IsDistinct
  nameWithType: PrivateSelect.IsDistinct
  fullName: SuperOffice.Data.SQL.PrivateSelect.IsDistinct
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nFlag indicating that the Select-command is DISTINCT.\n"
  syntax:
    content: public virtual bool IsDistinct { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property IsDistinct As Boolean
  overload: SuperOffice.Data.SQL.PrivateSelect.IsDistinct*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.SQL.PrivateSelect.ForceRecompile
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.ForceRecompile
  id: ForceRecompile
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: ForceRecompile
  nameWithType: PrivateSelect.ForceRecompile
  fullName: SuperOffice.Data.SQL.PrivateSelect.ForceRecompile
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nIf true, then options will be added to the generated SQL to prevent re-use of\nsaved execution plans. Use if you <strong>know</strong> that your query suffers from bad\nresponse times as a result of execution plans being reused on parameters with wildly\nvarying selectivity. This is <strong>quite seldom</strong> the case!\n"
  syntax:
    content: public bool ForceRecompile { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ForceRecompile As Boolean
  overload: SuperOffice.Data.SQL.PrivateSelect.ForceRecompile*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder
  id: ForceJoinOrder
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: ForceJoinOrder
  nameWithType: PrivateSelect.ForceJoinOrder
  fullName: SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nIf true, then options will be added to the generated SQL to preserv join order.\nUse if you <strong>know</strong> that your query suffers from bad\nresponse times as a result of bad execution plans and your join order is sound.\n"
  syntax:
    content: public bool ForceJoinOrder { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ForceJoinOrder As Boolean
  overload: SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy
  id: InnerGroupBy
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: InnerGroupBy
  nameWithType: PrivateSelect.InnerGroupBy
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe Group By clause\n"
  syntax:
    content: protected abstract GroupBy InnerGroupBy { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.GroupBy
    content.vb: Protected MustOverride ReadOnly Property InnerGroupBy As GroupBy
  overload: SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction
  id: InnerJoinRestriction
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: InnerJoinRestriction
  nameWithType: PrivateSelect.InnerJoinRestriction
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nSubclasses must implement this method to allow the \n<xref href=\"SuperOffice.Data.Dialect\" data-throw-if-not-resolved=\"false\"></xref> to get the JoinRestriction part of the select-statement.\n"
  syntax:
    content: protected abstract JoinRestriction InnerJoinRestriction { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.JoinRestriction
    content.vb: Protected MustOverride ReadOnly Property InnerJoinRestriction As JoinRestriction
  overload: SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: SuperOffice.Data.SQL.PrivateSelect.SqlType
  commentId: P:SuperOffice.Data.SQL.PrivateSelect.SqlType
  id: SqlType
  parent: SuperOffice.Data.SQL.PrivateSelect
  langs:
  - csharp
  - vb
  name: SqlType
  nameWithType: PrivateSelect.SqlType
  fullName: SuperOffice.Data.SQL.PrivateSelect.SqlType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nsqlType\n"
  syntax:
    content: public override SqlType SqlType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.SqlType
    content.vb: Public Overrides ReadOnly Property SqlType As SqlType
  overridden: SuperOffice.Data.SQL.SqlCommand.SqlType
  overload: SuperOffice.Data.SQL.PrivateSelect.SqlType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.SQL.SqlCommand
  commentId: T:SuperOffice.Data.SQL.SqlCommand
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: SuperOffice.Data.SQL.SqlCommand
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: SuperOffice.Data.SQL.SqlCommand.Origin
  commentId: F:SuperOffice.Data.SQL.SqlCommand.Origin
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: Origin
  nameWithType: SqlCommand.Origin
  fullName: SuperOffice.Data.SQL.SqlCommand.Origin
- uid: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: AddIgnoreAutoSentryTableInfo(TableInfo)
  nameWithType: SqlCommand.AddIgnoreAutoSentryTableInfo(TableInfo)
  fullName: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
    name: AddIgnoreAutoSentryTableInfo
    nameWithType: SqlCommand.AddIgnoreAutoSentryTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
    name: AddIgnoreAutoSentryTableInfo
    nameWithType: SqlCommand.AddIgnoreAutoSentryTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo})
  commentId: M:SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo})
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: AddIgnoreAutoSentryTableInfo(IEnumerable<TableInfo>)
  nameWithType: SqlCommand.AddIgnoreAutoSentryTableInfo(IEnumerable<TableInfo>)
  fullName: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.TableInfo>)
  nameWithType.vb: SqlCommand.AddIgnoreAutoSentryTableInfo(IEnumerable(Of TableInfo))
  fullName.vb: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.TableInfo))
  name.vb: AddIgnoreAutoSentryTableInfo(IEnumerable(Of TableInfo))
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo})
    name: AddIgnoreAutoSentryTableInfo
    nameWithType: SqlCommand.AddIgnoreAutoSentryTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo})
    name: AddIgnoreAutoSentryTableInfo
    nameWithType: SqlCommand.AddIgnoreAutoSentryTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.AddIgnoreAutoSentryTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: RemoveIgnoreAutoSentryTableInfo(TableInfo)
  nameWithType: SqlCommand.RemoveIgnoreAutoSentryTableInfo(TableInfo)
  fullName: SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
    name: RemoveIgnoreAutoSentryTableInfo
    nameWithType: SqlCommand.RemoveIgnoreAutoSentryTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo(SuperOffice.Data.SQL.TableInfo)
    name: RemoveIgnoreAutoSentryTableInfo
    nameWithType: SqlCommand.RemoveIgnoreAutoSentryTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.RemoveIgnoreAutoSentryTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
  commentId: M:SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: ClearIgnoreAutoSentryTableInfos()
  nameWithType: SqlCommand.ClearIgnoreAutoSentryTableInfos()
  fullName: SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
    name: ClearIgnoreAutoSentryTableInfos
    nameWithType: SqlCommand.ClearIgnoreAutoSentryTableInfos
    fullName: SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
    name: ClearIgnoreAutoSentryTableInfos
    nameWithType: SqlCommand.ClearIgnoreAutoSentryTableInfos
    fullName: SuperOffice.Data.SQL.SqlCommand.ClearIgnoreAutoSentryTableInfos
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: IsAutoSentryIgnoredOnTableInfo(TableInfo)
  nameWithType: SqlCommand.IsAutoSentryIgnoredOnTableInfo(TableInfo)
  fullName: SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo(SuperOffice.Data.SQL.TableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo(SuperOffice.Data.SQL.TableInfo)
    name: IsAutoSentryIgnoredOnTableInfo
    nameWithType: SqlCommand.IsAutoSentryIgnoredOnTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo(SuperOffice.Data.SQL.TableInfo)
    name: IsAutoSentryIgnoredOnTableInfo
    nameWithType: SqlCommand.IsAutoSentryIgnoredOnTableInfo
    fullName: SuperOffice.Data.SQL.SqlCommand.IsAutoSentryIgnoredOnTableInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
  commentId: M:SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: GetPrivateSaves()
  nameWithType: SqlCommand.GetPrivateSaves()
  fullName: SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
    name: GetPrivateSaves
    nameWithType: SqlCommand.GetPrivateSaves
    fullName: SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
    name: GetPrivateSaves
    nameWithType: SqlCommand.GetPrivateSaves
    fullName: SuperOffice.Data.SQL.SqlCommand.GetPrivateSaves
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.GetInserts
  commentId: M:SuperOffice.Data.SQL.SqlCommand.GetInserts
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: GetInserts()
  nameWithType: SqlCommand.GetInserts()
  fullName: SuperOffice.Data.SQL.SqlCommand.GetInserts()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetInserts
    name: GetInserts
    nameWithType: SqlCommand.GetInserts
    fullName: SuperOffice.Data.SQL.SqlCommand.GetInserts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetInserts
    name: GetInserts
    nameWithType: SqlCommand.GetInserts
    fullName: SuperOffice.Data.SQL.SqlCommand.GetInserts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.GetUpdates
  commentId: M:SuperOffice.Data.SQL.SqlCommand.GetUpdates
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: GetUpdates()
  nameWithType: SqlCommand.GetUpdates()
  fullName: SuperOffice.Data.SQL.SqlCommand.GetUpdates()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetUpdates
    name: GetUpdates
    nameWithType: SqlCommand.GetUpdates
    fullName: SuperOffice.Data.SQL.SqlCommand.GetUpdates
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetUpdates
    name: GetUpdates
    nameWithType: SqlCommand.GetUpdates
    fullName: SuperOffice.Data.SQL.SqlCommand.GetUpdates
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.GetDeletes
  commentId: M:SuperOffice.Data.SQL.SqlCommand.GetDeletes
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: GetDeletes()
  nameWithType: SqlCommand.GetDeletes()
  fullName: SuperOffice.Data.SQL.SqlCommand.GetDeletes()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetDeletes
    name: GetDeletes
    nameWithType: SqlCommand.GetDeletes
    fullName: SuperOffice.Data.SQL.SqlCommand.GetDeletes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetDeletes
    name: GetDeletes
    nameWithType: SqlCommand.GetDeletes
    fullName: SuperOffice.Data.SQL.SqlCommand.GetDeletes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.GetSelect
  commentId: M:SuperOffice.Data.SQL.SqlCommand.GetSelect
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: GetSelect()
  nameWithType: SqlCommand.GetSelect()
  fullName: SuperOffice.Data.SQL.SqlCommand.GetSelect()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetSelect
    name: GetSelect
    nameWithType: SqlCommand.GetSelect
    fullName: SuperOffice.Data.SQL.SqlCommand.GetSelect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetSelect
    name: GetSelect
    nameWithType: SqlCommand.GetSelect
    fullName: SuperOffice.Data.SQL.SqlCommand.GetSelect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.AutoSentryIgnoredTables
  commentId: P:SuperOffice.Data.SQL.SqlCommand.AutoSentryIgnoredTables
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: AutoSentryIgnoredTables
  nameWithType: SqlCommand.AutoSentryIgnoredTables
  fullName: SuperOffice.Data.SQL.SqlCommand.AutoSentryIgnoredTables
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.PrivateSelect.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<PrivateSelect, To>()
  nameWithType: EnumUtil.MapEnums<PrivateSelect, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.PrivateSelect, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of PrivateSelect, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.PrivateSelect, To)()
  name.vb: MapEnums(Of PrivateSelect, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<PrivateSelect, To>
    nameWithType: EnumUtil.MapEnums<PrivateSelect, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.PrivateSelect, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of PrivateSelect, To)
    nameWithType: EnumUtil.MapEnums(Of PrivateSelect, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.PrivateSelect, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.SuperOffice.Data.QueryExectionExtensions.ExecuteReader(System.Boolean)
  commentId: M:SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand,System.Boolean)
  parent: SuperOffice.Data.QueryExectionExtensions
  definition: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand,System.Boolean)
  name: ExecuteReader(Boolean)
  nameWithType: QueryExectionExtensions.ExecuteReader(Boolean)
  fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(System.Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(System.Boolean)
    name: ExecuteReader
    nameWithType: QueryExectionExtensions.ExecuteReader
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteReader
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(System.Boolean)
    name: ExecuteReader
    nameWithType: QueryExectionExtensions.ExecuteReader
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteReader
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1
  commentId: M:SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1(SuperOffice.Data.SQL.SqlCommand)
  parent: SuperOffice.Data.QueryExectionExtensions
  definition: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1(SuperOffice.Data.SQL.SqlCommand)
  name: ExecuteScalar<T>()
  nameWithType: QueryExectionExtensions.ExecuteScalar<T>()
  fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar<T>()
  nameWithType.vb: QueryExectionExtensions.ExecuteScalar(Of T)()
  fullName.vb: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar(Of T)()
  name.vb: ExecuteScalar(Of T)()
  spec.csharp:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1
    name: ExecuteScalar<T>
    nameWithType: QueryExectionExtensions.ExecuteScalar<T>
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1
    name: ExecuteScalar(Of T)
    nameWithType: QueryExectionExtensions.ExecuteScalar(Of T)
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand.SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
  commentId: M:SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
  parent: SuperOffice.Data.QueryExectionExtensions
  definition: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
  name: ExecuteNonQuery()
  nameWithType: QueryExectionExtensions.ExecuteNonQuery()
  fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery()
  spec.csharp:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
    name: ExecuteNonQuery
    nameWithType: QueryExectionExtensions.ExecuteNonQuery
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
    name: ExecuteNonQuery
    nameWithType: QueryExectionExtensions.ExecuteNonQuery
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.PrivateSelect.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<PrivateSelect, To>()
  nameWithType: Converters.MapEnums<PrivateSelect, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.PrivateSelect, To>()
  nameWithType.vb: Converters.MapEnums(Of PrivateSelect, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.PrivateSelect, To)()
  name.vb: MapEnums(Of PrivateSelect, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<PrivateSelect, To>
    nameWithType: Converters.MapEnums<PrivateSelect, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.PrivateSelect, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of PrivateSelect, To)
    nameWithType: Converters.MapEnums(Of PrivateSelect, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.PrivateSelect, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand,System.Boolean)
  commentId: M:SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand,System.Boolean)
  isExternal: true
  name: ExecuteReader(SqlCommand, Boolean)
  nameWithType: QueryExectionExtensions.ExecuteReader(SqlCommand, Boolean)
  fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand,System.Boolean)
    name: ExecuteReader
    nameWithType: QueryExectionExtensions.ExecuteReader
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteReader
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.SqlCommand
    name: SqlCommand
    nameWithType: SqlCommand
    fullName: SuperOffice.Data.SQL.SqlCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteReader(SuperOffice.Data.SQL.SqlCommand,System.Boolean)
    name: ExecuteReader
    nameWithType: QueryExectionExtensions.ExecuteReader
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteReader
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.SqlCommand
    name: SqlCommand
    nameWithType: SqlCommand
    fullName: SuperOffice.Data.SQL.SqlCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.QueryExectionExtensions
  commentId: T:SuperOffice.Data.QueryExectionExtensions
  parent: SuperOffice.Data
  isExternal: true
  name: QueryExectionExtensions
  nameWithType: QueryExectionExtensions
  fullName: SuperOffice.Data.QueryExectionExtensions
- uid: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1(SuperOffice.Data.SQL.SqlCommand)
  commentId: M:SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1(SuperOffice.Data.SQL.SqlCommand)
  isExternal: true
  name: ExecuteScalar<T>(SqlCommand)
  nameWithType: QueryExectionExtensions.ExecuteScalar<T>(SqlCommand)
  fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar<T>(SuperOffice.Data.SQL.SqlCommand)
  nameWithType.vb: QueryExectionExtensions.ExecuteScalar(Of T)(SqlCommand)
  fullName.vb: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar(Of T)(SuperOffice.Data.SQL.SqlCommand)
  name.vb: ExecuteScalar(Of T)(SqlCommand)
  spec.csharp:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1(SuperOffice.Data.SQL.SqlCommand)
    name: ExecuteScalar<T>
    nameWithType: QueryExectionExtensions.ExecuteScalar<T>
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.SqlCommand
    name: SqlCommand
    nameWithType: SqlCommand
    fullName: SuperOffice.Data.SQL.SqlCommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar``1(SuperOffice.Data.SQL.SqlCommand)
    name: ExecuteScalar(Of T)
    nameWithType: QueryExectionExtensions.ExecuteScalar(Of T)
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteScalar(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.SqlCommand
    name: SqlCommand
    nameWithType: SqlCommand
    fullName: SuperOffice.Data.SQL.SqlCommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
  commentId: M:SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
  isExternal: true
  name: ExecuteNonQuery(SqlCommand)
  nameWithType: QueryExectionExtensions.ExecuteNonQuery(SqlCommand)
  fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
  spec.csharp:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
    name: ExecuteNonQuery
    nameWithType: QueryExectionExtensions.ExecuteNonQuery
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.SqlCommand
    name: SqlCommand
    nameWithType: SqlCommand
    fullName: SuperOffice.Data.SQL.SqlCommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery(SuperOffice.Data.SQL.SqlCommand)
    name: ExecuteNonQuery
    nameWithType: QueryExectionExtensions.ExecuteNonQuery
    fullName: SuperOffice.Data.QueryExectionExtensions.ExecuteNonQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.SqlCommand
    name: SqlCommand
    nameWithType: SqlCommand
    fullName: SuperOffice.Data.SQL.SqlCommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL.SqlCommand.GetTableInfos
  commentId: M:SuperOffice.Data.SQL.SqlCommand.GetTableInfos
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: GetTableInfos()
  nameWithType: SqlCommand.GetTableInfos()
  fullName: SuperOffice.Data.SQL.SqlCommand.GetTableInfos()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetTableInfos
    name: GetTableInfos
    nameWithType: SqlCommand.GetTableInfos
    fullName: SuperOffice.Data.SQL.SqlCommand.GetTableInfos
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.SqlCommand.GetTableInfos
    name: GetTableInfos
    nameWithType: SqlCommand.GetTableInfos
    fullName: SuperOffice.Data.SQL.SqlCommand.GetTableInfos
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.PrivateSelect.GetTableInfos*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.GetTableInfos
  isExternal: true
  name: GetTableInfos
  nameWithType: PrivateSelect.GetTableInfos
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetTableInfos
- uid: SuperOffice.Data.SQL.TableInfo[]
  isExternal: true
  name: TableInfo[]
  nameWithType: TableInfo[]
  fullName: SuperOffice.Data.SQL.TableInfo[]
  nameWithType.vb: TableInfo()
  fullName.vb: SuperOffice.Data.SQL.TableInfo()
  name.vb: TableInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.PrivateSelect.GetRelations*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.GetRelations
  isExternal: true
  name: GetRelations
  nameWithType: PrivateSelect.GetRelations
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetRelations
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL.RelationInfo[]
  isExternal: true
  name: RelationInfo[]
  nameWithType: RelationInfo[]
  fullName: SuperOffice.Data.SQL.RelationInfo[]
  nameWithType.vb: RelationInfo()
  fullName.vb: SuperOffice.Data.SQL.RelationInfo()
  name.vb: RelationInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.RelationInfo
    name: RelationInfo
    nameWithType: RelationInfo
    fullName: SuperOffice.Data.SQL.RelationInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.RelationInfo
    name: RelationInfo
    nameWithType: RelationInfo
    fullName: SuperOffice.Data.SQL.RelationInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined
  isExternal: true
  name: IsTableOuterJoined
  nameWithType: PrivateSelect.IsTableOuterJoined
  fullName: SuperOffice.Data.SQL.PrivateSelect.IsTableOuterJoined
- uid: SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy
  isExternal: true
  name: GetTablesInOrderBy
  nameWithType: PrivateSelect.GetTablesInOrderBy
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetTablesInOrderBy
- uid: SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable
  isExternal: true
  name: GetTablesLeadingToTable
  nameWithType: PrivateSelect.GetTablesLeadingToTable
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetTablesLeadingToTable
- uid: SuperOffice.Data.SQL.PrivateSelect.ValidateJoin*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.ValidateJoin
  isExternal: true
  name: ValidateJoin
  nameWithType: PrivateSelect.ValidateJoin
  fullName: SuperOffice.Data.SQL.PrivateSelect.ValidateJoin
- uid: SuperOffice.Data.SQL.PrivateSelect.Clone*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.Clone
  isExternal: true
  name: Clone
  nameWithType: PrivateSelect.Clone
  fullName: SuperOffice.Data.SQL.PrivateSelect.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.PrivateSelect.CloneSelect*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.CloneSelect
  isExternal: true
  name: CloneSelect
  nameWithType: PrivateSelect.CloneSelect
  fullName: SuperOffice.Data.SQL.PrivateSelect.CloneSelect
- uid: SuperOffice.Exceptions.SoIllegalOperationException
  commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  isExternal: true
  name: SoIllegalOperationException
  nameWithType: SoIllegalOperationException
  fullName: SuperOffice.Exceptions.SoIllegalOperationException
- uid: SuperOffice.Data.SQL.Select
  commentId: T:SuperOffice.Data.SQL.Select
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Select
  nameWithType: Select
  fullName: SuperOffice.Data.SQL.Select
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.PrivateSelect.ToString*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.ToString
  isExternal: true
  name: ToString
  nameWithType: PrivateSelect.ToString
  fullName: SuperOffice.Data.SQL.PrivateSelect.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SQL.PrivateSelect.GetCachingHash*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.GetCachingHash
  isExternal: true
  name: GetCachingHash
  nameWithType: PrivateSelect.GetCachingHash
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetCachingHash
- uid: SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables
  isExternal: true
  name: GetRestrictionTables
  nameWithType: PrivateSelect.GetRestrictionTables
  fullName: SuperOffice.Data.SQL.PrivateSelect.GetRestrictionTables
- uid: SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy
  isExternal: true
  name: CreateOrderBy
  nameWithType: PrivateSelect.CreateOrderBy
  fullName: SuperOffice.Data.SQL.PrivateSelect.CreateOrderBy
- uid: SuperOffice.Data.SQL.OrderBy
  commentId: T:SuperOffice.Data.SQL.OrderBy
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: OrderBy
  nameWithType: OrderBy
  fullName: SuperOffice.Data.SQL.OrderBy
- uid: SuperOffice.Data.SQL.PrivateSelect.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.#ctor
  isExternal: true
  name: PrivateSelect
  nameWithType: PrivateSelect.PrivateSelect
  fullName: SuperOffice.Data.SQL.PrivateSelect.PrivateSelect
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerRestriction*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.InnerRestriction
  isExternal: true
  name: InnerRestriction
  nameWithType: PrivateSelect.InnerRestriction
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerRestriction
- uid: SuperOffice.Data.SQL.Restriction
  commentId: T:SuperOffice.Data.SQL.Restriction
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Restriction
  nameWithType: Restriction
  fullName: SuperOffice.Data.SQL.Restriction
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields
  isExternal: true
  name: InnerReturnFields
  nameWithType: PrivateSelect.InnerReturnFields
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerReturnFields
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection
  commentId: T:SuperOffice.Data.SQL.ReturnFieldsCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: ReturnFieldsCollection
  nameWithType: ReturnFieldsCollection
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy
  isExternal: true
  name: InnerOrderBy
  nameWithType: PrivateSelect.InnerOrderBy
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerOrderBy
- uid: SuperOffice.Data.SQL.PrivateSelect.IsDistinct*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.IsDistinct
  isExternal: true
  name: IsDistinct
  nameWithType: PrivateSelect.IsDistinct
  fullName: SuperOffice.Data.SQL.PrivateSelect.IsDistinct
- uid: SuperOffice.Data.SQL.PrivateSelect.ForceRecompile*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.ForceRecompile
  isExternal: true
  name: ForceRecompile
  nameWithType: PrivateSelect.ForceRecompile
  fullName: SuperOffice.Data.SQL.PrivateSelect.ForceRecompile
- uid: SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder
  isExternal: true
  name: ForceJoinOrder
  nameWithType: PrivateSelect.ForceJoinOrder
  fullName: SuperOffice.Data.SQL.PrivateSelect.ForceJoinOrder
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy
  isExternal: true
  name: InnerGroupBy
  nameWithType: PrivateSelect.InnerGroupBy
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerGroupBy
- uid: SuperOffice.Data.SQL.GroupBy
  commentId: T:SuperOffice.Data.SQL.GroupBy
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: GroupBy
  nameWithType: GroupBy
  fullName: SuperOffice.Data.SQL.GroupBy
- uid: SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction
  isExternal: true
  name: InnerJoinRestriction
  nameWithType: PrivateSelect.InnerJoinRestriction
  fullName: SuperOffice.Data.SQL.PrivateSelect.InnerJoinRestriction
- uid: SuperOffice.Data.SQL.JoinRestriction
  commentId: T:SuperOffice.Data.SQL.JoinRestriction
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: JoinRestriction
  nameWithType: JoinRestriction
  fullName: SuperOffice.Data.SQL.JoinRestriction
- uid: SuperOffice.Data.SQL.SqlCommand.SqlType
  commentId: P:SuperOffice.Data.SQL.SqlCommand.SqlType
  parent: SuperOffice.Data.SQL.SqlCommand
  isExternal: true
  name: SqlType
  nameWithType: SqlCommand.SqlType
  fullName: SuperOffice.Data.SQL.SqlCommand.SqlType
- uid: SuperOffice.Data.SQL.PrivateSelect.SqlType*
  commentId: Overload:SuperOffice.Data.SQL.PrivateSelect.SqlType
  isExternal: true
  name: SqlType
  nameWithType: PrivateSelect.SqlType
  fullName: SuperOffice.Data.SQL.PrivateSelect.SqlType
- uid: SuperOffice.Data.SQL.SqlType
  commentId: T:SuperOffice.Data.SQL.SqlType
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: SqlType
  nameWithType: SqlType
  fullName: SuperOffice.Data.SQL.SqlType
