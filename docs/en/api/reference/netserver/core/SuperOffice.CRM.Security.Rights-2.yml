### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Security.Rights`2
  commentId: T:SuperOffice.CRM.Security.Rights`2
  id: Rights`2
  parent: SuperOffice.CRM.Security
  children:
  - SuperOffice.CRM.Security.Rights`2.#ctor
  - SuperOffice.CRM.Security.Rights`2.Add(`0,`1)
  - SuperOffice.CRM.Security.Rights`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - SuperOffice.CRM.Security.Rights`2.Clear
  - SuperOffice.CRM.Security.Rights`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - SuperOffice.CRM.Security.Rights`2.ContainsKey(`0)
  - SuperOffice.CRM.Security.Rights`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - SuperOffice.CRM.Security.Rights`2.Count
  - SuperOffice.CRM.Security.Rights`2.GetEnumerator
  - SuperOffice.CRM.Security.Rights`2.GetIntKey(`0)
  - SuperOffice.CRM.Security.Rights`2.IsReadOnly
  - SuperOffice.CRM.Security.Rights`2.Item(`0)
  - SuperOffice.CRM.Security.Rights`2.Keys
  - SuperOffice.CRM.Security.Rights`2.Remove(`0)
  - SuperOffice.CRM.Security.Rights`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - SuperOffice.CRM.Security.Rights`2.TryGetValue(`0,`1@)
  - SuperOffice.CRM.Security.Rights`2.Values
  langs:
  - csharp
  - vb
  name: Rights<TKey, TValue>
  nameWithType: Rights<TKey, TValue>
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: 'public abstract class Rights<TKey, TValue> : Object, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public MustInherit Class Rights(Of TKey, TValue)
          Inherits Object
          Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Security.FieldRights
  - SuperOffice.CRM.Security.TableRights
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IEnumerable
  extensionMethods:
  - SuperOffice.CRM.Security.Rights`2.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Security.Rights`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: Rights(Of TKey, TValue)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue)
  name.vb: Rights(Of TKey, TValue)
- uid: SuperOffice.CRM.Security.Rights`2.Add(`0,`1)
  commentId: M:SuperOffice.CRM.Security.Rights`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: Rights<TKey, TValue>.Add(TKey, TValue)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: SuperOffice.CRM.Security.Rights`2.Add*
  nameWithType.vb: Rights(Of TKey, TValue).Add(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Add(TKey, TValue)
- uid: SuperOffice.CRM.Security.Rights`2.GetIntKey(`0)
  commentId: M:SuperOffice.CRM.Security.Rights`2.GetIntKey(`0)
  id: GetIntKey(`0)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: GetIntKey(TKey)
  nameWithType: Rights<TKey, TValue>.GetIntKey(TKey)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.GetIntKey(TKey)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public abstract int GetIntKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Int32
    content.vb: Public MustOverride Function GetIntKey(key As TKey) As Integer
  overload: SuperOffice.CRM.Security.Rights`2.GetIntKey*
  nameWithType.vb: Rights(Of TKey, TValue).GetIntKey(TKey)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).GetIntKey(TKey)
- uid: SuperOffice.CRM.Security.Rights`2.ContainsKey(`0)
  commentId: M:SuperOffice.CRM.Security.Rights`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: Rights<TKey, TValue>.ContainsKey(TKey)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: SuperOffice.CRM.Security.Rights`2.ContainsKey*
  nameWithType.vb: Rights(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).ContainsKey(TKey)
- uid: SuperOffice.CRM.Security.Rights`2.Remove(`0)
  commentId: M:SuperOffice.CRM.Security.Rights`2.Remove(`0)
  id: Remove(`0)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: Rights<TKey, TValue>.Remove(TKey)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: SuperOffice.CRM.Security.Rights`2.Remove*
  nameWithType.vb: Rights(Of TKey, TValue).Remove(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Remove(TKey)
- uid: SuperOffice.CRM.Security.Rights`2.TryGetValue(`0,`1@)
  commentId: M:SuperOffice.CRM.Security.Rights`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: Rights<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
  overload: SuperOffice.CRM.Security.Rights`2.TryGetValue*
  nameWithType.vb: Rights(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
- uid: SuperOffice.CRM.Security.Rights`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:SuperOffice.CRM.Security.Rights`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: Rights<TKey, TValue>.Add(KeyValuePair<TKey, TValue>)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public void Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    content.vb: Public Sub Add(item As KeyValuePair(Of TKey, TValue))
  overload: SuperOffice.CRM.Security.Rights`2.Add*
  nameWithType.vb: Rights(Of TKey, TValue).Add(KeyValuePair(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
- uid: SuperOffice.CRM.Security.Rights`2.Clear
  commentId: M:SuperOffice.CRM.Security.Rights`2.Clear
  id: Clear
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Rights<TKey, TValue>.Clear()
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Clear()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: SuperOffice.CRM.Security.Rights`2.Clear*
  nameWithType.vb: Rights(Of TKey, TValue).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Clear()
- uid: SuperOffice.CRM.Security.Rights`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:SuperOffice.CRM.Security.Rights`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: Rights<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public bool Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: SuperOffice.CRM.Security.Rights`2.Contains*
  nameWithType.vb: Rights(Of TKey, TValue).Contains(KeyValuePair(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
- uid: SuperOffice.CRM.Security.Rights`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:SuperOffice.CRM.Security.Rights`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  nameWithType: Rights<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer)
  overload: SuperOffice.CRM.Security.Rights`2.CopyTo*
  nameWithType.vb: Rights(Of TKey, TValue).CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
- uid: SuperOffice.CRM.Security.Rights`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:SuperOffice.CRM.Security.Rights`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: Rights<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>)
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public bool Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: SuperOffice.CRM.Security.Rights`2.Remove*
  nameWithType.vb: Rights(Of TKey, TValue).Remove(KeyValuePair(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
- uid: SuperOffice.CRM.Security.Rights`2.GetEnumerator
  commentId: M:SuperOffice.CRM.Security.Rights`2.GetEnumerator
  id: GetEnumerator
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Rights<TKey, TValue>.GetEnumerator()
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
  overload: SuperOffice.CRM.Security.Rights`2.GetEnumerator*
  nameWithType.vb: Rights(Of TKey, TValue).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).GetEnumerator()
- uid: SuperOffice.CRM.Security.Rights`2.#ctor
  commentId: M:SuperOffice.CRM.Security.Rights`2.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Rights()
  nameWithType: Rights<TKey, TValue>.Rights()
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Rights()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: protected Rights()
    content.vb: Protected Sub New
  overload: SuperOffice.CRM.Security.Rights`2.#ctor*
  nameWithType.vb: Rights(Of TKey, TValue).Rights()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Rights()
- uid: SuperOffice.CRM.Security.Rights`2.Keys
  commentId: P:SuperOffice.CRM.Security.Rights`2.Keys
  id: Keys
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: Rights<TKey, TValue>.Keys
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Keys
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public ICollection<TKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
  overload: SuperOffice.CRM.Security.Rights`2.Keys*
  nameWithType.vb: Rights(Of TKey, TValue).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Keys
- uid: SuperOffice.CRM.Security.Rights`2.Values
  commentId: P:SuperOffice.CRM.Security.Rights`2.Values
  id: Values
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: Rights<TKey, TValue>.Values
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Values
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public ICollection<TValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
  overload: SuperOffice.CRM.Security.Rights`2.Values*
  nameWithType.vb: Rights(Of TKey, TValue).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Values
- uid: SuperOffice.CRM.Security.Rights`2.Item(`0)
  commentId: P:SuperOffice.CRM.Security.Rights`2.Item(`0)
  id: Item(`0)
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: Rights<TKey, TValue>.Item[TKey]
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Item[TKey]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Property Item(key As TKey) As TValue
  overload: SuperOffice.CRM.Security.Rights`2.Item*
  nameWithType.vb: Rights(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: SuperOffice.CRM.Security.Rights`2.Count
  commentId: P:SuperOffice.CRM.Security.Rights`2.Count
  id: Count
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Rights<TKey, TValue>.Count
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Count
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.CRM.Security.Rights`2.Count*
  nameWithType.vb: Rights(Of TKey, TValue).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Count
- uid: SuperOffice.CRM.Security.Rights`2.IsReadOnly
  commentId: P:SuperOffice.CRM.Security.Rights`2.IsReadOnly
  id: IsReadOnly
  parent: SuperOffice.CRM.Security.Rights`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: Rights<TKey, TValue>.IsReadOnly
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.IsReadOnly
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: SuperOffice.CRM.Security.Rights`2.IsReadOnly*
  nameWithType.vb: Rights(Of TKey, TValue).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).IsReadOnly
references:
- uid: SuperOffice.CRM.Security
  commentId: N:SuperOffice.CRM.Security
  isExternal: true
  name: SuperOffice.CRM.Security
  nameWithType: SuperOffice.CRM.Security
  fullName: SuperOffice.CRM.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: '!:System.Collections.Generic.IDictionary{`0,`1}'
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}'
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<TKey, TValue>>
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: SuperOffice.CRM.Security.Rights`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<Rights<TKey, TValue>, To>()
  nameWithType: EnumUtil.MapEnums<Rights<TKey, TValue>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Security.Rights<TKey, TValue>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of Rights(Of TKey, TValue), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Security.Rights(Of TKey, TValue), To)()
  name.vb: MapEnums(Of Rights(Of TKey, TValue), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<Rights<TKey, TValue>, To>
    nameWithType: EnumUtil.MapEnums<Rights<TKey, TValue>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Security.Rights<TKey, TValue>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of Rights(Of TKey, TValue), To)
    nameWithType: EnumUtil.MapEnums(Of Rights(Of TKey, TValue), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Security.Rights(Of TKey, TValue), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.Rights`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<Rights<TKey, TValue>, To>()
  nameWithType: Converters.MapEnums<Rights<TKey, TValue>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Security.Rights<TKey, TValue>, To>()
  nameWithType.vb: Converters.MapEnums(Of Rights(Of TKey, TValue), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Security.Rights(Of TKey, TValue), To)()
  name.vb: MapEnums(Of Rights(Of TKey, TValue), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<Rights<TKey, TValue>, To>
    nameWithType: Converters.MapEnums<Rights<TKey, TValue>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Security.Rights<TKey, TValue>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of Rights(Of TKey, TValue), To)
    nameWithType: Converters.MapEnums(Of Rights(Of TKey, TValue), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Security.Rights(Of TKey, TValue), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: System.Collections.Generic.ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: System.Collections.Generic.ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Security.Rights`2.Add*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Add
  isExternal: true
  name: Add
  nameWithType: Rights<TKey, TValue>.Add
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Add
  nameWithType.vb: Rights(Of TKey, TValue).Add
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Add
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: SuperOffice.CRM.Security.Rights`2.GetIntKey*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.GetIntKey
  isExternal: true
  name: GetIntKey
  nameWithType: Rights<TKey, TValue>.GetIntKey
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.GetIntKey
  nameWithType.vb: Rights(Of TKey, TValue).GetIntKey
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).GetIntKey
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Security.Rights`2.ContainsKey*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.ContainsKey
  isExternal: true
  name: ContainsKey
  nameWithType: Rights<TKey, TValue>.ContainsKey
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.ContainsKey
  nameWithType.vb: Rights(Of TKey, TValue).ContainsKey
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).ContainsKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Security.Rights`2.Remove*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Remove
  isExternal: true
  name: Remove
  nameWithType: Rights<TKey, TValue>.Remove
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Remove
  nameWithType.vb: Rights(Of TKey, TValue).Remove
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Remove
- uid: SuperOffice.CRM.Security.Rights`2.TryGetValue*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.TryGetValue
  isExternal: true
  name: TryGetValue
  nameWithType: Rights<TKey, TValue>.TryGetValue
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.TryGetValue
  nameWithType.vb: Rights(Of TKey, TValue).TryGetValue
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).TryGetValue
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: '!:System.Collections.Generic.KeyValuePair{`0,`1}'
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: System.Collections.Generic.KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: System.Collections.Generic.KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.Rights`2.Clear*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Clear
  isExternal: true
  name: Clear
  nameWithType: Rights<TKey, TValue>.Clear
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Clear
  nameWithType.vb: Rights(Of TKey, TValue).Clear
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Clear
- uid: SuperOffice.CRM.Security.Rights`2.Contains*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Contains
  isExternal: true
  name: Contains
  nameWithType: Rights<TKey, TValue>.Contains
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Contains
  nameWithType.vb: Rights(Of TKey, TValue).Contains
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Contains
- uid: SuperOffice.CRM.Security.Rights`2.CopyTo*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: Rights<TKey, TValue>.CopyTo
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.CopyTo
  nameWithType.vb: Rights(Of TKey, TValue).CopyTo
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).CopyTo
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  nameWithType: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  nameWithType.vb: KeyValuePair(Of TKey, TValue)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Security.Rights`2.GetEnumerator*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: Rights<TKey, TValue>.GetEnumerator
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.GetEnumerator
  nameWithType.vb: Rights(Of TKey, TValue).GetEnumerator
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}'
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.Rights`2.#ctor*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.#ctor
  isExternal: true
  name: Rights
  nameWithType: Rights<TKey, TValue>.Rights
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Rights
  nameWithType.vb: Rights(Of TKey, TValue).Rights
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Rights
- uid: SuperOffice.CRM.Security.Rights`2.Keys*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Keys
  isExternal: true
  name: Keys
  nameWithType: Rights<TKey, TValue>.Keys
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Keys
  nameWithType.vb: Rights(Of TKey, TValue).Keys
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: '!:System.Collections.Generic.ICollection{`0}'
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.Rights`2.Values*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Values
  isExternal: true
  name: Values
  nameWithType: Rights<TKey, TValue>.Values
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Values
  nameWithType.vb: Rights(Of TKey, TValue).Values
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Values
- uid: System.Collections.Generic.ICollection{{TValue}}
  commentId: '!:System.Collections.Generic.ICollection{`1}'
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  nameWithType.vb: ICollection(Of TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.Rights`2.Item*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Item
  isExternal: true
  name: Item
  nameWithType: Rights<TKey, TValue>.Item
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Item
  nameWithType.vb: Rights(Of TKey, TValue).Item
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Item
- uid: SuperOffice.CRM.Security.Rights`2.Count*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.Count
  isExternal: true
  name: Count
  nameWithType: Rights<TKey, TValue>.Count
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.Count
  nameWithType.vb: Rights(Of TKey, TValue).Count
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).Count
- uid: SuperOffice.CRM.Security.Rights`2.IsReadOnly*
  commentId: Overload:SuperOffice.CRM.Security.Rights`2.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: Rights<TKey, TValue>.IsReadOnly
  fullName: SuperOffice.CRM.Security.Rights<TKey, TValue>.IsReadOnly
  nameWithType.vb: Rights(Of TKey, TValue).IsReadOnly
  fullName.vb: SuperOffice.CRM.Security.Rights(Of TKey, TValue).IsReadOnly
