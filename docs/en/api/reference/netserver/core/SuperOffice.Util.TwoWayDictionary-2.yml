### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.TwoWayDictionary`2
  commentId: T:SuperOffice.Util.TwoWayDictionary`2
  id: TwoWayDictionary`2
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.TwoWayDictionary`2.#ctor
  - SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32)
  - SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  - SuperOffice.Util.TwoWayDictionary`2.Add(`0,`1)
  - SuperOffice.Util.TwoWayDictionary`2.AddOverwrite(`0,`1)
  - SuperOffice.Util.TwoWayDictionary`2.Clear
  - SuperOffice.Util.TwoWayDictionary`2.ContainsKey(`0)
  - SuperOffice.Util.TwoWayDictionary`2.Count
  - SuperOffice.Util.TwoWayDictionary`2.Item(`0)
  - SuperOffice.Util.TwoWayDictionary`2.Keys
  - SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
  - SuperOffice.Util.TwoWayDictionary`2.LeftGetValue(`0)
  - SuperOffice.Util.TwoWayDictionary`2.LeftGetValue(`1)
  - SuperOffice.Util.TwoWayDictionary`2.LeftKeys
  - SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
  - SuperOffice.Util.TwoWayDictionary`2.LeftToArray
  - SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
  - SuperOffice.Util.TwoWayDictionary`2.LeftValues
  - SuperOffice.Util.TwoWayDictionary`2.Remove(`0)
  - SuperOffice.Util.TwoWayDictionary`2.RightContainsKey(`1)
  - SuperOffice.Util.TwoWayDictionary`2.RightGetValue(`0)
  - SuperOffice.Util.TwoWayDictionary`2.RightGetValue(`1)
  - SuperOffice.Util.TwoWayDictionary`2.RightKeys
  - SuperOffice.Util.TwoWayDictionary`2.RightRemove(`1)
  - SuperOffice.Util.TwoWayDictionary`2.RightToArray
  - SuperOffice.Util.TwoWayDictionary`2.RightTryGetValue(`1,`0@)
  - SuperOffice.Util.TwoWayDictionary`2.RightValues
  - SuperOffice.Util.TwoWayDictionary`2.TryGetValue(`0,`1@)
  - SuperOffice.Util.TwoWayDictionary`2.Values
  langs:
  - csharp
  - vb
  name: TwoWayDictionary<LeftType, RightType>
  nameWithType: TwoWayDictionary<LeftType, RightType>
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>
  type: Class
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    This class implements a two-way associate container, that is, a dictionary-like collection that is indexable

    both by the left and right-hand values. This places key-like constraints on both sides (they must be

    comparable, hasheable, and unique), but provides fast lookup in both directions.
  remarks: >-
    The implementation internally uses two generic dictionaries, so that all constraints, performance characteristics

    and other properties of the generic System.Collections.Generic.Dictionary class apply. LeftType and

    RightType can be the same type, which incidentally requires things like the TryGetValue methods to have different

    names for left and right...
  example: []
  syntax:
    content: public class TwoWayDictionary<LeftType, RightType>
    typeParameters:
    - id: LeftType
      description: Left-hand type
    - id: RightType
      description: Right-hand type
    content.vb: Public Class TwoWayDictionary(Of LeftType, RightType)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Util.TwoWayDictionary`2.EnumUtil.MapEnums``2
  - SuperOffice.Util.TwoWayDictionary`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  - SuperOffice.Util.TwoWayDictionary`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.TwoWayDictionary{{LeftType},{RightType}})
  - SuperOffice.Util.TwoWayDictionary`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType)
  name.vb: TwoWayDictionary(Of LeftType, RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.#ctor
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: TwoWayDictionary()
  nameWithType: TwoWayDictionary<LeftType, RightType>.TwoWayDictionary()
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TwoWayDictionary()
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    Default constructor, allocates empty dictionaries. Insertions will take O(n) where n is the number of items 

    already in the container; note that if you're populating in a loop that would give

    a total performance of O(n^2), worth avoiding by preallocating if at all possible.
  example: []
  syntax:
    content: public TwoWayDictionary()
    content.vb: Public Sub New()
  overload: SuperOffice.Util.TwoWayDictionary`2.#ctor*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).New()
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).New()
  name.vb: New()
- uid: SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: TwoWayDictionary(int)
  nameWithType: TwoWayDictionary<LeftType, RightType>.TwoWayDictionary(int)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TwoWayDictionary(int)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    Constructor that preallocates the given number of slots. Insertions will take O(1) up to this initial

    capacity, O(n^2) beyond.
  example: []
  syntax:
    content: public TwoWayDictionary(int initialCapacity)
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: Initial capacity to allocate, this reserves memory but is not a hard limit
    content.vb: Public Sub New(initialCapacity As Integer)
  overload: SuperOffice.Util.TwoWayDictionary`2.#ctor*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).New(Integer)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).New(Integer)
  name.vb: New(Integer)
- uid: SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: TwoWayDictionary(int, IEqualityComparer<LeftType>)
  nameWithType: TwoWayDictionary<LeftType, RightType>.TwoWayDictionary(int, IEqualityComparer<LeftType>)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TwoWayDictionary(int, System.Collections.Generic.IEqualityComparer<LeftType>)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    Constructor that preallocates the given number of items, and uses the given comparer for the left-hand

    key type. Insertions will take O(1) up to this initial

    capacity, O(n^2) beyond.
  example: []
  syntax:
    content: public TwoWayDictionary(int initialCapacity, IEqualityComparer<LeftType> LeftTypeEquality)
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: Initial capacity to allocate, this reserves memory but is not a hard limit
    - id: LeftTypeEquality
      type: System.Collections.Generic.IEqualityComparer{{LeftType}}
      description: Equality comparer for the given key type
    content.vb: Public Sub New(initialCapacity As Integer, LeftTypeEquality As IEqualityComparer(Of LeftType))
  overload: SuperOffice.Util.TwoWayDictionary`2.#ctor*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).New(Integer, IEqualityComparer(Of LeftType))
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).New(Integer, System.Collections.Generic.IEqualityComparer(Of LeftType))
  name.vb: New(Integer, IEqualityComparer(Of LeftType))
- uid: SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})'
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: TwoWayDictionary(int, IEqualityComparer<LeftType>, IEqualityComparer<RightType>)
  nameWithType: TwoWayDictionary<LeftType, RightType>.TwoWayDictionary(int, IEqualityComparer<LeftType>, IEqualityComparer<RightType>)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TwoWayDictionary(int, System.Collections.Generic.IEqualityComparer<LeftType>, System.Collections.Generic.IEqualityComparer<RightType>)
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    Constructor that preallocates the given number of items, and uses the given comparers for the left-hand

    and right-hand key types. Insertions will take O(1) up to this initial

    capacity, O(n^2) beyond.
  example: []
  syntax:
    content: public TwoWayDictionary(int initialCapacity, IEqualityComparer<LeftType> LeftTypeEquality, IEqualityComparer<RightType> RightTypeEquality)
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: Initial capacity to allocate, this reserves memory but is not a hard limit
    - id: LeftTypeEquality
      type: System.Collections.Generic.IEqualityComparer{{LeftType}}
      description: Equality comparer for the left-hand key type
    - id: RightTypeEquality
      type: System.Collections.Generic.IEqualityComparer{{RightType}}
      description: Equality comparer for the right-hand key type
    content.vb: Public Sub New(initialCapacity As Integer, LeftTypeEquality As IEqualityComparer(Of LeftType), RightTypeEquality As IEqualityComparer(Of RightType))
  overload: SuperOffice.Util.TwoWayDictionary`2.#ctor*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).New(Integer, IEqualityComparer(Of LeftType), IEqualityComparer(Of RightType))
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).New(Integer, System.Collections.Generic.IEqualityComparer(Of LeftType), System.Collections.Generic.IEqualityComparer(Of RightType))
  name.vb: New(Integer, IEqualityComparer(Of LeftType), IEqualityComparer(Of RightType))
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftGetValue(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftGetValue(`0)
  id: LeftGetValue(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftGetValue(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftGetValue(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftGetValue(LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get the value using the left key.
  example: []
  syntax:
    content: public RightType LeftGetValue(LeftType left)
    parameters:
    - id: left
      type: '{LeftType}'
      description: The left key.
    return:
      type: '{RightType}'
      description: The right value
    content.vb: Public Function LeftGetValue(left As LeftType) As RightType
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftGetValue*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftGetValue(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftGetValue(LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.RightGetValue(`1)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.RightGetValue(`1)
  id: RightGetValue(`1)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightGetValue(RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightGetValue(RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightGetValue(RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get the value using the right key.
  example: []
  syntax:
    content: public LeftType RightGetValue(RightType right)
    parameters:
    - id: right
      type: '{RightType}'
      description: The right key.
    return:
      type: '{LeftType}'
      description: The left value.
    content.vb: Public Function RightGetValue(right As RightType) As LeftType
  overload: SuperOffice.Util.TwoWayDictionary`2.RightGetValue*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightGetValue(RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightGetValue(RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.Add(`0,`1)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: Add(LeftType, RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.Add(LeftType, RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Add(LeftType, RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    Add a new pair of values. An exception will be thrown if either the left or right value already exists, or if any of the 

    values is null.
  example: []
  syntax:
    content: public void Add(LeftType left, RightType right)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Left-hand value
    - id: right
      type: '{RightType}'
      description: Right-hand value
    content.vb: Public Sub Add(left As LeftType, right As RightType)
  overload: SuperOffice.Util.TwoWayDictionary`2.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element with the same key (left- or right-hand) already exists
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Either one of the values is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Add(LeftType, RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Add(LeftType, RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.AddOverwrite(`0,`1)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.AddOverwrite(`0,`1)
  id: AddOverwrite(`0,`1)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: AddOverwrite(LeftType, RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.AddOverwrite(LeftType, RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.AddOverwrite(LeftType, RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: >-
    Add or overwrite an existing pair of values. After this operation, the new values will be associated

    and any previous associations any of them might have will be lost. Both values must be non-null.
  example: []
  syntax:
    content: public void AddOverwrite(LeftType left, RightType right)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Left-hand value
    - id: right
      type: '{RightType}'
      description: Right-hand value
    content.vb: Public Sub AddOverwrite(left As LeftType, right As RightType)
  overload: SuperOffice.Util.TwoWayDictionary`2.AddOverwrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Either one of the values is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).AddOverwrite(LeftType, RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).AddOverwrite(LeftType, RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.Remove(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.Remove(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Remove(LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Wrapper for <xref href="SuperOffice.Util.TwoWayDictionary%602.LeftRemove(%600)" data-throw-if-not-resolved="false"></xref>, so TwoWayDictionary can be used like a Dictionary.
  example: []
  syntax:
    content: public bool Remove(LeftType left)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Key of item to remove.
    return:
      type: System.Boolean
      description: True if the item is successfully removed.
    content.vb: Public Function Remove(left As LeftType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.Remove*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Remove(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Remove(LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
  id: LeftRemove(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftRemove(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftRemove(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftRemove(LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Remove item from the dictionary using the left key.
  example: []
  syntax:
    content: public bool LeftRemove(LeftType left)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Key of item to remove.
    return:
      type: System.Boolean
      description: True if the item is successfully removed.
    content.vb: Public Function LeftRemove(left As LeftType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftRemove*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftRemove(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftRemove(LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.RightRemove(`1)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.RightRemove(`1)
  id: RightRemove(`1)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightRemove(RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightRemove(RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightRemove(RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Remove item from the dictionary using the right key.
  example: []
  syntax:
    content: public bool RightRemove(RightType right)
    parameters:
    - id: right
      type: '{RightType}'
      description: Key of item to remove.
    return:
      type: System.Boolean
      description: True if the item is successfully removed.
    content.vb: Public Function RightRemove(right As RightType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.RightRemove*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightRemove(RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightRemove(RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.Clear
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.Clear
  id: Clear
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TwoWayDictionary<LeftType, RightType>.Clear()
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Clear()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Clear the dictionary.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: SuperOffice.Util.TwoWayDictionary`2.Clear*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Clear()
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Clear()
- uid: SuperOffice.Util.TwoWayDictionary`2.TryGetValue(`0,`1@)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(LeftType, out RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.TryGetValue(LeftType, out RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TryGetValue(LeftType, out RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Wrapper for <xref href="SuperOffice.Util.TwoWayDictionary%602.LeftTryGetValue(%600%2c%601%40)" data-throw-if-not-resolved="false"></xref>, so TwoWayDictionary can be used like a Dictionary.
  example: []
  syntax:
    content: public bool TryGetValue(LeftType left, out RightType right)
    parameters:
    - id: left
      type: '{LeftType}'
      description: ''
    - id: right
      type: '{RightType}'
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetValue(left As LeftType, right As RightType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.TryGetValue*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).TryGetValue(LeftType, RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).TryGetValue(LeftType, RightType)
  name.vb: TryGetValue(LeftType, RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
  id: LeftTryGetValue(`0,`1@)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftTryGetValue(LeftType, out RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftTryGetValue(LeftType, out RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftTryGetValue(LeftType, out RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get the right-hand value for the given left-hand key if it exists
  example: []
  syntax:
    content: public bool LeftTryGetValue(LeftType left, out RightType right)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Left-hand key
    - id: right
      type: '{RightType}'
      description: 'Output: Right-hand value, or null/default if key was not found'
    return:
      type: System.Boolean
      description: true if the left-hand key existed
    content.vb: Public Function LeftTryGetValue(left As LeftType, right As RightType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Left-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftTryGetValue(LeftType, RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftTryGetValue(LeftType, RightType)
  name.vb: LeftTryGetValue(LeftType, RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftGetValue(`1)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftGetValue(`1)
  id: LeftGetValue(`1)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftGetValue(RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftGetValue(RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftGetValue(RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get the left-hand value corresponding to the given right-hand key.
  example: []
  syntax:
    content: public LeftType LeftGetValue(RightType right)
    parameters:
    - id: right
      type: '{RightType}'
      description: Right-hand key to look for
    return:
      type: '{LeftType}'
      description: Left-hand value corresponding to key
    content.vb: Public Function LeftGetValue(right As RightType) As LeftType
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftGetValue*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Thrown if the right-hand key does not exist
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the right-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftGetValue(RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftGetValue(RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.RightTryGetValue(`1,`0@)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.RightTryGetValue(`1,`0@)
  id: RightTryGetValue(`1,`0@)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightTryGetValue(RightType, out LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightTryGetValue(RightType, out LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightTryGetValue(RightType, out LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get the left-hand value for the given right-hand key if it exists
  example: []
  syntax:
    content: public bool RightTryGetValue(RightType right, out LeftType left)
    parameters:
    - id: right
      type: '{RightType}'
      description: Right-hand key
    - id: left
      type: '{LeftType}'
      description: 'Output: left-hand value, or null/default if key was not found'
    return:
      type: System.Boolean
      description: true if the right-hand key existed
    content.vb: Public Function RightTryGetValue(right As RightType, left As LeftType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.RightTryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Right-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightTryGetValue(RightType, LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightTryGetValue(RightType, LeftType)
  name.vb: RightTryGetValue(RightType, LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.RightGetValue(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.RightGetValue(`0)
  id: RightGetValue(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightGetValue(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightGetValue(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightGetValue(LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get the right-hand value corresponding to the given left-hand key.
  example: []
  syntax:
    content: public RightType RightGetValue(LeftType left)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Left-hand key to look for
    return:
      type: '{RightType}'
      description: Right-hand value corresponding to key
    content.vb: Public Function RightGetValue(left As LeftType) As RightType
  overload: SuperOffice.Util.TwoWayDictionary`2.RightGetValue*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Thrown if the left-hand key does not exist
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the left-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightGetValue(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightGetValue(LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.ContainsKey(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.ContainsKey(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.ContainsKey(LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Wrapper for <xref href="SuperOffice.Util.TwoWayDictionary%602.LeftContainsKey(%600)" data-throw-if-not-resolved="false"></xref>, so TwoWayDictionary can be used like a Dictionary.
  example: []
  syntax:
    content: public bool ContainsKey(LeftType left)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Left-hand key to look for
    return:
      type: System.Boolean
      description: true if left-hand key was found
    content.vb: Public Function ContainsKey(left As LeftType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Left-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).ContainsKey(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).ContainsKey(LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
  id: LeftContainsKey(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftContainsKey(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftContainsKey(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftContainsKey(LeftType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Test if a left-hand key exists
  example: []
  syntax:
    content: public bool LeftContainsKey(LeftType left)
    parameters:
    - id: left
      type: '{LeftType}'
      description: Left-hand key to look for
    return:
      type: System.Boolean
      description: true if left-hand key was found
    content.vb: Public Function LeftContainsKey(left As LeftType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Left-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftContainsKey(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftContainsKey(LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.RightContainsKey(`1)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.RightContainsKey(`1)
  id: RightContainsKey(`1)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightContainsKey(RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightContainsKey(RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightContainsKey(RightType)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Test if a right-hand key exists
  example: []
  syntax:
    content: public bool RightContainsKey(RightType right)
    parameters:
    - id: right
      type: '{RightType}'
      description: Right-hand key to look for
    return:
      type: System.Boolean
      description: true if the right-hand key was found
    content.vb: Public Function RightContainsKey(right As RightType) As Boolean
  overload: SuperOffice.Util.TwoWayDictionary`2.RightContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Left-hand key is null
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightContainsKey(RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightContainsKey(RightType)
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftToArray
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftToArray
  id: LeftToArray
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftToArray()
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftToArray()
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftToArray()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Return the left-hand values as an array
  example: []
  syntax:
    content: public LeftType[] LeftToArray()
    return:
      type: '{LeftType}[]'
      description: Array of left-hand values
    content.vb: Public Function LeftToArray() As LeftType()
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftToArray*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftToArray()
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftToArray()
- uid: SuperOffice.Util.TwoWayDictionary`2.RightToArray
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.RightToArray
  id: RightToArray
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightToArray()
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightToArray()
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightToArray()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Return the right-hand values as an array
  example: []
  syntax:
    content: public RightType[] RightToArray()
    return:
      type: '{RightType}[]'
      description: Array of right-hand values
    content.vb: Public Function RightToArray() As RightType()
  overload: SuperOffice.Util.TwoWayDictionary`2.RightToArray*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightToArray()
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightToArray()
- uid: SuperOffice.Util.TwoWayDictionary`2.Item(`0)
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.Item(`0)
  id: Item(`0)
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: this[LeftType]
  nameWithType: TwoWayDictionary<LeftType, RightType>.this[LeftType]
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.this[LeftType]
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get and set items similar to Dictionary using the first type as a key.
  example: []
  syntax:
    content: public RightType this[LeftType left] { get; set; }
    parameters:
    - id: left
      type: '{LeftType}'
      description: Key to use when looking up.
    return:
      type: '{RightType}'
      description: Value from the given key.
    content.vb: Public Default Property this[](left As LeftType) As RightType
  overload: SuperOffice.Util.TwoWayDictionary`2.Item*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).this[](LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).this[](LeftType)
  name.vb: this[](LeftType)
- uid: SuperOffice.Util.TwoWayDictionary`2.Keys
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.Keys
  id: Keys
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: TwoWayDictionary<LeftType, RightType>.Keys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Keys
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Wrapper for <xref href="SuperOffice.Util.TwoWayDictionary%602.LeftKeys" data-throw-if-not-resolved="false"></xref>, so TwoWayDictionary can be used like a Dictionary.
  example: []
  syntax:
    content: public Dictionary<LeftType, RightType>.KeyCollection Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{{LeftType},{RightType}}.KeyCollection
    content.vb: Public ReadOnly Property Keys As Dictionary(Of LeftType, RightType).KeyCollection
  overload: SuperOffice.Util.TwoWayDictionary`2.Keys*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Keys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Keys
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftKeys
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.LeftKeys
  id: LeftKeys
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftKeys
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftKeys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftKeys
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get Left keys.
  example: []
  syntax:
    content: public Dictionary<LeftType, RightType>.KeyCollection LeftKeys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{{LeftType},{RightType}}.KeyCollection
    content.vb: Public ReadOnly Property LeftKeys As Dictionary(Of LeftType, RightType).KeyCollection
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftKeys*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftKeys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftKeys
- uid: SuperOffice.Util.TwoWayDictionary`2.RightKeys
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.RightKeys
  id: RightKeys
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightKeys
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightKeys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightKeys
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Get right keys.
  example: []
  syntax:
    content: public Dictionary<RightType, LeftType>.KeyCollection RightKeys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{{RightType},{LeftType}}.KeyCollection
    content.vb: Public ReadOnly Property RightKeys As Dictionary(Of RightType, LeftType).KeyCollection
  overload: SuperOffice.Util.TwoWayDictionary`2.RightKeys*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightKeys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightKeys
- uid: SuperOffice.Util.TwoWayDictionary`2.Count
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.Count
  id: Count
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: TwoWayDictionary<LeftType, RightType>.Count
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Count
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Return the number of elements currently in the two-way dictionary
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.Util.TwoWayDictionary`2.Count*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Count
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Count
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftValues
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.LeftValues
  id: LeftValues
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: LeftValues
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftValues
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftValues
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Return an enumerator over the left-hand value type
  example: []
  syntax:
    content: public IEnumerable<LeftType> LeftValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{LeftType}}
    content.vb: Public ReadOnly Property LeftValues As IEnumerable(Of LeftType)
  overload: SuperOffice.Util.TwoWayDictionary`2.LeftValues*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftValues
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftValues
- uid: SuperOffice.Util.TwoWayDictionary`2.RightValues
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.RightValues
  id: RightValues
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: RightValues
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightValues
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightValues
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Return an enumerator over the right-hand value type
  example: []
  syntax:
    content: public IEnumerable<RightType> RightValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{RightType}}
    content.vb: Public ReadOnly Property RightValues As IEnumerable(Of RightType)
  overload: SuperOffice.Util.TwoWayDictionary`2.RightValues*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightValues
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightValues
- uid: SuperOffice.Util.TwoWayDictionary`2.Values
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.Values
  id: Values
  parent: SuperOffice.Util.TwoWayDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: TwoWayDictionary<LeftType, RightType>.Values
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Values
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: Return an enumerator over the value pairs, with the left-hand value as the Key and the right-hand value as the Value element of the KeyValuePair
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<LeftType, RightType>> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{LeftType},{RightType}}}
    content.vb: Public ReadOnly Property Values As IEnumerable(Of KeyValuePair(Of LeftType, RightType))
  overload: SuperOffice.Util.TwoWayDictionary`2.Values*
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Values
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Values
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<TwoWayDictionary<LeftType, RightType>, To>(TwoWayDictionary<LeftType, RightType>)
  nameWithType: EnumUtil.MapEnums<TwoWayDictionary<LeftType, RightType>, To>(TwoWayDictionary<LeftType, RightType>)
  fullName: EnumUtil.MapEnums<SuperOffice.Util.TwoWayDictionary<LeftType, RightType>, To>(SuperOffice.Util.TwoWayDictionary<LeftType, RightType>)
  nameWithType.vb: EnumUtil.MapEnums(Of TwoWayDictionary(Of LeftType, RightType), To)(TwoWayDictionary(Of LeftType, RightType))
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType), To)(SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType))
  name.vb: MapEnums(Of TwoWayDictionary(Of LeftType, RightType), To)(TwoWayDictionary(Of LeftType, RightType))
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<TwoWayDictionary<LeftType, RightType>, To>(TwoWayDictionary<LeftType, RightType>)
  nameWithType: Converters.MapEnums<TwoWayDictionary<LeftType, RightType>, To>(TwoWayDictionary<LeftType, RightType>)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.TwoWayDictionary<LeftType, RightType>, To>(SuperOffice.Util.TwoWayDictionary<LeftType, RightType>)
  nameWithType.vb: Converters.MapEnums(Of TwoWayDictionary(Of LeftType, RightType), To)(TwoWayDictionary(Of LeftType, RightType))
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType), To)(SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType))
  name.vb: MapEnums(Of TwoWayDictionary(Of LeftType, RightType), To)(TwoWayDictionary(Of LeftType, RightType))
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.TwoWayDictionary{{LeftType},{RightType}})
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<TwoWayDictionary<LeftType, RightType>>(TwoWayDictionary<LeftType, RightType>, TwoWayDictionary<LeftType, RightType>)
  nameWithType: ObjectExtensions.AssignByReflection<TwoWayDictionary<LeftType, RightType>>(TwoWayDictionary<LeftType, RightType>, TwoWayDictionary<LeftType, RightType>)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.TwoWayDictionary<LeftType, RightType>>(SuperOffice.Util.TwoWayDictionary<LeftType, RightType>, SuperOffice.Util.TwoWayDictionary<LeftType, RightType>)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of TwoWayDictionary(Of LeftType, RightType))(TwoWayDictionary(Of LeftType, RightType), TwoWayDictionary(Of LeftType, RightType))
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType))(SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType), SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType))
  name.vb: AssignByReflection(Of TwoWayDictionary(Of LeftType, RightType))(TwoWayDictionary(Of LeftType, RightType), TwoWayDictionary(Of LeftType, RightType))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.TwoWayDictionary{`0,`1},SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: ','
  - name: " "
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.TwoWayDictionary{`0,`1},SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: ','
  - name: " "
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<TwoWayDictionary<LeftType, RightType>>(TwoWayDictionary<LeftType, RightType>)
  nameWithType: ObjectExtensions.GraphCopy<TwoWayDictionary<LeftType, RightType>>(TwoWayDictionary<LeftType, RightType>)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.TwoWayDictionary<LeftType, RightType>>(SuperOffice.Util.TwoWayDictionary<LeftType, RightType>)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of TwoWayDictionary(Of LeftType, RightType))(TwoWayDictionary(Of LeftType, RightType))
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType))(SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType))
  name.vb: GraphCopy(Of TwoWayDictionary(Of LeftType, RightType))(TwoWayDictionary(Of LeftType, RightType))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: '>'
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.Util.TwoWayDictionary{`0,`1})
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
  - name: (
  - uid: SuperOffice.Util.TwoWayDictionary`2
    name: TwoWayDictionary
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Util.TwoWayDictionary`2.#ctor*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.#ctor
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2__ctor
  name: TwoWayDictionary
  nameWithType: TwoWayDictionary<LeftType, RightType>.TwoWayDictionary
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TwoWayDictionary
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).New
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IEqualityComparer{{LeftType}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<LeftType>
  nameWithType: IEqualityComparer<LeftType>
  fullName: System.Collections.Generic.IEqualityComparer<LeftType>
  nameWithType.vb: IEqualityComparer(Of LeftType)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of LeftType)
  name.vb: IEqualityComparer(Of LeftType)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: LeftType
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEqualityComparer{{RightType}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<RightType>
  nameWithType: IEqualityComparer<RightType>
  fullName: System.Collections.Generic.IEqualityComparer<RightType>
  nameWithType.vb: IEqualityComparer(Of RightType)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of RightType)
  name.vb: IEqualityComparer(Of RightType)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: RightType
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: RightType
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftGetValue*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftGetValue
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftGetValue__0_
  name: LeftGetValue
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftGetValue
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftGetValue
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftGetValue
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftGetValue
- uid: '{LeftType}'
  commentId: '!:LeftType'
  definition: LeftType
  name: LeftType
  nameWithType: LeftType
  fullName: LeftType
- uid: '{RightType}'
  commentId: '!:RightType'
  definition: RightType
  name: RightType
  nameWithType: RightType
  fullName: RightType
- uid: LeftType
  name: LeftType
  nameWithType: LeftType
  fullName: LeftType
- uid: RightType
  name: RightType
  nameWithType: RightType
  fullName: RightType
- uid: SuperOffice.Util.TwoWayDictionary`2.RightGetValue*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightGetValue
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightGetValue__1_
  name: RightGetValue
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightGetValue
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightGetValue
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightGetValue
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightGetValue
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: SuperOffice.Util.TwoWayDictionary`2.Add*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Add
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Add__0__1_
  name: Add
  nameWithType: TwoWayDictionary<LeftType, RightType>.Add
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Add
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Add
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Add
- uid: SuperOffice.Util.TwoWayDictionary`2.AddOverwrite*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.AddOverwrite
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_AddOverwrite__0__1_
  name: AddOverwrite
  nameWithType: TwoWayDictionary<LeftType, RightType>.AddOverwrite
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.AddOverwrite
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).AddOverwrite
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).AddOverwrite
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftRemove__0_
  name: LeftRemove(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftRemove(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftRemove(LeftType)
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftRemove(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftRemove(LeftType)
  spec.csharp:
  - uid: SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
    name: LeftRemove
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftRemove__0_
  - name: (
  - name: LeftType
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.TwoWayDictionary`2.LeftRemove(`0)
    name: LeftRemove
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftRemove__0_
  - name: (
  - name: LeftType
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.Remove*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Remove
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Remove__0_
  name: Remove
  nameWithType: TwoWayDictionary<LeftType, RightType>.Remove
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Remove
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Remove
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Remove
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftRemove*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftRemove
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftRemove__0_
  name: LeftRemove
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftRemove
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftRemove
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftRemove
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftRemove
- uid: SuperOffice.Util.TwoWayDictionary`2.RightRemove*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightRemove
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightRemove__1_
  name: RightRemove
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightRemove
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightRemove
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightRemove
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightRemove
- uid: SuperOffice.Util.TwoWayDictionary`2.Clear*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Clear
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Clear
  name: Clear
  nameWithType: TwoWayDictionary<LeftType, RightType>.Clear
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Clear
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Clear
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Clear
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftTryGetValue__0__1__
  name: LeftTryGetValue(LeftType, out RightType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftTryGetValue(LeftType, out RightType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftTryGetValue(LeftType, out RightType)
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftTryGetValue(LeftType, RightType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftTryGetValue(LeftType, RightType)
  name.vb: LeftTryGetValue(LeftType, RightType)
  spec.csharp:
  - uid: SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
    name: LeftTryGetValue
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftTryGetValue__0__1__
  - name: (
  - name: LeftType
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: RightType
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue(`0,`1@)
    name: LeftTryGetValue
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftTryGetValue__0__1__
  - name: (
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.TryGetValue*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.TryGetValue
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_TryGetValue__0__1__
  name: TryGetValue
  nameWithType: TwoWayDictionary<LeftType, RightType>.TryGetValue
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.TryGetValue
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).TryGetValue
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).TryGetValue
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftTryGetValue
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftTryGetValue__0__1__
  name: LeftTryGetValue
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftTryGetValue
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftTryGetValue
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftTryGetValue
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftTryGetValue
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: SuperOffice.Util.TwoWayDictionary`2.RightTryGetValue*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightTryGetValue
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightTryGetValue__1__0__
  name: RightTryGetValue
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightTryGetValue
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightTryGetValue
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightTryGetValue
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightTryGetValue
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
  commentId: M:SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftContainsKey__0_
  name: LeftContainsKey(LeftType)
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftContainsKey(LeftType)
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftContainsKey(LeftType)
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftContainsKey(LeftType)
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftContainsKey(LeftType)
  spec.csharp:
  - uid: SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
    name: LeftContainsKey
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftContainsKey__0_
  - name: (
  - name: LeftType
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey(`0)
    name: LeftContainsKey
    isExternal: true
    href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftContainsKey__0_
  - name: (
  - name: LeftType
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.ContainsKey*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.ContainsKey
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: TwoWayDictionary<LeftType, RightType>.ContainsKey
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.ContainsKey
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).ContainsKey
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).ContainsKey
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftContainsKey
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftContainsKey__0_
  name: LeftContainsKey
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftContainsKey
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftContainsKey
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftContainsKey
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftContainsKey
- uid: SuperOffice.Util.TwoWayDictionary`2.RightContainsKey*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightContainsKey
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightContainsKey__1_
  name: RightContainsKey
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightContainsKey
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightContainsKey
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightContainsKey
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightContainsKey
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftToArray*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftToArray
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftToArray
  name: LeftToArray
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftToArray
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftToArray
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftToArray
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftToArray
- uid: '{LeftType}[]'
  isExternal: true
  name: LeftType[]
  nameWithType: LeftType[]
  fullName: LeftType[]
  nameWithType.vb: LeftType()
  fullName.vb: LeftType()
  name.vb: LeftType()
  spec.csharp:
  - name: LeftType
  - name: '['
  - name: ']'
  spec.vb:
  - name: LeftType
  - name: (
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.RightToArray*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightToArray
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightToArray
  name: RightToArray
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightToArray
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightToArray
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightToArray
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightToArray
- uid: '{RightType}[]'
  isExternal: true
  name: RightType[]
  nameWithType: RightType[]
  fullName: RightType[]
  nameWithType.vb: RightType()
  fullName.vb: RightType()
  name.vb: RightType()
  spec.csharp:
  - name: RightType
  - name: '['
  - name: ']'
  spec.vb:
  - name: RightType
  - name: (
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.Item*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Item
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Item__0_
  name: this
  nameWithType: TwoWayDictionary<LeftType, RightType>.this
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.this
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).this[]
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).this[]
  name.vb: this[]
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftKeys
  commentId: P:SuperOffice.Util.TwoWayDictionary`2.LeftKeys
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftKeys
  name: LeftKeys
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftKeys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftKeys
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftKeys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftKeys
- uid: SuperOffice.Util.TwoWayDictionary`2.Keys*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Keys
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Keys
  name: Keys
  nameWithType: TwoWayDictionary<LeftType, RightType>.Keys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Keys
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Keys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Keys
- uid: System.Collections.Generic.Dictionary{{LeftType},{RightType}}.KeyCollection
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}.KeyCollection
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2.KeyCollection
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<LeftType, RightType>.KeyCollection
  nameWithType: Dictionary<LeftType, RightType>.KeyCollection
  fullName: System.Collections.Generic.Dictionary<LeftType, RightType>.KeyCollection
  nameWithType.vb: Dictionary(Of LeftType, RightType).KeyCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of LeftType, RightType).KeyCollection
  name.vb: Dictionary(Of LeftType, RightType).KeyCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary{`0,`1}.KeyCollection
    name: KeyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.keycollection
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary{`0,`1}.KeyCollection
    name: KeyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.keycollection
- uid: System.Collections.Generic.Dictionary`2.KeyCollection
  commentId: T:System.Collections.Generic.Dictionary`2.KeyCollection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>.KeyCollection
  nameWithType: Dictionary<TKey, TValue>.KeyCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection
  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection
  name.vb: Dictionary(Of TKey, TValue).KeyCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary`2.KeyCollection
    name: KeyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.keycollection
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary`2.KeyCollection
    name: KeyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.keycollection
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftKeys*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftKeys
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftKeys
  name: LeftKeys
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftKeys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftKeys
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftKeys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftKeys
- uid: SuperOffice.Util.TwoWayDictionary`2.RightKeys*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightKeys
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightKeys
  name: RightKeys
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightKeys
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightKeys
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightKeys
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightKeys
- uid: System.Collections.Generic.Dictionary{{RightType},{LeftType}}.KeyCollection
  commentId: T:System.Collections.Generic.Dictionary{`1,`0}.KeyCollection
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2.KeyCollection
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<RightType, LeftType>.KeyCollection
  nameWithType: Dictionary<RightType, LeftType>.KeyCollection
  fullName: System.Collections.Generic.Dictionary<RightType, LeftType>.KeyCollection
  nameWithType.vb: Dictionary(Of RightType, LeftType).KeyCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of RightType, LeftType).KeyCollection
  name.vb: Dictionary(Of RightType, LeftType).KeyCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: RightType
  - name: ','
  - name: " "
  - name: LeftType
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary{`1,`0}.KeyCollection
    name: KeyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.keycollection
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: RightType
  - name: ','
  - name: " "
  - name: LeftType
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary{`1,`0}.KeyCollection
    name: KeyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.keycollection
- uid: SuperOffice.Util.TwoWayDictionary`2.Count*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Count
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Count
  name: Count
  nameWithType: TwoWayDictionary<LeftType, RightType>.Count
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Count
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Count
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Count
- uid: SuperOffice.Util.TwoWayDictionary`2.LeftValues*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.LeftValues
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_LeftValues
  name: LeftValues
  nameWithType: TwoWayDictionary<LeftType, RightType>.LeftValues
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.LeftValues
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).LeftValues
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).LeftValues
- uid: System.Collections.Generic.IEnumerable{{LeftType}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<LeftType>
  nameWithType: IEnumerable<LeftType>
  fullName: System.Collections.Generic.IEnumerable<LeftType>
  nameWithType.vb: IEnumerable(Of LeftType)
  fullName.vb: System.Collections.Generic.IEnumerable(Of LeftType)
  name.vb: IEnumerable(Of LeftType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: LeftType
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.RightValues*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.RightValues
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_RightValues
  name: RightValues
  nameWithType: TwoWayDictionary<LeftType, RightType>.RightValues
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.RightValues
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).RightValues
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).RightValues
- uid: System.Collections.Generic.IEnumerable{{RightType}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<RightType>
  nameWithType: IEnumerable<RightType>
  fullName: System.Collections.Generic.IEnumerable<RightType>
  nameWithType.vb: IEnumerable(Of RightType)
  fullName.vb: System.Collections.Generic.IEnumerable(Of RightType)
  name.vb: IEnumerable(Of RightType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: RightType
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: RightType
  - name: )
- uid: SuperOffice.Util.TwoWayDictionary`2.Values*
  commentId: Overload:SuperOffice.Util.TwoWayDictionary`2.Values
  isExternal: true
  href: SuperOffice.Util.TwoWayDictionary-2.html#SuperOffice_Util_TwoWayDictionary_2_Values
  name: Values
  nameWithType: TwoWayDictionary<LeftType, RightType>.Values
  fullName: SuperOffice.Util.TwoWayDictionary<LeftType, RightType>.Values
  nameWithType.vb: TwoWayDictionary(Of LeftType, RightType).Values
  fullName.vb: SuperOffice.Util.TwoWayDictionary(Of LeftType, RightType).Values
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{LeftType},{RightType}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<LeftType, RightType>>
  nameWithType: IEnumerable<KeyValuePair<LeftType, RightType>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LeftType, RightType>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of LeftType, RightType))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of LeftType, RightType))
  name.vb: IEnumerable(Of KeyValuePair(Of LeftType, RightType))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: LeftType
  - name: ','
  - name: " "
  - name: RightType
  - name: )
  - name: )
