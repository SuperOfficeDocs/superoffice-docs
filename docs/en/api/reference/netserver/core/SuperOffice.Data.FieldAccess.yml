### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.FieldAccess
  commentId: T:SuperOffice.Data.FieldAccess
  id: FieldAccess
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.FieldAccess.Mandatory
  - SuperOffice.Data.FieldAccess.Normal
  - SuperOffice.Data.FieldAccess.ReadOnly
  langs:
  - csharp
  - vb
  name: FieldAccess
  nameWithType: FieldAccess
  fullName: SuperOffice.Data.FieldAccess
  type: Enum
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nAccess restrictions and mandatory status, if any.\nThis Enum is used by:  ErpField.Access\n"
  syntax:
    content: 'public enum FieldAccess : short'
    content.vb: Public Enum FieldAccess As Short
  extensionMethods:
  - SuperOffice.Data.FieldAccess.EnumUtil.ConvertToFieldAccessInfo
  - SuperOffice.Data.FieldAccess.EnumUtil.MapEnums``2
  - SuperOffice.Data.FieldAccess.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.FieldAccess)
  - SuperOffice.Data.FieldAccess.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.FieldAccess.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: SuperOffice.Data.FieldAccess.Normal
  commentId: F:SuperOffice.Data.FieldAccess.Normal
  id: Normal
  parent: SuperOffice.Data.FieldAccess
  langs:
  - csharp
  - vb
  name: Normal
  nameWithType: FieldAccess.Normal
  fullName: SuperOffice.Data.FieldAccess.Normal
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n0: Normal field, no particular restrictions\n"
  syntax:
    content: Normal = 0
    return:
      type: SuperOffice.Data.FieldAccess
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.FieldAccess.Mandatory
  commentId: F:SuperOffice.Data.FieldAccess.Mandatory
  id: Mandatory
  parent: SuperOffice.Data.FieldAccess
  langs:
  - csharp
  - vb
  name: Mandatory
  nameWithType: FieldAccess.Mandatory
  fullName: SuperOffice.Data.FieldAccess.Mandatory
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n1: This field is mandatory.\n"
  syntax:
    content: Mandatory = 1
    return:
      type: SuperOffice.Data.FieldAccess
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Data.FieldAccess.ReadOnly
  commentId: F:SuperOffice.Data.FieldAccess.ReadOnly
  id: ReadOnly
  parent: SuperOffice.Data.FieldAccess
  langs:
  - csharp
  - vb
  name: ReadOnly
  nameWithType: FieldAccess.ReadOnly
  fullName: SuperOffice.Data.FieldAccess.ReadOnly
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\n2: This field is read-only.\n"
  syntax:
    content: ReadOnly = 2
    return:
      type: SuperOffice.Data.FieldAccess
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.FieldAccess.EnumUtil.ConvertToFieldAccessInfo
  commentId: M:EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
  parent: EnumUtil
  definition: EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
  name: ConvertToFieldAccessInfo()
  nameWithType: EnumUtil.ConvertToFieldAccessInfo()
  fullName: EnumUtil.ConvertToFieldAccessInfo()
  spec.csharp:
  - uid: EnumUtil.ConvertToFieldAccessInfo
    name: ConvertToFieldAccessInfo
    nameWithType: EnumUtil.ConvertToFieldAccessInfo
    fullName: EnumUtil.ConvertToFieldAccessInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.ConvertToFieldAccessInfo
    name: ConvertToFieldAccessInfo
    nameWithType: EnumUtil.ConvertToFieldAccessInfo
    fullName: EnumUtil.ConvertToFieldAccessInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.FieldAccess.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<FieldAccess, To>()
  nameWithType: EnumUtil.MapEnums<FieldAccess, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.FieldAccess, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of FieldAccess, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.FieldAccess, To)()
  name.vb: MapEnums(Of FieldAccess, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<FieldAccess, To>
    nameWithType: EnumUtil.MapEnums<FieldAccess, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.FieldAccess, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of FieldAccess, To)
    nameWithType: EnumUtil.MapEnums(Of FieldAccess, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.FieldAccess, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.FieldAccess.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.FieldAccess)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<FieldAccess>(FieldAccess)
  nameWithType: ObjectExtensions.AssignByReflection<FieldAccess>(FieldAccess)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.FieldAccess>(SuperOffice.Data.FieldAccess)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of FieldAccess)(FieldAccess)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.FieldAccess)(SuperOffice.Data.FieldAccess)
  name.vb: AssignByReflection(Of FieldAccess)(FieldAccess)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<FieldAccess>
    nameWithType: ObjectExtensions.AssignByReflection<FieldAccess>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.FieldAccess>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.FieldAccess
    name: FieldAccess
    nameWithType: FieldAccess
    fullName: SuperOffice.Data.FieldAccess
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of FieldAccess)
    nameWithType: ObjectExtensions.AssignByReflection(Of FieldAccess)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.FieldAccess)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.FieldAccess
    name: FieldAccess
    nameWithType: FieldAccess
    fullName: SuperOffice.Data.FieldAccess
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.FieldAccess.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<FieldAccess>()
  nameWithType: ObjectExtensions.GraphCopy<FieldAccess>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.FieldAccess>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of FieldAccess)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.FieldAccess)()
  name.vb: GraphCopy(Of FieldAccess)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<FieldAccess>
    nameWithType: ObjectExtensions.GraphCopy<FieldAccess>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.FieldAccess>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of FieldAccess)
    nameWithType: ObjectExtensions.GraphCopy(Of FieldAccess)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.FieldAccess)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.FieldAccess.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<FieldAccess, To>()
  nameWithType: Converters.MapEnums<FieldAccess, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.FieldAccess, To>()
  nameWithType.vb: Converters.MapEnums(Of FieldAccess, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.FieldAccess, To)()
  name.vb: MapEnums(Of FieldAccess, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<FieldAccess, To>
    nameWithType: Converters.MapEnums<FieldAccess, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.FieldAccess, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of FieldAccess, To)
    nameWithType: Converters.MapEnums(Of FieldAccess, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.FieldAccess, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
  commentId: M:EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
  isExternal: true
  name: ConvertToFieldAccessInfo(FieldAccess)
  nameWithType: EnumUtil.ConvertToFieldAccessInfo(FieldAccess)
  fullName: EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
  spec.csharp:
  - uid: EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
    name: ConvertToFieldAccessInfo
    nameWithType: EnumUtil.ConvertToFieldAccessInfo
    fullName: EnumUtil.ConvertToFieldAccessInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.FieldAccess
    name: FieldAccess
    nameWithType: FieldAccess
    fullName: SuperOffice.Data.FieldAccess
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.ConvertToFieldAccessInfo(SuperOffice.Data.FieldAccess)
    name: ConvertToFieldAccessInfo
    nameWithType: EnumUtil.ConvertToFieldAccessInfo
    fullName: EnumUtil.ConvertToFieldAccessInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.FieldAccess
    name: FieldAccess
    nameWithType: FieldAccess
    fullName: SuperOffice.Data.FieldAccess
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.FieldAccess
  commentId: T:SuperOffice.Data.FieldAccess
  parent: SuperOffice.Data
  isExternal: true
  name: FieldAccess
  nameWithType: FieldAccess
  fullName: SuperOffice.Data.FieldAccess
