### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Administration.UserPlugin
  commentId: T:SuperOffice.CRM.Administration.UserPlugin
  id: UserPlugin
  parent: SuperOffice.CRM.Administration
  children:
  - SuperOffice.CRM.Administration.UserPlugin.#ctor
  - SuperOffice.CRM.Administration.UserPlugin.ExtractEmail(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName(System.String)
  - SuperOffice.CRM.Administration.UserPlugin.ExtractLastName(System.String)
  - SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName(System.String)
  - SuperOffice.CRM.Administration.UserPlugin.ExtractName(SuperOffice.CRM.Entities.Person)
  - SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)
  - SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  - SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  - SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  langs:
  - csharp
  - vb
  name: UserPlugin
  nameWithType: UserPlugin
  fullName: SuperOffice.CRM.Administration.UserPlugin
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nDefault implementation of  User Name Plugins.  Overrides must be declared with \n<xref href=\"SuperOffice.CRM.Administration.UserPluginAttribute\" data-throw-if-not-resolved=\"false\"></xref> and a priority greater than 0.\n"
  syntax:
    content: >-
      [UserPlugin("DefaultUserPlugin", 1073741823)]

      public class UserPlugin : IUserPlugin, IPlugin
    content.vb: >-
      <UserPlugin("DefaultUserPlugin", 1073741823)>

      Public Class UserPlugin
          Implements IUserPlugin, IPlugin
  inheritance:
  - System.Object
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Administration.UserPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Administration.UserPlugin.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.UserPlugin)
  - SuperOffice.CRM.Administration.UserPlugin.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.CRM.Administration.UserPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.CRM.Administration.UserPluginAttribute
    ctor: SuperOffice.CRM.Administration.UserPluginAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: DefaultUserPlugin
    - type: System.Int32
      value: 1073741823
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultAssociateName(UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetDefaultAssociateName(UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default user name for a user.\n"
  syntax:
    content: public virtual string GetDefaultAssociateName(UserType type, Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
      description: Type of user.
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: "\nPerson this is a user for.  This value will be null (VB Noting) \nfor System and Anonymous users.\n"
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: Default user name validated with the provided <xref href="SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal" data-throw-if-not-resolved="false"></xref> delegate.
    content.vb: Public Overridable Function GetDefaultAssociateName(type As UserType, person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetValidAssociateName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetValidAssociateName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, System.String, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual string GetValidAssociateName(UserType type, Person person, string userName, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
    - id: person
      type: SuperOffice.CRM.Entities.Person
    - id: userName
      type: System.String
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    return:
      type: System.String
    content.vb: Public Overridable Function GetValidAssociateName(type As UserType, person As Person, userName As String, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ProcessProvidedAssociateName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.ProcessProvidedAssociateName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName(System.String, System.Int32, SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nDefault implementation returning the name provided.\n"
  syntax:
    content: public virtual string ProcessProvidedAssociateName(string providedUserName, int associateId, UserType type, Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: providedUserName
      type: System.String
      description: Provided user name
    - id: associateId
      type: System.Int32
      description: Associate id of the user.  The value 0 will be provided for new users.
    - id: type
      type: SuperOffice.License.UserType
      description: Type of user
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: Person this is a user for.  This value will be null (VB Noting) for System and Anonymous users.
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: User name validated with the provided <xref href="SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal" data-throw-if-not-resolved="false"></xref> delegate.
    content.vb: Public Overridable Function ProcessProvidedAssociateName(providedUserName As String, associateId As Integer, type As UserType, person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetDefaultInternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultInternalUserName(Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetDefaultInternalUserName(Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName(SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet user name for an internal user based on <xref href=\"SuperOffice.CRM.Administration.UserPlugin.ExtractName(SuperOffice.CRM.Entities.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: <xref href="SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String%2cSuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)" data-throw-if-not-resolved="false"></xref> ia used to validate the name.
  syntax:
    content: protected virtual string GetDefaultInternalUserName(Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: Person to get user name for.
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: User name for an internal user.
    content.vb: Protected Overridable Function GetDefaultInternalUserName(person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetDefaultExternalUserName(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultExternalUserName(Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetDefaultExternalUserName(Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName(SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet user name for an external user based on <xref href=\"SuperOffice.CRM.Administration.UserPlugin.ExtractEmail(SuperOffice.CRM.Entities.Person%2cSuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  remarks: <xref href="SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String%2cSuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)" data-throw-if-not-resolved="false"></xref> ia used to validate the name.
  syntax:
    content: protected virtual string GetDefaultExternalUserName(Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: Person to get user name for.
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: User name for an external user based on <xref href="SuperOffice.CRM.Administration.UserPlugin.ExtractEmail(SuperOffice.CRM.Entities.Person%2cSuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Function GetDefaultExternalUserName(person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetDefaultSystemUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultSystemUserName(CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetDefaultSystemUserName(CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default name for system users.\n"
  remarks: "\nThe <xref href=\"SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String%2cSuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)\" data-throw-if-not-resolved=\"false\"></xref> is used passing in System as base name.\n"
  syntax:
    content: protected virtual string GetDefaultSystemUserName(CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: Default name for validated using the validator.
    content.vb: Protected Overridable Function GetDefaultSystemUserName(validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetDefaultAnonymousUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultAnonymousUserName(CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetDefaultAnonymousUserName(CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName(SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default name for anonymous users.\n"
  remarks: "\nThe <xref href=\"SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String%2cSuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)\" data-throw-if-not-resolved=\"false\"></xref> is used passing in Anonymous as base name.\n"
  syntax:
    content: protected virtual string GetDefaultAnonymousUserName(CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: Default name for validated using the validator.
    content.vb: Protected Overridable Function GetDefaultAnonymousUserName(validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractName(SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ExtractName(SuperOffice.CRM.Entities.Person)
  id: ExtractName(SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ExtractName(Person)
  nameWithType: UserPlugin.ExtractName(Person)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractName(SuperOffice.CRM.Entities.Person)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nExtract a name from the person\n"
  remarks: "\nTakes first, midle and last names and procces them \ninduvidually and appending &apos;.&apos; between the name parts.\n"
  syntax:
    content: protected virtual string ExtractName(Person person)
    parameters:
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: Person to extract name from
    return:
      type: System.String
      description: User name extracted from a person.
    content.vb: Protected Overridable Function ExtractName(person As Person) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ExtractName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractEmail(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ExtractEmail(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: ExtractEmail(SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ExtractEmail(Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.ExtractEmail(Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractEmail(SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nExtract e-mail from a person.  If no valid e-mail is found, we try to fake something.\n"
  syntax:
    content: protected virtual string ExtractEmail(Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: Person to extract e-mail from.
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
      description: Validator to help check if the a user name is valid.
    return:
      type: System.String
      description: Extracted e-mail from a person.  If no valid e-mail was found, we tried to fake something.
    content.vb: Protected Overridable Function ExtractEmail(person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ExtractEmail*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName(System.String)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName(System.String)
  id: ExtractFirstName(System.String)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ExtractFirstName(String)
  nameWithType: UserPlugin.ExtractFirstName(String)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nUse the <xref href=\"SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to process the first name.\n"
  syntax:
    content: protected virtual string ExtractFirstName(string namePart)
    parameters:
    - id: namePart
      type: System.String
      description: The name part to process.
    return:
      type: System.String
      description: Processed name part.
    content.vb: Protected Overridable Function ExtractFirstName(namePart As String) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName(System.String)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName(System.String)
  id: ExtractMiddleName(System.String)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ExtractMiddleName(String)
  nameWithType: UserPlugin.ExtractMiddleName(String)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nUse the <xref href=\"SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to process the middl name.\n"
  syntax:
    content: protected virtual string ExtractMiddleName(string namePart)
    parameters:
    - id: namePart
      type: System.String
      description: The name part to process.
    return:
      type: System.String
      description: Processed name part.
    content.vb: Protected Overridable Function ExtractMiddleName(namePart As String) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractLastName(System.String)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ExtractLastName(System.String)
  id: ExtractLastName(System.String)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ExtractLastName(String)
  nameWithType: UserPlugin.ExtractLastName(String)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractLastName(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nUse the <xref href=\"SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to process the last name.\n"
  syntax:
    content: protected virtual string ExtractLastName(string namePart)
    parameters:
    - id: namePart
      type: System.String
      description: The name part to process.
    return:
      type: System.String
      description: Processed name part.
    content.vb: Protected Overridable Function ExtractLastName(namePart As String) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ExtractLastName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)
  id: ExtractNamePart(System.String)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ExtractNamePart(String)
  nameWithType: UserPlugin.ExtractNamePart(String)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nReplace invalid characters with empty strings. \n"
  syntax:
    content: protected virtual string ExtractNamePart(string namePart)
    parameters:
    - id: namePart
      type: System.String
      description: The name part to process.
    return:
      type: System.String
      description: Processed name part.
    content.vb: Protected Overridable Function ExtractNamePart(namePart As String) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: FindFirstValidated(System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: FindFirstValidated(String, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.FindFirstValidated(String, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated(System.String, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nFind the first available user name by appending a number.\n"
  remarks: "\nThe validator will be provided with the base name pluss a number starting at 1.  This\nnumber will be incremented untill a valid user name can be provided. Gives up when number 1000 is reached\n"
  syntax:
    content: protected virtual string FindFirstValidated(string baseUserName, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: baseUserName
      type: System.String
      description: Base user name.
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    return:
      type: System.String
      description: User name in the form of baseName+number where number > 0
    content.vb: Protected Overridable Function FindFirstValidated(baseUserName As String, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  id: GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultPrimaryGroup(UserType, Person)
  nameWithType: UserPlugin.GetDefaultPrimaryGroup(UserType, Person)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default primary group for the user.\n"
  syntax:
    content: public int GetDefaultPrimaryGroup(UserType type, Person person)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
      description: Type of user.
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: "\nPerson this is a user for.  This value will be null (VB Noting) \nfor System and Anonymous users.\n"
    return:
      type: System.Int32
      description: Default primary group id.
    content.vb: Public Function GetDefaultPrimaryGroup(type As UserType, person As Person) As Integer
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  id: GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultSecondaryGroups(UserType, Person)
  nameWithType: UserPlugin.GetDefaultSecondaryGroups(UserType, Person)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default secondary groups for the user\n"
  syntax:
    content: public int[] GetDefaultSecondaryGroups(UserType type, Person person)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
      description: Type of user.
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: "\nPerson this is a user for.  This value will be null (VB Noting) \nfor System and Anonymous users.\n"
    return:
      type: System.Int32[]
      description: Default secoundary group ids
    content.vb: Public Function GetDefaultSecondaryGroups(type As UserType, person As Person) As Integer()
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  id: GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultRole(UserType, Person)
  nameWithType: UserPlugin.GetDefaultRole(UserType, Person)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nGet default role id for the user\n"
  syntax:
    content: public int GetDefaultRole(UserType type, Person person)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
      description: Type of user.
    - id: person
      type: SuperOffice.CRM.Entities.Person
      description: "\nPerson this is a user for.  This value will be null (VB Noting) \nfor System and Anonymous users.\n"
    return:
      type: System.Int32
      description: Default role id for the user.
    content.vb: Public Function GetDefaultRole(type As UserType, person As Person) As Integer
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetValidAssociateUserName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetValidAssociateUserName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, System.String, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual string GetValidAssociateUserName(UserType type, Person person, string associateUserName, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
    - id: person
      type: SuperOffice.CRM.Entities.Person
    - id: associateUserName
      type: System.String
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    return:
      type: System.String
    content.vb: Public Overridable Function GetValidAssociateUserName(type As UserType, person As Person, associateUserName As String, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: ProcessProvidedAssociateUserName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.ProcessProvidedAssociateUserName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName(System.String, System.Int32, SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual string ProcessProvidedAssociateUserName(string providedAssociateUserName, int associateId, UserType type, Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: providedAssociateUserName
      type: System.String
    - id: associateId
      type: System.Int32
    - id: type
      type: SuperOffice.License.UserType
    - id: person
      type: SuperOffice.CRM.Entities.Person
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    return:
      type: System.String
    content.vb: Public Overridable Function ProcessProvidedAssociateUserName(providedAssociateUserName As String, associateId As Integer, type As UserType, person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  id: GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultAssociateUserName(UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: UserPlugin.GetDefaultAssociateUserName(UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual string GetDefaultAssociateUserName(UserType type, Person person, CheckIfAssociateNameIsLegal validator)
    parameters:
    - id: type
      type: SuperOffice.License.UserType
    - id: person
      type: SuperOffice.CRM.Entities.Person
    - id: validator
      type: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    return:
      type: System.String
    content.vb: Public Overridable Function GetDefaultAssociateUserName(type As UserType, person As Person, validator As CheckIfAssociateNameIsLegal) As String
  overload: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName*
  implements:
  - SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.UserPlugin.#ctor
  commentId: M:SuperOffice.CRM.Administration.UserPlugin.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Administration.UserPlugin
  langs:
  - csharp
  - vb
  name: UserPlugin()
  nameWithType: UserPlugin.UserPlugin()
  fullName: SuperOffice.CRM.Administration.UserPlugin.UserPlugin()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public UserPlugin()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Administration.UserPlugin.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Administration.IUserPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: IUserPlugin
  nameWithType: IUserPlugin
  fullName: SuperOffice.CRM.Administration.IUserPlugin
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<UserPlugin, To>()
  nameWithType: EnumUtil.MapEnums<UserPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.UserPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of UserPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.UserPlugin, To)()
  name.vb: MapEnums(Of UserPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<UserPlugin, To>
    nameWithType: EnumUtil.MapEnums<UserPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.UserPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of UserPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of UserPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.UserPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.UserPlugin)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<UserPlugin>(UserPlugin)
  nameWithType: ObjectExtensions.AssignByReflection<UserPlugin>(UserPlugin)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Administration.UserPlugin>(SuperOffice.CRM.Administration.UserPlugin)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of UserPlugin)(UserPlugin)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Administration.UserPlugin)(SuperOffice.CRM.Administration.UserPlugin)
  name.vb: AssignByReflection(Of UserPlugin)(UserPlugin)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<UserPlugin>
    nameWithType: ObjectExtensions.AssignByReflection<UserPlugin>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Administration.UserPlugin>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Administration.UserPlugin
    name: UserPlugin
    nameWithType: UserPlugin
    fullName: SuperOffice.CRM.Administration.UserPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of UserPlugin)
    nameWithType: ObjectExtensions.AssignByReflection(Of UserPlugin)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Administration.UserPlugin)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Administration.UserPlugin
    name: UserPlugin
    nameWithType: UserPlugin
    fullName: SuperOffice.CRM.Administration.UserPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<UserPlugin>()
  nameWithType: ObjectExtensions.GraphCopy<UserPlugin>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Administration.UserPlugin>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of UserPlugin)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Administration.UserPlugin)()
  name.vb: GraphCopy(Of UserPlugin)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<UserPlugin>
    nameWithType: ObjectExtensions.GraphCopy<UserPlugin>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Administration.UserPlugin>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of UserPlugin)
    nameWithType: ObjectExtensions.GraphCopy(Of UserPlugin)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Administration.UserPlugin)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<UserPlugin, To>()
  nameWithType: Converters.MapEnums<UserPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.UserPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of UserPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.UserPlugin, To)()
  name.vb: MapEnums(Of UserPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<UserPlugin, To>
    nameWithType: Converters.MapEnums<UserPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.UserPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of UserPlugin, To)
    nameWithType: Converters.MapEnums(Of UserPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.UserPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName
  isExternal: true
  name: GetDefaultAssociateName
  nameWithType: UserPlugin.GetDefaultAssociateName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateName
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetDefaultAssociateName(UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: IUserPlugin.GetDefaultAssociateName(UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetDefaultAssociateName
    nameWithType: IUserPlugin.GetDefaultAssociateName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetDefaultAssociateName
    nameWithType: IUserPlugin.GetDefaultAssociateName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.CRM.Entities.Person
  commentId: T:SuperOffice.CRM.Entities.Person
  parent: SuperOffice.CRM.Entities
  isExternal: true
  name: Person
  nameWithType: Person
  fullName: SuperOffice.CRM.Entities.Person
- uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
  commentId: T:SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: CheckIfAssociateNameIsLegal
  nameWithType: CheckIfAssociateNameIsLegal
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
- uid: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName
  isExternal: true
  name: GetValidAssociateName
  nameWithType: UserPlugin.GetValidAssociateName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateName
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetValidAssociateName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  nameWithType: IUserPlugin.GetValidAssociateName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, System.String, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetValidAssociateName
    nameWithType: IUserPlugin.GetValidAssociateName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetValidAssociateName
    nameWithType: IUserPlugin.GetValidAssociateName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName
  isExternal: true
  name: ProcessProvidedAssociateName
  nameWithType: UserPlugin.ProcessProvidedAssociateName
  fullName: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateName
- uid: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: ProcessProvidedAssociateName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: IUserPlugin.ProcessProvidedAssociateName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName(System.String, System.Int32, SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: ProcessProvidedAssociateName
    nameWithType: IUserPlugin.ProcessProvidedAssociateName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: ProcessProvidedAssociateName
    nameWithType: IUserPlugin.ProcessProvidedAssociateName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName
  isExternal: true
  name: GetDefaultInternalUserName
  nameWithType: UserPlugin.GetDefaultInternalUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultInternalUserName
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName
  isExternal: true
  name: GetDefaultExternalUserName
  nameWithType: UserPlugin.GetDefaultExternalUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultExternalUserName
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName
  isExternal: true
  name: GetDefaultSystemUserName
  nameWithType: UserPlugin.GetDefaultSystemUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSystemUserName
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName
  isExternal: true
  name: GetDefaultAnonymousUserName
  nameWithType: UserPlugin.GetDefaultAnonymousUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAnonymousUserName
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ExtractName
  isExternal: true
  name: ExtractName
  nameWithType: UserPlugin.ExtractName
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractName
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractEmail*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ExtractEmail
  isExternal: true
  name: ExtractEmail
  nameWithType: UserPlugin.ExtractEmail
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractEmail
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName
  isExternal: true
  name: ExtractFirstName
  nameWithType: UserPlugin.ExtractFirstName
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractFirstName
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName
  isExternal: true
  name: ExtractMiddleName
  nameWithType: UserPlugin.ExtractMiddleName
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractMiddleName
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractLastName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ExtractLastName
  isExternal: true
  name: ExtractLastName
  nameWithType: UserPlugin.ExtractLastName
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractLastName
- uid: SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart
  isExternal: true
  name: ExtractNamePart
  nameWithType: UserPlugin.ExtractNamePart
  fullName: SuperOffice.CRM.Administration.UserPlugin.ExtractNamePart
- uid: SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated
  isExternal: true
  name: FindFirstValidated
  nameWithType: UserPlugin.FindFirstValidated
  fullName: SuperOffice.CRM.Administration.UserPlugin.FindFirstValidated
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup
  isExternal: true
  name: GetDefaultPrimaryGroup
  nameWithType: UserPlugin.GetDefaultPrimaryGroup
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultPrimaryGroup
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetDefaultPrimaryGroup(UserType, Person)
  nameWithType: IUserPlugin.GetDefaultPrimaryGroup(UserType, Person)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
    name: GetDefaultPrimaryGroup
    nameWithType: IUserPlugin.GetDefaultPrimaryGroup
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
    name: GetDefaultPrimaryGroup
    nameWithType: IUserPlugin.GetDefaultPrimaryGroup
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultPrimaryGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups
  isExternal: true
  name: GetDefaultSecondaryGroups
  nameWithType: UserPlugin.GetDefaultSecondaryGroups
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultSecondaryGroups
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetDefaultSecondaryGroups(UserType, Person)
  nameWithType: IUserPlugin.GetDefaultSecondaryGroups(UserType, Person)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
    name: GetDefaultSecondaryGroups
    nameWithType: IUserPlugin.GetDefaultSecondaryGroups
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
    name: GetDefaultSecondaryGroups
    nameWithType: IUserPlugin.GetDefaultSecondaryGroups
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultSecondaryGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole
  isExternal: true
  name: GetDefaultRole
  nameWithType: UserPlugin.GetDefaultRole
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultRole
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetDefaultRole(UserType, Person)
  nameWithType: IUserPlugin.GetDefaultRole(UserType, Person)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
    name: GetDefaultRole
    nameWithType: IUserPlugin.GetDefaultRole
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person)
    name: GetDefaultRole
    nameWithType: IUserPlugin.GetDefaultRole
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultRole
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName
  isExternal: true
  name: GetValidAssociateUserName
  nameWithType: UserPlugin.GetValidAssociateUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetValidAssociateUserName
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetValidAssociateUserName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  nameWithType: IUserPlugin.GetValidAssociateUserName(UserType, Person, String, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, System.String, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetValidAssociateUserName
    nameWithType: IUserPlugin.GetValidAssociateUserName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,System.String,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetValidAssociateUserName
    nameWithType: IUserPlugin.GetValidAssociateUserName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetValidAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName
  isExternal: true
  name: ProcessProvidedAssociateUserName
  nameWithType: UserPlugin.ProcessProvidedAssociateUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.ProcessProvidedAssociateUserName
- uid: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: ProcessProvidedAssociateUserName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: IUserPlugin.ProcessProvidedAssociateUserName(String, Int32, UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName(System.String, System.Int32, SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: ProcessProvidedAssociateUserName
    nameWithType: IUserPlugin.ProcessProvidedAssociateUserName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName(System.String,System.Int32,SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: ProcessProvidedAssociateUserName
    nameWithType: IUserPlugin.ProcessProvidedAssociateUserName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.ProcessProvidedAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName
  isExternal: true
  name: GetDefaultAssociateUserName
  nameWithType: UserPlugin.GetDefaultAssociateUserName
  fullName: SuperOffice.CRM.Administration.UserPlugin.GetDefaultAssociateUserName
- uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  commentId: M:SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  parent: SuperOffice.CRM.Administration.IUserPlugin
  isExternal: true
  name: GetDefaultAssociateUserName(UserType, Person, CheckIfAssociateNameIsLegal)
  nameWithType: IUserPlugin.GetDefaultAssociateUserName(UserType, Person, CheckIfAssociateNameIsLegal)
  fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType, SuperOffice.CRM.Entities.Person, SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetDefaultAssociateUserName
    nameWithType: IUserPlugin.GetDefaultAssociateUserName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName(SuperOffice.License.UserType,SuperOffice.CRM.Entities.Person,SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal)
    name: GetDefaultAssociateUserName
    nameWithType: IUserPlugin.GetDefaultAssociateUserName
    fullName: SuperOffice.CRM.Administration.IUserPlugin.GetDefaultAssociateUserName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    nameWithType: Person
    fullName: SuperOffice.CRM.Entities.Person
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    name: CheckIfAssociateNameIsLegal
    nameWithType: CheckIfAssociateNameIsLegal
    fullName: SuperOffice.CRM.Administration.CheckIfAssociateNameIsLegal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserPlugin.#ctor*
  commentId: Overload:SuperOffice.CRM.Administration.UserPlugin.#ctor
  isExternal: true
  name: UserPlugin
  nameWithType: UserPlugin.UserPlugin
  fullName: SuperOffice.CRM.Administration.UserPlugin.UserPlugin
