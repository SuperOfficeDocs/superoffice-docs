### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  id: ObjectExtensions
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  - SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  langs:
  - csharp
  - vb
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nExtension class used to provide various functionality to all CLR objects.\n"
  syntax:
    content: 'public static class ObjectExtensions : Object'
    content.vb: >-
      Public Module ObjectExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  id: AssignByReflection``1(``0,``0)
  isExtensionMethod: true
  parent: SuperOffice.Util.ObjectExtensions
  langs:
  - csharp
  - vb
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nCopies all public writable &amp; public properties from the source-instance to the provided\ntarget instance.\nThis operation is applied recursively for all non-primitive types, meaning that the two instances\nshould be 100% independent and unable to mutate each others members.\n<remarks>\nFields and private members are not copied or assigned.\nIf the type depends on private state to function, the copy may not work as expected.\n</remarks>\n"
  syntax:
    content: >-
      public static void AssignByReflection<T>(this T source, T destination)
          where T : new()
    parameters:
    - id: source
      type: '{T}'
      description: Source instance
    - id: destination
      type: '{T}'
      description: Targetinstance
    typeParameters:
    - id: T
      description: Type of object whose properties we want to copy.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AssignByReflection(Of T As New)(source As T, destination As T)
  overload: SuperOffice.Util.ObjectExtensions.AssignByReflection*
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  id: GraphCopy``1(``0)
  isExtensionMethod: true
  parent: SuperOffice.Util.ObjectExtensions
  langs:
  - csharp
  - vb
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nCreates a copy of the provided object-graph by copying all public properties of the provided\ninstance.\nThis operation is applied recursively for all non-primitive types, meaning that the resulting instance\nshould be 100% independent from the instance provided and that the two instances should be unable to\nmutate each others members.\n<remarks>\nFields and private members are not copied or assigned.\nIf the type depends on private state to function, the copy may not work as expected.\n</remarks>\n"
  syntax:
    content: >-
      public static T GraphCopy<T>(this T source)
          where T : new()
    parameters:
    - id: source
      type: '{T}'
      description: Source instance
    typeParameters:
    - id: T
      description: Type of object whose properties we want to copy.
    return:
      type: '{T}'
      description: A 100% independent copy.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GraphCopy(Of T As New)(source As T) As T
  overload: SuperOffice.Util.ObjectExtensions.GraphCopy*
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection*
  commentId: Overload:SuperOffice.Util.ObjectExtensions.AssignByReflection
  isExternal: true
  name: AssignByReflection
  nameWithType: ObjectExtensions.AssignByReflection
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy*
  commentId: Overload:SuperOffice.Util.ObjectExtensions.GraphCopy
  isExternal: true
  name: GraphCopy
  nameWithType: ObjectExtensions.GraphCopy
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy
