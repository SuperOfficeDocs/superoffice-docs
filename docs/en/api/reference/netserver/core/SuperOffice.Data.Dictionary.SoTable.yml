### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  id: SoTable
  parent: SuperOffice.Data.Dictionary
  children:
  - SuperOffice.Data.Dictionary.SoTable.AdditionalFields
  - SuperOffice.Data.Dictionary.SoTable.AdditionalValues
  - SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid
  - SuperOffice.Data.Dictionary.SoTable.DbName
  - SuperOffice.Data.Dictionary.SoTable.DoNotReplicate
  - SuperOffice.Data.Dictionary.SoTable.Equals(SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Dictionary.SoTable.Equals(System.Object)
  - SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging
  - SuperOffice.Data.Dictionary.SoTable.Fields
  - SuperOffice.Data.Dictionary.SoTable.FreetextIndex
  - SuperOffice.Data.Dictionary.SoTable.GenerationState
  - SuperOffice.Data.Dictionary.SoTable.GetHashCode
  - SuperOffice.Data.Dictionary.SoTable.GetRelations
  - SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable(SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Dictionary.SoTable.GetTableInfo
  - SuperOffice.Data.Dictionary.SoTable.HashCheckFields
  - SuperOffice.Data.Dictionary.SoTable.HasSoftDelete
  - SuperOffice.Data.Dictionary.SoTable.HasTextExtensions
  - SuperOffice.Data.Dictionary.SoTable.IsMDOList
  - SuperOffice.Data.Dictionary.SoTable.IsTableRelated(SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Dictionary.SoTable.Item(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.Dictionary.SoTable.Item(System.Int32)
  - SuperOffice.Data.Dictionary.SoTable.Item(System.String)
  - SuperOffice.Data.Dictionary.SoTable.KeepInCache
  - SuperOffice.Data.Dictionary.SoTable.Kind
  - SuperOffice.Data.Dictionary.SoTable.MDOListInfo
  - SuperOffice.Data.Dictionary.SoTable.Name
  - SuperOffice.Data.Dictionary.SoTable.NumFields
  - SuperOffice.Data.Dictionary.SoTable.op_Equality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Dictionary.SoTable.op_Inequality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Dictionary.SoTable.PrivacyTags
  - SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement
  - SuperOffice.Data.Dictionary.SoTable.ReplicateDown
  - SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype
  - SuperOffice.Data.Dictionary.SoTable.ReplicateUp
  - SuperOffice.Data.Dictionary.SoTable.SequenceId
  - SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate
  - SuperOffice.Data.Dictionary.SoTable.SystemTable
  - SuperOffice.Data.Dictionary.SoTable.TableNumber
  - SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp
  - SuperOffice.Data.Dictionary.SoTable.ToString
  - SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog
  langs:
  - csharp
  - vb
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nTable description according to the deployed dictionary and friends. All relevant dictionary bits, naming convetions\nand preferences are collected and decoded here, to hide the ugly details of history...\n"
  remarks: "\nThe details around transaction logging are based on the code found DBDLL/DBAS.CPP around line 2800 in the C++ client.\n"
  syntax:
    content: 'public class SoTable : IEquatable<SoTable>'
    content.vb: >-
      Public Class SoTable
          Implements IEquatable(Of SoTable)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{SuperOffice.Data.Dictionary.SoTable}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.Dictionary.SoTable.EnumUtil.MapEnums``2
  - SuperOffice.Data.Dictionary.SoTable.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.Dictionary.SoTable.GetRelations
  commentId: M:SuperOffice.Data.Dictionary.SoTable.GetRelations
  id: GetRelations
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: GetRelations()
  nameWithType: SoTable.GetRelations()
  fullName: SuperOffice.Data.Dictionary.SoTable.GetRelations()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet all the relations the table is involved in.\n"
  syntax:
    content: public IEnumerable<SoRelation> GetRelations()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoRelation}
    content.vb: Public Function GetRelations As IEnumerable(Of SoRelation)
  overload: SuperOffice.Data.Dictionary.SoTable.GetRelations*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable(SuperOffice.Data.Dictionary.SoTable)
  id: GetRelationsWithTable(SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: GetRelationsWithTable(SoTable)
  nameWithType: SoTable.GetRelationsWithTable(SoTable)
  fullName: SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable(SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet all relations that the table is involved in towards the provided table.\n"
  syntax:
    content: public IEnumerable<SoRelation> GetRelationsWithTable(SoTable table)
    parameters:
    - id: table
      type: SuperOffice.Data.Dictionary.SoTable
      description: Other table taking part of the relation.
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoRelation}
      description: Relations with the other table.
    content.vb: Public Function GetRelationsWithTable(table As SoTable) As IEnumerable(Of SoRelation)
  overload: SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dictionary.SoTable.IsTableRelated(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Dictionary.SoTable.IsTableRelated(SuperOffice.Data.Dictionary.SoTable)
  id: IsTableRelated(SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: IsTableRelated(SoTable)
  nameWithType: SoTable.IsTableRelated(SoTable)
  fullName: SuperOffice.Data.Dictionary.SoTable.IsTableRelated(SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table related to the provided table.\n"
  syntax:
    content: public bool IsTableRelated(SoTable table)
    parameters:
    - id: table
      type: SuperOffice.Data.Dictionary.SoTable
      description: Table to check if it has relations to.
    return:
      type: System.Boolean
      description: True if the two tables are related.
    content.vb: Public Function IsTableRelated(table As SoTable) As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.IsTableRelated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dictionary.SoTable.GetTableInfo
  commentId: M:SuperOffice.Data.Dictionary.SoTable.GetTableInfo
  id: GetTableInfo
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: GetTableInfo()
  nameWithType: SoTable.GetTableInfo()
  fullName: SuperOffice.Data.Dictionary.SoTable.GetTableInfo()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet a new instance of <xref href=\"SuperOffice.Data.SQL.TableInfo\" data-throw-if-not-resolved=\"false\"></xref> representing the defenition of the table.\n"
  syntax:
    content: public TableInfo GetTableInfo()
    return:
      type: SuperOffice.Data.SQL.TableInfo
      description: New instance of <xref href="SuperOffice.Data.SQL.TableInfo" data-throw-if-not-resolved="false"></xref> representing the defenition of the table.
    content.vb: Public Function GetTableInfo As TableInfo
  overload: SuperOffice.Data.Dictionary.SoTable.GetTableInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dictionary.SoTable.ToString
  commentId: M:SuperOffice.Data.Dictionary.SoTable.ToString
  id: ToString
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SoTable.ToString()
  fullName: SuperOffice.Data.Dictionary.SoTable.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nName of the table for debug purposes.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: Name of the table for debug purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.Data.Dictionary.SoTable.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.Dictionary.SoTable.Equals(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Dictionary.SoTable.Equals(SuperOffice.Data.Dictionary.SoTable)
  id: Equals(SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Equals(SoTable)
  nameWithType: SoTable.Equals(SoTable)
  fullName: SuperOffice.Data.Dictionary.SoTable.Equals(SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nOverrided equals comparer that is valid accross database sessions\n"
  syntax:
    content: public bool Equals(SoTable other)
    parameters:
    - id: other
      type: SuperOffice.Data.Dictionary.SoTable
      description: Object to compare too
    return:
      type: System.Boolean
      description: True if equal
    content.vb: Public Function Equals(other As SoTable) As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.Equals*
  implements:
  - System.IEquatable{SuperOffice.Data.Dictionary.SoTable}.Equals(SuperOffice.Data.Dictionary.SoTable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dictionary.SoTable.Equals(System.Object)
  commentId: M:SuperOffice.Data.Dictionary.SoTable.Equals(System.Object)
  id: Equals(System.Object)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SoTable.Equals(Object)
  fullName: SuperOffice.Data.Dictionary.SoTable.Equals(System.Object)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nOverrided equals comparer that is valid accross database sessions\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object to compare too
    return:
      type: System.Boolean
      description: True if equal
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: SuperOffice.Data.Dictionary.SoTable.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.Dictionary.SoTable.op_Equality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Dictionary.SoTable.op_Equality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  id: op_Equality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Equality(SoTable, SoTable)
  nameWithType: SoTable.Equality(SoTable, SoTable)
  fullName: SuperOffice.Data.Dictionary.SoTable.Equality(SuperOffice.Data.Dictionary.SoTable, SuperOffice.Data.Dictionary.SoTable)
  type: Operator
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  syntax:
    content: public static bool operator ==(SoTable x, SoTable y)
    parameters:
    - id: x
      type: SuperOffice.Data.Dictionary.SoTable
    - id: y
      type: SuperOffice.Data.Dictionary.SoTable
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x As SoTable, y As SoTable) As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Dictionary.SoTable.op_Inequality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Dictionary.SoTable.op_Inequality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  id: op_Inequality(SuperOffice.Data.Dictionary.SoTable,SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Inequality(SoTable, SoTable)
  nameWithType: SoTable.Inequality(SoTable, SoTable)
  fullName: SuperOffice.Data.Dictionary.SoTable.Inequality(SuperOffice.Data.Dictionary.SoTable, SuperOffice.Data.Dictionary.SoTable)
  type: Operator
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  syntax:
    content: public static bool operator !=(SoTable x, SoTable y)
    parameters:
    - id: x
      type: SuperOffice.Data.Dictionary.SoTable
    - id: y
      type: SuperOffice.Data.Dictionary.SoTable
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x As SoTable, y As SoTable) As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Dictionary.SoTable.GetHashCode
  commentId: M:SuperOffice.Data.Dictionary.SoTable.GetHashCode
  id: GetHashCode
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SoTable.GetHashCode()
  fullName: SuperOffice.Data.Dictionary.SoTable.GetHashCode()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nHash code valid accross database sessions.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code valid accross database sessions.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: SuperOffice.Data.Dictionary.SoTable.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.Dictionary.SoTable.AdditionalValues
  commentId: P:SuperOffice.Data.Dictionary.SoTable.AdditionalValues
  id: AdditionalValues
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: AdditionalValues
  nameWithType: SoTable.AdditionalValues
  fullName: SuperOffice.Data.Dictionary.SoTable.AdditionalValues
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nAdditional meta-data on the table key/value dictionary from the DatabaseModel. \ne.g. &quot;SoftDelete&quot; = &quot;true&quot;\n"
  syntax:
    content: public Dictionary<string, string> AdditionalValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property AdditionalValues As Dictionary(Of String, String)
  overload: SuperOffice.Data.Dictionary.SoTable.AdditionalValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.PrivacyTags
  commentId: P:SuperOffice.Data.Dictionary.SoTable.PrivacyTags
  id: PrivacyTags
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: PrivacyTags
  nameWithType: SoTable.PrivacyTags
  fullName: SuperOffice.Data.Dictionary.SoTable.PrivacyTags
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nSet of privacy tags on the table from the DatabaseModel\n"
  syntax:
    content: public HashSet<string> PrivacyTags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public ReadOnly Property PrivacyTags As HashSet(Of String)
  overload: SuperOffice.Data.Dictionary.SoTable.PrivacyTags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.Item(System.Int32)
  commentId: P:SuperOffice.Data.Dictionary.SoTable.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SoTable.Item[Int32]
  fullName: SuperOffice.Data.Dictionary.SoTable.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet the SoField located at the given position in the table definition\n"
  syntax:
    content: public SoField this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SuperOffice.Data.Dictionary.SoField
    content.vb: Public ReadOnly Property Item(index As Integer) As SoField
  overload: SuperOffice.Data.Dictionary.SoTable.Item*
  nameWithType.vb: SoTable.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.Dictionary.SoTable.Item(System.Int32)
  name.vb: Item(Int32)
- uid: SuperOffice.Data.Dictionary.SoTable.AdditionalFields
  commentId: P:SuperOffice.Data.Dictionary.SoTable.AdditionalFields
  id: AdditionalFields
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: AdditionalFields
  nameWithType: SoTable.AdditionalFields
  fullName: SuperOffice.Data.Dictionary.SoTable.AdditionalFields
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nThis list contains SoField objects for those fields that are in the database, but were not known\nat the time the NetServer code was generated. See <xref href=\"SuperOffice.Data.Dictionary.CodeGenerationState\" data-throw-if-not-resolved=\"false\"></xref>; all these fields\n<strong>are present</strong> in the main SoField collection, this list exists as an optimization.\n"
  remarks: "\nExtra fields only.\n"
  syntax:
    content: public List<SoField> AdditionalFields { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SuperOffice.Data.Dictionary.SoField}
    content.vb: Public ReadOnly Property AdditionalFields As List(Of SoField)
  overload: SuperOffice.Data.Dictionary.SoTable.AdditionalFields*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.Item(System.String)
  commentId: P:SuperOffice.Data.Dictionary.SoTable.Item(System.String)
  id: Item(System.String)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SoTable.Item[String]
  fullName: SuperOffice.Data.Dictionary.SoTable.Item[System.String]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet the SoField corresponding to the given field name (not case sensitive)\n"
  syntax:
    content: public SoField this[string fieldName] { get; }
    parameters:
    - id: fieldName
      type: System.String
    return:
      type: SuperOffice.Data.Dictionary.SoField
    content.vb: Public ReadOnly Property Item(fieldName As String) As SoField
  overload: SuperOffice.Data.Dictionary.SoTable.Item*
  nameWithType.vb: SoTable.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.Dictionary.SoTable.Item(System.String)
  name.vb: Item(String)
- uid: SuperOffice.Data.Dictionary.SoTable.Item(SuperOffice.Data.SQL.FieldInfo)
  commentId: P:SuperOffice.Data.Dictionary.SoTable.Item(SuperOffice.Data.SQL.FieldInfo)
  id: Item(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Item[FieldInfo]
  nameWithType: SoTable.Item[FieldInfo]
  fullName: SuperOffice.Data.Dictionary.SoTable.Item[SuperOffice.Data.SQL.FieldInfo]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet the SoField corresponding to the given FieldInfo object, by its name\n"
  syntax:
    content: public SoField this[FieldInfo fieldInfo] { get; }
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: SuperOffice.Data.Dictionary.SoField
    content.vb: Public ReadOnly Property Item(fieldInfo As FieldInfo) As SoField
  overload: SuperOffice.Data.Dictionary.SoTable.Item*
  nameWithType.vb: SoTable.Item(FieldInfo)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.Dictionary.SoTable.Item(SuperOffice.Data.SQL.FieldInfo)
  name.vb: Item(FieldInfo)
- uid: SuperOffice.Data.Dictionary.SoTable.NumFields
  commentId: P:SuperOffice.Data.Dictionary.SoTable.NumFields
  id: NumFields
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: NumFields
  nameWithType: SoTable.NumFields
  fullName: SuperOffice.Data.Dictionary.SoTable.NumFields
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet the number of fields in this table\n"
  syntax:
    content: public int NumFields { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumFields As Integer
  overload: SuperOffice.Data.Dictionary.SoTable.NumFields*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.GenerationState
  commentId: P:SuperOffice.Data.Dictionary.SoTable.GenerationState
  id: GenerationState
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: GenerationState
  nameWithType: SoTable.GenerationState
  fullName: SuperOffice.Data.Dictionary.SoTable.GenerationState
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nRelation between the generated code in NetServer and the actual database state, applies to both tables and fields\n"
  syntax:
    content: public CodeGenerationState GenerationState { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.CodeGenerationState
    content.vb: Public ReadOnly Property GenerationState As CodeGenerationState
  overload: SuperOffice.Data.Dictionary.SoTable.GenerationState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.Fields
  commentId: P:SuperOffice.Data.Dictionary.SoTable.Fields
  id: Fields
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: SoTable.Fields
  fullName: SuperOffice.Data.Dictionary.SoTable.Fields
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet a list of all the Fields in the deployed dictionary. Including the <xref href=\"SuperOffice.Data.Dictionary.SoTable.AdditionalFields\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public SoField[] Fields { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.SoField[]
    content.vb: Public ReadOnly Property Fields As SoField()
  overload: SuperOffice.Data.Dictionary.SoTable.Fields*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.HashCheckFields
  commentId: P:SuperOffice.Data.Dictionary.SoTable.HashCheckFields
  id: HashCheckFields
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: HashCheckFields
  nameWithType: SoTable.HashCheckFields
  fullName: SuperOffice.Data.Dictionary.SoTable.HashCheckFields
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nGet an enumeration of all fields involved in hash checks, either as source or as the checksum\n"
  syntax:
    content: public IEnumerable<SoField> HashCheckFields { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoField}
    content.vb: Public ReadOnly Property HashCheckFields As IEnumerable(Of SoField)
  overload: SuperOffice.Data.Dictionary.SoTable.HashCheckFields*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.Name
  commentId: P:SuperOffice.Data.Dictionary.SoTable.Name
  id: Name
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: SoTable.Name
  fullName: SuperOffice.Data.Dictionary.SoTable.Name
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nConceptual name of the table (the real name of the table, independent of database)\n"
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SuperOffice.Data.Dictionary.SoTable.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.DbName
  commentId: P:SuperOffice.Data.Dictionary.SoTable.DbName
  id: DbName
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: DbName
  nameWithType: SoTable.DbName
  fullName: SuperOffice.Data.Dictionary.SoTable.DbName
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nName of the table in the database\n"
  syntax:
    content: public string DbName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DbName As String
  overload: SuperOffice.Data.Dictionary.SoTable.DbName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.TableNumber
  commentId: P:SuperOffice.Data.Dictionary.SoTable.TableNumber
  id: TableNumber
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: TableNumber
  nameWithType: SoTable.TableNumber
  fullName: SuperOffice.Data.Dictionary.SoTable.TableNumber
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nNumber used on the table in the database when it is referenced.\nExamples are TravelTransactionLog and ForeignKey. It is not the \nsame as <xref href=\"SuperOffice.Data.Dictionary.SoTable.SequenceId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public int TableNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TableNumber As Integer
  overload: SuperOffice.Data.Dictionary.SoTable.TableNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.SequenceId
  commentId: P:SuperOffice.Data.Dictionary.SoTable.SequenceId
  id: SequenceId
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: SequenceId
  nameWithType: SoTable.SequenceId
  fullName: SuperOffice.Data.Dictionary.SoTable.SequenceId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nID used for the table in the sequence table. For ForeignKey and\nTravelTransactionLog entries, <xref href=\"SuperOffice.Data.Dictionary.SoTable.TableNumber\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public int SequenceId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SequenceId As Integer
  overload: SuperOffice.Data.Dictionary.SoTable.SequenceId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.FreetextIndex
  commentId: P:SuperOffice.Data.Dictionary.SoTable.FreetextIndex
  id: FreetextIndex
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: FreetextIndex
  nameWithType: SoTable.FreetextIndex
  fullName: SuperOffice.Data.Dictionary.SoTable.FreetextIndex
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked for freetext indexing\n"
  syntax:
    content: public bool FreetextIndex { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property FreetextIndex As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.FreetextIndex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging
  commentId: P:SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging
  id: FieldLevelLogging
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: FieldLevelLogging
  nameWithType: SoTable.FieldLevelLogging
  fullName: SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked for field-level logging\n"
  syntax:
    content: public bool FieldLevelLogging { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property FieldLevelLogging As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicateDown
  commentId: P:SuperOffice.Data.Dictionary.SoTable.ReplicateDown
  id: ReplicateDown
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: ReplicateDown
  nameWithType: SoTable.ReplicateDown
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicateDown
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with ReplicateDown in the dictionary\n"
  syntax:
    content: public bool ReplicateDown { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ReplicateDown As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.ReplicateDown*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicateUp
  commentId: P:SuperOffice.Data.Dictionary.SoTable.ReplicateUp
  id: ReplicateUp
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: ReplicateUp
  nameWithType: SoTable.ReplicateUp
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicateUp
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with ReplicateUp in the dictionary\n"
  syntax:
    content: public bool ReplicateUp { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ReplicateUp As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.ReplicateUp*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement
  commentId: P:SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement
  id: ReplicateAreaManagement
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: ReplicateAreaManagement
  nameWithType: SoTable.ReplicateAreaManagement
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with ReplicateAreaManagement in the dictionary\n"
  syntax:
    content: public bool ReplicateAreaManagement { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ReplicateAreaManagement As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype
  commentId: P:SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype
  id: ReplicatePrototype
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: ReplicatePrototype
  nameWithType: SoTable.ReplicatePrototype
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with ReplicatePrototype in the dictionary\n"
  syntax:
    content: public bool ReplicatePrototype { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ReplicatePrototype As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.DoNotReplicate
  commentId: P:SuperOffice.Data.Dictionary.SoTable.DoNotReplicate
  id: DoNotReplicate
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: DoNotReplicate
  nameWithType: SoTable.DoNotReplicate
  fullName: SuperOffice.Data.Dictionary.SoTable.DoNotReplicate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with DoNotReplicate in the dictionary\n"
  syntax:
    content: public bool DoNotReplicate { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property DoNotReplicate As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.DoNotReplicate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.KeepInCache
  commentId: P:SuperOffice.Data.Dictionary.SoTable.KeepInCache
  id: KeepInCache
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: KeepInCache
  nameWithType: SoTable.KeepInCache
  fullName: SuperOffice.Data.Dictionary.SoTable.KeepInCache
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with KeepInCache in the dictionary\n"
  syntax:
    content: public bool KeepInCache { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property KeepInCache As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.KeepInCache*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.SystemTable
  commentId: P:SuperOffice.Data.Dictionary.SoTable.SystemTable
  id: SystemTable
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: SystemTable
  nameWithType: SoTable.SystemTable
  fullName: SuperOffice.Data.Dictionary.SoTable.SystemTable
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table marked with SystemTable in the dictionary\n"
  syntax:
    content: public bool SystemTable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property SystemTable As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.SystemTable*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog
  commentId: P:SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog
  id: TravelTransactionLog
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: TravelTransactionLog
  nameWithType: SoTable.TravelTransactionLog
  fullName: SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nShould this table be logged to the traveltransactionlog\n"
  remarks: "\nNote that replication to prototype does not imply traveltransaction logging,\nso this is not simply the inverse of the DoNotReplicate flag.\n"
  syntax:
    content: public bool TravelTransactionLog { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property TravelTransactionLog As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.IsMDOList
  commentId: P:SuperOffice.Data.Dictionary.SoTable.IsMDOList
  id: IsMDOList
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: IsMDOList
  nameWithType: SoTable.IsMDOList
  fullName: SuperOffice.Data.Dictionary.SoTable.IsMDOList
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs this table the base table of an MDO list? If true, the <xref href=\"SuperOffice.Data.Dictionary.SoTable.MDOListInfo\" data-throw-if-not-resolved=\"false\"></xref> property will tell you more.\n"
  syntax:
    content: public bool IsMDOList { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMDOList As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.IsMDOList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.MDOListInfo
  commentId: P:SuperOffice.Data.Dictionary.SoTable.MDOListInfo
  id: MDOListInfo
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: MDOListInfo
  nameWithType: SoTable.MDOListInfo
  fullName: SuperOffice.Data.Dictionary.SoTable.MDOListInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIf <xref href=\"SuperOffice.Data.Dictionary.SoTable.IsMDOList\" data-throw-if-not-resolved=\"false\"></xref> is true, this property returns an object that contains a lot of information about the MDO list\n"
  syntax:
    content: public ListInfo MDOListInfo { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.ListInfo
    content.vb: Public ReadOnly Property MDOListInfo As ListInfo
  overload: SuperOffice.Data.Dictionary.SoTable.MDOListInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.HasSoftDelete
  commentId: P:SuperOffice.Data.Dictionary.SoTable.HasSoftDelete
  id: HasSoftDelete
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: HasSoftDelete
  nameWithType: SoTable.HasSoftDelete
  fullName: SuperOffice.Data.Dictionary.SoTable.HasSoftDelete
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIs Soft Delete support enabled for this table\n"
  syntax:
    content: public bool HasSoftDelete { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasSoftDelete As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.HasSoftDelete*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate
  commentId: P:SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate
  id: SoftDeletedDate
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: SoftDeletedDate
  nameWithType: SoTable.SoftDeletedDate
  fullName: SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nPoints to the field that is the delete date (soft) for this row\n"
  syntax:
    content: public SoField SoftDeletedDate { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.SoField
    content.vb: Public ReadOnly Property SoftDeletedDate As SoField
  overload: SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid
  commentId: P:SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid
  id: AutoGenerateGuid
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: AutoGenerateGuid
  nameWithType: SoTable.AutoGenerateGuid
  fullName: SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nDoes this table have at least one field that needs to be auto-populated with a GUID on insert?\n"
  syntax:
    content: public bool AutoGenerateGuid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AutoGenerateGuid As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp
  commentId: P:SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp
  id: TempTableCreationStamp
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: TempTableCreationStamp
  nameWithType: SoTable.TempTableCreationStamp
  fullName: SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nIf != null, then this is the UTC creation time for this Temporary Table; otherwise, this is not a temporary table\n"
  syntax:
    content: public DateTime TempTableCreationStamp { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public ReadOnly Property TempTableCreationStamp As Date
  overload: SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.Kind
  commentId: P:SuperOffice.Data.Dictionary.SoTable.Kind
  id: Kind
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: Kind
  nameWithType: SoTable.Kind
  fullName: SuperOffice.Data.Dictionary.SoTable.Kind
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nKind and origin of table - SuperOffice system; Partner-defined using the SoDictionary; or ExtraTable from Customer Service\n"
  syntax:
    content: public SoTable.TableKind Kind { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.SoTable.TableKind
    content.vb: Public ReadOnly Property Kind As SoTable.TableKind
  overload: SuperOffice.Data.Dictionary.SoTable.Kind*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dictionary.SoTable.HasTextExtensions
  commentId: P:SuperOffice.Data.Dictionary.SoTable.HasTextExtensions
  id: HasTextExtensions
  parent: SuperOffice.Data.Dictionary.SoTable
  langs:
  - csharp
  - vb
  name: HasTextExtensions
  nameWithType: SoTable.HasTextExtensions
  fullName: SuperOffice.Data.Dictionary.SoTable.HasTextExtensions
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dictionary
  summary: "\nDoes this table have at least one field that overruns into the text table, currently active?\n"
  syntax:
    content: public bool HasTextExtensions { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasTextExtensions As Boolean
  overload: SuperOffice.Data.Dictionary.SoTable.HasTextExtensions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{SuperOffice.Data.Dictionary.SoTable}
  commentId: T:System.IEquatable{SuperOffice.Data.Dictionary.SoTable}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<SoTable>
  nameWithType: IEquatable<SoTable>
  fullName: System.IEquatable<SuperOffice.Data.Dictionary.SoTable>
  nameWithType.vb: IEquatable(Of SoTable)
  fullName.vb: System.IEquatable(Of SuperOffice.Data.Dictionary.SoTable)
  name.vb: IEquatable(Of SoTable)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.Dictionary.SoTable
    name: SoTable
    nameWithType: SoTable
    fullName: SuperOffice.Data.Dictionary.SoTable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.Dictionary.SoTable
    name: SoTable
    nameWithType: SoTable
    fullName: SuperOffice.Data.Dictionary.SoTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoTable, To>()
  nameWithType: EnumUtil.MapEnums<SoTable, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Dictionary.SoTable, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoTable, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Dictionary.SoTable, To)()
  name.vb: MapEnums(Of SoTable, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoTable, To>
    nameWithType: EnumUtil.MapEnums<SoTable, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Dictionary.SoTable, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoTable, To)
    nameWithType: EnumUtil.MapEnums(Of SoTable, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Dictionary.SoTable, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoTable, To>()
  nameWithType: Converters.MapEnums<SoTable, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Dictionary.SoTable, To>()
  nameWithType.vb: Converters.MapEnums(Of SoTable, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Dictionary.SoTable, To)()
  name.vb: MapEnums(Of SoTable, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoTable, To>
    nameWithType: Converters.MapEnums<SoTable, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Dictionary.SoTable, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoTable, To)
    nameWithType: Converters.MapEnums(Of SoTable, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Dictionary.SoTable, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Dictionary.SoTable.GetRelations*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.GetRelations
  isExternal: true
  name: GetRelations
  nameWithType: SoTable.GetRelations
  fullName: SuperOffice.Data.Dictionary.SoTable.GetRelations
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoRelation}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoRelation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SoRelation>
  nameWithType: IEnumerable<SoRelation>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.Dictionary.SoRelation>
  nameWithType.vb: IEnumerable(Of SoRelation)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.Dictionary.SoRelation)
  name.vb: IEnumerable(Of SoRelation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.Dictionary.SoRelation
    name: SoRelation
    nameWithType: SoRelation
    fullName: SuperOffice.Data.Dictionary.SoRelation
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.Dictionary.SoRelation
    name: SoRelation
    nameWithType: SoRelation
    fullName: SuperOffice.Data.Dictionary.SoRelation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable
  isExternal: true
  name: GetRelationsWithTable
  nameWithType: SoTable.GetRelationsWithTable
  fullName: SuperOffice.Data.Dictionary.SoTable.GetRelationsWithTable
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: SuperOffice.Data.Dictionary.SoTable.IsTableRelated*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.IsTableRelated
  isExternal: true
  name: IsTableRelated
  nameWithType: SoTable.IsTableRelated
  fullName: SuperOffice.Data.Dictionary.SoTable.IsTableRelated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.Dictionary.SoTable.GetTableInfo*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.GetTableInfo
  isExternal: true
  name: GetTableInfo
  nameWithType: SoTable.GetTableInfo
  fullName: SuperOffice.Data.Dictionary.SoTable.GetTableInfo
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.ToString*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.ToString
  isExternal: true
  name: ToString
  nameWithType: SoTable.ToString
  fullName: SuperOffice.Data.Dictionary.SoTable.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.Dictionary.SoTable.Equals*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.Equals
  isExternal: true
  name: Equals
  nameWithType: SoTable.Equals
  fullName: SuperOffice.Data.Dictionary.SoTable.Equals
- uid: System.IEquatable{SuperOffice.Data.Dictionary.SoTable}.Equals(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:System.IEquatable{SuperOffice.Data.Dictionary.SoTable}.Equals(SuperOffice.Data.Dictionary.SoTable)
  parent: System.IEquatable{SuperOffice.Data.Dictionary.SoTable}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(SoTable)
  nameWithType: IEquatable<SoTable>.Equals(SoTable)
  fullName: System.IEquatable<SuperOffice.Data.Dictionary.SoTable>.Equals(SuperOffice.Data.Dictionary.SoTable)
  nameWithType.vb: IEquatable(Of SoTable).Equals(SoTable)
  fullName.vb: System.IEquatable(Of SuperOffice.Data.Dictionary.SoTable).Equals(SuperOffice.Data.Dictionary.SoTable)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<SoTable>.Equals
    fullName: System.IEquatable<SuperOffice.Data.Dictionary.SoTable>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Dictionary.SoTable
    name: SoTable
    nameWithType: SoTable
    fullName: SuperOffice.Data.Dictionary.SoTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of SoTable).Equals
    fullName: System.IEquatable(Of SuperOffice.Data.Dictionary.SoTable).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Dictionary.SoTable
    name: SoTable
    nameWithType: SoTable
    fullName: SuperOffice.Data.Dictionary.SoTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.op_Equality*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.op_Equality
  isExternal: true
  name: Equality
  nameWithType: SoTable.Equality
  fullName: SuperOffice.Data.Dictionary.SoTable.Equality
- uid: SuperOffice.Data.Dictionary.SoTable.op_Inequality*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.op_Inequality
  isExternal: true
  name: Inequality
  nameWithType: SoTable.Inequality
  fullName: SuperOffice.Data.Dictionary.SoTable.Inequality
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.GetHashCode*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: SoTable.GetHashCode
  fullName: SuperOffice.Data.Dictionary.SoTable.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.Dictionary.SoTable.AdditionalValues*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.AdditionalValues
  isExternal: true
  name: AdditionalValues
  nameWithType: SoTable.AdditionalValues
  fullName: SuperOffice.Data.Dictionary.SoTable.AdditionalValues
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.PrivacyTags*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.PrivacyTags
  isExternal: true
  name: PrivacyTags
  nameWithType: SoTable.PrivacyTags
  fullName: SuperOffice.Data.Dictionary.SoTable.PrivacyTags
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: '!:System.Collections.Generic.HashSet{System.String}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: System.Collections.Generic.HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: System.Collections.Generic.HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: System.Collections.Generic.HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.Item*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.Item
  isExternal: true
  name: Item
  nameWithType: SoTable.Item
  fullName: SuperOffice.Data.Dictionary.SoTable.Item
- uid: SuperOffice.Data.Dictionary.SoField
  commentId: T:SuperOffice.Data.Dictionary.SoField
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoField
  nameWithType: SoField
  fullName: SuperOffice.Data.Dictionary.SoField
- uid: SuperOffice.Data.Dictionary.SoTable.AdditionalFields*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.AdditionalFields
  isExternal: true
  name: AdditionalFields
  nameWithType: SoTable.AdditionalFields
  fullName: SuperOffice.Data.Dictionary.SoTable.AdditionalFields
- uid: System.Collections.Generic.List{SuperOffice.Data.Dictionary.SoField}
  commentId: T:System.Collections.Generic.List{SuperOffice.Data.Dictionary.SoField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SoField>
  nameWithType: List<SoField>
  fullName: System.Collections.Generic.List<SuperOffice.Data.Dictionary.SoField>
  nameWithType.vb: List(Of SoField)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.Data.Dictionary.SoField)
  name.vb: List(Of SoField)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.Data.Dictionary.SoTable.NumFields*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.NumFields
  isExternal: true
  name: NumFields
  nameWithType: SoTable.NumFields
  fullName: SuperOffice.Data.Dictionary.SoTable.NumFields
- uid: SuperOffice.Data.Dictionary.SoTable.GenerationState*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.GenerationState
  isExternal: true
  name: GenerationState
  nameWithType: SoTable.GenerationState
  fullName: SuperOffice.Data.Dictionary.SoTable.GenerationState
- uid: SuperOffice.Data.Dictionary.CodeGenerationState
  commentId: T:SuperOffice.Data.Dictionary.CodeGenerationState
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: CodeGenerationState
  nameWithType: CodeGenerationState
  fullName: SuperOffice.Data.Dictionary.CodeGenerationState
- uid: SuperOffice.Data.Dictionary.SoTable.Fields*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.Fields
  isExternal: true
  name: Fields
  nameWithType: SoTable.Fields
  fullName: SuperOffice.Data.Dictionary.SoTable.Fields
- uid: SuperOffice.Data.Dictionary.SoField[]
  isExternal: true
  name: SoField[]
  nameWithType: SoField[]
  fullName: SuperOffice.Data.Dictionary.SoField[]
  nameWithType.vb: SoField()
  fullName.vb: SuperOffice.Data.Dictionary.SoField()
  name.vb: SoField()
  spec.csharp:
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Dictionary.SoTable.HashCheckFields*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.HashCheckFields
  isExternal: true
  name: HashCheckFields
  nameWithType: SoTable.HashCheckFields
  fullName: SuperOffice.Data.Dictionary.SoTable.HashCheckFields
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoField}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.Data.Dictionary.SoField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SoField>
  nameWithType: IEnumerable<SoField>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.Dictionary.SoField>
  nameWithType.vb: IEnumerable(Of SoField)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.Dictionary.SoField)
  name.vb: IEnumerable(Of SoField)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoTable.Name*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.Name
  isExternal: true
  name: Name
  nameWithType: SoTable.Name
  fullName: SuperOffice.Data.Dictionary.SoTable.Name
- uid: SuperOffice.Data.Dictionary.SoTable.DbName*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.DbName
  isExternal: true
  name: DbName
  nameWithType: SoTable.DbName
  fullName: SuperOffice.Data.Dictionary.SoTable.DbName
- uid: SuperOffice.Data.Dictionary.SoTable.TableNumber*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.TableNumber
  isExternal: true
  name: TableNumber
  nameWithType: SoTable.TableNumber
  fullName: SuperOffice.Data.Dictionary.SoTable.TableNumber
- uid: SuperOffice.Data.Dictionary.SoTable.SequenceId*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.SequenceId
  isExternal: true
  name: SequenceId
  nameWithType: SoTable.SequenceId
  fullName: SuperOffice.Data.Dictionary.SoTable.SequenceId
- uid: SuperOffice.Data.Dictionary.SoTable.FreetextIndex*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.FreetextIndex
  isExternal: true
  name: FreetextIndex
  nameWithType: SoTable.FreetextIndex
  fullName: SuperOffice.Data.Dictionary.SoTable.FreetextIndex
- uid: SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging
  isExternal: true
  name: FieldLevelLogging
  nameWithType: SoTable.FieldLevelLogging
  fullName: SuperOffice.Data.Dictionary.SoTable.FieldLevelLogging
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicateDown*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.ReplicateDown
  isExternal: true
  name: ReplicateDown
  nameWithType: SoTable.ReplicateDown
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicateDown
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicateUp*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.ReplicateUp
  isExternal: true
  name: ReplicateUp
  nameWithType: SoTable.ReplicateUp
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicateUp
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement
  isExternal: true
  name: ReplicateAreaManagement
  nameWithType: SoTable.ReplicateAreaManagement
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicateAreaManagement
- uid: SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype
  isExternal: true
  name: ReplicatePrototype
  nameWithType: SoTable.ReplicatePrototype
  fullName: SuperOffice.Data.Dictionary.SoTable.ReplicatePrototype
- uid: SuperOffice.Data.Dictionary.SoTable.DoNotReplicate*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.DoNotReplicate
  isExternal: true
  name: DoNotReplicate
  nameWithType: SoTable.DoNotReplicate
  fullName: SuperOffice.Data.Dictionary.SoTable.DoNotReplicate
- uid: SuperOffice.Data.Dictionary.SoTable.KeepInCache*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.KeepInCache
  isExternal: true
  name: KeepInCache
  nameWithType: SoTable.KeepInCache
  fullName: SuperOffice.Data.Dictionary.SoTable.KeepInCache
- uid: SuperOffice.Data.Dictionary.SoTable.SystemTable*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.SystemTable
  isExternal: true
  name: SystemTable
  nameWithType: SoTable.SystemTable
  fullName: SuperOffice.Data.Dictionary.SoTable.SystemTable
- uid: SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog
  isExternal: true
  name: TravelTransactionLog
  nameWithType: SoTable.TravelTransactionLog
  fullName: SuperOffice.Data.Dictionary.SoTable.TravelTransactionLog
- uid: SuperOffice.Data.Dictionary.SoTable.IsMDOList*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.IsMDOList
  isExternal: true
  name: IsMDOList
  nameWithType: SoTable.IsMDOList
  fullName: SuperOffice.Data.Dictionary.SoTable.IsMDOList
- uid: SuperOffice.Data.Dictionary.SoTable.MDOListInfo*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.MDOListInfo
  isExternal: true
  name: MDOListInfo
  nameWithType: SoTable.MDOListInfo
  fullName: SuperOffice.Data.Dictionary.SoTable.MDOListInfo
- uid: SuperOffice.Data.Dictionary.ListInfo
  commentId: T:SuperOffice.Data.Dictionary.ListInfo
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: ListInfo
  nameWithType: ListInfo
  fullName: SuperOffice.Data.Dictionary.ListInfo
- uid: SuperOffice.Data.Dictionary.SoTable.HasSoftDelete*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.HasSoftDelete
  isExternal: true
  name: HasSoftDelete
  nameWithType: SoTable.HasSoftDelete
  fullName: SuperOffice.Data.Dictionary.SoTable.HasSoftDelete
- uid: SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate
  isExternal: true
  name: SoftDeletedDate
  nameWithType: SoTable.SoftDeletedDate
  fullName: SuperOffice.Data.Dictionary.SoTable.SoftDeletedDate
- uid: SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid
  isExternal: true
  name: AutoGenerateGuid
  nameWithType: SoTable.AutoGenerateGuid
  fullName: SuperOffice.Data.Dictionary.SoTable.AutoGenerateGuid
- uid: SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp
  isExternal: true
  name: TempTableCreationStamp
  nameWithType: SoTable.TempTableCreationStamp
  fullName: SuperOffice.Data.Dictionary.SoTable.TempTableCreationStamp
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.Data.Dictionary.SoTable.Kind*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.Kind
  isExternal: true
  name: Kind
  nameWithType: SoTable.Kind
  fullName: SuperOffice.Data.Dictionary.SoTable.Kind
- uid: SuperOffice.Data.Dictionary.SoTable.TableKind
  commentId: T:SuperOffice.Data.Dictionary.SoTable.TableKind
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable.TableKind
  nameWithType: SoTable.TableKind
  fullName: SuperOffice.Data.Dictionary.SoTable.TableKind
- uid: SuperOffice.Data.Dictionary.SoTable.HasTextExtensions*
  commentId: Overload:SuperOffice.Data.Dictionary.SoTable.HasTextExtensions
  isExternal: true
  name: HasTextExtensions
  nameWithType: SoTable.HasTextExtensions
  fullName: SuperOffice.Data.Dictionary.SoTable.HasTextExtensions
