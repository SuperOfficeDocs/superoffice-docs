### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync
  commentId: T:SuperOffice.Diagnostics.DiagnoseMethodAsync
  id: DiagnoseMethodAsync
  parent: SuperOffice.Diagnostics
  children:
  - SuperOffice.Diagnostics.DiagnoseMethodAsync.#ctor(System.Object,System.IntPtr)
  - SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken,System.AsyncCallback,System.Object)
  - SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke(System.IAsyncResult)
  - SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: DiagnoseMethodAsync
  nameWithType: DiagnoseMethodAsync
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nDelegate used by <xref href=\"SuperOffice.Diagnostics.Diagnostic.Diagnose(SuperOffice.Diagnostics.DiagnoseMethod)\" data-throw-if-not-resolved=\"false\"></xref> to carry out scaffolding logic.\n"
  syntax:
    content: 'public sealed class DiagnoseMethodAsync : MulticastDelegate'
    content.vb: >-
      Public NotInheritable Class DiagnoseMethodAsync
          Inherits MulticastDelegate
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Diagnostics.DiagnoseMethodAsync.EnumUtil.MapEnums``2
  - SuperOffice.Diagnostics.DiagnoseMethodAsync.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.#ctor(System.Object,System.IntPtr)
  commentId: M:SuperOffice.Diagnostics.DiagnoseMethodAsync.#ctor(System.Object,System.IntPtr)
  id: '#ctor(System.Object,System.IntPtr)'
  parent: SuperOffice.Diagnostics.DiagnoseMethodAsync
  langs:
  - csharp
  - vb
  name: DiagnoseMethodAsync(Object, IntPtr)
  nameWithType: DiagnoseMethodAsync.DiagnoseMethodAsync(Object, IntPtr)
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.DiagnoseMethodAsync(System.Object, System.IntPtr)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public DiagnoseMethodAsync(object object, IntPtr method)
    parameters:
    - id: object
      type: System.Object
    - id: method
      type: System.IntPtr
    content.vb: Public Sub New(object As Object, method As IntPtr)
  overload: SuperOffice.Diagnostics.DiagnoseMethodAsync.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken)
  id: Invoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken)
  parent: SuperOffice.Diagnostics.DiagnoseMethodAsync
  langs:
  - csharp
  - vb
  name: Invoke(Diagnostic, CancellationToken)
  nameWithType: DiagnoseMethodAsync.Invoke(Diagnostic, CancellationToken)
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke(SuperOffice.Diagnostics.Diagnostic, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public virtual Task Invoke(Diagnostic scaffolder, CancellationToken cancellationToken = null)
    parameters:
    - id: scaffolder
      type: SuperOffice.Diagnostics.Diagnostic
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function Invoke(scaffolder As Diagnostic, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken,System.AsyncCallback,System.Object)
  commentId: M:SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken,System.AsyncCallback,System.Object)
  id: BeginInvoke(SuperOffice.Diagnostics.Diagnostic,System.Threading.CancellationToken,System.AsyncCallback,System.Object)
  parent: SuperOffice.Diagnostics.DiagnoseMethodAsync
  langs:
  - csharp
  - vb
  name: BeginInvoke(Diagnostic, CancellationToken, AsyncCallback, Object)
  nameWithType: DiagnoseMethodAsync.BeginInvoke(Diagnostic, CancellationToken, AsyncCallback, Object)
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke(SuperOffice.Diagnostics.Diagnostic, System.Threading.CancellationToken, System.AsyncCallback, System.Object)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public virtual IAsyncResult BeginInvoke(Diagnostic scaffolder, CancellationToken cancellationToken, AsyncCallback callback, object object)
    parameters:
    - id: scaffolder
      type: SuperOffice.Diagnostics.Diagnostic
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: callback
      type: System.AsyncCallback
    - id: object
      type: System.Object
    return:
      type: System.IAsyncResult
    content.vb: Public Overridable Function BeginInvoke(scaffolder As Diagnostic, cancellationToken As CancellationToken, callback As AsyncCallback, object As Object) As IAsyncResult
  overload: SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke(System.IAsyncResult)
  commentId: M:SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: SuperOffice.Diagnostics.DiagnoseMethodAsync
  langs:
  - csharp
  - vb
  name: EndInvoke(IAsyncResult)
  nameWithType: DiagnoseMethodAsync.EndInvoke(IAsyncResult)
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke(System.IAsyncResult)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public virtual Task EndInvoke(IAsyncResult result)
    parameters:
    - id: result
      type: System.IAsyncResult
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function EndInvoke(result As IAsyncResult) As Task
  overload: SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: SuperOffice.Diagnostics
  commentId: N:SuperOffice.Diagnostics
  isExternal: true
  name: SuperOffice.Diagnostics
  nameWithType: SuperOffice.Diagnostics
  fullName: SuperOffice.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<DiagnoseMethodAsync, To>()
  nameWithType: EnumUtil.MapEnums<DiagnoseMethodAsync, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.DiagnoseMethodAsync, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of DiagnoseMethodAsync, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.DiagnoseMethodAsync, To)()
  name.vb: MapEnums(Of DiagnoseMethodAsync, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<DiagnoseMethodAsync, To>
    nameWithType: EnumUtil.MapEnums<DiagnoseMethodAsync, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.DiagnoseMethodAsync, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of DiagnoseMethodAsync, To)
    nameWithType: EnumUtil.MapEnums(Of DiagnoseMethodAsync, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.DiagnoseMethodAsync, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<DiagnoseMethodAsync, To>()
  nameWithType: Converters.MapEnums<DiagnoseMethodAsync, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.DiagnoseMethodAsync, To>()
  nameWithType.vb: Converters.MapEnums(Of DiagnoseMethodAsync, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.DiagnoseMethodAsync, To)()
  name.vb: MapEnums(Of DiagnoseMethodAsync, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<DiagnoseMethodAsync, To>
    nameWithType: Converters.MapEnums<DiagnoseMethodAsync, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.DiagnoseMethodAsync, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of DiagnoseMethodAsync, To)
    nameWithType: Converters.MapEnums(Of DiagnoseMethodAsync, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.DiagnoseMethodAsync, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.#ctor*
  commentId: Overload:SuperOffice.Diagnostics.DiagnoseMethodAsync.#ctor
  isExternal: true
  name: DiagnoseMethodAsync
  nameWithType: DiagnoseMethodAsync.DiagnoseMethodAsync
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.DiagnoseMethodAsync
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke*
  commentId: Overload:SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke
  isExternal: true
  name: Invoke
  nameWithType: DiagnoseMethodAsync.Invoke
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.Invoke
- uid: SuperOffice.Diagnostics.Diagnostic
  commentId: T:SuperOffice.Diagnostics.Diagnostic
  parent: SuperOffice.Diagnostics
  isExternal: true
  name: Diagnostic
  nameWithType: Diagnostic
  fullName: SuperOffice.Diagnostics.Diagnostic
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke*
  commentId: Overload:SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke
  isExternal: true
  name: BeginInvoke
  nameWithType: DiagnoseMethodAsync.BeginInvoke
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.BeginInvoke
- uid: System.AsyncCallback
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke*
  commentId: Overload:SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke
  isExternal: true
  name: EndInvoke
  nameWithType: DiagnoseMethodAsync.EndInvoke
  fullName: SuperOffice.Diagnostics.DiagnoseMethodAsync.EndInvoke
