### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.ProductLicense
  commentId: T:SuperOffice.License.ProductLicense
  id: ProductLicense
  parent: SuperOffice.License
  children:
  - SuperOffice.License.ProductLicense.All
  - SuperOffice.License.ProductLicense.Audience
  - SuperOffice.License.ProductLicense.ConfidentialAppointment
  - SuperOffice.License.ProductLicense.CreateExternalPerson
  - SuperOffice.License.ProductLicense.Deprecatable
  - SuperOffice.License.ProductLicense.ExpanderForCollaboration
  - SuperOffice.License.ProductLicense.ExpanderKey
  - SuperOffice.License.ProductLicense.Login
  - SuperOffice.License.ProductLicense.None
  - SuperOffice.License.ProductLicense.Pocket
  - SuperOffice.License.ProductLicense.PocketLogin
  - SuperOffice.License.ProductLicense.ProductTypeCRMSoftware
  - SuperOffice.License.ProductLicense.ProductTypeOnlinePro
  - SuperOffice.License.ProductLicense.ProductTypeOnlineStd
  - SuperOffice.License.ProductLicense.Publish
  - SuperOffice.License.ProductLicense.RemoteTravel
  - SuperOffice.License.ProductLicense.ReporterStudio
  - SuperOffice.License.ProductLicense.Saint
  - SuperOffice.License.ProductLicense.Site
  - SuperOffice.License.ProductLicense.SyncEngine
  - SuperOffice.License.ProductLicense.Travel
  - SuperOffice.License.ProductLicense.User
  - SuperOffice.License.ProductLicense.value__
  - SuperOffice.License.ProductLicense.Web
  - SuperOffice.License.ProductLicense.WebLogin
  - SuperOffice.License.ProductLicense.WebServices
  - SuperOffice.License.ProductLicense.Win
  - SuperOffice.License.ProductLicense.WinLogin
  langs:
  - csharp
  - vb
  name: ProductLicense
  nameWithType: ProductLicense
  fullName: SuperOffice.License.ProductLicense
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nDifferent licenses that products can require.\n"
  syntax:
    content: 'public sealed class ProductLicense : Enum'
    content.vb: >-
      Public NotInheritable Class ProductLicense
          Inherits

           Enum
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.License.ProductLicense.EnumUtil.MapEnums``2
  - SuperOffice.License.ProductLicense.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.License.ProductLicense.value__
  commentId: F:SuperOffice.License.ProductLicense.value__
  id: value__
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: value__
  nameWithType: ProductLicense.value__
  fullName: SuperOffice.License.ProductLicense.value__
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public uint value__
    return:
      type: System.UInt32
    content.vb: Public value__ As UInteger
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ProductLicense.All
  commentId: F:SuperOffice.License.ProductLicense.All
  id: All
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: All
  nameWithType: ProductLicense.All
  fullName: SuperOffice.License.ProductLicense.All
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAll available licenses.\n"
  syntax:
    content: public const ProductLicense All
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const All As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Site
  commentId: F:SuperOffice.License.ProductLicense.Site
  id: Site
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Site
  nameWithType: ProductLicense.Site
  fullName: SuperOffice.License.ProductLicense.Site
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAll possible site licenses.\n"
  syntax:
    content: public const ProductLicense Site
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Site As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.User
  commentId: F:SuperOffice.License.ProductLicense.User
  id: User
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: User
  nameWithType: ProductLicense.User
  fullName: SuperOffice.License.ProductLicense.User
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAll possible user licenses.\n"
  syntax:
    content: public const ProductLicense User
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const User As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Deprecatable
  commentId: F:SuperOffice.License.ProductLicense.Deprecatable
  id: Deprecatable
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Deprecatable
  nameWithType: ProductLicense.Deprecatable
  fullName: SuperOffice.License.ProductLicense.Deprecatable
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAll licenses that can be deprecated. But what does this really mean??\n"
  syntax:
    content: public const ProductLicense Deprecatable
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Deprecatable As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.None
  commentId: F:SuperOffice.License.ProductLicense.None
  id: None
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: None
  nameWithType: ProductLicense.None
  fullName: SuperOffice.License.ProductLicense.None
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nNo available licenses\n"
  syntax:
    content: public const ProductLicense None
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const None As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Login
  commentId: F:SuperOffice.License.ProductLicense.Login
  id: Login
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Login
  nameWithType: ProductLicense.Login
  fullName: SuperOffice.License.ProductLicense.Login
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to log in.\n"
  syntax:
    content: public const ProductLicense Login
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Login As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.WinLogin
  commentId: F:SuperOffice.License.ProductLicense.WinLogin
  id: WinLogin
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: WinLogin
  nameWithType: ProductLicense.WinLogin
  fullName: SuperOffice.License.ProductLicense.WinLogin
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to log in to windows clients.\n"
  syntax:
    content: public const ProductLicense WinLogin
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const WinLogin As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.WebLogin
  commentId: F:SuperOffice.License.ProductLicense.WebLogin
  id: WebLogin
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: WebLogin
  nameWithType: ProductLicense.WebLogin
  fullName: SuperOffice.License.ProductLicense.WebLogin
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to log in to web clients.\n"
  syntax:
    content: public const ProductLicense WebLogin
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const WebLogin As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Publish
  commentId: F:SuperOffice.License.ProductLicense.Publish
  id: Publish
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Publish
  nameWithType: ProductLicense.Publish
  fullName: SuperOffice.License.ProductLicense.Publish
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is permitted to publish.\n"
  syntax:
    content: public const ProductLicense Publish
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Publish As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.CreateExternalPerson
  commentId: F:SuperOffice.License.ProductLicense.CreateExternalPerson
  id: CreateExternalPerson
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: CreateExternalPerson
  nameWithType: ProductLicense.CreateExternalPerson
  fullName: SuperOffice.License.ProductLicense.CreateExternalPerson
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is permitted to create external persons.\n"
  syntax:
    content: public const ProductLicense CreateExternalPerson
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const CreateExternalPerson As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ConfidentialAppointment
  commentId: F:SuperOffice.License.ProductLicense.ConfidentialAppointment
  id: ConfidentialAppointment
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ConfidentialAppointment
  nameWithType: ProductLicense.ConfidentialAppointment
  fullName: SuperOffice.License.ProductLicense.ConfidentialAppointment
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is permitted to create external appointments.\n"
  syntax:
    content: public const ProductLicense ConfidentialAppointment
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ConfidentialAppointment As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ReporterStudio
  commentId: F:SuperOffice.License.ProductLicense.ReporterStudio
  id: ReporterStudio
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ReporterStudio
  nameWithType: ProductLicense.ReporterStudio
  fullName: SuperOffice.License.ProductLicense.ReporterStudio
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to use reporter studio.\n"
  syntax:
    content: public const ProductLicense ReporterStudio
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ReporterStudio As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Travel
  commentId: F:SuperOffice.License.ProductLicense.Travel
  id: Travel
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Travel
  nameWithType: ProductLicense.Travel
  fullName: SuperOffice.License.ProductLicense.Travel
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nTBD\n"
  syntax:
    content: public const ProductLicense Travel
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Travel As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.RemoteTravel
  commentId: F:SuperOffice.License.ProductLicense.RemoteTravel
  id: RemoteTravel
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: RemoteTravel
  nameWithType: ProductLicense.RemoteTravel
  fullName: SuperOffice.License.ProductLicense.RemoteTravel
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to use remote travel.\n"
  syntax:
    content: public const ProductLicense RemoteTravel
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const RemoteTravel As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.SyncEngine
  commentId: F:SuperOffice.License.ProductLicense.SyncEngine
  id: SyncEngine
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: SyncEngine
  nameWithType: ProductLicense.SyncEngine
  fullName: SuperOffice.License.ProductLicense.SyncEngine
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nThe user is licensed to use the sync engine.\n"
  syntax:
    content: public const ProductLicense SyncEngine
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const SyncEngine As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.PocketLogin
  commentId: F:SuperOffice.License.ProductLicense.PocketLogin
  id: PocketLogin
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: PocketLogin
  nameWithType: ProductLicense.PocketLogin
  fullName: SuperOffice.License.ProductLicense.PocketLogin
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nPocket CRM license is required\n"
  syntax:
    content: public const ProductLicense PocketLogin
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const PocketLogin As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Win
  commentId: F:SuperOffice.License.ProductLicense.Win
  id: Win
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Win
  nameWithType: ProductLicense.Win
  fullName: SuperOffice.License.ProductLicense.Win
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nWindows client\n"
  syntax:
    content: public const ProductLicense Win
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Win As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Web
  commentId: F:SuperOffice.License.ProductLicense.Web
  id: Web
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Web
  nameWithType: ProductLicense.Web
  fullName: SuperOffice.License.ProductLicense.Web
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nWebClient (SIX.Web) license is required.\n"
  syntax:
    content: public const ProductLicense Web
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Web As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Audience
  commentId: F:SuperOffice.License.ProductLicense.Audience
  id: Audience
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Audience
  nameWithType: ProductLicense.Audience
  fullName: SuperOffice.License.ProductLicense.Audience
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAudience license is required.\n"
  syntax:
    content: public const ProductLicense Audience
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Audience As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ExpanderKey
  commentId: F:SuperOffice.License.ProductLicense.ExpanderKey
  id: ExpanderKey
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ExpanderKey
  nameWithType: ProductLicense.ExpanderKey
  fullName: SuperOffice.License.ProductLicense.ExpanderKey
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nExpanderKey license is required.\n"
  syntax:
    content: public const ProductLicense ExpanderKey
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ExpanderKey As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ExpanderForCollaboration
  commentId: F:SuperOffice.License.ProductLicense.ExpanderForCollaboration
  id: ExpanderForCollaboration
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ExpanderForCollaboration
  nameWithType: ProductLicense.ExpanderForCollaboration
  fullName: SuperOffice.License.ProductLicense.ExpanderForCollaboration
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nExpander for collaboration license is required\n"
  syntax:
    content: public const ProductLicense ExpanderForCollaboration
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ExpanderForCollaboration As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.WebServices
  commentId: F:SuperOffice.License.ProductLicense.WebServices
  id: WebServices
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: WebServices
  nameWithType: ProductLicense.WebServices
  fullName: SuperOffice.License.ProductLicense.WebServices
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nWebServices license is required.\n"
  syntax:
    content: public const ProductLicense WebServices
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const WebServices As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Saint
  commentId: F:SuperOffice.License.ProductLicense.Saint
  id: Saint
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Saint
  nameWithType: ProductLicense.Saint
  fullName: SuperOffice.License.ProductLicense.Saint
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSaint license is required\n"
  syntax:
    content: public const ProductLicense Saint
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Saint As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.Pocket
  commentId: F:SuperOffice.License.ProductLicense.Pocket
  id: Pocket
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: Pocket
  nameWithType: ProductLicense.Pocket
  fullName: SuperOffice.License.ProductLicense.Pocket
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nPocket CRM license is present\n"
  syntax:
    content: public const ProductLicense Pocket
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const Pocket As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ProductTypeCRMSoftware
  commentId: F:SuperOffice.License.ProductLicense.ProductTypeCRMSoftware
  id: ProductTypeCRMSoftware
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ProductTypeCRMSoftware
  nameWithType: ProductLicense.ProductTypeCRMSoftware
  fullName: SuperOffice.License.ProductLicense.ProductTypeCRMSoftware
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nProduct type is &quot;conventional, installed&quot;\n"
  syntax:
    content: public const ProductLicense ProductTypeCRMSoftware
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ProductTypeCRMSoftware As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ProductTypeOnlineStd
  commentId: F:SuperOffice.License.ProductLicense.ProductTypeOnlineStd
  id: ProductTypeOnlineStd
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ProductTypeOnlineStd
  nameWithType: ProductLicense.ProductTypeOnlineStd
  fullName: SuperOffice.License.ProductLicense.ProductTypeOnlineStd
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nProduct type is &quot;Online, standard edition&quot;\n"
  syntax:
    content: public const ProductLicense ProductTypeOnlineStd
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ProductTypeOnlineStd As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.ProductLicense.ProductTypeOnlinePro
  commentId: F:SuperOffice.License.ProductLicense.ProductTypeOnlinePro
  id: ProductTypeOnlinePro
  parent: SuperOffice.License.ProductLicense
  langs:
  - csharp
  - vb
  name: ProductTypeOnlinePro
  nameWithType: ProductLicense.ProductTypeOnlinePro
  fullName: SuperOffice.License.ProductLicense.ProductTypeOnlinePro
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nProduct type is &quot;Online, professional edition&quot;\n"
  syntax:
    content: public const ProductLicense ProductTypeOnlinePro
    return:
      type: SuperOffice.License.ProductLicense
    content.vb: Public Const ProductTypeOnlinePro As ProductLicense
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.License.ProductLicense.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ProductLicense, To>()
  nameWithType: EnumUtil.MapEnums<ProductLicense, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.ProductLicense, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ProductLicense, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.ProductLicense, To)()
  name.vb: MapEnums(Of ProductLicense, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ProductLicense, To>
    nameWithType: EnumUtil.MapEnums<ProductLicense, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.ProductLicense, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ProductLicense, To)
    nameWithType: EnumUtil.MapEnums(Of ProductLicense, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.ProductLicense, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ProductLicense.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ProductLicense, To>()
  nameWithType: Converters.MapEnums<ProductLicense, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ProductLicense, To>()
  nameWithType.vb: Converters.MapEnums(Of ProductLicense, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ProductLicense, To)()
  name.vb: MapEnums(Of ProductLicense, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ProductLicense, To>
    nameWithType: Converters.MapEnums<ProductLicense, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ProductLicense, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ProductLicense, To)
    nameWithType: Converters.MapEnums(Of ProductLicense, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ProductLicense, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: SuperOffice.License.ProductLicense
  commentId: T:SuperOffice.License.ProductLicense
  parent: SuperOffice.License
  isExternal: true
  name: ProductLicense
  nameWithType: ProductLicense
  fullName: SuperOffice.License.ProductLicense
