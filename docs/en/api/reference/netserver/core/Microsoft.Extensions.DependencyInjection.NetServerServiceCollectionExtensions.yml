### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  id: NetServerServiceCollectionExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  langs:
  - csharp
  - vb
  name: NetServerServiceCollectionExtensions
  nameWithType: NetServerServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static class NetServerServiceCollectionExtensions : Object'
    content.vb: >-
      Public Module NetServerServiceCollectionExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  id: AddNetServerCoreForSingleSessionProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddNetServerCoreForSingleSessionProcess(IServiceCollection, IConfiguration, Action<NetServerCoreOptionsBuilder>)
  nameWithType: NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(IServiceCollection, IConfiguration, Action<NetServerCoreOptionsBuilder>)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static IServiceCollection AddNetServerCoreForSingleSessionProcess(this IServiceCollection services, IConfiguration configuration, Action<NetServerCoreOptionsBuilder> optionsAction = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: optionsAction
      type: System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddNetServerCoreForSingleSessionProcess(services As IServiceCollection, configuration As IConfiguration, optionsAction As Action(Of NetServerCoreOptionsBuilder) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess*
  nameWithType.vb: NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(IServiceCollection, IConfiguration, Action(Of NetServerCoreOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action(Of Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder))
  name.vb: AddNetServerCoreForSingleSessionProcess(IServiceCollection, IConfiguration, Action(Of NetServerCoreOptionsBuilder))
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  id: AddNetServerCoreForAsyncLocalProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddNetServerCoreForAsyncLocalProcess(IServiceCollection, IConfiguration, Action<NetServerCoreOptionsBuilder>)
  nameWithType: NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(IServiceCollection, IConfiguration, Action<NetServerCoreOptionsBuilder>)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static IServiceCollection AddNetServerCoreForAsyncLocalProcess(this IServiceCollection services, IConfiguration configuration, Action<NetServerCoreOptionsBuilder> optionsAction = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: optionsAction
      type: System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddNetServerCoreForAsyncLocalProcess(services As IServiceCollection, configuration As IConfiguration, optionsAction As Action(Of NetServerCoreOptionsBuilder) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess*
  nameWithType.vb: NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(IServiceCollection, IConfiguration, Action(Of NetServerCoreOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action(Of Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder))
  name.vb: AddNetServerCoreForAsyncLocalProcess(IServiceCollection, IConfiguration, Action(Of NetServerCoreOptionsBuilder))
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  id: AddNetServerCore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddNetServerCore<TNSPrincipalAccessor>(IServiceCollection, IConfiguration, Action<NetServerCoreOptionsBuilder>)
  nameWithType: NetServerServiceCollectionExtensions.AddNetServerCore<TNSPrincipalAccessor>(IServiceCollection, IConfiguration, Action<NetServerCoreOptionsBuilder>)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore<TNSPrincipalAccessor>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdd NetServer core\n"
  remarks: "\nThis method calls <xref href=\"Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)\" data-throw-if-not-resolved=\"false\"></xref> to add logging, if it has need been added previously \n"
  syntax:
    content: >-
      public static IServiceCollection AddNetServerCore<TNSPrincipalAccessor>(this IServiceCollection services, IConfiguration configuration, Action<NetServerCoreOptionsBuilder> optionsAction = null)
          where TNSPrincipalAccessor : class, INSPrincipalAccessor
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    - id: optionsAction
      type: System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder}
    typeParameters:
    - id: TNSPrincipalAccessor
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddNetServerCore(Of TNSPrincipalAccessor As {Class, INSPrincipalAccessor})(services As IServiceCollection, configuration As IConfiguration, optionsAction As Action(Of NetServerCoreOptionsBuilder) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore*
  nameWithType.vb: NetServerServiceCollectionExtensions.AddNetServerCore(Of TNSPrincipalAccessor)(IServiceCollection, IConfiguration, Action(Of NetServerCoreOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore(Of TNSPrincipalAccessor)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action(Of Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder))
  name.vb: AddNetServerCore(Of TNSPrincipalAccessor)(IServiceCollection, IConfiguration, Action(Of NetServerCoreOptionsBuilder))
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddDatabaseScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddDatabaseScoped<TImplementation>(IServiceCollection)
  nameWithType: NetServerServiceCollectionExtensions.AddDatabaseScoped<TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped<TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: >-
      public static IServiceCollection AddDatabaseScoped<TImplementation>(this IServiceCollection services)
          where TImplementation : class
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDatabaseScoped(Of TImplementation As Class)(services As IServiceCollection) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped*
  nameWithType.vb: NetServerServiceCollectionExtensions.AddDatabaseScoped(Of TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped(Of TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddDatabaseScoped(Of TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddDatabaseScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddDatabaseScoped<TService, TImplementation>(IServiceCollection)
  nameWithType: NetServerServiceCollectionExtensions.AddDatabaseScoped<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: >-
      public static IServiceCollection AddDatabaseScoped<TService, TImplementation>(this IServiceCollection services)
          where TService : class where TImplementation : class, TService
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDatabaseScoped(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped*
  nameWithType.vb: NetServerServiceCollectionExtensions.AddDatabaseScoped(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddDatabaseScoped(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: AddTransientPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddTransientPlugin<TPlugin>(IServiceCollection, Func<IServiceProvider, TPlugin>)
  nameWithType: NetServerServiceCollectionExtensions.AddTransientPlugin<TPlugin>(IServiceCollection, Func<IServiceProvider, TPlugin>)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin<TPlugin>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TPlugin>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdd a Plugin to the service colelction as a transient type and also add it explicitly to the <xref href=\"SuperOffice.Factory.PluginFactory\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"SuperOffice.Factory.ClassFactory\" data-throw-if-not-resolved=\"false\"></xref> as the internal instance resolver. \n"
  syntax:
    content: >-
      public static IServiceCollection AddTransientPlugin<TPlugin>(this IServiceCollection services, Func<IServiceProvider, TPlugin> implementationFactory = null)
          where TPlugin : class, IPlugin
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TPlugin}}
    typeParameters:
    - id: TPlugin
      description: Type of plugin to explicitly add
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransientPlugin(Of TPlugin As {Class, IPlugin})(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TPlugin) = Nothing) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin*
  exceptions:
  - type: SuperOffice.Exceptions.SoClassFactoryException
    commentId: T:SuperOffice.Exceptions.SoClassFactoryException
    description: Thrown if the type is not a valid plugin with <xref href="SuperOffice.Factory.PluginAttribute.IsAutoDiscoverable" data-throw-if-not-resolved="false"></xref> set to false.
  nameWithType.vb: NetServerServiceCollectionExtensions.AddTransientPlugin(Of TPlugin)(IServiceCollection, Func(Of IServiceProvider, TPlugin))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin(Of TPlugin)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TPlugin))
  name.vb: AddTransientPlugin(Of TPlugin)(IServiceCollection, Func(Of IServiceProvider, TPlugin))
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddSingletonPlugin``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddSingletonPlugin<TPlugin>(IServiceCollection)
  nameWithType: NetServerServiceCollectionExtensions.AddSingletonPlugin<TPlugin>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin<TPlugin>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdd a Plugin to the service colelction as a singleton type and also add it explicitly to the <xref href=\"SuperOffice.Factory.PluginFactory\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"SuperOffice.Factory.ClassFactory\" data-throw-if-not-resolved=\"false\"></xref> as the internal instance resolver. \n"
  syntax:
    content: >-
      public static IServiceCollection AddSingletonPlugin<TPlugin>(this IServiceCollection services)
          where TPlugin : class, IPlugin
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TPlugin
      description: Type of plugin to explicitly add
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingletonPlugin(Of TPlugin As {Class, IPlugin})(services As IServiceCollection) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin*
  exceptions:
  - type: SuperOffice.Exceptions.SoClassFactoryException
    commentId: T:SuperOffice.Exceptions.SoClassFactoryException
    description: Thrown if the type is not a valid plugin with <xref href="SuperOffice.Factory.PluginAttribute.IsAutoDiscoverable" data-throw-if-not-resolved="false"></xref> set to false.
  nameWithType.vb: NetServerServiceCollectionExtensions.AddSingletonPlugin(Of TPlugin)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin(Of TPlugin)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddSingletonPlugin(Of TPlugin)(IServiceCollection)
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess
  isExternal: true
  name: AddNetServerCoreForSingleSessionProcess
  nameWithType: NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForSingleSessionProcess
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.Configuration.IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder}
  commentId: '!:System.Action{Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder}'
  definition: System.Action`1
  name: Action<NetServerCoreOptionsBuilder>
  nameWithType: Action<NetServerCoreOptionsBuilder>
  fullName: System.Action<Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder>
  nameWithType.vb: Action(Of NetServerCoreOptionsBuilder)
  fullName.vb: System.Action(Of Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder)
  name.vb: Action(Of NetServerCoreOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder
    name: NetServerCoreOptionsBuilder
    nameWithType: NetServerCoreOptionsBuilder
    fullName: Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder
    name: NetServerCoreOptionsBuilder
    nameWithType: NetServerCoreOptionsBuilder
    fullName: Microsoft.Extensions.DependencyInjection.NetServerCoreOptionsBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess
  isExternal: true
  name: AddNetServerCoreForAsyncLocalProcess
  nameWithType: NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCoreForAsyncLocalProcess
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore
  isExternal: true
  name: AddNetServerCore
  nameWithType: NetServerServiceCollectionExtensions.AddNetServerCore
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddNetServerCore
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped
  isExternal: true
  name: AddDatabaseScoped
  nameWithType: NetServerServiceCollectionExtensions.AddDatabaseScoped
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddDatabaseScoped
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin
  isExternal: true
  name: AddTransientPlugin
  nameWithType: NetServerServiceCollectionExtensions.AddTransientPlugin
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddTransientPlugin
- uid: SuperOffice.Exceptions.SoClassFactoryException
  commentId: T:SuperOffice.Exceptions.SoClassFactoryException
  isExternal: true
- uid: System.Func{System.IServiceProvider,{TPlugin}}
  commentId: '!:System.Func{System.IServiceProvider,``0}'
  definition: System.Func`2
  name: Func<IServiceProvider, TPlugin>
  nameWithType: Func<IServiceProvider, TPlugin>
  fullName: System.Func<System.IServiceProvider, TPlugin>
  nameWithType.vb: Func(Of IServiceProvider, TPlugin)
  fullName.vb: System.Func(Of System.IServiceProvider, TPlugin)
  name.vb: Func(Of IServiceProvider, TPlugin)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPlugin
    nameWithType: TPlugin
    fullName: TPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPlugin
    nameWithType: TPlugin
    fullName: TPlugin
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin
  isExternal: true
  name: AddSingletonPlugin
  nameWithType: NetServerServiceCollectionExtensions.AddSingletonPlugin
  fullName: Microsoft.Extensions.DependencyInjection.NetServerServiceCollectionExtensions.AddSingletonPlugin
