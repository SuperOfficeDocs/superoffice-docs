### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  commentId: T:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  id: ISystemWebhookPlugin
  parent: SuperOffice.CRM.Webhooks
  children:
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState},System.Threading.CancellationToken)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookResponse,System.Threading.CancellationToken)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync(SuperOffice.CRM.Webhooks.Webhook)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync(SuperOffice.CRM.Webhooks.Webhook,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ISystemWebhookPlugin
  nameWithType: ISystemWebhookPlugin
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nWebhook plugin - there is only one of these per system (as determined by the plugin priority). \nThe plugin handles broadcasting the HTTP hooks to subscribing systems, and saving and storing the \nplugin info.\nPlugins must be marked with the <xref href=\"SuperOffice.CRM.Webhooks.CustomWebhookPluginAttribute\" data-throw-if-not-resolved=\"false\"></xref> to be found by the class factory.\n"
  syntax:
    content: 'public interface ISystemWebhookPlugin : ICustomWebhookPlugin, IPlugin'
    content.vb: >-
      Public Interface ISystemWebhookPlugin
          Inherits ICustomWebhookPlugin, IPlugin
  inheritedMembers:
  - SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload,System.Threading.CancellationToken)
  extensionMethods:
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState},System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState},System.Threading.CancellationToken)
  id: GetAllWebhooksAsync(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState},System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: GetAllWebhooksAsync(String, String, String, Nullable<WebhookState>, CancellationToken)
  nameWithType: ISystemWebhookPlugin.GetAllWebhooksAsync(String, String, String, Nullable<WebhookState>, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync(System.String, System.String, System.String, System.Nullable<SuperOffice.CRM.Webhooks.WebhookState>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nReturn all the stored webhooks.\n"
  syntax:
    content: Task<IEnumerable<Webhook>> GetAllWebhooksAsync(string name = null, string eventName = null, string appToken = null, Nullable<WebhookState> state = null, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: Optional name of webhook to filter on.
    - id: eventName
      type: System.String
      description: Optional name of event to filter list of webhooks on. Default NULL for no filter.
    - id: appToken
      type: System.String
      description: Optional appToken name to filter on.
    - id: state
      type: System.Nullable{SuperOffice.CRM.Webhooks.WebhookState}
      description: Optional state to filter list of webhooks on.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{SuperOffice.CRM.Webhooks.Webhook}}
      description: List of webhooks (that are listening to eventName)
    content.vb: Function GetAllWebhooksAsync(name As String = Nothing, eventName As String = Nothing, appToken As String = Nothing, state As Nullable(Of WebhookState) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of Webhook))
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync*
  nameWithType.vb: ISystemWebhookPlugin.GetAllWebhooksAsync(String, String, String, Nullable(Of WebhookState), CancellationToken)
  fullName.vb: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync(System.String, System.String, System.String, System.Nullable(Of SuperOffice.CRM.Webhooks.WebhookState), System.Threading.CancellationToken)
  name.vb: GetAllWebhooksAsync(String, String, String, Nullable(Of WebhookState), CancellationToken)
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync(System.Int32,System.Threading.CancellationToken)
  id: GetWebhookAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(Int32, CancellationToken)
  nameWithType: ISystemWebhookPlugin.GetWebhookAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nGet a single webhook by id\n"
  syntax:
    content: Task<Webhook> GetWebhookAsync(int id, CancellationToken cancellationToken = null)
    parameters:
    - id: id
      type: System.Int32
      description: primary key for webhook
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.Webhook}
      description: The given webhook, or NULL if no found
    content.vb: Function GetWebhookAsync(id As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Webhook)
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync(SuperOffice.CRM.Webhooks.Webhook)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync(SuperOffice.CRM.Webhooks.Webhook)
  id: SaveWebhookAsync(SuperOffice.CRM.Webhooks.Webhook)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: SaveWebhookAsync(Webhook)
  nameWithType: ISystemWebhookPlugin.SaveWebhookAsync(Webhook)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync(SuperOffice.CRM.Webhooks.Webhook)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nStore/Create a webhook.\n"
  syntax:
    content: Task<Webhook> SaveWebhookAsync(Webhook webhook)
    parameters:
    - id: webhook
      type: SuperOffice.CRM.Webhooks.Webhook
      description: webhook to store. Create new hook if id=0
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.Webhook}
      description: Updated webhook, with primary key set.
    content.vb: Function SaveWebhookAsync(webhook As Webhook) As Task(Of Webhook)
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync(System.Int32,System.Threading.CancellationToken)
  id: DeleteWebhookAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: DeleteWebhookAsync(Int32, CancellationToken)
  nameWithType: ISystemWebhookPlugin.DeleteWebhookAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nRemove a given webhook from storage.\n"
  syntax:
    content: Task DeleteWebhookAsync(int id, CancellationToken cancellationToken = null)
    parameters:
    - id: id
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteWebhookAsync(id As Integer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync(SuperOffice.CRM.Webhooks.Webhook,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync(SuperOffice.CRM.Webhooks.Webhook,System.Threading.CancellationToken)
  id: TestWebhookAsync(SuperOffice.CRM.Webhooks.Webhook,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: TestWebhookAsync(Webhook, CancellationToken)
  nameWithType: ISystemWebhookPlugin.TestWebhookAsync(Webhook, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync(SuperOffice.CRM.Webhooks.Webhook, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nTest invoke a webhook with a PING event to see if it works.\n"
  syntax:
    content: Task<WebhookResponse> TestWebhookAsync(Webhook webhook, CancellationToken cancellationToken = null)
    parameters:
    - id: webhook
      type: SuperOffice.CRM.Webhooks.Webhook
      description: webhook definition
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.WebhookResponse}
      description: True if the webhook invocation worked, False if we did not get 200 OK. NULL is treated as failure.
    content.vb: Function TestWebhookAsync(webhook As Webhook, cancellationToken As CancellationToken = Nothing) As Task(Of WebhookResponse)
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync(System.Int32,System.Threading.CancellationToken)
  id: GetLastErrorAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: GetLastErrorAsync(Int32, CancellationToken)
  nameWithType: ISystemWebhookPlugin.GetLastErrorAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nReturn most recent error message received from webhook target.\n"
  syntax:
    content: Task<string> GetLastErrorAsync(int webhookId, CancellationToken cancellationToken = null)
    parameters:
    - id: webhookId
      type: System.Int32
      description: webhook definition id
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String containing most recent error message received from webhook target.
    content.vb: Function GetLastErrorAsync(webhookId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookResponse,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookResponse,System.Threading.CancellationToken)
  id: RecordResultAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookResponse,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: RecordResultAsync(Webhook, WebhookResponse, CancellationToken)
  nameWithType: ISystemWebhookPlugin.RecordResultAsync(Webhook, WebhookResponse, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync(SuperOffice.CRM.Webhooks.Webhook, SuperOffice.CRM.Webhooks.WebhookResponse, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  syntax:
    content: Task RecordResultAsync(Webhook webhook, WebhookResponse result, CancellationToken cancellationToken = null)
    parameters:
    - id: webhook
      type: SuperOffice.CRM.Webhooks.Webhook
    - id: result
      type: SuperOffice.CRM.Webhooks.WebhookResponse
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RecordResultAsync(webhook As Webhook, result As WebhookResponse, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync*
references:
- uid: SuperOffice.CRM.Webhooks
  commentId: N:SuperOffice.CRM.Webhooks
  isExternal: true
  name: SuperOffice.CRM.Webhooks
  nameWithType: SuperOffice.CRM.Webhooks
  fullName: SuperOffice.CRM.Webhooks
- uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
  isExternal: true
  name: NotifyAsync(Webhook, WebhookPayload, CancellationToken)
  nameWithType: ICustomWebhookPlugin.NotifyAsync(Webhook, WebhookPayload, CancellationToken)
  fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync(SuperOffice.CRM.Webhooks.Webhook, SuperOffice.CRM.Webhooks.WebhookPayload, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload,System.Threading.CancellationToken)
    name: NotifyAsync
    nameWithType: ICustomWebhookPlugin.NotifyAsync
    fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Webhooks.WebhookPayload
    name: WebhookPayload
    nameWithType: WebhookPayload
    fullName: SuperOffice.CRM.Webhooks.WebhookPayload
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload,System.Threading.CancellationToken)
    name: NotifyAsync
    nameWithType: ICustomWebhookPlugin.NotifyAsync
    fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.NotifyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Webhooks.WebhookPayload
    name: WebhookPayload
    nameWithType: WebhookPayload
    fullName: SuperOffice.CRM.Webhooks.WebhookPayload
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ISystemWebhookPlugin, To>()
  nameWithType: EnumUtil.MapEnums<ISystemWebhookPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ISystemWebhookPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)()
  name.vb: MapEnums(Of ISystemWebhookPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ISystemWebhookPlugin, To>
    nameWithType: EnumUtil.MapEnums<ISystemWebhookPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ISystemWebhookPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of ISystemWebhookPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ISystemWebhookPlugin, To>()
  nameWithType: Converters.MapEnums<ISystemWebhookPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of ISystemWebhookPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)()
  name.vb: MapEnums(Of ISystemWebhookPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ISystemWebhookPlugin, To>
    nameWithType: Converters.MapEnums<ISystemWebhookPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ISystemWebhookPlugin, To)
    nameWithType: Converters.MapEnums(Of ISystemWebhookPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
  commentId: T:SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: ICustomWebhookPlugin
  nameWithType: ICustomWebhookPlugin
  fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync
  isExternal: true
  name: GetAllWebhooksAsync
  nameWithType: ISystemWebhookPlugin.GetAllWebhooksAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooksAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{SuperOffice.CRM.Webhooks.WebhookState}
  commentId: '!:System.Nullable{SuperOffice.CRM.Webhooks.WebhookState}'
  definition: System.Nullable`1
  name: Nullable<WebhookState>
  nameWithType: Nullable<WebhookState>
  fullName: System.Nullable<SuperOffice.CRM.Webhooks.WebhookState>
  nameWithType.vb: Nullable(Of WebhookState)
  fullName.vb: System.Nullable(Of SuperOffice.CRM.Webhooks.WebhookState)
  name.vb: Nullable(Of WebhookState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.WebhookState
    name: WebhookState
    nameWithType: WebhookState
    fullName: SuperOffice.CRM.Webhooks.WebhookState
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.WebhookState
    name: WebhookState
    nameWithType: WebhookState
    fullName: SuperOffice.CRM.Webhooks.WebhookState
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{SuperOffice.CRM.Webhooks.Webhook}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{SuperOffice.CRM.Webhooks.Webhook}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<Webhook>>
  nameWithType: Task<IEnumerable<Webhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<SuperOffice.CRM.Webhooks.Webhook>>
  nameWithType.vb: Task(Of IEnumerable(Of Webhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Webhooks.Webhook))
  name.vb: Task(Of IEnumerable(Of Webhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync
  isExternal: true
  name: GetWebhookAsync
  nameWithType: ISystemWebhookPlugin.GetWebhookAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhookAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.Webhook}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.Webhook}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Webhook>
  nameWithType: Task<Webhook>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Webhooks.Webhook>
  nameWithType.vb: Task(Of Webhook)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Webhooks.Webhook)
  name.vb: Task(Of Webhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync
  isExternal: true
  name: SaveWebhookAsync
  nameWithType: ISystemWebhookPlugin.SaveWebhookAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhookAsync
- uid: SuperOffice.CRM.Webhooks.Webhook
  commentId: T:SuperOffice.CRM.Webhooks.Webhook
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: Webhook
  nameWithType: Webhook
  fullName: SuperOffice.CRM.Webhooks.Webhook
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync
  isExternal: true
  name: DeleteWebhookAsync
  nameWithType: ISystemWebhookPlugin.DeleteWebhookAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhookAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync
  isExternal: true
  name: TestWebhookAsync
  nameWithType: ISystemWebhookPlugin.TestWebhookAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhookAsync
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.WebhookResponse}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Webhooks.WebhookResponse}'
  definition: System.Threading.Tasks.Task`1
  name: Task<WebhookResponse>
  nameWithType: Task<WebhookResponse>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Webhooks.WebhookResponse>
  nameWithType.vb: Task(Of WebhookResponse)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Webhooks.WebhookResponse)
  name.vb: Task(Of WebhookResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.WebhookResponse
    name: WebhookResponse
    nameWithType: WebhookResponse
    fullName: SuperOffice.CRM.Webhooks.WebhookResponse
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.WebhookResponse
    name: WebhookResponse
    nameWithType: WebhookResponse
    fullName: SuperOffice.CRM.Webhooks.WebhookResponse
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync
  isExternal: true
  name: GetLastErrorAsync
  nameWithType: ISystemWebhookPlugin.GetLastErrorAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastErrorAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync
  isExternal: true
  name: RecordResultAsync
  nameWithType: ISystemWebhookPlugin.RecordResultAsync
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.RecordResultAsync
- uid: SuperOffice.CRM.Webhooks.WebhookResponse
  commentId: T:SuperOffice.CRM.Webhooks.WebhookResponse
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: WebhookResponse
  nameWithType: WebhookResponse
  fullName: SuperOffice.CRM.Webhooks.WebhookResponse
