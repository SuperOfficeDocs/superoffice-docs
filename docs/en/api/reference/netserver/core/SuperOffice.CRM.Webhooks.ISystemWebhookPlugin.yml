### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  commentId: T:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  id: ISystemWebhookPlugin
  parent: SuperOffice.CRM.Webhooks
  children:
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook(System.Int32)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState})
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError(System.Int32)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook(System.Int32)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook(SuperOffice.CRM.Webhooks.Webhook)
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook(SuperOffice.CRM.Webhooks.Webhook)
  langs:
  - csharp
  - vb
  name: ISystemWebhookPlugin
  nameWithType: ISystemWebhookPlugin
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nWebhook plugin - there is only one of these per system (as determined by the plugin priority). \nThe plugin handles broadcasting the HTTP hooks to subscribing systems, and saving and storing the \nplugin info.\nPlugins must be marked with the <xref href=\"SuperOffice.CRM.Webhooks.CustomWebhookPluginAttribute\" data-throw-if-not-resolved=\"false\"></xref> to be found by the class factory.\n"
  syntax:
    content: 'public interface ISystemWebhookPlugin : ICustomWebhookPlugin, IPlugin'
    content.vb: >-
      Public Interface ISystemWebhookPlugin
          Inherits ICustomWebhookPlugin, IPlugin
  inheritedMembers:
  - SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload)
  extensionMethods:
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState})
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState})
  id: GetAllWebhooks(System.String,System.String,System.String,System.Nullable{SuperOffice.CRM.Webhooks.WebhookState})
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: GetAllWebhooks(String, String, String, Nullable<WebhookState>)
  nameWithType: ISystemWebhookPlugin.GetAllWebhooks(String, String, String, Nullable<WebhookState>)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks(System.String, System.String, System.String, System.Nullable<SuperOffice.CRM.Webhooks.WebhookState>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nReturn all the stored webhooks.\n"
  syntax:
    content: IEnumerable<Webhook> GetAllWebhooks(string name = null, string eventName = null, string appToken = null, WebhookState? state = default(WebhookState? ))
    parameters:
    - id: name
      type: System.String
      description: Optional name of webhook to filter on.
    - id: eventName
      type: System.String
      description: Optional name of event to filter list of webhooks on. Default NULL for no filter.
    - id: appToken
      type: System.String
      description: Optional appToken name to filter on.
    - id: state
      type: System.Nullable{SuperOffice.CRM.Webhooks.WebhookState}
      description: Optional state to filter list of webhooks on.
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Webhooks.Webhook}
      description: List of webhooks (that are listening to eventName)
    content.vb: Function GetAllWebhooks(name As String = Nothing, eventName As String = Nothing, appToken As String = Nothing, state As WebhookState? = Nothing) As IEnumerable(Of Webhook)
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks*
  nameWithType.vb: ISystemWebhookPlugin.GetAllWebhooks(String, String, String, Nullable(Of WebhookState))
  fullName.vb: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks(System.String, System.String, System.String, System.Nullable(Of SuperOffice.CRM.Webhooks.WebhookState))
  name.vb: GetAllWebhooks(String, String, String, Nullable(Of WebhookState))
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook(System.Int32)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook(System.Int32)
  id: GetWebhook(System.Int32)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: GetWebhook(Int32)
  nameWithType: ISystemWebhookPlugin.GetWebhook(Int32)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nGet a single webhook by id\n"
  syntax:
    content: Webhook GetWebhook(int id)
    parameters:
    - id: id
      type: System.Int32
      description: primary key for webhook
    return:
      type: SuperOffice.CRM.Webhooks.Webhook
      description: The given webhook, or NULL if no found
    content.vb: Function GetWebhook(id As Integer) As Webhook
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook(SuperOffice.CRM.Webhooks.Webhook)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook(SuperOffice.CRM.Webhooks.Webhook)
  id: SaveWebhook(SuperOffice.CRM.Webhooks.Webhook)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: SaveWebhook(Webhook)
  nameWithType: ISystemWebhookPlugin.SaveWebhook(Webhook)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook(SuperOffice.CRM.Webhooks.Webhook)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nStore/Create a webhook.\n"
  syntax:
    content: Webhook SaveWebhook(Webhook webhook)
    parameters:
    - id: webhook
      type: SuperOffice.CRM.Webhooks.Webhook
      description: webhook to store. Create new hook if id=0
    return:
      type: SuperOffice.CRM.Webhooks.Webhook
      description: Updated webhook, with primary key set.
    content.vb: Function SaveWebhook(webhook As Webhook) As Webhook
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook(System.Int32)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook(System.Int32)
  id: DeleteWebhook(System.Int32)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: DeleteWebhook(Int32)
  nameWithType: ISystemWebhookPlugin.DeleteWebhook(Int32)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nRemove a given webhook from storage.\n"
  syntax:
    content: void DeleteWebhook(int id)
    parameters:
    - id: id
      type: System.Int32
    content.vb: Sub DeleteWebhook(id As Integer)
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook(SuperOffice.CRM.Webhooks.Webhook)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook(SuperOffice.CRM.Webhooks.Webhook)
  id: TestWebhook(SuperOffice.CRM.Webhooks.Webhook)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: TestWebhook(Webhook)
  nameWithType: ISystemWebhookPlugin.TestWebhook(Webhook)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook(SuperOffice.CRM.Webhooks.Webhook)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nTest invoke a webhook with a PING event to see if it works.\n"
  syntax:
    content: WebhookResponse TestWebhook(Webhook webhook)
    parameters:
    - id: webhook
      type: SuperOffice.CRM.Webhooks.Webhook
      description: webhook definition
    return:
      type: SuperOffice.CRM.Webhooks.WebhookResponse
      description: True if the webhook invocation worked, False if we did not get 200 OK. NULL is treated as failure.
    content.vb: Function TestWebhook(webhook As Webhook) As WebhookResponse
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook*
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError(System.Int32)
  commentId: M:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError(System.Int32)
  id: GetLastError(System.Int32)
  parent: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin
  langs:
  - csharp
  - vb
  name: GetLastError(Int32)
  nameWithType: ISystemWebhookPlugin.GetLastError(Int32)
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nReturn most recent error message received from webhook target.\n"
  syntax:
    content: string GetLastError(int webhookId)
    parameters:
    - id: webhookId
      type: System.Int32
      description: webhook definition id
    return:
      type: System.String
      description: String containing most recent error message received from webhook target.
    content.vb: Function GetLastError(webhookId As Integer) As String
  overload: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError*
references:
- uid: SuperOffice.CRM.Webhooks
  commentId: N:SuperOffice.CRM.Webhooks
  isExternal: true
  name: SuperOffice.CRM.Webhooks
  nameWithType: SuperOffice.CRM.Webhooks
  fullName: SuperOffice.CRM.Webhooks
- uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload)
  commentId: M:SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload)
  parent: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
  isExternal: true
  name: Notify(Webhook, WebhookPayload)
  nameWithType: ICustomWebhookPlugin.Notify(Webhook, WebhookPayload)
  fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify(SuperOffice.CRM.Webhooks.Webhook, SuperOffice.CRM.Webhooks.WebhookPayload)
  spec.csharp:
  - uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload)
    name: Notify
    nameWithType: ICustomWebhookPlugin.Notify
    fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Webhooks.WebhookPayload
    name: WebhookPayload
    nameWithType: WebhookPayload
    fullName: SuperOffice.CRM.Webhooks.WebhookPayload
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify(SuperOffice.CRM.Webhooks.Webhook,SuperOffice.CRM.Webhooks.WebhookPayload)
    name: Notify
    nameWithType: ICustomWebhookPlugin.Notify
    fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin.Notify
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Webhooks.WebhookPayload
    name: WebhookPayload
    nameWithType: WebhookPayload
    fullName: SuperOffice.CRM.Webhooks.WebhookPayload
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ISystemWebhookPlugin, To>()
  nameWithType: EnumUtil.MapEnums<ISystemWebhookPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ISystemWebhookPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)()
  name.vb: MapEnums(Of ISystemWebhookPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ISystemWebhookPlugin, To>
    nameWithType: EnumUtil.MapEnums<ISystemWebhookPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ISystemWebhookPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of ISystemWebhookPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ISystemWebhookPlugin, To>()
  nameWithType: Converters.MapEnums<ISystemWebhookPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of ISystemWebhookPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)()
  name.vb: MapEnums(Of ISystemWebhookPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ISystemWebhookPlugin, To>
    nameWithType: Converters.MapEnums<ISystemWebhookPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ISystemWebhookPlugin, To)
    nameWithType: Converters.MapEnums(Of ISystemWebhookPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Webhooks.ISystemWebhookPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
  commentId: T:SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: ICustomWebhookPlugin
  nameWithType: ICustomWebhookPlugin
  fullName: SuperOffice.CRM.Webhooks.ICustomWebhookPlugin
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks
  isExternal: true
  name: GetAllWebhooks
  nameWithType: ISystemWebhookPlugin.GetAllWebhooks
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetAllWebhooks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{SuperOffice.CRM.Webhooks.WebhookState}
  commentId: T:System.Nullable{SuperOffice.CRM.Webhooks.WebhookState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<WebhookState>
  nameWithType: Nullable<WebhookState>
  fullName: System.Nullable<SuperOffice.CRM.Webhooks.WebhookState>
  nameWithType.vb: Nullable(Of WebhookState)
  fullName.vb: System.Nullable(Of SuperOffice.CRM.Webhooks.WebhookState)
  name.vb: Nullable(Of WebhookState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.WebhookState
    name: WebhookState
    nameWithType: WebhookState
    fullName: SuperOffice.CRM.Webhooks.WebhookState
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.WebhookState
    name: WebhookState
    nameWithType: WebhookState
    fullName: SuperOffice.CRM.Webhooks.WebhookState
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Webhooks.Webhook}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Webhooks.Webhook}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Webhook>
  nameWithType: IEnumerable<Webhook>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Webhooks.Webhook>
  nameWithType.vb: IEnumerable(Of Webhook)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Webhooks.Webhook)
  name.vb: IEnumerable(Of Webhook)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.CRM.Webhooks.Webhook
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook
  isExternal: true
  name: GetWebhook
  nameWithType: ISystemWebhookPlugin.GetWebhook
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetWebhook
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Webhooks.Webhook
  commentId: T:SuperOffice.CRM.Webhooks.Webhook
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: Webhook
  nameWithType: Webhook
  fullName: SuperOffice.CRM.Webhooks.Webhook
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook
  isExternal: true
  name: SaveWebhook
  nameWithType: ISystemWebhookPlugin.SaveWebhook
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.SaveWebhook
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook
  isExternal: true
  name: DeleteWebhook
  nameWithType: ISystemWebhookPlugin.DeleteWebhook
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.DeleteWebhook
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook
  isExternal: true
  name: TestWebhook
  nameWithType: ISystemWebhookPlugin.TestWebhook
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.TestWebhook
- uid: SuperOffice.CRM.Webhooks.WebhookResponse
  commentId: T:SuperOffice.CRM.Webhooks.WebhookResponse
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: WebhookResponse
  nameWithType: WebhookResponse
  fullName: SuperOffice.CRM.Webhooks.WebhookResponse
- uid: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError*
  commentId: Overload:SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError
  isExternal: true
  name: GetLastError
  nameWithType: ISystemWebhookPlugin.GetLastError
  fullName: SuperOffice.CRM.Webhooks.ISystemWebhookPlugin.GetLastError
