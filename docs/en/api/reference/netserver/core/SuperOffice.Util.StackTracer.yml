### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.StackTracer
  commentId: T:SuperOffice.Util.StackTracer
  id: StackTracer
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.StackTracer.FormatTrace(SuperOffice.Util.StackTracer)
  - SuperOffice.Util.StackTracer.GetStack
  - SuperOffice.Util.StackTracer.GetStack(System.Int32)
  - SuperOffice.Util.StackTracer.GetStack(System.Int32,System.Int32)
  - SuperOffice.Util.StackTracer.GetThreadDomainId
  - SuperOffice.Util.StackTracer.GetToLastSuperOffice
  - SuperOffice.Util.StackTracer.StackTrace
  - SuperOffice.Util.StackTracer.ToString
  langs:
  - csharp
  - vb
  name: StackTracer
  nameWithType: StackTracer
  fullName: SuperOffice.Util.StackTracer
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nUtility class for collecting stack traces - useful when you want to make debugging easier by collecting\nrun-time data on where your classes get called from. Enabled by EnableScaffolding AND EnableStackTracing,\nwhich default to FALSE (EnableStackTracing defaults to TRUE in DEBUG builds).\n"
  remarks: "\nStackTracer has been implemented in the TableInfo base class, because it can be infuriatingly hard to discover\nwho allocated a certain ContactTableInfo or whatever when you start getting unwanted cross joins. This example is \ntaken from the TableInfo class:\n"
  syntax:
    content: public class StackTracer
    content.vb: Public Class StackTracer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Util.StackTracer.EnumUtil.MapEnums``2
  - SuperOffice.Util.StackTracer.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Util.StackTracer.GetThreadDomainId
  commentId: M:SuperOffice.Util.StackTracer.GetThreadDomainId
  id: GetThreadDomainId
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: GetThreadDomainId()
  nameWithType: StackTracer.GetThreadDomainId()
  fullName: SuperOffice.Util.StackTracer.GetThreadDomainId()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nReturn a string with the AppDomain and Thread id&apos;s in a form suitable for debugging/console logging\n"
  syntax:
    content: public static string GetThreadDomainId()
    return:
      type: System.String
    content.vb: Public Shared Function GetThreadDomainId As String
  overload: SuperOffice.Util.StackTracer.GetThreadDomainId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.StackTracer.GetStack
  commentId: M:SuperOffice.Util.StackTracer.GetStack
  id: GetStack
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: GetStack()
  nameWithType: StackTracer.GetStack()
  fullName: SuperOffice.Util.StackTracer.GetStack()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet one level from the stack directly above the caller&apos;s level\n"
  syntax:
    content: public static StackTracer GetStack()
    return:
      type: SuperOffice.Util.StackTracer
      description: StackTracer object containing the trace, or null if tracing is off
    content.vb: Public Shared Function GetStack As StackTracer
  overload: SuperOffice.Util.StackTracer.GetStack*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.StackTracer.GetStack(System.Int32)
  commentId: M:SuperOffice.Util.StackTracer.GetStack(System.Int32)
  id: GetStack(System.Int32)
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: GetStack(Int32)
  nameWithType: StackTracer.GetStack(Int32)
  fullName: SuperOffice.Util.StackTracer.GetStack(System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet one level from the stack, skipping a number of additional levels first\n"
  syntax:
    content: public static StackTracer GetStack(int levelsToSkip)
    parameters:
    - id: levelsToSkip
      type: System.Int32
      description: Number of levels to skip, 1 means your parent etc
    return:
      type: SuperOffice.Util.StackTracer
      description: StackTracer object containing the trace, or null if tracing is off
    content.vb: Public Shared Function GetStack(levelsToSkip As Integer) As StackTracer
  overload: SuperOffice.Util.StackTracer.GetStack*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.StackTracer.GetStack(System.Int32,System.Int32)
  commentId: M:SuperOffice.Util.StackTracer.GetStack(System.Int32,System.Int32)
  id: GetStack(System.Int32,System.Int32)
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: GetStack(Int32, Int32)
  nameWithType: StackTracer.GetStack(Int32, Int32)
  fullName: SuperOffice.Util.StackTracer.GetStack(System.Int32, System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet the given number of levels from the stack, skipping a number of additional levels first\n"
  syntax:
    content: public static StackTracer GetStack(int levelsToSkip, int levelsToKeep)
    parameters:
    - id: levelsToSkip
      type: System.Int32
      description: Number of levels to skip, 1 means your parent etc
    - id: levelsToKeep
      type: System.Int32
      description: Number of levels to keep, will be limited to available. Specify -1 to get all.
    return:
      type: SuperOffice.Util.StackTracer
      description: StackTracer object containing the trace, or null if tracing is off
    content.vb: Public Shared Function GetStack(levelsToSkip As Integer, levelsToKeep As Integer) As StackTracer
  overload: SuperOffice.Util.StackTracer.GetStack*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.StackTracer.GetToLastSuperOffice
  commentId: M:SuperOffice.Util.StackTracer.GetToLastSuperOffice
  id: GetToLastSuperOffice
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: GetToLastSuperOffice()
  nameWithType: StackTracer.GetToLastSuperOffice()
  fullName: SuperOffice.Util.StackTracer.GetToLastSuperOffice()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nObtain a stack trace, from the current frame and back to the most-remote SuperOffice-assembly frame; plus one to show where we came from\n"
  syntax:
    content: public static string GetToLastSuperOffice()
    return:
      type: System.String
    content.vb: Public Shared Function GetToLastSuperOffice As String
  overload: SuperOffice.Util.StackTracer.GetToLastSuperOffice*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.StackTracer.ToString
  commentId: M:SuperOffice.Util.StackTracer.ToString
  id: ToString
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StackTracer.ToString()
  fullName: SuperOffice.Util.StackTracer.ToString()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nReturn the current stack levels as a single string, with newlines between levels\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.Util.StackTracer.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Util.StackTracer.FormatTrace(SuperOffice.Util.StackTracer)
  commentId: M:SuperOffice.Util.StackTracer.FormatTrace(SuperOffice.Util.StackTracer)
  id: FormatTrace(SuperOffice.Util.StackTracer)
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: FormatTrace(StackTracer)
  nameWithType: StackTracer.FormatTrace(StackTracer)
  fullName: SuperOffice.Util.StackTracer.FormatTrace(SuperOffice.Util.StackTracer)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nReturn a formatted trace or the empty string\n"
  syntax:
    content: public static string FormatTrace(StackTracer trace)
    parameters:
    - id: trace
      type: SuperOffice.Util.StackTracer
      description: StackTracer object to format, or null
    return:
      type: System.String
      description: Formatted trace or empty string
    content.vb: Public Shared Function FormatTrace(trace As StackTracer) As String
  overload: SuperOffice.Util.StackTracer.FormatTrace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.StackTracer.StackTrace
  commentId: P:SuperOffice.Util.StackTracer.StackTrace
  id: StackTrace
  parent: SuperOffice.Util.StackTracer
  langs:
  - csharp
  - vb
  name: StackTrace
  nameWithType: StackTracer.StackTrace
  fullName: SuperOffice.Util.StackTracer.StackTrace
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public string[] StackTrace { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property StackTrace As String()
  overload: SuperOffice.Util.StackTracer.StackTrace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.StackTracer.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<StackTracer, To>()
  nameWithType: EnumUtil.MapEnums<StackTracer, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.StackTracer, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of StackTracer, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.StackTracer, To)()
  name.vb: MapEnums(Of StackTracer, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<StackTracer, To>
    nameWithType: EnumUtil.MapEnums<StackTracer, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.StackTracer, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of StackTracer, To)
    nameWithType: EnumUtil.MapEnums(Of StackTracer, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.StackTracer, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.StackTracer.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<StackTracer, To>()
  nameWithType: Converters.MapEnums<StackTracer, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.StackTracer, To>()
  nameWithType.vb: Converters.MapEnums(Of StackTracer, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.StackTracer, To)()
  name.vb: MapEnums(Of StackTracer, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<StackTracer, To>
    nameWithType: Converters.MapEnums<StackTracer, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.StackTracer, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of StackTracer, To)
    nameWithType: Converters.MapEnums(Of StackTracer, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.StackTracer, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.StackTracer.GetThreadDomainId*
  commentId: Overload:SuperOffice.Util.StackTracer.GetThreadDomainId
  isExternal: true
  name: GetThreadDomainId
  nameWithType: StackTracer.GetThreadDomainId
  fullName: SuperOffice.Util.StackTracer.GetThreadDomainId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Util.StackTracer.GetStack*
  commentId: Overload:SuperOffice.Util.StackTracer.GetStack
  isExternal: true
  name: GetStack
  nameWithType: StackTracer.GetStack
  fullName: SuperOffice.Util.StackTracer.GetStack
- uid: SuperOffice.Util.StackTracer
  commentId: T:SuperOffice.Util.StackTracer
  parent: SuperOffice.Util
  isExternal: true
  name: StackTracer
  nameWithType: StackTracer
  fullName: SuperOffice.Util.StackTracer
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Util.StackTracer.GetToLastSuperOffice*
  commentId: Overload:SuperOffice.Util.StackTracer.GetToLastSuperOffice
  isExternal: true
  name: GetToLastSuperOffice
  nameWithType: StackTracer.GetToLastSuperOffice
  fullName: SuperOffice.Util.StackTracer.GetToLastSuperOffice
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.StackTracer.ToString*
  commentId: Overload:SuperOffice.Util.StackTracer.ToString
  isExternal: true
  name: ToString
  nameWithType: StackTracer.ToString
  fullName: SuperOffice.Util.StackTracer.ToString
- uid: SuperOffice.Util.StackTracer.FormatTrace*
  commentId: Overload:SuperOffice.Util.StackTracer.FormatTrace
  isExternal: true
  name: FormatTrace
  nameWithType: StackTracer.FormatTrace
  fullName: SuperOffice.Util.StackTracer.FormatTrace
- uid: SuperOffice.Util.StackTracer.StackTrace*
  commentId: Overload:SuperOffice.Util.StackTracer.StackTrace
  isExternal: true
  name: StackTrace
  nameWithType: StackTracer.StackTrace
  fullName: SuperOffice.Util.StackTracer.StackTrace
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
