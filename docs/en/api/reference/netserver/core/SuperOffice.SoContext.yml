### YamlMime:ManagedReference
items:
- uid: SuperOffice.SoContext
  commentId: T:SuperOffice.SoContext
  id: SoContext
  parent: SuperOffice
  children:
  - SuperOffice.SoContext.#ctor
  - SuperOffice.SoContext.CloseCurrentSession
  - SuperOffice.SoContext.CurrentIdentity
  - SuperOffice.SoContext.CurrentPrincipal
  - SuperOffice.SoContext.IsAuthenticated
  - SuperOffice.SoContext.ToString
  langs:
  - csharp
  - vb
  name: SoContext
  nameWithType: SoContext
  fullName: SuperOffice.SoContext
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nClass holding context information about the currently logged on user.\n"
  example:
  - "\nLog in and get the users home country:\n<pre><code>SoSession session = SoSession.Authenticate(&quot;user&quot;, &quot;password&quot;);\nint countryId = SoContext.CurrentPrincipal.GetHomeCountryId();\nsession.Close();</code></pre>\n"
  syntax:
    content: 'public sealed class SoContext : Object'
    content.vb: >-
      Public NotInheritable Class SoContext
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.SoContext.EnumUtil.MapEnums``2
  - SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.SoContext)
  - SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.SoContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.SoContext.CloseCurrentSession
  commentId: M:SuperOffice.SoContext.CloseCurrentSession
  id: CloseCurrentSession
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CloseCurrentSession()
  nameWithType: SoContext.CloseCurrentSession()
  fullName: SuperOffice.SoContext.CloseCurrentSession()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nClose any open session.\nDoes nothing if the current session is already closed.\n"
  remarks: "\nWill no longer throw an exception if called twice.\n"
  syntax:
    content: public static void CloseCurrentSession()
    content.vb: Public Shared Sub CloseCurrentSession
  overload: SuperOffice.SoContext.CloseCurrentSession*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoContext.ToString
  commentId: M:SuperOffice.SoContext.ToString
  id: ToString
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SoContext.ToString()
  fullName: SuperOffice.SoContext.ToString()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nIf there is a valid principal, return his ToString() - generally for debug purposes. An empty string\nis returned if there is no valid principal (_currentPrincipal returned null).\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: Current principal&apos;s ToString, or string.Empty if the current <see cref="!:SoPrincipal"></see> is null
    content.vb: Public Overrides Function ToString As String
  overload: SuperOffice.SoContext.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.SoContext.#ctor
  commentId: M:SuperOffice.SoContext.#ctor
  id: '#ctor'
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: SoContext()
  nameWithType: SoContext.SoContext()
  fullName: SuperOffice.SoContext.SoContext()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  syntax:
    content: public SoContext()
    content.vb: Public Sub New
  overload: SuperOffice.SoContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.SoContext.CurrentPrincipal
  commentId: P:SuperOffice.SoContext.CurrentPrincipal
  id: CurrentPrincipal
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CurrentPrincipal
  nameWithType: SoContext.CurrentPrincipal
  fullName: SuperOffice.SoContext.CurrentPrincipal
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nObtain the current principal\n"
  syntax:
    content: public static ClaimsPrincipal CurrentPrincipal { get; }
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
    content.vb: Public Shared ReadOnly Property CurrentPrincipal As ClaimsPrincipal
  overload: SuperOffice.SoContext.CurrentPrincipal*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SuperOffice.SoContext.CurrentIdentity
  commentId: P:SuperOffice.SoContext.CurrentIdentity
  id: CurrentIdentity
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CurrentIdentity
  nameWithType: SoContext.CurrentIdentity
  fullName: SuperOffice.SoContext.CurrentIdentity
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nObtain the current identity\n"
  syntax:
    content: public static ClaimsIdentity CurrentIdentity { get; }
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
    content.vb: Public Shared ReadOnly Property CurrentIdentity As ClaimsIdentity
  overload: SuperOffice.SoContext.CurrentIdentity*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SuperOffice.SoContext.IsAuthenticated
  commentId: P:SuperOffice.SoContext.IsAuthenticated
  id: IsAuthenticated
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  nameWithType: SoContext.IsAuthenticated
  fullName: SuperOffice.SoContext.IsAuthenticated
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nTrue if authenticated\n"
  syntax:
    content: public static bool IsAuthenticated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsAuthenticated As Boolean
  overload: SuperOffice.SoContext.IsAuthenticated*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: SuperOffice
  commentId: N:SuperOffice
  isExternal: true
  name: SuperOffice
  nameWithType: SuperOffice
  fullName: SuperOffice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.SoContext.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoContext, To>()
  nameWithType: EnumUtil.MapEnums<SoContext, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.SoContext, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoContext, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.SoContext, To)()
  name.vb: MapEnums(Of SoContext, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoContext, To>
    nameWithType: EnumUtil.MapEnums<SoContext, To>
    fullName: EnumUtil.MapEnums<SuperOffice.SoContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoContext, To)
    nameWithType: EnumUtil.MapEnums(Of SoContext, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.SoContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.SoContext)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<SoContext>(SoContext)
  nameWithType: ObjectExtensions.AssignByReflection<SoContext>(SoContext)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.SoContext>(SuperOffice.SoContext)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of SoContext)(SoContext)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.SoContext)(SuperOffice.SoContext)
  name.vb: AssignByReflection(Of SoContext)(SoContext)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<SoContext>
    nameWithType: ObjectExtensions.AssignByReflection<SoContext>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.SoContext>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.SoContext
    name: SoContext
    nameWithType: SoContext
    fullName: SuperOffice.SoContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of SoContext)
    nameWithType: ObjectExtensions.AssignByReflection(Of SoContext)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.SoContext)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.SoContext
    name: SoContext
    nameWithType: SoContext
    fullName: SuperOffice.SoContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<SoContext>()
  nameWithType: ObjectExtensions.GraphCopy<SoContext>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.SoContext>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of SoContext)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.SoContext)()
  name.vb: GraphCopy(Of SoContext)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<SoContext>
    nameWithType: ObjectExtensions.GraphCopy<SoContext>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.SoContext>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of SoContext)
    nameWithType: ObjectExtensions.GraphCopy(Of SoContext)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.SoContext)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.SoContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoContext, To>()
  nameWithType: Converters.MapEnums<SoContext, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.SoContext, To>()
  nameWithType.vb: Converters.MapEnums(Of SoContext, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.SoContext, To)()
  name.vb: MapEnums(Of SoContext, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoContext, To>
    nameWithType: Converters.MapEnums<SoContext, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.SoContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoContext, To)
    nameWithType: Converters.MapEnums(Of SoContext, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.SoContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.SoContext.CloseCurrentSession*
  commentId: Overload:SuperOffice.SoContext.CloseCurrentSession
  isExternal: true
  name: CloseCurrentSession
  nameWithType: SoContext.CloseCurrentSession
  fullName: SuperOffice.SoContext.CloseCurrentSession
- uid: SuperOffice.SoContext.ToString*
  commentId: Overload:SuperOffice.SoContext.ToString
  isExternal: true
  name: ToString
  nameWithType: SoContext.ToString
  fullName: SuperOffice.SoContext.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.SoContext.#ctor*
  commentId: Overload:SuperOffice.SoContext.#ctor
  isExternal: true
  name: SoContext
  nameWithType: SoContext.SoContext
  fullName: SuperOffice.SoContext.SoContext
- uid: SuperOffice.SoContext.CurrentPrincipal*
  commentId: Overload:SuperOffice.SoContext.CurrentPrincipal
  isExternal: true
  name: CurrentPrincipal
  nameWithType: SoContext.CurrentPrincipal
  fullName: SuperOffice.SoContext.CurrentPrincipal
- uid: System.Security.Claims.ClaimsPrincipal
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: SuperOffice.SoContext.CurrentIdentity*
  commentId: Overload:SuperOffice.SoContext.CurrentIdentity
  isExternal: true
  name: CurrentIdentity
  nameWithType: SoContext.CurrentIdentity
  fullName: SuperOffice.SoContext.CurrentIdentity
- uid: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: SuperOffice.SoContext.IsAuthenticated*
  commentId: Overload:SuperOffice.SoContext.IsAuthenticated
  isExternal: true
  name: IsAuthenticated
  nameWithType: SoContext.IsAuthenticated
  fullName: SuperOffice.SoContext.IsAuthenticated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
