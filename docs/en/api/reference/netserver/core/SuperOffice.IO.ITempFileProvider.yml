### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.ITempFileProvider
  commentId: T:SuperOffice.IO.ITempFileProvider
  id: ITempFileProvider
  parent: SuperOffice.IO
  children:
  - SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ITempFileProvider
  nameWithType: ITempFileProvider
  fullName: SuperOffice.IO.ITempFileProvider
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nInterface defining a provider that offers services for reading and writing temporary files.\n"
  remarks: "\nTemporary files are used in several contexts - when transferring documents in chunks into and out of\nNetServer; when uploading a document to be saved through the Document dialog, and when handling mails\nand attachments.\n<p></p>\nThe implementation supplied with NetServer provides these services using temporary files,\ncontrolled by the Documents section in the config file with respect to path and impersonation. \n<p></p>\n"
  syntax:
    content: public interface ITempFileProvider
    content.vb: Public Interface ITempFileProvider
  extensionMethods:
  - SuperOffice.IO.ITempFileProvider.EnumUtil.MapEnums``2
  - SuperOffice.IO.ITempFileProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String,System.Threading.CancellationToken)
  id: CreateFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CreateFileAsync(String, CancellationToken)
  nameWithType: ITempFileProvider.CreateFileAsync(String, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nCreate a temporary &apos;file&apos;\n"
  syntax:
    content: Task<string> CreateFileAsync(string name, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name to be used for later access. The actual key used by the implementation should also take

        into account the associate ID, since multiple concurrent users may use the same name, and that does <strong>not</strong> mean

        file sharing between users.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function CreateFileAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.IO.ITempFileProvider.CreateFileAsync*
- uid: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  id: CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CreateFileForAppendingAsync(String, CancellationToken)
  nameWithType: ITempFileProvider.CreateFileForAppendingAsync(String, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nCreate a temporary &apos;file&apos; for appending\n"
  syntax:
    content: Task<string> CreateFileForAppendingAsync(string name, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name to be used for later access. The actual key used by the implementation should also take

        into account the associate ID, since multiple concurrent users may use the same name, and that does <strong>not</strong> mean

        file sharing between users.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function CreateFileForAppendingAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync*
- uid: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  id: CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CheckIfFileExistsAsync(String, CancellationToken)
  nameWithType: ITempFileProvider.CheckIfFileExistsAsync(String, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nCheck if a named temporary file/storage area exists\n"
  syntax:
    content: Task<bool> CheckIfFileExistsAsync(string name, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: File name to check
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if such a file exists
    content.vb: Function CheckIfFileExistsAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync*
- uid: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  id: ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: ReadFileCompleteAsync(String, CancellationToken)
  nameWithType: ITempFileProvider.ReadFileCompleteAsync(String, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nMake the complete content of the file available as a stream (sequential read)\n"
  syntax:
    content: Task<Stream> ReadFileCompleteAsync(string name, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <see cref="!:CreateFile"></see>

        method for more information on how file names are handled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Stream representing the entire current contents of the file
    content.vb: Function ReadFileCompleteAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync*
- uid: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  id: ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: ReadFileChunkAsync(String, Int64, Byte[], CancellationToken)
  nameWithType: ITempFileProvider.ReadFileChunkAsync(String, Int64, Byte[], CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String, System.Int64, System.Byte[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nRead a chunk of data from the file (random access read)\n"
  syntax:
    content: Task<int> ReadFileChunkAsync(string name, long filePosition, byte[] bufferToUpdate, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <see cref="!:CreateFile"></see>

        method for more information on how file names are handled.
    - id: filePosition
      type: System.Int64
      description: Position in bytes, starting at 0, to start reading from
    - id: bufferToUpdate
      type: System.Byte[]
      description: >-
        Data buffer to update. The length of this buffer is the maximum

        number of bytes that will be read
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Actual number of bytes read. If less than the length of the buffer, end-of-file is indicated
    content.vb: Function ReadFileChunkAsync(name As String, filePosition As Long, bufferToUpdate As Byte(), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync*
  nameWithType.vb: ITempFileProvider.ReadFileChunkAsync(String, Int64, Byte(), CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String, System.Int64, System.Byte(), System.Threading.CancellationToken)
  name.vb: ReadFileChunkAsync(String, Int64, Byte(), CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  id: WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: WriteFileCompleteAsync(String, Stream, CancellationToken)
  nameWithType: ITempFileProvider.WriteFileCompleteAsync(String, Stream, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String, System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n(Over)write - not append - the complete content of the file (sequential write). Any previous content is lost\n"
  syntax:
    content: Task WriteFileCompleteAsync(string name, Stream data, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <see cref="!:CreateFile"></see>

        method for more information on how file names are handled.
    - id: data
      type: System.IO.Stream
      description: Stream to read data from
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function WriteFileCompleteAsync(name As String, data As Stream, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync*
- uid: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  id: WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: WriteFileChunkAsync(String, Int64, Byte[], CancellationToken)
  nameWithType: ITempFileProvider.WriteFileChunkAsync(String, Int64, Byte[], CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String, System.Int64, System.Byte[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nWrite a chunk of data to the file (random access write)\n"
  syntax:
    content: Task WriteFileChunkAsync(string name, long filePosition, byte[] bufferToWriteFrom, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <see cref="!:CreateFile"></see>

        method for more information on how file names are handled.
    - id: filePosition
      type: System.Int64
      description: Position in bytes, starting at 0, that will be written to
    - id: bufferToWriteFrom
      type: System.Byte[]
      description: Buffer to write; buffer length determines the size of the write operation
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function WriteFileChunkAsync(name As String, filePosition As Long, bufferToWriteFrom As Byte(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync*
  nameWithType.vb: ITempFileProvider.WriteFileChunkAsync(String, Int64, Byte(), CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String, System.Int64, System.Byte(), System.Threading.CancellationToken)
  name.vb: WriteFileChunkAsync(String, Int64, Byte(), CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String,System.Threading.CancellationToken)
  id: DeleteFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: DeleteFileAsync(String, CancellationToken)
  nameWithType: ITempFileProvider.DeleteFileAsync(String, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nDelete a temporary file\n"
  syntax:
    content: Task DeleteFileAsync(string name, CancellationToken cancellationToken = null)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <see cref="!:CreateFile"></see>

        method for more information on how file names are handled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteFileAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.ITempFileProvider.DeleteFileAsync*
references:
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
- uid: SuperOffice.IO.ITempFileProvider.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ITempFileProvider, To>()
  nameWithType: EnumUtil.MapEnums<ITempFileProvider, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.IO.ITempFileProvider, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ITempFileProvider, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)()
  name.vb: MapEnums(Of ITempFileProvider, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ITempFileProvider, To>
    nameWithType: EnumUtil.MapEnums<ITempFileProvider, To>
    fullName: EnumUtil.MapEnums<SuperOffice.IO.ITempFileProvider, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ITempFileProvider, To)
    nameWithType: EnumUtil.MapEnums(Of ITempFileProvider, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ITempFileProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ITempFileProvider, To>()
  nameWithType: Converters.MapEnums<ITempFileProvider, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ITempFileProvider, To>()
  nameWithType.vb: Converters.MapEnums(Of ITempFileProvider, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)()
  name.vb: MapEnums(Of ITempFileProvider, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ITempFileProvider, To>
    nameWithType: Converters.MapEnums<ITempFileProvider, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ITempFileProvider, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ITempFileProvider, To)
    nameWithType: Converters.MapEnums(Of ITempFileProvider, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.IO.ITempFileProvider.CreateFileAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CreateFileAsync
  isExternal: true
  name: CreateFileAsync
  nameWithType: ITempFileProvider.CreateFileAsync
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync
  isExternal: true
  name: CreateFileForAppendingAsync
  nameWithType: ITempFileProvider.CreateFileForAppendingAsync
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync
- uid: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync
  isExternal: true
  name: CheckIfFileExistsAsync
  nameWithType: ITempFileProvider.CheckIfFileExistsAsync
  fullName: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync
  isExternal: true
  name: ReadFileCompleteAsync
  nameWithType: ITempFileProvider.ReadFileCompleteAsync
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: '!:System.Threading.Tasks.Task{System.IO.Stream}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync
  isExternal: true
  name: ReadFileChunkAsync
  nameWithType: ITempFileProvider.ReadFileChunkAsync
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync
  isExternal: true
  name: WriteFileCompleteAsync
  nameWithType: ITempFileProvider.WriteFileCompleteAsync
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync
  isExternal: true
  name: WriteFileChunkAsync
  nameWithType: ITempFileProvider.WriteFileChunkAsync
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync
- uid: SuperOffice.IO.ITempFileProvider.DeleteFileAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.DeleteFileAsync
  isExternal: true
  name: DeleteFileAsync
  nameWithType: ITempFileProvider.DeleteFileAsync
  fullName: SuperOffice.IO.ITempFileProvider.DeleteFileAsync
