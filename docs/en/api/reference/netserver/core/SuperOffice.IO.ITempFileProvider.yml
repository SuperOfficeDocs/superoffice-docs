### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.ITempFileProvider
  commentId: T:SuperOffice.IO.ITempFileProvider
  id: ITempFileProvider
  parent: SuperOffice.IO
  children:
  - SuperOffice.IO.ITempFileProvider.CheckIfFileExists(System.String)
  - SuperOffice.IO.ITempFileProvider.CreateFile(System.String)
  - SuperOffice.IO.ITempFileProvider.DeleteFile(System.String)
  - SuperOffice.IO.ITempFileProvider.ReadFileChunk(System.String,System.Int64,System.Byte[])
  - SuperOffice.IO.ITempFileProvider.ReadFileComplete(System.String)
  - SuperOffice.IO.ITempFileProvider.WriteFileChunk(System.String,System.Int64,System.Byte[])
  - SuperOffice.IO.ITempFileProvider.WriteFileComplete(System.String,System.IO.Stream)
  langs:
  - csharp
  - vb
  name: ITempFileProvider
  nameWithType: ITempFileProvider
  fullName: SuperOffice.IO.ITempFileProvider
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nInterface defining a provider that offers services for reading and writing temporary files.\n"
  remarks: "\nTemporary files are used in several contexts - when transferring documents in chunks into and out of\nNetServer; when uploading a document to be saved through the Document dialog, and when handling mails\nand attachments.\n<p></p>\nThe implementation supplied with NetServer provides these services using temporary files,\ncontrolled by the Documents section in the config file with respect to path and impersonation. \n<p></p>\n"
  syntax:
    content: public interface ITempFileProvider
    content.vb: Public Interface ITempFileProvider
  extensionMethods:
  - SuperOffice.IO.ITempFileProvider.EnumUtil.MapEnums``2
  - SuperOffice.IO.ITempFileProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.IO.ITempFileProvider.CreateFile(System.String)
  commentId: M:SuperOffice.IO.ITempFileProvider.CreateFile(System.String)
  id: CreateFile(System.String)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CreateFile(String)
  nameWithType: ITempFileProvider.CreateFile(String)
  fullName: SuperOffice.IO.ITempFileProvider.CreateFile(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nCreate a temporary &apos;file&apos;\n"
  syntax:
    content: string CreateFile(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name to be used for later access. The actual key used by the implementation should also take

        into account the associate ID, since multiple concurrent users may use the same name, and that does <strong>not</strong> mean

        file sharing between users.
    return:
      type: System.String
    content.vb: Function CreateFile(name As String) As String
  overload: SuperOffice.IO.ITempFileProvider.CreateFile*
- uid: SuperOffice.IO.ITempFileProvider.CheckIfFileExists(System.String)
  commentId: M:SuperOffice.IO.ITempFileProvider.CheckIfFileExists(System.String)
  id: CheckIfFileExists(System.String)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CheckIfFileExists(String)
  nameWithType: ITempFileProvider.CheckIfFileExists(String)
  fullName: SuperOffice.IO.ITempFileProvider.CheckIfFileExists(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nCheck if a named temporary file/storage area exists\n"
  syntax:
    content: bool CheckIfFileExists(string name)
    parameters:
    - id: name
      type: System.String
      description: File name to check
    return:
      type: System.Boolean
      description: True if such a file exists
    content.vb: Function CheckIfFileExists(name As String) As Boolean
  overload: SuperOffice.IO.ITempFileProvider.CheckIfFileExists*
- uid: SuperOffice.IO.ITempFileProvider.ReadFileComplete(System.String)
  commentId: M:SuperOffice.IO.ITempFileProvider.ReadFileComplete(System.String)
  id: ReadFileComplete(System.String)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: ReadFileComplete(String)
  nameWithType: ITempFileProvider.ReadFileComplete(String)
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileComplete(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nMake the complete content of the file available as a stream (sequential read)\n"
  syntax:
    content: Stream ReadFileComplete(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <xref href="SuperOffice.IO.ITempFileProvider.CreateFile(System.String)" data-throw-if-not-resolved="false"></xref>

        method for more information on how file names are handled.
    return:
      type: System.IO.Stream
      description: Stream representing the entire current contents of the file
    content.vb: Function ReadFileComplete(name As String) As Stream
  overload: SuperOffice.IO.ITempFileProvider.ReadFileComplete*
- uid: SuperOffice.IO.ITempFileProvider.ReadFileChunk(System.String,System.Int64,System.Byte[])
  commentId: M:SuperOffice.IO.ITempFileProvider.ReadFileChunk(System.String,System.Int64,System.Byte[])
  id: ReadFileChunk(System.String,System.Int64,System.Byte[])
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: ReadFileChunk(String, Int64, Byte[])
  nameWithType: ITempFileProvider.ReadFileChunk(String, Int64, Byte[])
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileChunk(System.String, System.Int64, System.Byte[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nRead a chunk of data from the file (random access read)\n"
  syntax:
    content: int ReadFileChunk(string name, long filePosition, byte[] bufferToUpdate)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <xref href="SuperOffice.IO.ITempFileProvider.CreateFile(System.String)" data-throw-if-not-resolved="false"></xref>

        method for more information on how file names are handled.
    - id: filePosition
      type: System.Int64
      description: Position in bytes, starting at 0, to start reading from
    - id: bufferToUpdate
      type: System.Byte[]
      description: >-
        Data buffer to update. The length of this buffer is the maximum

        number of bytes that will be read
    return:
      type: System.Int32
      description: Actual number of bytes read. If less than the length of the buffer, end-of-file is indicated
    content.vb: Function ReadFileChunk(name As String, filePosition As Long, bufferToUpdate As Byte()) As Integer
  overload: SuperOffice.IO.ITempFileProvider.ReadFileChunk*
  nameWithType.vb: ITempFileProvider.ReadFileChunk(String, Int64, Byte())
  fullName.vb: SuperOffice.IO.ITempFileProvider.ReadFileChunk(System.String, System.Int64, System.Byte())
  name.vb: ReadFileChunk(String, Int64, Byte())
- uid: SuperOffice.IO.ITempFileProvider.WriteFileComplete(System.String,System.IO.Stream)
  commentId: M:SuperOffice.IO.ITempFileProvider.WriteFileComplete(System.String,System.IO.Stream)
  id: WriteFileComplete(System.String,System.IO.Stream)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: WriteFileComplete(String, Stream)
  nameWithType: ITempFileProvider.WriteFileComplete(String, Stream)
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileComplete(System.String, System.IO.Stream)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n(Over)write - not append - the complete content of the file (sequential write). Any previous content is lost\n"
  syntax:
    content: void WriteFileComplete(string name, Stream data)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <xref href="SuperOffice.IO.ITempFileProvider.CreateFile(System.String)" data-throw-if-not-resolved="false"></xref>

        method for more information on how file names are handled.
    - id: data
      type: System.IO.Stream
      description: Stream to read data from
    content.vb: Sub WriteFileComplete(name As String, data As Stream)
  overload: SuperOffice.IO.ITempFileProvider.WriteFileComplete*
- uid: SuperOffice.IO.ITempFileProvider.WriteFileChunk(System.String,System.Int64,System.Byte[])
  commentId: M:SuperOffice.IO.ITempFileProvider.WriteFileChunk(System.String,System.Int64,System.Byte[])
  id: WriteFileChunk(System.String,System.Int64,System.Byte[])
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: WriteFileChunk(String, Int64, Byte[])
  nameWithType: ITempFileProvider.WriteFileChunk(String, Int64, Byte[])
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileChunk(System.String, System.Int64, System.Byte[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nWrite a chunk of data to the file (random access write)\n"
  syntax:
    content: void WriteFileChunk(string name, long filePosition, byte[] bufferToWriteFrom)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <xref href="SuperOffice.IO.ITempFileProvider.CreateFile(System.String)" data-throw-if-not-resolved="false"></xref>

        method for more information on how file names are handled.
    - id: filePosition
      type: System.Int64
      description: Position in bytes, starting at 0, that will be written to
    - id: bufferToWriteFrom
      type: System.Byte[]
      description: Buffer to write; buffer length determines the size of the write operation
    content.vb: Sub WriteFileChunk(name As String, filePosition As Long, bufferToWriteFrom As Byte())
  overload: SuperOffice.IO.ITempFileProvider.WriteFileChunk*
  nameWithType.vb: ITempFileProvider.WriteFileChunk(String, Int64, Byte())
  fullName.vb: SuperOffice.IO.ITempFileProvider.WriteFileChunk(System.String, System.Int64, System.Byte())
  name.vb: WriteFileChunk(String, Int64, Byte())
- uid: SuperOffice.IO.ITempFileProvider.DeleteFile(System.String)
  commentId: M:SuperOffice.IO.ITempFileProvider.DeleteFile(System.String)
  id: DeleteFile(System.String)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: DeleteFile(String)
  nameWithType: ITempFileProvider.DeleteFile(String)
  fullName: SuperOffice.IO.ITempFileProvider.DeleteFile(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nDelete a temporary file\n"
  syntax:
    content: void DeleteFile(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the <xref href="SuperOffice.IO.ITempFileProvider.CreateFile(System.String)" data-throw-if-not-resolved="false"></xref>

        method for more information on how file names are handled.
    content.vb: Sub DeleteFile(name As String)
  overload: SuperOffice.IO.ITempFileProvider.DeleteFile*
references:
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
- uid: SuperOffice.IO.ITempFileProvider.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ITempFileProvider, To>()
  nameWithType: EnumUtil.MapEnums<ITempFileProvider, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.IO.ITempFileProvider, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ITempFileProvider, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)()
  name.vb: MapEnums(Of ITempFileProvider, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ITempFileProvider, To>
    nameWithType: EnumUtil.MapEnums<ITempFileProvider, To>
    fullName: EnumUtil.MapEnums<SuperOffice.IO.ITempFileProvider, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ITempFileProvider, To)
    nameWithType: EnumUtil.MapEnums(Of ITempFileProvider, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ITempFileProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ITempFileProvider, To>()
  nameWithType: Converters.MapEnums<ITempFileProvider, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ITempFileProvider, To>()
  nameWithType.vb: Converters.MapEnums(Of ITempFileProvider, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)()
  name.vb: MapEnums(Of ITempFileProvider, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ITempFileProvider, To>
    nameWithType: Converters.MapEnums<ITempFileProvider, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ITempFileProvider, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ITempFileProvider, To)
    nameWithType: Converters.MapEnums(Of ITempFileProvider, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.IO.ITempFileProvider.CreateFile*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CreateFile
  isExternal: true
  name: CreateFile
  nameWithType: ITempFileProvider.CreateFile
  fullName: SuperOffice.IO.ITempFileProvider.CreateFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.IO.ITempFileProvider.CheckIfFileExists*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CheckIfFileExists
  isExternal: true
  name: CheckIfFileExists
  nameWithType: ITempFileProvider.CheckIfFileExists
  fullName: SuperOffice.IO.ITempFileProvider.CheckIfFileExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.IO.ITempFileProvider.ReadFileComplete*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.ReadFileComplete
  isExternal: true
  name: ReadFileComplete
  nameWithType: ITempFileProvider.ReadFileComplete
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileComplete
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: SuperOffice.IO.ITempFileProvider.ReadFileChunk*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.ReadFileChunk
  isExternal: true
  name: ReadFileChunk
  nameWithType: ITempFileProvider.ReadFileChunk
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileChunk
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.IO.ITempFileProvider.WriteFileComplete*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.WriteFileComplete
  isExternal: true
  name: WriteFileComplete
  nameWithType: ITempFileProvider.WriteFileComplete
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileComplete
- uid: SuperOffice.IO.ITempFileProvider.WriteFileChunk*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.WriteFileChunk
  isExternal: true
  name: WriteFileChunk
  nameWithType: ITempFileProvider.WriteFileChunk
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileChunk
- uid: SuperOffice.IO.ITempFileProvider.DeleteFile*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.DeleteFile
  isExternal: true
  name: DeleteFile
  nameWithType: ITempFileProvider.DeleteFile
  fullName: SuperOffice.IO.ITempFileProvider.DeleteFile
