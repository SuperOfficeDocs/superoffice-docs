### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.ITempFileProvider
  commentId: T:SuperOffice.IO.ITempFileProvider
  id: ITempFileProvider
  parent: SuperOffice.IO
  children:
  - SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  - SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ITempFileProvider
  nameWithType: ITempFileProvider
  fullName: SuperOffice.IO.ITempFileProvider
  type: Interface
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Interface defining a provider that offers services for reading and writing temporary files.
  remarks: >-
    Temporary files are used in several contexts - when transferring documents in chunks into and out of

    NetServer; when uploading a document to be saved through the Document dialog, and when handling mails

    and attachments.

    <p></p>

    The implementation supplied with NetServer provides these services using temporary files,

    controlled by the Documents section in the config file with respect to path and impersonation. 

    <p></p>
  example: []
  syntax:
    content: public interface ITempFileProvider
    content.vb: Public Interface ITempFileProvider
  extensionMethods:
  - SuperOffice.IO.ITempFileProvider.EnumUtil.MapEnums``2
  - SuperOffice.IO.ITempFileProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
- uid: SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.CreateFileAsync(System.String,System.Threading.CancellationToken)
  id: CreateFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CreateFileAsync(string, CancellationToken)
  nameWithType: ITempFileProvider.CreateFileAsync(string, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Create a temporary 'file'
  example: []
  syntax:
    content: Task<string> CreateFileAsync(string name, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name to be used for later access. The actual key used by the implementation should also take
                    into account the associate ID, since multiple concurrent users may use the same name, and that does <b>not</b> mean
                    file sharing between users.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function CreateFileAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.IO.ITempFileProvider.CreateFileAsync*
  nameWithType.vb: ITempFileProvider.CreateFileAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.CreateFileAsync(String, System.Threading.CancellationToken)
  name.vb: CreateFileAsync(String, CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  id: CreateFileForAppendingAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CreateFileForAppendingAsync(string, CancellationToken)
  nameWithType: ITempFileProvider.CreateFileForAppendingAsync(string, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Create a temporary 'file' for appending
  example: []
  syntax:
    content: Task<string> CreateFileForAppendingAsync(string name, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name to be used for later access. The actual key used by the implementation should also take
                    into account the associate ID, since multiple concurrent users may use the same name, and that does <b>not</b> mean
                    file sharing between users.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function CreateFileForAppendingAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync*
  nameWithType.vb: ITempFileProvider.CreateFileForAppendingAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync(String, System.Threading.CancellationToken)
  name.vb: CreateFileForAppendingAsync(String, CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  id: CheckIfFileExistsAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: CheckIfFileExistsAsync(string, CancellationToken)
  nameWithType: ITempFileProvider.CheckIfFileExistsAsync(string, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Check if a named temporary file/storage area exists
  example: []
  syntax:
    content: Task<bool> CheckIfFileExistsAsync(string name, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: File name to check
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if such a file exists
    content.vb: Function CheckIfFileExistsAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync*
  nameWithType.vb: ITempFileProvider.CheckIfFileExistsAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync(String, System.Threading.CancellationToken)
  name.vb: CheckIfFileExistsAsync(String, CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  id: ReadFileCompleteAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: ReadFileCompleteAsync(string, CancellationToken)
  nameWithType: ITempFileProvider.ReadFileCompleteAsync(string, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Make the complete content of the file available as a stream (sequential read)
  example: []
  syntax:
    content: Task<Stream> ReadFileCompleteAsync(string name, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the CreateFile
                    method for more information on how file names are handled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Stream representing the entire current contents of the file
    content.vb: Function ReadFileCompleteAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync*
  nameWithType.vb: ITempFileProvider.ReadFileCompleteAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync(String, System.Threading.CancellationToken)
  name.vb: ReadFileCompleteAsync(String, CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  id: ReadFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: ReadFileChunkAsync(string, long, byte[], CancellationToken)
  nameWithType: ITempFileProvider.ReadFileChunkAsync(string, long, byte[], CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(string, long, byte[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Read a chunk of data from the file (random access read)
  example: []
  syntax:
    content: Task<int> ReadFileChunkAsync(string name, long filePosition, byte[] bufferToUpdate, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the CreateFile
                    method for more information on how file names are handled.
    - id: filePosition
      type: System.Int64
      description: Position in bytes, starting at 0, to start reading from
    - id: bufferToUpdate
      type: System.Byte[]
      description: >-
        Data buffer to update. The length of this buffer is the maximum
                    number of bytes that will be read
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Actual number of bytes read. If less than the length of the buffer, end-of-file is indicated
    content.vb: Function ReadFileChunkAsync(name As String, filePosition As Long, bufferToUpdate As Byte(), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync*
  nameWithType.vb: ITempFileProvider.ReadFileChunkAsync(String, Long, Byte(), CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync(String, Long, Byte(), System.Threading.CancellationToken)
  name.vb: ReadFileChunkAsync(String, Long, Byte(), CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  id: WriteFileCompleteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: WriteFileCompleteAsync(string, Stream, CancellationToken)
  nameWithType: ITempFileProvider.WriteFileCompleteAsync(string, Stream, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(string, System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: (Over)write - not append - the complete content of the file (sequential write). Any previous content is lost
  example: []
  syntax:
    content: Task WriteFileCompleteAsync(string name, Stream data, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the CreateFile
                    method for more information on how file names are handled.
    - id: data
      type: System.IO.Stream
      description: Stream to read data from
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function WriteFileCompleteAsync(name As String, data As Stream, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync*
  nameWithType.vb: ITempFileProvider.WriteFileCompleteAsync(String, Stream, CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync(String, System.IO.Stream, System.Threading.CancellationToken)
  name.vb: WriteFileCompleteAsync(String, Stream, CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  id: WriteFileChunkAsync(System.String,System.Int64,System.Byte[],System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: WriteFileChunkAsync(string, long, byte[], CancellationToken)
  nameWithType: ITempFileProvider.WriteFileChunkAsync(string, long, byte[], CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(string, long, byte[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Write a chunk of data to the file (random access write)
  example: []
  syntax:
    content: Task WriteFileChunkAsync(string name, long filePosition, byte[] bufferToWriteFrom, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the CreateFile
                    method for more information on how file names are handled.
    - id: filePosition
      type: System.Int64
      description: Position in bytes, starting at 0, that will be written to
    - id: bufferToWriteFrom
      type: System.Byte[]
      description: Buffer to write; buffer length determines the size of the write operation
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function WriteFileChunkAsync(name As String, filePosition As Long, bufferToWriteFrom As Byte(), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync*
  nameWithType.vb: ITempFileProvider.WriteFileChunkAsync(String, Long, Byte(), CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync(String, Long, Byte(), System.Threading.CancellationToken)
  name.vb: WriteFileChunkAsync(String, Long, Byte(), CancellationToken)
- uid: SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ITempFileProvider.DeleteFileAsync(System.String,System.Threading.CancellationToken)
  id: DeleteFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ITempFileProvider
  langs:
  - csharp
  - vb
  name: DeleteFileAsync(string, CancellationToken)
  nameWithType: ITempFileProvider.DeleteFileAsync(string, CancellationToken)
  fullName: SuperOffice.IO.ITempFileProvider.DeleteFileAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: Delete a temporary file
  example: []
  syntax:
    content: Task DeleteFileAsync(string name, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
      description: >-
        Name identifying the file. See comments in the CreateFile
                    method for more information on how file names are handled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteFileAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.ITempFileProvider.DeleteFileAsync*
  nameWithType.vb: ITempFileProvider.DeleteFileAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.ITempFileProvider.DeleteFileAsync(String, System.Threading.CancellationToken)
  name.vb: DeleteFileAsync(String, CancellationToken)
references:
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.IO
    name: IO
    isExternal: true
    href: SuperOffice.IO.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.IO
    name: IO
    isExternal: true
    href: SuperOffice.IO.html
- uid: SuperOffice.IO.ITempFileProvider.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<ITempFileProvider, To>(ITempFileProvider)
  nameWithType: EnumUtil.MapEnums<ITempFileProvider, To>(ITempFileProvider)
  fullName: EnumUtil.MapEnums<SuperOffice.IO.ITempFileProvider, To>(SuperOffice.IO.ITempFileProvider)
  nameWithType.vb: EnumUtil.MapEnums(Of ITempFileProvider, To)(ITempFileProvider)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)(SuperOffice.IO.ITempFileProvider)
  name.vb: MapEnums(Of ITempFileProvider, To)(ITempFileProvider)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.IO.ITempFileProvider)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.IO.ITempFileProvider)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: )
- uid: SuperOffice.IO.ITempFileProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<ITempFileProvider, To>(ITempFileProvider)
  nameWithType: Converters.MapEnums<ITempFileProvider, To>(ITempFileProvider)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ITempFileProvider, To>(SuperOffice.IO.ITempFileProvider)
  nameWithType.vb: Converters.MapEnums(Of ITempFileProvider, To)(ITempFileProvider)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ITempFileProvider, To)(SuperOffice.IO.ITempFileProvider)
  name.vb: MapEnums(Of ITempFileProvider, To)(ITempFileProvider)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.IO.ITempFileProvider)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.IO.ITempFileProvider)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.IO.ITempFileProvider
    name: ITempFileProvider
    isExternal: true
    href: SuperOffice.IO.ITempFileProvider.html
  - name: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.IO.ITempFileProvider.CreateFileAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CreateFileAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_CreateFileAsync_System_String_System_Threading_CancellationToken_
  name: CreateFileAsync
  nameWithType: ITempFileProvider.CreateFileAsync
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_CreateFileForAppendingAsync_System_String_System_Threading_CancellationToken_
  name: CreateFileForAppendingAsync
  nameWithType: ITempFileProvider.CreateFileForAppendingAsync
  fullName: SuperOffice.IO.ITempFileProvider.CreateFileForAppendingAsync
- uid: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_CheckIfFileExistsAsync_System_String_System_Threading_CancellationToken_
  name: CheckIfFileExistsAsync
  nameWithType: ITempFileProvider.CheckIfFileExistsAsync
  fullName: SuperOffice.IO.ITempFileProvider.CheckIfFileExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_ReadFileCompleteAsync_System_String_System_Threading_CancellationToken_
  name: ReadFileCompleteAsync
  nameWithType: ITempFileProvider.ReadFileCompleteAsync
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileCompleteAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_ReadFileChunkAsync_System_String_System_Int64_System_Byte___System_Threading_CancellationToken_
  name: ReadFileChunkAsync
  nameWithType: ITempFileProvider.ReadFileChunkAsync
  fullName: SuperOffice.IO.ITempFileProvider.ReadFileChunkAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_WriteFileCompleteAsync_System_String_System_IO_Stream_System_Threading_CancellationToken_
  name: WriteFileCompleteAsync
  nameWithType: ITempFileProvider.WriteFileCompleteAsync
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileCompleteAsync
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_WriteFileChunkAsync_System_String_System_Int64_System_Byte___System_Threading_CancellationToken_
  name: WriteFileChunkAsync
  nameWithType: ITempFileProvider.WriteFileChunkAsync
  fullName: SuperOffice.IO.ITempFileProvider.WriteFileChunkAsync
- uid: SuperOffice.IO.ITempFileProvider.DeleteFileAsync*
  commentId: Overload:SuperOffice.IO.ITempFileProvider.DeleteFileAsync
  isExternal: true
  href: SuperOffice.IO.ITempFileProvider.html#SuperOffice_IO_ITempFileProvider_DeleteFileAsync_System_String_System_Threading_CancellationToken_
  name: DeleteFileAsync
  nameWithType: ITempFileProvider.DeleteFileAsync
  fullName: SuperOffice.IO.ITempFileProvider.DeleteFileAsync
