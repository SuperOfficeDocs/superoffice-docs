### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SoParameterCollection
  commentId: T:SuperOffice.Data.SoParameterCollection
  id: SoParameterCollection
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.SoParameterCollection.#ctor
  - SuperOffice.Data.SoParameterCollection.Add(SuperOffice.Data.SoParameter)
  - SuperOffice.Data.SoParameterCollection.Add(System.Object)
  - SuperOffice.Data.SoParameterCollection.Add(System.String,System.Data.DbType)
  - SuperOffice.Data.SoParameterCollection.Add(System.String,System.Data.DbType,System.String)
  - SuperOffice.Data.SoParameterCollection.Add(System.String,System.Object)
  - SuperOffice.Data.SoParameterCollection.Contains(System.String)
  - SuperOffice.Data.SoParameterCollection.IndexOf(System.String)
  - SuperOffice.Data.SoParameterCollection.Item(System.String)
  - SuperOffice.Data.SoParameterCollection.RemoveAt(System.String)
  langs:
  - csharp
  - vb
  name: SoParameterCollection
  nameWithType: SoParameterCollection
  fullName: SuperOffice.Data.SoParameterCollection
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: 'public class SoParameterCollection : ArrayList, IDataParameterCollection, ICollection, IEnumerable, IList'
    content.vb: >-
      Public Class SoParameterCollection
          Inherits ArrayList
          Implements IDataParameterCollection, ICollection, IEnumerable, IList
  inheritance:
  - System.Object
  implements:
  - System.Data.IDataParameterCollection
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IList
  extensionMethods:
  - SuperOffice.Data.SoParameterCollection.EnumUtil.MapEnums``2
  - SuperOffice.Data.SoParameterCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SoParameterCollection)
  - SuperOffice.Data.SoParameterCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.SoParameterCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.SoParameterCollection.Contains(System.String)
  commentId: M:SuperOffice.Data.SoParameterCollection.Contains(System.String)
  id: Contains(System.String)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: SoParameterCollection.Contains(String)
  fullName: SuperOffice.Data.SoParameterCollection.Contains(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets a value indicating whether a parameter in the collection has the specified source table name.\n"
  syntax:
    content: public bool Contains(string parameterName)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter.
    return:
      type: System.Boolean
      description: "\ntrue if the collection contains the parameter; otherwise, false.\n"
    content.vb: Public Function Contains(parameterName As String) As Boolean
  overload: SuperOffice.Data.SoParameterCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.IndexOf(System.String)
  commentId: M:SuperOffice.Data.SoParameterCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: IndexOf(String)
  nameWithType: SoParameterCollection.IndexOf(String)
  fullName: SuperOffice.Data.SoParameterCollection.IndexOf(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets the location of the <xref href=\"System.Data.IDataParameter\" data-throw-if-not-resolved=\"false\"></xref> within the collection.\n"
  syntax:
    content: public int IndexOf(string parameterName)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter.
    return:
      type: System.Int32
      description: "\nThe zero-based location of the <xref href=\"System.Data.IDataParameter\" data-throw-if-not-resolved=\"false\"></xref> within the collection.\n"
    content.vb: Public Function IndexOf(parameterName As String) As Integer
  overload: SuperOffice.Data.SoParameterCollection.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.RemoveAt(System.String)
  commentId: M:SuperOffice.Data.SoParameterCollection.RemoveAt(System.String)
  id: RemoveAt(System.String)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(String)
  nameWithType: SoParameterCollection.RemoveAt(String)
  fullName: SuperOffice.Data.SoParameterCollection.RemoveAt(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nRemoves the <xref href=\"System.Data.IDataParameter\" data-throw-if-not-resolved=\"false\"></xref> from the collection.\n"
  syntax:
    content: public void RemoveAt(string parameterName)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter.
    content.vb: Public Sub RemoveAt(parameterName As String)
  overload: SuperOffice.Data.SoParameterCollection.RemoveAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.Add(System.Object)
  commentId: M:SuperOffice.Data.SoParameterCollection.Add(System.Object)
  id: Add(System.Object)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: SoParameterCollection.Add(Object)
  fullName: SuperOffice.Data.SoParameterCollection.Add(System.Object)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAdds an object to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public override int Add(object value)
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to be added to the end of the <xref href="System.Collections.ArrayList" data-throw-if-not-resolved="false"></xref>. The value can be null.
    return:
      type: System.Int32
      description: "\nThe <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the value has been added.\n"
    content.vb: Public Overrides Function Add(value As Object) As Integer
  overload: SuperOffice.Data.SoParameterCollection.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The <xref href="System.Collections.ArrayList" data-throw-if-not-resolved="false"></xref> is read-only.-or- The <xref href="System.Collections.ArrayList" data-throw-if-not-resolved="false"></xref> has a fixed size. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SoParameterCollection.Add(SuperOffice.Data.SoParameter)
  commentId: M:SuperOffice.Data.SoParameterCollection.Add(SuperOffice.Data.SoParameter)
  id: Add(SuperOffice.Data.SoParameter)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Add(SoParameter)
  nameWithType: SoParameterCollection.Add(SoParameter)
  fullName: SuperOffice.Data.SoParameterCollection.Add(SuperOffice.Data.SoParameter)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAdds the specified value.\n"
  syntax:
    content: public int Add(SoParameter value)
    parameters:
    - id: value
      type: SuperOffice.Data.SoParameter
      description: The value.
    return:
      type: System.Int32
      description: "\nThe <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the value has been added.\n"
    content.vb: Public Function Add(value As SoParameter) As Integer
  overload: SuperOffice.Data.SoParameterCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.Add(System.String,System.Data.DbType)
  commentId: M:SuperOffice.Data.SoParameterCollection.Add(System.String,System.Data.DbType)
  id: Add(System.String,System.Data.DbType)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Add(String, DbType)
  nameWithType: SoParameterCollection.Add(String, DbType)
  fullName: SuperOffice.Data.SoParameterCollection.Add(System.String, System.Data.DbType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAdds the specified parameter name.\n"
  syntax:
    content: public int Add(string parameterName, DbType type)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter to map.
    - id: type
      type: System.Data.DbType
    return:
      type: System.Int32
      description: "\nThe <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the value has been added.\n"
    content.vb: Public Function Add(parameterName As String, type As DbType) As Integer
  overload: SuperOffice.Data.SoParameterCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.Add(System.String,System.Object)
  commentId: M:SuperOffice.Data.SoParameterCollection.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Add(String, Object)
  nameWithType: SoParameterCollection.Add(String, Object)
  fullName: SuperOffice.Data.SoParameterCollection.Add(System.String, System.Object)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAdds the specified parameter name.\n"
  syntax:
    content: public int Add(string parameterName, object value)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter to map.
    - id: value
      type: System.Object
      description: The value.
    return:
      type: System.Int32
      description: "\nThe <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the value has been added.\n"
    content.vb: Public Function Add(parameterName As String, value As Object) As Integer
  overload: SuperOffice.Data.SoParameterCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.Add(System.String,System.Data.DbType,System.String)
  commentId: M:SuperOffice.Data.SoParameterCollection.Add(System.String,System.Data.DbType,System.String)
  id: Add(System.String,System.Data.DbType,System.String)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Add(String, DbType, String)
  nameWithType: SoParameterCollection.Add(String, DbType, String)
  fullName: SuperOffice.Data.SoParameterCollection.Add(System.String, System.Data.DbType, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nAdds the specified parameter name.\n"
  syntax:
    content: public int Add(string parameterName, DbType dbType, string sourceColumn)
    parameters:
    - id: parameterName
      type: System.String
      description: The name of the parameter to map.
    - id: dbType
      type: System.Data.DbType
      description: Type of the db.
    - id: sourceColumn
      type: System.String
      description: The name of the source column
    return:
      type: System.Int32
      description: "\nThe <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the value has been added.\n"
    content.vb: Public Function Add(parameterName As String, dbType As DbType, sourceColumn As String) As Integer
  overload: SuperOffice.Data.SoParameterCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.#ctor
  commentId: M:SuperOffice.Data.SoParameterCollection.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: SoParameterCollection()
  nameWithType: SoParameterCollection.SoParameterCollection()
  fullName: SuperOffice.Data.SoParameterCollection.SoParameterCollection()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public SoParameterCollection()
    content.vb: Public Sub New
  overload: SuperOffice.Data.SoParameterCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SoParameterCollection.Item(System.String)
  commentId: P:SuperOffice.Data.SoParameterCollection.Item(System.String)
  id: Item(System.String)
  parent: SuperOffice.Data.SoParameterCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SoParameterCollection.Item[String]
  fullName: SuperOffice.Data.SoParameterCollection.Item[System.String]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGets or sets the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.\n"
  syntax:
    content: public object this[string index] { get; set; }
    parameters:
    - id: index
      type: System.String
    return:
      type: System.Object
    content.vb: Public Property Item(index As String) As Object
  overload: SuperOffice.Data.SoParameterCollection.Item*
  nameWithType.vb: SoParameterCollection.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SoParameterCollection.Item(System.String)
  name.vb: Item(String)
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.IDataParameterCollection
  commentId: '!:System.Data.IDataParameterCollection'
  isExternal: true
  name: IDataParameterCollection
  nameWithType: IDataParameterCollection
  fullName: System.Data.IDataParameterCollection
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: SuperOffice.Data.SoParameterCollection.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoParameterCollection, To>()
  nameWithType: EnumUtil.MapEnums<SoParameterCollection, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SoParameterCollection, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoParameterCollection, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SoParameterCollection, To)()
  name.vb: MapEnums(Of SoParameterCollection, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoParameterCollection, To>
    nameWithType: EnumUtil.MapEnums<SoParameterCollection, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SoParameterCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoParameterCollection, To)
    nameWithType: EnumUtil.MapEnums(Of SoParameterCollection, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SoParameterCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoParameterCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SoParameterCollection)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<SoParameterCollection>(SoParameterCollection)
  nameWithType: ObjectExtensions.AssignByReflection<SoParameterCollection>(SoParameterCollection)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SoParameterCollection>(SuperOffice.Data.SoParameterCollection)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of SoParameterCollection)(SoParameterCollection)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SoParameterCollection)(SuperOffice.Data.SoParameterCollection)
  name.vb: AssignByReflection(Of SoParameterCollection)(SoParameterCollection)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<SoParameterCollection>
    nameWithType: ObjectExtensions.AssignByReflection<SoParameterCollection>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SoParameterCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SoParameterCollection
    name: SoParameterCollection
    nameWithType: SoParameterCollection
    fullName: SuperOffice.Data.SoParameterCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of SoParameterCollection)
    nameWithType: ObjectExtensions.AssignByReflection(Of SoParameterCollection)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SoParameterCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SoParameterCollection
    name: SoParameterCollection
    nameWithType: SoParameterCollection
    fullName: SuperOffice.Data.SoParameterCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoParameterCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<SoParameterCollection>()
  nameWithType: ObjectExtensions.GraphCopy<SoParameterCollection>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SoParameterCollection>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of SoParameterCollection)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SoParameterCollection)()
  name.vb: GraphCopy(Of SoParameterCollection)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<SoParameterCollection>
    nameWithType: ObjectExtensions.GraphCopy<SoParameterCollection>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SoParameterCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of SoParameterCollection)
    nameWithType: ObjectExtensions.GraphCopy(Of SoParameterCollection)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SoParameterCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoParameterCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoParameterCollection, To>()
  nameWithType: Converters.MapEnums<SoParameterCollection, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SoParameterCollection, To>()
  nameWithType.vb: Converters.MapEnums(Of SoParameterCollection, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SoParameterCollection, To)()
  name.vb: MapEnums(Of SoParameterCollection, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoParameterCollection, To>
    nameWithType: Converters.MapEnums<SoParameterCollection, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SoParameterCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoParameterCollection, To)
    nameWithType: Converters.MapEnums(Of SoParameterCollection, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SoParameterCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SoParameterCollection.Contains*
  commentId: Overload:SuperOffice.Data.SoParameterCollection.Contains
  isExternal: true
  name: Contains
  nameWithType: SoParameterCollection.Contains
  fullName: SuperOffice.Data.SoParameterCollection.Contains
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SoParameterCollection.IndexOf*
  commentId: Overload:SuperOffice.Data.SoParameterCollection.IndexOf
  isExternal: true
  name: IndexOf
  nameWithType: SoParameterCollection.IndexOf
  fullName: SuperOffice.Data.SoParameterCollection.IndexOf
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SoParameterCollection.RemoveAt*
  commentId: Overload:SuperOffice.Data.SoParameterCollection.RemoveAt
  isExternal: true
  name: RemoveAt
  nameWithType: SoParameterCollection.RemoveAt
  fullName: SuperOffice.Data.SoParameterCollection.RemoveAt
- uid: SuperOffice.Data.SoParameterCollection.Add*
  commentId: Overload:SuperOffice.Data.SoParameterCollection.Add
  isExternal: true
  name: Add
  nameWithType: SoParameterCollection.Add
  fullName: SuperOffice.Data.SoParameterCollection.Add
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: SuperOffice.Data.SoParameter
  commentId: T:SuperOffice.Data.SoParameter
  parent: SuperOffice.Data
  isExternal: true
  name: SoParameter
  nameWithType: SoParameter
  fullName: SuperOffice.Data.SoParameter
- uid: System.Data.DbType
  isExternal: true
  name: DbType
  nameWithType: DbType
  fullName: System.Data.DbType
- uid: SuperOffice.Data.SoParameterCollection.#ctor*
  commentId: Overload:SuperOffice.Data.SoParameterCollection.#ctor
  isExternal: true
  name: SoParameterCollection
  nameWithType: SoParameterCollection.SoParameterCollection
  fullName: SuperOffice.Data.SoParameterCollection.SoParameterCollection
- uid: SuperOffice.Data.SoParameterCollection.Item*
  commentId: Overload:SuperOffice.Data.SoParameterCollection.Item
  isExternal: true
  name: Item
  nameWithType: SoParameterCollection.Item
  fullName: SuperOffice.Data.SoParameterCollection.Item
