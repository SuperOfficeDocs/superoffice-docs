### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Cache.XCacheBase
  commentId: T:SuperOffice.Data.Cache.XCacheBase
  id: XCacheBase
  parent: SuperOffice.Data.Cache
  children:
  - SuperOffice.Data.Cache.XCacheBase.#ctor
  - SuperOffice.Data.Cache.XCacheBase.Flush
  - SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute(System.Type)
  - SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers
  - SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance``1
  - SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  - SuperOffice.Data.Cache.XCacheBase.LastTouch
  - SuperOffice.Data.Cache.XCacheBase.Timeout
  langs:
  - csharp
  - vb
  name: XCacheBase
  nameWithType: XCacheBase
  fullName: SuperOffice.Data.Cache.XCacheBase
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nBase class for all caches. Implementers must also use the <xref href=\"SuperOffice.Data.Cache.CacheAttribute\" data-throw-if-not-resolved=\"false\"></xref> to declare\ntimeout and optionally the Instance container name\n"
  syntax:
    content: 'public abstract class XCacheBase : IFlushable'
    content.vb: >-
      Public MustInherit Class XCacheBase
          Implements IFlushable
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Cache.AssociateCache
  - SuperOffice.CRM.Cache.ExtraFieldsCache
  - SuperOffice.CRM.Cache.ExtraTablesCache
  - SuperOffice.CRM.Cache.SystemEventCache
  - SuperOffice.CRM.Entities.SaintConfigurationCache
  - SuperOffice.CRM.Rows.UDefFieldCacheBase
  - SuperOffice.CRM.Security.SentryPreferenceCache
  implements:
  - SuperOffice.Data.Cache.IFlushable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.Cache.XCacheBase.EnumUtil.MapEnums``2
  - SuperOffice.Data.Cache.XCacheBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.Data.Cache.XCacheBase.#ctor
  commentId: M:SuperOffice.Data.Cache.XCacheBase.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: XCacheBase()
  nameWithType: XCacheBase.XCacheBase()
  fullName: SuperOffice.Data.Cache.XCacheBase.XCacheBase()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nConstructor - retrieve values from attribute, subscribe to soft triggers and to global flush event\n"
  syntax:
    content: protected XCacheBase()
    content.vb: Protected Sub New
  overload: SuperOffice.Data.Cache.XCacheBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute(System.Type)
  commentId: M:SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute(System.Type)
  id: GetCacheAttribute(System.Type)
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: GetCacheAttribute(Type)
  nameWithType: XCacheBase.GetCacheAttribute(Type)
  fullName: SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute(System.Type)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nGet the <xref href=\"SuperOffice.Data.Cache.CacheAttribute\" data-throw-if-not-resolved=\"false\"></xref> that the derived class is decorated with\n"
  syntax:
    content: public static CacheAttribute GetCacheAttribute(Type concreteCache)
    parameters:
    - id: concreteCache
      type: System.Type
    return:
      type: SuperOffice.Data.Cache.CacheAttribute
    content.vb: Public Shared Function GetCacheAttribute(concreteCache As Type) As CacheAttribute
  overload: SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance``1
  commentId: M:SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance``1
  id: GetCurrentInstance``1
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: GetCurrentInstance<CacheType>()
  nameWithType: XCacheBase.GetCurrentInstance<CacheType>()
  fullName: SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance<CacheType>()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nReturn the current instance of the cache\n"
  remarks: "\nWe rely on the InjectionFactory system to keep the singleton instance (using the \ncorrect kind of container). Retrieval of that instance is straight-forward - the\nfactory will either have one for us, or create one on the fly. \n<p></p>\nTo bootstrap the process, if the factory does not have any binding for the concrete\ncache then we need to inspect its attribute to determine the correct instance container\nand timeout values. We can then set up the binding.\n<p></p>\nOnce an instance has been retrieved, we need to inspect it for a possible timeout.\nIf it is out of date then we tell the factory to forget the instance, and ask it\nfor a new one.\n"
  syntax:
    content: >-
      protected static CacheType GetCurrentInstance<CacheType>()
          where CacheType : XCacheBase
    typeParameters:
    - id: CacheType
      description: The concrete cache to return
    return:
      type: '{CacheType}'
      description: Populated instance that can be used
    content.vb: Protected Shared Function GetCurrentInstance(Of CacheType As XCacheBase) As CacheType
  overload: SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance*
  nameWithType.vb: XCacheBase.GetCurrentInstance(Of CacheType)()
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance(Of CacheType)()
  name.vb: GetCurrentInstance(Of CacheType)()
- uid: SuperOffice.Data.Cache.XCacheBase.Flush
  commentId: M:SuperOffice.Data.Cache.XCacheBase.Flush
  id: Flush
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: XCacheBase.Flush()
  fullName: SuperOffice.Data.Cache.XCacheBase.Flush()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nFlush the cache: the next call to GetCurrent will retrieve a newly-created and initialized instance,\ninstead of an existing cached one\n"
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  overload: SuperOffice.Data.Cache.XCacheBase.Flush*
  implements:
  - SuperOffice.Data.Cache.IFlushable.Flush
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers
  commentId: M:SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers
  id: GetCachedTableNumbers
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: GetCachedTableNumbers()
  nameWithType: XCacheBase.GetCachedTableNumbers()
  fullName: SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nImplement in derived classes to declare what tables the cache is covering. Return an empty array\nif no automatic flushing is wanted (why not??)\n"
  syntax:
    content: public abstract int[] GetCachedTableNumbers()
    return:
      type: System.Int32[]
      description: List of tables covered by the cache.
    content.vb: Public MustOverride Function GetCachedTableNumbers As Integer()
  overload: SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  commentId: M:SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  id: IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: IsCacheInvalidated(Int32, SqlType, Int32)
  nameWithType: XCacheBase.IsCacheInvalidated(Int32, SqlType, Int32)
  fullName: SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated(System.Int32, SuperOffice.Data.SQL.SqlType, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nDetermine if the change made the cache invalid. \n"
  remarks: "\nBy default, any change to a cached table will\ncause invalidation, but a cache may have a more discerning opinion; if so then implement\nthis method.\n"
  syntax:
    content: protected virtual bool IsCacheInvalidated(int tableNumber, SqlType sqlType, int primaryKey)
    parameters:
    - id: tableNumber
      type: System.Int32
      description: Number of Table that is modified.
    - id: sqlType
      type: SuperOffice.Data.SQL.SqlType
      description: Type of change (i.e. Insert, Update or Delete)
    - id: primaryKey
      type: System.Int32
      description: Primary key of the record being changed.
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function IsCacheInvalidated(tableNumber As Integer, sqlType As SqlType, primaryKey As Integer) As Boolean
  overload: SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Cache.XCacheBase.Timeout
  commentId: P:SuperOffice.Data.Cache.XCacheBase.Timeout
  id: Timeout
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: Timeout
  nameWithType: XCacheBase.Timeout
  fullName: SuperOffice.Data.Cache.XCacheBase.Timeout
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nCache timeout in seconds; caches are recreated if they have been unused for more than this time\n"
  syntax:
    content: public int Timeout { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Timeout As Integer
  overload: SuperOffice.Data.Cache.XCacheBase.Timeout*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Cache.XCacheBase.LastTouch
  commentId: P:SuperOffice.Data.Cache.XCacheBase.LastTouch
  id: LastTouch
  parent: SuperOffice.Data.Cache.XCacheBase
  langs:
  - csharp
  - vb
  name: LastTouch
  nameWithType: XCacheBase.LastTouch
  fullName: SuperOffice.Data.Cache.XCacheBase.LastTouch
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Cache
  summary: "\nWhen was this cache last touched (used, not created)\n"
  syntax:
    content: public DateTime LastTouch { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public ReadOnly Property LastTouch As Date
  overload: SuperOffice.Data.Cache.XCacheBase.LastTouch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Data.Cache
  commentId: N:SuperOffice.Data.Cache
  isExternal: true
  name: SuperOffice.Data.Cache
  nameWithType: SuperOffice.Data.Cache
  fullName: SuperOffice.Data.Cache
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Cache.IFlushable
  commentId: T:SuperOffice.Data.Cache.IFlushable
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: IFlushable
  nameWithType: IFlushable
  fullName: SuperOffice.Data.Cache.IFlushable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.XCacheBase.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<XCacheBase, To>()
  nameWithType: EnumUtil.MapEnums<XCacheBase, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Cache.XCacheBase, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of XCacheBase, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Cache.XCacheBase, To)()
  name.vb: MapEnums(Of XCacheBase, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<XCacheBase, To>
    nameWithType: EnumUtil.MapEnums<XCacheBase, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Cache.XCacheBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of XCacheBase, To)
    nameWithType: EnumUtil.MapEnums(Of XCacheBase, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Cache.XCacheBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.XCacheBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<XCacheBase, To>()
  nameWithType: Converters.MapEnums<XCacheBase, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Cache.XCacheBase, To>()
  nameWithType.vb: Converters.MapEnums(Of XCacheBase, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Cache.XCacheBase, To)()
  name.vb: MapEnums(Of XCacheBase, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<XCacheBase, To>
    nameWithType: Converters.MapEnums<XCacheBase, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Cache.XCacheBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of XCacheBase, To)
    nameWithType: Converters.MapEnums(Of XCacheBase, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Cache.XCacheBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Cache.XCacheBase.#ctor*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.#ctor
  isExternal: true
  name: XCacheBase
  nameWithType: XCacheBase.XCacheBase
  fullName: SuperOffice.Data.Cache.XCacheBase.XCacheBase
- uid: SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute
  isExternal: true
  name: GetCacheAttribute
  nameWithType: XCacheBase.GetCacheAttribute
  fullName: SuperOffice.Data.Cache.XCacheBase.GetCacheAttribute
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: SuperOffice.Data.Cache.CacheAttribute
  commentId: T:SuperOffice.Data.Cache.CacheAttribute
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: CacheAttribute
  nameWithType: CacheAttribute
  fullName: SuperOffice.Data.Cache.CacheAttribute
- uid: SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance
  isExternal: true
  name: GetCurrentInstance
  nameWithType: XCacheBase.GetCurrentInstance
  fullName: SuperOffice.Data.Cache.XCacheBase.GetCurrentInstance
- uid: '{CacheType}'
  commentId: '!:CacheType'
  definition: CacheType
  name: CacheType
  nameWithType: CacheType
  fullName: CacheType
- uid: CacheType
  commentId: '!:CacheType'
  name: CacheType
  nameWithType: CacheType
  fullName: CacheType
- uid: SuperOffice.Data.Cache.XCacheBase.Flush*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.Flush
  isExternal: true
  name: Flush
  nameWithType: XCacheBase.Flush
  fullName: SuperOffice.Data.Cache.XCacheBase.Flush
- uid: SuperOffice.Data.Cache.IFlushable.Flush
  commentId: M:SuperOffice.Data.Cache.IFlushable.Flush
  parent: SuperOffice.Data.Cache.IFlushable
  isExternal: true
  name: Flush()
  nameWithType: IFlushable.Flush()
  fullName: SuperOffice.Data.Cache.IFlushable.Flush()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.IFlushable.Flush
    name: Flush
    nameWithType: IFlushable.Flush
    fullName: SuperOffice.Data.Cache.IFlushable.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.IFlushable.Flush
    name: Flush
    nameWithType: IFlushable.Flush
    fullName: SuperOffice.Data.Cache.IFlushable.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers
  isExternal: true
  name: GetCachedTableNumbers
  nameWithType: XCacheBase.GetCachedTableNumbers
  fullName: SuperOffice.Data.Cache.XCacheBase.GetCachedTableNumbers
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated
  isExternal: true
  name: IsCacheInvalidated
  nameWithType: XCacheBase.IsCacheInvalidated
  fullName: SuperOffice.Data.Cache.XCacheBase.IsCacheInvalidated
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.SqlType
  commentId: T:SuperOffice.Data.SQL.SqlType
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: SqlType
  nameWithType: SqlType
  fullName: SuperOffice.Data.SQL.SqlType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.Data.Cache.XCacheBase.Timeout*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.Timeout
  isExternal: true
  name: Timeout
  nameWithType: XCacheBase.Timeout
  fullName: SuperOffice.Data.Cache.XCacheBase.Timeout
- uid: SuperOffice.Data.Cache.XCacheBase.LastTouch*
  commentId: Overload:SuperOffice.Data.Cache.XCacheBase.LastTouch
  isExternal: true
  name: LastTouch
  nameWithType: XCacheBase.LastTouch
  fullName: SuperOffice.Data.Cache.XCacheBase.LastTouch
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
