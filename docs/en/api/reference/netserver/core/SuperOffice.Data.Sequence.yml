### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Sequence
  commentId: T:SuperOffice.Data.Sequence
  id: Sequence
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  - SuperOffice.Data.Sequence.GetNext(System.Int32,System.Int32)
  - SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Threading.CancellationToken)
  - SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Threading.CancellationToken)
  - SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.Sequence.GetNextBatchAsync(SuperOffice.Data.PKContainer,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: Sequence
  nameWithType: Sequence
  fullName: SuperOffice.Data.Sequence
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nUtility functions for getting primary keys. Keys are &quot;burned&quot; permanently and cannot be re-used. \nKey reservation is a potential bottleneck, so if you know in advance how many keys you will need,\nyou should reserve them in one call.\n"
  syntax:
    content: 'public static class Sequence : Object'
    content.vb: >-
      Public Module Sequence
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Threading.CancellationToken)
  id: GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Threading.CancellationToken)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextAsync(SoTable, CancellationToken)
  nameWithType: Sequence.GetNextAsync(SoTable, CancellationToken)
  fullName: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key for a table given the definition of a table\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> GetNextAsync(SoTable soTable, CancellationToken cancellationToken = null)
    parameters:
    - id: soTable
      type: SuperOffice.Data.Dictionary.SoTable
      description: Defininition of the table from the runtime dictionary
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: New (e.g. next) primary key value, given information about a table table.
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetNextAsync(soTable As SoTable, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.Sequence.GetNextAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Threading.CancellationToken)
  id: GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Threading.CancellationToken)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextAsync(TableInfo, CancellationToken)
  nameWithType: Sequence.GetNextAsync(TableInfo, CancellationToken)
  fullName: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key for a given table .\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> GetNextAsync(TableInfo tableInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: TableInfo object representing the table.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: New (e.g. next) primary key value
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetNextAsync(tableInfo As TableInfo, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.Sequence.GetNextAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Int32,System.Threading.CancellationToken)
  id: GetNextAsync(SuperOffice.Data.Dictionary.SoTable,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextAsync(SoTable, Int32, CancellationToken)
  nameWithType: Sequence.GetNextAsync(SoTable, Int32, CancellationToken)
  fullName: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.Dictionary.SoTable, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key range for a table given the definition of a table\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> GetNextAsync(SoTable soTable, int count, CancellationToken cancellationToken = null)
    parameters:
    - id: soTable
      type: SuperOffice.Data.Dictionary.SoTable
      description: Defininition of the table from the runtime dictionary
    - id: count
      type: System.Int32
      description: Number of records to reserve keys for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The first new key of the desired range
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetNextAsync(soTable As SoTable, count As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.Sequence.GetNextAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Int32,System.Threading.CancellationToken)
  id: GetNextAsync(SuperOffice.Data.SQL.TableInfo,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextAsync(TableInfo, Int32, CancellationToken)
  nameWithType: Sequence.GetNextAsync(TableInfo, Int32, CancellationToken)
  fullName: SuperOffice.Data.Sequence.GetNextAsync(SuperOffice.Data.SQL.TableInfo, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key range for a given table .\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task<int> GetNextAsync(TableInfo tableInfo, int count, CancellationToken cancellationToken = null)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: TableInfo object representing the table.
    - id: count
      type: System.Int32
      description: Number of records to reserve keys for
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The first new key of the desired range
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetNextAsync(tableInfo As TableInfo, count As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: SuperOffice.Data.Sequence.GetNextAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNextBatchAsync(SuperOffice.Data.PKContainer,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Data.Sequence.GetNextBatchAsync(SuperOffice.Data.PKContainer,System.Threading.CancellationToken)
  id: GetNextBatchAsync(SuperOffice.Data.PKContainer,System.Threading.CancellationToken)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextBatchAsync(PKContainer, CancellationToken)
  nameWithType: Sequence.GetNextBatchAsync(PKContainer, CancellationToken)
  fullName: SuperOffice.Data.Sequence.GetNextBatchAsync(SuperOffice.Data.PKContainer, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCollect several new primary keys for new row objects held by the PKContainer. \n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public static Task GetNextBatchAsync(PKContainer pkContainer, CancellationToken cancellationToken = null)
    parameters:
    - id: pkContainer
      type: SuperOffice.Data.PKContainer
      description: Object holding information about inserts in need of next sequence id&apos;s
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Shared Function GetNextBatchAsync(pkContainer As PKContainer, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Data.Sequence.GetNextBatchAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.Sequence.GetNext(System.Int32,System.Int32)
  id: GetNext(System.Int32,System.Int32)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(Int32, Int32)
  nameWithType: Sequence.GetNext(Int32, Int32)
  fullName: SuperOffice.Data.Sequence.GetNext(System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReserve a set of new id&apos;s from the sequence table, given the tables sequence number.\n"
  syntax:
    content: public static int GetNext(int sequenceID, int count)
    parameters:
    - id: sequenceID
      type: System.Int32
      description: Sequence id of the table.
    - id: count
      type: System.Int32
      description: Number of new sequence id&apos;s to reserve
    return:
      type: System.Int32
      description: First id of the range.
    content.vb: Public Shared Function GetNext(sequenceID As Integer, count As Integer) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  id: GetNext(SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(SoTable)
  nameWithType: Sequence.GetNext(SoTable)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key for a table given the definition of a table\n"
  syntax:
    content: public static int GetNext(SoTable soTable)
    parameters:
    - id: soTable
      type: SuperOffice.Data.Dictionary.SoTable
      description: Defininition of the table from the runtime dictionary
    return:
      type: System.Int32
      description: New (e.g. next) primary key value, given information about a table table.
    content.vb: Public Shared Function GetNext(soTable As SoTable) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  id: GetNext(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(TableInfo)
  nameWithType: Sequence.GetNext(TableInfo)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key for a given table .\n"
  syntax:
    content: public static int GetNext(TableInfo tableInfo)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: TableInfo object representing the table.
    return:
      type: System.Int32
      description: New (e.g. next) primary key value
    content.vb: Public Shared Function GetNext(tableInfo As TableInfo) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  id: GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(SoTable, Int32)
  nameWithType: Sequence.GetNext(SoTable, Int32)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key range for a table given the definition of a table\n"
  syntax:
    content: public static int GetNext(SoTable soTable, int count)
    parameters:
    - id: soTable
      type: SuperOffice.Data.Dictionary.SoTable
      description: Defininition of the table from the runtime dictionary
    - id: count
      type: System.Int32
      description: Number of records to reserve keys for
    return:
      type: System.Int32
      description: The first new key of the desired range
    content.vb: Public Shared Function GetNext(soTable As SoTable, count As Integer) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  id: GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(TableInfo, Int32)
  nameWithType: Sequence.GetNext(TableInfo, Int32)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key range for a given table .\n"
  syntax:
    content: public static int GetNext(TableInfo tableInfo, int count)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: TableInfo object representing the table.
    - id: count
      type: System.Int32
      description: Number of records to reserve keys for
    return:
      type: System.Int32
      description: The first new key of the desired range
    content.vb: Public Shared Function GetNext(tableInfo As TableInfo, count As Integer) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  id: GetNextBatch(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextBatch(PKContainer)
  nameWithType: Sequence.GetNextBatch(PKContainer)
  fullName: SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCollect several new primary keys for new row objects held by the PKContainer. \n"
  syntax:
    content: public static void GetNextBatch(PKContainer pkContainer)
    parameters:
    - id: pkContainer
      type: SuperOffice.Data.PKContainer
      description: Object holding information about inserts in need of next sequence id&apos;s
    content.vb: Public Shared Sub GetNextBatch(pkContainer As PKContainer)
  overload: SuperOffice.Data.Sequence.GetNextBatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.Sequence.GetNextAsync*
  commentId: Overload:SuperOffice.Data.Sequence.GetNextAsync
  isExternal: true
  name: GetNextAsync
  nameWithType: Sequence.GetNextAsync
  fullName: SuperOffice.Data.Sequence.GetNextAsync
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.Sequence.GetNextBatchAsync*
  commentId: Overload:SuperOffice.Data.Sequence.GetNextBatchAsync
  isExternal: true
  name: GetNextBatchAsync
  nameWithType: Sequence.GetNextBatchAsync
  fullName: SuperOffice.Data.Sequence.GetNextBatchAsync
- uid: SuperOffice.Data.PKContainer
  commentId: T:SuperOffice.Data.PKContainer
  parent: SuperOffice.Data
  isExternal: true
  name: PKContainer
  nameWithType: PKContainer
  fullName: SuperOffice.Data.PKContainer
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.Data.Sequence.GetNext*
  commentId: Overload:SuperOffice.Data.Sequence.GetNext
  isExternal: true
  name: GetNext
  nameWithType: Sequence.GetNext
  fullName: SuperOffice.Data.Sequence.GetNext
- uid: SuperOffice.Data.Sequence.GetNextBatch*
  commentId: Overload:SuperOffice.Data.Sequence.GetNextBatch
  isExternal: true
  name: GetNextBatch
  nameWithType: Sequence.GetNextBatch
  fullName: SuperOffice.Data.Sequence.GetNextBatch
