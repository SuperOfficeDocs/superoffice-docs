### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Sequence
  commentId: T:SuperOffice.Data.Sequence
  id: Sequence
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  - SuperOffice.Data.Sequence.GetNext(System.Int32,System.Int32)
  - SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  langs:
  - csharp
  - vb
  name: Sequence
  nameWithType: Sequence
  fullName: SuperOffice.Data.Sequence
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nUtility functions for getting primary keys. Keys are &quot;burned&quot; permanently and cannot be re-used. \nKey reservation is a potential bottleneck, so if you know in advance how many keys you will need,\nyou should reserve them in one call.\n"
  syntax:
    content: public static class Sequence
    content.vb: Public Module Sequence
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  id: GetNext(SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(SoTable)
  nameWithType: Sequence.GetNext(SoTable)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key for a table given the definition of a table\n"
  syntax:
    content: public static int GetNext(SoTable soTable)
    parameters:
    - id: soTable
      type: SuperOffice.Data.Dictionary.SoTable
      description: Defininition of the table from the runtime dictionary
    return:
      type: System.Int32
      description: New (e.g. next) primary key value, given information about a table table.
    content.vb: Public Shared Function GetNext(soTable As SoTable) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  id: GetNext(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(TableInfo)
  nameWithType: Sequence.GetNext(TableInfo)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key for a given table .\n"
  syntax:
    content: public static int GetNext(TableInfo tableInfo)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: TableInfo object representing the table.
    return:
      type: System.Int32
      description: New (e.g. next) primary key value
    content.vb: Public Shared Function GetNext(tableInfo As TableInfo) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  id: GetNext(SuperOffice.Data.Dictionary.SoTable,System.Int32)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(SoTable, Int32)
  nameWithType: Sequence.GetNext(SoTable, Int32)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.Dictionary.SoTable, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key range for a table given the definition of a table\n"
  syntax:
    content: public static int GetNext(SoTable soTable, int count)
    parameters:
    - id: soTable
      type: SuperOffice.Data.Dictionary.SoTable
      description: Defininition of the table from the runtime dictionary
    - id: count
      type: System.Int32
      description: Number of records to reserve keys for
    return:
      type: System.Int32
      description: The first new key of the desired range
    content.vb: Public Shared Function GetNext(soTable As SoTable, count As Integer) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  commentId: M:SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  id: GetNext(SuperOffice.Data.SQL.TableInfo,System.Int32)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(TableInfo, Int32)
  nameWithType: Sequence.GetNext(TableInfo, Int32)
  fullName: SuperOffice.Data.Sequence.GetNext(SuperOffice.Data.SQL.TableInfo, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nGet the next primary key range for a given table .\n"
  syntax:
    content: public static int GetNext(TableInfo tableInfo, int count)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: TableInfo object representing the table.
    - id: count
      type: System.Int32
      description: Number of records to reserve keys for
    return:
      type: System.Int32
      description: The first new key of the desired range
    content.vb: Public Shared Function GetNext(tableInfo As TableInfo, count As Integer) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  id: GetNextBatch(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNextBatch(PKContainer)
  nameWithType: Sequence.GetNextBatch(PKContainer)
  fullName: SuperOffice.Data.Sequence.GetNextBatch(SuperOffice.Data.PKContainer)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nCollect several new primary keys for new row objects held by the PKContainer. \n"
  syntax:
    content: public static void GetNextBatch(PKContainer pkContainer)
    parameters:
    - id: pkContainer
      type: SuperOffice.Data.PKContainer
      description: Object holding information about inserts in need of next sequence id&apos;s
    content.vb: Public Shared Sub GetNextBatch(pkContainer As PKContainer)
  overload: SuperOffice.Data.Sequence.GetNextBatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Sequence.GetNext(System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.Sequence.GetNext(System.Int32,System.Int32)
  id: GetNext(System.Int32,System.Int32)
  parent: SuperOffice.Data.Sequence
  langs:
  - csharp
  - vb
  name: GetNext(Int32, Int32)
  nameWithType: Sequence.GetNext(Int32, Int32)
  fullName: SuperOffice.Data.Sequence.GetNext(System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  summary: "\nReserve a set of new id&apos;s from the sequence table, given the tables sequence number.\n"
  syntax:
    content: >-
      [Obsolete("Please use an overload taking TableInfo or SoTable; not all tables have a sequence number! - the overloads will handle those as well.", false)]

      public static int GetNext(int sequenceID, int count)
    parameters:
    - id: sequenceID
      type: System.Int32
      description: Sequence id of the table.
    - id: count
      type: System.Int32
      description: Number of new sequence id&apos;s to reserve
    return:
      type: System.Int32
      description: First id of the range.
    content.vb: >-
      <Obsolete("Please use an overload taking TableInfo or SoTable; not all tables have a sequence number! - the overloads will handle those as well.", False)>

      Public Shared Function GetNext(sequenceID As Integer, count As Integer) As Integer
  overload: SuperOffice.Data.Sequence.GetNext*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Please use an overload taking TableInfo or SoTable; not all tables have a sequence number! - the overloads will handle those as well.
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.Sequence.GetNext*
  commentId: Overload:SuperOffice.Data.Sequence.GetNext
  isExternal: true
  name: GetNext
  nameWithType: Sequence.GetNext
  fullName: SuperOffice.Data.Sequence.GetNext
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.Data.Sequence.GetNextBatch*
  commentId: Overload:SuperOffice.Data.Sequence.GetNextBatch
  isExternal: true
  name: GetNextBatch
  nameWithType: Sequence.GetNextBatch
  fullName: SuperOffice.Data.Sequence.GetNextBatch
- uid: SuperOffice.Data.PKContainer
  commentId: T:SuperOffice.Data.PKContainer
  parent: SuperOffice.Data
  isExternal: true
  name: PKContainer
  nameWithType: PKContainer
  fullName: SuperOffice.Data.PKContainer
