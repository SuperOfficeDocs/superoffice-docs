### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
  commentId: T:SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
  id: WebhookSoftTriggerPlugin
  parent: SuperOffice.CRM.Webhooks
  children:
  - SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.#ctor(SuperOffice.CRM.Webhooks.IWebhookManager,Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin})
  - SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  - SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Name
  langs:
  - csharp
  - vb
  name: WebhookSoftTriggerPlugin
  nameWithType: WebhookSoftTriggerPlugin
  fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  summary: "\nCreated by plugin system.\n"
  syntax:
    content: >-
      [SoftTriggerPlugin("WebhookSoftTriggerPlugin")]

      public class WebhookSoftTriggerPlugin : Object, ISoftTriggerPlugin, IPlugin
    content.vb: >-
      <SoftTriggerPlugin("WebhookSoftTriggerPlugin")>

      Public Class WebhookSoftTriggerPlugin
          Inherits Object
          Implements ISoftTriggerPlugin, IPlugin
  inheritance:
  - System.Object
  implements:
  - SuperOffice.Data.ISoftTriggerPlugin
  extensionMethods:
  - SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Data.SoftTriggerPluginAttribute
    ctor: SuperOffice.Data.SoftTriggerPluginAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WebhookSoftTriggerPlugin
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Name
  commentId: F:SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Name
  id: Name
  parent: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WebhookSoftTriggerPlugin.Name
  fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Name
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  syntax:
    content: public const string Name = "WebhookSoftTriggerPlugin"
    return:
      type: System.String
    content.vb: Public Const Name As String = "WebhookSoftTriggerPlugin"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.#ctor(SuperOffice.CRM.Webhooks.IWebhookManager,Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin})
  commentId: M:SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.#ctor(SuperOffice.CRM.Webhooks.IWebhookManager,Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin})
  id: '#ctor(SuperOffice.CRM.Webhooks.IWebhookManager,Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin})'
  parent: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
  langs:
  - csharp
  - vb
  name: WebhookSoftTriggerPlugin(IWebhookManager, ILogger<WebhookSoftTriggerPlugin>)
  nameWithType: WebhookSoftTriggerPlugin.WebhookSoftTriggerPlugin(IWebhookManager, ILogger<WebhookSoftTriggerPlugin>)
  fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.WebhookSoftTriggerPlugin(SuperOffice.CRM.Webhooks.IWebhookManager, Microsoft.Extensions.Logging.ILogger<SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin>)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  syntax:
    content: public WebhookSoftTriggerPlugin(IWebhookManager webhookManager, ILogger<WebhookSoftTriggerPlugin> logger)
    parameters:
    - id: webhookManager
      type: SuperOffice.CRM.Webhooks.IWebhookManager
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin}
    content.vb: Public Sub New(webhookManager As IWebhookManager, logger As ILogger(Of WebhookSoftTriggerPlugin))
  overload: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.#ctor*
  nameWithType.vb: WebhookSoftTriggerPlugin.WebhookSoftTriggerPlugin(IWebhookManager, ILogger(Of WebhookSoftTriggerPlugin))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.WebhookSoftTriggerPlugin(SuperOffice.CRM.Webhooks.IWebhookManager, Microsoft.Extensions.Logging.ILogger(Of SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin))
  name.vb: WebhookSoftTriggerPlugin(IWebhookManager, ILogger(Of WebhookSoftTriggerPlugin))
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  commentId: M:SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  id: Initialize(SuperOffice.Data.SoftTrigger)
  parent: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
  langs:
  - csharp
  - vb
  name: Initialize(SoftTrigger)
  nameWithType: WebhookSoftTriggerPlugin.Initialize(SoftTrigger)
  fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Webhooks
  syntax:
    content: public void Initialize(SoftTrigger softTrigger)
    parameters:
    - id: softTrigger
      type: SuperOffice.Data.SoftTrigger
    content.vb: Public Sub Initialize(softTrigger As SoftTrigger)
  overload: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize*
  implements:
  - SuperOffice.Data.ISoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Webhooks
  commentId: N:SuperOffice.CRM.Webhooks
  isExternal: true
  name: SuperOffice.CRM.Webhooks
  nameWithType: SuperOffice.CRM.Webhooks
  fullName: SuperOffice.CRM.Webhooks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.ISoftTriggerPlugin
  commentId: T:SuperOffice.Data.ISoftTriggerPlugin
  parent: SuperOffice.Data
  isExternal: true
  name: ISoftTriggerPlugin
  nameWithType: ISoftTriggerPlugin
  fullName: SuperOffice.Data.ISoftTriggerPlugin
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<WebhookSoftTriggerPlugin, To>()
  nameWithType: EnumUtil.MapEnums<WebhookSoftTriggerPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of WebhookSoftTriggerPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To)()
  name.vb: MapEnums(Of WebhookSoftTriggerPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<WebhookSoftTriggerPlugin, To>
    nameWithType: EnumUtil.MapEnums<WebhookSoftTriggerPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of WebhookSoftTriggerPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of WebhookSoftTriggerPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<WebhookSoftTriggerPlugin, To>()
  nameWithType: Converters.MapEnums<WebhookSoftTriggerPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of WebhookSoftTriggerPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To)()
  name.vb: MapEnums(Of WebhookSoftTriggerPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<WebhookSoftTriggerPlugin, To>
    nameWithType: Converters.MapEnums<WebhookSoftTriggerPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of WebhookSoftTriggerPlugin, To)
    nameWithType: Converters.MapEnums(Of WebhookSoftTriggerPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.#ctor*
  commentId: Overload:SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.#ctor
  isExternal: true
  name: WebhookSoftTriggerPlugin
  nameWithType: WebhookSoftTriggerPlugin.WebhookSoftTriggerPlugin
  fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.WebhookSoftTriggerPlugin
- uid: SuperOffice.CRM.Webhooks.IWebhookManager
  commentId: T:SuperOffice.CRM.Webhooks.IWebhookManager
  parent: SuperOffice.CRM.Webhooks
  isExternal: true
  name: IWebhookManager
  nameWithType: IWebhookManager
  fullName: SuperOffice.CRM.Webhooks.IWebhookManager
- uid: Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<WebhookSoftTriggerPlugin>
  nameWithType: ILogger<WebhookSoftTriggerPlugin>
  fullName: Microsoft.Extensions.Logging.ILogger<SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin>
  nameWithType.vb: ILogger(Of WebhookSoftTriggerPlugin)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin)
  name.vb: ILogger(Of WebhookSoftTriggerPlugin)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
    name: WebhookSoftTriggerPlugin
    nameWithType: WebhookSoftTriggerPlugin
    fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
    name: WebhookSoftTriggerPlugin
    nameWithType: WebhookSoftTriggerPlugin
    fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize*
  commentId: Overload:SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize
  isExternal: true
  name: Initialize
  nameWithType: WebhookSoftTriggerPlugin.Initialize
  fullName: SuperOffice.CRM.Webhooks.WebhookSoftTriggerPlugin.Initialize
- uid: SuperOffice.Data.ISoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  commentId: M:SuperOffice.Data.ISoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  parent: SuperOffice.Data.ISoftTriggerPlugin
  isExternal: true
  name: Initialize(SoftTrigger)
  nameWithType: ISoftTriggerPlugin.Initialize(SoftTrigger)
  fullName: SuperOffice.Data.ISoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
  spec.csharp:
  - uid: SuperOffice.Data.ISoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
    name: Initialize
    nameWithType: ISoftTriggerPlugin.Initialize
    fullName: SuperOffice.Data.ISoftTriggerPlugin.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SoftTrigger
    name: SoftTrigger
    nameWithType: SoftTrigger
    fullName: SuperOffice.Data.SoftTrigger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.ISoftTriggerPlugin.Initialize(SuperOffice.Data.SoftTrigger)
    name: Initialize
    nameWithType: ISoftTriggerPlugin.Initialize
    fullName: SuperOffice.Data.ISoftTriggerPlugin.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SoftTrigger
    name: SoftTrigger
    nameWithType: SoftTrigger
    fullName: SuperOffice.Data.SoftTrigger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SoftTrigger
  commentId: T:SuperOffice.Data.SoftTrigger
  parent: SuperOffice.Data
  isExternal: true
  name: SoftTrigger
  nameWithType: SoftTrigger
  fullName: SuperOffice.Data.SoftTrigger
