### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.RecurrencePatternBase
  commentId: T:SuperOffice.CRM.Services.RecurrencePatternBase
  id: RecurrencePatternBase
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.RecurrencePatternBase.#ctor
  - SuperOffice.CRM.Services.RecurrencePatternBase.Clone
  - SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo(SuperOffice.CRM.Services.RecurrencePatternBase)
  - SuperOffice.CRM.Services.RecurrencePatternBase.Cycle
  langs:
  - csharp
  - vb
  name: RecurrencePatternBase
  nameWithType: RecurrencePatternBase
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nAbstract class representing a pattern for recurrence\n"
  syntax:
    content: 'public abstract class RecurrencePatternBase : Object, ICloneable'
    content.vb: >-
      Public MustInherit Class RecurrencePatternBase
          Inherits Object
          Implements ICloneable
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Services.RecurrenceDayPattern
  - SuperOffice.CRM.Services.RecurrenceWeekOfMonthPattern
  - SuperOffice.CRM.Services.RecurrenceWeekPattern
  implements:
  - System.ICloneable
  extensionMethods:
  - SuperOffice.CRM.Services.RecurrencePatternBase.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Services.RecurrencePatternBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo(SuperOffice.CRM.Services.RecurrencePatternBase)
  commentId: M:SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo(SuperOffice.CRM.Services.RecurrencePatternBase)
  id: CopyTo(SuperOffice.CRM.Services.RecurrencePatternBase)
  parent: SuperOffice.CRM.Services.RecurrencePatternBase
  langs:
  - csharp
  - vb
  name: CopyTo(RecurrencePatternBase)
  nameWithType: RecurrencePatternBase.CopyTo(RecurrencePatternBase)
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo(SuperOffice.CRM.Services.RecurrencePatternBase)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  syntax:
    content: protected virtual void CopyTo(RecurrencePatternBase destination)
    parameters:
    - id: destination
      type: SuperOffice.CRM.Services.RecurrencePatternBase
    content.vb: Protected Overridable Sub CopyTo(destination As RecurrencePatternBase)
  overload: SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.Clone
  commentId: M:SuperOffice.CRM.Services.RecurrencePatternBase.Clone
  id: Clone
  parent: SuperOffice.CRM.Services.RecurrencePatternBase
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: RecurrencePatternBase.Clone()
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.Clone()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  syntax:
    content: public abstract object Clone()
    return:
      type: System.Object
    content.vb: Public MustOverride Function Clone As Object
  overload: SuperOffice.CRM.Services.RecurrencePatternBase.Clone*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.#ctor
  commentId: M:SuperOffice.CRM.Services.RecurrencePatternBase.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Services.RecurrencePatternBase
  langs:
  - csharp
  - vb
  name: RecurrencePatternBase()
  nameWithType: RecurrencePatternBase.RecurrencePatternBase()
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.RecurrencePatternBase()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  syntax:
    content: protected RecurrencePatternBase()
    content.vb: Protected Sub New
  overload: SuperOffice.CRM.Services.RecurrencePatternBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.Cycle
  commentId: P:SuperOffice.CRM.Services.RecurrencePatternBase.Cycle
  id: Cycle
  parent: SuperOffice.CRM.Services.RecurrencePatternBase
  langs:
  - csharp
  - vb
  name: Cycle
  nameWithType: RecurrencePatternBase.Cycle
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.Cycle
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.CRM.Services
  summary: "\nThe number of intervals (day, week, month) between each recurrence.\n"
  syntax:
    content: public virtual int Cycle { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable Property Cycle As Integer
  overload: SuperOffice.CRM.Services.RecurrencePatternBase.Cycle*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<RecurrencePatternBase, To>()
  nameWithType: EnumUtil.MapEnums<RecurrencePatternBase, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Services.RecurrencePatternBase, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of RecurrencePatternBase, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Services.RecurrencePatternBase, To)()
  name.vb: MapEnums(Of RecurrencePatternBase, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<RecurrencePatternBase, To>
    nameWithType: EnumUtil.MapEnums<RecurrencePatternBase, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Services.RecurrencePatternBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of RecurrencePatternBase, To)
    nameWithType: EnumUtil.MapEnums(Of RecurrencePatternBase, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Services.RecurrencePatternBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<RecurrencePatternBase, To>()
  nameWithType: Converters.MapEnums<RecurrencePatternBase, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Services.RecurrencePatternBase, To>()
  nameWithType.vb: Converters.MapEnums(Of RecurrencePatternBase, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Services.RecurrencePatternBase, To)()
  name.vb: MapEnums(Of RecurrencePatternBase, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<RecurrencePatternBase, To>
    nameWithType: Converters.MapEnums<RecurrencePatternBase, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Services.RecurrencePatternBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of RecurrencePatternBase, To)
    nameWithType: Converters.MapEnums(Of RecurrencePatternBase, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Services.RecurrencePatternBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo*
  commentId: Overload:SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: RecurrencePatternBase.CopyTo
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.CopyTo
- uid: SuperOffice.CRM.Services.RecurrencePatternBase
  commentId: T:SuperOffice.CRM.Services.RecurrencePatternBase
  parent: SuperOffice.CRM.Services
  isExternal: true
  name: RecurrencePatternBase
  nameWithType: RecurrencePatternBase
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.Clone*
  commentId: Overload:SuperOffice.CRM.Services.RecurrencePatternBase.Clone
  isExternal: true
  name: Clone
  nameWithType: RecurrencePatternBase.Clone
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.Clone
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.#ctor*
  commentId: Overload:SuperOffice.CRM.Services.RecurrencePatternBase.#ctor
  isExternal: true
  name: RecurrencePatternBase
  nameWithType: RecurrencePatternBase.RecurrencePatternBase
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.RecurrencePatternBase
- uid: SuperOffice.CRM.Services.RecurrencePatternBase.Cycle*
  commentId: Overload:SuperOffice.CRM.Services.RecurrencePatternBase.Cycle
  isExternal: true
  name: Cycle
  nameWithType: RecurrencePatternBase.Cycle
  fullName: SuperOffice.CRM.Services.RecurrencePatternBase.Cycle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
