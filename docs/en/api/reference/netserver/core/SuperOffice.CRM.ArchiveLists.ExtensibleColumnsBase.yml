### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  commentId: T:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  id: ExtensibleColumnsBase
  parent: SuperOffice.CRM.ArchiveLists
  children:
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.#ctor
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase._minuteFields
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField(System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider``1(``0)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider``1(``0,System.String,System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride(System.String,System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,System.Int32)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping(System.String,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AllowOrderBy
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides(SuperOffice.CRM.ArchiveLists.ArchiveRow)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue(System.String,SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveColumnData)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString(System.Object,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DenyOrderBy
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAllRestriction
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData(System.Int32)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy(System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData(System.Int32)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag(SuperOffice.Data.SoDataReader)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint(SuperOffice.Data.SoDataReader,System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetNoneRestriction
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn(System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction(System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Invisible
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.BlobLinkType,System.Int32,System.Int32,System.Int32)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect,SuperOffice.Data.SQL.FieldInfo,System.Boolean,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,System.Int32,System.Int32)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField(SuperOffice.Data.SQL.FieldInfo,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint(System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes(System.String,System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(System.String,System.String[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent(SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes(System.String,System.String)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Visible
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(System.String[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(System.String[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo})
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.String[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(System.String[])
  langs:
  - csharp
  - vb
  name: ExtensibleColumnsBase
  nameWithType: ExtensibleColumnsBase
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThis is the &apos;root&apos; base class for the Extender and Provider base classes and providers. It contains\ncommon functionality, including facades for the <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper\" data-throw-if-not-resolved=\"false\"></xref>\nclasses. It implements the <xref href=\"SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible\" data-throw-if-not-resolved=\"false\"></xref>\ninterfaces, and defines its own contract for derived classes through the declaration of abstract methods.\n<p></p>\nPartner-defined providers are expected to inherit either <see cref=\"!:ExtenderBase\"></see> or \n<see cref=\"!:QueryProviderBase\"></see>, which specialize and provide more functionality.\n"
  syntax:
    content: 'public abstract class ExtensibleColumnsBase : IArchiveProviderHasColumns, IArchiveProviderExtensible, IArchiveProviderQueryMapping'
    content.vb: >-
      Public MustInherit Class ExtensibleColumnsBase
          Implements IArchiveProviderHasColumns, IArchiveProviderExtensible, IArchiveProviderQueryMapping
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.ArchiveLists.ExtenderBase`1
  - SuperOffice.CRM.ArchiveLists.QueryProviderBase`1
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.EnumUtil.MapEnums``2
  - SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase._minuteFields
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase._minuteFields
  id: _minuteFields
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: _minuteFields
  nameWithType: ExtensibleColumnsBase._minuteFields
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase._minuteFields
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nFields that are of type TimeSpan, come from Service, and are tagged as containing Minutes rather than Seconds. Such fields need extra processing\n"
  syntax:
    content: protected Dictionary<string, FieldInfo> _minuteFields
    return:
      type: System.Collections.Generic.Dictionary{System.String,SuperOffice.Data.SQL.FieldInfo}
    content.vb: Protected _minuteFields As Dictionary(Of String, FieldInfo)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Visible
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Visible
  id: Visible
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: Visible
  nameWithType: ExtensibleColumnsBase.Visible
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Visible
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSymbolic boolean constant for <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo\" data-throw-if-not-resolved=\"false\"></xref> constructor, evaluates to &apos;true&apos;\n"
  syntax:
    content: protected const bool Visible = true
    return:
      type: System.Boolean
    content.vb: Protected Const Visible As Boolean = True
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Invisible
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Invisible
  id: Invisible
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: Invisible
  nameWithType: ExtensibleColumnsBase.Invisible
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Invisible
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSymbolic boolean constant for <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo\" data-throw-if-not-resolved=\"false\"></xref> constructor, evaluates to &apos;false&apos;\n"
  syntax:
    content: protected const bool Invisible = false
    return:
      type: System.Boolean
    content.vb: Protected Const Invisible As Boolean = False
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AllowOrderBy
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AllowOrderBy
  id: AllowOrderBy
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AllowOrderBy
  nameWithType: ExtensibleColumnsBase.AllowOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AllowOrderBy
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSymbolic boolean constant for <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo\" data-throw-if-not-resolved=\"false\"></xref> constructor, evaluates to &apos;true&apos;\n"
  syntax:
    content: protected const bool AllowOrderBy = true
    return:
      type: System.Boolean
    content.vb: Protected Const AllowOrderBy As Boolean = True
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DenyOrderBy
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DenyOrderBy
  id: DenyOrderBy
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: DenyOrderBy
  nameWithType: ExtensibleColumnsBase.DenyOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DenyOrderBy
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSymbolic boolean constant for <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo\" data-throw-if-not-resolved=\"false\"></xref> constructor, evaluates to &apos;false&apos;\n"
  syntax:
    content: protected const bool DenyOrderBy = false
    return:
      type: System.Boolean
    content.vb: Protected Const DenyOrderBy As Boolean = False
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAllRestriction
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAllRestriction
  id: GetAllRestriction
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetAllRestriction
  nameWithType: ExtensibleColumnsBase.GetAllRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAllRestriction
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThe name of the pseudo restriction that means &quot;yes, I really want to fetch all rows&quot;; simply sending no \nrestrictions at all will yield an empty result, to guard against people inadvertently fetching the entire\ndatabase.\n"
  syntax:
    content: public const string GetAllRestriction = "getAllRows"
    return:
      type: System.String
    content.vb: Public Const GetAllRestriction As String = "getAllRows"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetNoneRestriction
  commentId: F:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetNoneRestriction
  id: GetNoneRestriction
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetNoneRestriction
  nameWithType: ExtensibleColumnsBase.GetNoneRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetNoneRestriction
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThe name of the pseudo restriction that means the provider should not fetch any rows at all.\ndatabase.\n"
  syntax:
    content: public const string GetNoneRestriction = "getNoRows"
    return:
      type: System.String
    content.vb: Public Const GetNoneRestriction As String = "getNoRows"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  id: InnerPopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: InnerPopulateRowFromReader(SoDataReader, ArchiveRow)
  nameWithType: ExtensibleColumnsBase.InnerPopulateRowFromReader(SoDataReader, ArchiveRow)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDerived classes should implement the population of ColumnData items for columns\nthat are NOT handled by this base class in this method. Whether a column is handled by\nthis base class is part of its database binding information, set by the various MapXXX methods.\n"
  syntax:
    content: protected virtual void InnerPopulateRowFromReader(SoDataReader reader, ArchiveRow row)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: Data reader with the query result (one row)
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
      description: archive row to be populated
    content.vb: Protected Overridable Sub InnerPopulateRowFromReader(reader As SoDataReader, row As ArchiveRow)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.#ctor
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ExtensibleColumnsBase()
  nameWithType: ExtensibleColumnsBase.ExtensibleColumnsBase()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleColumnsBase()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nConstruct the instance, and the Column and Extensible helpers. The extensible helper\nwill call <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveProviderFactory.AddExtendersToProvider(SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible)\" data-throw-if-not-resolved=\"false\"></xref> on our behalf and thus\nalso add any partner-defined extenders at this time.\n"
  syntax:
    content: protected ExtensibleColumnsBase()
    content.vb: Protected Sub New
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent(SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent(SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible)
  id: SetParent(SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetParent(IArchiveProviderExtensible)
  nameWithType: ExtensibleColumnsBase.SetParent(IArchiveProviderExtensible)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent(SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the parent provider that this class is extending\n"
  syntax:
    content: public void SetParent(IArchiveProviderExtensible parent)
    parameters:
    - id: parent
      type: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
      description: Provider to extend, via its IArchiveProviderExtensible property interface
    content.vb: Public Sub SetParent(parent As IArchiveProviderExtensible)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: AddAvailableColumn(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddAvailableColumn(ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.AddAvailableColumn(ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdd one or more columns to the list of available columns for this client class\n"
  syntax:
    content: protected void AddAvailableColumn(params ArchiveColumnInfo[] columns)
    parameters:
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: One or more column information data blocks
    content.vb: Protected Sub AddAvailableColumn(ParamArray columns As ArchiveColumnInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn*
  nameWithType.vb: ExtensibleColumnsBase.AddAvailableColumn(ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: AddAvailableColumn(ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns
  id: GetAvailableColumns
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetAvailableColumns()
  nameWithType: ExtensibleColumnsBase.GetAvailableColumns()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGet the list of available columns provided by this provider and all its known extenders.\nAny column name overrides are applied before the result is returned to the caller.\n"
  remarks: "\nMerging columns from extenders is a fairly expensive operation, that also sets the ranks of the columns;\nwe don&apos;t want to do it too often. We assume all columns are set up by constructors, making it safe\nto keep a cache at each level that will answer any further requests\n"
  syntax:
    content: public virtual List<ArchiveColumnInfo> GetAvailableColumns()
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo}
      description: List of available columns
    content.vb: Public Overridable Function GetAvailableColumns As List(Of ArchiveColumnInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String[])
  id: SetDesiredColumns(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetDesiredColumns(String[])
  nameWithType: ExtensibleColumnsBase.SetDesiredColumns(String[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the list of desired columns. This method sets the desired columns of this provider,\nas well as invoking the same call on all known extenders. Recursion will take it to the bottom. \nAny column name overrides\nare processed, i.e., replaced with the original inner names, so that the inner providers do not see the overrides.\n"
  syntax:
    content: public virtual void SetDesiredColumns(params string[] columnIds)
    parameters:
    - id: columnIds
      type: System.String[]
      description: Array of programmatic column names
    content.vb: Public Overridable Sub SetDesiredColumns(ParamArray columnIds As String())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String[])
  nameWithType.vb: ExtensibleColumnsBase.SetDesiredColumns(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String())
  name.vb: SetDesiredColumns(String())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  id: SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetOrderBy(ArchiveOrderByInfo[])
  nameWithType: ExtensibleColumnsBase.SetOrderBy(ArchiveOrderByInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the order by parameters. This method sets the order by parameters of this provider,\nas well as invoking the same call on all known extenders. Recursion will take it to the bottom.\nThis method actually only saves the orderby specification for use during query processing.\nAny column name overrides\nare processed, i.e., replaced with the original inner names, so that the inner providers do not see the overrides.\n"
  syntax:
    content: public virtual void SetOrderBy(ArchiveOrderByInfo[] orderBy)
    parameters:
    - id: orderBy
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
      description: Array of order by criteria
    content.vb: Public Overridable Sub SetOrderBy(orderBy As ArchiveOrderByInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  nameWithType.vb: ExtensibleColumnsBase.SetOrderBy(ArchiveOrderByInfo())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo())
  name.vb: SetOrderBy(ArchiveOrderByInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(System.String,System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(System.String,System.String[])
  id: SetOrderByMapping(System.String,System.String[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetOrderByMapping(String, String[])
  nameWithType: ExtensibleColumnsBase.SetOrderByMapping(String, String[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(System.String, System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet a mapping for a column ordering. This is used when the client would like to order by a column that does not\nmap directly to a database column, for instance the nameDepartment on contact. Using this mapping, the orderby\nwould be mapped to the columns name and department instead.\n"
  syntax:
    content: public void SetOrderByMapping(string keyColumn, params string[] mappedColumns)
    parameters:
    - id: keyColumn
      type: System.String
      description: Column to map
    - id: mappedColumns
      type: System.String[]
      description: What an orderby on the mapped column, should be mapped to
    content.vb: Public Sub SetOrderByMapping(keyColumn As String, ParamArray mappedColumns As String())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping*
  nameWithType.vb: ExtensibleColumnsBase.SetOrderByMapping(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(System.String, System.String())
  name.vb: SetOrderByMapping(String, String())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: SetOrderByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetOrderByMapping(ArchiveColumnInfo, ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.SetOrderByMapping(ArchiveColumnInfo, ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet a mapping for a column ordering. This is used when the client would like to order by a column that does not\nmap directly to a database column, for instance the nameDepartment on contact. Using this mapping, the orderby\nwould be mapped to the columns name and department instead.\n"
  syntax:
    content: public void SetOrderByMapping(ArchiveColumnInfo keyColumn, params ArchiveColumnInfo[] mappedColumns)
    parameters:
    - id: keyColumn
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Column to map
    - id: mappedColumns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: What an orderby on the mapped column, should be mapped to
    content.vb: Public Sub SetOrderByMapping(keyColumn As ArchiveColumnInfo, ParamArray mappedColumns As ArchiveColumnInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping*
  nameWithType.vb: ExtensibleColumnsBase.SetOrderByMapping(ArchiveColumnInfo, ArchiveColumnInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: SetOrderByMapping(ArchiveColumnInfo, ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes(System.String,System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes(System.String,System.String)
  id: SetPrefixes(System.String,System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetPrefixes(String, String)
  nameWithType: ExtensibleColumnsBase.SetPrefixes(String, String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the name and display name prefixes. This method sets the prefixes of this provider,\nas well as invoking the same call on all known extenders. Recursion will take it to the bottom.\nPrefixes are cumulative and reflect the nesting of extenders.\n"
  syntax:
    content: public void SetPrefixes(string namePrefix, string displayNamePrefix)
    parameters:
    - id: namePrefix
      type: System.String
      description: Programmatic name prefix, can be null/empty
    - id: displayNamePrefix
      type: System.String
      description: Display name prefix, can be null/empty
    content.vb: Public Sub SetPrefixes(namePrefix As String, displayNamePrefix As String)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes(System.String,System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes(System.String,System.String)
  id: SetLocalAbsolutePrefixes(System.String,System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetLocalAbsolutePrefixes(String, String)
  nameWithType: ExtensibleColumnsBase.SetLocalAbsolutePrefixes(String, String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the name and display name prefixes, on this extender ONLY. No recursion, and no\naccumulation of prefixes, and no delimiters - column name will be the given prefix plus\nthe base name and nothing else.\n"
  syntax:
    content: public virtual void SetLocalAbsolutePrefixes(string namePrefix, string displayNamePrefix)
    parameters:
    - id: namePrefix
      type: System.String
    - id: displayNamePrefix
      type: System.String
    content.vb: Public Overridable Sub SetLocalAbsolutePrefixes(namePrefix As String, displayNamePrefix As String)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint(System.String)
  id: SetIconHint(System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetIconHint(String)
  nameWithType: ExtensibleColumnsBase.SetIconHint(String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the icon hint on all available columns\n"
  remarks: "\nThis method is usually called by the most-derived class in its initialization, because that is the point where\nthe knowledge of exactly what table/query is being extended is present. For instance, the <xref href=\"SuperOffice.CRM.ArchiveLists.UdefExtenderBase\" data-throw-if-not-resolved=\"false\"></xref>\ndoes not really know whether it represents a person or contact, while the <xref href=\"SuperOffice.CRM.ArchiveLists.PersonUdefExtender\" data-throw-if-not-resolved=\"false\"></xref> does have\nthis knowledge embedded in the type.\n<p></p>\nFor this reason, the implementation here also does NOT call the _extensibleHelper to propagate the icon hint to other\nextenders - each extender is expected to set its own icon hint. Standard icon hint names can be found in the \n<see cref=\"!:ArchiveListConstants\"></see> class\n"
  syntax:
    content: public virtual void SetIconHint(string iconHint)
    parameters:
    - id: iconHint
      type: System.String
      description: Iconhint to be set on all columns
    content.vb: Public Overridable Sub SetIconHint(iconHint As String)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  id: SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetRestriction(ArchiveRestrictionInfo[])
  nameWithType: ExtensibleColumnsBase.SetRestriction(ArchiveRestrictionInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the restriction for the query. This method sets the restrictions for this provider, \nas well as invoking the same call on all known extenders. Recursion will take it to the bottom.\nThis method actually only saves the restriction specification for use during query processing.\n"
  syntax:
    content: public virtual bool SetRestriction(params ArchiveRestrictionInfo[] restrictions)
    parameters:
    - id: restrictions
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Array of restrictions (implicit AND)
    return:
      type: System.Boolean
    content.vb: Public Overridable Function SetRestriction(ParamArray restrictions As ArchiveRestrictionInfo()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  nameWithType.vb: ExtensibleColumnsBase.SetRestriction(ArchiveRestrictionInfo())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo())
  name.vb: SetRestriction(ArchiveRestrictionInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  id: AddLocalRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddLocalRestriction(ArchiveRestrictionInfo[])
  nameWithType: ExtensibleColumnsBase.AddLocalRestriction(ArchiveRestrictionInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdd a restriction to this class only - this method does not recurse into extenders. The restriction must be one\nof the available columns of this particular class or its subclasses in this instance\n"
  syntax:
    content: public virtual bool AddLocalRestriction(params ArchiveRestrictionInfo[] restrictions)
    parameters:
    - id: restrictions
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
      description: Restrictions to be added
    return:
      type: System.Boolean
    content.vb: Public Overridable Function AddLocalRestriction(ParamArray restrictions As ArchiveRestrictionInfo()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction*
  nameWithType.vb: ExtensibleColumnsBase.AddLocalRestriction(ArchiveRestrictionInfo())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo())
  name.vb: AddLocalRestriction(ArchiveRestrictionInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  id: AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddExtensionProvider(IArchiveExtender)
  nameWithType: ExtensibleColumnsBase.AddExtensionProvider(IArchiveExtender)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdd an extender to this provider\n"
  syntax:
    content: public void AddExtensionProvider(IArchiveExtender extender)
    parameters:
    - id: extender
      type: SuperOffice.CRM.ArchiveLists.IArchiveExtender
      description: Extender to be added
    content.vb: Public Sub AddExtensionProvider(extender As IArchiveExtender)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders
  id: GetExtensionProviders
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetExtensionProviders()
  nameWithType: ExtensibleColumnsBase.GetExtensionProviders()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nEnumerate the extenders that are children of this extender\n"
  syntax:
    content: public IEnumerable<IArchiveExtender> GetExtensionProviders()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender}
    content.vb: Public Function GetExtensionProviders As IEnumerable(Of IArchiveExtender)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders
  id: GetTableInfosFromExtensionProviders
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetTableInfosFromExtensionProviders()
  nameWithType: ExtensibleColumnsBase.GetTableInfosFromExtensionProviders()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nEnumerate the <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend\" data-throw-if-not-resolved=\"false\"></xref> of all extenders that are children of this extender;\nhandle the known special cases\n"
  syntax:
    content: public IEnumerable<TableInfo> GetTableInfosFromExtensionProviders()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo}
      description: Non-null <xref href="SuperOffice.Data.SQL.TableInfo" data-throw-if-not-resolved="false"></xref> elements only; an extender that plays no role in this particular query (restrictions, columns) will provide no table
    content.vb: Public Function GetTableInfosFromExtensionProviders As IEnumerable(Of TableInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  id: PopulateRowFromReader(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: PopulateRowFromReader(SoDataReader, ArchiveRow)
  nameWithType: ExtensibleColumnsBase.PopulateRowFromReader(SoDataReader, ArchiveRow)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public virtual void PopulateRowFromReader(SoDataReader reader, ArchiveRow row)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
    content.vb: Public Overridable Sub PopulateRowFromReader(reader As SoDataReader, row As ArchiveRow)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  id: SuppressTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SuppressTableResults(SoDataReader, TableInfo)
  nameWithType: ExtensibleColumnsBase.SuppressTableResults(SoDataReader, TableInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults(SuperOffice.Data.SoDataReader, SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void SuppressTableResults(SoDataReader reader, TableInfo table)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: table
      type: SuperOffice.Data.SQL.TableInfo
    content.vb: Protected Sub SuppressTableResults(reader As SoDataReader, table As TableInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  id: SuppressDeepTableResults(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SuppressDeepTableResults(SoDataReader, TableInfo)
  nameWithType: ExtensibleColumnsBase.SuppressDeepTableResults(SoDataReader, TableInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults(SuperOffice.Data.SoDataReader, SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void SuppressDeepTableResults(SoDataReader reader, TableInfo table)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: table
      type: SuperOffice.Data.SQL.TableInfo
    content.vb: Protected Sub SuppressDeepTableResults(reader As SoDataReader, table As TableInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride(System.String,System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride(System.String,System.String)
  id: AddColumnNameOverride(System.String,System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddColumnNameOverride(String, String)
  nameWithType: ExtensibleColumnsBase.AddColumnNameOverride(String, String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdd a column name override. Overrides work by being applied to the result of the <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns\" data-throw-if-not-resolved=\"false\"></xref>,\nand again (in reverse) in the implementation of <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe original name of an override column must include any prefixes and the prefix separators.\n"
  syntax:
    content: protected void AddColumnNameOverride(string originalName, string overrideName)
    parameters:
    - id: originalName
      type: System.String
      description: Name to override, including any prefixes it might have
    - id: overrideName
      type: System.String
      description: Name to substitute
    content.vb: Protected Sub AddColumnNameOverride(originalName As String, overrideName As String)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides(SuperOffice.CRM.ArchiveLists.ArchiveRow)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides(SuperOffice.CRM.ArchiveLists.ArchiveRow)
  id: ApplyColumnNameOverrides(SuperOffice.CRM.ArchiveLists.ArchiveRow)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ApplyColumnNameOverrides(ArchiveRow)
  nameWithType: ExtensibleColumnsBase.ApplyColumnNameOverrides(ArchiveRow)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides(SuperOffice.CRM.ArchiveLists.ArchiveRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nApply column name overrides to an <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveRow\" data-throw-if-not-resolved=\"false\"></xref>. If your class uses\ncolumn name overrides, it must call this method to apply them to a row being constructed,\notherwise the original column names will be used.\n"
  syntax:
    content: protected void ApplyColumnNameOverrides(ArchiveRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
      description: Data row to scan and update
    content.vb: Protected Sub ApplyColumnNameOverrides(row As ArchiveRow)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping(System.String,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping(System.String,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[])
  id: AddSubExtenderMapping(System.String,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddSubExtenderMapping(String, ExtensibleColumnsBase[])
  nameWithType: ExtensibleColumnsBase.AddSubExtenderMapping(String, ExtensibleColumnsBase[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping(System.String, SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdd a sub extender mapping for a column: a mapping that specifies that the first available subextender\nthat has a valid valid for the column, will become the supplier of that column.\n"
  remarks: "\nRepeated calls are OK - you can add more mappings to one column over several calls. Duplicates are quietly ignored.\n"
  syntax:
    content: protected void AddSubExtenderMapping(string columnName, params ExtensibleColumnsBase[] subExtenders)
    parameters:
    - id: columnName
      type: System.String
      description: "Column name to map (any prefixes it has will NOT be propagated to subextenders; \ninstead, the subextenders&apos; own prefix for the column base name will be used)"
    - id: subExtenders
      type: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[]
      description: Subextenders to map this column to
    content.vb: Protected Sub AddSubExtenderMapping(columnName As String, ParamArray subExtenders As ExtensibleColumnsBase())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping*
  nameWithType.vb: ExtensibleColumnsBase.AddSubExtenderMapping(String, ExtensibleColumnsBase())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping(System.String, SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase())
  name.vb: AddSubExtenderMapping(String, ExtensibleColumnsBase())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.String[])
  id: WantColumnForOutput(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForOutput(String[])
  nameWithType: ExtensibleColumnsBase.WantColumnForOutput(String[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine whether at least one of the given columns is in the list\nof currently desired columns\n"
  syntax:
    content: protected bool WantColumnForOutput(params string[] names)
    parameters:
    - id: names
      type: System.String[]
      description: Array of programmatic names to check
    return:
      type: System.Boolean
      description: true if at least one of the names is in the desired column list, otherwise false
    content.vb: Protected Function WantColumnForOutput(ParamArray names As String()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForOutput(String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.String())
  name.vb: WantColumnForOutput(String())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: WantColumnForOutput(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForOutput(ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.WantColumnForOutput(ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine whether at least one of the given columns is in the list\nof currently desired columns\n"
  syntax:
    content: protected bool WantColumnForOutput(params ArchiveColumnInfo[] columns)
    parameters:
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: Array of column informations to check
    return:
      type: System.Boolean
      description: true if at least one of the names is in the desired column list, otherwise false
    content.vb: Protected Function WantColumnForOutput(ParamArray columns As ArchiveColumnInfo()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForOutput(ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: WantColumnForOutput(ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo})
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo})
  id: WantColumnForOutput(System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo})
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForOutput(List<ArchiveColumnInfo>)
  nameWithType: ExtensibleColumnsBase.WantColumnForOutput(List<ArchiveColumnInfo>)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.Collections.Generic.List<SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine whether at least one of the given columns is in the list\nof currently desired columns\n"
  syntax:
    content: protected bool WantColumnForOutput(List<ArchiveColumnInfo> columns)
    parameters:
    - id: columns
      type: System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo}
      description: Array of column informations to check
    return:
      type: System.Boolean
      description: true if at least one of the names is in the desired column list, otherwise false
    content.vb: Protected Function WantColumnForOutput(columns As List(Of ArchiveColumnInfo)) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForOutput(List(Of ArchiveColumnInfo))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput(System.Collections.Generic.List(Of SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo))
  name.vb: WantColumnForOutput(List(Of ArchiveColumnInfo))
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(System.String[])
  id: WantColumnForRestriction(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForRestriction(String[])
  nameWithType: ExtensibleColumnsBase.WantColumnForRestriction(String[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine whether at least one of the given columns is wanted as a restriction\n"
  syntax:
    content: protected bool WantColumnForRestriction(params string[] names)
    parameters:
    - id: names
      type: System.String[]
      description: List of column names
    return:
      type: System.Boolean
      description: true if at least one column is wanted as a restriction at this level
    content.vb: Protected Function WantColumnForRestriction(ParamArray names As String()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForRestriction(String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(System.String())
  name.vb: WantColumnForRestriction(String())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: WantColumnForRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForRestriction(ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.WantColumnForRestriction(ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine whether at least one of the given columns is wanted as a restriction\n"
  syntax:
    content: protected bool WantColumnForRestriction(params ArchiveColumnInfo[] columns)
    parameters:
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
    return:
      type: System.Boolean
      description: true if at least one column is wanted as a restriction at this level
    content.vb: Protected Function WantColumnForRestriction(ParamArray columns As ArchiveColumnInfo()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForRestriction(ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: WantColumnForRestriction(ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(System.String[])
  id: WantColumnForOrderBy(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForOrderBy(String[])
  nameWithType: ExtensibleColumnsBase.WantColumnForOrderBy(String[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected bool WantColumnForOrderBy(params string[] names)
    parameters:
    - id: names
      type: System.String[]
    return:
      type: System.Boolean
    content.vb: Protected Function WantColumnForOrderBy(ParamArray names As String()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForOrderBy(String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(System.String())
  name.vb: WantColumnForOrderBy(String())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy(System.String)
  id: GetColumnOrderBy(System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetColumnOrderBy(String)
  nameWithType: ExtensibleColumnsBase.GetColumnOrderBy(String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected ArchiveOrderByInfo GetColumnOrderBy(string columnName)
    parameters:
    - id: columnName
      type: System.String
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    content.vb: Protected Function GetColumnOrderBy(columnName As String) As ArchiveOrderByInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: WantColumnForOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForOrderBy(ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.WantColumnForOrderBy(ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected bool WantColumnForOrderBy(params ArchiveColumnInfo[] columns)
    parameters:
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
    return:
      type: System.Boolean
    content.vb: Protected Function WantColumnForOrderBy(ParamArray columns As ArchiveColumnInfo()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForOrderBy(ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: WantColumnForOrderBy(ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(System.String[])
  id: WantColumnForAnything(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForAnything(String[])
  nameWithType: ExtensibleColumnsBase.WantColumnForAnything(String[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected bool WantColumnForAnything(params string[] names)
    parameters:
    - id: names
      type: System.String[]
    return:
      type: System.Boolean
    content.vb: Protected Function WantColumnForAnything(ParamArray names As String()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForAnything(String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(System.String())
  name.vb: WantColumnForAnything(String())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: WantColumnForAnything(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: WantColumnForAnything(ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.WantColumnForAnything(ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected bool WantColumnForAnything(params ArchiveColumnInfo[] columns)
    parameters:
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
    return:
      type: System.Boolean
    content.vb: Protected Function WantColumnForAnything(ParamArray columns As ArchiveColumnInfo()) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything*
  nameWithType.vb: ExtensibleColumnsBase.WantColumnForAnything(ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: WantColumnForAnything(ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded
  id: IsQueryNeeded
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: IsQueryNeeded()
  nameWithType: ExtensibleColumnsBase.IsQueryNeeded()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine if the query (addition) handled by this provider is needed. This happens if either\nat least one of this providers&apos; columns has been chosen for fetch, or if at least one of\nthe known extenders is itself needed, or if any column is needed for a restriction.\n"
  remarks: "\nThe result of the check is cached in the <see cref=\"!:_isQueryChecked\"></see> and <see cref=\"!:_isQueryNeeded\"></see> \nvariables. Those are reset in <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe mechanism is not quite foolproof, since it is possible to override those methods. However, under normal conditions\nit should work.  (don&apos;t you love comments like this)\n"
  syntax:
    content: public virtual bool IsQueryNeeded()
    return:
      type: System.Boolean
      description: true if the query modifications handled by this provider whould be implemented on the query
    content.vb: Public Overridable Function IsQueryNeeded As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction
  id: IsQueryRestriction
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: IsQueryRestriction()
  nameWithType: ExtensibleColumnsBase.IsQueryRestriction()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine if the query (addition) handled by this provider is needed. This happens if either\nat least one of this providers&apos; columns has been chosen for fetch, or if at least one of\nthe known extenders is itself needed, or if any column is needed for a restriction.\n"
  syntax:
    content: public virtual bool IsQueryRestriction()
    return:
      type: System.Boolean
      description: true if the query modifications handled by this provider whould be implemented on the query
    content.vb: Public Overridable Function IsQueryRestriction As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  id: GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetLeftOuterOrInnerJoin(Equal)
  nameWithType: ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(Equal)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected JoinCompare GetLeftOuterOrInnerJoin(Equal primary)
    parameters:
    - id: primary
      type: SuperOffice.Data.SQL.Equal
    return:
      type: SuperOffice.Data.SQL.JoinCompare
    content.vb: Protected Function GetLeftOuterOrInnerJoin(primary As Equal) As JoinCompare
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  id: GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetLeftOuterOrInnerJoin(Equal, Restriction)
  nameWithType: ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(Equal, Restriction)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal, SuperOffice.Data.SQL.Restriction)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected JoinCompare GetLeftOuterOrInnerJoin(Equal primary, Restriction additional)
    parameters:
    - id: primary
      type: SuperOffice.Data.SQL.Equal
    - id: additional
      type: SuperOffice.Data.SQL.Restriction
    return:
      type: SuperOffice.Data.SQL.JoinCompare
    content.vb: Protected Function GetLeftOuterOrInnerJoin(primary As Equal, additional As Restriction) As JoinCompare
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  id: SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetLeftOuterOrInnerJoin(Equal)
  nameWithType: ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(Equal)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void SetLeftOuterOrInnerJoin(Equal primary)
    parameters:
    - id: primary
      type: SuperOffice.Data.SQL.Equal
    content.vb: Protected Sub SetLeftOuterOrInnerJoin(primary As Equal)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  id: SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal,SuperOffice.Data.SQL.Restriction)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetLeftOuterOrInnerJoin(Equal, Restriction)
  nameWithType: ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(Equal, Restriction)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin(SuperOffice.Data.SQL.Equal, SuperOffice.Data.SQL.Restriction)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void SetLeftOuterOrInnerJoin(Equal primary, Restriction additional)
    parameters:
    - id: primary
      type: SuperOffice.Data.SQL.Equal
    - id: additional
      type: SuperOffice.Data.SQL.Restriction
    content.vb: Protected Sub SetLeftOuterOrInnerJoin(primary As Equal, additional As Restriction)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect,SuperOffice.Data.SQL.FieldInfo,System.Boolean,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect,SuperOffice.Data.SQL.FieldInfo,System.Boolean,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect,SuperOffice.Data.SQL.FieldInfo,System.Boolean,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapReturnField(ArchiveSelect, FieldInfo, Boolean, String, ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.MapReturnField(ArchiveSelect, FieldInfo, Boolean, String, ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect, SuperOffice.Data.SQL.FieldInfo, System.Boolean, System.String, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the database binding and mapping information for one display column. Derived classes should call this\nmethod or one of the alternatives to take advantage of row population functionality. The given FieldInfo is\nadded to the return values collection of the given query.\n"
  syntax:
    content: protected ExtensibleColumnsBase.DbColumnBinding MapReturnField(ArchiveSelect query, FieldInfo fieldInfo, bool handledByBaseClass, string listTable, params ArchiveColumnInfo[] columns)
    parameters:
    - id: query
      type: SuperOffice.CRM.ArchiveLists.ArchiveSelect
      description: The query to be updated
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Identification of the database field desired
    - id: handledByBaseClass
      type: System.Boolean
      description: >-
        If true, population of this field in the ArchiveRow is to be handled by this base class,

        otherwise the derived class is taking responsibility for population or processing of this column
    - id: listTable
      type: System.String
      description: >-
        If the column represents a list lookup, this parameter should be an <xref href="SuperOffice.Data.Dictionary.SoTable" data-throw-if-not-resolved="false"></xref> whose

        <see cref="!:SoTable.IsMDOTable"></see> property is true. If the <see cref="!:handledByBaseClass"></see> parameter is

        true, the listTable parameter will be used to look up the name and tooltip corresponding to the

        list item index of the data column automatically during row population.
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: >-
        One or more archive column definitions. The first is the one that the data

        column (fieldInfo) is considered bound to; any further columns are used as indicators

        when deciding whether this fieldInfo should be added to the return fields. If at least one of the

        columns given here is part of the desired column list, then this fieldInfo will be added

        to the query. This can be used to indicate that a particular fieldInfo is needed by more than

        one archive display column.
    return:
      type: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding
      description: The newly creating DbColumnBinding object is returned
    content.vb: Protected Function MapReturnField(query As ArchiveSelect, fieldInfo As FieldInfo, handledByBaseClass As Boolean, listTable As String, ParamArray columns As ArchiveColumnInfo()) As ExtensibleColumnsBase.DbColumnBinding
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField*
  nameWithType.vb: ExtensibleColumnsBase.MapReturnField(ArchiveSelect, FieldInfo, Boolean, String, ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect, SuperOffice.Data.SQL.FieldInfo, System.Boolean, System.String, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: MapReturnField(ArchiveSelect, FieldInfo, Boolean, String, ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField(SuperOffice.Data.SQL.FieldInfo)
  id: MapIdField(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapIdField(FieldInfo)
  nameWithType: ExtensibleColumnsBase.MapIdField(FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDefine the database field that is the primary key field of this query. The primary key is used\nto discard any possible duplicates resulting from inconsistent data (particularly duplicated\nrank 1 rows)\n"
  syntax:
    content: protected void MapIdField(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Primary key information
    content.vb: Protected Sub MapIdField(fieldInfo As FieldInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: MapAssociateField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapAssociateField(FieldInfo, ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.MapAssociateField(FieldInfo, ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nBind a column definition to a database field as an Associate. This will result in a column of type string,\ncontaining the associate user name and an appropriate tooltip hint, by magic.\n"
  syntax:
    content: protected void MapAssociateField(FieldInfo fieldInfo, ArchiveColumnInfo column)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Identification of the database field desired
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Archive column definition to map to
    content.vb: Protected Sub MapAssociateField(fieldInfo As FieldInfo, column As ArchiveColumnInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: MapEjUserField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapEjUserField(FieldInfo, ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.MapEjUserField(FieldInfo, ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nBind a column definition to a database field as an EjUser. This will result in a column of type string,\ncontaining the ej user name and an appropriate tooltip hint, by magic.\n"
  syntax:
    content: protected void MapEjUserField(FieldInfo fieldInfo, ArchiveColumnInfo column)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Identification of the database field desired
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Archive column definition to map to
    content.vb: Protected Sub MapEjUserField(fieldInfo As FieldInfo, column As ArchiveColumnInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapSimpleReturnField(FieldInfo, ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.MapSimpleReturnField(FieldInfo, ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSimplified interface to <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect%2cSuperOffice.Data.SQL.FieldInfo%2cSystem.Boolean%2cSystem.String%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> for the following common case:\n<ul><li>The RootQuery is to be modified</li><li>The row population should be handled by this base class</li><li>This is not a list field</li></ul>\n"
  syntax:
    content: protected void MapSimpleReturnField(FieldInfo fieldInfo, params ArchiveColumnInfo[] columns)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Database field information
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: >-
        One or more columns; the first is the bound definition, additional

        column definitions will also trigger the addition of this fieldInfo to the query.
    content.vb: Protected Sub MapSimpleReturnField(fieldInfo As FieldInfo, ParamArray columns As ArchiveColumnInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField*
  nameWithType.vb: ExtensibleColumnsBase.MapSimpleReturnField(FieldInfo, ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: MapSimpleReturnField(FieldInfo, ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,System.Int32,System.Int32)
  id: MapSimpleImageField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,System.Int32,System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapSimpleImageField(FieldInfo, ArchiveColumnInfo, Int32, Int32)
  nameWithType: ExtensibleColumnsBase.MapSimpleImageField(FieldInfo, ArchiveColumnInfo, Int32, Int32)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nMap handling for a &quot;simple&quot; image field, including optional scaledown to fit given dimensions (aspect ratio is maintained)\n"
  syntax:
    content: protected void MapSimpleImageField(FieldInfo fieldInfo, ArchiveColumnInfo column, int maxWidth = 2147483647, int maxHeight = 2147483647)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Binary field with source data
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Archive column to bind to
    - id: maxWidth
      type: System.Int32
      description: Optional maximum width
    - id: maxHeight
      type: System.Int32
      description: Optional maximum height
    content.vb: Protected Sub MapSimpleImageField(fieldInfo As FieldInfo, column As ArchiveColumnInfo, maxWidth As Integer = 2147483647, maxHeight As Integer = 2147483647)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.BlobLinkType,System.Int32,System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.BlobLinkType,System.Int32,System.Int32,System.Int32)
  id: MapPictureBlob(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.BlobLinkType,System.Int32,System.Int32,System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapPictureBlob(FieldInfo, ArchiveColumnInfo, BlobLinkType, Int32, Int32, Int32)
  nameWithType: ExtensibleColumnsBase.MapPictureBlob(FieldInfo, ArchiveColumnInfo, BlobLinkType, Int32, Int32, Int32)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.BlobLinkType, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nHandle images coming from the BinaryObject table via a BinaryObjectLink record. This method will add the required joins\nto the query, then call <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField(SuperOffice.Data.SQL.FieldInfo%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo%2cSystem.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for the actual population and scaling\n"
  syntax:
    content: protected FieldInfo MapPictureBlob(FieldInfo linkField, ArchiveColumnInfo column, BlobLinkType linkType, int maxWidth = 2147483647, int maxHeight = 2147483647, int linkOwnerTableNumber = 2147483647)
    parameters:
    - id: linkField
      type: SuperOffice.Data.SQL.FieldInfo
      description: Field on parent table that the binaryobjectlink points to as source
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Archive column to bind to
    - id: linkType
      type: SuperOffice.Data.BlobLinkType
      description: Blob link type
    - id: maxWidth
      type: System.Int32
      description: Optional maximum width
    - id: maxHeight
      type: System.Int32
      description: Optional maximum height
    - id: linkOwnerTableNumber
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Function MapPictureBlob(linkField As FieldInfo, column As ArchiveColumnInfo, linkType As BlobLinkType, maxWidth As Integer = 2147483647, maxHeight As Integer = 2147483647, linkOwnerTableNumber As Integer = 2147483647) As FieldInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: MapSimpleCustomField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapSimpleCustomField(FieldInfo, ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.MapSimpleCustomField(FieldInfo, ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSimplified interface to <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect%2cSuperOffice.Data.SQL.FieldInfo%2cSystem.Boolean%2cSystem.String%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> for the following common case:\n<ul><li>The RootQuery is to be modified</li><li>The row population should be handled by this base class</li><li>This is not a list field</li></ul>\n"
  syntax:
    content: protected void MapSimpleCustomField(FieldInfo fieldInfo, params ArchiveColumnInfo[] columns)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Database field information
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: >-
        One or more columns; the first is the bound definition, additional

        column definitions will also trigger the addition of this fieldInfo to the query.
    content.vb: Protected Sub MapSimpleCustomField(fieldInfo As FieldInfo, ParamArray columns As ArchiveColumnInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField*
  nameWithType.vb: ExtensibleColumnsBase.MapSimpleCustomField(FieldInfo, ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: MapSimpleCustomField(FieldInfo, ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField(SuperOffice.Data.SQL.FieldInfo,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField(SuperOffice.Data.SQL.FieldInfo,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: MapSimpleListReturnField(SuperOffice.Data.SQL.FieldInfo,System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapSimpleListReturnField(FieldInfo, String, ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.MapSimpleListReturnField(FieldInfo, String, ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField(SuperOffice.Data.SQL.FieldInfo, System.String, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSimplified interface to <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect%2cSuperOffice.Data.SQL.FieldInfo%2cSystem.Boolean%2cSystem.String%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> for the following common case:\n<ul><li>The RootQuery is to be modified</li><li>The row population should be handled by this base class</li><li>This IS a list field</li></ul>\n"
  syntax:
    content: protected void MapSimpleListReturnField(FieldInfo fieldInfo, string listTable, params ArchiveColumnInfo[] columns)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: Database field information
    - id: listTable
      type: System.String
      description: Definition of the target list table to be used for lookup during row population
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: >-
        One or more columns; the first is the bound definition, additional

        column definitions will also trigger the addition of this fieldInfo to the query.
    content.vb: Protected Sub MapSimpleListReturnField(fieldInfo As FieldInfo, listTable As String, ParamArray columns As ArchiveColumnInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField*
  nameWithType.vb: ExtensibleColumnsBase.MapSimpleListReturnField(FieldInfo, String, ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField(SuperOffice.Data.SQL.FieldInfo, System.String, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: MapSimpleListReturnField(FieldInfo, String, ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: MapOrderByField(SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: MapOrderByField(FieldInfo, ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.MapOrderByField(FieldInfo, ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField(SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void MapOrderByField(FieldInfo orderByField, ArchiveColumnInfo column)
    parameters:
    - id: orderByField
      type: SuperOffice.Data.SQL.FieldInfo
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    content.vb: Protected Sub MapOrderByField(orderByField As FieldInfo, column As ArchiveColumnInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField(System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField(System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  id: ActivateAsLinkField(System.String,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ActivateAsLinkField(String, ArchiveColumnInfo[])
  nameWithType: ExtensibleColumnsBase.ActivateAsLinkField(String, ArchiveColumnInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField(System.String, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nActivate one or more columns as links, and set the link hint base. Columns must previously have been mapped\nusing <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField(SuperOffice.Data.SQL.FieldInfo%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> or one of the related methods.\n"
  example:
  - >
    Assume there are columns called _colName and _colId:

    <pre><code>MapSimpleReturnField( _ourPersonTable.FirstName, _colName );

    MapSimpleReturnField( _ourPersonTable.PersonId, _colId );

    ActivateAsLinkField( &quot;nav=person&quot;, _colName, _colId );</code></pre>
  syntax:
    content: protected void ActivateAsLinkField(string linkBase, params ArchiveColumnInfo[] columns)
    parameters:
    - id: linkBase
      type: System.String
      description: The base of the link; the current id field and its value will be added automatically
    - id: columns
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
      description: The column(s) to be activated
    content.vb: Protected Sub ActivateAsLinkField(linkBase As String, ParamArray columns As ArchiveColumnInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField*
  nameWithType.vb: ExtensibleColumnsBase.ActivateAsLinkField(String, ArchiveColumnInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField(System.String, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo())
  name.vb: ActivateAsLinkField(String, ArchiveColumnInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn(System.String)
  id: HasAvailableColumn(System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: HasAvailableColumn(String)
  nameWithType: ExtensibleColumnsBase.HasAvailableColumn(String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine whether the given column (by programmatic name) is in the current\navailable columns list of THIS provider, excluding any extenders\n"
  syntax:
    content: protected bool HasAvailableColumn(string name)
    parameters:
    - id: name
      type: System.String
      description: Programmatic column name to check
    return:
      type: System.Boolean
      description: true if the name matches an available column
    content.vb: Protected Function HasAvailableColumn(name As String) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider``1(``0,System.String,System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider``1(``0,System.String,System.String)
  id: AddAndInitializeExtensionProvider``1(``0,System.String,System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType, String, String)
  nameWithType: ExtensibleColumnsBase.AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType, String, String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nMethod for adding an extender that also sets prefixes. The parent is set to be the current class.\n"
  remarks: "\nThe return type is the same type as the incoming parameter, making it possible to assign the\nresult to a strongly typed variable.\n<p></p>\nThe order of calls to this method influences column order in the GUI: columns are displayed\nin the same order that their extenders are registered using this method.\n"
  syntax:
    content: >-
      protected ExtenderType AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType extender, string namePrefix, string displayNamePrefix)
          where ExtenderType : IArchiveExtender
    parameters:
    - id: extender
      type: '{ExtenderType}'
      description: Extender to be added
    - id: namePrefix
      type: System.String
      description: Name prefix to set, can be null/empty
    - id: displayNamePrefix
      type: System.String
      description: Display name prefix to set, can be null/empty
    typeParameters:
    - id: ExtenderType
    return:
      type: '{ExtenderType}'
      description: The added extender
    content.vb: Protected Function AddAndInitializeExtensionProvider(Of ExtenderType As IArchiveExtender)(extender As ExtenderType, namePrefix As String, displayNamePrefix As String) As ExtenderType
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider*
  nameWithType.vb: ExtensibleColumnsBase.AddAndInitializeExtensionProvider(Of ExtenderType)(ExtenderType, String, String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider(Of ExtenderType)(ExtenderType, System.String, System.String)
  name.vb: AddAndInitializeExtensionProvider(Of ExtenderType)(ExtenderType, String, String)
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider``1(``0)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider``1(``0)
  id: AddAndInitializeExtensionProvider``1(``0)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType)
  nameWithType: ExtensibleColumnsBase.AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nMethod for adding an extender. The parent is set to be the current class.\n"
  remarks: "\nThe return type is the same type as the incoming parameter, making it possible to assign the\nresult to a strongly typed variable.\n<p></p>\nThe order of calls to this method influences column order in the GUI: columns are displayed\nin the same order that their extenders are registered using this method.\n"
  syntax:
    content: >-
      protected ExtenderType AddAndInitializeExtensionProvider<ExtenderType>(ExtenderType extender)
          where ExtenderType : IArchiveExtender
    parameters:
    - id: extender
      type: '{ExtenderType}'
      description: Extender to be added
    typeParameters:
    - id: ExtenderType
    return:
      type: '{ExtenderType}'
      description: The added extender
    content.vb: Protected Function AddAndInitializeExtensionProvider(Of ExtenderType As IArchiveExtender)(extender As ExtenderType) As ExtenderType
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider*
  nameWithType.vb: ExtensibleColumnsBase.AddAndInitializeExtensionProvider(Of ExtenderType)(ExtenderType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider(Of ExtenderType)(ExtenderType)
  name.vb: AddAndInitializeExtensionProvider(Of ExtenderType)(ExtenderType)
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction(System.String)
  id: HasRestriction(System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: HasRestriction(String)
  nameWithType: ExtensibleColumnsBase.HasRestriction(String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nDetermine if a certain restriction has been specified.\n"
  syntax:
    content: protected bool HasRestriction(string restrictionName)
    parameters:
    - id: restrictionName
      type: System.String
      description: Name of restriction to look for, case-insensitive
    return:
      type: System.Boolean
      description: true if the given restriction has been specified
    content.vb: Protected Function HasRestriction(restrictionName As String) As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(System.String)
  id: ExtractRestrictions(System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ExtractRestrictions(String)
  nameWithType: ExtensibleColumnsBase.ExtractRestrictions(String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nFind and return the given restriction, or null if it does not exist\n"
  syntax:
    content: protected List<ArchiveRestrictionInfo> ExtractRestrictions(string restrictionName)
    parameters:
    - id: restrictionName
      type: System.String
      description: Name of restriction, case-insensitive
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo}
      description: Restriction, or null
    content.vb: Protected Function ExtractRestrictions(restrictionName As String) As List(Of ArchiveRestrictionInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: ExtractRestrictions(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ExtractRestrictions(ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.ExtractRestrictions(ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nFind and return the given restriction, or null if it does not exist\n"
  syntax:
    content: protected List<ArchiveRestrictionInfo> ExtractRestrictions(ArchiveColumnInfo restrictionColumn)
    parameters:
    - id: restrictionColumn
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Name of restriction, case-insensitive
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo}
      description: Restriction, or null
    content.vb: Protected Function ExtractRestrictions(restrictionColumn As ArchiveColumnInfo) As List(Of ArchiveRestrictionInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(System.String)
  id: ExtractRestriction(System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ExtractRestriction(String)
  nameWithType: ExtensibleColumnsBase.ExtractRestriction(String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nFind and return the given restriction, or null if it does not exist\n"
  syntax:
    content: protected ArchiveRestrictionInfo ExtractRestriction(string restrictionName)
    parameters:
    - id: restrictionName
      type: System.String
      description: Name of restriction, case-insensitive
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
      description: Restriction, or null
    content.vb: Protected Function ExtractRestriction(restrictionName As String) As ArchiveRestrictionInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: ExtractRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ExtractRestriction(ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.ExtractRestriction(ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nFind and return the given restriction, or null if it does not exist\n"
  syntax:
    content: protected ArchiveRestrictionInfo ExtractRestriction(ArchiveColumnInfo restrictionColumn)
    parameters:
    - id: restrictionColumn
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Name of restriction, case-insensitive
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
      description: Restriction, or null
    content.vb: Protected Function ExtractRestriction(restrictionColumn As ArchiveColumnInfo) As ArchiveRestrictionInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions
  id: ProcessRestrictions
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ProcessRestrictions()
  nameWithType: ExtensibleColumnsBase.ProcessRestrictions()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nProcess restrictions during query processing. This is where the abstract syntax of the \n<xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo\" data-throw-if-not-resolved=\"false\"></xref> objects is converted into <xref href=\"SuperOffice.Data.SQL.Restriction\" data-throw-if-not-resolved=\"false\"></xref>\nclauses, and string-formatted parameters are converted into their proper form.\n"
  syntax:
    content: protected virtual bool ProcessRestrictions()
    return:
      type: System.Boolean
      description: true if at least one of the currently set restrictions matched an available and bound column and was processed
    content.vb: Protected Overridable Function ProcessRestrictions As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy
  id: ProcessOrderBy
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ProcessOrderBy()
  nameWithType: ExtensibleColumnsBase.ProcessOrderBy()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nProcess order by information during query modification. For each order by column that\nmatches a known database binding, add the orderby clause to the query. If the column has\na separate fieldinfo specified for its orderby (as specified by <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField(SuperOffice.Data.SQL.FieldInfo%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)\" data-throw-if-not-resolved=\"false\"></xref>,\nthis field is used, otherwise the display field is used).\n"
  syntax:
    content: protected virtual void ProcessOrderBy()
    content.vb: Protected Overridable Sub ProcessOrderBy
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  id: PopulateSimpleFields(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: PopulateSimpleFields(SoDataReader, ArchiveRow)
  nameWithType: ExtensibleColumnsBase.PopulateSimpleFields(SoDataReader, ArchiveRow)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nHandle the population of an ArchiveRow with fields that are known to this base class and\nhave been bound with a flag declaring that they should be handled by the base class.\n"
  remarks: "\nPopulation includes conversion from typed data values into strings via InvariantCulture\nformat providers, lookup of list items, and generation of standard tooltip hints. List\nitem lookup is based on the <xref href=\"SuperOffice.CRM.Cache.MDOListTableCache\" data-throw-if-not-resolved=\"false\"></xref>. Tooltip hints can be overwritten\nby the derived class if desired.\n<p></p>\nColumn binding to data must be done using the <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField(SuperOffice.CRM.ArchiveLists.ArchiveSelect%2cSuperOffice.Data.SQL.FieldInfo%2cSystem.Boolean%2cSystem.String%2cSuperOffice.CRM.ArchiveLists.ArchiveColumnInfo%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> method or one of\nits alternatives.\n"
  syntax:
    content: protected void PopulateSimpleFields(SoDataReader reader, ArchiveRow row)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: Data reader with the current row from the database
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
      description: Archive data row being built
    content.vb: Protected Sub PopulateSimpleFields(reader As SoDataReader, row As ArchiveRow)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue(System.String,SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveColumnData)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue(System.String,SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveColumnData)
  id: CalculateOrderbyValue(System.String,SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveColumnData)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: CalculateOrderbyValue(String, SoDataReader, ArchiveColumnData)
  nameWithType: ExtensibleColumnsBase.CalculateOrderbyValue(String, SoDataReader, ArchiveColumnData)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue(System.String, SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveColumnData)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public ArchiveColumnData CalculateOrderbyValue(string name, SoDataReader reader, ArchiveColumnData columnData)
    parameters:
    - id: name
      type: System.String
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: columnData
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    content.vb: Public Function CalculateOrderbyValue(name As String, reader As SoDataReader, columnData As ArchiveColumnData) As ArchiveColumnData
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,SuperOffice.Data.SQL.FieldInfo)
  id: AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddDbInfo(ArchiveColumnData, FieldInfo)
  nameWithType: ExtensibleColumnsBase.AddDbInfo(ArchiveColumnData, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public ArchiveColumnData AddDbInfo(ArchiveColumnData columnData, FieldInfo fieldInfo)
    parameters:
    - id: columnData
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    content.vb: Public Function AddDbInfo(columnData As ArchiveColumnData, fieldInfo As FieldInfo) As ArchiveColumnData
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,System.Int32)
  id: AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData,System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddDbInfo(ArchiveColumnData, Int32)
  nameWithType: ExtensibleColumnsBase.AddDbInfo(ArchiveColumnData, Int32)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo(SuperOffice.CRM.ArchiveLists.ArchiveColumnData, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public ArchiveColumnData AddDbInfo(ArchiveColumnData columnData, int dbFieldId)
    parameters:
    - id: columnData
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    - id: dbFieldId
      type: System.Int32
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    content.vb: Public Function AddDbInfo(columnData As ArchiveColumnData, dbFieldId As Integer) As ArchiveColumnData
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable
  id: ForceDisable
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ForceDisable()
  nameWithType: ExtensibleColumnsBase.ForceDisable()
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nCalling this method will force the extender to disable itself and its own extenders. Disabling\nmeans that it will return &apos;false&apos; to the IsQueryNeeded and IsQueryRestriction, and will not expect\nto be called for ModifyQuery or PopulateRowFromReader.\n"
  syntax:
    content: public void ForceDisable()
    content.vb: Public Sub ForceDisable
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData(System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData(System.Int32)
  id: GetAssociateData(System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetAssociateData(Int32)
  nameWithType: ExtensibleColumnsBase.GetAssociateData(Int32)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nConstruct a standard archive column representing an associate. The value will be the initials (user name),\nand the tooltip hint will point to the full associate.\n"
  syntax:
    content: protected ArchiveColumnData GetAssociateData(int assocId)
    parameters:
    - id: assocId
      type: System.Int32
      description: Associate id to look up
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
      description: Archive column data with display value and tooltip hint
    content.vb: Protected Function GetAssociateData(assocId As Integer) As ArchiveColumnData
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData(System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData(System.Int32)
  id: GetEjUserData(System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetEjUserData(Int32)
  nameWithType: ExtensibleColumnsBase.GetEjUserData(Int32)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected ArchiveColumnData GetEjUserData(int ejUserId)
    parameters:
    - id: ejUserId
      type: System.Int32
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
    content.vb: Protected Function GetEjUserData(ejUserId As Integer) As ArchiveColumnData
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: GetColumnIndex(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetColumnIndex(ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.GetColumnIndex(ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nRetrieve the column index (in the data reader) of the given column. This method is valid only\nafter <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields(SuperOffice.Data.SoDataReader%2cSuperOffice.CRM.ArchiveLists.ArchiveRow)\" data-throw-if-not-resolved=\"false\"></xref>has been called.\n"
  syntax:
    content: protected int GetColumnIndex(ArchiveColumnInfo column)
    parameters:
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
      description: Column to look up
    return:
      type: System.Int32
    content.vb: Protected Function GetColumnIndex(column As ArchiveColumnInfo) As Integer
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  id: GetColumnIndexFromReader(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo,System.Int32@)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetColumnIndexFromReader(SoDataReader, FieldInfo, ref Int32)
  nameWithType: ExtensibleColumnsBase.GetColumnIndexFromReader(SoDataReader, FieldInfo, ref Int32)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader(SuperOffice.Data.SoDataReader, SuperOffice.Data.SQL.FieldInfo, ref System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void GetColumnIndexFromReader(SoDataReader reader, FieldInfo info, ref int columnIndex)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: info
      type: SuperOffice.Data.SQL.FieldInfo
    - id: columnIndex
      type: System.Int32
    content.vb: Protected Sub GetColumnIndexFromReader(reader As SoDataReader, info As FieldInfo, ByRef columnIndex As Integer)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader*
  nameWithType.vb: ExtensibleColumnsBase.GetColumnIndexFromReader(SoDataReader, FieldInfo, ByRef Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader(SuperOffice.Data.SoDataReader, SuperOffice.Data.SQL.FieldInfo, ByRef System.Int32)
  name.vb: GetColumnIndexFromReader(SoDataReader, FieldInfo, ByRef Int32)
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString(System.Object,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString(System.Object,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding)
  id: ConvertDbTypeToString(System.Object,SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ConvertDbTypeToString(Object, ExtensibleColumnsBase.DbColumnBinding)
  nameWithType: ExtensibleColumnsBase.ConvertDbTypeToString(Object, ExtensibleColumnsBase.DbColumnBinding)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString(System.Object, SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nConvert a database data type into a string, using invariant culture format providers.\n"
  syntax:
    content: protected string ConvertDbTypeToString(object colValue, ExtensibleColumnsBase.DbColumnBinding bindingInfo)
    parameters:
    - id: colValue
      type: System.Object
      description: Typed column value
    - id: bindingInfo
      type: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding
    return:
      type: System.String
      description: String equivalent of incoming value
    content.vb: Protected Function ConvertDbTypeToString(colValue As Object, bindingInfo As ExtensibleColumnsBase.DbColumnBinding) As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo)
  id: GetStandardTooltipHint(SuperOffice.Data.SoDataReader,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetStandardTooltipHint(SoDataReader, FieldInfo)
  nameWithType: ExtensibleColumnsBase.GetStandardTooltipHint(SoDataReader, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint(SuperOffice.Data.SoDataReader, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGenerate the standard tooltip hint for an item. This is a reference to the primary key\nfield, as defined by a call to <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField(SuperOffice.Data.SQL.FieldInfo)\" data-throw-if-not-resolved=\"false\"></xref>. If MapIdField has not been called,\nor if the current primary key is DBNull (happens with outer joins that have no outer target),\nan empty string is returned.\n"
  syntax:
    content: protected virtual string GetStandardTooltipHint(SoDataReader reader, FieldInfo actualDataField)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: Data reader containing the current row
    - id: actualDataField
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.String
    content.vb: Protected Overridable Function GetStandardTooltipHint(reader As SoDataReader, actualDataField As FieldInfo) As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint(SuperOffice.Data.SoDataReader,System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint(SuperOffice.Data.SoDataReader,System.String)
  id: GetLinkHint(SuperOffice.Data.SoDataReader,System.String)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetLinkHint(SoDataReader, String)
  nameWithType: ExtensibleColumnsBase.GetLinkHint(SoDataReader, String)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint(SuperOffice.Data.SoDataReader, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGet the standard link hint, provided the link hint base and the id field have been set. Otherwise an empty string is returned.\n"
  syntax:
    content: protected string GetLinkHint(SoDataReader reader, string linkBase)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: data reader with the current row
    - id: linkBase
      type: System.String
    return:
      type: System.String
      description: Link hint or empty string (never null)
    content.vb: Protected Function GetLinkHint(reader As SoDataReader, linkBase As String) As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  id: SetNonZeroBoolRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SetNonZeroBoolRestriction(ArchiveColumnInfo)
  nameWithType: ExtensibleColumnsBase.SetNonZeroBoolRestriction(ArchiveColumnInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nUse this to set restriction handling for an int column that works like a bool, where any non-zero value means &apos;true&apos;\n"
  syntax:
    content: protected void SetNonZeroBoolRestriction(ArchiveColumnInfo column)
    parameters:
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    content.vb: Protected Sub SetNonZeroBoolRestriction(column As ArchiveColumnInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  id: AddUpdatedByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddUpdatedByMapping(ArchiveColumnInfo, FieldInfo, FieldInfo)
  nameWithType: ExtensibleColumnsBase.AddUpdatedByMapping(ArchiveColumnInfo, FieldInfo, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdds default handling of the updated column. \n"
  syntax:
    content: protected void AddUpdatedByMapping(ArchiveColumnInfo column, FieldInfo registeredBy, FieldInfo updatedBy)
    parameters:
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: registeredBy
      type: SuperOffice.Data.SQL.FieldInfo
    - id: updatedBy
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Sub AddUpdatedByMapping(column As ArchiveColumnInfo, registeredBy As FieldInfo, updatedBy As FieldInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo)
  id: AddRegisteredMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddRegisteredMapping(ArchiveColumnInfo, FieldInfo, ArchiveColumnInfo, FieldInfo)
  nameWithType: ExtensibleColumnsBase.AddRegisteredMapping(ArchiveColumnInfo, FieldInfo, ArchiveColumnInfo, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdd default mapping for Registered columns\n"
  syntax:
    content: protected void AddRegisteredMapping(ArchiveColumnInfo registeredByColumn, FieldInfo registeredBy, ArchiveColumnInfo registeredDateColumn, FieldInfo registeredDate)
    parameters:
    - id: registeredByColumn
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: registeredBy
      type: SuperOffice.Data.SQL.FieldInfo
    - id: registeredDateColumn
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: registeredDate
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Sub AddRegisteredMapping(registeredByColumn As ArchiveColumnInfo, registeredBy As FieldInfo, registeredDateColumn As ArchiveColumnInfo, registeredDate As FieldInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  id: AddLastUpdatedMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddLastUpdatedMapping(ArchiveColumnInfo, FieldInfo, FieldInfo)
  nameWithType: ExtensibleColumnsBase.AddLastUpdatedMapping(ArchiveColumnInfo, FieldInfo, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping(SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdds default mapping for the last updated\n"
  syntax:
    content: protected void AddLastUpdatedMapping(ArchiveColumnInfo column, FieldInfo registered, FieldInfo updated)
    parameters:
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: registered
      type: SuperOffice.Data.SQL.FieldInfo
    - id: updated
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Sub AddLastUpdatedMapping(column As ArchiveColumnInfo, registered As FieldInfo, updated As FieldInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  id: AddUpdatedBy(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddUpdatedBy(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo, FieldInfo)
  nameWithType: ExtensibleColumnsBase.AddUpdatedBy(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void AddUpdatedBy(SoDataReader reader, ArchiveRow row, ArchiveColumnInfo column, FieldInfo registered, FieldInfo updated)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: registered
      type: SuperOffice.Data.SQL.FieldInfo
    - id: updated
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Sub AddUpdatedBy(reader As SoDataReader, row As ArchiveRow, column As ArchiveColumnInfo, registered As FieldInfo, updated As FieldInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  id: AddUpdatedDate(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddUpdatedDate(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo, FieldInfo)
  nameWithType: ExtensibleColumnsBase.AddUpdatedDate(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo, FieldInfo)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo, SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: protected void AddUpdatedDate(SoDataReader reader, ArchiveRow row, ArchiveColumnInfo column, FieldInfo registered, FieldInfo updated)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: registered
      type: SuperOffice.Data.SQL.FieldInfo
    - id: updated
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Sub AddUpdatedDate(reader As SoDataReader, row As ArchiveRow, column As ArchiveColumnInfo, registered As FieldInfo, updated As FieldInfo)
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo[])
  id: AddAssociateFullName(SuperOffice.Data.SoDataReader,SuperOffice.CRM.ArchiveLists.ArchiveRow,SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo,SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: AddAssociateFullName(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo[])
  nameWithType: ExtensibleColumnsBase.AddAssociateFullName(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nAdds overlapping column with full name of first valid associate field, or empty string if no valid field could be found\n"
  syntax:
    content: protected void AddAssociateFullName(SoDataReader reader, ArchiveRow row, ArchiveColumnInfo column, params FieldInfo[] associates)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
    - id: row
      type: SuperOffice.CRM.ArchiveLists.ArchiveRow
    - id: column
      type: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    - id: associates
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: The first valid field value will be used to get full name.
    content.vb: Protected Sub AddAssociateFullName(reader As SoDataReader, row As ArchiveRow, column As ArchiveColumnInfo, ParamArray associates As FieldInfo())
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName*
  nameWithType.vb: ExtensibleColumnsBase.AddAssociateFullName(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName(SuperOffice.Data.SoDataReader, SuperOffice.CRM.ArchiveLists.ArchiveRow, SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo, SuperOffice.Data.SQL.FieldInfo())
  name.vb: AddAssociateFullName(SoDataReader, ArchiveRow, ArchiveColumnInfo, FieldInfo())
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag(SuperOffice.Data.SoDataReader)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag(SuperOffice.Data.SoDataReader)
  id: GetIdFieldTag(SuperOffice.Data.SoDataReader)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetIdFieldTag(SoDataReader)
  nameWithType: ExtensibleColumnsBase.GetIdFieldTag(SoDataReader)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag(SuperOffice.Data.SoDataReader)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nExtract the ID field value from the reader and return it as a string; or empty string if something is missing.\nThe field is tagged with its table name and the _id suffix, so the result is something like &apos;contact_id=1234&apos;.\n"
  syntax:
    content: protected string GetIdFieldTag(SoDataReader reader)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: Data reader with the current row
    return:
      type: System.String
      description: ID field table name + _id= + value as string
    content.vb: Protected Function GetIdFieldTag(reader As SoDataReader) As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  commentId: M:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  id: GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: GetArchiveColumnName(SoField)
  nameWithType: ExtensibleColumnsBase.GetArchiveColumnName(SoField)
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public string GetArchiveColumnName(SoField field)
    parameters:
    - id: field
      type: SuperOffice.Data.Dictionary.SoField
    return:
      type: System.String
    content.vb: Public Function GetArchiveColumnName(field As SoField) As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper
  id: ExtensibleHelper
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ExtensibleHelper
  nameWithType: ExtensibleColumnsBase.ExtensibleHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThe extensible helper that provides the Extensibility functionality\n"
  syntax:
    content: protected ExtensibleHelper ExtensibleHelper { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.ArchiveLists.ExtensibleHelper
    content.vb: Protected ReadOnly Property ExtensibleHelper As ExtensibleHelper
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper
  id: ColumnHelper
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ColumnHelper
  nameWithType: ExtensibleColumnsBase.ColumnHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThe column helper that keeps track of available and desired columns\n"
  syntax:
    content: protected ColumnHelper ColumnHelper { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.ArchiveLists.ColumnHelper
    content.vb: Protected ReadOnly Property ColumnHelper As ColumnHelper
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper
  id: RestrictionHelper
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: RestrictionHelper
  nameWithType: ExtensibleColumnsBase.RestrictionHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThe restriction helper that keeps track of restrictions and builds sql (via <xref href=\"SuperOffice.CRM.ArchiveLists.RestrictionOperations\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  syntax:
    content: protected RestrictionHelper RestrictionHelper { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.ArchiveLists.RestrictionHelper
    content.vb: Protected ReadOnly Property RestrictionHelper As RestrictionHelper
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent
  id: Parent
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ExtensibleColumnsBase.Parent
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nReference to the provider this class is extending (this is a base for extensible providers)\n"
  syntax:
    content: public IArchiveProviderExtensible Parent { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
    content.vb: Public ReadOnly Property Parent As IArchiveProviderExtensible
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  id: DisableSubtreeIfNoRestriction
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: DisableSubtreeIfNoRestriction
  nameWithType: ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nShould this extender and its children be disabled if there are no restrictions?\n"
  syntax:
    content: protected bool DisableSubtreeIfNoRestriction { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property DisableSubtreeIfNoRestriction As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree
  id: RestrictionSetForSubtree
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: RestrictionSetForSubtree
  nameWithType: ExtensibleColumnsBase.RestrictionSetForSubtree
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nHas a restriction been set for this extender or any of its children?\n"
  syntax:
    content: protected bool RestrictionSetForSubtree { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property RestrictionSetForSubtree As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded
  id: ForceQueryNeeded
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ForceQueryNeeded
  nameWithType: ExtensibleColumnsBase.ForceQueryNeeded
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nIf true, the query is considered &apos;needed&apos; regardless of other criteria\n"
  syntax:
    content: protected bool ForceQueryNeeded { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property ForceQueryNeeded As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction
  id: ForceRestriction
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ForceRestriction
  nameWithType: ExtensibleColumnsBase.ForceRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nIf true, the query is considered a restriction regardless of other criteria; this will cause left outer joins to become inner, and InnerModifyQuery to be called; IsQueryNeeded will also be forced to true\n"
  syntax:
    content: protected bool ForceRestriction { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property ForceRestriction As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy
  id: BlockOrderBy
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: BlockOrderBy
  nameWithType: ExtensibleColumnsBase.BlockOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nIf true, no column can be used for orderby, regardless of what the archive column info says. During merging\nof the available columns, the CanorderBy attribute will be turned OFF for each column.\n"
  syntax:
    content: protected bool BlockOrderBy { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property BlockOrderBy As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField
  id: IdField
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: IdField
  nameWithType: ExtensibleColumnsBase.IdField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGet the field that represents the ID (primary key) of the query. The SET method should only be called\nif you really need to change the ID field late in the processing; usually you should call the\n<xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField(SuperOffice.Data.SQL.FieldInfo)\" data-throw-if-not-resolved=\"false\"></xref> method from <see cref=\"!:ModifyQuery\"></see>.\n"
  syntax:
    content: public FieldInfo IdField { get; protected set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public Property IdField As FieldInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins
  id: LastSubExtenderWins
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: LastSubExtenderWins
  nameWithType: ExtensibleColumnsBase.LastSubExtenderWins
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nWhen using subextenders, normally the first one to have a value should win. Setting &apos;true&apos; here will invert that behaviour,\nper extender, not per subextender (so person can win over contact, even if contact\nis evaluated first)\n"
  syntax:
    content: protected bool LastSubExtenderWins { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property LastSubExtenderWins As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey
  id: ParentPrimaryKey
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: ParentPrimaryKey
  nameWithType: ExtensibleColumnsBase.ParentPrimaryKey
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThe primary key field of the table that is the &quot;logical parent entity&quot; of the current table, if\nthe concept is meaningful. It is used for things like the text table, which might represent a\ncontact paperclip, an appointment text or something else; in which case it would be e.g., contact.contact_id\nor appointment.appointment_id.\n<p></p>\nThe <xref href=\"SuperOffice.CRM.ArchiveLists.ArchiveColumnData.__dbParentPrimaryKey\" data-throw-if-not-resolved=\"false\"></xref> is populated from this.\n"
  syntax:
    content: public FieldInfo ParentPrimaryKey { get; protected set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public Property ParentPrimaryKey As FieldInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId
  id: QuoteAlternativeId
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: QuoteAlternativeId
  nameWithType: ExtensibleColumnsBase.QuoteAlternativeId
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nExtenders that use ERP Connector Lists - these have string keys instead of longid&apos;s - have to provide a FieldInfo\nthat identifies a QuoteAlternativeId or a <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId\" data-throw-if-not-resolved=\"false\"></xref>. One of these is required by such lists to dispatch correctly to the ERP Connector\nthat contains the list provider. If you need joins to obtain it, then that&apos;s your responsibility :-).\n"
  syntax:
    content: protected FieldInfo QuoteAlternativeId { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Property QuoteAlternativeId As FieldInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId
  id: SaleId
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: SaleId
  nameWithType: ExtensibleColumnsBase.SaleId
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nExtenders that use ERP Connector Lists - these have string keys instead of longid&apos;s - have to provide a FieldInfo\nthat identifies a SaleId or a <xref href=\"SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId\" data-throw-if-not-resolved=\"false\"></xref>. One of these is required by such lists to dispatch correctly to the ERP Connector\nthat contains the list provider. If you need joins to obtain it, then that&apos;s your responsibility :-).\n"
  syntax:
    content: protected FieldInfo SaleId { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Protected Property SaleId As FieldInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix
  id: NamePrefix
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: NamePrefix
  nameWithType: ExtensibleColumnsBase.NamePrefix
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGet the current name prefix; this is a facade for <xref href=\"SuperOffice.CRM.ArchiveLists.ColumnHelper.NamePrefix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public string NamePrefix { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property NamePrefix As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix
  id: DisplayNamePrefix
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: DisplayNamePrefix
  nameWithType: ExtensibleColumnsBase.DisplayNamePrefix
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGet the current display name prefix; this is a facade for <xref href=\"SuperOffice.CRM.ArchiveLists.ColumnHelper.DisplayNamePrefix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public string DisplayNamePrefix { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayNamePrefix As String
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery
  id: RootQuery
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: RootQuery
  nameWithType: ExtensibleColumnsBase.RootQuery
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nReturn the Root query by referring to the parent provider that this class is extending. A derived class\nthat is NOT an Extender should override this property and return its own query.\n"
  syntax:
    content: public virtual ArchiveSelect RootQuery { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveSelect
    content.vb: Public Overridable ReadOnly Property RootQuery As ArchiveSelect
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.RootQuery
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots
  id: OrderBySlots
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: OrderBySlots
  nameWithType: ExtensibleColumnsBase.OrderBySlots
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nReturn the OrderBySlots maintained by the parent query provider\n"
  syntax:
    content: public virtual OrderByStorage OrderBySlots { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.ArchiveLists.OrderByStorage
    content.vb: Public Overridable ReadOnly Property OrderBySlots As OrderByStorage
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.OrderBySlots
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend
  id: TableToExtend
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: TableToExtend
  nameWithType: ExtensibleColumnsBase.TableToExtend
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nReturn the table to extend, as defined by THIS extender class.\n"
  syntax:
    content: public abstract TableInfo TableToExtend { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.TableInfo
    content.vb: Public MustOverride ReadOnly Property TableToExtend As TableInfo
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend*
  implements:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.TableToExtend
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue
  id: PopulateDisplayValue
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: PopulateDisplayValue
  nameWithType: ExtensibleColumnsBase.PopulateDisplayValue
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public bool PopulateDisplayValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property PopulateDisplayValue As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint
  id: PopulateTooltipHint
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: PopulateTooltipHint
  nameWithType: ExtensibleColumnsBase.PopulateTooltipHint
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public bool PopulateTooltipHint { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property PopulateTooltipHint As Boolean
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML
  commentId: P:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML
  id: DebugXML
  parent: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
  langs:
  - csharp
  - vb
  name: DebugXML
  nameWithType: ExtensibleColumnsBase.DebugXML
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public XmlDocument DebugXML { get; }
    parameters: []
    return:
      type: System.Xml.XmlDocument
    content.vb: Public ReadOnly Property DebugXML As XmlDocument
  overload: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.ArchiveLists
  commentId: N:SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: SuperOffice.CRM.ArchiveLists
  nameWithType: SuperOffice.CRM.ArchiveLists
  fullName: SuperOffice.CRM.ArchiveLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  commentId: T:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: IArchiveProviderHasColumns
  nameWithType: IArchiveProviderHasColumns
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  commentId: T:SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: IArchiveProviderExtensible
  nameWithType: IArchiveProviderExtensible
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping
  commentId: T:SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: IArchiveProviderQueryMapping
  nameWithType: IArchiveProviderQueryMapping
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ExtensibleColumnsBase, To>()
  nameWithType: EnumUtil.MapEnums<ExtensibleColumnsBase, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ExtensibleColumnsBase, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To)()
  name.vb: MapEnums(Of ExtensibleColumnsBase, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ExtensibleColumnsBase, To>
    nameWithType: EnumUtil.MapEnums<ExtensibleColumnsBase, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ExtensibleColumnsBase, To)
    nameWithType: EnumUtil.MapEnums(Of ExtensibleColumnsBase, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ExtensibleColumnsBase, To>()
  nameWithType: Converters.MapEnums<ExtensibleColumnsBase, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To>()
  nameWithType.vb: Converters.MapEnums(Of ExtensibleColumnsBase, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To)()
  name.vb: MapEnums(Of ExtensibleColumnsBase, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ExtensibleColumnsBase, To>
    nameWithType: Converters.MapEnums<ExtensibleColumnsBase, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ExtensibleColumnsBase, To)
    nameWithType: Converters.MapEnums(Of ExtensibleColumnsBase, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.Collections.Generic.Dictionary{System.String,SuperOffice.Data.SQL.FieldInfo}
  commentId: T:System.Collections.Generic.Dictionary{System.String,SuperOffice.Data.SQL.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, FieldInfo>
  nameWithType: Dictionary<String, FieldInfo>
  fullName: System.Collections.Generic.Dictionary<System.String, SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: Dictionary(Of String, FieldInfo)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SuperOffice.Data.SQL.FieldInfo)
  name.vb: Dictionary(Of String, FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader
  isExternal: true
  name: InnerPopulateRowFromReader
  nameWithType: ExtensibleColumnsBase.InnerPopulateRowFromReader
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.InnerPopulateRowFromReader
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: SuperOffice.CRM.ArchiveLists.ArchiveRow
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveRow
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveRow
  nameWithType: ArchiveRow
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveRow
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.#ctor*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.#ctor
  isExternal: true
  name: ExtensibleColumnsBase
  nameWithType: ExtensibleColumnsBase.ExtensibleColumnsBase
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleColumnsBase
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent
  isExternal: true
  name: SetParent
  nameWithType: ExtensibleColumnsBase.SetParent
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetParent
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn
  isExternal: true
  name: AddAvailableColumn
  nameWithType: ExtensibleColumnsBase.AddAvailableColumn
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAvailableColumn
- uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
  isExternal: true
  name: ArchiveColumnInfo[]
  nameWithType: ArchiveColumnInfo[]
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo[]
  nameWithType.vb: ArchiveColumnInfo()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo()
  name.vb: ArchiveColumnInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    name: ArchiveColumnInfo
    nameWithType: ArchiveColumnInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    name: ArchiveColumnInfo
    nameWithType: ArchiveColumnInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns
  isExternal: true
  name: GetAvailableColumns
  nameWithType: ExtensibleColumnsBase.GetAvailableColumns
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAvailableColumns
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  isExternal: true
  name: GetAvailableColumns()
  nameWithType: IArchiveProviderHasColumns.GetAvailableColumns()
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
    name: GetAvailableColumns
    nameWithType: IArchiveProviderHasColumns.GetAvailableColumns
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
    name: GetAvailableColumns
    nameWithType: IArchiveProviderHasColumns.GetAvailableColumns
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.GetAvailableColumns
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ArchiveColumnInfo>
  nameWithType: List<ArchiveColumnInfo>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo>
  nameWithType.vb: List(Of ArchiveColumnInfo)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo)
  name.vb: List(Of ArchiveColumnInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    name: ArchiveColumnInfo
    nameWithType: ArchiveColumnInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    name: ArchiveColumnInfo
    nameWithType: ArchiveColumnInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns
  isExternal: true
  name: SetDesiredColumns
  nameWithType: ExtensibleColumnsBase.SetDesiredColumns
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetDesiredColumns
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  isExternal: true
  name: SetDesiredColumns(String[])
  nameWithType: IArchiveProviderHasColumns.SetDesiredColumns(String[])
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String[])
  nameWithType.vb: IArchiveProviderHasColumns.SetDesiredColumns(String())
  fullName.vb: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String())
  name.vb: SetDesiredColumns(String())
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String[])
    name: SetDesiredColumns
    nameWithType: IArchiveProviderHasColumns.SetDesiredColumns
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns(System.String[])
    name: SetDesiredColumns
    nameWithType: IArchiveProviderHasColumns.SetDesiredColumns
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetDesiredColumns
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy
  isExternal: true
  name: SetOrderBy
  nameWithType: ExtensibleColumnsBase.SetOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderBy
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  isExternal: true
  name: SetOrderBy(ArchiveOrderByInfo[])
  nameWithType: IArchiveProviderHasColumns.SetOrderBy(ArchiveOrderByInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
  nameWithType.vb: IArchiveProviderHasColumns.SetOrderBy(ArchiveOrderByInfo())
  fullName.vb: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo())
  name.vb: SetOrderBy(ArchiveOrderByInfo())
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
    name: SetOrderBy
    nameWithType: IArchiveProviderHasColumns.SetOrderBy
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    name: ArchiveOrderByInfo
    nameWithType: ArchiveOrderByInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy(SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[])
    name: SetOrderBy
    nameWithType: IArchiveProviderHasColumns.SetOrderBy
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetOrderBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    name: ArchiveOrderByInfo
    nameWithType: ArchiveOrderByInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
  isExternal: true
  name: ArchiveOrderByInfo[]
  nameWithType: ArchiveOrderByInfo[]
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo[]
  nameWithType.vb: ArchiveOrderByInfo()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo()
  name.vb: ArchiveOrderByInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    name: ArchiveOrderByInfo
    nameWithType: ArchiveOrderByInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    name: ArchiveOrderByInfo
    nameWithType: ArchiveOrderByInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping
  isExternal: true
  name: SetOrderByMapping
  nameWithType: ExtensibleColumnsBase.SetOrderByMapping
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetOrderByMapping
- uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveColumnInfo
  nameWithType: ArchiveColumnInfo
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnInfo
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes
  isExternal: true
  name: SetPrefixes
  nameWithType: ExtensibleColumnsBase.SetPrefixes
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetPrefixes
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes
  isExternal: true
  name: SetLocalAbsolutePrefixes
  nameWithType: ExtensibleColumnsBase.SetLocalAbsolutePrefixes
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLocalAbsolutePrefixes
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint
  isExternal: true
  name: SetIconHint
  nameWithType: ExtensibleColumnsBase.SetIconHint
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetIconHint
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction
  isExternal: true
  name: SetRestriction
  nameWithType: ExtensibleColumnsBase.SetRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetRestriction
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns
  isExternal: true
  name: SetRestriction(ArchiveRestrictionInfo[])
  nameWithType: IArchiveProviderHasColumns.SetRestriction(ArchiveRestrictionInfo[])
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
  nameWithType.vb: IArchiveProviderHasColumns.SetRestriction(ArchiveRestrictionInfo())
  fullName.vb: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo())
  name.vb: SetRestriction(ArchiveRestrictionInfo())
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
    name: SetRestriction
    nameWithType: IArchiveProviderHasColumns.SetRestriction
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction(SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[])
    name: SetRestriction
    nameWithType: IArchiveProviderHasColumns.SetRestriction
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasColumns.SetRestriction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
  isExternal: true
  name: ArchiveRestrictionInfo[]
  nameWithType: ArchiveRestrictionInfo[]
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo[]
  nameWithType.vb: ArchiveRestrictionInfo()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo()
  name.vb: ArchiveRestrictionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction
  isExternal: true
  name: AddLocalRestriction
  nameWithType: ExtensibleColumnsBase.AddLocalRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLocalRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider
  isExternal: true
  name: AddExtensionProvider
  nameWithType: ExtensibleColumnsBase.AddExtensionProvider
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddExtensionProvider
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  isExternal: true
  name: AddExtensionProvider(IArchiveExtender)
  nameWithType: IArchiveProviderExtensible.AddExtensionProvider(IArchiveExtender)
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
    name: AddExtensionProvider
    nameWithType: IArchiveProviderExtensible.AddExtensionProvider
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    name: IArchiveExtender
    nameWithType: IArchiveExtender
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider(SuperOffice.CRM.ArchiveLists.IArchiveExtender)
    name: AddExtensionProvider
    nameWithType: IArchiveProviderExtensible.AddExtensionProvider
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.AddExtensionProvider
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    name: IArchiveExtender
    nameWithType: IArchiveExtender
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
  commentId: T:SuperOffice.CRM.ArchiveLists.IArchiveExtender
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: IArchiveExtender
  nameWithType: IArchiveExtender
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders
  isExternal: true
  name: GetExtensionProviders
  nameWithType: ExtensibleColumnsBase.GetExtensionProviders
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetExtensionProviders
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  isExternal: true
  name: GetExtensionProviders()
  nameWithType: IArchiveProviderExtensible.GetExtensionProviders()
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
    name: GetExtensionProviders
    nameWithType: IArchiveProviderExtensible.GetExtensionProviders
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
    name: GetExtensionProviders
    nameWithType: IArchiveProviderExtensible.GetExtensionProviders
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.GetExtensionProviders
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IArchiveExtender>
  nameWithType: IEnumerable<IArchiveExtender>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.ArchiveLists.IArchiveExtender>
  nameWithType.vb: IEnumerable(Of IArchiveExtender)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  name.vb: IEnumerable(Of IArchiveExtender)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    name: IArchiveExtender
    nameWithType: IArchiveExtender
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    name: IArchiveExtender
    nameWithType: IArchiveExtender
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders
  isExternal: true
  name: GetTableInfosFromExtensionProviders
  nameWithType: ExtensibleColumnsBase.GetTableInfosFromExtensionProviders
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetTableInfosFromExtensionProviders
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.TableInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TableInfo>
  nameWithType: IEnumerable<TableInfo>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.TableInfo>
  nameWithType.vb: IEnumerable(Of TableInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.TableInfo)
  name.vb: IEnumerable(Of TableInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader
  isExternal: true
  name: PopulateRowFromReader
  nameWithType: ExtensibleColumnsBase.PopulateRowFromReader
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateRowFromReader
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults
  isExternal: true
  name: SuppressTableResults
  nameWithType: ExtensibleColumnsBase.SuppressTableResults
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressTableResults
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults
  isExternal: true
  name: SuppressDeepTableResults
  nameWithType: ExtensibleColumnsBase.SuppressDeepTableResults
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SuppressDeepTableResults
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride
  isExternal: true
  name: AddColumnNameOverride
  nameWithType: ExtensibleColumnsBase.AddColumnNameOverride
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddColumnNameOverride
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides
  isExternal: true
  name: ApplyColumnNameOverrides
  nameWithType: ExtensibleColumnsBase.ApplyColumnNameOverrides
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ApplyColumnNameOverrides
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping
  isExternal: true
  name: AddSubExtenderMapping
  nameWithType: ExtensibleColumnsBase.AddSubExtenderMapping
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddSubExtenderMapping
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[]
  isExternal: true
  name: ExtensibleColumnsBase[]
  nameWithType: ExtensibleColumnsBase[]
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase[]
  nameWithType.vb: ExtensibleColumnsBase()
  fullName.vb: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase()
  name.vb: ExtensibleColumnsBase()
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
    name: ExtensibleColumnsBase
    nameWithType: ExtensibleColumnsBase
    fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
    name: ExtensibleColumnsBase
    nameWithType: ExtensibleColumnsBase
    fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput
  isExternal: true
  name: WantColumnForOutput
  nameWithType: ExtensibleColumnsBase.WantColumnForOutput
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOutput
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction
  isExternal: true
  name: WantColumnForRestriction
  nameWithType: ExtensibleColumnsBase.WantColumnForRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy
  isExternal: true
  name: WantColumnForOrderBy
  nameWithType: ExtensibleColumnsBase.WantColumnForOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForOrderBy
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy
  isExternal: true
  name: GetColumnOrderBy
  nameWithType: ExtensibleColumnsBase.GetColumnOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnOrderBy
- uid: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveOrderByInfo
  nameWithType: ArchiveOrderByInfo
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveOrderByInfo
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything
  isExternal: true
  name: WantColumnForAnything
  nameWithType: ExtensibleColumnsBase.WantColumnForAnything
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.WantColumnForAnything
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded
  isExternal: true
  name: IsQueryNeeded
  nameWithType: ExtensibleColumnsBase.IsQueryNeeded
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryNeeded
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction
  isExternal: true
  name: IsQueryRestriction
  nameWithType: ExtensibleColumnsBase.IsQueryRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IsQueryRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin
  isExternal: true
  name: GetLeftOuterOrInnerJoin
  nameWithType: ExtensibleColumnsBase.GetLeftOuterOrInnerJoin
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLeftOuterOrInnerJoin
- uid: SuperOffice.Data.SQL.Equal
  commentId: T:SuperOffice.Data.SQL.Equal
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Equal
  nameWithType: Equal
  fullName: SuperOffice.Data.SQL.Equal
- uid: SuperOffice.Data.SQL.JoinCompare
  commentId: T:SuperOffice.Data.SQL.JoinCompare
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: JoinCompare
  nameWithType: JoinCompare
  fullName: SuperOffice.Data.SQL.JoinCompare
- uid: SuperOffice.Data.SQL.Restriction
  commentId: T:SuperOffice.Data.SQL.Restriction
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Restriction
  nameWithType: Restriction
  fullName: SuperOffice.Data.SQL.Restriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin
  isExternal: true
  name: SetLeftOuterOrInnerJoin
  nameWithType: ExtensibleColumnsBase.SetLeftOuterOrInnerJoin
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetLeftOuterOrInnerJoin
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField
  isExternal: true
  name: MapReturnField
  nameWithType: ExtensibleColumnsBase.MapReturnField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapReturnField
- uid: SuperOffice.CRM.ArchiveLists.ArchiveSelect
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveSelect
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveSelect
  nameWithType: ArchiveSelect
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveSelect
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding
  commentId: T:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ExtensibleColumnsBase.DbColumnBinding
  nameWithType: ExtensibleColumnsBase.DbColumnBinding
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DbColumnBinding
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField
  isExternal: true
  name: MapIdField
  nameWithType: ExtensibleColumnsBase.MapIdField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapIdField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField
  isExternal: true
  name: MapAssociateField
  nameWithType: ExtensibleColumnsBase.MapAssociateField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapAssociateField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField
  isExternal: true
  name: MapEjUserField
  nameWithType: ExtensibleColumnsBase.MapEjUserField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapEjUserField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField
  isExternal: true
  name: MapSimpleReturnField
  nameWithType: ExtensibleColumnsBase.MapSimpleReturnField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleReturnField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField
  isExternal: true
  name: MapSimpleImageField
  nameWithType: ExtensibleColumnsBase.MapSimpleImageField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleImageField
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob
  isExternal: true
  name: MapPictureBlob
  nameWithType: ExtensibleColumnsBase.MapPictureBlob
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapPictureBlob
- uid: SuperOffice.Data.BlobLinkType
  commentId: T:SuperOffice.Data.BlobLinkType
  parent: SuperOffice.Data
  isExternal: true
  name: BlobLinkType
  nameWithType: BlobLinkType
  fullName: SuperOffice.Data.BlobLinkType
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField
  isExternal: true
  name: MapSimpleCustomField
  nameWithType: ExtensibleColumnsBase.MapSimpleCustomField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleCustomField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField
  isExternal: true
  name: MapSimpleListReturnField
  nameWithType: ExtensibleColumnsBase.MapSimpleListReturnField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapSimpleListReturnField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField
  isExternal: true
  name: MapOrderByField
  nameWithType: ExtensibleColumnsBase.MapOrderByField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.MapOrderByField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField
  isExternal: true
  name: ActivateAsLinkField
  nameWithType: ExtensibleColumnsBase.ActivateAsLinkField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ActivateAsLinkField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn
  isExternal: true
  name: HasAvailableColumn
  nameWithType: ExtensibleColumnsBase.HasAvailableColumn
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasAvailableColumn
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider
  isExternal: true
  name: AddAndInitializeExtensionProvider
  nameWithType: ExtensibleColumnsBase.AddAndInitializeExtensionProvider
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAndInitializeExtensionProvider
- uid: '{ExtenderType}'
  commentId: '!:ExtenderType'
  definition: ExtenderType
  name: ExtenderType
  nameWithType: ExtenderType
  fullName: ExtenderType
- uid: ExtenderType
  name: ExtenderType
  nameWithType: ExtenderType
  fullName: ExtenderType
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction
  isExternal: true
  name: HasRestriction
  nameWithType: ExtensibleColumnsBase.HasRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.HasRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions
  isExternal: true
  name: ExtractRestrictions
  nameWithType: ExtensibleColumnsBase.ExtractRestrictions
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestrictions
- uid: System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ArchiveRestrictionInfo>
  nameWithType: List<ArchiveRestrictionInfo>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo>
  nameWithType.vb: List(Of ArchiveRestrictionInfo)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo)
  name.vb: List(Of ArchiveRestrictionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    name: ArchiveRestrictionInfo
    nameWithType: ArchiveRestrictionInfo
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction
  isExternal: true
  name: ExtractRestriction
  nameWithType: ExtensibleColumnsBase.ExtractRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtractRestriction
- uid: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveRestrictionInfo
  nameWithType: ArchiveRestrictionInfo
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveRestrictionInfo
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions
  isExternal: true
  name: ProcessRestrictions
  nameWithType: ExtensibleColumnsBase.ProcessRestrictions
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessRestrictions
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy
  isExternal: true
  name: ProcessOrderBy
  nameWithType: ExtensibleColumnsBase.ProcessOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ProcessOrderBy
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields
  isExternal: true
  name: PopulateSimpleFields
  nameWithType: ExtensibleColumnsBase.PopulateSimpleFields
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateSimpleFields
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue
  isExternal: true
  name: CalculateOrderbyValue
  nameWithType: ExtensibleColumnsBase.CalculateOrderbyValue
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.CalculateOrderbyValue
- uid: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveColumnData
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveColumnData
  nameWithType: ArchiveColumnData
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveColumnData
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo
  isExternal: true
  name: AddDbInfo
  nameWithType: ExtensibleColumnsBase.AddDbInfo
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddDbInfo
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable
  isExternal: true
  name: ForceDisable
  nameWithType: ExtensibleColumnsBase.ForceDisable
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceDisable
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData
  isExternal: true
  name: GetAssociateData
  nameWithType: ExtensibleColumnsBase.GetAssociateData
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetAssociateData
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData
  isExternal: true
  name: GetEjUserData
  nameWithType: ExtensibleColumnsBase.GetEjUserData
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetEjUserData
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex
  isExternal: true
  name: GetColumnIndex
  nameWithType: ExtensibleColumnsBase.GetColumnIndex
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndex
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader
  isExternal: true
  name: GetColumnIndexFromReader
  nameWithType: ExtensibleColumnsBase.GetColumnIndexFromReader
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetColumnIndexFromReader
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString
  isExternal: true
  name: ConvertDbTypeToString
  nameWithType: ExtensibleColumnsBase.ConvertDbTypeToString
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ConvertDbTypeToString
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint
  isExternal: true
  name: GetStandardTooltipHint
  nameWithType: ExtensibleColumnsBase.GetStandardTooltipHint
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetStandardTooltipHint
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint
  isExternal: true
  name: GetLinkHint
  nameWithType: ExtensibleColumnsBase.GetLinkHint
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetLinkHint
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction
  isExternal: true
  name: SetNonZeroBoolRestriction
  nameWithType: ExtensibleColumnsBase.SetNonZeroBoolRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SetNonZeroBoolRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping
  isExternal: true
  name: AddUpdatedByMapping
  nameWithType: ExtensibleColumnsBase.AddUpdatedByMapping
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedByMapping
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping
  isExternal: true
  name: AddRegisteredMapping
  nameWithType: ExtensibleColumnsBase.AddRegisteredMapping
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddRegisteredMapping
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping
  isExternal: true
  name: AddLastUpdatedMapping
  nameWithType: ExtensibleColumnsBase.AddLastUpdatedMapping
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddLastUpdatedMapping
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy
  isExternal: true
  name: AddUpdatedBy
  nameWithType: ExtensibleColumnsBase.AddUpdatedBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedBy
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate
  isExternal: true
  name: AddUpdatedDate
  nameWithType: ExtensibleColumnsBase.AddUpdatedDate
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddUpdatedDate
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName
  isExternal: true
  name: AddAssociateFullName
  nameWithType: ExtensibleColumnsBase.AddAssociateFullName
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.AddAssociateFullName
- uid: SuperOffice.Data.SQL.FieldInfo[]
  isExternal: true
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: SuperOffice.Data.SQL.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullName.vb: SuperOffice.Data.SQL.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag
  isExternal: true
  name: GetIdFieldTag
  nameWithType: ExtensibleColumnsBase.GetIdFieldTag
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetIdFieldTag
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName
  isExternal: true
  name: GetArchiveColumnName
  nameWithType: ExtensibleColumnsBase.GetArchiveColumnName
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.GetArchiveColumnName
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping
  isExternal: true
  name: GetArchiveColumnName(SoField)
  nameWithType: IArchiveProviderQueryMapping.GetArchiveColumnName(SoField)
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
  spec.csharp:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
    name: GetArchiveColumnName
    nameWithType: IArchiveProviderQueryMapping.GetArchiveColumnName
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName(SuperOffice.Data.Dictionary.SoField)
    name: GetArchiveColumnName
    nameWithType: IArchiveProviderQueryMapping.GetArchiveColumnName
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderQueryMapping.GetArchiveColumnName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dictionary.SoField
  commentId: T:SuperOffice.Data.Dictionary.SoField
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoField
  nameWithType: SoField
  fullName: SuperOffice.Data.Dictionary.SoField
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper
  isExternal: true
  name: ExtensibleHelper
  nameWithType: ExtensibleColumnsBase.ExtensibleHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ExtensibleHelper
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleHelper
  commentId: T:SuperOffice.CRM.ArchiveLists.ExtensibleHelper
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ExtensibleHelper
  nameWithType: ExtensibleHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleHelper
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper
  isExternal: true
  name: ColumnHelper
  nameWithType: ExtensibleColumnsBase.ColumnHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ColumnHelper
- uid: SuperOffice.CRM.ArchiveLists.ColumnHelper
  commentId: T:SuperOffice.CRM.ArchiveLists.ColumnHelper
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ColumnHelper
  nameWithType: ColumnHelper
  fullName: SuperOffice.CRM.ArchiveLists.ColumnHelper
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper
  isExternal: true
  name: RestrictionHelper
  nameWithType: ExtensibleColumnsBase.RestrictionHelper
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionHelper
- uid: SuperOffice.CRM.ArchiveLists.RestrictionHelper
  commentId: T:SuperOffice.CRM.ArchiveLists.RestrictionHelper
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: RestrictionHelper
  nameWithType: RestrictionHelper
  fullName: SuperOffice.CRM.ArchiveLists.RestrictionHelper
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent
  isExternal: true
  name: Parent
  nameWithType: ExtensibleColumnsBase.Parent
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.Parent
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  isExternal: true
  name: DisableSubtreeIfNoRestriction
  nameWithType: ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisableSubtreeIfNoRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree
  isExternal: true
  name: RestrictionSetForSubtree
  nameWithType: ExtensibleColumnsBase.RestrictionSetForSubtree
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RestrictionSetForSubtree
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded
  isExternal: true
  name: ForceQueryNeeded
  nameWithType: ExtensibleColumnsBase.ForceQueryNeeded
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceQueryNeeded
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction
  isExternal: true
  name: ForceRestriction
  nameWithType: ExtensibleColumnsBase.ForceRestriction
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ForceRestriction
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy
  isExternal: true
  name: BlockOrderBy
  nameWithType: ExtensibleColumnsBase.BlockOrderBy
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.BlockOrderBy
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField
  isExternal: true
  name: IdField
  nameWithType: ExtensibleColumnsBase.IdField
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.IdField
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins
  isExternal: true
  name: LastSubExtenderWins
  nameWithType: ExtensibleColumnsBase.LastSubExtenderWins
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.LastSubExtenderWins
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey
  isExternal: true
  name: ParentPrimaryKey
  nameWithType: ExtensibleColumnsBase.ParentPrimaryKey
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.ParentPrimaryKey
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId
  isExternal: true
  name: QuoteAlternativeId
  nameWithType: ExtensibleColumnsBase.QuoteAlternativeId
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.QuoteAlternativeId
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId
  isExternal: true
  name: SaleId
  nameWithType: ExtensibleColumnsBase.SaleId
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.SaleId
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix
  isExternal: true
  name: NamePrefix
  nameWithType: ExtensibleColumnsBase.NamePrefix
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.NamePrefix
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix
  isExternal: true
  name: DisplayNamePrefix
  nameWithType: ExtensibleColumnsBase.DisplayNamePrefix
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DisplayNamePrefix
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery
  isExternal: true
  name: RootQuery
  nameWithType: ExtensibleColumnsBase.RootQuery
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.RootQuery
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.RootQuery
  commentId: P:SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.RootQuery
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  isExternal: true
  name: RootQuery
  nameWithType: IArchiveProviderExtensible.RootQuery
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.RootQuery
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots
  isExternal: true
  name: OrderBySlots
  nameWithType: ExtensibleColumnsBase.OrderBySlots
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.OrderBySlots
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.OrderBySlots
  commentId: P:SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.OrderBySlots
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  isExternal: true
  name: OrderBySlots
  nameWithType: IArchiveProviderExtensible.OrderBySlots
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.OrderBySlots
- uid: SuperOffice.CRM.ArchiveLists.OrderByStorage
  commentId: T:SuperOffice.CRM.ArchiveLists.OrderByStorage
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: OrderByStorage
  nameWithType: OrderByStorage
  fullName: SuperOffice.CRM.ArchiveLists.OrderByStorage
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend
  isExternal: true
  name: TableToExtend
  nameWithType: ExtensibleColumnsBase.TableToExtend
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.TableToExtend
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.TableToExtend
  commentId: P:SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.TableToExtend
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible
  isExternal: true
  name: TableToExtend
  nameWithType: IArchiveProviderExtensible.TableToExtend
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderExtensible.TableToExtend
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue
  isExternal: true
  name: PopulateDisplayValue
  nameWithType: ExtensibleColumnsBase.PopulateDisplayValue
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateDisplayValue
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint
  isExternal: true
  name: PopulateTooltipHint
  nameWithType: ExtensibleColumnsBase.PopulateTooltipHint
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.PopulateTooltipHint
- uid: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML
  isExternal: true
  name: DebugXML
  nameWithType: ExtensibleColumnsBase.DebugXML
  fullName: SuperOffice.CRM.ArchiveLists.ExtensibleColumnsBase.DebugXML
- uid: System.Xml.XmlDocument
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
