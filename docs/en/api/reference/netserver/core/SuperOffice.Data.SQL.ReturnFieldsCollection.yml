### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection
  commentId: T:SuperOffice.Data.SQL.ReturnFieldsCollection
  id: ReturnFieldsCollection
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.ReturnFieldsCollection.#ctor
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.TableInfo[])
  - SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument})
  - SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo})
  - SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist
  - SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Clear
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Count
  - SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType(System.Int32)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator
  - SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems
  - SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Item(System.Int32)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.ReturnFieldsCollection
  - SuperOffice.Data.SQL.ReturnFieldsCollection.Remove(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.ReturnFieldsCollection.ToString
  langs:
  - csharp
  - vb
  name: ReturnFieldsCollection
  nameWithType: ReturnFieldsCollection
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe ReturnFieldsCollection is a Collection that is used to contain the different fields\nwe are interested in when we are dealing with a select-command. \n"
  syntax:
    content: 'public class ReturnFieldsCollection : Object, IEnumerable, IEnumerable<Argument>'
    content.vb: >-
      Public Class ReturnFieldsCollection
          Inherits Object
          Implements IEnumerable, IEnumerable(Of Argument)
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument}
  extensionMethods:
  - SuperOffice.Data.SQL.ReturnFieldsCollection.EnumUtil.MapEnums``2
  - SuperOffice.Data.SQL.ReturnFieldsCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.ReturnFieldsCollection)
  - SuperOffice.Data.SQL.ReturnFieldsCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.SQL.ReturnFieldsCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  id: GetIndexOfField(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: GetIndexOfField(Argument)
  nameWithType: ReturnFieldsCollection.GetIndexOfField(Argument)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public int GetIndexOfField(Argument field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.Argument
    return:
      type: System.Int32
    content.vb: Public Function GetIndexOfField(field As Argument) As Integer
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList
  id: GetReturnFieldList
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: GetReturnFieldList()
  nameWithType: ReturnFieldsCollection.GetReturnFieldList()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public List<Argument> GetReturnFieldList()
    return:
      type: System.Collections.Generic.List{SuperOffice.Data.SQL.Argument}
    content.vb: Public Function GetReturnFieldList As List(Of Argument)
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.#ctor
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: ReturnFieldsCollection()
  nameWithType: ReturnFieldsCollection.ReturnFieldsCollection()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.ReturnFieldsCollection()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInitializes a new instance of the <xref href=\"SuperOffice.Data.SQL.ReturnFieldsCollection\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public ReturnFieldsCollection()
    content.vb: Public Sub New
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Clear
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.Clear
  id: Clear
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ReturnFieldsCollection.Clear()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Clear()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nClear the return fields collection, removing all fields\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument[])
  id: Add(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Add(Argument[])
  nameWithType: ReturnFieldsCollection.Add(Argument[])
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public void Add(params Argument[] arguments)
    parameters:
    - id: arguments
      type: SuperOffice.Data.SQL.Argument[]
      description: Argument collection to add
    content.vb: Public Sub Add(ParamArray arguments As Argument())
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Add*
  nameWithType.vb: ReturnFieldsCollection.Add(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument())
  name.vb: Add(Argument())
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Remove(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.Remove(SuperOffice.Data.SQL.Argument[])
  id: Remove(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Remove(Argument[])
  nameWithType: ReturnFieldsCollection.Remove(Argument[])
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Remove(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nRemove one or more fields / arguments from the returnfieldscollection\n"
  syntax:
    content: public void Remove(params Argument[] arguments)
    parameters:
    - id: arguments
      type: SuperOffice.Data.SQL.Argument[]
    content.vb: Public Sub Remove(ParamArray arguments As Argument())
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Remove*
  nameWithType.vb: ReturnFieldsCollection.Remove(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.Remove(SuperOffice.Data.SQL.Argument())
  name.vb: Remove(Argument())
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument)
  id: Add(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Add(Argument)
  nameWithType: ReturnFieldsCollection.Add(Argument)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  remarks: Does not add duplicates. A field added twice will only appear once in the result set.
  syntax:
    content: public void Add(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
      description: FieldInfo or function
    content.vb: Public Sub Add(arg As Argument)
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.TableInfo[])
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.TableInfo[])
  id: Add(SuperOffice.Data.SQL.TableInfo[])
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Add(TableInfo[])
  nameWithType: ReturnFieldsCollection.Add(TableInfo[])
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.TableInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdd all the fields from the given table(s) to the query\n"
  syntax:
    content: public void Add(params TableInfo[] tableInfos)
    parameters:
    - id: tableInfos
      type: SuperOffice.Data.SQL.TableInfo[]
      description: Array of zero or more tableInfo objects; All fields from each will be added to the query return fields
    content.vb: Public Sub Add(ParamArray tableInfos As TableInfo())
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Add*
  nameWithType.vb: ReturnFieldsCollection.Add(TableInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.Add(SuperOffice.Data.SQL.TableInfo())
  name.vb: Add(TableInfo())
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument})
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument})
  id: AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument})
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<Argument>)
  nameWithType: ReturnFieldsCollection.AddRange(IEnumerable<Argument>)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.Argument>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdd a range of Arguments to the the collection\n"
  syntax:
    content: public void AddRange(IEnumerable<Argument> arguments)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument}
      description: Arguments to add to the collection.
    content.vb: Public Sub AddRange(arguments As IEnumerable(Of Argument))
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange*
  nameWithType.vb: ReturnFieldsCollection.AddRange(IEnumerable(Of Argument))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.Argument))
  name.vb: AddRange(IEnumerable(Of Argument))
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo})
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo})
  id: AddRange(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo})
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<FieldInfo>)
  nameWithType: ReturnFieldsCollection.AddRange(IEnumerable<FieldInfo>)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdd a range of FieldInfos to the the colelction\n"
  syntax:
    content: public void AddRange(IEnumerable<FieldInfo> arguments)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
      description: Arguments to add to the collection.
    content.vb: Public Sub AddRange(arguments As IEnumerable(Of FieldInfo))
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange*
  nameWithType.vb: ReturnFieldsCollection.AddRange(IEnumerable(Of FieldInfo))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange(System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo))
  name.vb: AddRange(IEnumerable(Of FieldInfo))
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator
  id: GetEnumerator
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReturnFieldsCollection.GetEnumerator()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns an enumerator to the collection.\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GetEnumerator As IEnumerator
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems
  id: GetNumberOfItems
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: GetNumberOfItems()
  nameWithType: ReturnFieldsCollection.GetNumberOfItems()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns number of items in the collection.\n"
  syntax:
    content: public int GetNumberOfItems()
    return:
      type: System.Int32
    content.vb: Public Function GetNumberOfItems As Integer
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist
  id: AggregationExist
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: AggregationExist()
  nameWithType: ReturnFieldsCollection.AggregationExist()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAggregationExist will check the ReturnFields-collection to see if it contains any Aggregation-Arguments.\nWill return true if aggregation exists unless the aggregation is of type Distinct. The rules of \naggregation does not apply for Distinct.\n"
  syntax:
    content: public bool AggregationExist()
    return:
      type: System.Boolean
      description: Returns true if the collection contains a Aggregation-argument, else false.
    content.vb: Public Function AggregationExist As Boolean
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator
  id: CheckCollectionForTopOperator
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: CheckCollectionForTopOperator()
  nameWithType: ReturnFieldsCollection.CheckCollectionForTopOperator()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nCheckCollectionForTopOperator runs through the returnfieldcollection and makes\nsure that any existing TOP-object will be inserted into position 0 in the list.\n"
  syntax:
    content: protected void CheckCollectionForTopOperator()
    content.vb: Protected Sub CheckCollectionForTopOperator
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable(SuperOffice.Data.SQL.TableInfo)
  id: FindFirstTableFromTable(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: FindFirstTableFromTable(TableInfo)
  nameWithType: ReturnFieldsCollection.FindFirstTableFromTable(TableInfo)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns first table instance that belongs to the given table. \nReturns NULL if the table does not appear in the collection.\n"
  syntax:
    content: public TableInfo FindFirstTableFromTable(TableInfo table)
    parameters:
    - id: table
      type: SuperOffice.Data.SQL.TableInfo
      description: Table to search for in the return fields
    return:
      type: SuperOffice.Data.SQL.TableInfo
      description: NULL on no match
    content.vb: Public Function FindFirstTableFromTable(table As TableInfo) As TableInfo
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable(SuperOffice.Data.SQL.TableInfo)
  id: FindFirstFieldFromTable(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: FindFirstFieldFromTable(TableInfo)
  nameWithType: ReturnFieldsCollection.FindFirstFieldFromTable(TableInfo)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns first field that belongs to the given table. \nReturns NULL if the table does not appear in the collection.\n"
  syntax:
    content: public FieldInfo FindFirstFieldFromTable(TableInfo table)
    parameters:
    - id: table
      type: SuperOffice.Data.SQL.TableInfo
      description: Table to search for in the return fields
    return:
      type: SuperOffice.Data.SQL.FieldInfo
      description: NULL on no match
    content.vb: Public Function FindFirstFieldFromTable(table As TableInfo) As FieldInfo
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType(System.Int32)
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType(System.Int32)
  id: GetArgumentDataType(System.Int32)
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: GetArgumentDataType(Int32)
  nameWithType: ReturnFieldsCollection.GetArgumentDataType(Int32)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGetArgumentDataType will return the FieldDataType of the Argument the in-parameter index \npoints to.\n"
  syntax:
    content: public FieldDataType GetArgumentDataType(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the Argument we want the FieldDataType on.
    return:
      type: SuperOffice.Data.FieldDataType
      description: "The FieldDataType of the Argument corresponding to the index. \nIf no object is found on the index, FieldDataType.dbUnknown will be returned."
    content.vb: Public Function GetArgumentDataType(index As Integer) As FieldDataType
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.ReturnFieldsCollection
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.ReturnFieldsCollection
  id: op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.ReturnFieldsCollection
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Implicit(FieldInfo[] to ReturnFieldsCollection)
  nameWithType: ReturnFieldsCollection.Implicit(FieldInfo[] to ReturnFieldsCollection)
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Implicit(SuperOffice.Data.SQL.FieldInfo[] to SuperOffice.Data.SQL.ReturnFieldsCollection)
  type: Operator
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns a <xref href=\"SuperOffice.Data.SQL.ReturnFieldsCollection\" data-throw-if-not-resolved=\"false\"></xref> class, holding all the fields found in the\n<xref href=\"SuperOffice.Data.SQL.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> argument.\n"
  syntax:
    content: public static implicit operator ReturnFieldsCollection(FieldInfo[] fields)
    parameters:
    - id: fields
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: The fields.
    return:
      type: SuperOffice.Data.SQL.ReturnFieldsCollection
      description: >-
        a <xref href="SuperOffice.Data.SQL.ReturnFieldsCollection" data-throw-if-not-resolved="false"></xref> class, holding all the fields found in the

        <xref href="SuperOffice.Data.SQL.FieldInfo" data-throw-if-not-resolved="false"></xref> argument.
    content.vb: Public Shared Widening Operator CType(fields As FieldInfo()) As ReturnFieldsCollection
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.op_Implicit*
  nameWithType.vb: ReturnFieldsCollection.Widening(FieldInfo() to ReturnFieldsCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.Widening(SuperOffice.Data.SQL.FieldInfo() to SuperOffice.Data.SQL.ReturnFieldsCollection)
  name.vb: Widening(FieldInfo() to ReturnFieldsCollection)
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  id: FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: FromFieldInfoArray(FieldInfo[])
  nameWithType: ReturnFieldsCollection.FromFieldInfoArray(FieldInfo[])
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns a <xref href=\"SuperOffice.Data.SQL.ReturnFieldsCollection\" data-throw-if-not-resolved=\"false\"></xref> class, holding all the fields found in the\n<xref href=\"SuperOffice.Data.SQL.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> argument.\n"
  syntax:
    content: public static ReturnFieldsCollection FromFieldInfoArray(FieldInfo[] fields)
    parameters:
    - id: fields
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: The fields.
    return:
      type: SuperOffice.Data.SQL.ReturnFieldsCollection
      description: >-
        a <xref href="SuperOffice.Data.SQL.ReturnFieldsCollection" data-throw-if-not-resolved="false"></xref> class, holding all the fields found in the

        <xref href="SuperOffice.Data.SQL.FieldInfo" data-throw-if-not-resolved="false"></xref> argument.
    content.vb: Public Shared Function FromFieldInfoArray(fields As FieldInfo()) As ReturnFieldsCollection
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray*
  nameWithType.vb: ReturnFieldsCollection.FromFieldInfoArray(FieldInfo())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo())
  name.vb: FromFieldInfoArray(FieldInfo())
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.ToString
  commentId: M:SuperOffice.Data.SQL.ReturnFieldsCollection.ToString
  id: ToString
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ReturnFieldsCollection.ToString()
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nString output.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: field, field, ...
    content.vb: Public Overrides Function ToString As String
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Item(System.Int32)
  commentId: P:SuperOffice.Data.SQL.ReturnFieldsCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ReturnFieldsCollection.Item[Int32]
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns the Argument on a specific index.\n"
  syntax:
    content: public Argument this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.Argument
    content.vb: Public ReadOnly Property Item(index As Integer) As Argument
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Item*
  nameWithType.vb: ReturnFieldsCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Count
  commentId: P:SuperOffice.Data.SQL.ReturnFieldsCollection.Count
  id: Count
  parent: SuperOffice.Data.SQL.ReturnFieldsCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReturnFieldsCollection.Count
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Count
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.Data.SQL.ReturnFieldsCollection.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.Argument}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Argument>
  nameWithType: IEnumerable<Argument>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.Argument>
  nameWithType.vb: IEnumerable(Of Argument)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.Argument)
  name.vb: IEnumerable(Of Argument)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ReturnFieldsCollection, To>()
  nameWithType: EnumUtil.MapEnums<ReturnFieldsCollection, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.ReturnFieldsCollection, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ReturnFieldsCollection, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.ReturnFieldsCollection, To)()
  name.vb: MapEnums(Of ReturnFieldsCollection, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ReturnFieldsCollection, To>
    nameWithType: EnumUtil.MapEnums<ReturnFieldsCollection, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.ReturnFieldsCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ReturnFieldsCollection, To)
    nameWithType: EnumUtil.MapEnums(Of ReturnFieldsCollection, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.ReturnFieldsCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.ReturnFieldsCollection)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<ReturnFieldsCollection>(ReturnFieldsCollection)
  nameWithType: ObjectExtensions.AssignByReflection<ReturnFieldsCollection>(ReturnFieldsCollection)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.ReturnFieldsCollection>(SuperOffice.Data.SQL.ReturnFieldsCollection)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of ReturnFieldsCollection)(ReturnFieldsCollection)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.ReturnFieldsCollection)(SuperOffice.Data.SQL.ReturnFieldsCollection)
  name.vb: AssignByReflection(Of ReturnFieldsCollection)(ReturnFieldsCollection)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<ReturnFieldsCollection>
    nameWithType: ObjectExtensions.AssignByReflection<ReturnFieldsCollection>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.ReturnFieldsCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.ReturnFieldsCollection
    name: ReturnFieldsCollection
    nameWithType: ReturnFieldsCollection
    fullName: SuperOffice.Data.SQL.ReturnFieldsCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of ReturnFieldsCollection)
    nameWithType: ObjectExtensions.AssignByReflection(Of ReturnFieldsCollection)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.ReturnFieldsCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.ReturnFieldsCollection
    name: ReturnFieldsCollection
    nameWithType: ReturnFieldsCollection
    fullName: SuperOffice.Data.SQL.ReturnFieldsCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<ReturnFieldsCollection>()
  nameWithType: ObjectExtensions.GraphCopy<ReturnFieldsCollection>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.ReturnFieldsCollection>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of ReturnFieldsCollection)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.ReturnFieldsCollection)()
  name.vb: GraphCopy(Of ReturnFieldsCollection)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<ReturnFieldsCollection>
    nameWithType: ObjectExtensions.GraphCopy<ReturnFieldsCollection>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.ReturnFieldsCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of ReturnFieldsCollection)
    nameWithType: ObjectExtensions.GraphCopy(Of ReturnFieldsCollection)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.ReturnFieldsCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ReturnFieldsCollection, To>()
  nameWithType: Converters.MapEnums<ReturnFieldsCollection, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.ReturnFieldsCollection, To>()
  nameWithType.vb: Converters.MapEnums(Of ReturnFieldsCollection, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.ReturnFieldsCollection, To)()
  name.vb: MapEnums(Of ReturnFieldsCollection, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ReturnFieldsCollection, To>
    nameWithType: Converters.MapEnums<ReturnFieldsCollection, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.ReturnFieldsCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ReturnFieldsCollection, To)
    nameWithType: Converters.MapEnums(Of ReturnFieldsCollection, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.ReturnFieldsCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField
  isExternal: true
  name: GetIndexOfField
  nameWithType: ReturnFieldsCollection.GetIndexOfField
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetIndexOfField
- uid: SuperOffice.Data.SQL.Argument
  commentId: T:SuperOffice.Data.SQL.Argument
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Argument
  nameWithType: Argument
  fullName: SuperOffice.Data.SQL.Argument
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList
  isExternal: true
  name: GetReturnFieldList
  nameWithType: ReturnFieldsCollection.GetReturnFieldList
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetReturnFieldList
- uid: System.Collections.Generic.List{SuperOffice.Data.SQL.Argument}
  commentId: '!:System.Collections.Generic.List{SuperOffice.Data.SQL.Argument}'
  definition: System.Collections.Generic.List`1
  name: List<Argument>
  nameWithType: List<Argument>
  fullName: System.Collections.Generic.List<SuperOffice.Data.SQL.Argument>
  nameWithType.vb: List(Of Argument)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.Data.SQL.Argument)
  name.vb: List(Of Argument)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.#ctor
  isExternal: true
  name: ReturnFieldsCollection
  nameWithType: ReturnFieldsCollection.ReturnFieldsCollection
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.ReturnFieldsCollection
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Clear*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.Clear
  isExternal: true
  name: Clear
  nameWithType: ReturnFieldsCollection.Clear
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Clear
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Add*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.Add
  isExternal: true
  name: Add
  nameWithType: ReturnFieldsCollection.Add
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Add
- uid: SuperOffice.Data.SQL.Argument[]
  isExternal: true
  name: Argument[]
  nameWithType: Argument[]
  fullName: SuperOffice.Data.SQL.Argument[]
  nameWithType.vb: Argument()
  fullName.vb: SuperOffice.Data.SQL.Argument()
  name.vb: Argument()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Remove*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.Remove
  isExternal: true
  name: Remove
  nameWithType: ReturnFieldsCollection.Remove
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Remove
- uid: SuperOffice.Data.SQL.TableInfo[]
  isExternal: true
  name: TableInfo[]
  nameWithType: TableInfo[]
  fullName: SuperOffice.Data.SQL.TableInfo[]
  nameWithType.vb: TableInfo()
  fullName.vb: SuperOffice.Data.SQL.TableInfo()
  name.vb: TableInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange
  isExternal: true
  name: AddRange
  nameWithType: ReturnFieldsCollection.AddRange
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.AddRange
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FieldInfo>
  nameWithType: IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: IEnumerable(Of FieldInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo)
  name.vb: IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: ReturnFieldsCollection.GetEnumerator
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetEnumerator
- uid: System.Collections.IEnumerator
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems
  isExternal: true
  name: GetNumberOfItems
  nameWithType: ReturnFieldsCollection.GetNumberOfItems
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetNumberOfItems
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist
  isExternal: true
  name: AggregationExist
  nameWithType: ReturnFieldsCollection.AggregationExist
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.AggregationExist
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator
  isExternal: true
  name: CheckCollectionForTopOperator
  nameWithType: ReturnFieldsCollection.CheckCollectionForTopOperator
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.CheckCollectionForTopOperator
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable
  isExternal: true
  name: FindFirstTableFromTable
  nameWithType: ReturnFieldsCollection.FindFirstTableFromTable
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstTableFromTable
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable
  isExternal: true
  name: FindFirstFieldFromTable
  nameWithType: ReturnFieldsCollection.FindFirstFieldFromTable
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.FindFirstFieldFromTable
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType
  isExternal: true
  name: GetArgumentDataType
  nameWithType: ReturnFieldsCollection.GetArgumentDataType
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.GetArgumentDataType
- uid: SuperOffice.Data.FieldDataType
  commentId: T:SuperOffice.Data.FieldDataType
  parent: SuperOffice.Data
  isExternal: true
  name: FieldDataType
  nameWithType: FieldDataType
  fullName: SuperOffice.Data.FieldDataType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.op_Implicit*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.op_Implicit
  isExternal: true
  name: Implicit
  nameWithType: ReturnFieldsCollection.Implicit
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Implicit
  nameWithType.vb: ReturnFieldsCollection.Widening
  fullName.vb: SuperOffice.Data.SQL.ReturnFieldsCollection.Widening
  name.vb: Widening
- uid: SuperOffice.Data.SQL.FieldInfo[]
  isExternal: true
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: SuperOffice.Data.SQL.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullName.vb: SuperOffice.Data.SQL.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection
  commentId: T:SuperOffice.Data.SQL.ReturnFieldsCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: ReturnFieldsCollection
  nameWithType: ReturnFieldsCollection
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray
  isExternal: true
  name: FromFieldInfoArray
  nameWithType: ReturnFieldsCollection.FromFieldInfoArray
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.FromFieldInfoArray
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.ToString*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.ToString
  isExternal: true
  name: ToString
  nameWithType: ReturnFieldsCollection.ToString
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Item*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.Item
  isExternal: true
  name: Item
  nameWithType: ReturnFieldsCollection.Item
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Item
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection.Count*
  commentId: Overload:SuperOffice.Data.SQL.ReturnFieldsCollection.Count
  isExternal: true
  name: Count
  nameWithType: ReturnFieldsCollection.Count
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection.Count
