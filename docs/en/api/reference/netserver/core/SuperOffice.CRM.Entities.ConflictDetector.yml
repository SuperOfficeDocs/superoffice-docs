### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Entities.ConflictDetector
  commentId: T:SuperOffice.CRM.Entities.ConflictDetector
  id: ConflictDetector
  parent: SuperOffice.CRM.Entities
  children:
  - SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32,System.Int32,System.Int32[],SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[])
  - SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,System.DateTime[])
  - SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,SuperOffice.CRM.Services.RecurrenceDate[])
  langs:
  - csharp
  - vb
  name: ConflictDetector
  nameWithType: ConflictDetector
  fullName: SuperOffice.CRM.Entities.ConflictDetector
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nUtility class for detecting conflicts.\n"
  syntax:
    content: public static class ConflictDetector
    content.vb: Public Module ConflictDetector
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,SuperOffice.CRM.Services.RecurrenceDate[])
  commentId: M:SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,SuperOffice.CRM.Services.RecurrenceDate[])
  id: UpdateConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,SuperOffice.CRM.Services.RecurrenceDate[])
  parent: SuperOffice.CRM.Entities.ConflictDetector
  langs:
  - csharp
  - vb
  name: UpdateConflicts(Int32, Int32, Int32[], TimeSpan, TimeSpan, RecurrenceDate[])
  nameWithType: ConflictDetector.UpdateConflicts(Int32, Int32, Int32[], TimeSpan, TimeSpan, RecurrenceDate[])
  fullName: SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts(System.Int32, System.Int32, System.Int32[], System.TimeSpan, System.TimeSpan, SuperOffice.CRM.Services.RecurrenceDate[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nUpdate conflicts on an array of <xref href=\"SuperOffice.CRM.Services.RecurrenceDate\" data-throw-if-not-resolved=\"false\"></xref>s ojects.\n"
  remarks: There should normally only be one provided associate.
  syntax:
    content: public static void UpdateConflicts(int excludedAppointmentId, int excludedRecurrenceRuleId, int[] associates, TimeSpan startTime, TimeSpan endTime, RecurrenceDate[] recurrenceDates)
    parameters:
    - id: excludedAppointmentId
      type: System.Int32
      description: AppointmentId not to include in list of conflicting appointments.  Appointment with this id as primary key or mother id will be excluded in the conflict check.
    - id: excludedRecurrenceRuleId
      type: System.Int32
      description: Appointment records with this id as recurrence rule id will be excluded in the conflict check.
    - id: associates
      type: System.Int32[]
      description: Associates to find conflicts for.  This should normally only be of length = 1.
    - id: startTime
      type: System.TimeSpan
      description: Start time (i.e. time of day) for the appointment.
    - id: endTime
      type: System.TimeSpan
      description: End time (i.e. time of day) for the appointment.
    - id: recurrenceDates
      type: SuperOffice.CRM.Services.RecurrenceDate[]
      description: Objects to update conflicts on.
    content.vb: Public Shared Sub UpdateConflicts(excludedAppointmentId As Integer, excludedRecurrenceRuleId As Integer, associates As Integer(), startTime As TimeSpan, endTime As TimeSpan, recurrenceDates As RecurrenceDate())
  overload: SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts*
  nameWithType.vb: ConflictDetector.UpdateConflicts(Int32, Int32, Int32(), TimeSpan, TimeSpan, RecurrenceDate())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts(System.Int32, System.Int32, System.Int32(), System.TimeSpan, System.TimeSpan, SuperOffice.CRM.Services.RecurrenceDate())
  name.vb: UpdateConflicts(Int32, Int32, Int32(), TimeSpan, TimeSpan, RecurrenceDate())
- uid: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,System.DateTime[])
  commentId: M:SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,System.DateTime[])
  id: GetConflicts(System.Int32,System.Int32,System.Int32[],System.TimeSpan,System.TimeSpan,System.DateTime[])
  parent: SuperOffice.CRM.Entities.ConflictDetector
  langs:
  - csharp
  - vb
  name: GetConflicts(Int32, Int32, Int32[], TimeSpan, TimeSpan, DateTime[])
  nameWithType: ConflictDetector.GetConflicts(Int32, Int32, Int32[], TimeSpan, TimeSpan, DateTime[])
  fullName: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32, System.Int32, System.Int32[], System.TimeSpan, System.TimeSpan, System.DateTime[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nGet conflicts.\n"
  remarks: "\nConflicts are normally calculated for only one associate or only one date.\n"
  syntax:
    content: public static List<int>[, ] GetConflicts(int excludedAppointmentId, int excludedRecurrenceRuleId, int[] associates, TimeSpan startTime, TimeSpan endTime, params DateTime[] dates)
    parameters:
    - id: excludedAppointmentId
      type: System.Int32
      description: AppointmentId not to include in list of conflicting appointments.  Appointment with this id as primary key or mother id will be excluded in the conflict check.
    - id: excludedRecurrenceRuleId
      type: System.Int32
      description: Appointment records with this id as recurrence rule id will be excluded in the conflict check.
    - id: associates
      type: System.Int32[]
      description: Associates to find conflicts for.
    - id: startTime
      type: System.TimeSpan
      description: Start time (i.e. time of day) for the appointment.
    - id: endTime
      type: System.TimeSpan
      description: End time (i.e. time of day) for the appointment.
    - id: dates
      type: System.DateTime[]
      description: The dates the appointment occurs.
    return:
      type: System.Collections.Generic.List{System.Int32}[,]
      description: "\nTwo dimensional array of list of conflicting appointment ids.  The first dimension \ncontains dates and the second contains associates.  Hence; [date, associate] yields \nthe list of conflicting appointment ids."
    content.vb: Public Shared Function GetConflicts(excludedAppointmentId As Integer, excludedRecurrenceRuleId As Integer, associates As Integer(), startTime As TimeSpan, endTime As TimeSpan, ParamArray dates As Date()) As List(Of Integer)(,)
  overload: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts*
  nameWithType.vb: ConflictDetector.GetConflicts(Int32, Int32, Int32(), TimeSpan, TimeSpan, DateTime())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32, System.Int32, System.Int32(), System.TimeSpan, System.TimeSpan, System.DateTime())
  name.vb: GetConflicts(Int32, Int32, Int32(), TimeSpan, TimeSpan, DateTime())
- uid: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32,System.Int32,System.Int32[],SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[])
  commentId: M:SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32,System.Int32,System.Int32[],SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[])
  id: GetConflicts(System.Int32,System.Int32,System.Int32[],SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[])
  parent: SuperOffice.CRM.Entities.ConflictDetector
  langs:
  - csharp
  - vb
  name: GetConflicts(Int32, Int32, Int32[], ConflictDetector.ConflictTime[])
  nameWithType: ConflictDetector.GetConflicts(Int32, Int32, Int32[], ConflictDetector.ConflictTime[])
  fullName: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32, System.Int32, System.Int32[], SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Entities
  summary: "\nGet Conflicts.\n"
  remarks: "\nConflicts are normally calculated for only one associate or only one date. If the number of dates or\nnumber of associates is 0, a correspondingly empty response is immediately returned.\n"
  syntax:
    content: public static List<int>[, ] GetConflicts(int excludedAppointmentId, int excludedRecurrenceRuleId, int[] associates, params ConflictDetector.ConflictTime[] conflictTimes)
    parameters:
    - id: excludedAppointmentId
      type: System.Int32
      description: AppointmentId not to include in list of conflicting appointments.  Appointment with this id as primary key or mother id will be excluded in the conflict check.
    - id: excludedRecurrenceRuleId
      type: System.Int32
      description: Appointment records with this id as recurrence rule id will be excluded in the conflict check.
    - id: associates
      type: System.Int32[]
      description: Associates to find conflicts for.
    - id: conflictTimes
      type: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[]
      description: Appointment times to find conflicts for.
    return:
      type: System.Collections.Generic.List{System.Int32}[,]
      description: "\nTwo dimensional array of list of conflicting appointment ids.  The first dimension \ncontains dates and the second contains associates.  Hence; [date, associate] yields \nthe list of conflicting appointment ids.\n"
    content.vb: Public Shared Function GetConflicts(excludedAppointmentId As Integer, excludedRecurrenceRuleId As Integer, associates As Integer(), ParamArray conflictTimes As ConflictDetector.ConflictTime()) As List(Of Integer)(,)
  overload: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts*
  nameWithType.vb: ConflictDetector.GetConflicts(Int32, Int32, Int32(), ConflictDetector.ConflictTime())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts(System.Int32, System.Int32, System.Int32(), SuperOffice.CRM.Entities.ConflictDetector.ConflictTime())
  name.vb: GetConflicts(Int32, Int32, Int32(), ConflictDetector.ConflictTime())
references:
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts*
  commentId: Overload:SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts
  isExternal: true
  name: UpdateConflicts
  nameWithType: ConflictDetector.UpdateConflicts
  fullName: SuperOffice.CRM.Entities.ConflictDetector.UpdateConflicts
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: SuperOffice.CRM.Services.RecurrenceDate[]
  isExternal: true
  name: RecurrenceDate[]
  nameWithType: RecurrenceDate[]
  fullName: SuperOffice.CRM.Services.RecurrenceDate[]
  nameWithType.vb: RecurrenceDate()
  fullName.vb: SuperOffice.CRM.Services.RecurrenceDate()
  name.vb: RecurrenceDate()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.RecurrenceDate
    name: RecurrenceDate
    nameWithType: RecurrenceDate
    fullName: SuperOffice.CRM.Services.RecurrenceDate
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts*
  commentId: Overload:SuperOffice.CRM.Entities.ConflictDetector.GetConflicts
  isExternal: true
  name: GetConflicts
  nameWithType: ConflictDetector.GetConflicts
  fullName: SuperOffice.CRM.Entities.ConflictDetector.GetConflicts
- uid: System.DateTime[]
  isExternal: true
  name: DateTime[]
  nameWithType: DateTime[]
  fullName: System.DateTime[]
  nameWithType.vb: DateTime()
  fullName.vb: System.DateTime()
  name.vb: DateTime()
  spec.csharp:
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.Int32}[,]
  isExternal: true
  name: List<Int32>[,]
  nameWithType: List<Int32>[,]
  fullName: System.Collections.Generic.List<System.Int32>[,]
  nameWithType.vb: List(Of Int32)(,)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)(,)
  name.vb: List(Of Int32)(,)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[]
  isExternal: true
  name: ConflictDetector.ConflictTime[]
  nameWithType: ConflictDetector.ConflictTime[]
  fullName: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime[]
  nameWithType.vb: ConflictDetector.ConflictTime()
  fullName.vb: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime()
  name.vb: ConflictDetector.ConflictTime()
  spec.csharp:
  - uid: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime
    name: ConflictDetector.ConflictTime
    nameWithType: ConflictDetector.ConflictTime
    fullName: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime
    name: ConflictDetector.ConflictTime
    nameWithType: ConflictDetector.ConflictTime
    fullName: SuperOffice.CRM.Entities.ConflictDetector.ConflictTime
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
