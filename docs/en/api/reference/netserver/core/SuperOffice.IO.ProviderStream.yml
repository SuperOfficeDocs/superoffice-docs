### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.ProviderStream
  commentId: T:SuperOffice.IO.ProviderStream
  id: ProviderStream
  parent: SuperOffice.IO
  children:
  - SuperOffice.IO.ProviderStream.CanRead
  - SuperOffice.IO.ProviderStream.CanSeek
  - SuperOffice.IO.ProviderStream.CanWrite
  - SuperOffice.IO.ProviderStream.Close
  - SuperOffice.IO.ProviderStream.Dispose
  - SuperOffice.IO.ProviderStream.Flush
  - SuperOffice.IO.ProviderStream.FlushAsync(System.Threading.CancellationToken)
  - SuperOffice.IO.ProviderStream.GetProviderStreamAsync(SuperOffice.IO.IStreamProvider,SuperOffice.IO.ProviderStream.AccessMode,System.Threading.CancellationToken)
  - SuperOffice.IO.ProviderStream.Length
  - SuperOffice.IO.ProviderStream.Position
  - SuperOffice.IO.ProviderStream.Read(System.Byte[],System.Int32,System.Int32)
  - SuperOffice.IO.ProviderStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.IO.ProviderStream.Seek(System.Int64,System.IO.SeekOrigin)
  - SuperOffice.IO.ProviderStream.SetLength(System.Int64)
  - SuperOffice.IO.ProviderStream.Write(System.Byte[],System.Int32,System.Int32)
  - SuperOffice.IO.ProviderStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ProviderStream
  nameWithType: ProviderStream
  fullName: SuperOffice.IO.ProviderStream
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nStream for reading from and writing to the document archive.\n"
  syntax:
    content: 'public class ProviderStream : Stream, IDisposable'
    content.vb: >-
      Public Class ProviderStream
          Inherits Stream
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  extensionMethods:
  - SuperOffice.IO.ProviderStream.EnumUtil.MapEnums``2
  - SuperOffice.IO.ProviderStream.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.IO.ProviderStream.GetProviderStreamAsync(SuperOffice.IO.IStreamProvider,SuperOffice.IO.ProviderStream.AccessMode,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ProviderStream.GetProviderStreamAsync(SuperOffice.IO.IStreamProvider,SuperOffice.IO.ProviderStream.AccessMode,System.Threading.CancellationToken)
  id: GetProviderStreamAsync(SuperOffice.IO.IStreamProvider,SuperOffice.IO.ProviderStream.AccessMode,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: GetProviderStreamAsync(IStreamProvider, ProviderStream.AccessMode, CancellationToken)
  nameWithType: ProviderStream.GetProviderStreamAsync(IStreamProvider, ProviderStream.AccessMode, CancellationToken)
  fullName: SuperOffice.IO.ProviderStream.GetProviderStreamAsync(SuperOffice.IO.IStreamProvider, SuperOffice.IO.ProviderStream.AccessMode, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nGet a new instance of the <xref href=\"SuperOffice.IO.ProviderStream\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public static Task<ProviderStream> GetProviderStreamAsync(IStreamProvider provider, ProviderStream.AccessMode accessMode, CancellationToken cancellationToken)
    parameters:
    - id: provider
      type: SuperOffice.IO.IStreamProvider
      description: Data source for the <see cref="!:DocumentStream"></see>.
    - id: accessMode
      type: SuperOffice.IO.ProviderStream.AccessMode
      description: 'Mode in which the <see cref="!:DocumentStream"></see>is accessed. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.IO.ProviderStream}
      description: New instance of the <see cref="!:DocumentStream"></see>.
    content.vb: Public Shared Function GetProviderStreamAsync(provider As IStreamProvider, accessMode As ProviderStream.AccessMode, cancellationToken As CancellationToken) As Task(Of ProviderStream)
  overload: SuperOffice.IO.ProviderStream.GetProviderStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.IO.ProviderStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ProviderStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: ProviderStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.IO.ProviderStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nRead a block of bytes from a stream, and insert them into the given position in the\ncallers buffer array\n"
  remarks: "\nNote that the actual remote stream or file may be read using other chunk sizes than what is\nuse in the incoming &apos;count&apos; parameter. The <xref href=\"SuperOffice.IO.ProviderStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property will report the\nposition as seen by the caller, not the position as read from the file.\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public override Task<int> ReadAsync(byte[] buffer, int offsetIntoDestination, int count, CancellationToken cancellationToken)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: Destination buffer
    - id: offsetIntoDestination
      type: System.Int32
      description: Where to start in the destination
    - id: count
      type: System.Int32
      description: Number of bytes to read
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Number of bytes actually read
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Overrides Function ReadAsync(buffer As Byte(), offsetIntoDestination As Integer, count As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
  overload: SuperOffice.IO.ProviderStream.ReadAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  nameWithType.vb: ProviderStream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: SuperOffice.IO.ProviderStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
- uid: SuperOffice.IO.ProviderStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ProviderStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: ProviderStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.IO.ProviderStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nWrite a chunk of bytes to a stream, potentially triggering a write to the\nunderlying file or remote stream\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public override Task WriteAsync(byte[] buffer, int sourceOffset, int count, CancellationToken cancellationToken)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: Source buffer containing data
    - id: sourceOffset
      type: System.Int32
      description: Where to start getting data from the source buffer
    - id: count
      type: System.Int32
      description: Number of bytes to get from offset
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Overrides Function WriteAsync(buffer As Byte(), sourceOffset As Integer, count As Integer, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.ProviderStream.WriteAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  nameWithType.vb: ProviderStream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: SuperOffice.IO.ProviderStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
- uid: SuperOffice.IO.ProviderStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.ProviderStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: FlushAsync(CancellationToken)
  nameWithType: ProviderStream.FlushAsync(CancellationToken)
  fullName: SuperOffice.IO.ProviderStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n\n"
  syntax:
    content: >-
      [CreateSyncVersion(OmitNullableDirective = true)]

      public override Task FlushAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <CreateSyncVersion(OmitNullableDirective:=True)>

      Public Overrides Function FlushAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.ProviderStream.FlushAsync*
  attributes:
  - type: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute
    ctor: Zomp.SyncMethodGenerator.CreateSyncVersionAttribute.#ctor
    arguments: []
    namedArguments:
    - name: OmitNullableDirective
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.IO.ProviderStream.Close
  commentId: M:SuperOffice.IO.ProviderStream.Close
  id: Close
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: ProviderStream.Close()
  fullName: SuperOffice.IO.ProviderStream.Close()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nClose the stream. Note that this method has no CloseAsync equivalent in the base class.\n"
  remarks: "\nI think we&apos;re trapped into using SafeBlock here, since the base class does not support async Close.\nAnyway, we shouldn&apos;t even be here: https://learn.microsoft.com/en-us/dotnet/api/system.io.stream.close?view=net-8.0#notes-to-inheritors\nOn the other hand, NET Framework does not have a DisposeAsync so we&apos;d end up with a SafeBlock here anyway...\n<br />As Microsoft says about the <strong>Dispose</strong> method on <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>:<br />\nPlace all cleanup logic for your stream object in Dispose(Boolean). Do not override Close().\nNote that because of backward compatibility requirements, this method&apos;s implementation differs from the recommended guidance for the Dispose pattern. This method calls Close(), which then calls Dispose(Boolean).\n<br />\nWe do not respect this advice, but this code is super-old and we&apos;re not going to change it now.\n"
  syntax:
    content: public override void Close()
    content.vb: Public Overrides Sub Close
  overload: SuperOffice.IO.ProviderStream.Close*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.IO.ProviderStream.SetLength(System.Int64)
  commentId: M:SuperOffice.IO.ProviderStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  nameWithType: ProviderStream.SetLength(Int64)
  fullName: SuperOffice.IO.ProviderStream.SetLength(System.Int64)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n\n"
  syntax:
    content: public override void SetLength(long value)
    parameters:
    - id: value
      type: System.Int64
    content.vb: Public Overrides Sub SetLength(value As Long)
  overload: SuperOffice.IO.ProviderStream.SetLength*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.IO.ProviderStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:SuperOffice.IO.ProviderStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  nameWithType: ProviderStream.Seek(Int64, SeekOrigin)
  fullName: SuperOffice.IO.ProviderStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n\n"
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    parameters:
    - id: offset
      type: System.Int64
    - id: origin
      type: System.IO.SeekOrigin
    return:
      type: System.Int64
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
  overload: SuperOffice.IO.ProviderStream.Seek*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.IO.ProviderStream.Dispose
  commentId: M:SuperOffice.IO.ProviderStream.Dispose
  id: Dispose
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ProviderStream.Dispose()
  fullName: SuperOffice.IO.ProviderStream.Dispose()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nDispose of the document stream\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SuperOffice.IO.ProviderStream.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.IO.ProviderStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.ProviderStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  nameWithType: ProviderStream.Read(Byte[], Int32, Int32)
  fullName: SuperOffice.IO.ProviderStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nRead a block of bytes from a stream, and insert them into the given position in the\ncallers buffer array\n"
  remarks: "\nNote that the actual remote stream or file may be read using other chunk sizes than what is\nuse in the incoming &apos;count&apos; parameter. The <xref href=\"SuperOffice.IO.ProviderStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property will report the\nposition as seen by the caller, not the position as read from the file.\n"
  syntax:
    content: public override int Read(byte[] buffer, int offsetIntoDestination, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: Destination buffer
    - id: offsetIntoDestination
      type: System.Int32
      description: Where to start in the destination
    - id: count
      type: System.Int32
      description: Number of bytes to read
    return:
      type: System.Int32
      description: Number of bytes actually read
    content.vb: Public Overrides Function Read(buffer As Byte(), offsetIntoDestination As Integer, count As Integer) As Integer
  overload: SuperOffice.IO.ProviderStream.Read*
  nameWithType.vb: ProviderStream.Read(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: SuperOffice.IO.ProviderStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: SuperOffice.IO.ProviderStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.ProviderStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  nameWithType: ProviderStream.Write(Byte[], Int32, Int32)
  fullName: SuperOffice.IO.ProviderStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nWrite a chunk of bytes to a stream, potentially triggering a write to the\nunderlying file or remote stream\n"
  syntax:
    content: public override void Write(byte[] buffer, int sourceOffset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: Source buffer containing data
    - id: sourceOffset
      type: System.Int32
      description: Where to start getting data from the source buffer
    - id: count
      type: System.Int32
      description: Number of bytes to get from offset
    content.vb: Public Overrides Sub Write(buffer As Byte(), sourceOffset As Integer, count As Integer)
  overload: SuperOffice.IO.ProviderStream.Write*
  nameWithType.vb: ProviderStream.Write(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: SuperOffice.IO.ProviderStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: SuperOffice.IO.ProviderStream.Flush
  commentId: M:SuperOffice.IO.ProviderStream.Flush
  id: Flush
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: ProviderStream.Flush()
  fullName: SuperOffice.IO.ProviderStream.Flush()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overload: SuperOffice.IO.ProviderStream.Flush*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.IO.ProviderStream.CanSeek
  commentId: P:SuperOffice.IO.ProviderStream.CanSeek
  id: CanSeek
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: CanSeek
  nameWithType: ProviderStream.CanSeek
  fullName: SuperOffice.IO.ProviderStream.CanSeek
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nDoes the stream support seeking?\n"
  syntax:
    content: public override bool CanSeek { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
  overload: SuperOffice.IO.ProviderStream.CanSeek*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SuperOffice.IO.ProviderStream.CanRead
  commentId: P:SuperOffice.IO.ProviderStream.CanRead
  id: CanRead
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: CanRead
  nameWithType: ProviderStream.CanRead
  fullName: SuperOffice.IO.ProviderStream.CanRead
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nDoes the stream support reading?\n"
  syntax:
    content: public override bool CanRead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
  overload: SuperOffice.IO.ProviderStream.CanRead*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SuperOffice.IO.ProviderStream.CanWrite
  commentId: P:SuperOffice.IO.ProviderStream.CanWrite
  id: CanWrite
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: CanWrite
  nameWithType: ProviderStream.CanWrite
  fullName: SuperOffice.IO.ProviderStream.CanWrite
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nDoes the stream support writing?\n"
  syntax:
    content: public override bool CanWrite { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
  overload: SuperOffice.IO.ProviderStream.CanWrite*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SuperOffice.IO.ProviderStream.Length
  commentId: P:SuperOffice.IO.ProviderStream.Length
  id: Length
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: ProviderStream.Length
  fullName: SuperOffice.IO.ProviderStream.Length
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\n\n"
  syntax:
    content: public override long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overrides ReadOnly Property Length As Long
  overload: SuperOffice.IO.ProviderStream.Length*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SuperOffice.IO.ProviderStream.Position
  commentId: P:SuperOffice.IO.ProviderStream.Position
  id: Position
  parent: SuperOffice.IO.ProviderStream
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: ProviderStream.Position
  fullName: SuperOffice.IO.ProviderStream.Position
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nCurrent position in stream buffer, as seen by caller (not internal chunk buffer position)\n"
  syntax:
    content: public override long Position { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overrides Property Position As Long
  overload: SuperOffice.IO.ProviderStream.Position*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.IO.ProviderStream.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ProviderStream, To>()
  nameWithType: EnumUtil.MapEnums<ProviderStream, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.IO.ProviderStream, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ProviderStream, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.ProviderStream, To)()
  name.vb: MapEnums(Of ProviderStream, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ProviderStream, To>
    nameWithType: EnumUtil.MapEnums<ProviderStream, To>
    fullName: EnumUtil.MapEnums<SuperOffice.IO.ProviderStream, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ProviderStream, To)
    nameWithType: EnumUtil.MapEnums(Of ProviderStream, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.IO.ProviderStream, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ProviderStream.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ProviderStream, To>()
  nameWithType: Converters.MapEnums<ProviderStream, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ProviderStream, To>()
  nameWithType.vb: Converters.MapEnums(Of ProviderStream, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ProviderStream, To)()
  name.vb: MapEnums(Of ProviderStream, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ProviderStream, To>
    nameWithType: Converters.MapEnums<ProviderStream, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.ProviderStream, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ProviderStream, To)
    nameWithType: Converters.MapEnums(Of ProviderStream, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.ProviderStream, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.IO.ProviderStream.GetProviderStreamAsync*
  commentId: Overload:SuperOffice.IO.ProviderStream.GetProviderStreamAsync
  isExternal: true
  name: GetProviderStreamAsync
  nameWithType: ProviderStream.GetProviderStreamAsync
  fullName: SuperOffice.IO.ProviderStream.GetProviderStreamAsync
- uid: SuperOffice.IO.IStreamProvider
  commentId: T:SuperOffice.IO.IStreamProvider
  parent: SuperOffice.IO
  isExternal: true
  name: IStreamProvider
  nameWithType: IStreamProvider
  fullName: SuperOffice.IO.IStreamProvider
- uid: SuperOffice.IO.ProviderStream.AccessMode
  commentId: T:SuperOffice.IO.ProviderStream.AccessMode
  parent: SuperOffice.IO
  isExternal: true
  name: ProviderStream.AccessMode
  nameWithType: ProviderStream.AccessMode
  fullName: SuperOffice.IO.ProviderStream.AccessMode
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.IO.ProviderStream}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.IO.ProviderStream}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ProviderStream>
  nameWithType: Task<ProviderStream>
  fullName: System.Threading.Tasks.Task<SuperOffice.IO.ProviderStream>
  nameWithType.vb: Task(Of ProviderStream)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.IO.ProviderStream)
  name.vb: Task(Of ProviderStream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.IO.ProviderStream
    name: ProviderStream
    nameWithType: ProviderStream
    fullName: SuperOffice.IO.ProviderStream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.IO.ProviderStream
    name: ProviderStream
    nameWithType: ProviderStream
    fullName: SuperOffice.IO.ProviderStream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ProviderStream.ReadAsync*
  commentId: Overload:SuperOffice.IO.ProviderStream.ReadAsync
  isExternal: true
  name: ReadAsync
  nameWithType: ProviderStream.ReadAsync
  fullName: SuperOffice.IO.ProviderStream.ReadAsync
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.ProviderStream.WriteAsync*
  commentId: Overload:SuperOffice.IO.ProviderStream.WriteAsync
  isExternal: true
  name: WriteAsync
  nameWithType: ProviderStream.WriteAsync
  fullName: SuperOffice.IO.ProviderStream.WriteAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.IO.ProviderStream.FlushAsync*
  commentId: Overload:SuperOffice.IO.ProviderStream.FlushAsync
  isExternal: true
  name: FlushAsync
  nameWithType: ProviderStream.FlushAsync
  fullName: SuperOffice.IO.ProviderStream.FlushAsync
- uid: SuperOffice.IO.ProviderStream.Close*
  commentId: Overload:SuperOffice.IO.ProviderStream.Close
  isExternal: true
  name: Close
  nameWithType: ProviderStream.Close
  fullName: SuperOffice.IO.ProviderStream.Close
- uid: SuperOffice.IO.ProviderStream.SetLength*
  commentId: Overload:SuperOffice.IO.ProviderStream.SetLength
  isExternal: true
  name: SetLength
  nameWithType: ProviderStream.SetLength
  fullName: SuperOffice.IO.ProviderStream.SetLength
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: SuperOffice.IO.ProviderStream.Seek*
  commentId: Overload:SuperOffice.IO.ProviderStream.Seek
  isExternal: true
  name: Seek
  nameWithType: ProviderStream.Seek
  fullName: SuperOffice.IO.ProviderStream.Seek
- uid: System.IO.SeekOrigin
  commentId: '!:System.IO.SeekOrigin'
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: SuperOffice.IO.ProviderStream.Dispose*
  commentId: Overload:SuperOffice.IO.ProviderStream.Dispose
  isExternal: true
  name: Dispose
  nameWithType: ProviderStream.Dispose
  fullName: SuperOffice.IO.ProviderStream.Dispose
- uid: SuperOffice.IO.ProviderStream.Read*
  commentId: Overload:SuperOffice.IO.ProviderStream.Read
  isExternal: true
  name: Read
  nameWithType: ProviderStream.Read
  fullName: SuperOffice.IO.ProviderStream.Read
- uid: SuperOffice.IO.ProviderStream.Write*
  commentId: Overload:SuperOffice.IO.ProviderStream.Write
  isExternal: true
  name: Write
  nameWithType: ProviderStream.Write
  fullName: SuperOffice.IO.ProviderStream.Write
- uid: SuperOffice.IO.ProviderStream.Flush*
  commentId: Overload:SuperOffice.IO.ProviderStream.Flush
  isExternal: true
  name: Flush
  nameWithType: ProviderStream.Flush
  fullName: SuperOffice.IO.ProviderStream.Flush
- uid: SuperOffice.IO.ProviderStream.CanSeek*
  commentId: Overload:SuperOffice.IO.ProviderStream.CanSeek
  isExternal: true
  name: CanSeek
  nameWithType: ProviderStream.CanSeek
  fullName: SuperOffice.IO.ProviderStream.CanSeek
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.IO.ProviderStream.CanRead*
  commentId: Overload:SuperOffice.IO.ProviderStream.CanRead
  isExternal: true
  name: CanRead
  nameWithType: ProviderStream.CanRead
  fullName: SuperOffice.IO.ProviderStream.CanRead
- uid: SuperOffice.IO.ProviderStream.CanWrite*
  commentId: Overload:SuperOffice.IO.ProviderStream.CanWrite
  isExternal: true
  name: CanWrite
  nameWithType: ProviderStream.CanWrite
  fullName: SuperOffice.IO.ProviderStream.CanWrite
- uid: SuperOffice.IO.ProviderStream.Length*
  commentId: Overload:SuperOffice.IO.ProviderStream.Length
  isExternal: true
  name: Length
  nameWithType: ProviderStream.Length
  fullName: SuperOffice.IO.ProviderStream.Length
- uid: SuperOffice.IO.ProviderStream.Position*
  commentId: Overload:SuperOffice.IO.ProviderStream.Position
  isExternal: true
  name: Position
  nameWithType: ProviderStream.Position
  fullName: SuperOffice.IO.ProviderStream.Position
