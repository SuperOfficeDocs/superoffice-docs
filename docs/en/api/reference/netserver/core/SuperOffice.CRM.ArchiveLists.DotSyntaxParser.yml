### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser
  commentId: T:SuperOffice.CRM.ArchiveLists.DotSyntaxParser
  id: DotSyntaxParser
  parent: SuperOffice.CRM.ArchiveLists
  children:
  - SuperOffice.CRM.ArchiveLists.DotSyntaxParser.#ctor(System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender})
  - SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree(System.String[])
  - SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches
  langs:
  - csharp
  - vb
  name: DotSyntaxParser
  nameWithType: DotSyntaxParser
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public class DotSyntaxParser
    content.vb: Public Class DotSyntaxParser
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.ArchiveLists.DotSyntaxParser.EnumUtil.MapEnums``2
  - SuperOffice.CRM.ArchiveLists.DotSyntaxParser.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.#ctor(System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender})
  commentId: M:SuperOffice.CRM.ArchiveLists.DotSyntaxParser.#ctor(System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender})
  id: '#ctor(System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender})'
  parent: SuperOffice.CRM.ArchiveLists.DotSyntaxParser
  langs:
  - csharp
  - vb
  name: DotSyntaxParser(IEnumerable<IArchiveExtender>)
  nameWithType: DotSyntaxParser.DotSyntaxParser(IEnumerable<IArchiveExtender>)
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.DotSyntaxParser(System.Collections.Generic.IEnumerable<SuperOffice.CRM.ArchiveLists.IArchiveExtender>)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  syntax:
    content: public DotSyntaxParser(IEnumerable<IArchiveExtender> baseExtenders)
    parameters:
    - id: baseExtenders
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender}
    content.vb: Public Sub New(baseExtenders As IEnumerable(Of IArchiveExtender))
  overload: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.#ctor*
  nameWithType.vb: DotSyntaxParser.DotSyntaxParser(IEnumerable(Of IArchiveExtender))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.DotSyntaxParser(System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.ArchiveLists.IArchiveExtender))
  name.vb: DotSyntaxParser(IEnumerable(Of IArchiveExtender))
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree(System.String[])
  commentId: M:SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree(System.String[])
  id: ConstructExtenderTree(System.String[])
  parent: SuperOffice.CRM.ArchiveLists.DotSyntaxParser
  langs:
  - csharp
  - vb
  name: ConstructExtenderTree(String[])
  nameWithType: DotSyntaxParser.ConstructExtenderTree(String[])
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree(System.String[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nConstruct a (sub)tree of archive extenders based on the dot-syntax column names provided\n"
  remarks: "\nThe following grammar defines what dot-syntax really is:\n<pre><code>dotSyntax := &lt;table>[&lt;join>, ...].&lt;field>\ntable := table name from database\nfield := field name from database, or column name defined by the module handling that table\njoin := &lt;outerjoin> | &lt;innerjoin> | &lt;rightjoin>\nouterjoin := .&lt;fk_field>\ninnerjoin := :&lt;fk_field>\nrightjoin := .(&lt;table>->&lt;fk_field>)\nfk_field := &lt;foreign_key> | &lt;field_name>[&lt;table_name>]     note the square brackets are literals here!\nforeign_key := field name from database, where field must be defined as a foreign key in the dictionary\nfield_name := any field name in the current table that is of type int\ntable_name := target table, relation does <strong>not</strong> need to be defined in the dictionary in this case</code></pre>\nField names must follow this grammar, otherwise exceptions will be generated. Additionally, all\njoin field and table names must be valid, by reference to the runtime dictionary; but note that right-joins as well as left-joins\nusing the square-bracket syntax to specify target table do not need to correspond to relations declared in the\ndictionary.\n<p></p>Final field names\ncan be anything, as long as the code handling that table recognizes the field name. If no specific\ncode is found for a table, a generic (dynamic) extender will be used; this requires field names\nto match database field names.\n<p></p>\nNote that we treat extenders through the IArchiveDynamicExtender as seldom as possible, and\nuse plain IArchiveExtender wherever possible - the Dynamic part is supposed to be a minimalist\nadd-on. It also enables us to do hybrid structures, where many parts are standard extenders.\n"
  syntax:
    content: public IArchiveExtender ConstructExtenderTree(string[] columnNames)
    parameters:
    - id: columnNames
      type: System.String[]
    return:
      type: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    content.vb: Public Function ConstructExtenderTree(columnNames As String()) As IArchiveExtender
  overload: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree*
  nameWithType.vb: DotSyntaxParser.ConstructExtenderTree(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree(System.String())
  name.vb: ConstructExtenderTree(String())
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches
  commentId: P:SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches
  id: TolerateBaseMismatches
  parent: SuperOffice.CRM.ArchiveLists.DotSyntaxParser
  langs:
  - csharp
  - vb
  name: TolerateBaseMismatches
  nameWithType: DotSyntaxParser.TolerateBaseMismatches
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nIf true, then dynamic columns that do not match their base will be tolerated (skipped); otherwise exceptions will\nbe thrown if a dynamic column specifies an unknown base or foreign key\n"
  syntax:
    content: public bool TolerateBaseMismatches { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property TolerateBaseMismatches As Boolean
  overload: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.ArchiveLists
  commentId: N:SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: SuperOffice.CRM.ArchiveLists
  nameWithType: SuperOffice.CRM.ArchiveLists
  fullName: SuperOffice.CRM.ArchiveLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<DotSyntaxParser, To>()
  nameWithType: EnumUtil.MapEnums<DotSyntaxParser, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of DotSyntaxParser, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To)()
  name.vb: MapEnums(Of DotSyntaxParser, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<DotSyntaxParser, To>
    nameWithType: EnumUtil.MapEnums<DotSyntaxParser, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of DotSyntaxParser, To)
    nameWithType: EnumUtil.MapEnums(Of DotSyntaxParser, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<DotSyntaxParser, To>()
  nameWithType: Converters.MapEnums<DotSyntaxParser, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To>()
  nameWithType.vb: Converters.MapEnums(Of DotSyntaxParser, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To)()
  name.vb: MapEnums(Of DotSyntaxParser, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<DotSyntaxParser, To>
    nameWithType: Converters.MapEnums<DotSyntaxParser, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of DotSyntaxParser, To)
    nameWithType: Converters.MapEnums(Of DotSyntaxParser, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.DotSyntaxParser, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.#ctor*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.DotSyntaxParser.#ctor
  isExternal: true
  name: DotSyntaxParser
  nameWithType: DotSyntaxParser.DotSyntaxParser
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.DotSyntaxParser
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.IArchiveExtender}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IArchiveExtender>
  nameWithType: IEnumerable<IArchiveExtender>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.ArchiveLists.IArchiveExtender>
  nameWithType.vb: IEnumerable(Of IArchiveExtender)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.ArchiveLists.IArchiveExtender)
  name.vb: IEnumerable(Of IArchiveExtender)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    name: IArchiveExtender
    nameWithType: IArchiveExtender
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    name: IArchiveExtender
    nameWithType: IArchiveExtender
    fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree
  isExternal: true
  name: ConstructExtenderTree
  nameWithType: DotSyntaxParser.ConstructExtenderTree
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.ConstructExtenderTree
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.ArchiveLists.IArchiveExtender
  commentId: T:SuperOffice.CRM.ArchiveLists.IArchiveExtender
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: IArchiveExtender
  nameWithType: IArchiveExtender
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveExtender
- uid: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches
  isExternal: true
  name: TolerateBaseMismatches
  nameWithType: DotSyntaxParser.TolerateBaseMismatches
  fullName: SuperOffice.CRM.ArchiveLists.DotSyntaxParser.TolerateBaseMismatches
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
