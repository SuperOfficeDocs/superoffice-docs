### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.UsedPrefKeysUtils
  commentId: T:SuperOffice.Util.UsedPrefKeysUtils
  id: UsedPrefKeysUtils
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.UsedPrefKeysUtils.#ctor
  - SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys
  - SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection(System.String)
  langs:
  - csharp
  - vb
  name: UsedPrefKeysUtils
  nameWithType: UsedPrefKeysUtils
  fullName: SuperOffice.Util.UsedPrefKeysUtils
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: 'public class UsedPrefKeysUtils : Object'
    content.vb: >-
      Public Class UsedPrefKeysUtils
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Util.UsedPrefKeysUtils.EnumUtil.MapEnums``2
  - SuperOffice.Util.UsedPrefKeysUtils.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.UsedPrefKeysUtils)
  - SuperOffice.Util.UsedPrefKeysUtils.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Util.UsedPrefKeysUtils.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys
  commentId: M:SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys
  id: GetUsedPrefKeys
  parent: SuperOffice.Util.UsedPrefKeysUtils
  langs:
  - csharp
  - vb
  name: GetUsedPrefKeys()
  nameWithType: UsedPrefKeysUtils.GetUsedPrefKeys()
  fullName: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: public static HashSet<string> GetUsedPrefKeys()
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Shared Function GetUsedPrefKeys As HashSet(Of String)
  overload: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection(System.String)
  commentId: M:SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection(System.String)
  id: GetUsedPrefKeysInSection(System.String)
  parent: SuperOffice.Util.UsedPrefKeysUtils
  langs:
  - csharp
  - vb
  name: GetUsedPrefKeysInSection(String)
  nameWithType: UsedPrefKeysUtils.GetUsedPrefKeysInSection(String)
  fullName: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: public static HashSet<string> GetUsedPrefKeysInSection(string section)
    parameters:
    - id: section
      type: System.String
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Shared Function GetUsedPrefKeysInSection(section As String) As HashSet(Of String)
  overload: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.UsedPrefKeysUtils.#ctor
  commentId: M:SuperOffice.Util.UsedPrefKeysUtils.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.UsedPrefKeysUtils
  langs:
  - csharp
  - vb
  name: UsedPrefKeysUtils()
  nameWithType: UsedPrefKeysUtils.UsedPrefKeysUtils()
  fullName: SuperOffice.Util.UsedPrefKeysUtils.UsedPrefKeysUtils()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Util
  syntax:
    content: public UsedPrefKeysUtils()
    content.vb: Public Sub New
  overload: SuperOffice.Util.UsedPrefKeysUtils.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Util.UsedPrefKeysUtils.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<UsedPrefKeysUtils, To>()
  nameWithType: EnumUtil.MapEnums<UsedPrefKeysUtils, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.UsedPrefKeysUtils, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of UsedPrefKeysUtils, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.UsedPrefKeysUtils, To)()
  name.vb: MapEnums(Of UsedPrefKeysUtils, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<UsedPrefKeysUtils, To>
    nameWithType: EnumUtil.MapEnums<UsedPrefKeysUtils, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.UsedPrefKeysUtils, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of UsedPrefKeysUtils, To)
    nameWithType: EnumUtil.MapEnums(Of UsedPrefKeysUtils, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.UsedPrefKeysUtils, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.UsedPrefKeysUtils.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.UsedPrefKeysUtils)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<UsedPrefKeysUtils>(UsedPrefKeysUtils)
  nameWithType: ObjectExtensions.AssignByReflection<UsedPrefKeysUtils>(UsedPrefKeysUtils)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.UsedPrefKeysUtils>(SuperOffice.Util.UsedPrefKeysUtils)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of UsedPrefKeysUtils)(UsedPrefKeysUtils)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.UsedPrefKeysUtils)(SuperOffice.Util.UsedPrefKeysUtils)
  name.vb: AssignByReflection(Of UsedPrefKeysUtils)(UsedPrefKeysUtils)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<UsedPrefKeysUtils>
    nameWithType: ObjectExtensions.AssignByReflection<UsedPrefKeysUtils>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.UsedPrefKeysUtils>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.UsedPrefKeysUtils
    name: UsedPrefKeysUtils
    nameWithType: UsedPrefKeysUtils
    fullName: SuperOffice.Util.UsedPrefKeysUtils
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of UsedPrefKeysUtils)
    nameWithType: ObjectExtensions.AssignByReflection(Of UsedPrefKeysUtils)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.UsedPrefKeysUtils)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.UsedPrefKeysUtils
    name: UsedPrefKeysUtils
    nameWithType: UsedPrefKeysUtils
    fullName: SuperOffice.Util.UsedPrefKeysUtils
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.UsedPrefKeysUtils.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<UsedPrefKeysUtils>()
  nameWithType: ObjectExtensions.GraphCopy<UsedPrefKeysUtils>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.UsedPrefKeysUtils>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of UsedPrefKeysUtils)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.UsedPrefKeysUtils)()
  name.vb: GraphCopy(Of UsedPrefKeysUtils)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<UsedPrefKeysUtils>
    nameWithType: ObjectExtensions.GraphCopy<UsedPrefKeysUtils>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.UsedPrefKeysUtils>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of UsedPrefKeysUtils)
    nameWithType: ObjectExtensions.GraphCopy(Of UsedPrefKeysUtils)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.UsedPrefKeysUtils)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.UsedPrefKeysUtils.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<UsedPrefKeysUtils, To>()
  nameWithType: Converters.MapEnums<UsedPrefKeysUtils, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.UsedPrefKeysUtils, To>()
  nameWithType.vb: Converters.MapEnums(Of UsedPrefKeysUtils, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.UsedPrefKeysUtils, To)()
  name.vb: MapEnums(Of UsedPrefKeysUtils, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<UsedPrefKeysUtils, To>
    nameWithType: Converters.MapEnums<UsedPrefKeysUtils, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.UsedPrefKeysUtils, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of UsedPrefKeysUtils, To)
    nameWithType: Converters.MapEnums(Of UsedPrefKeysUtils, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.UsedPrefKeysUtils, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys*
  commentId: Overload:SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys
  isExternal: true
  name: GetUsedPrefKeys
  nameWithType: UsedPrefKeysUtils.GetUsedPrefKeys
  fullName: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeys
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: '!:System.Collections.Generic.HashSet{System.String}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: System.Collections.Generic.HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: System.Collections.Generic.HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: System.Collections.Generic.HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection*
  commentId: Overload:SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection
  isExternal: true
  name: GetUsedPrefKeysInSection
  nameWithType: UsedPrefKeysUtils.GetUsedPrefKeysInSection
  fullName: SuperOffice.Util.UsedPrefKeysUtils.GetUsedPrefKeysInSection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Util.UsedPrefKeysUtils.#ctor*
  commentId: Overload:SuperOffice.Util.UsedPrefKeysUtils.#ctor
  isExternal: true
  name: UsedPrefKeysUtils
  nameWithType: UsedPrefKeysUtils.UsedPrefKeysUtils
  fullName: SuperOffice.Util.UsedPrefKeysUtils.UsedPrefKeysUtils
