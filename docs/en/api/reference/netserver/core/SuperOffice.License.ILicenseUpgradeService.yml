### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.ILicenseUpgradeService
  commentId: T:SuperOffice.License.ILicenseUpgradeService
  id: ILicenseUpgradeService
  parent: SuperOffice.License
  children:
  - SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ILicenseUpgradeService
  nameWithType: ILicenseUpgradeService
  fullName: SuperOffice.License.ILicenseUpgradeService
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public interface ILicenseUpgradeService
    content.vb: Public Interface ILicenseUpgradeService
  extensionMethods:
  - SuperOffice.License.ILicenseUpgradeService.EnumUtil.MapEnums``2
  - SuperOffice.License.ILicenseUpgradeService.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: CheckUpgradeToNewPricelistAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseUpgradeService
  langs:
  - csharp
  - vb
  name: CheckUpgradeToNewPricelistAsync(String, String, String, CancellationToken)
  nameWithType: ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync(String, String, String, CancellationToken)
  fullName: SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: Task CheckUpgradeToNewPricelistAsync(string systemUser, string password, string additionalInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: systemUser
      type: System.String
    - id: password
      type: System.String
    - id: additionalInfo
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function CheckUpgradeToNewPricelistAsync(systemUser As String, password As String, additionalInfo As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync*
- uid: SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  id: UpgradeToNewPricelistServerSideAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseUpgradeService
  langs:
  - csharp
  - vb
  name: UpgradeToNewPricelistServerSideAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  nameWithType: ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName: SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync(System.String, System.String, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: Task<bool> UpgradeToNewPricelistServerSideAsync(string systemUser, string password, string additionalInfo, ProgressEstimateCallback estimateCB, ProgressStepCallback stepCB, CancellationToken cancellationToken = null)
    parameters:
    - id: systemUser
      type: System.String
    - id: password
      type: System.String
    - id: additionalInfo
      type: System.String
    - id: estimateCB
      type: SuperOffice.CRM.ProgressEstimateCallback
    - id: stepCB
      type: SuperOffice.CRM.ProgressStepCallback
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function UpgradeToNewPricelistServerSideAsync(systemUser As String, password As String, additionalInfo As String, estimateCB As ProgressEstimateCallback, stepCB As ProgressStepCallback, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync*
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: SuperOffice.License.ILicenseUpgradeService.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ILicenseUpgradeService, To>()
  nameWithType: EnumUtil.MapEnums<ILicenseUpgradeService, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.ILicenseUpgradeService, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ILicenseUpgradeService, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.ILicenseUpgradeService, To)()
  name.vb: MapEnums(Of ILicenseUpgradeService, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ILicenseUpgradeService, To>
    nameWithType: EnumUtil.MapEnums<ILicenseUpgradeService, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.ILicenseUpgradeService, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ILicenseUpgradeService, To)
    nameWithType: EnumUtil.MapEnums(Of ILicenseUpgradeService, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.ILicenseUpgradeService, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ILicenseUpgradeService.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ILicenseUpgradeService, To>()
  nameWithType: Converters.MapEnums<ILicenseUpgradeService, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ILicenseUpgradeService, To>()
  nameWithType.vb: Converters.MapEnums(Of ILicenseUpgradeService, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ILicenseUpgradeService, To)()
  name.vb: MapEnums(Of ILicenseUpgradeService, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ILicenseUpgradeService, To>
    nameWithType: Converters.MapEnums<ILicenseUpgradeService, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ILicenseUpgradeService, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ILicenseUpgradeService, To)
    nameWithType: Converters.MapEnums(Of ILicenseUpgradeService, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ILicenseUpgradeService, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync*
  commentId: Overload:SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync
  isExternal: true
  name: CheckUpgradeToNewPricelistAsync
  nameWithType: ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync
  fullName: SuperOffice.License.ILicenseUpgradeService.CheckUpgradeToNewPricelistAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync*
  commentId: Overload:SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync
  isExternal: true
  name: UpgradeToNewPricelistServerSideAsync
  nameWithType: ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync
  fullName: SuperOffice.License.ILicenseUpgradeService.UpgradeToNewPricelistServerSideAsync
- uid: SuperOffice.CRM.ProgressEstimateCallback
  commentId: T:SuperOffice.CRM.ProgressEstimateCallback
  parent: SuperOffice.CRM
  isExternal: true
  name: ProgressEstimateCallback
  nameWithType: ProgressEstimateCallback
  fullName: SuperOffice.CRM.ProgressEstimateCallback
- uid: SuperOffice.CRM.ProgressStepCallback
  commentId: T:SuperOffice.CRM.ProgressStepCallback
  parent: SuperOffice.CRM
  isExternal: true
  name: ProgressStepCallback
  nameWithType: ProgressStepCallback
  fullName: SuperOffice.CRM.ProgressStepCallback
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
