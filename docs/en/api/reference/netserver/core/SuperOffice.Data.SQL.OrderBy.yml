### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.OrderBy
  commentId: T:SuperOffice.Data.SQL.OrderBy
  id: OrderBy
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.OrderBy.#ctor
  - SuperOffice.Data.SQL.OrderBy.#ctor(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.OrderBy.#ctor(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  - SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  - SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument,System.String)
  - SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.OrderBy)
  - SuperOffice.Data.SQL.OrderBy.AggregationExist
  - SuperOffice.Data.SQL.OrderBy.Argument
  - SuperOffice.Data.SQL.OrderBy.Clear
  - SuperOffice.Data.SQL.OrderBy.Clone
  - SuperOffice.Data.SQL.OrderBy.Contains(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.OrderBy.Count
  - SuperOffice.Data.SQL.OrderBy.GetNumberOfItems
  - SuperOffice.Data.SQL.OrderBy.SortOrder
  - SuperOffice.Data.SQL.OrderBy.ToString
  langs:
  - csharp
  - vb
  name: OrderBy
  nameWithType: OrderBy
  fullName: SuperOffice.Data.SQL.OrderBy
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe OrderBy-class.\n"
  syntax:
    content: 'public sealed class OrderBy : ICloneable'
    content.vb: >-
      Public NotInheritable Class OrderBy
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SQL.OrderBy.EnumUtil.MapEnums``2
  - SuperOffice.Data.SQL.OrderBy.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.OrderBy)
  - SuperOffice.Data.SQL.OrderBy.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.SQL.OrderBy.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Data.SQL.OrderBy.Contains(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.OrderBy.Contains(SuperOffice.Data.SQL.Argument)
  id: Contains(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Contains(Argument)
  nameWithType: OrderBy.Contains(Argument)
  fullName: SuperOffice.Data.SQL.OrderBy.Contains(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public bool Contains(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
    return:
      type: System.Boolean
    content.vb: Public Function Contains(arg As Argument) As Boolean
  overload: SuperOffice.Data.SQL.OrderBy.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.#ctor
  commentId: M:SuperOffice.Data.SQL.OrderBy.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: OrderBy()
  nameWithType: OrderBy.OrderBy()
  fullName: SuperOffice.Data.SQL.OrderBy.OrderBy()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInitializes a new instance of the <xref href=\"SuperOffice.Data.SQL.OrderBy\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public OrderBy()
    content.vb: Public Sub New
  overload: SuperOffice.Data.SQL.OrderBy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.#ctor(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.OrderBy.#ctor(SuperOffice.Data.SQL.Argument)
  id: '#ctor(SuperOffice.Data.SQL.Argument)'
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: OrderBy(Argument)
  nameWithType: OrderBy.OrderBy(Argument)
  fullName: SuperOffice.Data.SQL.OrderBy.OrderBy(SuperOffice.Data.SQL.Argument)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInitialize a new instance of the  <xref href=\"SuperOffice.Data.SQL.OrderBy\" data-throw-if-not-resolved=\"false\"></xref> class,\nand add the given argument as the first orderby, with ascending order.\n"
  syntax:
    content: public OrderBy(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
      description: Argument to order by
    content.vb: Public Sub New(arg As Argument)
  overload: SuperOffice.Data.SQL.OrderBy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.#ctor(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  commentId: M:SuperOffice.Data.SQL.OrderBy.#ctor(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  id: '#ctor(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)'
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: OrderBy(Argument, OrderBySortType)
  nameWithType: OrderBy.OrderBy(Argument, OrderBySortType)
  fullName: SuperOffice.Data.SQL.OrderBy.OrderBy(SuperOffice.Data.SQL.Argument, SuperOffice.Data.OrderBySortType)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInitialize a new instance of the  <xref href=\"SuperOffice.Data.SQL.OrderBy\" data-throw-if-not-resolved=\"false\"></xref> class,\nand add the given argument as the first orderby, with the given order.\n"
  syntax:
    content: public OrderBy(Argument arg, OrderBySortType type)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
      description: Argument to order by
    - id: type
      type: SuperOffice.Data.OrderBySortType
      description: Ascending/descending
    content.vb: Public Sub New(arg As Argument, type As OrderBySortType)
  overload: SuperOffice.Data.SQL.OrderBy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument)
  id: Add(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Add(Argument)
  nameWithType: OrderBy.Add(Argument)
  fullName: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nWill add the in-parameter to the OrderBy collection.\nDefault sort order is ascending.\n"
  syntax:
    content: public void Add(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
      description: The argument to add to the collection
    content.vb: Public Sub Add(arg As Argument)
  overload: SuperOffice.Data.SQL.OrderBy.Add*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: "\nThrown if the argument is null, or is a Parameter with a zero length\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.FieldInfo[])
  id: Add(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Add(FieldInfo[])
  nameWithType: OrderBy.Add(FieldInfo[])
  fullName: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdd an array of FieldInfo specifications to the OrderBy collection; sort order will be ascending\n"
  syntax:
    content: public void Add(FieldInfo[] fields)
    parameters:
    - id: fields
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: Zero or more FieldInfo objects to add
    content.vb: Public Sub Add(fields As FieldInfo())
  overload: SuperOffice.Data.SQL.OrderBy.Add*
  nameWithType.vb: OrderBy.Add(FieldInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.FieldInfo())
  name.vb: Add(FieldInfo())
- uid: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  commentId: M:SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  id: Add(SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType)
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Add(Argument, OrderBySortType)
  nameWithType: OrderBy.Add(Argument, OrderBySortType)
  fullName: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument, SuperOffice.Data.OrderBySortType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nWill add the in-parameter to the OrderBy collection.\nSort-order will be set to the in-parameter sortOrder of type OrderBySortType.\n"
  syntax:
    content: public void Add(Argument arg, OrderBySortType sortOrder)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
      description: The argument to add to the Collection.
    - id: sortOrder
      type: SuperOffice.Data.OrderBySortType
      description: The sort order.
    content.vb: Public Sub Add(arg As Argument, sortOrder As OrderBySortType)
  overload: SuperOffice.Data.SQL.OrderBy.Add*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: "\nThrown if the argument is null, or is a Parameter with a zero length\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument,System.String)
  commentId: M:SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument,System.String)
  id: Add(SuperOffice.Data.SQL.Argument,System.String)
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Add(Argument, String)
  nameWithType: OrderBy.Add(Argument, String)
  fullName: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.Argument, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nWill add the in-argument to the OrderBy collection. \nSort order will be set to the in-parameter sortOrder.\n"
  syntax:
    content: public void Add(Argument arg, string sortOrder)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
      description: The argument to add to the collection.
    - id: sortOrder
      type: System.String
      description: 'The sort order: &quot;ASC&quot; or &quot;DESC&quot;. Other values will give an Ascending sort, not an exception'
    content.vb: Public Sub Add(arg As Argument, sortOrder As String)
  overload: SuperOffice.Data.SQL.OrderBy.Add*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: "\nThrown if the argument is null, or is a Parameter with a zero length\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.OrderBy)
  commentId: M:SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.OrderBy)
  id: Add(SuperOffice.Data.SQL.OrderBy)
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Add(OrderBy)
  nameWithType: OrderBy.Add(OrderBy)
  fullName: SuperOffice.Data.SQL.OrderBy.Add(SuperOffice.Data.SQL.OrderBy)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public void Add(OrderBy orderBy)
    parameters:
    - id: orderBy
      type: SuperOffice.Data.SQL.OrderBy
    content.vb: Public Sub Add(orderBy As OrderBy)
  overload: SuperOffice.Data.SQL.OrderBy.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.AggregationExist
  commentId: M:SuperOffice.Data.SQL.OrderBy.AggregationExist
  id: AggregationExist
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: AggregationExist()
  nameWithType: OrderBy.AggregationExist()
  fullName: SuperOffice.Data.SQL.OrderBy.AggregationExist()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAggregationExist will check the OrderBy collection to see if it contains any Count-Arguments.\n"
  syntax:
    content: public bool AggregationExist()
    return:
      type: System.Boolean
      description: Returns true if the collection contains a Count-argument, else false.
    content.vb: Public Function AggregationExist As Boolean
  overload: SuperOffice.Data.SQL.OrderBy.AggregationExist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.GetNumberOfItems
  commentId: M:SuperOffice.Data.SQL.OrderBy.GetNumberOfItems
  id: GetNumberOfItems
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: GetNumberOfItems()
  nameWithType: OrderBy.GetNumberOfItems()
  fullName: SuperOffice.Data.SQL.OrderBy.GetNumberOfItems()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGets the number of items in the OrderBy collection.\n"
  syntax:
    content: public long GetNumberOfItems()
    return:
      type: System.Int64
    content.vb: Public Function GetNumberOfItems As Long
  overload: SuperOffice.Data.SQL.OrderBy.GetNumberOfItems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.Clear
  commentId: M:SuperOffice.Data.SQL.OrderBy.Clear
  id: Clear
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: OrderBy.Clear()
  fullName: SuperOffice.Data.SQL.OrderBy.Clear()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nClear the orderby collection/clause completely\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: SuperOffice.Data.SQL.OrderBy.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.Clone
  commentId: M:SuperOffice.Data.SQL.OrderBy.Clone
  id: Clone
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: OrderBy.Clone()
  fullName: SuperOffice.Data.SQL.OrderBy.Clone()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturn copy of the OrderBy clause.\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: Copy of the order-by sequence
    content.vb: Public Function Clone As Object
  overload: SuperOffice.Data.SQL.OrderBy.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.OrderBy.ToString
  commentId: M:SuperOffice.Data.SQL.OrderBy.ToString
  id: ToString
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: OrderBy.ToString()
  fullName: SuperOffice.Data.SQL.OrderBy.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nString output.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ORDER BY ...
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.Data.SQL.OrderBy.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SQL.OrderBy.SortOrder
  commentId: P:SuperOffice.Data.SQL.OrderBy.SortOrder
  id: SortOrder
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: SortOrder
  nameWithType: OrderBy.SortOrder
  fullName: SuperOffice.Data.SQL.OrderBy.SortOrder
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet-method for the OrderBy-collection.\n"
  syntax:
    content: public Dictionary<Argument, OrderBySortType> SortOrder { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType}
    content.vb: Public ReadOnly Property SortOrder As Dictionary(Of Argument, OrderBySortType)
  overload: SuperOffice.Data.SQL.OrderBy.SortOrder*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SQL.OrderBy.Count
  commentId: P:SuperOffice.Data.SQL.OrderBy.Count
  id: Count
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: OrderBy.Count
  fullName: SuperOffice.Data.SQL.OrderBy.Count
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGets number of OrderBy\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.Data.SQL.OrderBy.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SQL.OrderBy.Argument
  commentId: P:SuperOffice.Data.SQL.OrderBy.Argument
  id: Argument
  parent: SuperOffice.Data.SQL.OrderBy
  langs:
  - csharp
  - vb
  name: Argument
  nameWithType: OrderBy.Argument
  fullName: SuperOffice.Data.SQL.OrderBy.Argument
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns the FieldInfo-collection\n"
  syntax:
    content: public ICollection Argument { get; }
    parameters: []
    return:
      type: System.Collections.ICollection
      description: The argument.
    content.vb: Public ReadOnly Property Argument As ICollection
  overload: SuperOffice.Data.SQL.OrderBy.Argument*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.OrderBy.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<OrderBy, To>()
  nameWithType: EnumUtil.MapEnums<OrderBy, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.OrderBy, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of OrderBy, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.OrderBy, To)()
  name.vb: MapEnums(Of OrderBy, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<OrderBy, To>
    nameWithType: EnumUtil.MapEnums<OrderBy, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.OrderBy, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of OrderBy, To)
    nameWithType: EnumUtil.MapEnums(Of OrderBy, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.OrderBy, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.OrderBy.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.OrderBy)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<OrderBy>(OrderBy)
  nameWithType: ObjectExtensions.AssignByReflection<OrderBy>(OrderBy)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.OrderBy>(SuperOffice.Data.SQL.OrderBy)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of OrderBy)(OrderBy)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.OrderBy)(SuperOffice.Data.SQL.OrderBy)
  name.vb: AssignByReflection(Of OrderBy)(OrderBy)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<OrderBy>
    nameWithType: ObjectExtensions.AssignByReflection<OrderBy>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.OrderBy>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: SuperOffice.Data.SQL.OrderBy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of OrderBy)
    nameWithType: ObjectExtensions.AssignByReflection(Of OrderBy)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.OrderBy)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: SuperOffice.Data.SQL.OrderBy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.OrderBy.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<OrderBy>()
  nameWithType: ObjectExtensions.GraphCopy<OrderBy>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.OrderBy>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of OrderBy)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.OrderBy)()
  name.vb: GraphCopy(Of OrderBy)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<OrderBy>
    nameWithType: ObjectExtensions.GraphCopy<OrderBy>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.OrderBy>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of OrderBy)
    nameWithType: ObjectExtensions.GraphCopy(Of OrderBy)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.OrderBy)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.OrderBy.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<OrderBy, To>()
  nameWithType: Converters.MapEnums<OrderBy, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.OrderBy, To>()
  nameWithType.vb: Converters.MapEnums(Of OrderBy, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.OrderBy, To)()
  name.vb: MapEnums(Of OrderBy, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<OrderBy, To>
    nameWithType: Converters.MapEnums<OrderBy, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.OrderBy, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of OrderBy, To)
    nameWithType: Converters.MapEnums(Of OrderBy, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.OrderBy, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.OrderBy.Contains*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.Contains
  isExternal: true
  name: Contains
  nameWithType: OrderBy.Contains
  fullName: SuperOffice.Data.SQL.OrderBy.Contains
- uid: SuperOffice.Data.SQL.Argument
  commentId: T:SuperOffice.Data.SQL.Argument
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Argument
  nameWithType: Argument
  fullName: SuperOffice.Data.SQL.Argument
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL.OrderBy.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.#ctor
  isExternal: true
  name: OrderBy
  nameWithType: OrderBy.OrderBy
  fullName: SuperOffice.Data.SQL.OrderBy.OrderBy
- uid: SuperOffice.Data.OrderBySortType
  commentId: T:SuperOffice.Data.OrderBySortType
  parent: SuperOffice.Data
  isExternal: true
  name: OrderBySortType
  nameWithType: OrderBySortType
  fullName: SuperOffice.Data.OrderBySortType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.SQL.OrderBy.Add*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.Add
  isExternal: true
  name: Add
  nameWithType: OrderBy.Add
  fullName: SuperOffice.Data.SQL.OrderBy.Add
- uid: SuperOffice.Exceptions.SoIllegalOperationException
  commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  isExternal: true
  name: SoIllegalOperationException
  nameWithType: SoIllegalOperationException
  fullName: SuperOffice.Exceptions.SoIllegalOperationException
- uid: SuperOffice.Data.SQL.FieldInfo[]
  isExternal: true
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: SuperOffice.Data.SQL.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullName.vb: SuperOffice.Data.SQL.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SQL.OrderBy
  commentId: T:SuperOffice.Data.SQL.OrderBy
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: OrderBy
  nameWithType: OrderBy
  fullName: SuperOffice.Data.SQL.OrderBy
- uid: SuperOffice.Data.SQL.OrderBy.AggregationExist*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.AggregationExist
  isExternal: true
  name: AggregationExist
  nameWithType: OrderBy.AggregationExist
  fullName: SuperOffice.Data.SQL.OrderBy.AggregationExist
- uid: SuperOffice.Data.SQL.OrderBy.GetNumberOfItems*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.GetNumberOfItems
  isExternal: true
  name: GetNumberOfItems
  nameWithType: OrderBy.GetNumberOfItems
  fullName: SuperOffice.Data.SQL.OrderBy.GetNumberOfItems
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: SuperOffice.Data.SQL.OrderBy.Clear*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.Clear
  isExternal: true
  name: Clear
  nameWithType: OrderBy.Clear
  fullName: SuperOffice.Data.SQL.OrderBy.Clear
- uid: SuperOffice.Data.SQL.OrderBy.Clone*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.Clone
  isExternal: true
  name: Clone
  nameWithType: OrderBy.Clone
  fullName: SuperOffice.Data.SQL.OrderBy.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.OrderBy.ToString*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.ToString
  isExternal: true
  name: ToString
  nameWithType: OrderBy.ToString
  fullName: SuperOffice.Data.SQL.OrderBy.ToString
- uid: SuperOffice.Data.SQL.OrderBy.SortOrder*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.SortOrder
  isExternal: true
  name: SortOrder
  nameWithType: OrderBy.SortOrder
  fullName: SuperOffice.Data.SQL.OrderBy.SortOrder
- uid: System.Collections.Generic.Dictionary{SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType}
  commentId: T:System.Collections.Generic.Dictionary{SuperOffice.Data.SQL.Argument,SuperOffice.Data.OrderBySortType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Argument, OrderBySortType>
  nameWithType: Dictionary<Argument, OrderBySortType>
  fullName: System.Collections.Generic.Dictionary<SuperOffice.Data.SQL.Argument, SuperOffice.Data.OrderBySortType>
  nameWithType.vb: Dictionary(Of Argument, OrderBySortType)
  fullName.vb: System.Collections.Generic.Dictionary(Of SuperOffice.Data.SQL.Argument, SuperOffice.Data.OrderBySortType)
  name.vb: Dictionary(Of Argument, OrderBySortType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.OrderBySortType
    name: OrderBySortType
    nameWithType: OrderBySortType
    fullName: SuperOffice.Data.OrderBySortType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.OrderBySortType
    name: OrderBySortType
    nameWithType: OrderBySortType
    fullName: SuperOffice.Data.OrderBySortType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.Data.SQL.OrderBy.Count*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.Count
  isExternal: true
  name: Count
  nameWithType: OrderBy.Count
  fullName: SuperOffice.Data.SQL.OrderBy.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.OrderBy.Argument*
  commentId: Overload:SuperOffice.Data.SQL.OrderBy.Argument
  isExternal: true
  name: Argument
  nameWithType: OrderBy.Argument
  fullName: SuperOffice.Data.SQL.OrderBy.Argument
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
