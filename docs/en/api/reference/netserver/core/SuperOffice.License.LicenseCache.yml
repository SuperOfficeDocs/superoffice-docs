### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.LicenseCache
  commentId: T:SuperOffice.License.LicenseCache
  id: LicenseCache
  parent: SuperOffice.License
  children:
  - SuperOffice.License.LicenseCache.#ctor
  - SuperOffice.License.LicenseCache.GetCurrent
  - SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  - SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  - SuperOffice.License.LicenseCache.GetModule(System.Int32)
  - SuperOffice.License.LicenseCache.GetModule(System.String)
  - SuperOffice.License.LicenseCache.GetModule(System.String,System.String)
  - SuperOffice.License.LicenseCache.GetModules(System.String)
  - SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  - SuperOffice.License.LicenseCache.GetOwner(System.String)
  - SuperOffice.License.LicenseCache.GetOwners
  - SuperOffice.License.LicenseCache.GetSiteLicenses
  - SuperOffice.License.LicenseCache.OnLoad
  langs:
  - csharp
  - vb
  name: LicenseCache
  nameWithType: LicenseCache
  fullName: SuperOffice.License.LicenseCache
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nCache containing list of all module owners, module licenses, system licenses and satellite licenses.  \nAssociate licenses are not covered by this cache as this might cause the cache to be too slow.\n"
  syntax:
    content: >-
      [CacheV2("Database")]

      public sealed class LicenseCache : CacheBaseV2, IFlushableV2, IDisposable
    content.vb: >-
      <CacheV2("Database")>

      Public NotInheritable Class LicenseCache
          Inherits CacheBaseV2
          Implements IFlushableV2, IDisposable
  inheritance:
  - System.Object
  - SuperOffice.Data.Cache.CacheBaseV2
  implements:
  - SuperOffice.Data.Cache.IFlushableV2
  - System.IDisposable
  inheritedMembers:
  - SuperOffice.Data.Cache.CacheBaseV2.Dispose
  - SuperOffice.Data.Cache.CacheBaseV2.Flush
  - SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  - SuperOffice.Data.Cache.CacheBaseV2.Load
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.License.LicenseCache.EnumUtil.MapEnums``2
  - SuperOffice.License.LicenseCache.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.LicenseCache)
  - SuperOffice.License.LicenseCache.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.License.LicenseCache.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Data.Cache.CacheV2Attribute
    ctor: SuperOffice.Data.Cache.CacheV2Attribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Database
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.License.LicenseCache.GetOwners
  commentId: M:SuperOffice.License.LicenseCache.GetOwners
  id: GetOwners
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwners()
  nameWithType: LicenseCache.GetOwners()
  fullName: SuperOffice.License.LicenseCache.GetOwners()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nReturn all module owners\n"
  syntax:
    content: public IEnumerable<ModuleOwnerRecordData> GetOwners()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleOwnerRecordData}
    content.vb: Public Function GetOwners As IEnumerable(Of ModuleOwnerRecordData)
  overload: SuperOffice.License.LicenseCache.GetOwners*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  commentId: M:SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  id: GetOwner(System.Int32)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwner(Int32)
  nameWithType: LicenseCache.GetOwner(Int32)
  fullName: SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet Module owner from id\n"
  syntax:
    content: public ModuleOwnerRecordData GetOwner(int moduleOwnerId)
    parameters:
    - id: moduleOwnerId
      type: System.Int32
      description: Id of module owner
    return:
      type: SuperOffice.CRM.Rows.ModuleOwnerRecordData
      description: Module owner from Id. Null is returned if the owner is not held by the cache.
    content.vb: Public Function GetOwner(moduleOwnerId As Integer) As ModuleOwnerRecordData
  overload: SuperOffice.License.LicenseCache.GetOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetOwner(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetOwner(System.String)
  id: GetOwner(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwner(String)
  nameWithType: LicenseCache.GetOwner(String)
  fullName: SuperOffice.License.LicenseCache.GetOwner(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet module owner from the owner name\n"
  syntax:
    content: public ModuleOwnerRecordData GetOwner(string moduleOwner)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of the module owner
    return:
      type: SuperOffice.CRM.Rows.ModuleOwnerRecordData
      description: Module owner from name. Null is returned if the owner is not held by the cache.
    content.vb: Public Function GetOwner(moduleOwner As String) As ModuleOwnerRecordData
  overload: SuperOffice.License.LicenseCache.GetOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModules(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetModules(System.String)
  id: GetModules(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModules(String)
  nameWithType: LicenseCache.GetModules(String)
  fullName: SuperOffice.License.LicenseCache.GetModules(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nReturn all the module licenses belonging to one owner\n"
  syntax:
    content: public IEnumerable<ModuleLicenseRecordData> GetModules(string ownerName)
    parameters:
    - id: ownerName
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRecordData}
    content.vb: Public Function GetModules(ownerName As String) As IEnumerable(Of ModuleLicenseRecordData)
  overload: SuperOffice.License.LicenseCache.GetModules*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModule(System.Int32)
  commentId: M:SuperOffice.License.LicenseCache.GetModule(System.Int32)
  id: GetModule(System.Int32)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModule(Int32)
  nameWithType: LicenseCache.GetModule(Int32)
  fullName: SuperOffice.License.LicenseCache.GetModule(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet Module License from a module license id.\n"
  syntax:
    content: public ModuleLicenseRecordData GetModule(int moduleId)
    parameters:
    - id: moduleId
      type: System.Int32
      description: Primary key of the module license to get.
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRecordData
      description: Module license from module id.  Null is returned if the module license is not held by the cache.
    content.vb: Public Function GetModule(moduleId As Integer) As ModuleLicenseRecordData
  overload: SuperOffice.License.LicenseCache.GetModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModule(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetModule(System.String,System.String)
  id: GetModule(System.String,System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModule(String, String)
  nameWithType: LicenseCache.GetModule(String, String)
  fullName: SuperOffice.License.LicenseCache.GetModule(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet module row provided the module owner name and the module name.\n"
  syntax:
    content: public ModuleLicenseRecordData GetModule(string ownerName, string moduleName)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: moduleName
      type: System.String
      description: Name of the module license
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRecordData
      description: "\nModule license from module owner name and the module name.  \nNull is returned if the module license is not held by the cache.\n"
    content.vb: Public Function GetModule(ownerName As String, moduleName As String) As ModuleLicenseRecordData
  overload: SuperOffice.License.LicenseCache.GetModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModule(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetModule(System.String)
  id: GetModule(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModule(String)
  nameWithType: LicenseCache.GetModule(String)
  fullName: SuperOffice.License.LicenseCache.GetModule(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet a module from the modules full name, formatted like [ModuleOwner].[ModuleName].\n"
  syntax:
    content: public ModuleLicenseRecordData GetModule(string fullName)
    parameters:
    - id: fullName
      type: System.String
      description: Modules full name, formatted like [ModuleOwner].[ModuleName]
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRecordData
      description: "\nModule license from module owner name and the module name.  \nNull is returned if the module license is not held by the cache.\n"
    content.vb: Public Function GetModule(fullName As String) As ModuleLicenseRecordData
  overload: SuperOffice.License.LicenseCache.GetModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  commentId: M:SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  id: GetLoginRightModule(SuperOffice.License.UserType)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetLoginRightModule(UserType)
  nameWithType: LicenseCache.GetLoginRightModule(UserType)
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the module thay holds the login right for a particular user type.\n"
  syntax:
    content: public ModuleLicenseRecordData GetLoginRightModule(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: User type to get module that is required for logging on.
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRecordData
      description: Instance of <xref href="SuperOffice.CRM.Rows.ModuleLicenseRecordData" data-throw-if-not-resolved="false"></xref> if the appropriate login-right is found, otherwise null.
    content.vb: Public Function GetLoginRightModule(userType As UserType) As ModuleLicenseRecordData
  overload: SuperOffice.License.LicenseCache.GetLoginRightModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  commentId: M:SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  id: GetLoginRightModuleId(SuperOffice.License.UserType)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetLoginRightModuleId(UserType)
  nameWithType: LicenseCache.GetLoginRightModuleId(UserType)
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the primary key of the module license holding login right for a partular user type.\n"
  syntax:
    content: public int GetLoginRightModuleId(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: User type.
    return:
      type: System.Int32
      description: "\nPrimary key of the module licese holding login right for a particular user type.  \n0 is returned if the module is not found.\n"
    content.vb: Public Function GetLoginRightModuleId(userType As UserType) As Integer
  overload: SuperOffice.License.LicenseCache.GetLoginRightModuleId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetSiteLicenses
  commentId: M:SuperOffice.License.LicenseCache.GetSiteLicenses
  id: GetSiteLicenses
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetSiteLicenses()
  nameWithType: LicenseCache.GetSiteLicenses()
  fullName: SuperOffice.License.LicenseCache.GetSiteLicenses()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet all site module license record data in the database.\n"
  syntax:
    content: public IEnumerable<ModuleLicenseRecordData> GetSiteLicenses()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRecordData}
      description: All site license record data.
    content.vb: Public Function GetSiteLicenses As IEnumerable(Of ModuleLicenseRecordData)
  overload: SuperOffice.License.LicenseCache.GetSiteLicenses*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.OnLoad
  commentId: M:SuperOffice.License.LicenseCache.OnLoad
  id: OnLoad
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: OnLoad()
  nameWithType: LicenseCache.OnLoad()
  fullName: SuperOffice.License.LicenseCache.OnLoad()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: protected override void OnLoad()
    content.vb: Protected Overrides Sub OnLoad
  overridden: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  overload: SuperOffice.License.LicenseCache.OnLoad*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.License.LicenseCache.GetCurrent
  commentId: M:SuperOffice.License.LicenseCache.GetCurrent
  id: GetCurrent
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: LicenseCache.GetCurrent()
  fullName: SuperOffice.License.LicenseCache.GetCurrent()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nObtain an instance of the cache\n"
  syntax:
    content: public static LicenseCache GetCurrent()
    return:
      type: SuperOffice.License.LicenseCache
    content.vb: Public Shared Function GetCurrent As LicenseCache
  overload: SuperOffice.License.LicenseCache.GetCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.License.LicenseCache.#ctor
  commentId: M:SuperOffice.License.LicenseCache.#ctor
  id: '#ctor'
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: LicenseCache()
  nameWithType: LicenseCache.LicenseCache()
  fullName: SuperOffice.License.LicenseCache.LicenseCache()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public LicenseCache()
    content.vb: Public Sub New
  overload: SuperOffice.License.LicenseCache.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Cache.CacheBaseV2
  commentId: T:SuperOffice.Data.Cache.CacheBaseV2
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: CacheBaseV2
  nameWithType: CacheBaseV2
  fullName: SuperOffice.Data.Cache.CacheBaseV2
- uid: SuperOffice.Data.Cache.IFlushableV2
  commentId: T:SuperOffice.Data.Cache.IFlushableV2
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: IFlushableV2
  nameWithType: IFlushableV2
  fullName: SuperOffice.Data.Cache.IFlushableV2
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.Data.Cache.CacheBaseV2.Dispose
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Dispose
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Dispose()
  nameWithType: CacheBaseV2.Dispose()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Dispose()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    name: Dispose
    nameWithType: CacheBaseV2.Dispose
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    name: Dispose
    nameWithType: CacheBaseV2.Dispose
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.Flush
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Flush
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Flush()
  nameWithType: CacheBaseV2.Flush()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Flush()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Flush
    name: Flush
    nameWithType: CacheBaseV2.Flush
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Flush
    name: Flush
    nameWithType: CacheBaseV2.Flush
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: BeginDisableAutoUpdate()
  nameWithType: CacheBaseV2.BeginDisableAutoUpdate()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    name: BeginDisableAutoUpdate
    nameWithType: CacheBaseV2.BeginDisableAutoUpdate
    fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    name: BeginDisableAutoUpdate
    nameWithType: CacheBaseV2.BeginDisableAutoUpdate
    fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.Load
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Load
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Load()
  nameWithType: CacheBaseV2.Load()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Load()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Load
    name: Load
    nameWithType: CacheBaseV2.Load
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Load
    name: Load
    nameWithType: CacheBaseV2.Load
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<LicenseCache, To>()
  nameWithType: EnumUtil.MapEnums<LicenseCache, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseCache, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of LicenseCache, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.LicenseCache, To)()
  name.vb: MapEnums(Of LicenseCache, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<LicenseCache, To>
    nameWithType: EnumUtil.MapEnums<LicenseCache, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseCache, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of LicenseCache, To)
    nameWithType: EnumUtil.MapEnums(Of LicenseCache, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.LicenseCache, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.LicenseCache)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<LicenseCache>(LicenseCache)
  nameWithType: ObjectExtensions.AssignByReflection<LicenseCache>(LicenseCache)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.LicenseCache>(SuperOffice.License.LicenseCache)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of LicenseCache)(LicenseCache)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.LicenseCache)(SuperOffice.License.LicenseCache)
  name.vb: AssignByReflection(Of LicenseCache)(LicenseCache)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<LicenseCache>
    nameWithType: ObjectExtensions.AssignByReflection<LicenseCache>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.LicenseCache>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.LicenseCache
    name: LicenseCache
    nameWithType: LicenseCache
    fullName: SuperOffice.License.LicenseCache
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of LicenseCache)
    nameWithType: ObjectExtensions.AssignByReflection(Of LicenseCache)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.LicenseCache)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.LicenseCache
    name: LicenseCache
    nameWithType: LicenseCache
    fullName: SuperOffice.License.LicenseCache
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<LicenseCache>()
  nameWithType: ObjectExtensions.GraphCopy<LicenseCache>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.LicenseCache>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of LicenseCache)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.LicenseCache)()
  name.vb: GraphCopy(Of LicenseCache)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<LicenseCache>
    nameWithType: ObjectExtensions.GraphCopy<LicenseCache>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.LicenseCache>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of LicenseCache)
    nameWithType: ObjectExtensions.GraphCopy(Of LicenseCache)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.LicenseCache)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<LicenseCache, To>()
  nameWithType: Converters.MapEnums<LicenseCache, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseCache, To>()
  nameWithType.vb: Converters.MapEnums(Of LicenseCache, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseCache, To)()
  name.vb: MapEnums(Of LicenseCache, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<LicenseCache, To>
    nameWithType: Converters.MapEnums<LicenseCache, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseCache, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of LicenseCache, To)
    nameWithType: Converters.MapEnums(Of LicenseCache, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseCache, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.Cache
  commentId: N:SuperOffice.Data.Cache
  isExternal: true
  name: SuperOffice.Data.Cache
  nameWithType: SuperOffice.Data.Cache
  fullName: SuperOffice.Data.Cache
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.LicenseCache.GetOwners*
  commentId: Overload:SuperOffice.License.LicenseCache.GetOwners
  isExternal: true
  name: GetOwners
  nameWithType: LicenseCache.GetOwners
  fullName: SuperOffice.License.LicenseCache.GetOwners
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleOwnerRecordData}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleOwnerRecordData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ModuleOwnerRecordData>
  nameWithType: IEnumerable<ModuleOwnerRecordData>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.ModuleOwnerRecordData>
  nameWithType.vb: IEnumerable(Of ModuleOwnerRecordData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.ModuleOwnerRecordData)
  name.vb: IEnumerable(Of ModuleOwnerRecordData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRecordData
    name: ModuleOwnerRecordData
    nameWithType: ModuleOwnerRecordData
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRecordData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRecordData
    name: ModuleOwnerRecordData
    nameWithType: ModuleOwnerRecordData
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRecordData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.License.LicenseCache.GetOwner*
  commentId: Overload:SuperOffice.License.LicenseCache.GetOwner
  isExternal: true
  name: GetOwner
  nameWithType: LicenseCache.GetOwner
  fullName: SuperOffice.License.LicenseCache.GetOwner
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Rows.ModuleOwnerRecordData
  commentId: T:SuperOffice.CRM.Rows.ModuleOwnerRecordData
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: ModuleOwnerRecordData
  nameWithType: ModuleOwnerRecordData
  fullName: SuperOffice.CRM.Rows.ModuleOwnerRecordData
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.License.LicenseCache.GetModules*
  commentId: Overload:SuperOffice.License.LicenseCache.GetModules
  isExternal: true
  name: GetModules
  nameWithType: LicenseCache.GetModules
  fullName: SuperOffice.License.LicenseCache.GetModules
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRecordData}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRecordData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ModuleLicenseRecordData>
  nameWithType: IEnumerable<ModuleLicenseRecordData>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.ModuleLicenseRecordData>
  nameWithType.vb: IEnumerable(Of ModuleLicenseRecordData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.ModuleLicenseRecordData)
  name.vb: IEnumerable(Of ModuleLicenseRecordData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleLicenseRecordData
    name: ModuleLicenseRecordData
    nameWithType: ModuleLicenseRecordData
    fullName: SuperOffice.CRM.Rows.ModuleLicenseRecordData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleLicenseRecordData
    name: ModuleLicenseRecordData
    nameWithType: ModuleLicenseRecordData
    fullName: SuperOffice.CRM.Rows.ModuleLicenseRecordData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.GetModule*
  commentId: Overload:SuperOffice.License.LicenseCache.GetModule
  isExternal: true
  name: GetModule
  nameWithType: LicenseCache.GetModule
  fullName: SuperOffice.License.LicenseCache.GetModule
- uid: SuperOffice.CRM.Rows.ModuleLicenseRecordData
  commentId: T:SuperOffice.CRM.Rows.ModuleLicenseRecordData
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: ModuleLicenseRecordData
  nameWithType: ModuleLicenseRecordData
  fullName: SuperOffice.CRM.Rows.ModuleLicenseRecordData
- uid: SuperOffice.License.LicenseCache.GetLoginRightModule*
  commentId: Overload:SuperOffice.License.LicenseCache.GetLoginRightModule
  isExternal: true
  name: GetLoginRightModule
  nameWithType: LicenseCache.GetLoginRightModule
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModule
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.License.LicenseCache.GetLoginRightModuleId*
  commentId: Overload:SuperOffice.License.LicenseCache.GetLoginRightModuleId
  isExternal: true
  name: GetLoginRightModuleId
  nameWithType: LicenseCache.GetLoginRightModuleId
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModuleId
- uid: SuperOffice.License.LicenseCache.GetSiteLicenses*
  commentId: Overload:SuperOffice.License.LicenseCache.GetSiteLicenses
  isExternal: true
  name: GetSiteLicenses
  nameWithType: LicenseCache.GetSiteLicenses
  fullName: SuperOffice.License.LicenseCache.GetSiteLicenses
- uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: OnLoad()
  nameWithType: CacheBaseV2.OnLoad()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    name: OnLoad
    nameWithType: CacheBaseV2.OnLoad
    fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    name: OnLoad
    nameWithType: CacheBaseV2.OnLoad
    fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.OnLoad*
  commentId: Overload:SuperOffice.License.LicenseCache.OnLoad
  isExternal: true
  name: OnLoad
  nameWithType: LicenseCache.OnLoad
  fullName: SuperOffice.License.LicenseCache.OnLoad
- uid: SuperOffice.License.LicenseCache.GetCurrent*
  commentId: Overload:SuperOffice.License.LicenseCache.GetCurrent
  isExternal: true
  name: GetCurrent
  nameWithType: LicenseCache.GetCurrent
  fullName: SuperOffice.License.LicenseCache.GetCurrent
- uid: SuperOffice.License.LicenseCache
  commentId: T:SuperOffice.License.LicenseCache
  parent: SuperOffice.License
  isExternal: true
  name: LicenseCache
  nameWithType: LicenseCache
  fullName: SuperOffice.License.LicenseCache
- uid: SuperOffice.License.LicenseCache.#ctor*
  commentId: Overload:SuperOffice.License.LicenseCache.#ctor
  isExternal: true
  name: LicenseCache
  nameWithType: LicenseCache.LicenseCache
  fullName: SuperOffice.License.LicenseCache.LicenseCache
