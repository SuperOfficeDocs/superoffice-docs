### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  commentId: T:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  id: IArchiveProviderHasRows
  parent: SuperOffice.CRM.ArchiveLists
  children:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader(System.String)
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows(System.String)
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IArchiveProviderHasRows
  nameWithType: IArchiveProviderHasRows
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nThis interface defines the property of having rows of an archive provider. It is implemented by the <see cref=\"!:QueryProviderBase\"></see>\nand <xref href=\"SuperOffice.CRM.ArchiveLists.MultiQueryProviderBase\" data-throw-if-not-resolved=\"false\"></xref> base classes.\n"
  syntax:
    content: public interface IArchiveProviderHasRows
    content.vb: Public Interface IArchiveProviderHasRows
  extensionMethods:
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.EnumUtil.MapEnums``2
  - SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows(System.String)
  id: GetRows(System.String)
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  langs:
  - csharp
  - vb
  name: GetRows(String)
  nameWithType: IArchiveProviderHasRows.GetRows(String)
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nStart the query and return an iterator. The .Current property will be a valid ArchiveRow containing one row, as long as \na previous call to .MoveNext returned true. This is the standard semantics for an iterator. Do remember to call Close afterwards,\nto clean up all resources.\n"
  remarks: "\nYou can use the foreach keyword to iterate over rows, like this:\n<pre><code>IArchiveProvider provider = ArchiveProviderFactory.Create(&quot;person&quot;);\n// not shown - set desired columns, entities, restrictions, paging\nforeach( ArchiveRow row in provider.GetRows() )\n{\n	// process row here\n}\nprovider.Close();</code></pre>\n"
  syntax:
    content: IEnumerable<ArchiveRow> GetRows(string options)
    parameters:
    - id: options
      type: System.String
      description: >
        A set of options, using the query string format (name=value&amp;...). Can be null or empty.

        <table><thead><tr><th>Option</th><th>Purpose/effect</th></tr></thead><tbody><tr><td>countrows=true</td><td>Prepare to return a count of the full result set</td></tr></tbody></table>

        Options set here may trigger additional, asynchronous processing that will prepare results for the GetInformation method, if possible.
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.ArchiveRow}
      description: An iterator, following the usual conventions. MoveNext will return false when there are no more rows, which can either be because the result set is exhausted, or because the page size has been reached
    content.vb: Function GetRows(options As String) As IEnumerable(Of ArchiveRow)
  overload: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows*
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader(System.String)
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader(System.String)
  id: GetReader(System.String)
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  langs:
  - csharp
  - vb
  name: GetReader(String)
  nameWithType: IArchiveProviderHasRows.GetReader(String)
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nStart the reader and return an IDataReader (which, as we remember, also inherits IDataRecord for access to\nindividual data fields). This provides an alternative, more generic and more standards-based interface to\ndata. Use <strong>either</strong> GetRows <strong>or</strong> GetReader on any particular archive provider instance.\n"
  syntax:
    content: IDataReader GetReader(string options)
    parameters:
    - id: options
      type: System.String
    return:
      type: System.Data.IDataReader
    content.vb: Function GetReader(options As String) As IDataReader
  overload: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader*
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation
  id: GetResultInformation
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  langs:
  - csharp
  - vb
  name: GetResultInformation()
  nameWithType: IArchiveProviderHasRows.GetResultInformation()
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nGet additional information about the result, such as row count or other optional items. This method should be called some time after\nGetRows, but before Close. Delaying calls to this method as long as possible will give its (asynchronous) internal counterpart\nmore time to complete and lessen the response-time impact of calling it.\n"
  syntax:
    content: ArchiveResultInformation GetResultInformation()
    return:
      type: SuperOffice.CRM.ArchiveLists.ArchiveResultInformation
    content.vb: Function GetResultInformation As ArchiveResultInformation
  overload: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation*
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close
  id: Close
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: IArchiveProviderHasRows.Close()
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nCall this method after the last desired row has been read; this gives the provider the chance\nto close and free any underlying queries\n"
  syntax:
    content: void Close()
    content.vb: Sub Close
  overload: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close*
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo(System.Int32,System.Int32)
  id: SetPagingInfo(System.Int32,System.Int32)
  parent: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows
  langs:
  - csharp
  - vb
  name: SetPagingInfo(Int32, Int32)
  nameWithType: IArchiveProviderHasRows.SetPagingInfo(Int32, Int32)
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo(System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.ArchiveLists
  summary: "\nSet the paging properties of the provider. The default is to fetch page zero, of one thousand (1000) rows. A more reasonable page size\nis probably around 100. Note that the query processing strategy may change for very large pages (more than 1000) and give significantly\nlonger response times. Performance is improved by setting the page size low, as long as you don&apos;t set it lower than what you\nrealistically expect to need (fetching multiple pages is more expensive than fetching one).\n"
  syntax:
    content: void SetPagingInfo(int pageSize, int pageNumber)
    parameters:
    - id: pageSize
      type: System.Int32
      description: Desired page size
    - id: pageNumber
      type: System.Int32
      description: Desired page number to return
    content.vb: Sub SetPagingInfo(pageSize As Integer, pageNumber As Integer)
  overload: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo*
references:
- uid: SuperOffice.CRM.ArchiveLists
  commentId: N:SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: SuperOffice.CRM.ArchiveLists
  nameWithType: SuperOffice.CRM.ArchiveLists
  fullName: SuperOffice.CRM.ArchiveLists
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IArchiveProviderHasRows, To>()
  nameWithType: EnumUtil.MapEnums<IArchiveProviderHasRows, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IArchiveProviderHasRows, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To)()
  name.vb: MapEnums(Of IArchiveProviderHasRows, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IArchiveProviderHasRows, To>
    nameWithType: EnumUtil.MapEnums<IArchiveProviderHasRows, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IArchiveProviderHasRows, To)
    nameWithType: EnumUtil.MapEnums(Of IArchiveProviderHasRows, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IArchiveProviderHasRows, To>()
  nameWithType: Converters.MapEnums<IArchiveProviderHasRows, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To>()
  nameWithType.vb: Converters.MapEnums(Of IArchiveProviderHasRows, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To)()
  name.vb: MapEnums(Of IArchiveProviderHasRows, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IArchiveProviderHasRows, To>
    nameWithType: Converters.MapEnums<IArchiveProviderHasRows, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IArchiveProviderHasRows, To)
    nameWithType: Converters.MapEnums(Of IArchiveProviderHasRows, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows
  isExternal: true
  name: GetRows
  nameWithType: IArchiveProviderHasRows.GetRows
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetRows
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.ArchiveRow}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.ArchiveLists.ArchiveRow}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ArchiveRow>
  nameWithType: IEnumerable<ArchiveRow>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.ArchiveLists.ArchiveRow>
  nameWithType.vb: IEnumerable(Of ArchiveRow)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.ArchiveLists.ArchiveRow)
  name.vb: IEnumerable(Of ArchiveRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRow
    name: ArchiveRow
    nameWithType: ArchiveRow
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.ArchiveLists.ArchiveRow
    name: ArchiveRow
    nameWithType: ArchiveRow
    fullName: SuperOffice.CRM.ArchiveLists.ArchiveRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader
  isExternal: true
  name: GetReader
  nameWithType: IArchiveProviderHasRows.GetReader
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetReader
- uid: System.Data.IDataReader
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation
  isExternal: true
  name: GetResultInformation
  nameWithType: IArchiveProviderHasRows.GetResultInformation
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.GetResultInformation
- uid: SuperOffice.CRM.ArchiveLists.ArchiveResultInformation
  commentId: T:SuperOffice.CRM.ArchiveLists.ArchiveResultInformation
  parent: SuperOffice.CRM.ArchiveLists
  isExternal: true
  name: ArchiveResultInformation
  nameWithType: ArchiveResultInformation
  fullName: SuperOffice.CRM.ArchiveLists.ArchiveResultInformation
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close
  isExternal: true
  name: Close
  nameWithType: IArchiveProviderHasRows.Close
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.Close
- uid: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo*
  commentId: Overload:SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo
  isExternal: true
  name: SetPagingInfo
  nameWithType: IArchiveProviderHasRows.SetPagingInfo
  fullName: SuperOffice.CRM.ArchiveLists.IArchiveProviderHasRows.SetPagingInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
