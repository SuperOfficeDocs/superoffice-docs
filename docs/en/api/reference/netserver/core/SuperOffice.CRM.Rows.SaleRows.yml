### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Rows.SaleRows
  commentId: T:SuperOffice.CRM.Rows.SaleRows
  id: SaleRows
  parent: SuperOffice.CRM.Rows
  children:
  - SuperOffice.CRM.Rows.SaleRows.Add(SuperOffice.CRM.Rows.SaleRow)
  - SuperOffice.CRM.Rows.SaleRows.AddNew
  - SuperOffice.CRM.Rows.SaleRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow})
  - SuperOffice.CRM.Rows.SaleRows.CreateChild
  - SuperOffice.CRM.Rows.SaleRows.CreateNew
  - SuperOffice.CRM.Rows.SaleRows.Find(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  - SuperOffice.CRM.Rows.SaleRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  - SuperOffice.CRM.Rows.SaleRows.ForEach(System.Action{SuperOffice.CRM.Rows.SaleRow})
  - SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.SaleRows.CustomSearch,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync(System.Int32,SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync(System.Int32,SuperOffice.Data.SaleDone,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync(SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync(SuperOffice.Data.SaleStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.SaleTableInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.SaleRows.Item(System.Int32)
  - SuperOffice.CRM.Rows.SaleRows.Remove(SuperOffice.CRM.Rows.SaleRow)
  - SuperOffice.CRM.Rows.SaleRows.ToArray
  - SuperOffice.CRM.Rows.SaleRows.ToString
  langs:
  - csharp
  - vb
  name: SaleRows
  nameWithType: SaleRows
  fullName: SuperOffice.CRM.Rows.SaleRows
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nSales  For every Sale record edited through the SuperOffice GUI, a copy of the current version of the record will be saved in the SaleHist table. This also applies to editing done through the SaleModel COM interface, but not to editing done through the OLE DB Provider or other channels.  \nCollection of SaleRow. Each element of the collection represents one row in the Sale\ntable. \n"
  remarks: "\nRow collections can be created in several ways. \n<ul><li>Use the static <xref href=\"SuperOffice.CRM.Rows.SaleRows.CreateNew\" data-throw-if-not-resolved=\"false\"></xref> method to create a new, empty collection. You can then add objects of type\n<xref href=\"SuperOffice.CRM.Rows.SaleRow\" data-throw-if-not-resolved=\"false\"></xref> to it, and use methods like <see cref=\"!:Save\"></see> to operate on the whole collection.</li><li>You can create a (nested) SaleRows <xref href=\"SuperOffice.CRM.Rows.SaleRows.CustomSearch\" data-throw-if-not-resolved=\"false\"></xref> object to obtain a query pre-populated with\nthe correct tableinfo and return fields. This query can be modified with restrictions, etc. Then, use the static <see cref=\"!:GetFromCustomSearch\"></see> method\nto apply the query to the database and obtain the result as a Rows object, with one item for each table row that matched your query.</li><li>For each non-unique index defined for the table, there is a corresponding GetFromIdx method to make retrieving data via the indexes easy.</li></ul>\nUnique indexes are handled through the <xref href=\"SuperOffice.CRM.Rows.SaleRow\" data-throw-if-not-resolved=\"false\"></xref> object directly,\nwhich has nested classes and GetFromIdx methods for each unique index. Similarly, there is a <see cref=\"!:SuperOffice.CRM.Rows.SaleRows.GetFromReader\"></see>\nmethod to retrieve the results of queries that return more than one row (this method will iterate over the reader to fetch ALL results, so beware of fetching\nhuge result sets).\n<p></p>\n"
  syntax:
    content: 'public class SaleRows : TableRowsBase, INestedPersist, IEnumerable<INestedPersist>, IList, ICollection, IEnumerable, INotifyCollectionChanged, IBindingList'
    content.vb: >-
      Public Class SaleRows
          Inherits TableRowsBase
          Implements INestedPersist, IEnumerable(Of INestedPersist), IList, ICollection, IEnumerable, INotifyCollectionChanged, IBindingList
  inheritance:
  - System.Object
  - SuperOffice.Data.NestedPersist
  - SuperOffice.Data.NestedPersistFacade
  - SuperOffice.Data.NestedCollectionPersist
  - SuperOffice.CRM.Rows.TableRowsBase
  implements:
  - SuperOffice.Data.INestedPersist
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.IBindingList
  inheritedMembers:
  - SuperOffice.CRM.Rows.TableRowsBase._innerList
  - SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  - SuperOffice.CRM.Rows.TableRowsBase._sentries
  - SuperOffice.CRM.Rows.TableRowsBase._idx
  - SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  - SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  - SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  - SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  - SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  - SuperOffice.CRM.Rows.TableRowsBase.Clear
  - SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  - SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  - SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  - SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  - SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  - SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  - SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  - SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  - SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  - SuperOffice.CRM.Rows.TableRowsBase.Sentries
  - SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  - SuperOffice.CRM.Rows.TableRowsBase.Index
  - SuperOffice.CRM.Rows.TableRowsBase.Count
  - SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  - SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  - SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  - SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  - SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  - SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  - SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  - SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  - SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  - SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  - SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  - SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  - SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  - SuperOffice.Data.NestedCollectionPersist.IsDeleted
  - SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  - SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  - SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  - SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  - SuperOffice.Data.NestedPersist._saveOwner
  - SuperOffice.Data.NestedPersist._isSaving
  - SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  - SuperOffice.Data.NestedPersist.SaveAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  - SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  - SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  - SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  - SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  - SuperOffice.Data.NestedPersist.IsSaving
  - SuperOffice.Data.NestedPersist.OnElementSaved
  - SuperOffice.Data.NestedPersist.OnElementIdUpdate
  extensionMethods:
  - SuperOffice.CRM.Rows.SaleRows.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Rows.SaleRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Rows.SaleRows.ForEach(System.Action{SuperOffice.CRM.Rows.SaleRow})
  commentId: M:SuperOffice.CRM.Rows.SaleRows.ForEach(System.Action{SuperOffice.CRM.Rows.SaleRow})
  id: ForEach(System.Action{SuperOffice.CRM.Rows.SaleRow})
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: ForEach(Action<SaleRow>)
  nameWithType: SaleRows.ForEach(Action<SaleRow>)
  fullName: SuperOffice.CRM.Rows.SaleRows.ForEach(System.Action<SuperOffice.CRM.Rows.SaleRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nMethod that iterates over all members and applies the action parameter to each of them\n"
  syntax:
    content: public void ForEach(Action<SaleRow> whatToDo)
    parameters:
    - id: whatToDo
      type: System.Action{SuperOffice.CRM.Rows.SaleRow}
    content.vb: Public Sub ForEach(whatToDo As Action(Of SaleRow))
  overload: SuperOffice.CRM.Rows.SaleRows.ForEach*
  nameWithType.vb: SaleRows.ForEach(Action(Of SaleRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.SaleRows.ForEach(System.Action(Of SuperOffice.CRM.Rows.SaleRow))
  name.vb: ForEach(Action(Of SaleRow))
- uid: SuperOffice.CRM.Rows.SaleRows.Find(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  commentId: M:SuperOffice.CRM.Rows.SaleRows.Find(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  id: Find(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: Find(Predicate<SaleRow>)
  nameWithType: SaleRows.Find(Predicate<SaleRow>)
  fullName: SuperOffice.CRM.Rows.SaleRows.Find(System.Predicate<SuperOffice.CRM.Rows.SaleRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nApply the predicate to each element of the collection and return the first row that matches; if no match then return null\n"
  syntax:
    content: public SaleRow Find(Predicate<SaleRow> condition)
    parameters:
    - id: condition
      type: System.Predicate{SuperOffice.CRM.Rows.SaleRow}
    return:
      type: SuperOffice.CRM.Rows.SaleRow
    content.vb: Public Function Find(condition As Predicate(Of SaleRow)) As SaleRow
  overload: SuperOffice.CRM.Rows.SaleRows.Find*
  nameWithType.vb: SaleRows.Find(Predicate(Of SaleRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.SaleRows.Find(System.Predicate(Of SuperOffice.CRM.Rows.SaleRow))
  name.vb: Find(Predicate(Of SaleRow))
- uid: SuperOffice.CRM.Rows.SaleRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  commentId: M:SuperOffice.CRM.Rows.SaleRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  id: FindAll(System.Predicate{SuperOffice.CRM.Rows.SaleRow})
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<SaleRow>)
  nameWithType: SaleRows.FindAll(Predicate<SaleRow>)
  fullName: SuperOffice.CRM.Rows.SaleRows.FindAll(System.Predicate<SuperOffice.CRM.Rows.SaleRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nReturn a new collection that contains only those elements that match the condition. Elements are shared, not clones! of the original collection\n"
  syntax:
    content: public SaleRows FindAll(Predicate<SaleRow> condition)
    parameters:
    - id: condition
      type: System.Predicate{SuperOffice.CRM.Rows.SaleRow}
    return:
      type: SuperOffice.CRM.Rows.SaleRows
    content.vb: Public Function FindAll(condition As Predicate(Of SaleRow)) As SaleRows
  overload: SuperOffice.CRM.Rows.SaleRows.FindAll*
  nameWithType.vb: SaleRows.FindAll(Predicate(Of SaleRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.SaleRows.FindAll(System.Predicate(Of SuperOffice.CRM.Rows.SaleRow))
  name.vb: FindAll(Predicate(Of SaleRow))
- uid: SuperOffice.CRM.Rows.SaleRows.CreateNew
  commentId: M:SuperOffice.CRM.Rows.SaleRows.CreateNew
  id: CreateNew
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: CreateNew()
  nameWithType: SaleRows.CreateNew()
  fullName: SuperOffice.CRM.Rows.SaleRows.CreateNew()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRows object. This collection will contain no rows.\n"
  syntax:
    content: public static SaleRows CreateNew()
    return:
      type: SuperOffice.CRM.Rows.SaleRows
      description: "\nA new instance of the SaleRows object.\n"
    content.vb: Public Shared Function CreateNew As SaleRows
  overload: SuperOffice.CRM.Rows.SaleRows.CreateNew*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.SaleRows.CustomSearch,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.SaleRows.CustomSearch,System.Threading.CancellationToken)
  id: GetFromCustomSearchAsync(SuperOffice.CRM.Rows.SaleRows.CustomSearch,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromCustomSearchAsync(SaleRows.CustomSearch, CancellationToken)
  nameWithType: SaleRows.GetFromCustomSearchAsync(SaleRows.CustomSearch, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.SaleRows.CustomSearch, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRows object, and populate it with data from a custom search.\nIf the search returns no results, an empty collection will be returned; if the result contains\nrows, a collection of SaleRow objects representing each row will be returned. \n"
  syntax:
    content: public static Task<SaleRows> GetFromCustomSearchAsync(SaleRows.CustomSearch query, CancellationToken cancellationToken = null)
    parameters:
    - id: query
      type: SuperOffice.CRM.Rows.SaleRows.CustomSearch
      description: The custom search to execute against the database
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: A new instance of the SaleRows object, reflecting the result of the query.
    content.vb: Public Shared Function GetFromCustomSearchAsync(query As SaleRows.CustomSearch, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxContactIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxContactIdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxContactIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleCont_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxContactIdAsync(int contactId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxContactIdAsync(contactId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxPersonIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxPersonIdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxPersonIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSalePers_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxPersonIdAsync(int personId, CancellationToken cancellationToken = null)
    parameters:
    - id: personId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxPersonIdAsync(personId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxSaledateAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxSaledateAsync(DateTime, CancellationToken)
  nameWithType: SaleRows.GetFromIdxSaledateAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleSaledate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxSaledateAsync(DateTime saledate, CancellationToken cancellationToken = null)
    parameters:
    - id: saledate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxSaledateAsync(saledate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxProjectIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleProj_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxProjectIdAsync(int projectId, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdAsync(projectId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxUserdefIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxUserdefIdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxUserdefIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleUdef_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxUserdefIdAsync(int userdefId, CancellationToken cancellationToken = null)
    parameters:
    - id: userdefId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxUserdefIdAsync(userdefId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxUserdef2IdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxUserdef2IdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxUserdef2IdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleUdef2_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxUserdef2IdAsync(int userdef2Id, CancellationToken cancellationToken = null)
    parameters:
    - id: userdef2Id
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxUserdef2IdAsync(userdef2Id As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync(System.String,System.Threading.CancellationToken)
  id: GetFromIdxHeadingAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxHeadingAsync(String, CancellationToken)
  nameWithType: SaleRows.GetFromIdxHeadingAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleHeading&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxHeadingAsync(string heading, CancellationToken cancellationToken = null)
    parameters:
    - id: heading
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxHeadingAsync(heading As String, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync(SuperOffice.Data.SaleStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync(SuperOffice.Data.SaleStatus,System.Threading.CancellationToken)
  id: GetFromIdxStatusAsync(SuperOffice.Data.SaleStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxStatusAsync(SaleStatus, CancellationToken)
  nameWithType: SaleRows.GetFromIdxStatusAsync(SaleStatus, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync(SuperOffice.Data.SaleStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleStatus&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxStatusAsync(SaleStatus status, CancellationToken cancellationToken = null)
    parameters:
    - id: status
      type: SuperOffice.Data.SaleStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxStatusAsync(status As SaleStatus, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync(SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync(SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  id: GetFromIdxDoneAsync(SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDoneAsync(SaleDone, CancellationToken)
  nameWithType: SaleRows.GetFromIdxDoneAsync(SaleDone, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync(SuperOffice.Data.SaleDone, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleDone&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxDoneAsync(SaleDone done, CancellationToken cancellationToken = null)
    parameters:
    - id: done
      type: SuperOffice.Data.SaleDone
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDoneAsync(done As SaleDone, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async(System.String,System.Threading.CancellationToken)
  id: GetFromIdxNumber1Async(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxNumber1Async(String, CancellationToken)
  nameWithType: SaleRows.GetFromIdxNumber1Async(String, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleNum1&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxNumber1Async(string number1, CancellationToken cancellationToken = null)
    parameters:
    - id: number1
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxNumber1Async(number1 As String, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  id: GetFromIdxSourceAsync(System.Int16,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxSourceAsync(Int16, CancellationToken)
  nameWithType: SaleRows.GetFromIdxSourceAsync(Int16, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync(System.Int16, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleSource&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxSourceAsync(short source, CancellationToken cancellationToken = null)
    parameters:
    - id: source
      type: System.Int16
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxSourceAsync(source As Short, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxAssociateIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IAssoc_idDoneSaledate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxAssociateIdAsync(int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdAsync(associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync(System.Int32,SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync(System.Int32,SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdDoneAsync(System.Int32,SuperOffice.Data.SaleDone,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdDoneAsync(Int32, SaleDone, CancellationToken)
  nameWithType: SaleRows.GetFromIdxAssociateIdDoneAsync(Int32, SaleDone, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync(System.Int32, SuperOffice.Data.SaleDone, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IAssoc_idDoneSaledate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxAssociateIdDoneAsync(int associateId, SaleDone done, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: done
      type: SuperOffice.Data.SaleDone
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdDoneAsync(associateId As Integer, done As SaleDone, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync(System.Int32,SuperOffice.Data.SaleDone,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync(System.Int32,SuperOffice.Data.SaleDone,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAssociateIdDoneSaledateAsync(System.Int32,SuperOffice.Data.SaleDone,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAssociateIdDoneSaledateAsync(Int32, SaleDone, DateTime, CancellationToken)
  nameWithType: SaleRows.GetFromIdxAssociateIdDoneSaledateAsync(Int32, SaleDone, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync(System.Int32, SuperOffice.Data.SaleDone, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IAssoc_idDoneSaledate&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxAssociateIdDoneSaledateAsync(int associateId, SaleDone done, DateTime saledate, CancellationToken cancellationToken = null)
    parameters:
    - id: associateId
      type: System.Int32
    - id: done
      type: SuperOffice.Data.SaleDone
    - id: saledate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAssociateIdDoneSaledateAsync(associateId As Integer, done As SaleDone, saledate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxContactIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxContactIdSaledateAsync(Int32, DateTime, CancellationToken)
  nameWithType: SaleRows.GetFromIdxContactIdSaledateAsync(Int32, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync(System.Int32, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;ICont_idSaledateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxContactIdSaledateAsync(int contactId, DateTime saledate, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
    - id: saledate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxContactIdSaledateAsync(contactId As Integer, saledate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxContactIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxContactIdSaledateAssociateIdAsync(Int32, DateTime, Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync(Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync(System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;ICont_idSaledateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxContactIdSaledateAssociateIdAsync(int contactId, DateTime saledate, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: contactId
      type: System.Int32
    - id: saledate
      type: System.DateTime
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxContactIdSaledateAssociateIdAsync(contactId As Integer, saledate As DateTime, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdSaledateAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdSaledateAsync(Int32, DateTime, CancellationToken)
  nameWithType: SaleRows.GetFromIdxProjectIdSaledateAsync(Int32, DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync(System.Int32, System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IProj_idSaledateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxProjectIdSaledateAsync(int projectId, DateTime saledate, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: saledate
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdSaledateAsync(projectId As Integer, saledate As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxProjectIdSaledateAssociateIdAsync(System.Int32,System.DateTime,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxProjectIdSaledateAssociateIdAsync(Int32, DateTime, Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync(Int32, DateTime, Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync(System.Int32, System.DateTime, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IProj_idSaledateAssoc_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxProjectIdSaledateAssociateIdAsync(int projectId, DateTime saledate, int associateId, CancellationToken cancellationToken = null)
    parameters:
    - id: projectId
      type: System.Int32
    - id: saledate
      type: System.DateTime
    - id: associateId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxProjectIdSaledateAssociateIdAsync(projectId As Integer, saledate As DateTime, associateId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCreatedByWorkflowIdAsync(Int32, CancellationToken)
  nameWithType: SaleRows.GetFromIdxCreatedByWorkflowIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRow object, by querying the database table via the index &apos;IDXSaleCreated_by_workflow_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Sale table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.SaleRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromIdxCreatedByWorkflowIdAsync(int createdByWorkflowId, CancellationToken cancellationToken = null)
    parameters:
    - id: createdByWorkflowId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCreatedByWorkflowIdAsync(createdByWorkflowId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.SaleTableInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.SaleTableInfo,System.Threading.CancellationToken)
  id: GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.SaleTableInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: GetFromReaderAsync(SoDataReader, SaleTableInfo, CancellationToken)
  nameWithType: SaleRows.GetFromReaderAsync(SoDataReader, SaleTableInfo, CancellationToken)
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader, SuperOffice.CRM.Data.SaleTableInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the SaleRows object, and populate it with data from a reader.\nIf the search returns no results, an empty collection will be returned; if the result contains\nrows, a collection of SaleRow objects representing each row will be returned. \n<p></p>Note that the internal logic starts by calling reader.<xref href=\"SuperOffice.Data.SoDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref>, \nwhich is correct if you hand the method the result of an <xref href=\"SuperOffice.Data.SoCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>,\nbut if the reader has already been advanced one or more rows, the current row will be skipped and collection\npopulation will start with the next row.\n"
  syntax:
    content: public static Task<SaleRows> GetFromReaderAsync(SoDataReader reader, SaleTableInfo tableInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: <xref href="SuperOffice.Data.SoDataReader" data-throw-if-not-resolved="false"></xref> positioned to a valid database row.
    - id: tableInfo
      type: SuperOffice.CRM.Data.SaleTableInfo
      description: >-
        <xref href="SuperOffice.CRM.Data.SaleTableInfo" data-throw-if-not-resolved="false"></xref> instance used in the query that is the source of the reader.
                    The fields used from the reader will be those owned by this tableinfo object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
    content.vb: Public Shared Function GetFromReaderAsync(reader As SoDataReader, tableInfo As SaleTableInfo, cancellationToken As CancellationToken = Nothing) As Task(Of SaleRows)
  overload: SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.SaleRows.Add(SuperOffice.CRM.Rows.SaleRow)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.Add(SuperOffice.CRM.Rows.SaleRow)
  id: Add(SuperOffice.CRM.Rows.SaleRow)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: Add(SaleRow)
  nameWithType: SaleRows.Add(SaleRow)
  fullName: SuperOffice.CRM.Rows.SaleRows.Add(SuperOffice.CRM.Rows.SaleRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd one SaleRow to the collection.\n"
  syntax:
    content: public int Add(SaleRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.SaleRow
      description: An instance of SaleRow to be added to the collection.
    return:
      type: System.Int32
      description: The index of the added SaleRow.
    content.vb: Public Function Add(row As SaleRow) As Integer
  overload: SuperOffice.CRM.Rows.SaleRows.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.SaleRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow})
  commentId: M:SuperOffice.CRM.Rows.SaleRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow})
  id: AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow})
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<SaleRow>)
  nameWithType: SaleRows.AddRange(IEnumerable<SaleRow>)
  fullName: SuperOffice.CRM.Rows.SaleRows.AddRange(System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.SaleRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd a range of SaleRow to the collection.\n"
  syntax:
    content: public SaleRows AddRange(IEnumerable<SaleRow> rows)
    parameters:
    - id: rows
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow}
    return:
      type: SuperOffice.CRM.Rows.SaleRows
      description: The updated SaleRows collection object.
    content.vb: Public Function AddRange(rows As IEnumerable(Of SaleRow)) As SaleRows
  overload: SuperOffice.CRM.Rows.SaleRows.AddRange*
  nameWithType.vb: SaleRows.AddRange(IEnumerable(Of SaleRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.SaleRows.AddRange(System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.SaleRow))
  name.vb: AddRange(IEnumerable(Of SaleRow))
- uid: SuperOffice.CRM.Rows.SaleRows.AddNew
  commentId: M:SuperOffice.CRM.Rows.SaleRows.AddNew
  id: AddNew
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: AddNew()
  nameWithType: SaleRows.AddNew()
  fullName: SuperOffice.CRM.Rows.SaleRows.AddNew()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd a new instance of SaleRow added to the collection.\n"
  syntax:
    content: public SaleRow AddNew()
    return:
      type: SuperOffice.CRM.Rows.SaleRow
      description: A new instance of SaleRow added to the collection.
    content.vb: Public Function AddNew As SaleRow
  overload: SuperOffice.CRM.Rows.SaleRows.AddNew*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.SaleRows.Remove(SuperOffice.CRM.Rows.SaleRow)
  commentId: M:SuperOffice.CRM.Rows.SaleRows.Remove(SuperOffice.CRM.Rows.SaleRow)
  id: Remove(SuperOffice.CRM.Rows.SaleRow)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: Remove(SaleRow)
  nameWithType: SaleRows.Remove(SaleRow)
  fullName: SuperOffice.CRM.Rows.SaleRows.Remove(SuperOffice.CRM.Rows.SaleRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nRemoves the given SaleRow from the collection\n"
  syntax:
    content: public void Remove(SaleRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.SaleRow
      description: the SaleRow to be removed
    content.vb: Public Sub Remove(row As SaleRow)
  overload: SuperOffice.CRM.Rows.SaleRows.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.SaleRows.CreateChild
  commentId: M:SuperOffice.CRM.Rows.SaleRows.CreateChild
  id: CreateChild
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: CreateChild()
  nameWithType: SaleRows.CreateChild()
  fullName: SuperOffice.CRM.Rows.SaleRows.CreateChild()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of SaleRow\n"
  syntax:
    content: protected override TableRowBase CreateChild()
    return:
      type: SuperOffice.CRM.Rows.TableRowBase
      description: New instance of SaleRow
    content.vb: Protected Overrides Function CreateChild As TableRowBase
  overridden: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  overload: SuperOffice.CRM.Rows.SaleRows.CreateChild*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.CRM.Rows.SaleRows.ToArray
  commentId: M:SuperOffice.CRM.Rows.SaleRows.ToArray
  id: ToArray
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: SaleRows.ToArray()
  fullName: SuperOffice.CRM.Rows.SaleRows.ToArray()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  syntax:
    content: public SaleRow[] ToArray()
    return:
      type: SuperOffice.CRM.Rows.SaleRow[]
    content.vb: Public Function ToArray As SaleRow()
  overload: SuperOffice.CRM.Rows.SaleRows.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.SaleRows.ToString
  commentId: M:SuperOffice.CRM.Rows.SaleRows.ToString
  id: ToString
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SaleRows.ToString()
  fullName: SuperOffice.CRM.Rows.SaleRows.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nFor debugging: Number of members, and the first (up to) 5 items\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SuperOffice.CRM.Rows.SaleRows.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.CRM.Rows.SaleRows.Item(System.Int32)
  commentId: P:SuperOffice.CRM.Rows.SaleRows.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.CRM.Rows.SaleRows
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SaleRows.Item[Int32]
  fullName: SuperOffice.CRM.Rows.SaleRows.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nGet a SaleRow given its index in the collection.\n"
  syntax:
    content: public SaleRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the SaleRow in the collection
    return:
      type: SuperOffice.CRM.Rows.SaleRow
    content.vb: Public ReadOnly Property Item(index As Integer) As SaleRow
  overload: SuperOffice.CRM.Rows.SaleRows.Item*
  nameWithType.vb: SaleRows.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Rows.SaleRows.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.NestedPersist
  commentId: T:SuperOffice.Data.NestedPersist
  parent: SuperOffice.Data
  isExternal: true
  name: NestedPersist
  nameWithType: NestedPersist
  fullName: SuperOffice.Data.NestedPersist
- uid: SuperOffice.Data.NestedPersistFacade
  commentId: T:SuperOffice.Data.NestedPersistFacade
  parent: SuperOffice.Data
  isExternal: true
  name: NestedPersistFacade
  nameWithType: NestedPersistFacade
  fullName: SuperOffice.Data.NestedPersistFacade
- uid: SuperOffice.Data.NestedCollectionPersist
  commentId: T:SuperOffice.Data.NestedCollectionPersist
  parent: SuperOffice.Data
  isExternal: true
  name: NestedCollectionPersist
  nameWithType: NestedCollectionPersist
  fullName: SuperOffice.Data.NestedCollectionPersist
- uid: SuperOffice.CRM.Rows.TableRowsBase
  commentId: T:SuperOffice.CRM.Rows.TableRowsBase
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TableRowsBase
  nameWithType: TableRowsBase
  fullName: SuperOffice.CRM.Rows.TableRowsBase
- uid: SuperOffice.Data.INestedPersist
  commentId: T:SuperOffice.Data.INestedPersist
  parent: SuperOffice.Data
  isExternal: true
  name: INestedPersist
  nameWithType: INestedPersist
  fullName: SuperOffice.Data.INestedPersist
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INestedPersist>
  nameWithType: IEnumerable<INestedPersist>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.INestedPersist>
  nameWithType.vb: IEnumerable(Of INestedPersist)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.INestedPersist)
  name.vb: IEnumerable(Of INestedPersist)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.IBindingList
  isExternal: true
  name: IBindingList
  nameWithType: IBindingList
  fullName: System.ComponentModel.IBindingList
- uid: SuperOffice.CRM.Rows.TableRowsBase._innerList
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._innerList
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _innerList
  nameWithType: TableRowsBase._innerList
  fullName: SuperOffice.CRM.Rows.TableRowsBase._innerList
- uid: SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _allHasBeenMarkedForDelete
  nameWithType: TableRowsBase._allHasBeenMarkedForDelete
  fullName: SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
- uid: SuperOffice.CRM.Rows.TableRowsBase._sentries
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._sentries
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _sentries
  nameWithType: TableRowsBase._sentries
  fullName: SuperOffice.CRM.Rows.TableRowsBase._sentries
- uid: SuperOffice.CRM.Rows.TableRowsBase._idx
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._idx
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _idx
  nameWithType: TableRowsBase._idx
  fullName: SuperOffice.CRM.Rows.TableRowsBase._idx
- uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: OnIndexChanged(IdxBase)
  nameWithType: TableRowsBase.OnIndexChanged(IdxBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
    name: OnIndexChanged
    nameWithType: TableRowsBase.OnIndexChanged
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
    name: OnIndexChanged
    nameWithType: TableRowsBase.OnIndexChanged
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: LoadAsync(IdxBase, CancellationToken)
  nameWithType: TableRowsBase.LoadAsync(IdxBase, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
    name: LoadAsync
    nameWithType: TableRowsBase.LoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
    name: LoadAsync
    nameWithType: TableRowsBase.LoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoadAsync(CancellationToken)
  nameWithType: TableRowsBase.RowsLoadAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoadAsync(ITableRowLoadHandlerFactory, CancellationToken)
  nameWithType: TableRowsBase.RowsLoadAsync(ITableRowLoadHandlerFactory, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: DeleteAsync()
  nameWithType: TableRowsBase.DeleteAsync()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    name: DeleteAsync
    nameWithType: TableRowsBase.DeleteAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    name: DeleteAsync
    nameWithType: TableRowsBase.DeleteAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: GetEnumerator()
  nameWithType: TableRowsBase.GetEnumerator()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    name: GetEnumerator
    nameWithType: TableRowsBase.GetEnumerator
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    name: GetEnumerator
    nameWithType: TableRowsBase.GetEnumerator
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Add(TableRowBase)
  nameWithType: TableRowsBase.Add(TableRowBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
    name: Add
    nameWithType: TableRowsBase.Add
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
    name: Add
    nameWithType: TableRowsBase.Add
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Remove(TableRowBase)
  nameWithType: TableRowsBase.Remove(TableRowBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
    name: Remove
    nameWithType: TableRowsBase.Remove
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
    name: Remove
    nameWithType: TableRowsBase.Remove
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Clear
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Clear()
  nameWithType: TableRowsBase.Clear()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
    name: Clear
    nameWithType: TableRowsBase.Clear
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
    name: Clear
    nameWithType: TableRowsBase.Clear
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Sort(IComparer)
  nameWithType: TableRowsBase.Sort(IComparer)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
    name: Sort
    nameWithType: TableRowsBase.Sort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
    name: Sort
    nameWithType: TableRowsBase.Sort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: GetPrimaryKeys()
  nameWithType: TableRowsBase.GetPrimaryKeys()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    name: GetPrimaryKeys
    nameWithType: TableRowsBase.GetPrimaryKeys
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    name: GetPrimaryKeys
    nameWithType: TableRowsBase.GetPrimaryKeys
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: OnAdded(Object, Int32)
  nameWithType: TableRowsBase.OnAdded(Object, Int32)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
    name: OnAdded
    nameWithType: TableRowsBase.OnAdded
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
    name: OnAdded
    nameWithType: TableRowsBase.OnAdded
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: TableRowsBase.CopyTo(Array, Int32)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: TableRowsBase.CopyTo
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: TableRowsBase.CopyTo
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IndexOf(Object)
  nameWithType: TableRowsBase.IndexOf(Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
    name: IndexOf
    nameWithType: TableRowsBase.IndexOf
    fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
    name: IndexOf
    nameWithType: TableRowsBase.IndexOf
    fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Contains(Object)
  nameWithType: TableRowsBase.Contains(Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
    name: Contains
    nameWithType: TableRowsBase.Contains
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
    name: Contains
    nameWithType: TableRowsBase.Contains
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AddIndex(PropertyDescriptor)
  nameWithType: TableRowsBase.AddIndex(PropertyDescriptor)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
    name: AddIndex
    nameWithType: TableRowsBase.AddIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
    name: AddIndex
    nameWithType: TableRowsBase.AddIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: ApplySort(PropertyDescriptor, ListSortDirection)
  nameWithType: TableRowsBase.ApplySort(PropertyDescriptor, ListSortDirection)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    name: ApplySort
    nameWithType: TableRowsBase.ApplySort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    name: ApplySort
    nameWithType: TableRowsBase.ApplySort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Find(PropertyDescriptor, Object)
  nameWithType: TableRowsBase.Find(PropertyDescriptor, Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor, System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    name: Find
    nameWithType: TableRowsBase.Find
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    name: Find
    nameWithType: TableRowsBase.Find
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RemoveIndex(PropertyDescriptor)
  nameWithType: TableRowsBase.RemoveIndex(PropertyDescriptor)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    name: RemoveIndex
    nameWithType: TableRowsBase.RemoveIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    name: RemoveIndex
    nameWithType: TableRowsBase.RemoveIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RemoveSort()
  nameWithType: TableRowsBase.RemoveSort()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    name: RemoveSort
    nameWithType: TableRowsBase.RemoveSort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    name: RemoveSort
    nameWithType: TableRowsBase.RemoveSort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Load(IdxBase)
  nameWithType: TableRowsBase.Load(IdxBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
    name: Load
    nameWithType: TableRowsBase.Load
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
    name: Load
    nameWithType: TableRowsBase.Load
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoad()
  nameWithType: TableRowsBase.RowsLoad()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoad(ITableRowLoadHandlerFactory)
  nameWithType: TableRowsBase.RowsLoad(ITableRowLoadHandlerFactory)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Sentries
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Sentries
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Sentries
  nameWithType: TableRowsBase.Sentries
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Sentries
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsDirty
  nameWithType: TableRowsBase.IsDirty
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsDirty
- uid: SuperOffice.CRM.Rows.TableRowsBase.Index
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Index
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Index
  nameWithType: TableRowsBase.Index
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Index
- uid: SuperOffice.CRM.Rows.TableRowsBase.Count
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Count
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Count
  nameWithType: TableRowsBase.Count
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Count
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsMarkedForDelete
  nameWithType: TableRowsBase.IsMarkedForDelete
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsFixedSize
  nameWithType: TableRowsBase.IsFixedSize
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsReadOnly
  nameWithType: TableRowsBase.IsReadOnly
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowEdit
  nameWithType: TableRowsBase.AllowEdit
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowNew
  nameWithType: TableRowsBase.AllowNew
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowNew
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowRemove
  nameWithType: TableRowsBase.AllowRemove
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsSorted
  nameWithType: TableRowsBase.IsSorted
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsSorted
- uid: SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SortDirection
  nameWithType: TableRowsBase.SortDirection
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SortDirection
- uid: SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SortProperty
  nameWithType: TableRowsBase.SortProperty
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SortProperty
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsChangeNotification
  nameWithType: TableRowsBase.SupportsChangeNotification
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsSearching
  nameWithType: TableRowsBase.SupportsSearching
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsSorting
  nameWithType: TableRowsBase.SupportsSorting
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
- uid: SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _onCollectionChanged
  nameWithType: TableRowsBase._onCollectionChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
- uid: SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CollectionChanged
  nameWithType: TableRowsBase.CollectionChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
- uid: SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: ListChanged
  nameWithType: TableRowsBase.ListChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase.ListChanged
- uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  commentId: M:SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  parent: SuperOffice.Data.NestedCollectionPersist
  isExternal: true
  name: GetFacadingItems()
  nameWithType: NestedCollectionPersist.GetFacadingItems()
  fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems()
  spec.csharp:
  - uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    name: GetFacadingItems
    nameWithType: NestedCollectionPersist.GetFacadingItems
    fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    name: GetFacadingItems
    nameWithType: NestedCollectionPersist.GetFacadingItems
    fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedCollectionPersist.IsDeleted
  commentId: P:SuperOffice.Data.NestedCollectionPersist.IsDeleted
  parent: SuperOffice.Data.NestedCollectionPersist
  isExternal: true
  name: IsDeleted
  nameWithType: NestedCollectionPersist.IsDeleted
  fullName: SuperOffice.Data.NestedCollectionPersist.IsDeleted
- uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPreIdUpdateAsync()
  nameWithType: NestedPersistFacade.OnPreIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    name: OnPreIdUpdateAsync
    nameWithType: NestedPersistFacade.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    name: OnPreIdUpdateAsync
    nameWithType: NestedPersistFacade.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPrimaryKeyRequestAsync(PKContainer)
  nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyRequestAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyRequestAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPrimaryKeyUpdateAsync(PKContainer)
  nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnIdUpdateAsync()
  nameWithType: NestedPersistFacade.OnIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    name: OnIdUpdateAsync
    nameWithType: NestedPersistFacade.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    name: OnIdUpdateAsync
    nameWithType: NestedPersistFacade.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnSaveAsync(BatchSave)
  nameWithType: NestedPersistFacade.OnSaveAsync(BatchSave)
  fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: OnSaveAsync
    nameWithType: NestedPersistFacade.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: OnSaveAsync
    nameWithType: NestedPersistFacade.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnSavedAsync(Boolean)
  nameWithType: NestedPersistFacade.OnSavedAsync(Boolean)
  fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
    name: OnSavedAsync
    nameWithType: NestedPersistFacade.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
    name: OnSavedAsync
    nameWithType: NestedPersistFacade.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist._saveOwner
  commentId: F:SuperOffice.Data.NestedPersist._saveOwner
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: _saveOwner
  nameWithType: NestedPersist._saveOwner
  fullName: SuperOffice.Data.NestedPersist._saveOwner
- uid: SuperOffice.Data.NestedPersist._isSaving
  commentId: F:SuperOffice.Data.NestedPersist._isSaving
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: _isSaving
  nameWithType: NestedPersist._isSaving
  fullName: SuperOffice.Data.NestedPersist._isSaving
- uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  commentId: M:SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: SetSaveOwner(INestedPersist)
  nameWithType: NestedPersist.SetSaveOwner(INestedPersist)
  fullName: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
    name: SetSaveOwner
    nameWithType: NestedPersist.SetSaveOwner
    fullName: SuperOffice.Data.NestedPersist.SetSaveOwner
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
    name: SetSaveOwner
    nameWithType: NestedPersist.SetSaveOwner
    fullName: SuperOffice.Data.NestedPersist.SetSaveOwner
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SaveAsync
  commentId: M:SuperOffice.Data.NestedPersist.SaveAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: SaveAsync()
  nameWithType: NestedPersist.SaveAsync()
  fullName: SuperOffice.Data.NestedPersist.SaveAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SaveAsync
    name: SaveAsync
    nameWithType: NestedPersist.SaveAsync
    fullName: SuperOffice.Data.NestedPersist.SaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SaveAsync
    name: SaveAsync
    nameWithType: NestedPersist.SaveAsync
    fullName: SuperOffice.Data.NestedPersist.SaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPreIdUpdateAsync()
  nameWithType: NestedPersist.INestedPersist.OnPreIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  name.vb: SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
    name: INestedPersist.OnPreIdUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
    name: SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  name.vb: SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: INestedPersist.OnPrimaryKeyRequestAsync
    nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  name.vb: SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: INestedPersist.OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnIdUpdateAsync()
  nameWithType: NestedPersist.INestedPersist.OnIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  name.vb: SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
    name: INestedPersist.OnIdUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
    name: SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnSaveAsync(BatchSave)
  nameWithType: NestedPersist.INestedPersist.OnSaveAsync(BatchSave)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync(BatchSave)
  name.vb: SuperOffice.Data.INestedPersist.OnSaveAsync(BatchSave)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: INestedPersist.OnSaveAsync
    nameWithType: NestedPersist.INestedPersist.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: SuperOffice.Data.INestedPersist.OnSaveAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnSavedAsync(Boolean)
  nameWithType: NestedPersist.INestedPersist.OnSavedAsync(Boolean)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync(System.Boolean)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync(Boolean)
  name.vb: SuperOffice.Data.INestedPersist.OnSavedAsync(Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
    name: INestedPersist.OnSavedAsync
    nameWithType: NestedPersist.INestedPersist.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
    name: SuperOffice.Data.INestedPersist.OnSavedAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  commentId: M:SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: add_OnElementSaved(OnSaved)
  nameWithType: NestedPersist.add_OnElementSaved(OnSaved)
  fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
    name: add_OnElementSaved
    nameWithType: NestedPersist.add_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
    name: add_OnElementSaved
    nameWithType: NestedPersist.add_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  commentId: M:SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: remove_OnElementSaved(OnSaved)
  nameWithType: NestedPersist.remove_OnElementSaved(OnSaved)
  fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
    name: remove_OnElementSaved
    nameWithType: NestedPersist.remove_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
    name: remove_OnElementSaved
    nameWithType: NestedPersist.remove_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  commentId: M:SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: add_OnElementIdUpdate(OnIdUpdate)
  nameWithType: NestedPersist.add_OnElementIdUpdate(OnIdUpdate)
  fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: add_OnElementIdUpdate
    nameWithType: NestedPersist.add_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: add_OnElementIdUpdate
    nameWithType: NestedPersist.add_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  commentId: M:SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: remove_OnElementIdUpdate(OnIdUpdate)
  nameWithType: NestedPersist.remove_OnElementIdUpdate(OnIdUpdate)
  fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: remove_OnElementIdUpdate
    nameWithType: NestedPersist.remove_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: remove_OnElementIdUpdate
    nameWithType: NestedPersist.remove_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.IsSaving
  commentId: P:SuperOffice.Data.NestedPersist.IsSaving
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: IsSaving
  nameWithType: NestedPersist.IsSaving
  fullName: SuperOffice.Data.NestedPersist.IsSaving
- uid: SuperOffice.Data.NestedPersist.OnElementSaved
  commentId: E:SuperOffice.Data.NestedPersist.OnElementSaved
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: OnElementSaved
  nameWithType: NestedPersist.OnElementSaved
  fullName: SuperOffice.Data.NestedPersist.OnElementSaved
- uid: SuperOffice.Data.NestedPersist.OnElementIdUpdate
  commentId: E:SuperOffice.Data.NestedPersist.OnElementIdUpdate
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: OnElementIdUpdate
  nameWithType: NestedPersist.OnElementIdUpdate
  fullName: SuperOffice.Data.NestedPersist.OnElementIdUpdate
- uid: SuperOffice.CRM.Rows.SaleRows.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SaleRows, To>()
  nameWithType: EnumUtil.MapEnums<SaleRows, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Rows.SaleRows, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SaleRows, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Rows.SaleRows, To)()
  name.vb: MapEnums(Of SaleRows, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SaleRows, To>
    nameWithType: EnumUtil.MapEnums<SaleRows, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Rows.SaleRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SaleRows, To)
    nameWithType: EnumUtil.MapEnums(Of SaleRows, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Rows.SaleRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SaleRows, To>()
  nameWithType: Converters.MapEnums<SaleRows, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Rows.SaleRows, To>()
  nameWithType.vb: Converters.MapEnums(Of SaleRows, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Rows.SaleRows, To)()
  name.vb: MapEnums(Of SaleRows, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SaleRows, To>
    nameWithType: Converters.MapEnums<SaleRows, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Rows.SaleRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SaleRows, To)
    nameWithType: Converters.MapEnums(Of SaleRows, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Rows.SaleRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Rows.SaleRows.ForEach*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.ForEach
  isExternal: true
  name: ForEach
  nameWithType: SaleRows.ForEach
  fullName: SuperOffice.CRM.Rows.SaleRows.ForEach
- uid: System.Action{SuperOffice.CRM.Rows.SaleRow}
  commentId: '!:System.Action{SuperOffice.CRM.Rows.SaleRow}'
  definition: System.Action`1
  name: Action<SaleRow>
  nameWithType: Action<SaleRow>
  fullName: System.Action<SuperOffice.CRM.Rows.SaleRow>
  nameWithType.vb: Action(Of SaleRow)
  fullName.vb: System.Action(Of SuperOffice.CRM.Rows.SaleRow)
  name.vb: Action(Of SaleRow)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRows.Find*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.Find
  isExternal: true
  name: Find
  nameWithType: SaleRows.Find
  fullName: SuperOffice.CRM.Rows.SaleRows.Find
- uid: System.Predicate{SuperOffice.CRM.Rows.SaleRow}
  commentId: '!:System.Predicate{SuperOffice.CRM.Rows.SaleRow}'
  definition: System.Predicate`1
  name: Predicate<SaleRow>
  nameWithType: Predicate<SaleRow>
  fullName: System.Predicate<SuperOffice.CRM.Rows.SaleRow>
  nameWithType.vb: Predicate(Of SaleRow)
  fullName.vb: System.Predicate(Of SuperOffice.CRM.Rows.SaleRow)
  name.vb: Predicate(Of SaleRow)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRow
  commentId: T:SuperOffice.CRM.Rows.SaleRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: SaleRow
  nameWithType: SaleRow
  fullName: SuperOffice.CRM.Rows.SaleRow
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRows.FindAll*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.FindAll
  isExternal: true
  name: FindAll
  nameWithType: SaleRows.FindAll
  fullName: SuperOffice.CRM.Rows.SaleRows.FindAll
- uid: SuperOffice.CRM.Rows.SaleRows
  commentId: T:SuperOffice.CRM.Rows.SaleRows
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: SaleRows
  nameWithType: SaleRows
  fullName: SuperOffice.CRM.Rows.SaleRows
- uid: SuperOffice.CRM.Rows.SaleRows.CreateNew*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.CreateNew
  isExternal: true
  name: CreateNew
  nameWithType: SaleRows.CreateNew
  fullName: SuperOffice.CRM.Rows.SaleRows.CreateNew
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync
  isExternal: true
  name: GetFromCustomSearchAsync
  nameWithType: SaleRows.GetFromCustomSearchAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromCustomSearchAsync
- uid: SuperOffice.CRM.Rows.SaleRows.CustomSearch
  commentId: T:SuperOffice.CRM.Rows.SaleRows.CustomSearch
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: SaleRows.CustomSearch
  nameWithType: SaleRows.CustomSearch
  fullName: SuperOffice.CRM.Rows.SaleRows.CustomSearch
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.SaleRows}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SaleRows>
  nameWithType: Task<SaleRows>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.SaleRows>
  nameWithType.vb: Task(Of SaleRows)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.SaleRows)
  name.vb: Task(Of SaleRows)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.SaleRows
    name: SaleRows
    nameWithType: SaleRows
    fullName: SuperOffice.CRM.Rows.SaleRows
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.SaleRows
    name: SaleRows
    nameWithType: SaleRows
    fullName: SuperOffice.CRM.Rows.SaleRows
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync
  isExternal: true
  name: GetFromIdxContactIdAsync
  nameWithType: SaleRows.GetFromIdxContactIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync
  isExternal: true
  name: GetFromIdxPersonIdAsync
  nameWithType: SaleRows.GetFromIdxPersonIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxPersonIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync
  isExternal: true
  name: GetFromIdxSaledateAsync
  nameWithType: SaleRows.GetFromIdxSaledateAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSaledateAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync
  isExternal: true
  name: GetFromIdxProjectIdAsync
  nameWithType: SaleRows.GetFromIdxProjectIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync
  isExternal: true
  name: GetFromIdxUserdefIdAsync
  nameWithType: SaleRows.GetFromIdxUserdefIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdefIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync
  isExternal: true
  name: GetFromIdxUserdef2IdAsync
  nameWithType: SaleRows.GetFromIdxUserdef2IdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxUserdef2IdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync
  isExternal: true
  name: GetFromIdxHeadingAsync
  nameWithType: SaleRows.GetFromIdxHeadingAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxHeadingAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync
  isExternal: true
  name: GetFromIdxStatusAsync
  nameWithType: SaleRows.GetFromIdxStatusAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxStatusAsync
- uid: SuperOffice.Data.SaleStatus
  commentId: T:SuperOffice.Data.SaleStatus
  parent: SuperOffice.Data
  isExternal: true
  name: SaleStatus
  nameWithType: SaleStatus
  fullName: SuperOffice.Data.SaleStatus
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync
  isExternal: true
  name: GetFromIdxDoneAsync
  nameWithType: SaleRows.GetFromIdxDoneAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxDoneAsync
- uid: SuperOffice.Data.SaleDone
  commentId: T:SuperOffice.Data.SaleDone
  parent: SuperOffice.Data
  isExternal: true
  name: SaleDone
  nameWithType: SaleDone
  fullName: SuperOffice.Data.SaleDone
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async
  isExternal: true
  name: GetFromIdxNumber1Async
  nameWithType: SaleRows.GetFromIdxNumber1Async
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxNumber1Async
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync
  isExternal: true
  name: GetFromIdxSourceAsync
  nameWithType: SaleRows.GetFromIdxSourceAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxSourceAsync
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync
  isExternal: true
  name: GetFromIdxAssociateIdAsync
  nameWithType: SaleRows.GetFromIdxAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync
  isExternal: true
  name: GetFromIdxAssociateIdDoneAsync
  nameWithType: SaleRows.GetFromIdxAssociateIdDoneAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync
  isExternal: true
  name: GetFromIdxAssociateIdDoneSaledateAsync
  nameWithType: SaleRows.GetFromIdxAssociateIdDoneSaledateAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxAssociateIdDoneSaledateAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync
  isExternal: true
  name: GetFromIdxContactIdSaledateAsync
  nameWithType: SaleRows.GetFromIdxContactIdSaledateAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync
  isExternal: true
  name: GetFromIdxContactIdSaledateAssociateIdAsync
  nameWithType: SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxContactIdSaledateAssociateIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync
  isExternal: true
  name: GetFromIdxProjectIdSaledateAsync
  nameWithType: SaleRows.GetFromIdxProjectIdSaledateAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync
  isExternal: true
  name: GetFromIdxProjectIdSaledateAssociateIdAsync
  nameWithType: SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxProjectIdSaledateAssociateIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync
  isExternal: true
  name: GetFromIdxCreatedByWorkflowIdAsync
  nameWithType: SaleRows.GetFromIdxCreatedByWorkflowIdAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromIdxCreatedByWorkflowIdAsync
- uid: SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync
  isExternal: true
  name: GetFromReaderAsync
  nameWithType: SaleRows.GetFromReaderAsync
  fullName: SuperOffice.CRM.Rows.SaleRows.GetFromReaderAsync
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: SuperOffice.CRM.Data.SaleTableInfo
  commentId: T:SuperOffice.CRM.Data.SaleTableInfo
  parent: SuperOffice.CRM.Data
  isExternal: true
  name: SaleTableInfo
  nameWithType: SaleTableInfo
  fullName: SuperOffice.CRM.Data.SaleTableInfo
- uid: SuperOffice.CRM.Data
  commentId: N:SuperOffice.CRM.Data
  isExternal: true
  name: SuperOffice.CRM.Data
  nameWithType: SuperOffice.CRM.Data
  fullName: SuperOffice.CRM.Data
- uid: SuperOffice.CRM.Rows.SaleRows.Add*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.Add
  isExternal: true
  name: Add
  nameWithType: SaleRows.Add
  fullName: SuperOffice.CRM.Rows.SaleRows.Add
- uid: SuperOffice.CRM.Rows.SaleRows.AddRange*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.AddRange
  isExternal: true
  name: AddRange
  nameWithType: SaleRows.AddRange
  fullName: SuperOffice.CRM.Rows.SaleRows.AddRange
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.SaleRow}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SaleRow>
  nameWithType: IEnumerable<SaleRow>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.SaleRow>
  nameWithType.vb: IEnumerable(Of SaleRow)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.SaleRow)
  name.vb: IEnumerable(Of SaleRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRows.AddNew*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.AddNew
  isExternal: true
  name: AddNew
  nameWithType: SaleRows.AddNew
  fullName: SuperOffice.CRM.Rows.SaleRows.AddNew
- uid: SuperOffice.CRM.Rows.SaleRows.Remove*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.Remove
  isExternal: true
  name: Remove
  nameWithType: SaleRows.Remove
  fullName: SuperOffice.CRM.Rows.SaleRows.Remove
- uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CreateChild()
  nameWithType: TableRowsBase.CreateChild()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    name: CreateChild
    nameWithType: TableRowsBase.CreateChild
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    name: CreateChild
    nameWithType: TableRowsBase.CreateChild
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.SaleRows.CreateChild*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.CreateChild
  isExternal: true
  name: CreateChild
  nameWithType: SaleRows.CreateChild
  fullName: SuperOffice.CRM.Rows.SaleRows.CreateChild
- uid: SuperOffice.CRM.Rows.TableRowBase
  commentId: T:SuperOffice.CRM.Rows.TableRowBase
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TableRowBase
  nameWithType: TableRowBase
  fullName: SuperOffice.CRM.Rows.TableRowBase
- uid: SuperOffice.CRM.Rows.SaleRows.ToArray*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.ToArray
  isExternal: true
  name: ToArray
  nameWithType: SaleRows.ToArray
  fullName: SuperOffice.CRM.Rows.SaleRows.ToArray
- uid: SuperOffice.CRM.Rows.SaleRow[]
  isExternal: true
  name: SaleRow[]
  nameWithType: SaleRow[]
  fullName: SuperOffice.CRM.Rows.SaleRow[]
  nameWithType.vb: SaleRow()
  fullName.vb: SuperOffice.CRM.Rows.SaleRow()
  name.vb: SaleRow()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Rows.SaleRow
    name: SaleRow
    nameWithType: SaleRow
    fullName: SuperOffice.CRM.Rows.SaleRow
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Rows.SaleRows.ToString*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.ToString
  isExternal: true
  name: ToString
  nameWithType: SaleRows.ToString
  fullName: SuperOffice.CRM.Rows.SaleRows.ToString
- uid: SuperOffice.CRM.Rows.SaleRows.Item*
  commentId: Overload:SuperOffice.CRM.Rows.SaleRows.Item
  isExternal: true
  name: Item
  nameWithType: SaleRows.Item
  fullName: SuperOffice.CRM.Rows.SaleRows.Item
