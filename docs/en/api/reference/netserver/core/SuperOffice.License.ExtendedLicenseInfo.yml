### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.ExtendedLicenseInfo
  commentId: T:SuperOffice.License.ExtendedLicenseInfo
  id: ExtendedLicenseInfo
  parent: SuperOffice.License
  children:
  - SuperOffice.License.ExtendedLicenseInfo.#ctor
  - SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate
  - SuperOffice.License.ExtendedLicenseInfo.CanBeActivated
  - SuperOffice.License.ExtendedLicenseInfo.Current
  - SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses
  - SuperOffice.License.ExtendedLicenseInfo.Item(System.String)
  - SuperOffice.License.ExtendedLicenseInfo.New
  - SuperOffice.License.ExtendedLicenseInfo.Reason
  langs:
  - csharp
  - vb
  name: ExtendedLicenseInfo
  nameWithType: ExtendedLicenseInfo
  fullName: SuperOffice.License.ExtendedLicenseInfo
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public class ExtendedLicenseInfo
    content.vb: Public Class ExtendedLicenseInfo
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.License.ExtendedLicenseInfoWithAssignments
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.License.ExtendedLicenseInfo.EnumUtil.MapEnums``2
  - SuperOffice.License.ExtendedLicenseInfo.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.ExtendedLicenseInfo)
  - SuperOffice.License.ExtendedLicenseInfo.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.License.ExtendedLicenseInfo.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.License.ExtendedLicenseInfo.#ctor
  commentId: M:SuperOffice.License.ExtendedLicenseInfo.#ctor
  id: '#ctor'
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: ExtendedLicenseInfo()
  nameWithType: ExtendedLicenseInfo.ExtendedLicenseInfo()
  fullName: SuperOffice.License.ExtendedLicenseInfo.ExtendedLicenseInfo()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public ExtendedLicenseInfo()
    content.vb: Public Sub New
  overload: SuperOffice.License.ExtendedLicenseInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ExtendedLicenseInfo.Item(System.String)
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.Item(System.String)
  id: Item(System.String)
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ExtendedLicenseInfo.Item[String]
  fullName: SuperOffice.License.ExtendedLicenseInfo.Item[System.String]
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nGet the extended module license from the module name.\n"
  syntax:
    content: public ExtendedModuleLicense this[string moduleName] { get; }
    parameters:
    - id: moduleName
      type: System.String
      description: Name of the module.
    return:
      type: SuperOffice.License.ExtendedModuleLicense
      description: The extended module license foound.  Null if no module is found.
    content.vb: Public ReadOnly Property Item(moduleName As String) As ExtendedModuleLicense
  overload: SuperOffice.License.ExtendedLicenseInfo.Item*
  nameWithType.vb: ExtendedLicenseInfo.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.License.ExtendedLicenseInfo.Item(System.String)
  name.vb: Item(String)
- uid: SuperOffice.License.ExtendedLicenseInfo.Reason
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.Reason
  id: Reason
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: Reason
  nameWithType: ExtendedLicenseInfo.Reason
  fullName: SuperOffice.License.ExtendedLicenseInfo.Reason
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public string Reason { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Reason As String
  overload: SuperOffice.License.ExtendedLicenseInfo.Reason*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ExtendedLicenseInfo.CanBeActivated
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.CanBeActivated
  id: CanBeActivated
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: CanBeActivated
  nameWithType: ExtendedLicenseInfo.CanBeActivated
  fullName: SuperOffice.License.ExtendedLicenseInfo.CanBeActivated
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public bool CanBeActivated { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanBeActivated As Boolean
  overload: SuperOffice.License.ExtendedLicenseInfo.CanBeActivated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ExtendedLicenseInfo.New
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.New
  id: New
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: New
  nameWithType: ExtendedLicenseInfo.New
  fullName: SuperOffice.License.ExtendedLicenseInfo.New
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public LicenseInfo New { get; set; }
    parameters: []
    return:
      type: SuperOffice.License.LicenseInfo
    content.vb: Public Property New As LicenseInfo
  overload: SuperOffice.License.ExtendedLicenseInfo.New*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ExtendedLicenseInfo.Current
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.Current
  id: Current
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ExtendedLicenseInfo.Current
  fullName: SuperOffice.License.ExtendedLicenseInfo.Current
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public LicenseInfo Current { get; set; }
    parameters: []
    return:
      type: SuperOffice.License.LicenseInfo
    content.vb: Public Property Current As LicenseInfo
  overload: SuperOffice.License.ExtendedLicenseInfo.Current*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses
  id: ExtendedModuleLicenses
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: ExtendedModuleLicenses
  nameWithType: ExtendedLicenseInfo.ExtendedModuleLicenses
  fullName: SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public ExtendedModuleLicense[] ExtendedModuleLicenses { get; set; }
    parameters: []
    return:
      type: SuperOffice.License.ExtendedModuleLicense[]
    content.vb: Public Property ExtendedModuleLicenses As ExtendedModuleLicense()
  overload: SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate
  commentId: P:SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate
  id: AccumulatedNextCheckDate
  parent: SuperOffice.License.ExtendedLicenseInfo
  langs:
  - csharp
  - vb
  name: AccumulatedNextCheckDate
  nameWithType: ExtendedLicenseInfo.AccumulatedNextCheckDate
  fullName: SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  syntax:
    content: public DateTime AccumulatedNextCheckDate { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property AccumulatedNextCheckDate As Date
  overload: SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ExtendedLicenseInfo.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ExtendedLicenseInfo, To>()
  nameWithType: EnumUtil.MapEnums<ExtendedLicenseInfo, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.ExtendedLicenseInfo, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ExtendedLicenseInfo, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.ExtendedLicenseInfo, To)()
  name.vb: MapEnums(Of ExtendedLicenseInfo, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ExtendedLicenseInfo, To>
    nameWithType: EnumUtil.MapEnums<ExtendedLicenseInfo, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.ExtendedLicenseInfo, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ExtendedLicenseInfo, To)
    nameWithType: EnumUtil.MapEnums(Of ExtendedLicenseInfo, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.ExtendedLicenseInfo, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ExtendedLicenseInfo.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<ExtendedLicenseInfo>(ExtendedLicenseInfo)
  nameWithType: ObjectExtensions.AssignByReflection<ExtendedLicenseInfo>(ExtendedLicenseInfo)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.ExtendedLicenseInfo>(SuperOffice.License.ExtendedLicenseInfo)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of ExtendedLicenseInfo)(ExtendedLicenseInfo)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.ExtendedLicenseInfo)(SuperOffice.License.ExtendedLicenseInfo)
  name.vb: AssignByReflection(Of ExtendedLicenseInfo)(ExtendedLicenseInfo)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<ExtendedLicenseInfo>
    nameWithType: ObjectExtensions.AssignByReflection<ExtendedLicenseInfo>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.ExtendedLicenseInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of ExtendedLicenseInfo)
    nameWithType: ObjectExtensions.AssignByReflection(Of ExtendedLicenseInfo)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.ExtendedLicenseInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ExtendedLicenseInfo.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<ExtendedLicenseInfo>()
  nameWithType: ObjectExtensions.GraphCopy<ExtendedLicenseInfo>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.ExtendedLicenseInfo>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of ExtendedLicenseInfo)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.ExtendedLicenseInfo)()
  name.vb: GraphCopy(Of ExtendedLicenseInfo)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<ExtendedLicenseInfo>
    nameWithType: ObjectExtensions.GraphCopy<ExtendedLicenseInfo>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.ExtendedLicenseInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of ExtendedLicenseInfo)
    nameWithType: ObjectExtensions.GraphCopy(Of ExtendedLicenseInfo)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.ExtendedLicenseInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ExtendedLicenseInfo.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ExtendedLicenseInfo, To>()
  nameWithType: Converters.MapEnums<ExtendedLicenseInfo, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ExtendedLicenseInfo, To>()
  nameWithType.vb: Converters.MapEnums(Of ExtendedLicenseInfo, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ExtendedLicenseInfo, To)()
  name.vb: MapEnums(Of ExtendedLicenseInfo, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ExtendedLicenseInfo, To>
    nameWithType: Converters.MapEnums<ExtendedLicenseInfo, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ExtendedLicenseInfo, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ExtendedLicenseInfo, To)
    nameWithType: Converters.MapEnums(Of ExtendedLicenseInfo, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ExtendedLicenseInfo, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.ExtendedLicenseInfo.#ctor*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.#ctor
  isExternal: true
  name: ExtendedLicenseInfo
  nameWithType: ExtendedLicenseInfo.ExtendedLicenseInfo
  fullName: SuperOffice.License.ExtendedLicenseInfo.ExtendedLicenseInfo
- uid: SuperOffice.License.ExtendedLicenseInfo.Item*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.Item
  isExternal: true
  name: Item
  nameWithType: ExtendedLicenseInfo.Item
  fullName: SuperOffice.License.ExtendedLicenseInfo.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.License.ExtendedModuleLicense
  commentId: T:SuperOffice.License.ExtendedModuleLicense
  parent: SuperOffice.License
  isExternal: true
  name: ExtendedModuleLicense
  nameWithType: ExtendedModuleLicense
  fullName: SuperOffice.License.ExtendedModuleLicense
- uid: SuperOffice.License.ExtendedLicenseInfo.Reason*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.Reason
  isExternal: true
  name: Reason
  nameWithType: ExtendedLicenseInfo.Reason
  fullName: SuperOffice.License.ExtendedLicenseInfo.Reason
- uid: SuperOffice.License.ExtendedLicenseInfo.CanBeActivated*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.CanBeActivated
  isExternal: true
  name: CanBeActivated
  nameWithType: ExtendedLicenseInfo.CanBeActivated
  fullName: SuperOffice.License.ExtendedLicenseInfo.CanBeActivated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.License.ExtendedLicenseInfo.New*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.New
  isExternal: true
  name: New
  nameWithType: ExtendedLicenseInfo.New
  fullName: SuperOffice.License.ExtendedLicenseInfo.New
- uid: SuperOffice.License.LicenseInfo
  isExternal: true
  name: LicenseInfo
  nameWithType: LicenseInfo
  fullName: SuperOffice.License.LicenseInfo
- uid: SuperOffice.License.ExtendedLicenseInfo.Current*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.Current
  isExternal: true
  name: Current
  nameWithType: ExtendedLicenseInfo.Current
  fullName: SuperOffice.License.ExtendedLicenseInfo.Current
- uid: SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses
  isExternal: true
  name: ExtendedModuleLicenses
  nameWithType: ExtendedLicenseInfo.ExtendedModuleLicenses
  fullName: SuperOffice.License.ExtendedLicenseInfo.ExtendedModuleLicenses
- uid: SuperOffice.License.ExtendedModuleLicense[]
  isExternal: true
  name: ExtendedModuleLicense[]
  nameWithType: ExtendedModuleLicense[]
  fullName: SuperOffice.License.ExtendedModuleLicense[]
  nameWithType.vb: ExtendedModuleLicense()
  fullName.vb: SuperOffice.License.ExtendedModuleLicense()
  name.vb: ExtendedModuleLicense()
  spec.csharp:
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    nameWithType: ExtendedModuleLicense
    fullName: SuperOffice.License.ExtendedModuleLicense
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    nameWithType: ExtendedModuleLicense
    fullName: SuperOffice.License.ExtendedModuleLicense
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate*
  commentId: Overload:SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate
  isExternal: true
  name: AccumulatedNextCheckDate
  nameWithType: ExtendedLicenseInfo.AccumulatedNextCheckDate
  fullName: SuperOffice.License.ExtendedLicenseInfo.AccumulatedNextCheckDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
