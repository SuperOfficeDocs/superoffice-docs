### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.IStreamProvider
  commentId: T:SuperOffice.IO.IStreamProvider
  id: IStreamProvider
  parent: SuperOffice.IO
  children:
  - SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  - SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  - SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  - SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  - SuperOffice.IO.IStreamProvider.Length
  - SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IStreamProvider
  nameWithType: IStreamProvider
  fullName: SuperOffice.IO.IStreamProvider
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nInterface for the <see cref=\"!:DocumentStream\"></see> to access the archive.\n"
  syntax:
    content: public interface IStreamProvider
    content.vb: Public Interface IStreamProvider
  extensionMethods:
  - SuperOffice.IO.IStreamProvider.EnumUtil.MapEnums``2
  - SuperOffice.IO.IStreamProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  id: BeginWriteAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: BeginWriteAsync(CancellationToken)
  nameWithType: IStreamProvider.BeginWriteAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.BeginWriteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nStart writing the document file.\n"
  remarks: "\nUse the <xref href=\"SuperOffice.IO.IStreamProvider.Write(System.Int64%2cSystem.Byte%5b%5d%2cSystem.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to write data to the file.  \nAs data might be written to a temporary location, the <see cref=\"!:EndWrite\"></see> \nwill archive the document to the document archive.\n"
  syntax:
    content: Task BeginWriteAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function BeginWriteAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.IStreamProvider.BeginWriteAsync*
- uid: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: WriteAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  nameWithType: IStreamProvider.WriteAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64, System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nWrite a block of data to a file.\n"
  remarks: "\n<see cref=\"!:BeginWrite\"></see> must be called before this method.  It is not \nrequred that <see cref=\"!:BeginWrite\"></see> is called within the scope of \nthis method.  It is required that it is called on bahalf of the same \nuser and on the same document and that either this method or \n<see cref=\"!:BeginWrite\"></see> is called during the last time period specified \nin the configuration.  Default time period is 24 hours.\n"
  syntax:
    content: Task WriteAsync(long filePosition, byte[] buffer, int bufferStartPosition, int lenght, CancellationToken cancellationToken)
    parameters:
    - id: filePosition
      type: System.Int64
      description: Position in the file to start writing
    - id: buffer
      type: System.Byte[]
      description: Buffer to write
    - id: bufferStartPosition
      type: System.Int32
      description: Position in the buffer to start writing from.
    - id: lenght
      type: System.Int32
      description: Number of bytes to write from the buffer.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function WriteAsync(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, lenght As Integer, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.IStreamProvider.WriteAsync*
  nameWithType.vb: IStreamProvider.WriteAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  fullName.vb: SuperOffice.IO.IStreamProvider.WriteAsync(System.Int64, System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Int64, Byte(), Int32, Int32, CancellationToken)
- uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  id: Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: Write(Int64, Byte[], Int32, Int32)
  nameWithType: IStreamProvider.Write(Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.IO.IStreamProvider.Write(System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nSync version of Write, eternally required by the double sync/async contracts of the Stream class\n"
  syntax:
    content: void Write(long filePosition, byte[] buffer, int bufferStartPosition, int lenght)
    parameters:
    - id: filePosition
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferStartPosition
      type: System.Int32
    - id: lenght
      type: System.Int32
    content.vb: Sub Write(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, lenght As Integer)
  overload: SuperOffice.IO.IStreamProvider.Write*
  nameWithType.vb: IStreamProvider.Write(Int64, Byte(), Int32, Int32)
  fullName.vb: SuperOffice.IO.IStreamProvider.Write(System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Int64, Byte(), Int32, Int32)
- uid: SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  id: EndWriteAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: EndWriteAsync(CancellationToken)
  nameWithType: IStreamProvider.EndWriteAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.EndWriteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nSpecify that the writing of the document is completed and that \nthe document can be archived in the document archive.\n"
  syntax:
    content: Task EndWriteAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function EndWriteAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.IStreamProvider.EndWriteAsync*
- uid: SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  id: BeginReadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: BeginReadAsync(CancellationToken)
  nameWithType: IStreamProvider.BeginReadAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.BeginReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nStart reading the document.  \n"
  remarks: "\nRead bytes from the document using the <xref href=\"SuperOffice.IO.IStreamProvider.Read(System.Int64%2cSystem.Byte%5b%5d%2cSystem.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.  \nCall the <see cref=\"!:EndRead\"></see> method to specify that you are \nfinished reading the document.\n"
  syntax:
    content: Task BeginReadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function BeginReadAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.IStreamProvider.BeginReadAsync*
- uid: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: ReadAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  nameWithType: IStreamProvider.ReadAsync(Int64, Byte[], Int32, Int32, CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64, System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nRead data from the document\n"
  remarks: "\n<see cref=\"!:BeginRead\"></see> must be called before this method.  It is not \nrequred that <see cref=\"!:BeginRead\"></see> is called within the scope of \nthis method.  It is required that it is called on bahalf of the same \nuser and on the same document and that either this method or \n<see cref=\"!:BeginRead\"></see> is called during the last time period specified \nin the configuration.  Default time period is 24 hours.\n"
  syntax:
    content: Task<int> ReadAsync(long filePosition, byte[] buffer, int bufferStartPosition, int lenght, CancellationToken cancellationToken)
    parameters:
    - id: filePosition
      type: System.Int64
      description: Position in the file to start reading from.
    - id: buffer
      type: System.Byte[]
      description: Buffer to put the data read.
    - id: bufferStartPosition
      type: System.Int32
      description: Position in buffer to start filling it.
    - id: lenght
      type: System.Int32
      description: Number of bytes to read from the file.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nNumber of bytes actually read from the file.  This should only be \nless then the file when the end of file is reached.\n"
    content.vb: Function ReadAsync(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, lenght As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
  overload: SuperOffice.IO.IStreamProvider.ReadAsync*
  nameWithType.vb: IStreamProvider.ReadAsync(Int64, Byte(), Int32, Int32, CancellationToken)
  fullName.vb: SuperOffice.IO.IStreamProvider.ReadAsync(System.Int64, System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Int64, Byte(), Int32, Int32, CancellationToken)
- uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  id: Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: Read(Int64, Byte[], Int32, Int32)
  nameWithType: IStreamProvider.Read(Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.IO.IStreamProvider.Read(System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nSync version of Read, eternally required by the double sync/async contracts of the Stream class\n"
  syntax:
    content: int Read(long filePosition, byte[] buffer, int bufferStartPosition, int lenght)
    parameters:
    - id: filePosition
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferStartPosition
      type: System.Int32
    - id: lenght
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Function Read(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, lenght As Integer) As Integer
  overload: SuperOffice.IO.IStreamProvider.Read*
  nameWithType.vb: IStreamProvider.Read(Int64, Byte(), Int32, Int32)
  fullName.vb: SuperOffice.IO.IStreamProvider.Read(System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Int64, Byte(), Int32, Int32)
- uid: SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  id: EndReadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: EndReadAsync(CancellationToken)
  nameWithType: IStreamProvider.EndReadAsync(CancellationToken)
  fullName: SuperOffice.IO.IStreamProvider.EndReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nExpress that you are finished reading the file.  If the file is read from \na temporary location, it will be removed from it.\n"
  syntax:
    content: Task EndReadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function EndReadAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.IO.IStreamProvider.EndReadAsync*
- uid: SuperOffice.IO.IStreamProvider.Length
  commentId: P:SuperOffice.IO.IStreamProvider.Length
  id: Length
  parent: SuperOffice.IO.IStreamProvider
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: IStreamProvider.Length
  fullName: SuperOffice.IO.IStreamProvider.Length
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO
  summary: "\nLength (in bytes) of the document.\n"
  syntax:
    content: long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property Length As Long
  overload: SuperOffice.IO.IStreamProvider.Length*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
- uid: SuperOffice.IO.IStreamProvider.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IStreamProvider, To>()
  nameWithType: EnumUtil.MapEnums<IStreamProvider, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.IO.IStreamProvider, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IStreamProvider, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.IStreamProvider, To)()
  name.vb: MapEnums(Of IStreamProvider, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IStreamProvider, To>
    nameWithType: EnumUtil.MapEnums<IStreamProvider, To>
    fullName: EnumUtil.MapEnums<SuperOffice.IO.IStreamProvider, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IStreamProvider, To)
    nameWithType: EnumUtil.MapEnums(Of IStreamProvider, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.IO.IStreamProvider, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.IStreamProvider.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IStreamProvider, To>()
  nameWithType: Converters.MapEnums<IStreamProvider, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.IStreamProvider, To>()
  nameWithType.vb: Converters.MapEnums(Of IStreamProvider, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.IStreamProvider, To)()
  name.vb: MapEnums(Of IStreamProvider, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IStreamProvider, To>
    nameWithType: Converters.MapEnums<IStreamProvider, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.IStreamProvider, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IStreamProvider, To)
    nameWithType: Converters.MapEnums(Of IStreamProvider, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.IStreamProvider, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.IO.IStreamProvider.BeginWriteAsync*
  commentId: Overload:SuperOffice.IO.IStreamProvider.BeginWriteAsync
  isExternal: true
  name: BeginWriteAsync
  nameWithType: IStreamProvider.BeginWriteAsync
  fullName: SuperOffice.IO.IStreamProvider.BeginWriteAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.IO.IStreamProvider.WriteAsync*
  commentId: Overload:SuperOffice.IO.IStreamProvider.WriteAsync
  isExternal: true
  name: WriteAsync
  nameWithType: IStreamProvider.WriteAsync
  fullName: SuperOffice.IO.IStreamProvider.WriteAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.IO.IStreamProvider.Write*
  commentId: Overload:SuperOffice.IO.IStreamProvider.Write
  isExternal: true
  name: Write
  nameWithType: IStreamProvider.Write
  fullName: SuperOffice.IO.IStreamProvider.Write
- uid: SuperOffice.IO.IStreamProvider.EndWriteAsync*
  commentId: Overload:SuperOffice.IO.IStreamProvider.EndWriteAsync
  isExternal: true
  name: EndWriteAsync
  nameWithType: IStreamProvider.EndWriteAsync
  fullName: SuperOffice.IO.IStreamProvider.EndWriteAsync
- uid: SuperOffice.IO.IStreamProvider.BeginReadAsync*
  commentId: Overload:SuperOffice.IO.IStreamProvider.BeginReadAsync
  isExternal: true
  name: BeginReadAsync
  nameWithType: IStreamProvider.BeginReadAsync
  fullName: SuperOffice.IO.IStreamProvider.BeginReadAsync
- uid: SuperOffice.IO.IStreamProvider.ReadAsync*
  commentId: Overload:SuperOffice.IO.IStreamProvider.ReadAsync
  isExternal: true
  name: ReadAsync
  nameWithType: IStreamProvider.ReadAsync
  fullName: SuperOffice.IO.IStreamProvider.ReadAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.IStreamProvider.Read*
  commentId: Overload:SuperOffice.IO.IStreamProvider.Read
  isExternal: true
  name: Read
  nameWithType: IStreamProvider.Read
  fullName: SuperOffice.IO.IStreamProvider.Read
- uid: SuperOffice.IO.IStreamProvider.EndReadAsync*
  commentId: Overload:SuperOffice.IO.IStreamProvider.EndReadAsync
  isExternal: true
  name: EndReadAsync
  nameWithType: IStreamProvider.EndReadAsync
  fullName: SuperOffice.IO.IStreamProvider.EndReadAsync
- uid: SuperOffice.IO.IStreamProvider.Length*
  commentId: Overload:SuperOffice.IO.IStreamProvider.Length
  isExternal: true
  name: Length
  nameWithType: IStreamProvider.Length
  fullName: SuperOffice.IO.IStreamProvider.Length
