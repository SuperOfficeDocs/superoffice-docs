### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Documents.CommandInfo
  commentId: T:SuperOffice.CRM.Documents.CommandInfo
  id: CommandInfo
  parent: SuperOffice.CRM.Documents
  children:
  - SuperOffice.CRM.Documents.CommandInfo.#ctor
  - SuperOffice.CRM.Documents.CommandInfo.DisplayName
  - SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip
  - SuperOffice.CRM.Documents.CommandInfo.IconHint
  - SuperOffice.CRM.Documents.CommandInfo.Name
  - SuperOffice.CRM.Documents.CommandInfo.ReturnType
  langs:
  - csharp
  - vb
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: SuperOffice.CRM.Documents.CommandInfo
  type: Class
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: "\nAn instance of this class describes a custom command, declared and implemented by a document plugin\n"
  remarks: "\nDepending on the return type indicated in the command, the command might be filtered (not shown) by the GUI. For instance, commands\nthat return values of type <xref href=\"SuperOffice.CRM.ReturnType.SoProtocol\" data-throw-if-not-resolved=\"false\"></xref> would not\nbe shown by the (first release of the) Pocket CRM client, since that client does not use nor support soprotocol-type\nnavigation. Return types <xref href=\"SuperOffice.CRM.ReturnType.None\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.CRM.ReturnType.Message\" data-throw-if-not-resolved=\"false\"></xref> \nwill be supported by all clients. Non-GUI clients should save Message-type return values in their log.\n<p></p>\nA command may be executed on a document at any time. Constraints, such as some commands requiring the\ndocument to be checked out, must be enforced by the document plugin - the rest of the system has no knowledge\nof command semantics.\n<p></p>\nA document plugin with complex custom workflow and GUI requirements can use the returntype SoProtocol to\nforce navigation subsequent to execution of a command, and in this way chain a set of operations. It is \nOK to have &apos;secret&apos; commands, i.e., commands that are not declared through <xref href=\"SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo%2cSystem.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>;\nsuch secret commands will not be shown in any GUI, but will still be available through the document services.\n"
  syntax:
    content: public class CommandInfo
    content.vb: Public Class CommandInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Documents.CommandInfo.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Documents.CommandInfo.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Documents.CommandInfo)
  - SuperOffice.CRM.Documents.CommandInfo.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.CRM.Documents.CommandInfo.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Documents.CommandInfo.#ctor
  commentId: M:SuperOffice.CRM.Documents.CommandInfo.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Documents.CommandInfo
  langs:
  - csharp
  - vb
  name: CommandInfo()
  nameWithType: CommandInfo.CommandInfo()
  fullName: SuperOffice.CRM.Documents.CommandInfo.CommandInfo()
  type: Constructor
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public CommandInfo()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Documents.CommandInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.CommandInfo.Name
  commentId: P:SuperOffice.CRM.Documents.CommandInfo.Name
  id: Name
  parent: SuperOffice.CRM.Documents.CommandInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CommandInfo.Name
  fullName: SuperOffice.CRM.Documents.CommandInfo.Name
  type: Property
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: "\nThe programmatic name of the command, uniquely identifying this command for the document plugin. \n<p></p>\nCommand names need not be unique between different document plugins, but have to be unique within one plugin.\nCommands should generally not be cached by NetServer or clients, since they are assumed to be dependent\non a particular document and its state.\n<p></p>\nCommands for standard Check out, Check in and Undo Check out are not custom commands; they will be shown\nby GUI logic automatically if the document plugin declares that it supports locking. Similarly, commands\nfor showing a version list are automatically added if such functionality is supported.\n"
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: SuperOffice.CRM.Documents.CommandInfo.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.CommandInfo.DisplayName
  commentId: P:SuperOffice.CRM.Documents.CommandInfo.DisplayName
  id: DisplayName
  parent: SuperOffice.CRM.Documents.CommandInfo
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: CommandInfo.DisplayName
  fullName: SuperOffice.CRM.Documents.CommandInfo.DisplayName
  type: Property
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: "\nDisplay name, shown in menus, command lists and similar GUI elements.\n<p></p>\nThe name should be kept short. Resource tags, such as [SR_OK], are allowed and will be substituted runtime\nwith the proper languages. A document plugin can have a resource module added to the client to substitute\nany custom tags.\n"
  syntax:
    content: public string DisplayName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DisplayName As String
  overload: SuperOffice.CRM.Documents.CommandInfo.DisplayName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip
  commentId: P:SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip
  id: DisplayTooltip
  parent: SuperOffice.CRM.Documents.CommandInfo
  langs:
  - csharp
  - vb
  name: DisplayTooltip
  nameWithType: CommandInfo.DisplayTooltip
  fullName: SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip
  type: Property
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: "\nTooltip string associate with the command - can be a literal or a tooltip hint.\n<p></p>\nSimple tooltips can be literals, and can contain resource tags (including culture-independent\nformatted dates, see the <xref href=\"SuperOffice.CRM.Globalization.CultureDataFormatter\" data-throw-if-not-resolved=\"false\"></xref> class\nfor examples and encoding methods.\n<p></p>\nMore complex tooltips can be represented as tooltip hints, which cause a runtime call to the\ntooltip provider system. A document plugin can add its own tooltip provider in order to process\nsuch hints into the final tooltip text. This is the recommended approach for tooltips that are\ntime-consuming to precalculate.\n<p></p>\nTooltip hints can be constructed using the \nSuperOffice.CRM.Tooltips.TooltipProvider. See SuperOffice.CRM.Tooltips.TooltipProvider.MakeTooltipHint\nmethod. They are parsed by provider plugins, either standard ones or custom plugins that can be written\ntogether with a document plugin.\n<p></p>\nThis member may be blank, if no tooltip is provided.\n"
  syntax:
    content: public string DisplayTooltip { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DisplayTooltip As String
  overload: SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.CommandInfo.IconHint
  commentId: P:SuperOffice.CRM.Documents.CommandInfo.IconHint
  id: IconHint
  parent: SuperOffice.CRM.Documents.CommandInfo
  langs:
  - csharp
  - vb
  name: IconHint
  nameWithType: CommandInfo.IconHint
  fullName: SuperOffice.CRM.Documents.CommandInfo.IconHint
  type: Property
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: "\nIcon hint, which should resolve to an icon that is compatible in size with a standard menu\nor dropdown list font. May be blank.\n"
  syntax:
    content: public string IconHint { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property IconHint As String
  overload: SuperOffice.CRM.Documents.CommandInfo.IconHint*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Documents.CommandInfo.ReturnType
  commentId: P:SuperOffice.CRM.Documents.CommandInfo.ReturnType
  id: ReturnType
  parent: SuperOffice.CRM.Documents.CommandInfo
  langs:
  - csharp
  - vb
  name: ReturnType
  nameWithType: CommandInfo.ReturnType
  fullName: SuperOffice.CRM.Documents.CommandInfo.ReturnType
  type: Property
  source:
    path: SuperOffice.Plugins
    isExternal: true
  assemblies:
  - SuperOffice.Plugins
  namespace: SuperOffice.CRM.Documents
  summary: "\nDeclaration of what kind of return type the execution of this command will give\n<p></p>\nA client may use this field to filter out some commands - for instance, a client that does not support\nsoprotocol or custom navigation, would only show commands declared to return <xref href=\"SuperOffice.CRM.ReturnType.None\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"SuperOffice.CRM.ReturnType.Message\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public ReturnType ReturnType { get; set; }
    parameters: []
    return:
      type: SuperOffice.CRM.ReturnType
    content.vb: Public Property ReturnType As ReturnType
  overload: SuperOffice.CRM.Documents.CommandInfo.ReturnType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Documents
  commentId: N:SuperOffice.CRM.Documents
  isExternal: true
  name: SuperOffice.CRM.Documents
  nameWithType: SuperOffice.CRM.Documents
  fullName: SuperOffice.CRM.Documents
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.CommandInfo.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CommandInfo, To>()
  nameWithType: EnumUtil.MapEnums<CommandInfo, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.CommandInfo, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CommandInfo, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.CommandInfo, To)()
  name.vb: MapEnums(Of CommandInfo, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CommandInfo, To>
    nameWithType: EnumUtil.MapEnums<CommandInfo, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.CommandInfo, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CommandInfo, To)
    nameWithType: EnumUtil.MapEnums(Of CommandInfo, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.CommandInfo, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.CommandInfo.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Documents.CommandInfo)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<CommandInfo>(CommandInfo)
  nameWithType: ObjectExtensions.AssignByReflection<CommandInfo>(CommandInfo)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Documents.CommandInfo>(SuperOffice.CRM.Documents.CommandInfo)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of CommandInfo)(CommandInfo)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Documents.CommandInfo)(SuperOffice.CRM.Documents.CommandInfo)
  name.vb: AssignByReflection(Of CommandInfo)(CommandInfo)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<CommandInfo>
    nameWithType: ObjectExtensions.AssignByReflection<CommandInfo>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Documents.CommandInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: SuperOffice.CRM.Documents.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of CommandInfo)
    nameWithType: ObjectExtensions.AssignByReflection(Of CommandInfo)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Documents.CommandInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: SuperOffice.CRM.Documents.CommandInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.CommandInfo.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<CommandInfo>()
  nameWithType: ObjectExtensions.GraphCopy<CommandInfo>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Documents.CommandInfo>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of CommandInfo)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Documents.CommandInfo)()
  name.vb: GraphCopy(Of CommandInfo)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<CommandInfo>
    nameWithType: ObjectExtensions.GraphCopy<CommandInfo>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Documents.CommandInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of CommandInfo)
    nameWithType: ObjectExtensions.GraphCopy(Of CommandInfo)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Documents.CommandInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Documents.CommandInfo.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CommandInfo, To>()
  nameWithType: Converters.MapEnums<CommandInfo, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.CommandInfo, To>()
  nameWithType.vb: Converters.MapEnums(Of CommandInfo, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.CommandInfo, To)()
  name.vb: MapEnums(Of CommandInfo, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CommandInfo, To>
    nameWithType: Converters.MapEnums<CommandInfo, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.CommandInfo, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CommandInfo, To)
    nameWithType: Converters.MapEnums(Of CommandInfo, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.CommandInfo, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Documents.CommandInfo.#ctor*
  commentId: Overload:SuperOffice.CRM.Documents.CommandInfo.#ctor
  isExternal: true
  name: CommandInfo
  nameWithType: CommandInfo.CommandInfo
  fullName: SuperOffice.CRM.Documents.CommandInfo.CommandInfo
- uid: SuperOffice.CRM.Documents.CommandInfo.Name*
  commentId: Overload:SuperOffice.CRM.Documents.CommandInfo.Name
  isExternal: true
  name: Name
  nameWithType: CommandInfo.Name
  fullName: SuperOffice.CRM.Documents.CommandInfo.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Documents.CommandInfo.DisplayName*
  commentId: Overload:SuperOffice.CRM.Documents.CommandInfo.DisplayName
  isExternal: true
  name: DisplayName
  nameWithType: CommandInfo.DisplayName
  fullName: SuperOffice.CRM.Documents.CommandInfo.DisplayName
- uid: SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip*
  commentId: Overload:SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip
  isExternal: true
  name: DisplayTooltip
  nameWithType: CommandInfo.DisplayTooltip
  fullName: SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip
- uid: SuperOffice.CRM.Documents.CommandInfo.IconHint*
  commentId: Overload:SuperOffice.CRM.Documents.CommandInfo.IconHint
  isExternal: true
  name: IconHint
  nameWithType: CommandInfo.IconHint
  fullName: SuperOffice.CRM.Documents.CommandInfo.IconHint
- uid: SuperOffice.CRM.Documents.CommandInfo.ReturnType*
  commentId: Overload:SuperOffice.CRM.Documents.CommandInfo.ReturnType
  isExternal: true
  name: ReturnType
  nameWithType: CommandInfo.ReturnType
  fullName: SuperOffice.CRM.Documents.CommandInfo.ReturnType
- uid: SuperOffice.CRM.ReturnType
  commentId: T:SuperOffice.CRM.ReturnType
  parent: SuperOffice.CRM
  isExternal: true
  name: ReturnType
  nameWithType: ReturnType
  fullName: SuperOffice.CRM.ReturnType
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
