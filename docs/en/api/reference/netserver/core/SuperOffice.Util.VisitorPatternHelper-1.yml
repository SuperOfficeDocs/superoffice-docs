### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.VisitorPatternHelper`1
  commentId: T:SuperOffice.Util.VisitorPatternHelper`1
  id: VisitorPatternHelper`1
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.VisitorPatternHelper`1.#ctor(System.String,System.Object)
  - SuperOffice.Util.VisitorPatternHelper`1.InvokeStrictVisitor(System.Object[])
  - SuperOffice.Util.VisitorPatternHelper`1.InvokeTolerantVisitor(System.Object[])
  - SuperOffice.Util.VisitorPatternHelper`1.InvokeVisitor(System.Boolean,System.Object[])
  langs:
  - csharp
  - vb
  name: VisitorPatternHelper<ReturnType>
  nameWithType: VisitorPatternHelper<ReturnType>
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nHelper class for performing a Visitor-type invocation of methods on some node structure\n"
  remarks: "\nSee http://en.wikipedia.org/wiki/Visitor_pattern for a description of the Visitor pattern.\nVisitor is a fairly abstract pattern and will usually require some thought to follow through.\n<p></p>\nThe <see cref=\"!:VisitorPatternHelper\"></see> class performs the dispatching/invocation of visitor methods,\nso the client class only needs to provide methods that handle the required types of nodes in \nthe visited structure.\n<p></p>\nGenerally the client class will provide a class instance that contains one or more Visit methods. It will\nthen call the <xref href=\"SuperOffice.Util.VisitorPatternHelper%601.InvokeStrictVisitor(System.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"SuperOffice.Util.VisitorPatternHelper%601.InvokeTolerantVisitor(System.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> method, giving\nthe root node of some structure to be visited as the input parameter(s).\n<p></p>\nThe VisitorPatternHelper will reflect on the client class and try to find a method whose signature\nmatches the input. If it finds one, it will forward the call to this method, which may recursively\ncall one of the InvokeXXXVisitor methods in turn.\n"
  syntax:
    content: public sealed class VisitorPatternHelper<ReturnType>
    typeParameters:
    - id: ReturnType
      description: Return type for the visit methods
    content.vb: Public NotInheritable Class VisitorPatternHelper(Of ReturnType)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Util.VisitorPatternHelper`1.EnumUtil.MapEnums``2
  - SuperOffice.Util.VisitorPatternHelper`1.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: VisitorPatternHelper(Of ReturnType)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType)
  name.vb: VisitorPatternHelper(Of ReturnType)
- uid: SuperOffice.Util.VisitorPatternHelper`1.#ctor(System.String,System.Object)
  commentId: M:SuperOffice.Util.VisitorPatternHelper`1.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: SuperOffice.Util.VisitorPatternHelper`1
  langs:
  - csharp
  - vb
  name: VisitorPatternHelper(String, Object)
  nameWithType: VisitorPatternHelper<ReturnType>.VisitorPatternHelper(String, Object)
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.VisitorPatternHelper(System.String, System.Object)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInitialize the visitor helper with a method prefix and a target class\n"
  syntax:
    content: public VisitorPatternHelper(string methodPrefix, object targetClass)
    parameters:
    - id: methodPrefix
      type: System.String
      description: The prefix that all visitation methods must be named with
    - id: targetClass
      type: System.Object
      description: The class that contains the visitation methods
    content.vb: Public Sub New(methodPrefix As String, targetClass As Object)
  overload: SuperOffice.Util.VisitorPatternHelper`1.#ctor*
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).VisitorPatternHelper(String, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).VisitorPatternHelper(System.String, System.Object)
- uid: SuperOffice.Util.VisitorPatternHelper`1.InvokeStrictVisitor(System.Object[])
  commentId: M:SuperOffice.Util.VisitorPatternHelper`1.InvokeStrictVisitor(System.Object[])
  id: InvokeStrictVisitor(System.Object[])
  parent: SuperOffice.Util.VisitorPatternHelper`1
  langs:
  - csharp
  - vb
  name: InvokeStrictVisitor(Object[])
  nameWithType: VisitorPatternHelper<ReturnType>.InvokeStrictVisitor(Object[])
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.InvokeStrictVisitor(System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInvoke the visitor, by finding and calling the method in the target class that has a signature\nmatching the visitorArguments. If no such method is found, an exception is thrown.\n"
  syntax:
    content: public ReturnType InvokeStrictVisitor(params object[] visitorArguments)
    parameters:
    - id: visitorArguments
      type: System.Object[]
      description: Arguments to the method to be called
    return:
      type: '{ReturnType}'
      description: Return value from the visitation method
    content.vb: Public Function InvokeStrictVisitor(ParamArray visitorArguments As Object()) As ReturnType
  overload: SuperOffice.Util.VisitorPatternHelper`1.InvokeStrictVisitor*
  exceptions:
  - type: SuperOffice.Exceptions.SoNotImplementedException
    commentId: T:SuperOffice.Exceptions.SoNotImplementedException
    description: "Thrown if the target class (given to the constructor)\ndoes not contain a method with the given name prefix and parameter signature corresponding to \nthe current set of parameters (visitorArguments)"
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).InvokeStrictVisitor(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).InvokeStrictVisitor(System.Object())
  name.vb: InvokeStrictVisitor(Object())
- uid: SuperOffice.Util.VisitorPatternHelper`1.InvokeTolerantVisitor(System.Object[])
  commentId: M:SuperOffice.Util.VisitorPatternHelper`1.InvokeTolerantVisitor(System.Object[])
  id: InvokeTolerantVisitor(System.Object[])
  parent: SuperOffice.Util.VisitorPatternHelper`1
  langs:
  - csharp
  - vb
  name: InvokeTolerantVisitor(Object[])
  nameWithType: VisitorPatternHelper<ReturnType>.InvokeTolerantVisitor(Object[])
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.InvokeTolerantVisitor(System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInvoke the visitor, by finding and calling the method in the target class that has a signature\nmatching the visitorArguments. If no such method is found, no call is made and default(ReturnType) is returned\n(no exception thrown).\n"
  syntax:
    content: public ReturnType InvokeTolerantVisitor(params object[] visitorArguments)
    parameters:
    - id: visitorArguments
      type: System.Object[]
      description: Arguments to the method to be called
    return:
      type: '{ReturnType}'
      description: Return value from the visitation method
    content.vb: Public Function InvokeTolerantVisitor(ParamArray visitorArguments As Object()) As ReturnType
  overload: SuperOffice.Util.VisitorPatternHelper`1.InvokeTolerantVisitor*
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).InvokeTolerantVisitor(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).InvokeTolerantVisitor(System.Object())
  name.vb: InvokeTolerantVisitor(Object())
- uid: SuperOffice.Util.VisitorPatternHelper`1.InvokeVisitor(System.Boolean,System.Object[])
  commentId: M:SuperOffice.Util.VisitorPatternHelper`1.InvokeVisitor(System.Boolean,System.Object[])
  id: InvokeVisitor(System.Boolean,System.Object[])
  parent: SuperOffice.Util.VisitorPatternHelper`1
  langs:
  - csharp
  - vb
  name: InvokeVisitor(Boolean, Object[])
  nameWithType: VisitorPatternHelper<ReturnType>.InvokeVisitor(Boolean, Object[])
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.InvokeVisitor(System.Boolean, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nInvokeVisitor checks the in-parameters type against the already existing method dictionary.\nWhen the key is found in the array, the key&apos;s object method is called.\n"
  syntax:
    content: public ReturnType InvokeVisitor(bool failIfMissing, params object[] visitorArguments)
    parameters:
    - id: failIfMissing
      type: System.Boolean
    - id: visitorArguments
      type: System.Object[]
      description: "\narguments as passed to the method.  The arguments&apos; type needs to be an \nexact match of the type implemented in the appropriate target method.\n"
    return:
      type: '{ReturnType}'
      description: returns the ReturnType returned from the Invoked target method
    content.vb: Public Function InvokeVisitor(failIfMissing As Boolean, ParamArray visitorArguments As Object()) As ReturnType
  overload: SuperOffice.Util.VisitorPatternHelper`1.InvokeVisitor*
  exceptions:
  - type: SuperOffice.Exceptions.SoNotImplementedException
    commentId: T:SuperOffice.Exceptions.SoNotImplementedException
    description: There is no appropriate method to invoke.
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: An exception was thrown while trying to invoke the target method
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).InvokeVisitor(Boolean, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).InvokeVisitor(System.Boolean, System.Object())
  name.vb: InvokeVisitor(Boolean, Object())
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.VisitorPatternHelper`1.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<VisitorPatternHelper<ReturnType>, To>()
  nameWithType: EnumUtil.MapEnums<VisitorPatternHelper<ReturnType>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.VisitorPatternHelper<ReturnType>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of VisitorPatternHelper(Of ReturnType), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.VisitorPatternHelper(Of ReturnType), To)()
  name.vb: MapEnums(Of VisitorPatternHelper(Of ReturnType), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<VisitorPatternHelper<ReturnType>, To>
    nameWithType: EnumUtil.MapEnums<VisitorPatternHelper<ReturnType>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.VisitorPatternHelper<ReturnType>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of VisitorPatternHelper(Of ReturnType), To)
    nameWithType: EnumUtil.MapEnums(Of VisitorPatternHelper(Of ReturnType), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.VisitorPatternHelper(Of ReturnType), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.VisitorPatternHelper`1.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<VisitorPatternHelper<ReturnType>, To>()
  nameWithType: Converters.MapEnums<VisitorPatternHelper<ReturnType>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.VisitorPatternHelper<ReturnType>, To>()
  nameWithType.vb: Converters.MapEnums(Of VisitorPatternHelper(Of ReturnType), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.VisitorPatternHelper(Of ReturnType), To)()
  name.vb: MapEnums(Of VisitorPatternHelper(Of ReturnType), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<VisitorPatternHelper<ReturnType>, To>
    nameWithType: Converters.MapEnums<VisitorPatternHelper<ReturnType>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.VisitorPatternHelper<ReturnType>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of VisitorPatternHelper(Of ReturnType), To)
    nameWithType: Converters.MapEnums(Of VisitorPatternHelper(Of ReturnType), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.VisitorPatternHelper(Of ReturnType), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.VisitorPatternHelper`1.#ctor*
  commentId: Overload:SuperOffice.Util.VisitorPatternHelper`1.#ctor
  isExternal: true
  name: VisitorPatternHelper
  nameWithType: VisitorPatternHelper<ReturnType>.VisitorPatternHelper
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.VisitorPatternHelper
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).VisitorPatternHelper
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).VisitorPatternHelper
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Util.VisitorPatternHelper`1.InvokeStrictVisitor*
  commentId: Overload:SuperOffice.Util.VisitorPatternHelper`1.InvokeStrictVisitor
  isExternal: true
  name: InvokeStrictVisitor
  nameWithType: VisitorPatternHelper<ReturnType>.InvokeStrictVisitor
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.InvokeStrictVisitor
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).InvokeStrictVisitor
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).InvokeStrictVisitor
- uid: SuperOffice.Exceptions.SoNotImplementedException
  commentId: T:SuperOffice.Exceptions.SoNotImplementedException
  isExternal: true
  name: SoNotImplementedException
  nameWithType: SoNotImplementedException
  fullName: SuperOffice.Exceptions.SoNotImplementedException
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{ReturnType}'
  commentId: '!:ReturnType'
  definition: ReturnType
  name: ReturnType
  nameWithType: ReturnType
  fullName: ReturnType
- uid: ReturnType
  name: ReturnType
  nameWithType: ReturnType
  fullName: ReturnType
- uid: SuperOffice.Util.VisitorPatternHelper`1.InvokeTolerantVisitor*
  commentId: Overload:SuperOffice.Util.VisitorPatternHelper`1.InvokeTolerantVisitor
  isExternal: true
  name: InvokeTolerantVisitor
  nameWithType: VisitorPatternHelper<ReturnType>.InvokeTolerantVisitor
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.InvokeTolerantVisitor
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).InvokeTolerantVisitor
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).InvokeTolerantVisitor
- uid: SuperOffice.Util.VisitorPatternHelper`1.InvokeVisitor*
  commentId: Overload:SuperOffice.Util.VisitorPatternHelper`1.InvokeVisitor
  isExternal: true
  name: InvokeVisitor
  nameWithType: VisitorPatternHelper<ReturnType>.InvokeVisitor
  fullName: SuperOffice.Util.VisitorPatternHelper<ReturnType>.InvokeVisitor
  nameWithType.vb: VisitorPatternHelper(Of ReturnType).InvokeVisitor
  fullName.vb: SuperOffice.Util.VisitorPatternHelper(Of ReturnType).InvokeVisitor
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
