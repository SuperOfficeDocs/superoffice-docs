### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.ProductAttribute
  commentId: T:SuperOffice.License.ProductAttribute
  id: ProductAttribute
  parent: SuperOffice.License
  children:
  - SuperOffice.License.ProductAttribute.#ctor(System.Type)
  - SuperOffice.License.ProductAttribute.Definition
  langs:
  - csharp
  - vb
  name: ProductAttribute
  nameWithType: ProductAttribute
  fullName: SuperOffice.License.ProductAttribute
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSummary description for Product.\n"
  syntax:
    content: 'public class ProductAttribute : Attribute'
    content.vb: >-
      Public Class ProductAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.License.ProductAttribute.EnumUtil.MapEnums``2
  - SuperOffice.License.ProductAttribute.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.License.ProductAttribute.#ctor(System.Type)
  commentId: M:SuperOffice.License.ProductAttribute.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: SuperOffice.License.ProductAttribute
  langs:
  - csharp
  - vb
  name: ProductAttribute(Type)
  nameWithType: ProductAttribute.ProductAttribute(Type)
  fullName: SuperOffice.License.ProductAttribute.ProductAttribute(System.Type)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nDefault constructor for the SuperOffice product attribute.\n"
  syntax:
    content: public ProductAttribute(Type productType)
    parameters:
    - id: productType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that implements the <xref href="SuperOffice.License.Product" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(productType As Type)
  overload: SuperOffice.License.ProductAttribute.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.ProductAttribute.Definition
  commentId: P:SuperOffice.License.ProductAttribute.Definition
  id: Definition
  parent: SuperOffice.License.ProductAttribute
  langs:
  - csharp
  - vb
  name: Definition
  nameWithType: ProductAttribute.Definition
  fullName: SuperOffice.License.ProductAttribute.Definition
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nDefinition of the product.\n"
  syntax:
    content: public Product Definition { get; }
    parameters: []
    return:
      type: SuperOffice.License.Product
    content.vb: Public ReadOnly Property Definition As Product
  overload: SuperOffice.License.ProductAttribute.Definition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.License.ProductAttribute.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ProductAttribute, To>()
  nameWithType: EnumUtil.MapEnums<ProductAttribute, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.ProductAttribute, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ProductAttribute, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.ProductAttribute, To)()
  name.vb: MapEnums(Of ProductAttribute, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ProductAttribute, To>
    nameWithType: EnumUtil.MapEnums<ProductAttribute, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.ProductAttribute, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ProductAttribute, To)
    nameWithType: EnumUtil.MapEnums(Of ProductAttribute, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.ProductAttribute, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ProductAttribute.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ProductAttribute, To>()
  nameWithType: Converters.MapEnums<ProductAttribute, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ProductAttribute, To>()
  nameWithType.vb: Converters.MapEnums(Of ProductAttribute, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ProductAttribute, To)()
  name.vb: MapEnums(Of ProductAttribute, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ProductAttribute, To>
    nameWithType: Converters.MapEnums<ProductAttribute, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.ProductAttribute, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ProductAttribute, To)
    nameWithType: Converters.MapEnums(Of ProductAttribute, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.ProductAttribute, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.ProductAttribute.#ctor*
  commentId: Overload:SuperOffice.License.ProductAttribute.#ctor
  isExternal: true
  name: ProductAttribute
  nameWithType: ProductAttribute.ProductAttribute
  fullName: SuperOffice.License.ProductAttribute.ProductAttribute
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: SuperOffice.License.ProductAttribute.Definition*
  commentId: Overload:SuperOffice.License.ProductAttribute.Definition
  isExternal: true
  name: Definition
  nameWithType: ProductAttribute.Definition
  fullName: SuperOffice.License.ProductAttribute.Definition
- uid: SuperOffice.License.Product
  commentId: T:SuperOffice.License.Product
  parent: SuperOffice.License
  isExternal: true
  name: Product
  nameWithType: Product
  fullName: SuperOffice.License.Product
