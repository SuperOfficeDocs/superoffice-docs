### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.Files.DiskFileAccess
  commentId: T:SuperOffice.IO.Files.DiskFileAccess
  id: DiskFileAccess
  parent: SuperOffice.IO.Files
  children:
  - SuperOffice.IO.Files.DiskFileAccess.#ctor
  - SuperOffice.IO.Files.DiskFileAccess.ArchivePath
  - SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.DirectoryExists(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Action)
  - SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
  - SuperOffice.IO.Files.DiskFileAccess.EnsureAccess``1(System.Func{``0})
  - SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.GetFileName(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.PathCombine(System.String[])
  - SuperOffice.IO.Files.DiskFileAccess.PathGetExtension(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.PathGetFileName(System.String)
  - SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars
  - SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  - SuperOffice.IO.Files.DiskFileAccess.TemplatesPath
  - SuperOffice.IO.Files.DiskFileAccess.TemporaryPath
  langs:
  - csharp
  - vb
  name: DiskFileAccess
  nameWithType: DiskFileAccess
  fullName: SuperOffice.IO.Files.DiskFileAccess
  type: Class
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: 'public class DiskFileAccess : IFileAccess'
    content.vb: Public Class DiskFileAccess Implements IFileAccess
  inheritance:
  - System.Object
  implements:
  - SuperOffice.IO.Files.IFileAccess
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.IO.Files.DiskFileAccess.EnumUtil.MapEnums``2
  - SuperOffice.IO.Files.DiskFileAccess.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  - SuperOffice.IO.Files.DiskFileAccess.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.IO.Files.DiskFileAccess)
  - SuperOffice.IO.Files.DiskFileAccess.SuperOffice.Util.ObjectExtensions.GraphCopy``1
- uid: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Action)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Action)
  id: EnsureAccess(System.Action)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: EnsureAccess(Action)
  nameWithType: DiskFileAccess.EnsureAccess(Action)
  fullName: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Action)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Impersonation for Windows Disk File Access. For Azure File Access this is a noop.
  example: []
  syntax:
    content: public void EnsureAccess(Action action)
    parameters:
    - id: action
      type: System.Action
    content.vb: Public Sub EnsureAccess(action As Action)
  overload: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess*
  implements:
  - SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
- uid: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
  id: EnsureAccess(System.Func{System.Threading.Tasks.Task})
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: EnsureAccess(Func<Task>)
  nameWithType: DiskFileAccess.EnsureAccess(Func<Task>)
  fullName: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Func<System.Threading.Tasks.Task>)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Impersonation for Windows Disk File Access. For Azure File Access this is a noop.
  example: []
  syntax:
    content: public Task EnsureAccess(Func<Task> action)
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function EnsureAccess(action As Func(Of Task)) As Task
  overload: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess*
  implements:
  - SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
  nameWithType.vb: DiskFileAccess.EnsureAccess(Func(Of Task))
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(System.Func(Of System.Threading.Tasks.Task))
  name.vb: EnsureAccess(Func(Of Task))
- uid: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess``1(System.Func{``0})
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.EnsureAccess``1(System.Func{``0})
  id: EnsureAccess``1(System.Func{``0})
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: EnsureAccess<T>(Func<T>)
  nameWithType: DiskFileAccess.EnsureAccess<T>(Func<T>)
  fullName: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess<T>(System.Func<T>)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Impersonation for Windows Disk File Access. For Azure File Access this is a noop.
  example: []
  syntax:
    content: public T EnsureAccess<T>(Func<T> func)
    parameters:
    - id: func
      type: System.Func{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function EnsureAccess(Of T)(func As Func(Of T)) As T
  overload: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess*
  implements:
  - SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{{T}})
  nameWithType.vb: DiskFileAccess.EnsureAccess(Of T)(Func(Of T))
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess(Of T)(System.Func(Of T))
  name.vb: EnsureAccess(Of T)(Func(Of T))
- uid: SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
  id: FileExistsAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: FileExistsAsync(string, CancellationToken)
  nameWithType: DiskFileAccess.FileExistsAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public Task<bool> FileExistsAsync(string path, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function FileExistsAsync(path As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync*
  implements:
  - SuperOffice.IO.Files.IFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.FileExistsAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync(String, System.Threading.CancellationToken)
  name.vb: FileExistsAsync(String, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  id: DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: DirectoryGetFilesAsync(string, string, bool, CancellationToken)
  nameWithType: DiskFileAccess.DirectoryGetFilesAsync(string, string, bool, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync(string, string, bool, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public Task<string[]> DirectoryGetFilesAsync(string path, string searchPattern, bool searchInSubdirectories = false, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: searchPattern
      type: System.String
    - id: searchInSubdirectories
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String[]}
    content.vb: Public Function DirectoryGetFilesAsync(path As String, searchPattern As String, searchInSubdirectories As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of String())
  overload: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync*
  implements:
  - SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.DirectoryGetFilesAsync(String, String, Boolean, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync(String, String, Boolean, System.Threading.CancellationToken)
  name.vb: DirectoryGetFilesAsync(String, String, Boolean, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  id: DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: DirectoryGetFileInfosAsync(string, CancellationToken)
  nameWithType: DiskFileAccess.DirectoryGetFileInfosAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public Task<SoFileInfo[]> DirectoryGetFileInfosAsync(string path, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.IO.Files.SoFileInfo[]}
    content.vb: Public Function DirectoryGetFileInfosAsync(path As String, cancellationToken As CancellationToken = Nothing) As Task(Of SoFileInfo())
  overload: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync*
  implements:
  - SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.DirectoryGetFileInfosAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync(String, System.Threading.CancellationToken)
  name.vb: DirectoryGetFileInfosAsync(String, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists(System.String)
  id: CreateDirectoryIfNotExists(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: CreateDirectoryIfNotExists(string)
  nameWithType: DiskFileAccess.CreateDirectoryIfNotExists(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public void CreateDirectoryIfNotExists(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Public Sub CreateDirectoryIfNotExists(path As String)
  overload: SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists*
  implements:
  - SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  nameWithType.vb: DiskFileAccess.CreateDirectoryIfNotExists(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists(String)
  name.vb: CreateDirectoryIfNotExists(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.DirectoryExists(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: DirectoryExists(string)
  nameWithType: DiskFileAccess.DirectoryExists(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.DirectoryExists(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public bool DirectoryExists(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function DirectoryExists(path As String) As Boolean
  overload: SuperOffice.IO.Files.DiskFileAccess.DirectoryExists*
  implements:
  - SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  nameWithType.vb: DiskFileAccess.DirectoryExists(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.DirectoryExists(String)
  name.vb: DirectoryExists(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.GetFileName(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.GetFileName(System.String)
  id: GetFileName(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: GetFileName(string)
  nameWithType: DiskFileAccess.GetFileName(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.GetFileName(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string GetFileName(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetFileName(path As String) As String
  overload: SuperOffice.IO.Files.DiskFileAccess.GetFileName*
  implements:
  - SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  nameWithType.vb: DiskFileAccess.GetFileName(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.GetFileName(String)
  name.vb: GetFileName(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension(System.String)
  id: GetFileNameWithoutExtension(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: GetFileNameWithoutExtension(string)
  nameWithType: DiskFileAccess.GetFileNameWithoutExtension(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string GetFileNameWithoutExtension(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetFileNameWithoutExtension(path As String) As String
  overload: SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension*
  implements:
  - SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  nameWithType.vb: DiskFileAccess.GetFileNameWithoutExtension(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension(String)
  name.vb: GetFileNameWithoutExtension(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName(System.String)
  id: GetDirectoryName(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: GetDirectoryName(string)
  nameWithType: DiskFileAccess.GetDirectoryName(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string GetDirectoryName(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetDirectoryName(path As String) As String
  overload: SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName*
  implements:
  - SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  nameWithType.vb: DiskFileAccess.GetDirectoryName(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName(String)
  name.vb: GetDirectoryName(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.PathCombine(System.String[])
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.PathCombine(System.String[])
  id: PathCombine(System.String[])
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: PathCombine(params string[])
  nameWithType: DiskFileAccess.PathCombine(params string[])
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathCombine(params string[])
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string PathCombine(params string[] paths)
    parameters:
    - id: paths
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Function PathCombine(ParamArray paths As String()) As String
  overload: SuperOffice.IO.Files.DiskFileAccess.PathCombine*
  implements:
  - SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  nameWithType.vb: DiskFileAccess.PathCombine(ParamArray String())
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.PathCombine(ParamArray String())
  name.vb: PathCombine(ParamArray String())
- uid: SuperOffice.IO.Files.DiskFileAccess.PathGetExtension(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.PathGetExtension(System.String)
  id: PathGetExtension(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: PathGetExtension(string)
  nameWithType: DiskFileAccess.PathGetExtension(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathGetExtension(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string PathGetExtension(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Public Function PathGetExtension(path As String) As String
  overload: SuperOffice.IO.Files.DiskFileAccess.PathGetExtension*
  implements:
  - SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  nameWithType.vb: DiskFileAccess.PathGetExtension(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.PathGetExtension(String)
  name.vb: PathGetExtension(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars
  id: PathGetInvalidFileNameChars
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: PathGetInvalidFileNameChars()
  nameWithType: DiskFileAccess.PathGetInvalidFileNameChars()
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public char[] PathGetInvalidFileNameChars()
    return:
      type: System.Char[]
    content.vb: Public Function PathGetInvalidFileNameChars() As Char()
  overload: SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars*
  implements:
  - SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
- uid: SuperOffice.IO.Files.DiskFileAccess.PathGetFileName(System.String)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.PathGetFileName(System.String)
  id: PathGetFileName(System.String)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: PathGetFileName(string)
  nameWithType: DiskFileAccess.PathGetFileName(string)
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathGetFileName(string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string PathGetFileName(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Public Function PathGetFileName(path As String) As String
  overload: SuperOffice.IO.Files.DiskFileAccess.PathGetFileName*
  implements:
  - SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  nameWithType.vb: DiskFileAccess.PathGetFileName(String)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.PathGetFileName(String)
  name.vb: PathGetFileName(String)
- uid: SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  id: OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: OpenReadOnlyNoLockAsync(string, CancellationToken)
  nameWithType: DiskFileAccess.OpenReadOnlyNoLockAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Open a file/blob for reading
  remarks: Will call System.IO.File.Open() or Azure.Storage.Blobs.BlobClient.OpenRead()
  example: []
  syntax:
    content: public Task<Stream> OpenReadOnlyNoLockAsync(string path, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function OpenReadOnlyNoLockAsync(path As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync*
  exceptions:
  - type: SuperOffice.Exceptions.SoFileNotFoundException
    commentId: T:SuperOffice.Exceptions.SoFileNotFoundException
    description: Wraps System.IO.FileNotFoundException and Azure.RequestFailedException when Status is 404. Check for SoFileNotFoundException instead of doing FileExists before call to this method.
  implements:
  - SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.OpenReadOnlyNoLockAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync(String, System.Threading.CancellationToken)
  name.vb: OpenReadOnlyNoLockAsync(String, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  id: SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: SaveStreamToFileAsync(Stream, string, CancellationToken)
  nameWithType: DiskFileAccess.SaveStreamToFileAsync(Stream, string, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync(System.IO.Stream, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Save a stream to file/blob
  remarks: Will call System.IO.File.Create() or Azure.Storage.Blobs.BlobClient.Upload(), both implementations will overwrite any existing file/blob.
  example: []
  syntax:
    content: public Task SaveStreamToFileAsync(Stream stream, string path, CancellationToken cancellationToken = default)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: path
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SaveStreamToFileAsync(stream As Stream, path As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync*
  implements:
  - SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.SaveStreamToFileAsync(Stream, String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync(System.IO.Stream, String, System.Threading.CancellationToken)
  name.vb: SaveStreamToFileAsync(Stream, String, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  id: CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: CreateForWriteAsync(string, CancellationToken)
  nameWithType: DiskFileAccess.CreateForWriteAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public Task<Stream> CreateForWriteAsync(string path, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function CreateForWriteAsync(path As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync*
  implements:
  - SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.CreateForWriteAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync(String, System.Threading.CancellationToken)
  name.vb: CreateForWriteAsync(String, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
  id: FileDeleteAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: FileDeleteAsync(string, CancellationToken)
  nameWithType: DiskFileAccess.FileDeleteAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public Task FileDeleteAsync(string path, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function FileDeleteAsync(path As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync*
  implements:
  - SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: DiskFileAccess.FileDeleteAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync(String, System.Threading.CancellationToken)
  name.vb: FileDeleteAsync(String, CancellationToken)
- uid: SuperOffice.IO.Files.DiskFileAccess.#ctor
  commentId: M:SuperOffice.IO.Files.DiskFileAccess.#ctor
  id: '#ctor'
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: DiskFileAccess()
  nameWithType: DiskFileAccess.DiskFileAccess()
  fullName: SuperOffice.IO.Files.DiskFileAccess.DiskFileAccess()
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: public DiskFileAccess()
    content.vb: Public Sub New()
  overload: SuperOffice.IO.Files.DiskFileAccess.#ctor*
  nameWithType.vb: DiskFileAccess.New()
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.New()
  name.vb: New()
- uid: SuperOffice.IO.Files.DiskFileAccess.ArchivePath
  commentId: P:SuperOffice.IO.Files.DiskFileAccess.ArchivePath
  id: ArchivePath
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: ArchivePath
  nameWithType: DiskFileAccess.ArchivePath
  fullName: SuperOffice.IO.Files.DiskFileAccess.ArchivePath
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string ArchivePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ArchivePath As String
  overload: SuperOffice.IO.Files.DiskFileAccess.ArchivePath*
  implements:
  - SuperOffice.IO.Files.IFileAccess.ArchivePath
- uid: SuperOffice.IO.Files.DiskFileAccess.TemplatesPath
  commentId: P:SuperOffice.IO.Files.DiskFileAccess.TemplatesPath
  id: TemplatesPath
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: TemplatesPath
  nameWithType: DiskFileAccess.TemplatesPath
  fullName: SuperOffice.IO.Files.DiskFileAccess.TemplatesPath
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string TemplatesPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TemplatesPath As String
  overload: SuperOffice.IO.Files.DiskFileAccess.TemplatesPath*
  implements:
  - SuperOffice.IO.Files.IFileAccess.TemplatesPath
- uid: SuperOffice.IO.Files.DiskFileAccess.TemporaryPath
  commentId: P:SuperOffice.IO.Files.DiskFileAccess.TemporaryPath
  id: TemporaryPath
  parent: SuperOffice.IO.Files.DiskFileAccess
  langs:
  - csharp
  - vb
  name: TemporaryPath
  nameWithType: DiskFileAccess.TemporaryPath
  fullName: SuperOffice.IO.Files.DiskFileAccess.TemporaryPath
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  example: []
  syntax:
    content: public string TemporaryPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TemporaryPath As String
  overload: SuperOffice.IO.Files.DiskFileAccess.TemporaryPath*
  implements:
  - SuperOffice.IO.Files.IFileAccess.TemporaryPath
references:
- uid: SuperOffice.IO.Files
  commentId: N:SuperOffice.IO.Files
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.IO.Files
  nameWithType: SuperOffice.IO.Files
  fullName: SuperOffice.IO.Files
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.IO
    name: IO
    isExternal: true
    href: SuperOffice.IO.html
  - name: .
  - uid: SuperOffice.IO.Files
    name: Files
    isExternal: true
    href: SuperOffice.IO.Files.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.IO
    name: IO
    isExternal: true
    href: SuperOffice.IO.html
  - name: .
  - uid: SuperOffice.IO.Files
    name: Files
    isExternal: true
    href: SuperOffice.IO.Files.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: SuperOffice.IO.Files.IFileAccess
  commentId: T:SuperOffice.IO.Files.IFileAccess
  parent: SuperOffice.IO.Files
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html
  name: IFileAccess
  nameWithType: IFileAccess
  fullName: SuperOffice.IO.Files.IFileAccess
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<DiskFileAccess, To>(DiskFileAccess)
  nameWithType: EnumUtil.MapEnums<DiskFileAccess, To>(DiskFileAccess)
  fullName: EnumUtil.MapEnums<SuperOffice.IO.Files.DiskFileAccess, To>(SuperOffice.IO.Files.DiskFileAccess)
  nameWithType.vb: EnumUtil.MapEnums(Of DiskFileAccess, To)(DiskFileAccess)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.Files.DiskFileAccess, To)(SuperOffice.IO.Files.DiskFileAccess)
  name.vb: MapEnums(Of DiskFileAccess, To)(DiskFileAccess)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.IO.Files.DiskFileAccess)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.IO.Files.DiskFileAccess)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<DiskFileAccess, To>(DiskFileAccess)
  nameWithType: Converters.MapEnums<DiskFileAccess, To>(DiskFileAccess)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.Files.DiskFileAccess, To>(SuperOffice.IO.Files.DiskFileAccess)
  nameWithType.vb: Converters.MapEnums(Of DiskFileAccess, To)(DiskFileAccess)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.Files.DiskFileAccess, To)(SuperOffice.IO.Files.DiskFileAccess)
  name.vb: MapEnums(Of DiskFileAccess, To)(DiskFileAccess)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.IO.Files.DiskFileAccess)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.IO.Files.DiskFileAccess)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.IO.Files.DiskFileAccess)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<DiskFileAccess>(DiskFileAccess, DiskFileAccess)
  nameWithType: ObjectExtensions.AssignByReflection<DiskFileAccess>(DiskFileAccess, DiskFileAccess)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.IO.Files.DiskFileAccess>(SuperOffice.IO.Files.DiskFileAccess, SuperOffice.IO.Files.DiskFileAccess)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of DiskFileAccess)(DiskFileAccess, DiskFileAccess)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.IO.Files.DiskFileAccess)(SuperOffice.IO.Files.DiskFileAccess, SuperOffice.IO.Files.DiskFileAccess)
  name.vb: AssignByReflection(Of DiskFileAccess)(DiskFileAccess, DiskFileAccess)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.IO.Files.DiskFileAccess,SuperOffice.IO.Files.DiskFileAccess)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: '>'
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: ','
  - name: " "
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.IO.Files.DiskFileAccess,SuperOffice.IO.Files.DiskFileAccess)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: ','
  - name: " "
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<DiskFileAccess>(DiskFileAccess)
  nameWithType: ObjectExtensions.GraphCopy<DiskFileAccess>(DiskFileAccess)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.IO.Files.DiskFileAccess>(SuperOffice.IO.Files.DiskFileAccess)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of DiskFileAccess)(DiskFileAccess)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.IO.Files.DiskFileAccess)(SuperOffice.IO.Files.DiskFileAccess)
  name.vb: GraphCopy(Of DiskFileAccess)(DiskFileAccess)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.IO.Files.DiskFileAccess)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: '>'
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.IO.Files.DiskFileAccess)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
  - name: (
  - uid: SuperOffice.IO.Files.DiskFileAccess
    name: DiskFileAccess
    isExternal: true
    href: SuperOffice.IO.Files.DiskFileAccess.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
- uid: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.EnsureAccess
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_EnsureAccess_System_Action_
  name: EnsureAccess
  nameWithType: DiskFileAccess.EnsureAccess
  fullName: SuperOffice.IO.Files.DiskFileAccess.EnsureAccess
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  commentId: M:SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess_System_Action_
  name: EnsureAccess(Action)
  nameWithType: IFileAccess.EnsureAccess(Action)
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess_System_Action_
  - name: (
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess_System_Action_
  - name: (
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
  commentId: M:SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess_System_Func_System_Threading_Tasks_Task__
  name: EnsureAccess(Func<Task>)
  nameWithType: IFileAccess.EnsureAccess(Func<Task>)
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: IFileAccess.EnsureAccess(Func(Of Task))
  fullName.vb: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func(Of System.Threading.Tasks.Task))
  name.vb: EnsureAccess(Func(Of Task))
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess_System_Func_System_Threading_Tasks_Task__
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Func{System.Threading.Tasks.Task})
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess_System_Func_System_Threading_Tasks_Task__
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
  - name: )
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{{T}})
  commentId: M:SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  parent: SuperOffice.IO.Files.IFileAccess
  definition: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess__1_System_Func___0__
  name: EnsureAccess<T>(Func<T>)
  nameWithType: IFileAccess.EnsureAccess<T>(Func<T>)
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess<T>(System.Func<T>)
  nameWithType.vb: IFileAccess.EnsureAccess(Of T)(Func(Of T))
  fullName.vb: SuperOffice.IO.Files.IFileAccess.EnsureAccess(Of T)(System.Func(Of T))
  name.vb: EnsureAccess(Of T)(Func(Of T))
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess__1_System_Func___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess__1_System_Func___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Func{{T}}
  commentId: T:System.Func{`0}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  commentId: M:SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess__1_System_Func___0__
  name: EnsureAccess<T>(Func<T>)
  nameWithType: IFileAccess.EnsureAccess<T>(Func<T>)
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess<T>(System.Func<T>)
  nameWithType.vb: IFileAccess.EnsureAccess(Of T)(Func(Of T))
  fullName.vb: SuperOffice.IO.Files.IFileAccess.EnsureAccess(Of T)(System.Func(Of T))
  name.vb: EnsureAccess(Of T)(Func(Of T))
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess__1_System_Func___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
    name: EnsureAccess
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_EnsureAccess__1_System_Func___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_FileExistsAsync_System_String_System_Threading_CancellationToken_
  name: FileExistsAsync
  nameWithType: DiskFileAccess.FileExistsAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.FileExistsAsync
- uid: SuperOffice.IO.Files.IFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_FileExistsAsync_System_String_System_Threading_CancellationToken_
  name: FileExistsAsync(string, CancellationToken)
  nameWithType: IFileAccess.FileExistsAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.FileExistsAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.FileExistsAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.FileExistsAsync(String, System.Threading.CancellationToken)
  name.vb: FileExistsAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
    name: FileExistsAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_FileExistsAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.FileExistsAsync(System.String,System.Threading.CancellationToken)
    name: FileExistsAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_FileExistsAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_DirectoryGetFilesAsync_System_String_System_String_System_Boolean_System_Threading_CancellationToken_
  name: DirectoryGetFilesAsync
  nameWithType: DiskFileAccess.DirectoryGetFilesAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFilesAsync
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryGetFilesAsync_System_String_System_String_System_Boolean_System_Threading_CancellationToken_
  name: DirectoryGetFilesAsync(string, string, bool, CancellationToken)
  nameWithType: IFileAccess.DirectoryGetFilesAsync(string, string, bool, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(string, string, bool, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.DirectoryGetFilesAsync(String, String, Boolean, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(String, String, Boolean, System.Threading.CancellationToken)
  name.vb: DirectoryGetFilesAsync(String, String, Boolean, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
    name: DirectoryGetFilesAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryGetFilesAsync_System_String_System_String_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFilesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)
    name: DirectoryGetFilesAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryGetFilesAsync_System_String_System_String_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: T:System.Threading.Tasks.Task{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string[]>
  nameWithType: Task<string[]>
  fullName: System.Threading.Tasks.Task<string[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_DirectoryGetFileInfosAsync_System_String_System_Threading_CancellationToken_
  name: DirectoryGetFileInfosAsync
  nameWithType: DiskFileAccess.DirectoryGetFileInfosAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.DirectoryGetFileInfosAsync
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryGetFileInfosAsync_System_String_System_Threading_CancellationToken_
  name: DirectoryGetFileInfosAsync(string, CancellationToken)
  nameWithType: IFileAccess.DirectoryGetFileInfosAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.DirectoryGetFileInfosAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(String, System.Threading.CancellationToken)
  name.vb: DirectoryGetFileInfosAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
    name: DirectoryGetFileInfosAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryGetFileInfosAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfosAsync(System.String,System.Threading.CancellationToken)
    name: DirectoryGetFileInfosAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryGetFileInfosAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.IO.Files.SoFileInfo[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.IO.Files.SoFileInfo[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<SoFileInfo[]>
  nameWithType: Task<SoFileInfo[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.IO.Files.SoFileInfo[]>
  nameWithType.vb: Task(Of SoFileInfo())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.IO.Files.SoFileInfo())
  name.vb: Task(Of SoFileInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.IO.Files.SoFileInfo
    name: SoFileInfo
    isExternal: true
    href: SuperOffice.IO.Files.SoFileInfo.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.IO.Files.SoFileInfo
    name: SoFileInfo
    isExternal: true
    href: SuperOffice.IO.Files.SoFileInfo.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_CreateDirectoryIfNotExists_System_String_
  name: CreateDirectoryIfNotExists
  nameWithType: DiskFileAccess.CreateDirectoryIfNotExists
  fullName: SuperOffice.IO.Files.DiskFileAccess.CreateDirectoryIfNotExists
- uid: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_CreateDirectoryIfNotExists_System_String_
  name: CreateDirectoryIfNotExists(string)
  nameWithType: IFileAccess.CreateDirectoryIfNotExists(string)
  fullName: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(string)
  nameWithType.vb: IFileAccess.CreateDirectoryIfNotExists(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(String)
  name.vb: CreateDirectoryIfNotExists(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
    name: CreateDirectoryIfNotExists
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_CreateDirectoryIfNotExists_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
    name: CreateDirectoryIfNotExists
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_CreateDirectoryIfNotExists_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.DirectoryExists*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.DirectoryExists
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_DirectoryExists_System_String_
  name: DirectoryExists
  nameWithType: DiskFileAccess.DirectoryExists
  fullName: SuperOffice.IO.Files.DiskFileAccess.DirectoryExists
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryExists_System_String_
  name: DirectoryExists(string)
  nameWithType: IFileAccess.DirectoryExists(string)
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryExists(string)
  nameWithType.vb: IFileAccess.DirectoryExists(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.DirectoryExists(String)
  name.vb: DirectoryExists(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
    name: DirectoryExists
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryExists_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
    name: DirectoryExists
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_DirectoryExists_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.GetFileName*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.GetFileName
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_GetFileName_System_String_
  name: GetFileName
  nameWithType: DiskFileAccess.GetFileName
  fullName: SuperOffice.IO.Files.DiskFileAccess.GetFileName
- uid: SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetFileName_System_String_
  name: GetFileName(string)
  nameWithType: IFileAccess.GetFileName(string)
  fullName: SuperOffice.IO.Files.IFileAccess.GetFileName(string)
  nameWithType.vb: IFileAccess.GetFileName(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.GetFileName(String)
  name.vb: GetFileName(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
    name: GetFileName
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetFileName_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
    name: GetFileName
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetFileName_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_GetFileNameWithoutExtension_System_String_
  name: GetFileNameWithoutExtension
  nameWithType: DiskFileAccess.GetFileNameWithoutExtension
  fullName: SuperOffice.IO.Files.DiskFileAccess.GetFileNameWithoutExtension
- uid: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetFileNameWithoutExtension_System_String_
  name: GetFileNameWithoutExtension(string)
  nameWithType: IFileAccess.GetFileNameWithoutExtension(string)
  fullName: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(string)
  nameWithType.vb: IFileAccess.GetFileNameWithoutExtension(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(String)
  name.vb: GetFileNameWithoutExtension(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
    name: GetFileNameWithoutExtension
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetFileNameWithoutExtension_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
    name: GetFileNameWithoutExtension
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetFileNameWithoutExtension_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_GetDirectoryName_System_String_
  name: GetDirectoryName
  nameWithType: DiskFileAccess.GetDirectoryName
  fullName: SuperOffice.IO.Files.DiskFileAccess.GetDirectoryName
- uid: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetDirectoryName_System_String_
  name: GetDirectoryName(string)
  nameWithType: IFileAccess.GetDirectoryName(string)
  fullName: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(string)
  nameWithType.vb: IFileAccess.GetDirectoryName(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(String)
  name.vb: GetDirectoryName(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
    name: GetDirectoryName
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetDirectoryName_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
    name: GetDirectoryName
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_GetDirectoryName_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.PathCombine*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.PathCombine
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_PathCombine_System_String___
  name: PathCombine
  nameWithType: DiskFileAccess.PathCombine
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathCombine
- uid: SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathCombine_System_String___
  name: PathCombine(params string[])
  nameWithType: IFileAccess.PathCombine(params string[])
  fullName: SuperOffice.IO.Files.IFileAccess.PathCombine(params string[])
  nameWithType.vb: IFileAccess.PathCombine(ParamArray String())
  fullName.vb: SuperOffice.IO.Files.IFileAccess.PathCombine(ParamArray String())
  name.vb: PathCombine(ParamArray String())
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
    name: PathCombine
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathCombine_System_String___
  - name: (
  - name: params
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
    name: PathCombine
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathCombine_System_String___
  - name: (
  - name: ParamArray
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.PathGetExtension*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.PathGetExtension
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_PathGetExtension_System_String_
  name: PathGetExtension
  nameWithType: DiskFileAccess.PathGetExtension
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathGetExtension
- uid: SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetExtension_System_String_
  name: PathGetExtension(string)
  nameWithType: IFileAccess.PathGetExtension(string)
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetExtension(string)
  nameWithType.vb: IFileAccess.PathGetExtension(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.PathGetExtension(String)
  name.vb: PathGetExtension(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
    name: PathGetExtension
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetExtension_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
    name: PathGetExtension
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetExtension_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_PathGetInvalidFileNameChars
  name: PathGetInvalidFileNameChars
  nameWithType: DiskFileAccess.PathGetInvalidFileNameChars
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathGetInvalidFileNameChars
- uid: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetInvalidFileNameChars
  name: PathGetInvalidFileNameChars()
  nameWithType: IFileAccess.PathGetInvalidFileNameChars()
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars()
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
    name: PathGetInvalidFileNameChars
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetInvalidFileNameChars
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
    name: PathGetInvalidFileNameChars
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetInvalidFileNameChars
  - name: (
  - name: )
- uid: System.Char[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char[]
  nameWithType: char[]
  fullName: char[]
  nameWithType.vb: Char()
  fullName.vb: Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: (
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.PathGetFileName*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.PathGetFileName
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_PathGetFileName_System_String_
  name: PathGetFileName
  nameWithType: DiskFileAccess.PathGetFileName
  fullName: SuperOffice.IO.Files.DiskFileAccess.PathGetFileName
- uid: SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetFileName_System_String_
  name: PathGetFileName(string)
  nameWithType: IFileAccess.PathGetFileName(string)
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetFileName(string)
  nameWithType.vb: IFileAccess.PathGetFileName(String)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.PathGetFileName(String)
  name.vb: PathGetFileName(String)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
    name: PathGetFileName
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetFileName_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
    name: PathGetFileName
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_PathGetFileName_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.Exceptions.SoFileNotFoundException
  commentId: T:SuperOffice.Exceptions.SoFileNotFoundException
  isExternal: true
  href: SuperOffice.Exceptions.SoFileNotFoundException.html
  name: SoFileNotFoundException
  nameWithType: SoFileNotFoundException
  fullName: SuperOffice.Exceptions.SoFileNotFoundException
- uid: SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_OpenReadOnlyNoLockAsync_System_String_System_Threading_CancellationToken_
  name: OpenReadOnlyNoLockAsync
  nameWithType: DiskFileAccess.OpenReadOnlyNoLockAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.OpenReadOnlyNoLockAsync
- uid: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_OpenReadOnlyNoLockAsync_System_String_System_Threading_CancellationToken_
  name: OpenReadOnlyNoLockAsync(string, CancellationToken)
  nameWithType: IFileAccess.OpenReadOnlyNoLockAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.OpenReadOnlyNoLockAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(String, System.Threading.CancellationToken)
  name.vb: OpenReadOnlyNoLockAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
    name: OpenReadOnlyNoLockAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_OpenReadOnlyNoLockAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLockAsync(System.String,System.Threading.CancellationToken)
    name: OpenReadOnlyNoLockAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_OpenReadOnlyNoLockAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_SaveStreamToFileAsync_System_IO_Stream_System_String_System_Threading_CancellationToken_
  name: SaveStreamToFileAsync
  nameWithType: DiskFileAccess.SaveStreamToFileAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.SaveStreamToFileAsync
- uid: SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_SaveStreamToFileAsync_System_IO_Stream_System_String_System_Threading_CancellationToken_
  name: SaveStreamToFileAsync(Stream, string, CancellationToken)
  nameWithType: IFileAccess.SaveStreamToFileAsync(Stream, string, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream, string, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.SaveStreamToFileAsync(Stream, String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream, String, System.Threading.CancellationToken)
  name.vb: SaveStreamToFileAsync(Stream, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
    name: SaveStreamToFileAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_SaveStreamToFileAsync_System_IO_Stream_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.SaveStreamToFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
    name: SaveStreamToFileAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_SaveStreamToFileAsync_System_IO_Stream_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_CreateForWriteAsync_System_String_System_Threading_CancellationToken_
  name: CreateForWriteAsync
  nameWithType: DiskFileAccess.CreateForWriteAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.CreateForWriteAsync
- uid: SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_CreateForWriteAsync_System_String_System_Threading_CancellationToken_
  name: CreateForWriteAsync(string, CancellationToken)
  nameWithType: IFileAccess.CreateForWriteAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.CreateForWriteAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(String, System.Threading.CancellationToken)
  name.vb: CreateForWriteAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
    name: CreateForWriteAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_CreateForWriteAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.CreateForWriteAsync(System.String,System.Threading.CancellationToken)
    name: CreateForWriteAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_CreateForWriteAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_FileDeleteAsync_System_String_System_Threading_CancellationToken_
  name: FileDeleteAsync
  nameWithType: DiskFileAccess.FileDeleteAsync
  fullName: SuperOffice.IO.Files.DiskFileAccess.FileDeleteAsync
- uid: SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_FileDeleteAsync_System_String_System_Threading_CancellationToken_
  name: FileDeleteAsync(string, CancellationToken)
  nameWithType: IFileAccess.FileDeleteAsync(string, CancellationToken)
  fullName: SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IFileAccess.FileDeleteAsync(String, CancellationToken)
  fullName.vb: SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(String, System.Threading.CancellationToken)
  name.vb: FileDeleteAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
    name: FileDeleteAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_FileDeleteAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.Files.IFileAccess.FileDeleteAsync(System.String,System.Threading.CancellationToken)
    name: FileDeleteAsync
    isExternal: true
    href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_FileDeleteAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.IO.Files.DiskFileAccess.#ctor*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.#ctor
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess__ctor
  name: DiskFileAccess
  nameWithType: DiskFileAccess.DiskFileAccess
  fullName: SuperOffice.IO.Files.DiskFileAccess.DiskFileAccess
  nameWithType.vb: DiskFileAccess.New
  fullName.vb: SuperOffice.IO.Files.DiskFileAccess.New
  name.vb: New
- uid: SuperOffice.IO.Files.DiskFileAccess.ArchivePath*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.ArchivePath
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_ArchivePath
  name: ArchivePath
  nameWithType: DiskFileAccess.ArchivePath
  fullName: SuperOffice.IO.Files.DiskFileAccess.ArchivePath
- uid: SuperOffice.IO.Files.IFileAccess.ArchivePath
  commentId: P:SuperOffice.IO.Files.IFileAccess.ArchivePath
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_ArchivePath
  name: ArchivePath
  nameWithType: IFileAccess.ArchivePath
  fullName: SuperOffice.IO.Files.IFileAccess.ArchivePath
- uid: SuperOffice.IO.Files.DiskFileAccess.TemplatesPath*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.TemplatesPath
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_TemplatesPath
  name: TemplatesPath
  nameWithType: DiskFileAccess.TemplatesPath
  fullName: SuperOffice.IO.Files.DiskFileAccess.TemplatesPath
- uid: SuperOffice.IO.Files.IFileAccess.TemplatesPath
  commentId: P:SuperOffice.IO.Files.IFileAccess.TemplatesPath
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_TemplatesPath
  name: TemplatesPath
  nameWithType: IFileAccess.TemplatesPath
  fullName: SuperOffice.IO.Files.IFileAccess.TemplatesPath
- uid: SuperOffice.IO.Files.DiskFileAccess.TemporaryPath*
  commentId: Overload:SuperOffice.IO.Files.DiskFileAccess.TemporaryPath
  isExternal: true
  href: SuperOffice.IO.Files.DiskFileAccess.html#SuperOffice_IO_Files_DiskFileAccess_TemporaryPath
  name: TemporaryPath
  nameWithType: DiskFileAccess.TemporaryPath
  fullName: SuperOffice.IO.Files.DiskFileAccess.TemporaryPath
- uid: SuperOffice.IO.Files.IFileAccess.TemporaryPath
  commentId: P:SuperOffice.IO.Files.IFileAccess.TemporaryPath
  parent: SuperOffice.IO.Files.IFileAccess
  isExternal: true
  href: SuperOffice.IO.Files.IFileAccess.html#SuperOffice_IO_Files_IFileAccess_TemporaryPath
  name: TemporaryPath
  nameWithType: IFileAccess.TemporaryPath
  fullName: SuperOffice.IO.Files.IFileAccess.TemporaryPath
