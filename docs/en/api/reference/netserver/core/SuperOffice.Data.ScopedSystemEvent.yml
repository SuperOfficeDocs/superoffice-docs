### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.ScopedSystemEvent
  commentId: T:SuperOffice.Data.ScopedSystemEvent
  id: ScopedSystemEvent
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.ScopedSystemEvent.#ctor(SuperOffice.CRM.Rows.SystemEventRow,System.Boolean)
  - SuperOffice.Data.ScopedSystemEvent.Dispose
  - SuperOffice.Data.ScopedSystemEvent.IsNew
  - SuperOffice.Data.ScopedSystemEvent.OnDispose
  - SuperOffice.Data.ScopedSystemEvent.Row
  langs:
  - csharp
  - vb
  name: ScopedSystemEvent
  nameWithType: ScopedSystemEvent
  fullName: SuperOffice.Data.ScopedSystemEvent
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: 'public class ScopedSystemEvent : IDisposable'
    content.vb: >-
      Public Class ScopedSystemEvent
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.ScopedSystemEvent.EnumUtil.MapEnums``2
  - SuperOffice.Data.ScopedSystemEvent.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.ScopedSystemEvent.#ctor(SuperOffice.CRM.Rows.SystemEventRow,System.Boolean)
  commentId: M:SuperOffice.Data.ScopedSystemEvent.#ctor(SuperOffice.CRM.Rows.SystemEventRow,System.Boolean)
  id: '#ctor(SuperOffice.CRM.Rows.SystemEventRow,System.Boolean)'
  parent: SuperOffice.Data.ScopedSystemEvent
  langs:
  - csharp
  - vb
  name: ScopedSystemEvent(SystemEventRow, Boolean)
  nameWithType: ScopedSystemEvent.ScopedSystemEvent(SystemEventRow, Boolean)
  fullName: SuperOffice.Data.ScopedSystemEvent.ScopedSystemEvent(SuperOffice.CRM.Rows.SystemEventRow, System.Boolean)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public ScopedSystemEvent(SystemEventRow row, bool isNew)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.SystemEventRow
    - id: isNew
      type: System.Boolean
    content.vb: Public Sub New(row As SystemEventRow, isNew As Boolean)
  overload: SuperOffice.Data.ScopedSystemEvent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.ScopedSystemEvent.Dispose
  commentId: M:SuperOffice.Data.ScopedSystemEvent.Dispose
  id: Dispose
  parent: SuperOffice.Data.ScopedSystemEvent
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ScopedSystemEvent.Dispose()
  fullName: SuperOffice.Data.ScopedSystemEvent.Dispose()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SuperOffice.Data.ScopedSystemEvent.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.ScopedSystemEvent.Row
  commentId: P:SuperOffice.Data.ScopedSystemEvent.Row
  id: Row
  parent: SuperOffice.Data.ScopedSystemEvent
  langs:
  - csharp
  - vb
  name: Row
  nameWithType: ScopedSystemEvent.Row
  fullName: SuperOffice.Data.ScopedSystemEvent.Row
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public SystemEventRow Row { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Rows.SystemEventRow
    content.vb: Public ReadOnly Property Row As SystemEventRow
  overload: SuperOffice.Data.ScopedSystemEvent.Row*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.ScopedSystemEvent.IsNew
  commentId: P:SuperOffice.Data.ScopedSystemEvent.IsNew
  id: IsNew
  parent: SuperOffice.Data.ScopedSystemEvent
  langs:
  - csharp
  - vb
  name: IsNew
  nameWithType: ScopedSystemEvent.IsNew
  fullName: SuperOffice.Data.ScopedSystemEvent.IsNew
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public bool IsNew { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNew As Boolean
  overload: SuperOffice.Data.ScopedSystemEvent.IsNew*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.ScopedSystemEvent.OnDispose
  commentId: P:SuperOffice.Data.ScopedSystemEvent.OnDispose
  id: OnDispose
  parent: SuperOffice.Data.ScopedSystemEvent
  langs:
  - csharp
  - vb
  name: OnDispose
  nameWithType: ScopedSystemEvent.OnDispose
  fullName: SuperOffice.Data.ScopedSystemEvent.OnDispose
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data
  syntax:
    content: public Action OnDispose { get; set; }
    parameters: []
    return:
      type: System.Action
    content.vb: Public Property OnDispose As Action
  overload: SuperOffice.Data.ScopedSystemEvent.OnDispose*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.ScopedSystemEvent.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ScopedSystemEvent, To>()
  nameWithType: EnumUtil.MapEnums<ScopedSystemEvent, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.ScopedSystemEvent, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ScopedSystemEvent, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.ScopedSystemEvent, To)()
  name.vb: MapEnums(Of ScopedSystemEvent, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ScopedSystemEvent, To>
    nameWithType: EnumUtil.MapEnums<ScopedSystemEvent, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.ScopedSystemEvent, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ScopedSystemEvent, To)
    nameWithType: EnumUtil.MapEnums(Of ScopedSystemEvent, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.ScopedSystemEvent, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.ScopedSystemEvent.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ScopedSystemEvent, To>()
  nameWithType: Converters.MapEnums<ScopedSystemEvent, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.ScopedSystemEvent, To>()
  nameWithType.vb: Converters.MapEnums(Of ScopedSystemEvent, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.ScopedSystemEvent, To)()
  name.vb: MapEnums(Of ScopedSystemEvent, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ScopedSystemEvent, To>
    nameWithType: Converters.MapEnums<ScopedSystemEvent, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.ScopedSystemEvent, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ScopedSystemEvent, To)
    nameWithType: Converters.MapEnums(Of ScopedSystemEvent, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.ScopedSystemEvent, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.ScopedSystemEvent.#ctor*
  commentId: Overload:SuperOffice.Data.ScopedSystemEvent.#ctor
  isExternal: true
  name: ScopedSystemEvent
  nameWithType: ScopedSystemEvent.ScopedSystemEvent
  fullName: SuperOffice.Data.ScopedSystemEvent.ScopedSystemEvent
- uid: SuperOffice.CRM.Rows.SystemEventRow
  commentId: T:SuperOffice.CRM.Rows.SystemEventRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: SystemEventRow
  nameWithType: SystemEventRow
  fullName: SuperOffice.CRM.Rows.SystemEventRow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: SuperOffice.Data.ScopedSystemEvent.Dispose*
  commentId: Overload:SuperOffice.Data.ScopedSystemEvent.Dispose
  isExternal: true
  name: Dispose
  nameWithType: ScopedSystemEvent.Dispose
  fullName: SuperOffice.Data.ScopedSystemEvent.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.ScopedSystemEvent.Row*
  commentId: Overload:SuperOffice.Data.ScopedSystemEvent.Row
  isExternal: true
  name: Row
  nameWithType: ScopedSystemEvent.Row
  fullName: SuperOffice.Data.ScopedSystemEvent.Row
- uid: SuperOffice.Data.ScopedSystemEvent.IsNew*
  commentId: Overload:SuperOffice.Data.ScopedSystemEvent.IsNew
  isExternal: true
  name: IsNew
  nameWithType: ScopedSystemEvent.IsNew
  fullName: SuperOffice.Data.ScopedSystemEvent.IsNew
- uid: SuperOffice.Data.ScopedSystemEvent.OnDispose*
  commentId: Overload:SuperOffice.Data.ScopedSystemEvent.OnDispose
  isExternal: true
  name: OnDispose
  nameWithType: ScopedSystemEvent.OnDispose
  fullName: SuperOffice.Data.ScopedSystemEvent.OnDispose
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
