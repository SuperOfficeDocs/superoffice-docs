### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Sale.QuoteDocumentData
  commentId: T:SuperOffice.CRM.Sale.QuoteDocumentData
  id: QuoteDocumentData
  parent: SuperOffice.CRM.Sale
  children:
  - SuperOffice.CRM.Sale.QuoteDocumentData.#ctor(System.Int32,System.Int32,System.Globalization.CultureInfo,System.String[])
  - SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData
  - SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation
  langs:
  - csharp
  - vb
  name: QuoteDocumentData
  nameWithType: QuoteDocumentData
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Sale
  summary: "\n<xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> generator for the Quote document system - produces an appropriately populated <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> \nbased on sale id, optional alternative id and culture selection\n"
  syntax:
    content: 'public class QuoteDocumentData : Object'
    content.vb: >-
      Public Class QuoteDocumentData
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.CRM.Sale.QuoteDocumentData.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Sale.QuoteDocumentData.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.#ctor(System.Int32,System.Int32,System.Globalization.CultureInfo,System.String[])
  commentId: M:SuperOffice.CRM.Sale.QuoteDocumentData.#ctor(System.Int32,System.Int32,System.Globalization.CultureInfo,System.String[])
  id: '#ctor(System.Int32,System.Int32,System.Globalization.CultureInfo,System.String[])'
  parent: SuperOffice.CRM.Sale.QuoteDocumentData
  langs:
  - csharp
  - vb
  name: QuoteDocumentData(Int32, Int32, CultureInfo, String[])
  nameWithType: QuoteDocumentData.QuoteDocumentData(Int32, Int32, CultureInfo, String[])
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData.QuoteDocumentData(System.Int32, System.Int32, System.Globalization.CultureInfo, System.String[])
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Sale
  summary: "\nCache input parameters\n"
  syntax:
    content: public QuoteDocumentData(int saleId, int singleAlternativeId, CultureInfo culture, string[] prescannedTags)
    parameters:
    - id: saleId
      type: System.Int32
    - id: singleAlternativeId
      type: System.Int32
    - id: culture
      type: System.Globalization.CultureInfo
    - id: prescannedTags
      type: System.String[]
    content.vb: Public Sub New(saleId As Integer, singleAlternativeId As Integer, culture As CultureInfo, prescannedTags As String())
  overload: SuperOffice.CRM.Sale.QuoteDocumentData.#ctor*
  nameWithType.vb: QuoteDocumentData.QuoteDocumentData(Int32, Int32, CultureInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Sale.QuoteDocumentData.QuoteDocumentData(System.Int32, System.Int32, System.Globalization.CultureInfo, System.String())
  name.vb: QuoteDocumentData(Int32, Int32, CultureInfo, String())
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData
  commentId: M:SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData
  id: GetDocumentData
  parent: SuperOffice.CRM.Sale.QuoteDocumentData
  langs:
  - csharp
  - vb
  name: GetDocumentData()
  nameWithType: QuoteDocumentData.GetDocumentData()
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Sale
  summary: "\nSet up archive provider, fetch data, transform into DataSet and return\n"
  syntax:
    content: public DataSet GetDocumentData()
    return:
      type: System.Data.DataSet
    content.vb: Public Function GetDocumentData As DataSet
  overload: SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation
  commentId: M:SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation
  id: GetTagDocumentation
  parent: SuperOffice.CRM.Sale.QuoteDocumentData
  langs:
  - csharp
  - vb
  name: GetTagDocumentation()
  nameWithType: QuoteDocumentData.GetTagDocumentation()
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Sale
  summary: "\nGet a list of &lt;tagName>|&lt;Display Name>|&lt;Tooltip/description> of all tags;\nneeds further decoding via resource system to obtain final documentation text\n"
  syntax:
    content: public List<string> GetTagDocumentation()
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Function GetTagDocumentation As List(Of String)
  overload: SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.Sale
  commentId: N:SuperOffice.CRM.Sale
  isExternal: true
  name: SuperOffice.CRM.Sale
  nameWithType: SuperOffice.CRM.Sale
  fullName: SuperOffice.CRM.Sale
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<QuoteDocumentData, To>()
  nameWithType: EnumUtil.MapEnums<QuoteDocumentData, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Sale.QuoteDocumentData, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of QuoteDocumentData, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Sale.QuoteDocumentData, To)()
  name.vb: MapEnums(Of QuoteDocumentData, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<QuoteDocumentData, To>
    nameWithType: EnumUtil.MapEnums<QuoteDocumentData, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Sale.QuoteDocumentData, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of QuoteDocumentData, To)
    nameWithType: EnumUtil.MapEnums(Of QuoteDocumentData, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Sale.QuoteDocumentData, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<QuoteDocumentData, To>()
  nameWithType: Converters.MapEnums<QuoteDocumentData, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Sale.QuoteDocumentData, To>()
  nameWithType.vb: Converters.MapEnums(Of QuoteDocumentData, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Sale.QuoteDocumentData, To)()
  name.vb: MapEnums(Of QuoteDocumentData, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<QuoteDocumentData, To>
    nameWithType: Converters.MapEnums<QuoteDocumentData, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Sale.QuoteDocumentData, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of QuoteDocumentData, To)
    nameWithType: Converters.MapEnums(Of QuoteDocumentData, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Sale.QuoteDocumentData, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.#ctor*
  commentId: Overload:SuperOffice.CRM.Sale.QuoteDocumentData.#ctor
  isExternal: true
  name: QuoteDocumentData
  nameWithType: QuoteDocumentData.QuoteDocumentData
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData.QuoteDocumentData
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData*
  commentId: Overload:SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData
  isExternal: true
  name: GetDocumentData
  nameWithType: QuoteDocumentData.GetDocumentData
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData.GetDocumentData
- uid: System.Data.DataSet
  isExternal: true
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation*
  commentId: Overload:SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation
  isExternal: true
  name: GetTagDocumentation
  nameWithType: QuoteDocumentData.GetTagDocumentation
  fullName: SuperOffice.CRM.Sale.QuoteDocumentData.GetTagDocumentation
- uid: System.Collections.Generic.List{System.String}
  commentId: '!:System.Collections.Generic.List{System.String}'
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
