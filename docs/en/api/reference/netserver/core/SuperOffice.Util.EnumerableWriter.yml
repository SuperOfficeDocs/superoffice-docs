### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.EnumerableWriter
  commentId: T:SuperOffice.Util.EnumerableWriter
  id: EnumerableWriter
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.EnumerableWriter.#ctor
  - SuperOffice.Util.EnumerableWriter.CreateFor(System.Type)
  - SuperOffice.Util.EnumerableWriter.Write(System.Collections.IEnumerable,System.Object)
  langs:
  - csharp
  - vb
  name: EnumerableWriter
  nameWithType: EnumerableWriter
  fullName: SuperOffice.Util.EnumerableWriter
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nClass which provides the ability to write to a provided enumerable of many kinds.\nInstances should be created through <xref href=\"SuperOffice.Util.EnumerableWriter.CreateFor(System.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: 'public abstract class EnumerableWriter : Object'
    content.vb: >-
      Public MustInherit Class EnumerableWriter
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Util.EnumerableWriter.EnumUtil.MapEnums``2
  - SuperOffice.Util.EnumerableWriter.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.Util.EnumerableWriter.CreateFor(System.Type)
  commentId: M:SuperOffice.Util.EnumerableWriter.CreateFor(System.Type)
  id: CreateFor(System.Type)
  parent: SuperOffice.Util.EnumerableWriter
  langs:
  - csharp
  - vb
  name: CreateFor(Type)
  nameWithType: EnumerableWriter.CreateFor(Type)
  fullName: SuperOffice.Util.EnumerableWriter.CreateFor(System.Type)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nCreates an EnumerableWriter for the specified type and attempts to detect the type it enumerates over.\n"
  syntax:
    content: public static EnumerableWriter CreateFor(Type enumerableType)
    parameters:
    - id: enumerableType
      type: System.Type
      description: Type for the EnumuerableWriter to work with. Must be a recognized Enumerable, or method throws.
    return:
      type: SuperOffice.Util.EnumerableWriter
      description: Will always return an instance of <xref href="SuperOffice.Util.EnumerableWriter" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function CreateFor(enumerableType As Type) As EnumerableWriter
  overload: SuperOffice.Util.EnumerableWriter.CreateFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Util.EnumerableWriter.Write(System.Collections.IEnumerable,System.Object)
  commentId: M:SuperOffice.Util.EnumerableWriter.Write(System.Collections.IEnumerable,System.Object)
  id: Write(System.Collections.IEnumerable,System.Object)
  parent: SuperOffice.Util.EnumerableWriter
  langs:
  - csharp
  - vb
  name: Write(IEnumerable, Object)
  nameWithType: EnumerableWriter.Write(IEnumerable, Object)
  fullName: SuperOffice.Util.EnumerableWriter.Write(System.Collections.IEnumerable, System.Object)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nTakes an instance of an enumerable and adds data to it.\nThe returned value may be the same instance modified, or it may be a new intance.\n"
  syntax:
    content: public abstract IEnumerable Write(IEnumerable enumerableInstance, object value)
    parameters:
    - id: enumerableInstance
      type: System.Collections.IEnumerable
      description: Enumerable instance to modify
    - id: value
      type: System.Object
      description: Value to add.
    return:
      type: System.Collections.IEnumerable
      description: A enumerable instance guaranteed to contain the provided value.
    content.vb: Public MustOverride Function Write(enumerableInstance As IEnumerable, value As Object) As IEnumerable
  overload: SuperOffice.Util.EnumerableWriter.Write*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: SuperOffice.Util.EnumerableWriter.#ctor
  commentId: M:SuperOffice.Util.EnumerableWriter.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.EnumerableWriter
  langs:
  - csharp
  - vb
  name: EnumerableWriter()
  nameWithType: EnumerableWriter.EnumerableWriter()
  fullName: SuperOffice.Util.EnumerableWriter.EnumerableWriter()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: protected EnumerableWriter()
    content.vb: Protected Sub New
  overload: SuperOffice.Util.EnumerableWriter.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Util.EnumerableWriter.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<EnumerableWriter, To>()
  nameWithType: EnumUtil.MapEnums<EnumerableWriter, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.EnumerableWriter, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of EnumerableWriter, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.EnumerableWriter, To)()
  name.vb: MapEnums(Of EnumerableWriter, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<EnumerableWriter, To>
    nameWithType: EnumUtil.MapEnums<EnumerableWriter, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.EnumerableWriter, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of EnumerableWriter, To)
    nameWithType: EnumUtil.MapEnums(Of EnumerableWriter, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.EnumerableWriter, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.EnumerableWriter.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<EnumerableWriter, To>()
  nameWithType: Converters.MapEnums<EnumerableWriter, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.EnumerableWriter, To>()
  nameWithType.vb: Converters.MapEnums(Of EnumerableWriter, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.EnumerableWriter, To)()
  name.vb: MapEnums(Of EnumerableWriter, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<EnumerableWriter, To>
    nameWithType: Converters.MapEnums<EnumerableWriter, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.EnumerableWriter, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of EnumerableWriter, To)
    nameWithType: Converters.MapEnums(Of EnumerableWriter, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.EnumerableWriter, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.EnumerableWriter.CreateFor*
  commentId: Overload:SuperOffice.Util.EnumerableWriter.CreateFor
  isExternal: true
  name: CreateFor
  nameWithType: EnumerableWriter.CreateFor
  fullName: SuperOffice.Util.EnumerableWriter.CreateFor
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: SuperOffice.Util.EnumerableWriter
  commentId: T:SuperOffice.Util.EnumerableWriter
  parent: SuperOffice.Util
  isExternal: true
  name: EnumerableWriter
  nameWithType: EnumerableWriter
  fullName: SuperOffice.Util.EnumerableWriter
- uid: SuperOffice.Util.EnumerableWriter.Write*
  commentId: Overload:SuperOffice.Util.EnumerableWriter.Write
  isExternal: true
  name: Write
  nameWithType: EnumerableWriter.Write
  fullName: SuperOffice.Util.EnumerableWriter.Write
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: SuperOffice.Util.EnumerableWriter.#ctor*
  commentId: Overload:SuperOffice.Util.EnumerableWriter.#ctor
  isExternal: true
  name: EnumerableWriter
  nameWithType: EnumerableWriter.EnumerableWriter
  fullName: SuperOffice.Util.EnumerableWriter.EnumerableWriter
