### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.FieldInfoCollection
  commentId: T:SuperOffice.Data.SQL.FieldInfoCollection
  id: FieldInfoCollection
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  - SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  - SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  - SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  - SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  - SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  - SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  langs:
  - csharp
  - vb
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe FieldInfoCollection class\n"
  syntax:
    content: 'public class FieldInfoCollection : Object, IEnumerable, IEnumerable<FieldInfo>'
    content.vb: >-
      Public Class FieldInfoCollection
          Inherits Object
          Implements IEnumerable, IEnumerable(Of FieldInfo)
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  extensionMethods:
  - SuperOffice.Data.SQL.FieldInfoCollection.EnumUtil.MapEnums``2
  - SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  id: Contains(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Contains(FieldInfo)
  nameWithType: FieldInfoCollection.Contains(FieldInfo)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nContains checks the FieldInfo collection for a specific FieldInfo. \n"
  syntax:
    content: public bool Contains(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: The FieldInfo we want to know if exists or not.
    return:
      type: System.Boolean
      description: Returns true if the FieldInfo exists, false if not.
    content.vb: Public Function Contains(field As FieldInfo) As Boolean
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  id: GetEnumerator
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FieldInfoCollection.GetEnumerator()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns an enumerator to the collection.\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GetEnumerator As IEnumerator
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  id: Add(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Add(FieldInfo)
  nameWithType: FieldInfoCollection.Add(FieldInfo)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public int Add(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Int32
    content.vb: Public Function Add(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  id: Add(SuperOffice.Data.SQL.FieldInfoCollection)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Add(FieldInfoCollection)
  nameWithType: FieldInfoCollection.Add(FieldInfoCollection)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public void Add(FieldInfoCollection fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfoCollection
    content.vb: Public Sub Add(fieldInfos As FieldInfoCollection)
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  id: Add(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Add(FieldInfo[])
  nameWithType: FieldInfoCollection.Add(FieldInfo[])
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public void Add(params FieldInfo[] fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfo[]
    content.vb: Public Sub Add(ParamArray fieldInfos As FieldInfo())
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  nameWithType.vb: FieldInfoCollection.Add(FieldInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo())
  name.vb: Add(FieldInfo())
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  id: GetNumberOfItems
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetNumberOfItems()
  nameWithType: FieldInfoCollection.GetNumberOfItems()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns number of items in the collection.\n"
  syntax:
    content: public int GetNumberOfItems()
    return:
      type: System.Int32
    content.vb: Public Function GetNumberOfItems As Integer
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  id: op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Implicit(FieldInfo[] to FieldInfoCollection)
  nameWithType: FieldInfoCollection.Implicit(FieldInfo[] to FieldInfoCollection)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Implicit(SuperOffice.Data.SQL.FieldInfo[] to SuperOffice.Data.SQL.FieldInfoCollection)
  type: Operator
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nConvert an array into a collection\n"
  syntax:
    content: public static implicit operator FieldInfoCollection(FieldInfo[] fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: Array
    return:
      type: SuperOffice.Data.SQL.FieldInfoCollection
      description: A new collection containing the fields
    content.vb: Public Shared Widening Operator CType(fieldInfos As FieldInfo()) As FieldInfoCollection
  overload: SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit*
  nameWithType.vb: FieldInfoCollection.Widening(FieldInfo() to FieldInfoCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Widening(SuperOffice.Data.SQL.FieldInfo() to SuperOffice.Data.SQL.FieldInfoCollection)
  name.vb: Widening(FieldInfo() to FieldInfoCollection)
- uid: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  id: FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: FromFieldInfoArray(FieldInfo[])
  nameWithType: FieldInfoCollection.FromFieldInfoArray(FieldInfo[])
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nConvert an array into a collection explicitly.\n"
  syntax:
    content: public static FieldInfoCollection FromFieldInfoArray(FieldInfo[] fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: Array
    return:
      type: SuperOffice.Data.SQL.FieldInfoCollection
      description: A new collection containing the fields
    content.vb: Public Shared Function FromFieldInfoArray(fieldInfos As FieldInfo()) As FieldInfoCollection
  overload: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray*
  nameWithType.vb: FieldInfoCollection.FromFieldInfoArray(FieldInfo())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo())
  name.vb: FromFieldInfoArray(FieldInfo())
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  id: GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetPrimaryKeyInFieldInfoCollection(FieldInfoCollection)
  nameWithType: FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(FieldInfoCollection)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nIf there is a FieldInfo in the collection that is a primary key, this function will find and return it.\n"
  syntax:
    content: public FieldInfo GetPrimaryKeyInFieldInfoCollection(FieldInfoCollection fields)
    parameters:
    - id: fields
      type: SuperOffice.Data.SQL.FieldInfoCollection
      description: The FieldInfo-collection containing all necessary fields for the sql-statement.
    return:
      type: SuperOffice.Data.SQL.FieldInfo
      description: The primary-key as FieldInfo
    content.vb: Public Function GetPrimaryKeyInFieldInfoCollection(fields As FieldInfoCollection) As FieldInfo
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  id: PrimaryKeyExist
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: PrimaryKeyExist()
  nameWithType: FieldInfoCollection.PrimaryKeyExist()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThis function will check if the FieldInfoCollection contains a primaryKey.\nIf it does, it will return true, if not, false.\n"
  syntax:
    content: public bool PrimaryKeyExist()
    return:
      type: System.Boolean
      description: True/False
    content.vb: Public Function PrimaryKeyExist As Boolean
  overload: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  id: ValidateFieldInfoCollection(System.Boolean)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: ValidateFieldInfoCollection(Boolean)
  nameWithType: FieldInfoCollection.ValidateFieldInfoCollection(Boolean)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nCheckFieldInfoCollectionReady will validate the in-coming FieldInfoCollection.\nThe function will check the following:\nThe collection IS NOT null,\nThe collection contains at least one FieldInfo,\nThe collection contains a Primary-key.\nIf the checkPrimaryKeyExists is true, the existence of a primary-key will be checked.\nNeeded when dealing with for example a insert-statement. The ArgumentParameterCollection need the primary-key\nto be able to insert the data in a unique row in the database.\n"
  syntax:
    content: public bool ValidateFieldInfoCollection(bool checkPrimaryKeyExists)
    parameters:
    - id: checkPrimaryKeyExists
      type: System.Boolean
      description: True, we check the collection for the existence of a primary-key. False, we skip this test.
    return:
      type: System.Boolean
      description: "\nTrue if the collection is validated correct. Will throw an SoIllegalOperationException if not.\n"
    content.vb: Public Function ValidateFieldInfoCollection(checkPrimaryKeyExists As Boolean) As Boolean
  overload: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  id: GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetIndexOfField(FieldInfo)
  nameWithType: FieldInfoCollection.GetIndexOfField(FieldInfo)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet the index of a field.\n"
  remarks: "\nTries to resolve the field by using the following strategies in this order:\n<ul><li>Same instance of table and field.</li><li>Same table and field name or full field number.</li></ul>\nIt is important to distinguish two fields of the same type from each other if a table is joined\ntwice, like joining both street and postal address with contact.  Hence; it is important to have the\nsame instance of the TableInfo for both building up the query and receiving data from the result.\n"
  syntax:
    content: public int GetIndexOfField(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: The field info.
    return:
      type: System.Int32
      description: "\n0 based index of the field. -1 is returned if the field is not found.\n"
    content.vb: Public Function GetIndexOfField(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: FieldInfoCollection()
  nameWithType: FieldInfoCollection.FieldInfoCollection()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FieldInfoCollection()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public FieldInfoCollection()
    content.vb: Public Sub New
  overload: SuperOffice.Data.SQL.FieldInfoCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  commentId: P:SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: FieldInfoCollection.Item[Int32]
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns the FieldInfo on a specific index.\n"
  syntax:
    content: public FieldInfo this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public ReadOnly Property Item(index As Integer) As FieldInfo
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Item*
  nameWithType.vb: FieldInfoCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FieldInfo>
  nameWithType: IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: IEnumerable(Of FieldInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo)
  name.vb: IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<FieldInfoCollection, To>()
  nameWithType: EnumUtil.MapEnums<FieldInfoCollection, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of FieldInfoCollection, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)()
  name.vb: MapEnums(Of FieldInfoCollection, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<FieldInfoCollection, To>
    nameWithType: EnumUtil.MapEnums<FieldInfoCollection, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of FieldInfoCollection, To)
    nameWithType: EnumUtil.MapEnums(Of FieldInfoCollection, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<FieldInfoCollection>(FieldInfoCollection)
  nameWithType: ObjectExtensions.AssignByReflection<FieldInfoCollection>(FieldInfoCollection)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.FieldInfoCollection>(SuperOffice.Data.SQL.FieldInfoCollection)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of FieldInfoCollection)(FieldInfoCollection)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.FieldInfoCollection)(SuperOffice.Data.SQL.FieldInfoCollection)
  name.vb: AssignByReflection(Of FieldInfoCollection)(FieldInfoCollection)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<FieldInfoCollection>
    nameWithType: ObjectExtensions.AssignByReflection<FieldInfoCollection>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.FieldInfoCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfoCollection
    name: FieldInfoCollection
    nameWithType: FieldInfoCollection
    fullName: SuperOffice.Data.SQL.FieldInfoCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of FieldInfoCollection)
    nameWithType: ObjectExtensions.AssignByReflection(Of FieldInfoCollection)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.FieldInfoCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfoCollection
    name: FieldInfoCollection
    nameWithType: FieldInfoCollection
    fullName: SuperOffice.Data.SQL.FieldInfoCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<FieldInfoCollection>()
  nameWithType: ObjectExtensions.GraphCopy<FieldInfoCollection>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.FieldInfoCollection>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of FieldInfoCollection)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.FieldInfoCollection)()
  name.vb: GraphCopy(Of FieldInfoCollection)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<FieldInfoCollection>
    nameWithType: ObjectExtensions.GraphCopy<FieldInfoCollection>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.FieldInfoCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of FieldInfoCollection)
    nameWithType: ObjectExtensions.GraphCopy(Of FieldInfoCollection)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.FieldInfoCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<FieldInfoCollection, To>()
  nameWithType: Converters.MapEnums<FieldInfoCollection, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>()
  nameWithType.vb: Converters.MapEnums(Of FieldInfoCollection, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)()
  name.vb: MapEnums(Of FieldInfoCollection, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<FieldInfoCollection, To>
    nameWithType: Converters.MapEnums<FieldInfoCollection, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of FieldInfoCollection, To)
    nameWithType: Converters.MapEnums(Of FieldInfoCollection, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Contains*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.Contains
  isExternal: true
  name: Contains
  nameWithType: FieldInfoCollection.Contains
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Contains
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: FieldInfoCollection.GetEnumerator
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
- uid: System.Collections.IEnumerator
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.Add
  isExternal: true
  name: Add
  nameWithType: FieldInfoCollection.Add
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.FieldInfoCollection
  commentId: T:SuperOffice.Data.SQL.FieldInfoCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfo[]
  isExternal: true
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: SuperOffice.Data.SQL.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullName.vb: SuperOffice.Data.SQL.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  isExternal: true
  name: GetNumberOfItems
  nameWithType: FieldInfoCollection.GetNumberOfItems
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
- uid: SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit
  isExternal: true
  name: Implicit
  nameWithType: FieldInfoCollection.Implicit
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Implicit
  nameWithType.vb: FieldInfoCollection.Widening
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Widening
  name.vb: Widening
- uid: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray
  isExternal: true
  name: FromFieldInfoArray
  nameWithType: FieldInfoCollection.FromFieldInfoArray
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection
  isExternal: true
  name: GetPrimaryKeyInFieldInfoCollection
  nameWithType: FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  isExternal: true
  name: PrimaryKeyExist
  nameWithType: FieldInfoCollection.PrimaryKeyExist
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
- uid: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection
  isExternal: true
  name: ValidateFieldInfoCollection
  nameWithType: FieldInfoCollection.ValidateFieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField
  isExternal: true
  name: GetIndexOfField
  nameWithType: FieldInfoCollection.GetIndexOfField
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField
- uid: SuperOffice.Data.SQL.FieldInfoCollection.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  isExternal: true
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection.FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Item*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.Item
  isExternal: true
  name: Item
  nameWithType: FieldInfoCollection.Item
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Item
