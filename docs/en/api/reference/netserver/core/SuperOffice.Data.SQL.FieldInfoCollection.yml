### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.FieldInfoCollection
  commentId: T:SuperOffice.Data.SQL.FieldInfoCollection
  id: FieldInfoCollection
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  - SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  - SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  - SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  - SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  - SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  - SuperOffice.Data.SQL.FieldInfoCollection.System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator
  - SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  langs:
  - csharp
  - vb
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe FieldInfoCollection class\n"
  syntax:
    content: 'public class FieldInfoCollection : IEnumerable<FieldInfo>, IEnumerable'
    content.vb: >-
      Public Class FieldInfoCollection
          Implements IEnumerable(Of FieldInfo), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SQL.FieldInfoCollection.EnumUtil.MapEnums``2
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.ForEach``1(System.Action{SuperOffice.Data.SQL.FieldInfo})
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo})
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.Batch``1(System.Int32)
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.IndexOf``1(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.IndexOf``1(System.Func{SuperOffice.Data.SQL.FieldInfo,System.Boolean},System.Int32)
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.Permute``1(System.Int32)
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.PermissiveToDictionary``3(System.Func{SuperOffice.Data.SQL.FieldInfo,{K}},System.Func{SuperOffice.Data.SQL.FieldInfo,{V}})
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.PermissiveToDictionary``3(System.Func{SuperOffice.Data.SQL.FieldInfo,{K}},System.Func{SuperOffice.Data.SQL.FieldInfo,{V}},System.Collections.Generic.IEqualityComparer{{K}})
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.GetDifferentCombinations``1(System.Int32)
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.SuperOffice.Util.CollectionOps.AtLeastOne``1
  - SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  id: Contains(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Contains(FieldInfo)
  nameWithType: FieldInfoCollection.Contains(FieldInfo)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Contains(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nContains checks the FieldInfo collection for a specific FieldInfo. \n"
  syntax:
    content: public bool Contains(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: The FieldInfo we want to know if exists or not.
    return:
      type: System.Boolean
      description: Returns true if the FieldInfo exists, false if not.
    content.vb: Public Function Contains(field As FieldInfo) As Boolean
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  id: GetEnumerator
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FieldInfoCollection.GetEnumerator()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns an enumerator to the collection.\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GetEnumerator As IEnumerator
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator
  isEii: true
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: IEnumerable<FieldInfo>.GetEnumerator()
  nameWithType: FieldInfoCollection.IEnumerable<FieldInfo>.GetEnumerator()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: IEnumerator<FieldInfo> IEnumerable<FieldInfo>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{SuperOffice.Data.SQL.FieldInfo}
    content.vb: Function System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator As IEnumerator(Of FieldInfo) Implements IEnumerable(Of FieldInfo).GetEnumerator
  overload: SuperOffice.Data.SQL.FieldInfoCollection.System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.GetEnumerator
  nameWithType.vb: FieldInfoCollection.System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator()
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  id: Add(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Add(FieldInfo)
  nameWithType: FieldInfoCollection.Add(FieldInfo)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public int Add(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.Int32
    content.vb: Public Function Add(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  id: Add(SuperOffice.Data.SQL.FieldInfoCollection)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Add(FieldInfoCollection)
  nameWithType: FieldInfoCollection.Add(FieldInfoCollection)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfoCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public void Add(FieldInfoCollection fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfoCollection
    content.vb: Public Sub Add(fieldInfos As FieldInfoCollection)
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  id: Add(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Add(FieldInfo[])
  nameWithType: FieldInfoCollection.Add(FieldInfo[])
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nAdds values to the collection based on the in-parameter.\n"
  syntax:
    content: public void Add(params FieldInfo[] fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfo[]
    content.vb: Public Sub Add(ParamArray fieldInfos As FieldInfo())
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  nameWithType.vb: FieldInfoCollection.Add(FieldInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Add(SuperOffice.Data.SQL.FieldInfo())
  name.vb: Add(FieldInfo())
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  id: GetNumberOfItems
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetNumberOfItems()
  nameWithType: FieldInfoCollection.GetNumberOfItems()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns number of items in the collection.\n"
  syntax:
    content: public int GetNumberOfItems()
    return:
      type: System.Int32
    content.vb: Public Function GetNumberOfItems As Integer
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  id: op_Implicit(SuperOffice.Data.SQL.FieldInfo[])~SuperOffice.Data.SQL.FieldInfoCollection
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Implicit(FieldInfo[] to FieldInfoCollection)
  nameWithType: FieldInfoCollection.Implicit(FieldInfo[] to FieldInfoCollection)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Implicit(SuperOffice.Data.SQL.FieldInfo[] to SuperOffice.Data.SQL.FieldInfoCollection)
  type: Operator
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nConvert an array into a collection\n"
  syntax:
    content: public static implicit operator FieldInfoCollection(FieldInfo[] fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: Array
    return:
      type: SuperOffice.Data.SQL.FieldInfoCollection
      description: A new collection containing the fields
    content.vb: Public Shared Widening Operator CType(fieldInfos As FieldInfo()) As FieldInfoCollection
  overload: SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit*
  nameWithType.vb: FieldInfoCollection.Widening(FieldInfo() to FieldInfoCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Widening(SuperOffice.Data.SQL.FieldInfo() to SuperOffice.Data.SQL.FieldInfoCollection)
  name.vb: Widening(FieldInfo() to FieldInfoCollection)
- uid: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  id: FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: FromFieldInfoArray(FieldInfo[])
  nameWithType: FieldInfoCollection.FromFieldInfoArray(FieldInfo[])
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nConvert an array into a collection explicitly.\n"
  syntax:
    content: public static FieldInfoCollection FromFieldInfoArray(FieldInfo[] fieldInfos)
    parameters:
    - id: fieldInfos
      type: SuperOffice.Data.SQL.FieldInfo[]
      description: Array
    return:
      type: SuperOffice.Data.SQL.FieldInfoCollection
      description: A new collection containing the fields
    content.vb: Public Shared Function FromFieldInfoArray(fieldInfos As FieldInfo()) As FieldInfoCollection
  overload: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray*
  nameWithType.vb: FieldInfoCollection.FromFieldInfoArray(FieldInfo())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray(SuperOffice.Data.SQL.FieldInfo())
  name.vb: FromFieldInfoArray(FieldInfo())
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  id: GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetPrimaryKeyInFieldInfoCollection(FieldInfoCollection)
  nameWithType: FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(FieldInfoCollection)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection(SuperOffice.Data.SQL.FieldInfoCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nIf there is a FieldInfo in the collection that is a primary key, this function will find and return it.\n"
  syntax:
    content: public FieldInfo GetPrimaryKeyInFieldInfoCollection(FieldInfoCollection fields)
    parameters:
    - id: fields
      type: SuperOffice.Data.SQL.FieldInfoCollection
      description: The FieldInfo-collection containing all necessary fields for the sql-statement.
    return:
      type: SuperOffice.Data.SQL.FieldInfo
      description: The primary-key as FieldInfo
    content.vb: Public Function GetPrimaryKeyInFieldInfoCollection(fields As FieldInfoCollection) As FieldInfo
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  id: PrimaryKeyExist
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: PrimaryKeyExist()
  nameWithType: FieldInfoCollection.PrimaryKeyExist()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThis function will check if the FieldInfoCollection contains a primaryKey.\nIf it does, it will return true, if not, false.\n"
  syntax:
    content: public bool PrimaryKeyExist()
    return:
      type: System.Boolean
      description: True/False
    content.vb: Public Function PrimaryKeyExist As Boolean
  overload: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  id: ValidateFieldInfoCollection(System.Boolean)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: ValidateFieldInfoCollection(Boolean)
  nameWithType: FieldInfoCollection.ValidateFieldInfoCollection(Boolean)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection(System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nCheckFieldInfoCollectionReady will validate the in-coming FieldInfoCollection.\nThe function will check the following:\nThe collection IS NOT null,\nThe collection contains at least one FieldInfo,\nThe collection contains a Primary-key.\nIf the checkPrimaryKeyExists is true, the existence of a primary-key will be checked.\nNeeded when dealing with for example a insert-statement. The ArgumentParameterCollection need the primary-key\nto be able to insert the data in a unique row in the database.\n"
  syntax:
    content: public bool ValidateFieldInfoCollection(bool checkPrimaryKeyExists)
    parameters:
    - id: checkPrimaryKeyExists
      type: System.Boolean
      description: True, we check the collection for the existence of a primary-key. False, we skip this test.
    return:
      type: System.Boolean
      description: "\nTrue if the collection is validated correct. Will throw an SoIllegalOperationException if not.\n"
    content.vb: Public Function ValidateFieldInfoCollection(checkPrimaryKeyExists As Boolean) As Boolean
  overload: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  id: GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: GetIndexOfField(FieldInfo)
  nameWithType: FieldInfoCollection.GetIndexOfField(FieldInfo)
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet the index of a field.\n"
  remarks: "\nTries to resolve the field by using the following strategies in this order:\n<ul><li>Same instance of table and field.</li><li>Same table and field name or full field number.</li></ul>\nIt is important to distinguish two fields of the same type from each other if a table is joined\ntwice, like joining both street and postal address with contact.  Hence; it is important to have the\nsame instance of the TableInfo for both building up the query and receiving data from the result.\n"
  syntax:
    content: public int GetIndexOfField(FieldInfo fieldInfo)
    parameters:
    - id: fieldInfo
      type: SuperOffice.Data.SQL.FieldInfo
      description: The field info.
    return:
      type: System.Int32
      description: "\n0 based index of the field. -1 is returned if the field is not found.\n"
    content.vb: Public Function GetIndexOfField(fieldInfo As FieldInfo) As Integer
  overload: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  commentId: M:SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: FieldInfoCollection()
  nameWithType: FieldInfoCollection.FieldInfoCollection()
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FieldInfoCollection()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public FieldInfoCollection()
    content.vb: Public Sub New
  overload: SuperOffice.Data.SQL.FieldInfoCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  commentId: P:SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.Data.SQL.FieldInfoCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: FieldInfoCollection.Item[Int32]
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns the FieldInfo on a specific index.\n"
  syntax:
    content: public FieldInfo this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public ReadOnly Property Item(index As Integer) As FieldInfo
  overload: SuperOffice.Data.SQL.FieldInfoCollection.Item*
  nameWithType.vb: FieldInfoCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FieldInfo>
  nameWithType: IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: IEnumerable(Of FieldInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo)
  name.vb: IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<FieldInfoCollection, To>()
  nameWithType: EnumUtil.MapEnums<FieldInfoCollection, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of FieldInfoCollection, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)()
  name.vb: MapEnums(Of FieldInfoCollection, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<FieldInfoCollection, To>
    nameWithType: EnumUtil.MapEnums<FieldInfoCollection, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of FieldInfoCollection, To)
    nameWithType: EnumUtil.MapEnums(Of FieldInfoCollection, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.ForEach``1(System.Action{SuperOffice.Data.SQL.FieldInfo})
  commentId: M:IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  name: ForEach<FieldInfo>(Action<FieldInfo>)
  nameWithType: IEnumerableExtensions.ForEach<FieldInfo>(Action<FieldInfo>)
  fullName: IEnumerableExtensions.ForEach<SuperOffice.Data.SQL.FieldInfo>(System.Action<SuperOffice.Data.SQL.FieldInfo>)
  nameWithType.vb: IEnumerableExtensions.ForEach(Of FieldInfo)(Action(Of FieldInfo))
  fullName.vb: IEnumerableExtensions.ForEach(Of SuperOffice.Data.SQL.FieldInfo)(System.Action(Of SuperOffice.Data.SQL.FieldInfo))
  name.vb: ForEach(Of FieldInfo)(Action(Of FieldInfo))
  spec.csharp:
  - uid: IEnumerableExtensions.ForEach``1(System.Action{``0})
    name: ForEach<FieldInfo>
    nameWithType: IEnumerableExtensions.ForEach<FieldInfo>
    fullName: IEnumerableExtensions.ForEach<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.ForEach``1(System.Action{``0})
    name: ForEach(Of FieldInfo)
    nameWithType: IEnumerableExtensions.ForEach(Of FieldInfo)
    fullName: IEnumerableExtensions.ForEach(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo})
  commentId: M:IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: ContainsAny<FieldInfo>(IEnumerable<FieldInfo>)
  nameWithType: IEnumerableExtensions.ContainsAny<FieldInfo>(IEnumerable<FieldInfo>)
  fullName: IEnumerableExtensions.ContainsAny<SuperOffice.Data.SQL.FieldInfo>(System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>)
  nameWithType.vb: IEnumerableExtensions.ContainsAny(Of FieldInfo)(IEnumerable(Of FieldInfo))
  fullName.vb: IEnumerableExtensions.ContainsAny(Of SuperOffice.Data.SQL.FieldInfo)(System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo))
  name.vb: ContainsAny(Of FieldInfo)(IEnumerable(Of FieldInfo))
  spec.csharp:
  - uid: IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0})
    name: ContainsAny<FieldInfo>
    nameWithType: IEnumerableExtensions.ContainsAny<FieldInfo>
    fullName: IEnumerableExtensions.ContainsAny<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0})
    name: ContainsAny(Of FieldInfo)
    nameWithType: IEnumerableExtensions.ContainsAny(Of FieldInfo)
    fullName: IEnumerableExtensions.ContainsAny(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.Batch``1(System.Int32)
  commentId: M:IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: Batch<FieldInfo>(Int32)
  nameWithType: IEnumerableExtensions.Batch<FieldInfo>(Int32)
  fullName: IEnumerableExtensions.Batch<SuperOffice.Data.SQL.FieldInfo>(System.Int32)
  nameWithType.vb: IEnumerableExtensions.Batch(Of FieldInfo)(Int32)
  fullName.vb: IEnumerableExtensions.Batch(Of SuperOffice.Data.SQL.FieldInfo)(System.Int32)
  name.vb: Batch(Of FieldInfo)(Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.Batch``1(System.Int32)
    name: Batch<FieldInfo>
    nameWithType: IEnumerableExtensions.Batch<FieldInfo>
    fullName: IEnumerableExtensions.Batch<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.Batch``1(System.Int32)
    name: Batch(Of FieldInfo)
    nameWithType: IEnumerableExtensions.Batch(Of FieldInfo)
    fullName: IEnumerableExtensions.Batch(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.IndexOf``1(SuperOffice.Data.SQL.FieldInfo,System.Int32)
  commentId: M:IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)
  name: IndexOf<FieldInfo>(FieldInfo, Int32)
  nameWithType: IEnumerableExtensions.IndexOf<FieldInfo>(FieldInfo, Int32)
  fullName: IEnumerableExtensions.IndexOf<SuperOffice.Data.SQL.FieldInfo>(SuperOffice.Data.SQL.FieldInfo, System.Int32)
  nameWithType.vb: IEnumerableExtensions.IndexOf(Of FieldInfo)(FieldInfo, Int32)
  fullName.vb: IEnumerableExtensions.IndexOf(Of SuperOffice.Data.SQL.FieldInfo)(SuperOffice.Data.SQL.FieldInfo, System.Int32)
  name.vb: IndexOf(Of FieldInfo)(FieldInfo, Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.IndexOf``1(``0,System.Int32)
    name: IndexOf<FieldInfo>
    nameWithType: IEnumerableExtensions.IndexOf<FieldInfo>
    fullName: IEnumerableExtensions.IndexOf<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.IndexOf``1(``0,System.Int32)
    name: IndexOf(Of FieldInfo)
    nameWithType: IEnumerableExtensions.IndexOf(Of FieldInfo)
    fullName: IEnumerableExtensions.IndexOf(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.IndexOf``1(System.Func{SuperOffice.Data.SQL.FieldInfo,System.Boolean},System.Int32)
  commentId: M:IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)
  name: IndexOf<FieldInfo>(Func<FieldInfo, Boolean>, Int32)
  nameWithType: IEnumerableExtensions.IndexOf<FieldInfo>(Func<FieldInfo, Boolean>, Int32)
  fullName: IEnumerableExtensions.IndexOf<SuperOffice.Data.SQL.FieldInfo>(System.Func<SuperOffice.Data.SQL.FieldInfo, System.Boolean>, System.Int32)
  nameWithType.vb: IEnumerableExtensions.IndexOf(Of FieldInfo)(Func(Of FieldInfo, Boolean), Int32)
  fullName.vb: IEnumerableExtensions.IndexOf(Of SuperOffice.Data.SQL.FieldInfo)(System.Func(Of SuperOffice.Data.SQL.FieldInfo, System.Boolean), System.Int32)
  name.vb: IndexOf(Of FieldInfo)(Func(Of FieldInfo, Boolean), Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.IndexOf``1(System.Func{``0,System.Boolean},System.Int32)
    name: IndexOf<FieldInfo>
    nameWithType: IEnumerableExtensions.IndexOf<FieldInfo>
    fullName: IEnumerableExtensions.IndexOf<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.IndexOf``1(System.Func{``0,System.Boolean},System.Int32)
    name: IndexOf(Of FieldInfo)
    nameWithType: IEnumerableExtensions.IndexOf(Of FieldInfo)
    fullName: IEnumerableExtensions.IndexOf(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.Permute``1(System.Int32)
  commentId: M:IEnumerableExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: Permute<FieldInfo>(Int32)
  nameWithType: IEnumerableExtensions.Permute<FieldInfo>(Int32)
  fullName: IEnumerableExtensions.Permute<SuperOffice.Data.SQL.FieldInfo>(System.Int32)
  nameWithType.vb: IEnumerableExtensions.Permute(Of FieldInfo)(Int32)
  fullName.vb: IEnumerableExtensions.Permute(Of SuperOffice.Data.SQL.FieldInfo)(System.Int32)
  name.vb: Permute(Of FieldInfo)(Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.Permute``1(System.Int32)
    name: Permute<FieldInfo>
    nameWithType: IEnumerableExtensions.Permute<FieldInfo>
    fullName: IEnumerableExtensions.Permute<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.Permute``1(System.Int32)
    name: Permute(Of FieldInfo)
    nameWithType: IEnumerableExtensions.Permute(Of FieldInfo)
    fullName: IEnumerableExtensions.Permute(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.PermissiveToDictionary``3(System.Func{SuperOffice.Data.SQL.FieldInfo,{K}},System.Func{SuperOffice.Data.SQL.FieldInfo,{V}})
  commentId: M:IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  name: PermissiveToDictionary<FieldInfo, K, V>(Func<FieldInfo, K>, Func<FieldInfo, V>)
  nameWithType: IEnumerableExtensions.PermissiveToDictionary<FieldInfo, K, V>(Func<FieldInfo, K>, Func<FieldInfo, V>)
  fullName: IEnumerableExtensions.PermissiveToDictionary<SuperOffice.Data.SQL.FieldInfo, K, V>(System.Func<SuperOffice.Data.SQL.FieldInfo, K>, System.Func<SuperOffice.Data.SQL.FieldInfo, V>)
  nameWithType.vb: IEnumerableExtensions.PermissiveToDictionary(Of FieldInfo, K, V)(Func(Of FieldInfo, K), Func(Of FieldInfo, V))
  fullName.vb: IEnumerableExtensions.PermissiveToDictionary(Of SuperOffice.Data.SQL.FieldInfo, K, V)(System.Func(Of SuperOffice.Data.SQL.FieldInfo, K), System.Func(Of SuperOffice.Data.SQL.FieldInfo, V))
  name.vb: PermissiveToDictionary(Of FieldInfo, K, V)(Func(Of FieldInfo, K), Func(Of FieldInfo, V))
  spec.csharp:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Func{``0,``1},System.Func{``0,``2})
    name: PermissiveToDictionary<FieldInfo, K, V>
    nameWithType: IEnumerableExtensions.PermissiveToDictionary<FieldInfo, K, V>
    fullName: IEnumerableExtensions.PermissiveToDictionary<SuperOffice.Data.SQL.FieldInfo, K, V>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Func{``0,``1},System.Func{``0,``2})
    name: PermissiveToDictionary(Of FieldInfo, K, V)
    nameWithType: IEnumerableExtensions.PermissiveToDictionary(Of FieldInfo, K, V)
    fullName: IEnumerableExtensions.PermissiveToDictionary(Of SuperOffice.Data.SQL.FieldInfo, K, V)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.PermissiveToDictionary``3(System.Func{SuperOffice.Data.SQL.FieldInfo,{K}},System.Func{SuperOffice.Data.SQL.FieldInfo,{V}},System.Collections.Generic.IEqualityComparer{{K}})
  commentId: M:IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  name: PermissiveToDictionary<FieldInfo, K, V>(Func<FieldInfo, K>, Func<FieldInfo, V>, IEqualityComparer<K>)
  nameWithType: IEnumerableExtensions.PermissiveToDictionary<FieldInfo, K, V>(Func<FieldInfo, K>, Func<FieldInfo, V>, IEqualityComparer<K>)
  fullName: IEnumerableExtensions.PermissiveToDictionary<SuperOffice.Data.SQL.FieldInfo, K, V>(System.Func<SuperOffice.Data.SQL.FieldInfo, K>, System.Func<SuperOffice.Data.SQL.FieldInfo, V>, System.Collections.Generic.IEqualityComparer<K>)
  nameWithType.vb: IEnumerableExtensions.PermissiveToDictionary(Of FieldInfo, K, V)(Func(Of FieldInfo, K), Func(Of FieldInfo, V), IEqualityComparer(Of K))
  fullName.vb: IEnumerableExtensions.PermissiveToDictionary(Of SuperOffice.Data.SQL.FieldInfo, K, V)(System.Func(Of SuperOffice.Data.SQL.FieldInfo, K), System.Func(Of SuperOffice.Data.SQL.FieldInfo, V), System.Collections.Generic.IEqualityComparer(Of K))
  name.vb: PermissiveToDictionary(Of FieldInfo, K, V)(Func(Of FieldInfo, K), Func(Of FieldInfo, V), IEqualityComparer(Of K))
  spec.csharp:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: PermissiveToDictionary<FieldInfo, K, V>
    nameWithType: IEnumerableExtensions.PermissiveToDictionary<FieldInfo, K, V>
    fullName: IEnumerableExtensions.PermissiveToDictionary<SuperOffice.Data.SQL.FieldInfo, K, V>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: PermissiveToDictionary(Of FieldInfo, K, V)
    nameWithType: IEnumerableExtensions.PermissiveToDictionary(Of FieldInfo, K, V)
    fullName: IEnumerableExtensions.PermissiveToDictionary(Of SuperOffice.Data.SQL.FieldInfo, K, V)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.IEnumerableExtensions.GetDifferentCombinations``1(System.Int32)
  commentId: M:IEnumerableExtensions.GetDifferentCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: IEnumerableExtensions
  definition: IEnumerableExtensions.GetDifferentCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: GetDifferentCombinations<FieldInfo>(Int32)
  nameWithType: IEnumerableExtensions.GetDifferentCombinations<FieldInfo>(Int32)
  fullName: IEnumerableExtensions.GetDifferentCombinations<SuperOffice.Data.SQL.FieldInfo>(System.Int32)
  nameWithType.vb: IEnumerableExtensions.GetDifferentCombinations(Of FieldInfo)(Int32)
  fullName.vb: IEnumerableExtensions.GetDifferentCombinations(Of SuperOffice.Data.SQL.FieldInfo)(System.Int32)
  name.vb: GetDifferentCombinations(Of FieldInfo)(Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.GetDifferentCombinations``1(System.Int32)
    name: GetDifferentCombinations<FieldInfo>
    nameWithType: IEnumerableExtensions.GetDifferentCombinations<FieldInfo>
    fullName: IEnumerableExtensions.GetDifferentCombinations<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.GetDifferentCombinations``1(System.Int32)
    name: GetDifferentCombinations(Of FieldInfo)
    nameWithType: IEnumerableExtensions.GetDifferentCombinations(Of FieldInfo)
    fullName: IEnumerableExtensions.GetDifferentCombinations(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.SuperOffice.Util.CollectionOps.AtLeastOne``1
  commentId: M:SuperOffice.Util.CollectionOps.AtLeastOne``1(System.Collections.Generic.IEnumerable{``0})
  parent: SuperOffice.Util.CollectionOps
  definition: SuperOffice.Util.CollectionOps.AtLeastOne``1(System.Collections.Generic.IEnumerable{``0})
  name: AtLeastOne<FieldInfo>()
  nameWithType: CollectionOps.AtLeastOne<FieldInfo>()
  fullName: SuperOffice.Util.CollectionOps.AtLeastOne<SuperOffice.Data.SQL.FieldInfo>()
  nameWithType.vb: CollectionOps.AtLeastOne(Of FieldInfo)()
  fullName.vb: SuperOffice.Util.CollectionOps.AtLeastOne(Of SuperOffice.Data.SQL.FieldInfo)()
  name.vb: AtLeastOne(Of FieldInfo)()
  spec.csharp:
  - uid: SuperOffice.Util.CollectionOps.AtLeastOne``1
    name: AtLeastOne<FieldInfo>
    nameWithType: CollectionOps.AtLeastOne<FieldInfo>
    fullName: SuperOffice.Util.CollectionOps.AtLeastOne<SuperOffice.Data.SQL.FieldInfo>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.CollectionOps.AtLeastOne``1
    name: AtLeastOne(Of FieldInfo)
    nameWithType: CollectionOps.AtLeastOne(Of FieldInfo)
    fullName: SuperOffice.Util.CollectionOps.AtLeastOne(Of SuperOffice.Data.SQL.FieldInfo)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<FieldInfoCollection>(FieldInfoCollection)
  nameWithType: ObjectExtensions.AssignByReflection<FieldInfoCollection>(FieldInfoCollection)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.FieldInfoCollection>(SuperOffice.Data.SQL.FieldInfoCollection)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of FieldInfoCollection)(FieldInfoCollection)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.FieldInfoCollection)(SuperOffice.Data.SQL.FieldInfoCollection)
  name.vb: AssignByReflection(Of FieldInfoCollection)(FieldInfoCollection)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<FieldInfoCollection>
    nameWithType: ObjectExtensions.AssignByReflection<FieldInfoCollection>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.FieldInfoCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfoCollection
    name: FieldInfoCollection
    nameWithType: FieldInfoCollection
    fullName: SuperOffice.Data.SQL.FieldInfoCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of FieldInfoCollection)
    nameWithType: ObjectExtensions.AssignByReflection(Of FieldInfoCollection)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.FieldInfoCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfoCollection
    name: FieldInfoCollection
    nameWithType: FieldInfoCollection
    fullName: SuperOffice.Data.SQL.FieldInfoCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<FieldInfoCollection>()
  nameWithType: ObjectExtensions.GraphCopy<FieldInfoCollection>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.FieldInfoCollection>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of FieldInfoCollection)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.FieldInfoCollection)()
  name.vb: GraphCopy(Of FieldInfoCollection)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<FieldInfoCollection>
    nameWithType: ObjectExtensions.GraphCopy<FieldInfoCollection>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.FieldInfoCollection>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of FieldInfoCollection)
    nameWithType: ObjectExtensions.GraphCopy(Of FieldInfoCollection)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.FieldInfoCollection)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<FieldInfoCollection, To>()
  nameWithType: Converters.MapEnums<FieldInfoCollection, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>()
  nameWithType.vb: Converters.MapEnums(Of FieldInfoCollection, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)()
  name.vb: MapEnums(Of FieldInfoCollection, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<FieldInfoCollection, To>
    nameWithType: Converters.MapEnums<FieldInfoCollection, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.FieldInfoCollection, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of FieldInfoCollection, To)
    nameWithType: Converters.MapEnums(Of FieldInfoCollection, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.FieldInfoCollection, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T>)
  nameWithType: IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>)
  fullName: IEnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  nameWithType.vb: IEnumerableExtensions.ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  fullName.vb: IEnumerableExtensions.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  spec.csharp:
  - uid: IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach<T>
    nameWithType: IEnumerableExtensions.ForEach<T>
    fullName: IEnumerableExtensions.ForEach<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach(Of T)
    nameWithType: IEnumerableExtensions.ForEach(Of T)
    fullName: IEnumerableExtensions.ForEach(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions
  commentId: T:IEnumerableExtensions
  isExternal: true
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: IEnumerableExtensions
- uid: IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: ContainsAny<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: IEnumerableExtensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: IEnumerableExtensions.ContainsAny<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IEnumerableExtensions.ContainsAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: IEnumerableExtensions.ContainsAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: ContainsAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: ContainsAny<T>
    nameWithType: IEnumerableExtensions.ContainsAny<T>
    fullName: IEnumerableExtensions.ContainsAny<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: ContainsAny(Of T)
    nameWithType: IEnumerableExtensions.ContainsAny(Of T)
    fullName: IEnumerableExtensions.ContainsAny(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: Batch<T>(IEnumerable<T>, Int32)
  nameWithType: IEnumerableExtensions.Batch<T>(IEnumerable<T>, Int32)
  fullName: IEnumerableExtensions.Batch<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: IEnumerableExtensions.Batch(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: IEnumerableExtensions.Batch(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: Batch(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Batch<T>
    nameWithType: IEnumerableExtensions.Batch<T>
    fullName: IEnumerableExtensions.Batch<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Batch(Of T)
    nameWithType: IEnumerableExtensions.Batch(Of T)
    fullName: IEnumerableExtensions.Batch(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)
  commentId: M:IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)
  isExternal: true
  name: IndexOf<T>(IEnumerable<T>, T, Int32)
  nameWithType: IEnumerableExtensions.IndexOf<T>(IEnumerable<T>, T, Int32)
  fullName: IEnumerableExtensions.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, T, System.Int32)
  nameWithType.vb: IEnumerableExtensions.IndexOf(Of T)(IEnumerable(Of T), T, Int32)
  fullName.vb: IEnumerableExtensions.IndexOf(Of T)(System.Collections.Generic.IEnumerable(Of T), T, System.Int32)
  name.vb: IndexOf(Of T)(IEnumerable(Of T), T, Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)
    name: IndexOf<T>
    nameWithType: IEnumerableExtensions.IndexOf<T>
    fullName: IEnumerableExtensions.IndexOf<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)
    name: IndexOf(Of T)
    nameWithType: IEnumerableExtensions.IndexOf(Of T)
    fullName: IEnumerableExtensions.IndexOf(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)
  commentId: M:IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)
  isExternal: true
  name: IndexOf<T>(IEnumerable<T>, Func<T, Boolean>, Int32)
  nameWithType: IEnumerableExtensions.IndexOf<T>(IEnumerable<T>, Func<T, Boolean>, Int32)
  fullName: IEnumerableExtensions.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Int32)
  nameWithType.vb: IEnumerableExtensions.IndexOf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Int32)
  fullName.vb: IEnumerableExtensions.IndexOf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Int32)
  name.vb: IndexOf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)
    name: IndexOf<T>
    nameWithType: IEnumerableExtensions.IndexOf<T>
    fullName: IEnumerableExtensions.IndexOf<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)
    name: IndexOf(Of T)
    nameWithType: IEnumerableExtensions.IndexOf(Of T)
    fullName: IEnumerableExtensions.IndexOf(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:IEnumerableExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: Permute<T>(IEnumerable<T>, Int32)
  nameWithType: IEnumerableExtensions.Permute<T>(IEnumerable<T>, Int32)
  fullName: IEnumerableExtensions.Permute<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: IEnumerableExtensions.Permute(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: IEnumerableExtensions.Permute(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: Permute(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Permute<T>
    nameWithType: IEnumerableExtensions.Permute<T>
    fullName: IEnumerableExtensions.Permute<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Permute(Of T)
    nameWithType: IEnumerableExtensions.Permute(Of T)
    fullName: IEnumerableExtensions.Permute(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: PermissiveToDictionary<T, K, V>(IEnumerable<T>, Func<T, K>, Func<T, V>)
  nameWithType: IEnumerableExtensions.PermissiveToDictionary<T, K, V>(IEnumerable<T>, Func<T, K>, Func<T, V>)
  fullName: IEnumerableExtensions.PermissiveToDictionary<T, K, V>(System.Collections.Generic.IEnumerable<T>, System.Func<T, K>, System.Func<T, V>)
  nameWithType.vb: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)(IEnumerable(Of T), Func(Of T, K), Func(Of T, V))
  fullName.vb: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, K), System.Func(Of T, V))
  name.vb: PermissiveToDictionary(Of T, K, V)(IEnumerable(Of T), Func(Of T, K), Func(Of T, V))
  spec.csharp:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: PermissiveToDictionary<T, K, V>
    nameWithType: IEnumerableExtensions.PermissiveToDictionary<T, K, V>
    fullName: IEnumerableExtensions.PermissiveToDictionary<T, K, V>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: PermissiveToDictionary(Of T, K, V)
    nameWithType: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)
    fullName: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: PermissiveToDictionary<T, K, V>(IEnumerable<T>, Func<T, K>, Func<T, V>, IEqualityComparer<K>)
  nameWithType: IEnumerableExtensions.PermissiveToDictionary<T, K, V>(IEnumerable<T>, Func<T, K>, Func<T, V>, IEqualityComparer<K>)
  fullName: IEnumerableExtensions.PermissiveToDictionary<T, K, V>(System.Collections.Generic.IEnumerable<T>, System.Func<T, K>, System.Func<T, V>, System.Collections.Generic.IEqualityComparer<K>)
  nameWithType.vb: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)(IEnumerable(Of T), Func(Of T, K), Func(Of T, V), IEqualityComparer(Of K))
  fullName.vb: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, K), System.Func(Of T, V), System.Collections.Generic.IEqualityComparer(Of K))
  name.vb: PermissiveToDictionary(Of T, K, V)(IEnumerable(Of T), Func(Of T, K), Func(Of T, V), IEqualityComparer(Of K))
  spec.csharp:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: PermissiveToDictionary<T, K, V>
    nameWithType: IEnumerableExtensions.PermissiveToDictionary<T, K, V>
    fullName: IEnumerableExtensions.PermissiveToDictionary<T, K, V>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.PermissiveToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: PermissiveToDictionary(Of T, K, V)
    nameWithType: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)
    fullName: IEnumerableExtensions.PermissiveToDictionary(Of T, K, V)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExtensions.GetDifferentCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:IEnumerableExtensions.GetDifferentCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: GetDifferentCombinations<T>(IEnumerable<T>, Int32)
  nameWithType: IEnumerableExtensions.GetDifferentCombinations<T>(IEnumerable<T>, Int32)
  fullName: IEnumerableExtensions.GetDifferentCombinations<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: IEnumerableExtensions.GetDifferentCombinations(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: IEnumerableExtensions.GetDifferentCombinations(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: GetDifferentCombinations(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: IEnumerableExtensions.GetDifferentCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: GetDifferentCombinations<T>
    nameWithType: IEnumerableExtensions.GetDifferentCombinations<T>
    fullName: IEnumerableExtensions.GetDifferentCombinations<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IEnumerableExtensions.GetDifferentCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: GetDifferentCombinations(Of T)
    nameWithType: IEnumerableExtensions.GetDifferentCombinations(Of T)
    fullName: IEnumerableExtensions.GetDifferentCombinations(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.CollectionOps.AtLeastOne``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:SuperOffice.Util.CollectionOps.AtLeastOne``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: AtLeastOne<T>(IEnumerable<T>)
  nameWithType: CollectionOps.AtLeastOne<T>(IEnumerable<T>)
  fullName: SuperOffice.Util.CollectionOps.AtLeastOne<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: CollectionOps.AtLeastOne(Of T)(IEnumerable(Of T))
  fullName.vb: SuperOffice.Util.CollectionOps.AtLeastOne(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AtLeastOne(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: SuperOffice.Util.CollectionOps.AtLeastOne``1(System.Collections.Generic.IEnumerable{``0})
    name: AtLeastOne<T>
    nameWithType: CollectionOps.AtLeastOne<T>
    fullName: SuperOffice.Util.CollectionOps.AtLeastOne<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.CollectionOps.AtLeastOne``1(System.Collections.Generic.IEnumerable{``0})
    name: AtLeastOne(Of T)
    nameWithType: CollectionOps.AtLeastOne(Of T)
    fullName: SuperOffice.Util.CollectionOps.AtLeastOne(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.CollectionOps
  commentId: T:SuperOffice.Util.CollectionOps
  parent: SuperOffice.Util
  isExternal: true
  name: CollectionOps
  nameWithType: CollectionOps
  fullName: SuperOffice.Util.CollectionOps
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Contains*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.Contains
  isExternal: true
  name: Contains
  nameWithType: FieldInfoCollection.Contains
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Contains
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: FieldInfoCollection.GetEnumerator
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SuperOffice.Data.SQL.FieldInfoCollection.System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.System#Collections#Generic#IEnumerable{SuperOffice#Data#SQL#FieldInfo}#GetEnumerator
  isExternal: true
  name: IEnumerable<FieldInfo>.GetEnumerator
  nameWithType: FieldInfoCollection.IEnumerable<FieldInfo>.GetEnumerator
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator
  nameWithType.vb: FieldInfoCollection.System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{SuperOffice.Data.SQL.FieldInfo}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<FieldInfo>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of FieldInfo).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<FieldInfo>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.SQL.FieldInfo>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of FieldInfo).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.SQL.FieldInfo).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{SuperOffice.Data.SQL.FieldInfo}
  commentId: T:System.Collections.Generic.IEnumerator{SuperOffice.Data.SQL.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<FieldInfo>
  nameWithType: IEnumerator<FieldInfo>
  fullName: System.Collections.Generic.IEnumerator<SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: IEnumerator(Of FieldInfo)
  fullName.vb: System.Collections.Generic.IEnumerator(Of SuperOffice.Data.SQL.FieldInfo)
  name.vb: IEnumerator(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Add*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.Add
  isExternal: true
  name: Add
  nameWithType: FieldInfoCollection.Add
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Add
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.FieldInfoCollection
  commentId: T:SuperOffice.Data.SQL.FieldInfoCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfo[]
  isExternal: true
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: SuperOffice.Data.SQL.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullName.vb: SuperOffice.Data.SQL.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
  isExternal: true
  name: GetNumberOfItems
  nameWithType: FieldInfoCollection.GetNumberOfItems
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetNumberOfItems
- uid: SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.op_Implicit
  isExternal: true
  name: Implicit
  nameWithType: FieldInfoCollection.Implicit
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Implicit
  nameWithType.vb: FieldInfoCollection.Widening
  fullName.vb: SuperOffice.Data.SQL.FieldInfoCollection.Widening
  name.vb: Widening
- uid: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray
  isExternal: true
  name: FromFieldInfoArray
  nameWithType: FieldInfoCollection.FromFieldInfoArray
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FromFieldInfoArray
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection
  isExternal: true
  name: GetPrimaryKeyInFieldInfoCollection
  nameWithType: FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetPrimaryKeyInFieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
  isExternal: true
  name: PrimaryKeyExist
  nameWithType: FieldInfoCollection.PrimaryKeyExist
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.PrimaryKeyExist
- uid: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection
  isExternal: true
  name: ValidateFieldInfoCollection
  nameWithType: FieldInfoCollection.ValidateFieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.ValidateFieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField
  isExternal: true
  name: GetIndexOfField
  nameWithType: FieldInfoCollection.GetIndexOfField
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.GetIndexOfField
- uid: SuperOffice.Data.SQL.FieldInfoCollection.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.#ctor
  isExternal: true
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection.FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.FieldInfoCollection
- uid: SuperOffice.Data.SQL.FieldInfoCollection.Item*
  commentId: Overload:SuperOffice.Data.SQL.FieldInfoCollection.Item
  isExternal: true
  name: Item
  nameWithType: FieldInfoCollection.Item
  fullName: SuperOffice.Data.SQL.FieldInfoCollection.Item
