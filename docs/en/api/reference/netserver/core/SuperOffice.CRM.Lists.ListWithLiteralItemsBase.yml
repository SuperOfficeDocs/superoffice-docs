### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  commentId: T:SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  id: ListWithLiteralItemsBase
  parent: SuperOffice.CRM.Lists
  children:
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.#ctor
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem})
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo(System.String)
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName(System.String)
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem(SuperOffice.CRM.Lists.ISoListItem)
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem(SuperOffice.CRM.Lists.ISoListItem)
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems
  langs:
  - csharp
  - vb
  name: ListWithLiteralItemsBase
  nameWithType: ListWithLiteralItemsBase
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nBase class for MDO lists that are based on an existing list, but need to add leading or trailing\nroot items. This is typical for lists like the probability in the search dialog, amount class for SAINT\ncriteria, etc.\n<p></p>The template method pattern is used; override the virtual methods you need to do your stuff.\nMethods you do not override will revert to their empty base implementation.\n"
  syntax:
    content: 'public abstract class ListWithLiteralItemsBase : ISoListProvider, ISoList, IPlugin'
    content.vb: >-
      Public MustInherit Class ListWithLiteralItemsBase
          Implements ISoListProvider, ISoList, IPlugin
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.ArchiveLists.SaintAmountClassProvider
  - SuperOffice.CRM.ArchiveLists.SaintIntentionProvider
  - SuperOffice.CRM.Lists.SaleProbability
  - SuperOffice.CRM.Lists.SaleSource
  - SuperOffice.CRM.Lists.UserGroupWithHistoryAllProvider
  implements:
  - SuperOffice.CRM.Lists.ISoListProvider
  - SuperOffice.CRM.Lists.ISoList
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Lists.ListWithLiteralItemsBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  id: GetLeadingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: GetLeadingRootItems(List<ISoListItem>)
  nameWithType: ListWithLiteralItemsBase.GetLeadingRootItems(List<ISoListItem>)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems(System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSubclass contract: Override this method to provide leading root items. Add your items\nto the list that is passed in. If you do not need to add leading items, do not override\nthis method.\n"
  syntax:
    content: protected virtual void GetLeadingRootItems(List<ISoListItem> leadingItems)
    parameters:
    - id: leadingItems
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
      description: List to add leading items to
    content.vb: Protected Overridable Sub GetLeadingRootItems(leadingItems As List(Of ISoListItem))
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems*
  nameWithType.vb: ListWithLiteralItemsBase.GetLeadingRootItems(List(Of ISoListItem))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems(System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem))
  name.vb: GetLeadingRootItems(List(Of ISoListItem))
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  id: GetTrailingRootItems(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: GetTrailingRootItems(List<ISoListItem>)
  nameWithType: ListWithLiteralItemsBase.GetTrailingRootItems(List<ISoListItem>)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems(System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSubclass contract: Override this method to provide trailing root items. Add your items\nto the list that is passed in. If you do not need to add trailing items, do not override\nthis method.\n"
  syntax:
    content: protected virtual void GetTrailingRootItems(List<ISoListItem> trailingItems)
    parameters:
    - id: trailingItems
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
      description: List to add trailing items to
    content.vb: Protected Overridable Sub GetTrailingRootItems(trailingItems As List(Of ISoListItem))
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems*
  nameWithType.vb: ListWithLiteralItemsBase.GetTrailingRootItems(List(Of ISoListItem))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems(System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem))
  name.vb: GetTrailingRootItems(List(Of ISoListItem))
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem(SuperOffice.CRM.Lists.ISoListItem)
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem(SuperOffice.CRM.Lists.ISoListItem)
  id: ProcessItem(SuperOffice.CRM.Lists.ISoListItem)
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: ProcessItem(ISoListItem)
  nameWithType: ListWithLiteralItemsBase.ProcessItem(ISoListItem)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem(SuperOffice.CRM.Lists.ISoListItem)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSubclass contract: Override this method to manipulate each root item (after\nleading and trailing items have been added). This method will be called once for\neach non-history item. If you do not need to manipulate items, do not override this method.\n<p></p>Note - items are not re-sorted, so chaning the rank may not have any effect.\n"
  syntax:
    content: protected virtual void ProcessItem(ISoListItem item)
    parameters:
    - id: item
      type: SuperOffice.CRM.Lists.ISoListItem
      description: Item, to be updated as you see fit
    content.vb: Protected Overridable Sub ProcessItem(item As ISoListItem)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem(SuperOffice.CRM.Lists.ISoListItem)
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem(SuperOffice.CRM.Lists.ISoListItem)
  id: ProcessHistoryItem(SuperOffice.CRM.Lists.ISoListItem)
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: ProcessHistoryItem(ISoListItem)
  nameWithType: ListWithLiteralItemsBase.ProcessHistoryItem(ISoListItem)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem(SuperOffice.CRM.Lists.ISoListItem)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSubclass contract: Override this method to manipulate each history item. This method will be called once for\neach history item. If you do not need to manipulate items, do not override this method.\n<p></p>Note - items are not re-sorted, so chaning the rank may not have any effect.\n"
  syntax:
    content: protected virtual void ProcessHistoryItem(ISoListItem item)
    parameters:
    - id: item
      type: SuperOffice.CRM.Lists.ISoListItem
      description: Item, to be updated as you see fit
    content.vb: Protected Overridable Sub ProcessHistoryItem(item As ISoListItem)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName(System.String)
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName(System.String)
  id: GetInnerListProviderName(System.String)
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: GetInnerListProviderName(String)
  nameWithType: ListWithLiteralItemsBase.GetInnerListProviderName(String)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSubclass contract: Return the name of the desired inner provider; this will be passed to the <xref href=\"SuperOffice.CRM.Lists.SoListProviderFactory\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: protected abstract string GetInnerListProviderName(string outerListname)
    parameters:
    - id: outerListname
      type: System.String
      description: List name from the client code, useful if one class is to extend more than one list
    return:
      type: System.String
    content.vb: Protected MustOverride Function GetInnerListProviderName(outerListname As String) As String
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo(System.String)
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo(System.String)
  id: GetInnerListAdditionalInfo(System.String)
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: GetInnerListAdditionalInfo(String)
  nameWithType: ListWithLiteralItemsBase.GetInnerListAdditionalInfo(String)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  syntax:
    content: protected virtual string GetInnerListAdditionalInfo(string additionalInfo)
    parameters:
    - id: additionalInfo
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function GetInnerListAdditionalInfo(additionalInfo As String) As String
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  id: Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: Construct(String, String, Int32[], Boolean, String, Boolean)
  nameWithType: ListWithLiteralItemsBase.Construct(String, String, Int32[], Boolean, String, Boolean)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct(System.String, System.String, System.Int32[], System.Boolean, System.String, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nConstruct the list, by using the derived class&apos; <see cref=\"!:InnerListProviderName\"></see> property to call the <xref href=\"SuperOffice.CRM.Lists.SoListProviderFactory\" data-throw-if-not-resolved=\"false\"></xref>.\nThe various virtual methods are called, and the final list constructed.\n"
  syntax:
    content: public void Construct(string listName, string additionalInfo, int[] historyIDs, bool onlyReadHistory, string searchValue, bool forceFlatList)
    parameters:
    - id: listName
      type: System.String
      description: Name of the desired list, passed to the derived class
    - id: additionalInfo
      type: System.String
    - id: historyIDs
      type: System.Int32[]
      description: List of history id&apos;s (primary keys of the table holding the MDO list values).
    - id: onlyReadHistory
      type: System.Boolean
      description: Only read history nodes.
    - id: searchValue
      type: System.String
      description: Search value (case insensetive string used like &apos;[searchValue]%&apos;.  The result when using this is allways a flat list without hisotry elements.
    - id: forceFlatList
      type: System.Boolean
      description: State that a forced flat list should be returned.
    content.vb: Public Sub Construct(listName As String, additionalInfo As String, historyIDs As Integer(), onlyReadHistory As Boolean, searchValue As String, forceFlatList As Boolean)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct*
  implements:
  - SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  nameWithType.vb: ListWithLiteralItemsBase.Construct(String, String, Int32(), Boolean, String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct(System.String, System.String, System.Int32(), System.Boolean, System.String, System.Boolean)
  name.vb: Construct(String, String, Int32(), Boolean, String, Boolean)
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem})
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem})
  id: FilterBySearchValue(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem})
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: FilterBySearchValue(IEnumerable<ISoListItem>)
  nameWithType: ListWithLiteralItemsBase.FilterBySearchValue(IEnumerable<ISoListItem>)
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue(System.Collections.Generic.IEnumerable<SuperOffice.CRM.Lists.ISoListItem>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\n\n"
  syntax:
    content: public IEnumerable<ISoListItem> FilterBySearchValue(IEnumerable<ISoListItem> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem}
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem}
    content.vb: Public Function FilterBySearchValue(items As IEnumerable(Of ISoListItem)) As IEnumerable(Of ISoListItem)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue*
  nameWithType.vb: ListWithLiteralItemsBase.FilterBySearchValue(IEnumerable(Of ISoListItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue(System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Lists.ISoListItem))
  name.vb: FilterBySearchValue(IEnumerable(Of ISoListItem))
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.#ctor
  commentId: M:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: ListWithLiteralItemsBase()
  nameWithType: ListWithLiteralItemsBase.ListWithLiteralItemsBase()
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ListWithLiteralItemsBase()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  syntax:
    content: protected ListWithLiteralItemsBase()
    content.vb: Protected Sub New
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList
  commentId: P:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList
  id: InnerList
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: InnerList
  nameWithType: ListWithLiteralItemsBase.InnerList
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nMainTableName to give access to the inner list, ie., the provider of the inner MDO list you wish to extend\n"
  syntax:
    content: protected ISoListProvider InnerList { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Lists.ISoListProvider
    content.vb: Protected ReadOnly Property InnerList As ISoListProvider
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems
  commentId: P:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems
  id: AllItems
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: AllItems
  nameWithType: ListWithLiteralItemsBase.AllItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nUtility enumerator, runs over all non-history items\n"
  syntax:
    content: public IEnumerable<ISoListItem> AllItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem}
    content.vb: Public ReadOnly Property AllItems As IEnumerable(Of ISoListItem)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo
  commentId: P:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo
  id: HistoryInfo
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: HistoryInfo
  nameWithType: ListWithLiteralItemsBase.HistoryInfo
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nHistory information, returns null\n"
  syntax:
    content: public HistoryInfo HistoryInfo { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Lists.HistoryInfo
    content.vb: Public ReadOnly Property HistoryInfo As HistoryInfo
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo*
  implements:
  - SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems
  commentId: P:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems
  id: HistoryItems
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: HistoryItems
  nameWithType: ListWithLiteralItemsBase.HistoryItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nReturn history items, empty if this is a flat list or a search\n"
  syntax:
    content: public List<ISoListItem> HistoryItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
    content.vb: Public ReadOnly Property HistoryItems As List(Of ISoListItem)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems*
  implements:
  - SuperOffice.CRM.Lists.ISoList.HistoryItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems
  commentId: P:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems
  id: RootItems
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: RootItems
  nameWithType: ListWithLiteralItemsBase.RootItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nReturn root items, all items in case of a flat list or search\n"
  syntax:
    content: public List<ISoListItem> RootItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
    content.vb: Public ReadOnly Property RootItems As List(Of ISoListItem)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems*
  implements:
  - SuperOffice.CRM.Lists.ISoList.RootItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems
  commentId: P:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems
  id: HeadingItems
  parent: SuperOffice.CRM.Lists.ListWithLiteralItemsBase
  langs:
  - csharp
  - vb
  name: HeadingItems
  nameWithType: ListWithLiteralItemsBase.HeadingItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nReturn headings and underlying items, empty if this is a flat list or a search\n"
  syntax:
    content: public List<ISoListHeading> HeadingItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListHeading}
    content.vb: Public ReadOnly Property HeadingItems As List(Of ISoListHeading)
  overload: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems*
  implements:
  - SuperOffice.CRM.Lists.ISoList.HeadingItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.Lists
  commentId: N:SuperOffice.CRM.Lists
  isExternal: true
  name: SuperOffice.CRM.Lists
  nameWithType: SuperOffice.CRM.Lists
  fullName: SuperOffice.CRM.Lists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Lists.ISoListProvider
  commentId: T:SuperOffice.CRM.Lists.ISoListProvider
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: ISoListProvider
  nameWithType: ISoListProvider
  fullName: SuperOffice.CRM.Lists.ISoListProvider
- uid: SuperOffice.CRM.Lists.ISoList
  commentId: T:SuperOffice.CRM.Lists.ISoList
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: ISoList
  nameWithType: ISoList
  fullName: SuperOffice.CRM.Lists.ISoList
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ListWithLiteralItemsBase, To>()
  nameWithType: EnumUtil.MapEnums<ListWithLiteralItemsBase, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ListWithLiteralItemsBase, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To)()
  name.vb: MapEnums(Of ListWithLiteralItemsBase, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ListWithLiteralItemsBase, To>
    nameWithType: EnumUtil.MapEnums<ListWithLiteralItemsBase, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ListWithLiteralItemsBase, To)
    nameWithType: EnumUtil.MapEnums(Of ListWithLiteralItemsBase, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ListWithLiteralItemsBase, To>()
  nameWithType: Converters.MapEnums<ListWithLiteralItemsBase, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To>()
  nameWithType.vb: Converters.MapEnums(Of ListWithLiteralItemsBase, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To)()
  name.vb: MapEnums(Of ListWithLiteralItemsBase, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ListWithLiteralItemsBase, To>
    nameWithType: Converters.MapEnums<ListWithLiteralItemsBase, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ListWithLiteralItemsBase, To)
    nameWithType: Converters.MapEnums(Of ListWithLiteralItemsBase, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Lists.ListWithLiteralItemsBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems
  isExternal: true
  name: GetLeadingRootItems
  nameWithType: ListWithLiteralItemsBase.GetLeadingRootItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetLeadingRootItems
- uid: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISoListItem>
  nameWithType: List<ISoListItem>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>
  nameWithType.vb: List(Of ISoListItem)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem)
  name.vb: List(Of ISoListItem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems
  isExternal: true
  name: GetTrailingRootItems
  nameWithType: ListWithLiteralItemsBase.GetTrailingRootItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetTrailingRootItems
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem
  isExternal: true
  name: ProcessItem
  nameWithType: ListWithLiteralItemsBase.ProcessItem
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessItem
- uid: SuperOffice.CRM.Lists.ISoListItem
  commentId: T:SuperOffice.CRM.Lists.ISoListItem
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: ISoListItem
  nameWithType: ISoListItem
  fullName: SuperOffice.CRM.Lists.ISoListItem
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem
  isExternal: true
  name: ProcessHistoryItem
  nameWithType: ListWithLiteralItemsBase.ProcessHistoryItem
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ProcessHistoryItem
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName
  isExternal: true
  name: GetInnerListProviderName
  nameWithType: ListWithLiteralItemsBase.GetInnerListProviderName
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListProviderName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo
  isExternal: true
  name: GetInnerListAdditionalInfo
  nameWithType: ListWithLiteralItemsBase.GetInnerListAdditionalInfo
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.GetInnerListAdditionalInfo
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct
  isExternal: true
  name: Construct
  nameWithType: ListWithLiteralItemsBase.Construct
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.Construct
- uid: SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
  parent: SuperOffice.CRM.Lists.ISoListProvider
  isExternal: true
  name: Construct(String, String, Int32[], Boolean, String, Boolean)
  nameWithType: ISoListProvider.Construct(String, String, Int32[], Boolean, String, Boolean)
  fullName: SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String, System.String, System.Int32[], System.Boolean, System.String, System.Boolean)
  nameWithType.vb: ISoListProvider.Construct(String, String, Int32(), Boolean, String, Boolean)
  fullName.vb: SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String, System.String, System.Int32(), System.Boolean, System.String, System.Boolean)
  name.vb: Construct(String, String, Int32(), Boolean, String, Boolean)
  spec.csharp:
  - uid: SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
    name: Construct
    nameWithType: ISoListProvider.Construct
    fullName: SuperOffice.CRM.Lists.ISoListProvider.Construct
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Lists.ISoListProvider.Construct(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean)
    name: Construct
    nameWithType: ISoListProvider.Construct
    fullName: SuperOffice.CRM.Lists.ISoListProvider.Construct
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue
  isExternal: true
  name: FilterBySearchValue
  nameWithType: ListWithLiteralItemsBase.FilterBySearchValue
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.FilterBySearchValue
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Lists.ISoListItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISoListItem>
  nameWithType: IEnumerable<ISoListItem>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Lists.ISoListItem>
  nameWithType.vb: IEnumerable(Of ISoListItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Lists.ISoListItem)
  name.vb: IEnumerable(Of ISoListItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.#ctor*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.#ctor
  isExternal: true
  name: ListWithLiteralItemsBase
  nameWithType: ListWithLiteralItemsBase.ListWithLiteralItemsBase
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.ListWithLiteralItemsBase
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList
  isExternal: true
  name: InnerList
  nameWithType: ListWithLiteralItemsBase.InnerList
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.InnerList
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems
  isExternal: true
  name: AllItems
  nameWithType: ListWithLiteralItemsBase.AllItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.AllItems
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo
  isExternal: true
  name: HistoryInfo
  nameWithType: ListWithLiteralItemsBase.HistoryInfo
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryInfo
- uid: SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
  commentId: P:SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
  parent: SuperOffice.CRM.Lists.ISoListProvider
  isExternal: true
  name: HistoryInfo
  nameWithType: ISoListProvider.HistoryInfo
  fullName: SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
- uid: SuperOffice.CRM.Lists.HistoryInfo
  commentId: T:SuperOffice.CRM.Lists.HistoryInfo
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: HistoryInfo
  nameWithType: HistoryInfo
  fullName: SuperOffice.CRM.Lists.HistoryInfo
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems
  isExternal: true
  name: HistoryItems
  nameWithType: ListWithLiteralItemsBase.HistoryItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HistoryItems
- uid: SuperOffice.CRM.Lists.ISoList.HistoryItems
  commentId: P:SuperOffice.CRM.Lists.ISoList.HistoryItems
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: HistoryItems
  nameWithType: ISoList.HistoryItems
  fullName: SuperOffice.CRM.Lists.ISoList.HistoryItems
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems
  isExternal: true
  name: RootItems
  nameWithType: ListWithLiteralItemsBase.RootItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.RootItems
- uid: SuperOffice.CRM.Lists.ISoList.RootItems
  commentId: P:SuperOffice.CRM.Lists.ISoList.RootItems
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: RootItems
  nameWithType: ISoList.RootItems
  fullName: SuperOffice.CRM.Lists.ISoList.RootItems
- uid: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems*
  commentId: Overload:SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems
  isExternal: true
  name: HeadingItems
  nameWithType: ListWithLiteralItemsBase.HeadingItems
  fullName: SuperOffice.CRM.Lists.ListWithLiteralItemsBase.HeadingItems
- uid: SuperOffice.CRM.Lists.ISoList.HeadingItems
  commentId: P:SuperOffice.CRM.Lists.ISoList.HeadingItems
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: HeadingItems
  nameWithType: ISoList.HeadingItems
  fullName: SuperOffice.CRM.Lists.ISoList.HeadingItems
- uid: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListHeading}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListHeading}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISoListHeading>
  nameWithType: List<ISoListHeading>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListHeading>
  nameWithType.vb: List(Of ISoListHeading)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListHeading)
  name.vb: List(Of ISoListHeading)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Lists.ISoListHeading
    name: ISoListHeading
    nameWithType: ISoListHeading
    fullName: SuperOffice.CRM.Lists.ISoListHeading
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Lists.ISoListHeading
    name: ISoListHeading
    nameWithType: ISoListHeading
    fullName: SuperOffice.CRM.Lists.ISoListHeading
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
