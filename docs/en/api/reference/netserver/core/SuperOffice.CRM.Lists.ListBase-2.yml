### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Lists.ListBase`2
  commentId: T:SuperOffice.CRM.Lists.ListBase`2
  id: ListBase`2
  parent: SuperOffice.CRM.Lists
  children:
  - SuperOffice.CRM.Lists.ListBase`2.#ctor
  - SuperOffice.CRM.Lists.ListBase`2.Contains(`1)
  - SuperOffice.CRM.Lists.ListBase`2.CopyTo(`1[],System.Int32)
  - SuperOffice.CRM.Lists.ListBase`2.CopyTo(System.Array,System.Int32)
  - SuperOffice.CRM.Lists.ListBase`2.Count
  - SuperOffice.CRM.Lists.ListBase`2.GetEnumerator
  - SuperOffice.CRM.Lists.ListBase`2.IndexOf(`1)
  - SuperOffice.CRM.Lists.ListBase`2.IsFixedSize
  - SuperOffice.CRM.Lists.ListBase`2.IsReadOnly
  - SuperOffice.CRM.Lists.ListBase`2.Item(System.Int32)
  - SuperOffice.CRM.Lists.ListBase`2.ListCollection
  - SuperOffice.CRM.Lists.ListBase`2.OnLoadAsync(`0,SuperOffice.Data.SoDataReader,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ListBase<TListSelect, TListItem>
  nameWithType: ListBase<TListSelect, TListItem>
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nListbase is the base-class for the different list-classes. Among other, it contains the array \nthat keeps the lists elements.\n"
  syntax:
    content: 'public abstract class ListBase<TListSelect, TListItem> : Object, IEnumerable, IEnumerable<TListItem>, IList, ICollection, IList<TListItem>, ICollection<TListItem> where TListSelect : SqlCommand where TListItem : ListItemBase<TListSelect>'
    typeParameters:
    - id: TListSelect
    - id: TListItem
    content.vb: >-
      Public MustInherit Class ListBase(Of TListSelect As SqlCommand, TListItem As ListItemBase(Of TListSelect))
          Inherits Object
          Implements IEnumerable, IEnumerable(Of TListItem), IList, ICollection, IList(Of TListItem), ICollection(Of TListItem)
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Archives.ActivityList
  - SuperOffice.CRM.Archives.ContactList
  - SuperOffice.CRM.Archives.DocumentList
  - SuperOffice.CRM.Archives.PersonList
  - SuperOffice.CRM.Archives.ProjectEventList
  - SuperOffice.CRM.Archives.ProjectList
  - SuperOffice.CRM.Archives.ProjectMemberList
  - SuperOffice.CRM.Archives.RelationsList
  - SuperOffice.CRM.Archives.SaleList
  implements:
  - System.Collections.IEnumerable
  - System.Collections.Generic.IEnumerable{{TListItem}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IList{{TListItem}}
  - System.Collections.Generic.ICollection{{TListItem}}
  extensionMethods:
  - SuperOffice.CRM.Lists.ListBase`2.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Lists.ListBase`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: ListBase(Of TListSelect, TListItem)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem)
  name.vb: ListBase(Of TListSelect, TListItem)
- uid: SuperOffice.CRM.Lists.ListBase`2.CopyTo(System.Array,System.Int32)
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: ListBase<TListSelect, TListItem>.CopyTo(Array, Int32)
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\n<xref href=\"System.Collections.ICollection.CopyTo(System.Array%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public void CopyTo(Array list, int index)
    parameters:
    - id: list
      type: System.Array
      description: The array
    - id: index
      type: System.Int32
      description: The array index
    content.vb: Public Sub CopyTo(list As Array, index As Integer)
  overload: SuperOffice.CRM.Lists.ListBase`2.CopyTo*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).CopyTo(Array, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).CopyTo(System.Array, System.Int32)
- uid: SuperOffice.CRM.Lists.ListBase`2.CopyTo(`1[],System.Int32)
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: CopyTo(TListItem[], Int32)
  nameWithType: ListBase<TListSelect, TListItem>.CopyTo(TListItem[], Int32)
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.CopyTo(TListItem[], System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  syntax:
    content: public void CopyTo(TListItem[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{TListItem}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As TListItem(), arrayIndex As Integer)
  overload: SuperOffice.CRM.Lists.ListBase`2.CopyTo*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).CopyTo(TListItem(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).CopyTo(TListItem(), System.Int32)
  name.vb: CopyTo(TListItem(), Int32)
- uid: SuperOffice.CRM.Lists.ListBase`2.IndexOf(`1)
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.IndexOf(`1)
  id: IndexOf(`1)
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: IndexOf(TListItem)
  nameWithType: ListBase<TListSelect, TListItem>.IndexOf(TListItem)
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.IndexOf(TListItem)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nReturns the object at the given index. Implemented in classes inheriting ListBase. \n"
  syntax:
    content: public virtual int IndexOf(TListItem item)
    parameters:
    - id: item
      type: '{TListItem}'
      description: The object
    return:
      type: System.Int32
      description: The index of the object.
    content.vb: Public Overridable Function IndexOf(item As TListItem) As Integer
  overload: SuperOffice.CRM.Lists.ListBase`2.IndexOf*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).IndexOf(TListItem)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).IndexOf(TListItem)
- uid: SuperOffice.CRM.Lists.ListBase`2.Contains(`1)
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.Contains(`1)
  id: Contains(`1)
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: Contains(TListItem)
  nameWithType: ListBase<TListSelect, TListItem>.Contains(TListItem)
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.Contains(TListItem)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nChecks if the list contains the object or not. Implemented in classes inheriting ListBase. \n"
  syntax:
    content: public virtual bool Contains(TListItem item)
    parameters:
    - id: item
      type: '{TListItem}'
      description: The object to locate in the Array.
    return:
      type: System.Boolean
      description: True if value is found in the Array; otherwise, False
    content.vb: Public Overridable Function Contains(item As TListItem) As Boolean
  overload: SuperOffice.CRM.Lists.ListBase`2.Contains*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).Contains(TListItem)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).Contains(TListItem)
- uid: SuperOffice.CRM.Lists.ListBase`2.#ctor
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: ListBase()
  nameWithType: ListBase<TListSelect, TListItem>.ListBase()
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.ListBase()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nDefault constructor\n"
  syntax:
    content: public ListBase()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Lists.ListBase`2.#ctor*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).ListBase()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).ListBase()
- uid: SuperOffice.CRM.Lists.ListBase`2.OnLoadAsync(`0,SuperOffice.Data.SoDataReader,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.OnLoadAsync(`0,SuperOffice.Data.SoDataReader,System.Threading.CancellationToken)
  id: OnLoadAsync(`0,SuperOffice.Data.SoDataReader,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: OnLoadAsync(TListSelect, SoDataReader, CancellationToken)
  nameWithType: ListBase<TListSelect, TListItem>.OnLoadAsync(TListSelect, SoDataReader, CancellationToken)
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.OnLoadAsync(TListSelect, SuperOffice.Data.SoDataReader, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nResponsible for reading each row with data from the SoDataReader and insert the object each row represents\ninto the class&apos; collection. \n"
  syntax:
    content: protected virtual Task OnLoadAsync(TListSelect query, SoDataReader reader, CancellationToken cancellationToken)
    parameters:
    - id: query
      type: '{TListSelect}'
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: The reader which contains all data in the list.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function OnLoadAsync(query As TListSelect, reader As SoDataReader, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Lists.ListBase`2.OnLoadAsync*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).OnLoadAsync(TListSelect, SoDataReader, CancellationToken)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).OnLoadAsync(TListSelect, SuperOffice.Data.SoDataReader, System.Threading.CancellationToken)
- uid: SuperOffice.CRM.Lists.ListBase`2.GetEnumerator
  commentId: M:SuperOffice.CRM.Lists.ListBase`2.GetEnumerator
  id: GetEnumerator
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ListBase<TListSelect, TListItem>.GetEnumerator()
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.GetEnumerator()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSee MSDN-documentation for GetEnumerator.\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
  overload: SuperOffice.CRM.Lists.ListBase`2.GetEnumerator*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).GetEnumerator()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).GetEnumerator()
- uid: SuperOffice.CRM.Lists.ListBase`2.Item(System.Int32)
  commentId: P:SuperOffice.CRM.Lists.ListBase`2.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ListBase<TListSelect, TListItem>.Item[Int32]
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nGet the <see cref=\"!:ListItemBase\"></see> in the collection from the list.\n"
  syntax:
    content: public TListItem this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the item in the list, where 0 is the first item.
    return:
      type: '{TListItem}'
    content.vb: Public ReadOnly Property Item(index As Integer) As TListItem
  overload: SuperOffice.CRM.Lists.ListBase`2.Item*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).Item(System.Int32)
  name.vb: Item(Int32)
- uid: SuperOffice.CRM.Lists.ListBase`2.ListCollection
  commentId: P:SuperOffice.CRM.Lists.ListBase`2.ListCollection
  id: ListCollection
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: ListCollection
  nameWithType: ListBase<TListSelect, TListItem>.ListCollection
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.ListCollection
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSet/Get property on collection.\n"
  syntax:
    content: protected List<TListItem> ListCollection { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TListItem}}
    content.vb: Protected Property ListCollection As List(Of TListItem)
  overload: SuperOffice.CRM.Lists.ListBase`2.ListCollection*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).ListCollection
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).ListCollection
- uid: SuperOffice.CRM.Lists.ListBase`2.Count
  commentId: P:SuperOffice.CRM.Lists.ListBase`2.Count
  id: Count
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ListBase<TListSelect, TListItem>.Count
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.Count
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nGet the number of elements contained in the underlying collection.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SuperOffice.CRM.Lists.ListBase`2.Count*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).Count
- uid: SuperOffice.CRM.Lists.ListBase`2.IsFixedSize
  commentId: P:SuperOffice.CRM.Lists.ListBase`2.IsFixedSize
  id: IsFixedSize
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: ListBase<TListSelect, TListItem>.IsFixedSize
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.IsFixedSize
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nA collection with a fixed size does not allow the addition or removal of elements after \nthe collection is created, but it allows the modification of existing elements.\nIsFixedSize will return true for lists inheriting ListBase.\n"
  syntax:
    content: public bool IsFixedSize { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
  overload: SuperOffice.CRM.Lists.ListBase`2.IsFixedSize*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).IsFixedSize
- uid: SuperOffice.CRM.Lists.ListBase`2.IsReadOnly
  commentId: P:SuperOffice.CRM.Lists.ListBase`2.IsReadOnly
  id: IsReadOnly
  parent: SuperOffice.CRM.Lists.ListBase`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ListBase<TListSelect, TListItem>.IsReadOnly
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.IsReadOnly
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nA collection that is read-only does not allow the addition, removal, \nor modification of elements after the collection is created.\nIsReadOnly will return true for lists inheriting ListBase.\n"
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: SuperOffice.CRM.Lists.ListBase`2.IsReadOnly*
  nameWithType.vb: ListBase(Of TListSelect, TListItem).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).IsReadOnly
references:
- uid: SuperOffice.CRM.Lists
  commentId: N:SuperOffice.CRM.Lists
  isExternal: true
  name: SuperOffice.CRM.Lists
  nameWithType: SuperOffice.CRM.Lists
  fullName: SuperOffice.CRM.Lists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{{TListItem}}
  commentId: '!:System.Collections.Generic.IEnumerable{`1}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TListItem>
  nameWithType: IEnumerable<TListItem>
  fullName: System.Collections.Generic.IEnumerable<TListItem>
  nameWithType.vb: IEnumerable(Of TListItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TListItem)
  name.vb: IEnumerable(Of TListItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IList{{TListItem}}
  commentId: '!:System.Collections.Generic.IList{`1}'
  definition: System.Collections.Generic.IList`1
  name: IList<TListItem>
  nameWithType: IList<TListItem>
  fullName: System.Collections.Generic.IList<TListItem>
  nameWithType.vb: IList(Of TListItem)
  fullName.vb: System.Collections.Generic.IList(Of TListItem)
  name.vb: IList(Of TListItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TListItem}}
  commentId: '!:System.Collections.Generic.ICollection{`1}'
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TListItem>
  nameWithType: ICollection<TListItem>
  fullName: System.Collections.Generic.ICollection<TListItem>
  nameWithType.vb: ICollection(Of TListItem)
  fullName.vb: System.Collections.Generic.ICollection(Of TListItem)
  name.vb: ICollection(Of TListItem)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.ListBase`2.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ListBase<TListSelect, TListItem>, To>()
  nameWithType: EnumUtil.MapEnums<ListBase<TListSelect, TListItem>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ListBase(Of TListSelect, TListItem), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem), To)()
  name.vb: MapEnums(Of ListBase(Of TListSelect, TListItem), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ListBase<TListSelect, TListItem>, To>
    nameWithType: EnumUtil.MapEnums<ListBase<TListSelect, TListItem>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ListBase(Of TListSelect, TListItem), To)
    nameWithType: EnumUtil.MapEnums(Of ListBase(Of TListSelect, TListItem), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.ListBase`2.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ListBase<TListSelect, TListItem>, To>()
  nameWithType: Converters.MapEnums<ListBase<TListSelect, TListItem>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>, To>()
  nameWithType.vb: Converters.MapEnums(Of ListBase(Of TListSelect, TListItem), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem), To)()
  name.vb: MapEnums(Of ListBase(Of TListSelect, TListItem), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ListBase<TListSelect, TListItem>, To>
    nameWithType: Converters.MapEnums<ListBase<TListSelect, TListItem>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ListBase(Of TListSelect, TListItem), To)
    nameWithType: Converters.MapEnums(Of ListBase(Of TListSelect, TListItem), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: System.Collections.Generic.ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: System.Collections.Generic.ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Lists.ListBase`2.CopyTo*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: ListBase<TListSelect, TListItem>.CopyTo
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.CopyTo
  nameWithType.vb: ListBase(Of TListSelect, TListItem).CopyTo
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).CopyTo
- uid: System.Array
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TListItem}[]'
  isExternal: true
  name: TListItem[]
  nameWithType: TListItem[]
  fullName: TListItem[]
  nameWithType.vb: TListItem()
  fullName.vb: TListItem()
  name.vb: TListItem()
  spec.csharp:
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Lists.ListBase`2.IndexOf*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.IndexOf
  isExternal: true
  name: IndexOf
  nameWithType: ListBase<TListSelect, TListItem>.IndexOf
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.IndexOf
  nameWithType.vb: ListBase(Of TListSelect, TListItem).IndexOf
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).IndexOf
- uid: '{TListItem}'
  commentId: '!:TListItem'
  definition: TListItem
  name: TListItem
  nameWithType: TListItem
  fullName: TListItem
- uid: TListItem
  name: TListItem
  nameWithType: TListItem
  fullName: TListItem
- uid: SuperOffice.CRM.Lists.ListBase`2.Contains*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.Contains
  isExternal: true
  name: Contains
  nameWithType: ListBase<TListSelect, TListItem>.Contains
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.Contains
  nameWithType.vb: ListBase(Of TListSelect, TListItem).Contains
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Lists.ListBase`2.#ctor*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.#ctor
  isExternal: true
  name: ListBase
  nameWithType: ListBase<TListSelect, TListItem>.ListBase
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.ListBase
  nameWithType.vb: ListBase(Of TListSelect, TListItem).ListBase
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).ListBase
- uid: SuperOffice.CRM.Lists.ListBase`2.OnLoadAsync*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.OnLoadAsync
  isExternal: true
  name: OnLoadAsync
  nameWithType: ListBase<TListSelect, TListItem>.OnLoadAsync
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.OnLoadAsync
  nameWithType.vb: ListBase(Of TListSelect, TListItem).OnLoadAsync
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).OnLoadAsync
- uid: '{TListSelect}'
  commentId: '!:TListSelect'
  definition: TListSelect
  name: TListSelect
  nameWithType: TListSelect
  fullName: TListSelect
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TListSelect
  name: TListSelect
  nameWithType: TListSelect
  fullName: TListSelect
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.CRM.Lists.ListBase`2.GetEnumerator*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: ListBase<TListSelect, TListItem>.GetEnumerator
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.GetEnumerator
  nameWithType.vb: ListBase(Of TListSelect, TListItem).GetEnumerator
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).GetEnumerator
- uid: System.Collections.IEnumerator
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SuperOffice.CRM.Lists.ListBase`2.Item*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.Item
  isExternal: true
  name: Item
  nameWithType: ListBase<TListSelect, TListItem>.Item
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.Item
  nameWithType.vb: ListBase(Of TListSelect, TListItem).Item
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).Item
- uid: SuperOffice.CRM.Lists.ListBase`2.ListCollection*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.ListCollection
  isExternal: true
  name: ListCollection
  nameWithType: ListBase<TListSelect, TListItem>.ListCollection
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.ListCollection
  nameWithType.vb: ListBase(Of TListSelect, TListItem).ListCollection
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).ListCollection
- uid: System.Collections.Generic.List{{TListItem}}
  commentId: '!:System.Collections.Generic.List{`1}'
  definition: System.Collections.Generic.List`1
  name: List<TListItem>
  nameWithType: List<TListItem>
  fullName: System.Collections.Generic.List<TListItem>
  nameWithType.vb: List(Of TListItem)
  fullName.vb: System.Collections.Generic.List(Of TListItem)
  name.vb: List(Of TListItem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TListItem
    nameWithType: TListItem
    fullName: TListItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.ListBase`2.Count*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.Count
  isExternal: true
  name: Count
  nameWithType: ListBase<TListSelect, TListItem>.Count
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.Count
  nameWithType.vb: ListBase(Of TListSelect, TListItem).Count
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).Count
- uid: SuperOffice.CRM.Lists.ListBase`2.IsFixedSize*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.IsFixedSize
  isExternal: true
  name: IsFixedSize
  nameWithType: ListBase<TListSelect, TListItem>.IsFixedSize
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.IsFixedSize
  nameWithType.vb: ListBase(Of TListSelect, TListItem).IsFixedSize
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).IsFixedSize
- uid: SuperOffice.CRM.Lists.ListBase`2.IsReadOnly*
  commentId: Overload:SuperOffice.CRM.Lists.ListBase`2.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ListBase<TListSelect, TListItem>.IsReadOnly
  fullName: SuperOffice.CRM.Lists.ListBase<TListSelect, TListItem>.IsReadOnly
  nameWithType.vb: ListBase(Of TListSelect, TListItem).IsReadOnly
  fullName.vb: SuperOffice.CRM.Lists.ListBase(Of TListSelect, TListItem).IsReadOnly
