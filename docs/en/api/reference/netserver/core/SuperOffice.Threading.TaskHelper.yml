### YamlMime:ManagedReference
items:
- uid: SuperOffice.Threading.TaskHelper
  commentId: T:SuperOffice.Threading.TaskHelper
  id: TaskHelper
  parent: SuperOffice.Threading
  children:
  - SuperOffice.Threading.TaskHelper.RunInUserContext(System.Action,System.Threading.CancellationToken)
  - SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - SuperOffice.Threading.TaskHelper.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)
  - SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: TaskHelper
  nameWithType: TaskHelper
  fullName: SuperOffice.Threading.TaskHelper
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: 'public static class TaskHelper : Object'
    content.vb: >-
      Public Module TaskHelper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Threading.TaskHelper.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Threading.TaskHelper.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)
  id: WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: SuperOffice.Threading.TaskHelper
  langs:
  - csharp
  - vb
  name: WaitAsync(Task, CancellationToken)
  nameWithType: TaskHelper.WaitAsync(Task, CancellationToken)
  fullName: SuperOffice.Threading.TaskHelper.WaitAsync(System.Threading.Tasks.Task, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nAlternative to System.Threading.Tasks.Task.WaitAsync which is only available on NET5+, attach this to a task that might not have a cancellation token\nhttps://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenany?view=net-8.0\n"
  syntax:
    content: public static Task WaitAsync(this Task task, CancellationToken cancellationToken)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WaitAsync(task As Task, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.Threading.TaskHelper.WaitAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Action,System.Threading.CancellationToken)
  commentId: M:SuperOffice.Threading.TaskHelper.RunInUserContext(System.Action,System.Threading.CancellationToken)
  id: RunInUserContext(System.Action,System.Threading.CancellationToken)
  parent: SuperOffice.Threading.TaskHelper
  langs:
  - csharp
  - vb
  name: RunInUserContext(Action, CancellationToken)
  nameWithType: TaskHelper.RunInUserContext(Action, CancellationToken)
  fullName: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nPerform a Task.Run while ensuring that NetServer&apos;s contexts is taken care of and disposed request scoped instances are not used.\n"
  remarks: "\nExecute the work in a task.  This task supports that it starts in the context of a request, or other operation, where the scope\nis disposed before the task is completed.  Information about the logged in user is handled as well.\n"
  syntax:
    content: public static Task RunInUserContext(Action action, CancellationToken cancellationToken = null)
    parameters:
    - id: action
      type: System.Action
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: Task that is safe not to await for.
    content.vb: Public Shared Function RunInUserContext(action As Action, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Threading.TaskHelper.RunInUserContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: RunInUserContext(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: SuperOffice.Threading.TaskHelper
  langs:
  - csharp
  - vb
  name: RunInUserContext(Func<Task>, CancellationToken)
  nameWithType: TaskHelper.RunInUserContext(Func<Task>, CancellationToken)
  fullName: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nPerform a Task.Run while ensuring that NetServer&apos;s contexts is taken care of and disposed request scoped instances are not used.\n"
  remarks: "\nExecute the work in a task.  This task supports that it starts in the context of a request, or other operation, where the scope\nis disposed before the task is completed.  Information about the logged in user is handled as well.\n"
  syntax:
    content: public static Task RunInUserContext(Func<Task> action, CancellationToken cancellationToken = null)
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: Task that is safe not to await for.
    content.vb: Public Shared Function RunInUserContext(action As Func(Of Task), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Threading.TaskHelper.RunInUserContext*
  nameWithType.vb: TaskHelper.RunInUserContext(Func(Of Task), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: RunInUserContext(Func(Of Task), CancellationToken)
- uid: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: RunInUserContext(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: SuperOffice.Threading.TaskHelper
  langs:
  - csharp
  - vb
  name: RunInUserContext(Func<CancellationToken, Task>, CancellationToken)
  nameWithType: TaskHelper.RunInUserContext(Func<CancellationToken, Task>, CancellationToken)
  fullName: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nPerform a Task.Run while ensuring that NetServer&apos;s contexts is taken care of and disposed request scoped instances are not used.\n"
  remarks: "\nExecute the work in a task.  This task supports that it starts in the context of a request, or other operation, where the scope\nis disposed before the task is completed.  Information about the logged in user is handled as well.\n"
  syntax:
    content: public static Task RunInUserContext(Func<CancellationToken, Task> action, CancellationToken cancellationToken = null)
    parameters:
    - id: action
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: Task that is safe not to await for.
    content.vb: Public Shared Function RunInUserContext(action As Func(Of CancellationToken, Task), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Threading.TaskHelper.RunInUserContext*
  nameWithType.vb: TaskHelper.RunInUserContext(Func(Of CancellationToken, Task), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Threading.TaskHelper.RunInUserContext(System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: RunInUserContext(Func(Of CancellationToken, Task), CancellationToken)
- uid: SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync(System.Threading.CancellationToken)
  id: WaitForAllRunningTasksAsync(System.Threading.CancellationToken)
  parent: SuperOffice.Threading.TaskHelper
  langs:
  - csharp
  - vb
  name: WaitForAllRunningTasksAsync(CancellationToken)
  nameWithType: TaskHelper.WaitForAllRunningTasksAsync(CancellationToken)
  fullName: SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nWait for all currently running tasks to comlete\n"
  syntax:
    content: public static Task WaitForAllRunningTasksAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function WaitForAllRunningTasksAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Threading
  commentId: N:SuperOffice.Threading
  isExternal: true
  name: SuperOffice.Threading
  nameWithType: SuperOffice.Threading
  fullName: SuperOffice.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Threading.TaskHelper.WaitAsync*
  commentId: Overload:SuperOffice.Threading.TaskHelper.WaitAsync
  isExternal: true
  name: WaitAsync
  nameWithType: TaskHelper.WaitAsync
  fullName: SuperOffice.Threading.TaskHelper.WaitAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: SuperOffice.Threading.TaskHelper.RunInUserContext*
  commentId: Overload:SuperOffice.Threading.TaskHelper.RunInUserContext
  isExternal: true
  name: RunInUserContext
  nameWithType: TaskHelper.RunInUserContext
  fullName: SuperOffice.Threading.TaskHelper.RunInUserContext
- uid: System.Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: '!:System.Func{System.Threading.Tasks.Task}'
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: System.Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  commentId: '!:System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}'
  definition: System.Func`2
  name: Func<CancellationToken, Task>
  nameWithType: Func<CancellationToken, Task>
  fullName: System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of CancellationToken, Task)
  fullName.vb: System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task)
  name.vb: Func(Of CancellationToken, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync*
  commentId: Overload:SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync
  isExternal: true
  name: WaitForAllRunningTasksAsync
  nameWithType: TaskHelper.WaitForAllRunningTasksAsync
  fullName: SuperOffice.Threading.TaskHelper.WaitForAllRunningTasksAsync
