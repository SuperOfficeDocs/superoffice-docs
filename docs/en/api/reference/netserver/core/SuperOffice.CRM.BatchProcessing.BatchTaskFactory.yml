### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  commentId: T:SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  id: BatchTaskFactory
  parent: SuperOffice.CRM.BatchProcessing
  children:
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask(System.Int32)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks(SuperOffice.Data.BatchTaskState,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo(System.Int32)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted(System.Int32)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks(System.TimeSpan)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(SuperOffice.CRM.Services.BatchTaskInfo,System.String)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(System.String,System.String)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32)
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: BatchTaskFactory
  nameWithType: BatchTaskFactory
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  type: Class
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nFactory for dealing with batch tasks.  Tasks are identified by a unique name and might require a context.\n"
  syntax:
    content: >-
      [SoInject("Database")]

      public class BatchTaskFactory : Object, IDisposable
    content.vb: >-
      <SoInject("Database")>

      Public Class BatchTaskFactory
          Inherits Object
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  extensionMethods:
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EnumUtil.MapEnums``2
  - SuperOffice.CRM.BatchProcessing.BatchTaskFactory.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Database
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent
  id: GetCurrent
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: BatchTaskFactory.GetCurrent()
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent()
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  syntax:
    content: public static BatchTaskFactory GetCurrent()
    return:
      type: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
    content.vb: Public Shared Function GetCurrent As BatchTaskFactory
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks(SuperOffice.Data.BatchTaskState,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks(SuperOffice.Data.BatchTaskState,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  id: GetRunningTasks(SuperOffice.Data.BatchTaskState,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: GetRunningTasks(BatchTaskState, Nullable<Boolean>, Nullable<Boolean>)
  nameWithType: BatchTaskFactory.GetRunningTasks(BatchTaskState, Nullable<Boolean>, Nullable<Boolean>)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks(SuperOffice.Data.BatchTaskState, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nReturns array of running tasks in a given state.\n"
  syntax:
    content: public BatchTaskInfo[] GetRunningTasks(BatchTaskState state, Nullable<bool> internalTasks = null, Nullable<bool> systemTasks = null)
    parameters:
    - id: state
      type: SuperOffice.Data.BatchTaskState
      description: Only return tasks in this state
    - id: internalTasks
      type: System.Nullable{System.Boolean}
    - id: systemTasks
      type: System.Nullable{System.Boolean}
    return:
      type: SuperOffice.CRM.Services.BatchTaskInfo[]
      description: Array of running task info
    content.vb: Public Function GetRunningTasks(state As BatchTaskState, internalTasks As Nullable(Of Boolean) = Nothing, systemTasks As Nullable(Of Boolean) = Nothing) As BatchTaskInfo()
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks*
  nameWithType.vb: BatchTaskFactory.GetRunningTasks(BatchTaskState, Nullable(Of Boolean), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks(SuperOffice.Data.BatchTaskState, System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean))
  name.vb: GetRunningTasks(BatchTaskState, Nullable(Of Boolean), Nullable(Of Boolean))
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks(System.TimeSpan)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks(System.TimeSpan)
  id: PurgeOldFinishedTasks(System.TimeSpan)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: PurgeOldFinishedTasks(TimeSpan)
  nameWithType: BatchTaskFactory.PurgeOldFinishedTasks(TimeSpan)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks(System.TimeSpan)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nPurge outdated task information from the Factory\n"
  syntax:
    content: public void PurgeOldFinishedTasks(TimeSpan timeSinceLastUpdate)
    parameters:
    - id: timeSinceLastUpdate
      type: System.TimeSpan
      description: How old information do you want to keep
    content.vb: Public Sub PurgeOldFinishedTasks(timeSinceLastUpdate As TimeSpan)
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(System.String,System.String)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(System.String,System.String)
  id: StartTask(System.String,System.String)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: StartTask(String, String)
  nameWithType: BatchTaskFactory.StartTask(String, String)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(System.String, System.String)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nStart executing an internal (in-memory) task a asynchronously.\n"
  syntax:
    content: public BatchTaskInfo StartTask(string name, string context)
    parameters:
    - id: name
      type: System.String
      description: Name of the task to execute.
    - id: context
      type: System.String
      description: Context for the task.
    return:
      type: SuperOffice.CRM.Services.BatchTaskInfo
      description: Information about the task.
    content.vb: Public Function StartTask(name As String, context As String) As BatchTaskInfo
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: Thrown if the task is not found.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(SuperOffice.CRM.Services.BatchTaskInfo,System.String)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(SuperOffice.CRM.Services.BatchTaskInfo,System.String)
  id: StartTask(SuperOffice.CRM.Services.BatchTaskInfo,System.String)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: StartTask(BatchTaskInfo, String)
  nameWithType: BatchTaskFactory.StartTask(BatchTaskInfo, String)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask(SuperOffice.CRM.Services.BatchTaskInfo, System.String)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  syntax:
    content: public BatchTaskInfo StartTask(BatchTaskInfo batchTaskInfo, string context)
    parameters:
    - id: batchTaskInfo
      type: SuperOffice.CRM.Services.BatchTaskInfo
    - id: context
      type: System.String
    return:
      type: SuperOffice.CRM.Services.BatchTaskInfo
    content.vb: Public Function StartTask(batchTaskInfo As BatchTaskInfo, context As String) As BatchTaskInfo
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo(System.Int32)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo(System.Int32)
  id: GetTaskInfo(System.Int32)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: GetTaskInfo(Int32)
  nameWithType: BatchTaskFactory.GetTaskInfo(Int32)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo(System.Int32)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nObtain current information about the task.\n"
  syntax:
    content: public BatchTaskInfo GetTaskInfo(int taskId)
    parameters:
    - id: taskId
      type: System.Int32
      description: Id of the task to get Info for.
    return:
      type: SuperOffice.CRM.Services.BatchTaskInfo
    content.vb: Public Function GetTaskInfo(taskId As Integer) As BatchTaskInfo
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask(System.Int32)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask(System.Int32)
  id: EndTask(System.Int32)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: EndTask(Int32)
  nameWithType: BatchTaskFactory.EndTask(Int32)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask(System.Int32)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nSignal an executing task to end execution.\n"
  syntax:
    content: public void EndTask(int taskId)
    parameters:
    - id: taskId
      type: System.Int32
      description: Id of the task to end.
    content.vb: Public Sub EndTask(taskId As Integer)
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32)
  id: WaitForTaskCompletion(System.Int32)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: WaitForTaskCompletion(Int32)
  nameWithType: BatchTaskFactory.WaitForTaskCompletion(Int32)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nWait infinitely for the task to complete.\n"
  syntax:
    content: public BatchTaskInfo WaitForTaskCompletion(int taskId)
    parameters:
    - id: taskId
      type: System.Int32
      description: Id of task to wait for.
    return:
      type: SuperOffice.CRM.Services.BatchTaskInfo
      description: Information about the completed task.
    content.vb: Public Function WaitForTaskCompletion(taskId As Integer) As BatchTaskInfo
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32,System.Int32)
  id: WaitForTaskCompletion(System.Int32,System.Int32)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: WaitForTaskCompletion(Int32, Int32)
  nameWithType: BatchTaskFactory.WaitForTaskCompletion(Int32, Int32)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion(System.Int32, System.Int32)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nWait for the task to complete.\n"
  remarks: If the task is not completed withing the time frame specified, a <xref href="SuperOffice.Exceptions.SoException" data-throw-if-not-resolved="false"></xref> is thrown.
  syntax:
    content: public BatchTaskInfo WaitForTaskCompletion(int taskId, int timeOut)
    parameters:
    - id: taskId
      type: System.Int32
      description: Id of task to wait for.
    - id: timeOut
      type: System.Int32
      description: Timeout in seconds to wait.  Values less than 1 is considered to be infinite.
    return:
      type: SuperOffice.CRM.Services.BatchTaskInfo
    content.vb: Public Function WaitForTaskCompletion(taskId As Integer, timeOut As Integer) As BatchTaskInfo
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if the task does not complete within the time frame specified in the timeout value.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted(System.Int32)
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted(System.Int32)
  id: IsTaskCompleted(System.Int32)
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: IsTaskCompleted(Int32)
  nameWithType: BatchTaskFactory.IsTaskCompleted(Int32)
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted(System.Int32)
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  summary: "\nCheck if the task has completed.\n"
  remarks: Use <xref href="SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo(System.Int32)" data-throw-if-not-resolved="false"></xref> to get information about the state of the task.
  syntax:
    content: public bool IsTaskCompleted(int taskId)
    parameters:
    - id: taskId
      type: System.Int32
      description: Id if task to check if it has completed.
    return:
      type: System.Boolean
      description: True if the task has completed.
    content.vb: Public Function IsTaskCompleted(taskId As Integer) As Boolean
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose
  commentId: M:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose
  id: Dispose
  parent: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BatchTaskFactory.Dispose()
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose()
  type: Method
  source:
    path: SoBatchProcessing
    isExternal: true
  assemblies:
  - SoBatchProcessing
  namespace: SuperOffice.CRM.BatchProcessing
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.CRM.BatchProcessing
  commentId: N:SuperOffice.CRM.BatchProcessing
  isExternal: true
  name: SuperOffice.CRM.BatchProcessing
  nameWithType: SuperOffice.CRM.BatchProcessing
  fullName: SuperOffice.CRM.BatchProcessing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<BatchTaskFactory, To>()
  nameWithType: EnumUtil.MapEnums<BatchTaskFactory, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of BatchTaskFactory, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To)()
  name.vb: MapEnums(Of BatchTaskFactory, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<BatchTaskFactory, To>
    nameWithType: EnumUtil.MapEnums<BatchTaskFactory, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of BatchTaskFactory, To)
    nameWithType: EnumUtil.MapEnums(Of BatchTaskFactory, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<BatchTaskFactory, To>()
  nameWithType: Converters.MapEnums<BatchTaskFactory, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To>()
  nameWithType.vb: Converters.MapEnums(Of BatchTaskFactory, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To)()
  name.vb: MapEnums(Of BatchTaskFactory, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<BatchTaskFactory, To>
    nameWithType: Converters.MapEnums<BatchTaskFactory, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of BatchTaskFactory, To)
    nameWithType: Converters.MapEnums(Of BatchTaskFactory, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.BatchProcessing.BatchTaskFactory, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent
  isExternal: true
  name: GetCurrent
  nameWithType: BatchTaskFactory.GetCurrent
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetCurrent
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  commentId: T:SuperOffice.CRM.BatchProcessing.BatchTaskFactory
  parent: SuperOffice.CRM.BatchProcessing
  isExternal: true
  name: BatchTaskFactory
  nameWithType: BatchTaskFactory
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks
  isExternal: true
  name: GetRunningTasks
  nameWithType: BatchTaskFactory.GetRunningTasks
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetRunningTasks
- uid: SuperOffice.Data.BatchTaskState
  commentId: T:SuperOffice.Data.BatchTaskState
  parent: SuperOffice.Data
  isExternal: true
  name: BatchTaskState
  nameWithType: BatchTaskState
  fullName: SuperOffice.Data.BatchTaskState
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Services.BatchTaskInfo[]
  isExternal: true
  name: BatchTaskInfo[]
  nameWithType: BatchTaskInfo[]
  fullName: SuperOffice.CRM.Services.BatchTaskInfo[]
  nameWithType.vb: BatchTaskInfo()
  fullName.vb: SuperOffice.CRM.Services.BatchTaskInfo()
  name.vb: BatchTaskInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.BatchTaskInfo
    name: BatchTaskInfo
    nameWithType: BatchTaskInfo
    fullName: SuperOffice.CRM.Services.BatchTaskInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.BatchTaskInfo
    name: BatchTaskInfo
    nameWithType: BatchTaskInfo
    fullName: SuperOffice.CRM.Services.BatchTaskInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks
  isExternal: true
  name: PurgeOldFinishedTasks
  nameWithType: BatchTaskFactory.PurgeOldFinishedTasks
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.PurgeOldFinishedTasks
- uid: System.TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask
  isExternal: true
  name: StartTask
  nameWithType: BatchTaskFactory.StartTask
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.StartTask
- uid: SuperOffice.Exceptions.SoIllegalOperationException
  commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  isExternal: true
  name: SoIllegalOperationException
  nameWithType: SoIllegalOperationException
  fullName: SuperOffice.Exceptions.SoIllegalOperationException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Services.BatchTaskInfo
  isExternal: true
  name: BatchTaskInfo
  nameWithType: BatchTaskInfo
  fullName: SuperOffice.CRM.Services.BatchTaskInfo
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo
  isExternal: true
  name: GetTaskInfo
  nameWithType: BatchTaskFactory.GetTaskInfo
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.GetTaskInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask
  isExternal: true
  name: EndTask
  nameWithType: BatchTaskFactory.EndTask
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.EndTask
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion
  isExternal: true
  name: WaitForTaskCompletion
  nameWithType: BatchTaskFactory.WaitForTaskCompletion
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.WaitForTaskCompletion
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted
  isExternal: true
  name: IsTaskCompleted
  nameWithType: BatchTaskFactory.IsTaskCompleted
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.IsTaskCompleted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose*
  commentId: Overload:SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose
  isExternal: true
  name: Dispose
  nameWithType: BatchTaskFactory.Dispose
  fullName: SuperOffice.CRM.BatchProcessing.BatchTaskFactory.Dispose
