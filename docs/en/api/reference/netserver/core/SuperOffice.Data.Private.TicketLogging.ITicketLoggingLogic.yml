### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  commentId: T:SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  id: ITicketLoggingLogic
  parent: SuperOffice.Data.Private.TicketLogging
  children:
  - SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  langs:
  - csharp
  - vb
  name: ITicketLoggingLogic
  nameWithType: ITicketLoggingLogic
  fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  summary: "\nInterface for the actual Ticket logging logic - how to write to the database, given that changes are known.\n"
  syntax:
    content: public interface ITicketLoggingLogic
    content.vb: Public Interface ITicketLoggingLogic
  extensionMethods:
  - SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.EnumUtil.MapEnums``2
  - SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  commentId: M:SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  id: LogFromTicketDataAsync(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  parent: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  langs:
  - csharp
  - vb
  name: LogFromTicketDataAsync(TicketLoggerProcessor.QueryData)
  nameWithType: ITicketLoggingLogic.LogFromTicketDataAsync(TicketLoggerProcessor.QueryData)
  fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  summary: "\nLogs ticket changes if the supplied data suggests that event should be logged.\n"
  syntax:
    content: Task<Nullable<int>> LogFromTicketDataAsync(TicketLoggerProcessor.QueryData queryData)
    parameters:
    - id: queryData
      type: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
      description: Contains information regarding query that changed the ticket
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Int32}}
      description: Returns PK of TicketLogAction row that was inserted. If logic inside the method decides that event does not need to be logged, returns null
    content.vb: Function LogFromTicketDataAsync(queryData As TicketLoggerProcessor.QueryData) As Task(Of Nullable(Of Integer))
  overload: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync*
references:
- uid: SuperOffice.Data.Private.TicketLogging
  commentId: N:SuperOffice.Data.Private.TicketLogging
  isExternal: true
  name: SuperOffice.Data.Private.TicketLogging
  nameWithType: SuperOffice.Data.Private.TicketLogging
  fullName: SuperOffice.Data.Private.TicketLogging
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ITicketLoggingLogic, To>()
  nameWithType: EnumUtil.MapEnums<ITicketLoggingLogic, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ITicketLoggingLogic, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To)()
  name.vb: MapEnums(Of ITicketLoggingLogic, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ITicketLoggingLogic, To>
    nameWithType: EnumUtil.MapEnums<ITicketLoggingLogic, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ITicketLoggingLogic, To)
    nameWithType: EnumUtil.MapEnums(Of ITicketLoggingLogic, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ITicketLoggingLogic, To>()
  nameWithType: Converters.MapEnums<ITicketLoggingLogic, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To>()
  nameWithType.vb: Converters.MapEnums(Of ITicketLoggingLogic, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To)()
  name.vb: MapEnums(Of ITicketLoggingLogic, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ITicketLoggingLogic, To>
    nameWithType: Converters.MapEnums<ITicketLoggingLogic, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ITicketLoggingLogic, To)
    nameWithType: Converters.MapEnums(Of ITicketLoggingLogic, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync
  isExternal: true
  name: LogFromTicketDataAsync
  nameWithType: ITicketLoggingLogic.LogFromTicketDataAsync
  fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketDataAsync
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
  commentId: T:SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
  parent: SuperOffice.Data.Private.TicketLogging
  isExternal: true
  name: TicketLoggerProcessor.QueryData
  nameWithType: TicketLoggerProcessor.QueryData
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
- uid: System.Threading.Tasks.Task{System.Nullable{System.Int32}}
  commentId: '!:System.Threading.Tasks.Task{System.Nullable{System.Int32}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Int32>>
  nameWithType: Task<Nullable<Int32>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Int32>>
  nameWithType.vb: Task(Of Nullable(Of Int32))
  fullName.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Int32))
  name.vb: Task(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
