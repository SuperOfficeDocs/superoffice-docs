### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.Argument
  commentId: T:SuperOffice.Data.SQL.Argument
  id: Argument
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.Argument.#ctor(SuperOffice.Data.FieldDataType,System.Int32)
  - SuperOffice.Data.SQL.Argument.Alias
  - SuperOffice.Data.SQL.Argument.Between(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.DataType
  - SuperOffice.Data.SQL.Argument.Equal(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.GetMainField
  - SuperOffice.Data.SQL.Argument.GetSubElements
  - SuperOffice.Data.SQL.Argument.GreaterThan(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.GreaterThanOrEqual(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.HasAll(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.Argument.HasAny(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.Argument.In(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.Argument.IsNotNull
  - SuperOffice.Data.SQL.Argument.IsNull
  - SuperOffice.Data.SQL.Argument.LessThan(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.LessThanOrEqual(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.Like(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.Like(System.String)
  - SuperOffice.Data.SQL.Argument.MissingAll(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.Argument.MissingAny(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.Argument.NotBetween(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.NotIn(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.SQL.Argument.NotLike(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.SQL.Argument.Size
  - SuperOffice.Data.SQL.Argument.ToArgumentArray``1(``0[])
  - SuperOffice.Data.SQL.Argument.ToArgumentArray``1(``0[],System.Boolean)
  - SuperOffice.Data.SQL.Argument.UnEqual(SuperOffice.Data.SQL.Argument)
  langs:
  - csharp
  - vb
  name: Argument
  nameWithType: Argument
  fullName: SuperOffice.Data.SQL.Argument
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe Argument class.\nInherit QueryElement as part of a Visitor Pattern\n"
  syntax:
    content: 'public abstract class Argument : QueryElement, ICloneable'
    content.vb: >-
      Public MustInherit Class Argument
          Inherits QueryElement
          Implements ICloneable
  inheritance:
  - System.Object
  - SuperOffice.Data.SQL.QueryElement
  derivedClasses:
  - SuperOffice.Data.SQL.Aggregation
  - SuperOffice.Data.SQL.ArgumentFunction
  - SuperOffice.Data.SQL.DatabaseFunctions
  - SuperOffice.Data.SQL.FieldInfo
  - SuperOffice.Data.SQL.MathematicalExpression
  - SuperOffice.Data.SQL.Parameter
  - SuperOffice.Data.SQL.ResultModification
  implements:
  - System.ICloneable
  inheritedMembers:
  - SuperOffice.Data.SQL.QueryElement.Clone
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SQL.Argument.EnumUtil.MapEnums``2
  - SuperOffice.Data.SQL.Argument.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.Data.SQL.Argument.#ctor(SuperOffice.Data.FieldDataType,System.Int32)
  commentId: M:SuperOffice.Data.SQL.Argument.#ctor(SuperOffice.Data.FieldDataType,System.Int32)
  id: '#ctor(SuperOffice.Data.FieldDataType,System.Int32)'
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Argument(FieldDataType, Int32)
  nameWithType: Argument.Argument(FieldDataType, Int32)
  fullName: SuperOffice.Data.SQL.Argument.Argument(SuperOffice.Data.FieldDataType, System.Int32)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInitializes a new instance of the <xref href=\"SuperOffice.Data.SQL.Argument\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public Argument(FieldDataType dataType, int size)
    parameters:
    - id: dataType
      type: SuperOffice.Data.FieldDataType
      description: Type of the data.
    - id: size
      type: System.Int32
      description: The size.
    content.vb: Public Sub New(dataType As FieldDataType, size As Integer)
  overload: SuperOffice.Data.SQL.Argument.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.GetMainField
  commentId: M:SuperOffice.Data.SQL.Argument.GetMainField
  id: GetMainField
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: GetMainField()
  nameWithType: Argument.GetMainField()
  fullName: SuperOffice.Data.SQL.Argument.GetMainField()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInformation about a database field.\n"
  syntax:
    content: public abstract FieldInfo GetMainField()
    return:
      type: SuperOffice.Data.SQL.FieldInfo
      description: Information about the database field
    content.vb: Public MustOverride Function GetMainField As FieldInfo
  overload: SuperOffice.Data.SQL.Argument.GetMainField*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: SuperOffice.Data.SQL.Argument.Equal(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.Equal(SuperOffice.Data.SQL.Argument)
  id: Equal(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Equal(Argument)
  nameWithType: Argument.Equal(Argument)
  fullName: SuperOffice.Data.SQL.Argument.Equal(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the Equal operator, based on the argument provided.\n"
  syntax:
    content: public Equal Equal(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.Equal
      description: 'a new instance of the Equal operator, based on the argument provided '
    content.vb: Public Function Equal(argument As Argument) As Equal
  overload: SuperOffice.Data.SQL.Argument.Equal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.UnEqual(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.UnEqual(SuperOffice.Data.SQL.Argument)
  id: UnEqual(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: UnEqual(Argument)
  nameWithType: Argument.UnEqual(Argument)
  fullName: SuperOffice.Data.SQL.Argument.UnEqual(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the UnEqual operator, based on the argument provided.\n"
  syntax:
    content: public UnEqual UnEqual(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.UnEqual
      description: 'a new instance of the UnEqual operator, based on the argument provided '
    content.vb: Public Function UnEqual(argument As Argument) As UnEqual
  overload: SuperOffice.Data.SQL.Argument.UnEqual*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.LessThan(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.LessThan(SuperOffice.Data.SQL.Argument)
  id: LessThan(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: LessThan(Argument)
  nameWithType: Argument.LessThan(Argument)
  fullName: SuperOffice.Data.SQL.Argument.LessThan(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the LessThan operator, based on the argument provided.\n"
  syntax:
    content: public LessThan LessThan(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.LessThan
      description: 'a new instance of the LessThan operator, based on the argument provided '
    content.vb: Public Function LessThan(argument As Argument) As LessThan
  overload: SuperOffice.Data.SQL.Argument.LessThan*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.LessThanOrEqual(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.LessThanOrEqual(SuperOffice.Data.SQL.Argument)
  id: LessThanOrEqual(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Argument)
  nameWithType: Argument.LessThanOrEqual(Argument)
  fullName: SuperOffice.Data.SQL.Argument.LessThanOrEqual(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the LessThan operator, based on the argument provided.\n"
  syntax:
    content: public LessThanOrEqual LessThanOrEqual(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.LessThanOrEqual
      description: 'a new instance of the LessThanOrEqual operator, based on the argument provided '
    content.vb: Public Function LessThanOrEqual(argument As Argument) As LessThanOrEqual
  overload: SuperOffice.Data.SQL.Argument.LessThanOrEqual*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.GreaterThan(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.GreaterThan(SuperOffice.Data.SQL.Argument)
  id: GreaterThan(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: GreaterThan(Argument)
  nameWithType: Argument.GreaterThan(Argument)
  fullName: SuperOffice.Data.SQL.Argument.GreaterThan(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the GreaterThan operator, based on the argument provided.\n"
  syntax:
    content: public GreaterThan GreaterThan(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.GreaterThan
      description: 'a new instance of the GreaterThan operator, based on the argument provided '
    content.vb: Public Function GreaterThan(argument As Argument) As GreaterThan
  overload: SuperOffice.Data.SQL.Argument.GreaterThan*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.GreaterThanOrEqual(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.GreaterThanOrEqual(SuperOffice.Data.SQL.Argument)
  id: GreaterThanOrEqual(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Argument)
  nameWithType: Argument.GreaterThanOrEqual(Argument)
  fullName: SuperOffice.Data.SQL.Argument.GreaterThanOrEqual(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the GreaterThanOrEqual operator, based on the argument provided.\n"
  syntax:
    content: public GreaterThanOrEqual GreaterThanOrEqual(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.GreaterThanOrEqual
      description: 'a new instance of the GreaterThanOrEqual operator, based on the argument provided '
    content.vb: Public Function GreaterThanOrEqual(argument As Argument) As GreaterThanOrEqual
  overload: SuperOffice.Data.SQL.Argument.GreaterThanOrEqual*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.Like(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.Like(SuperOffice.Data.SQL.Argument)
  id: Like(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Like(Argument)
  nameWithType: Argument.Like(Argument)
  fullName: SuperOffice.Data.SQL.Argument.Like(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the Like operator, based on the argument provided.\n"
  syntax:
    content: public Like Like(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: The argument.
    return:
      type: SuperOffice.Data.SQL.Like
      description: 'a new instance of the Like operator, based on the argument provided '
    content.vb: 'Public Function Like(argument As Argument) As '
  overload: SuperOffice.Data.SQL.Argument.Like*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.Like(System.String)
  commentId: M:SuperOffice.Data.SQL.Argument.Like(System.String)
  id: Like(System.String)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Like(String)
  nameWithType: Argument.Like(String)
  fullName: SuperOffice.Data.SQL.Argument.Like(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the Like operator, based on the argument provided.\n"
  syntax:
    content: public Like Like(string value)
    parameters:
    - id: value
      type: System.String
    return:
      type: SuperOffice.Data.SQL.Like
      description: 'a new instance of the Like operator, based on the argument provided '
    content.vb: 'Public Function Like(value As String) As '
  overload: SuperOffice.Data.SQL.Argument.Like*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.NotLike(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.NotLike(SuperOffice.Data.SQL.Argument)
  id: NotLike(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: NotLike(Argument)
  nameWithType: Argument.NotLike(Argument)
  fullName: SuperOffice.Data.SQL.Argument.NotLike(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the NotLike operator, based on the argument provided.\n"
  syntax:
    content: public NotLike NotLike(Argument argument)
    parameters:
    - id: argument
      type: SuperOffice.Data.SQL.Argument
      description: string value
    return:
      type: SuperOffice.Data.SQL.NotLike
      description: 'a new instance of the NotLike operator, based on the argument provided '
    content.vb: Public Function NotLike(argument As Argument) As NotLike
  overload: SuperOffice.Data.SQL.Argument.NotLike*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.NotBetween(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.NotBetween(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  id: NotBetween(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: NotBetween(Argument, Argument)
  nameWithType: Argument.NotBetween(Argument, Argument)
  fullName: SuperOffice.Data.SQL.Argument.NotBetween(SuperOffice.Data.SQL.Argument, SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the NotBetween operator, based on the arguments provided.\n"
  syntax:
    content: public NotBetween NotBetween(Argument min, Argument max)
    parameters:
    - id: min
      type: SuperOffice.Data.SQL.Argument
      description: Minimum value
    - id: max
      type: SuperOffice.Data.SQL.Argument
      description: Maximum value
    return:
      type: SuperOffice.Data.SQL.NotBetween
      description: a new instance of the NotBetween operator, based on the argument provided.
    content.vb: Public Function NotBetween(min As Argument, max As Argument) As NotBetween
  overload: SuperOffice.Data.SQL.Argument.NotBetween*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.Between(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.SQL.Argument.Between(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  id: Between(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Between(Argument, Argument)
  nameWithType: Argument.Between(Argument, Argument)
  fullName: SuperOffice.Data.SQL.Argument.Between(SuperOffice.Data.SQL.Argument, SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the Between operator, based on the arguments provided.\n"
  syntax:
    content: public Between Between(Argument min, Argument max)
    parameters:
    - id: min
      type: SuperOffice.Data.SQL.Argument
      description: Minimum value
    - id: max
      type: SuperOffice.Data.SQL.Argument
      description: Maximum value
    return:
      type: SuperOffice.Data.SQL.Between
      description: a new instance of the Between operator, based on the argument provided.
    content.vb: Public Function Between(min As Argument, max As Argument) As Between
  overload: SuperOffice.Data.SQL.Argument.Between*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.In(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.Argument.In(SuperOffice.Data.SQL.Argument[])
  id: In(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: In(Argument[])
  nameWithType: Argument.In(Argument[])
  fullName: SuperOffice.Data.SQL.Argument.In(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the In operator, based on the argument array provided.\n"
  syntax:
    content: public In In(params Argument[] arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument[]
      description: The argument array
    return:
      type: SuperOffice.Data.SQL.In
      description: "\na new instance of the Between operator, based on the argument array provided.\n"
    content.vb: 'Public Function In(ParamArray arg As Argument()) As '
  overload: SuperOffice.Data.SQL.Argument.In*
  nameWithType.vb: Argument.In(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.Argument.In(SuperOffice.Data.SQL.Argument())
  name.vb: In(Argument())
- uid: SuperOffice.Data.SQL.Argument.HasAny(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.Argument.HasAny(SuperOffice.Data.SQL.Argument[])
  id: HasAny(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: HasAny(Argument[])
  nameWithType: Argument.HasAny(Argument[])
  fullName: SuperOffice.Data.SQL.Argument.HasAny(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the <xref href=\"SuperOffice.Data.SQL.Argument.HasAny(SuperOffice.Data.SQL.Argument%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> operator, based on the argument array provided.\n"
  syntax:
    content: public HasAny HasAny(params Argument[] arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument[]
      description: The argument array
    return:
      type: SuperOffice.Data.SQL.HasAny
      description: "\na new instance of the Between operator, based on the argument array provided.\n"
    content.vb: Public Function HasAny(ParamArray arg As Argument()) As HasAny
  overload: SuperOffice.Data.SQL.Argument.HasAny*
  nameWithType.vb: Argument.HasAny(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.Argument.HasAny(SuperOffice.Data.SQL.Argument())
  name.vb: HasAny(Argument())
- uid: SuperOffice.Data.SQL.Argument.HasAll(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.Argument.HasAll(SuperOffice.Data.SQL.Argument[])
  id: HasAll(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: HasAll(Argument[])
  nameWithType: Argument.HasAll(Argument[])
  fullName: SuperOffice.Data.SQL.Argument.HasAll(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the <xref href=\"SuperOffice.Data.SQL.Argument.HasAll(SuperOffice.Data.SQL.Argument%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> operator, based on the argument array provided.\n"
  syntax:
    content: public HasAll HasAll(params Argument[] arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument[]
      description: The argument array
    return:
      type: SuperOffice.Data.SQL.HasAll
      description: "\na new instance of the Between operator, based on the argument array provided.\n"
    content.vb: Public Function HasAll(ParamArray arg As Argument()) As HasAll
  overload: SuperOffice.Data.SQL.Argument.HasAll*
  nameWithType.vb: Argument.HasAll(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.Argument.HasAll(SuperOffice.Data.SQL.Argument())
  name.vb: HasAll(Argument())
- uid: SuperOffice.Data.SQL.Argument.MissingAny(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.Argument.MissingAny(SuperOffice.Data.SQL.Argument[])
  id: MissingAny(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: MissingAny(Argument[])
  nameWithType: Argument.MissingAny(Argument[])
  fullName: SuperOffice.Data.SQL.Argument.MissingAny(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the <xref href=\"SuperOffice.Data.SQL.Argument.MissingAny(SuperOffice.Data.SQL.Argument%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> operator, based on the argument array provided.\n"
  syntax:
    content: public MissingAny MissingAny(params Argument[] arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument[]
      description: The argument array
    return:
      type: SuperOffice.Data.SQL.MissingAny
      description: "\na new instance of the Between operator, based on the argument array provided.\n"
    content.vb: Public Function MissingAny(ParamArray arg As Argument()) As MissingAny
  overload: SuperOffice.Data.SQL.Argument.MissingAny*
  nameWithType.vb: Argument.MissingAny(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.Argument.MissingAny(SuperOffice.Data.SQL.Argument())
  name.vb: MissingAny(Argument())
- uid: SuperOffice.Data.SQL.Argument.MissingAll(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.Argument.MissingAll(SuperOffice.Data.SQL.Argument[])
  id: MissingAll(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: MissingAll(Argument[])
  nameWithType: Argument.MissingAll(Argument[])
  fullName: SuperOffice.Data.SQL.Argument.MissingAll(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the <xref href=\"SuperOffice.Data.SQL.Argument.MissingAll(SuperOffice.Data.SQL.Argument%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> operator, based on the argument array provided.\n"
  syntax:
    content: public MissingAll MissingAll(params Argument[] arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument[]
      description: The argument array
    return:
      type: SuperOffice.Data.SQL.MissingAll
      description: "\na new instance of the Between operator, based on the argument array provided.\n"
    content.vb: Public Function MissingAll(ParamArray arg As Argument()) As MissingAll
  overload: SuperOffice.Data.SQL.Argument.MissingAll*
  nameWithType.vb: Argument.MissingAll(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.Argument.MissingAll(SuperOffice.Data.SQL.Argument())
  name.vb: MissingAll(Argument())
- uid: SuperOffice.Data.SQL.Argument.IsNull
  commentId: M:SuperOffice.Data.SQL.Argument.IsNull
  id: IsNull
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: IsNull()
  nameWithType: Argument.IsNull()
  fullName: SuperOffice.Data.SQL.Argument.IsNull()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the IsNull operator, that determines whether this instance is null.\n"
  syntax:
    content: public IsNull IsNull()
    return:
      type: SuperOffice.Data.SQL.IsNull
      description: a new instance of the IsNull operator.
    content.vb: Public Function IsNull As IsNull
  overload: SuperOffice.Data.SQL.Argument.IsNull*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.IsNotNull
  commentId: M:SuperOffice.Data.SQL.Argument.IsNotNull
  id: IsNotNull
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: IsNotNull()
  nameWithType: Argument.IsNotNull()
  fullName: SuperOffice.Data.SQL.Argument.IsNotNull()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the IsNotNull operator, that determines whether this instance is not null.\n"
  syntax:
    content: public IsNotNull IsNotNull()
    return:
      type: SuperOffice.Data.SQL.IsNotNull
      description: a new instance of the IsNotNull operator.
    content.vb: Public Function IsNotNull As IsNotNull
  overload: SuperOffice.Data.SQL.Argument.IsNotNull*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.NotIn(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.SQL.Argument.NotIn(SuperOffice.Data.SQL.Argument[])
  id: NotIn(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: NotIn(Argument[])
  nameWithType: Argument.NotIn(Argument[])
  fullName: SuperOffice.Data.SQL.Argument.NotIn(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nreturns a new instance of the NotIn operator, based on the argument array provided.\n"
  syntax:
    content: public NotIn NotIn(params Argument[] arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument[]
      description: The argument array
    return:
      type: SuperOffice.Data.SQL.NotIn
      description: "\na new instance of the NotIn operator, based on the argument array provided.\n"
    content.vb: Public Function NotIn(ParamArray arg As Argument()) As NotIn
  overload: SuperOffice.Data.SQL.Argument.NotIn*
  nameWithType.vb: Argument.NotIn(Argument())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Data.SQL.Argument.NotIn(SuperOffice.Data.SQL.Argument())
  name.vb: NotIn(Argument())
- uid: SuperOffice.Data.SQL.Argument.ToArgumentArray``1(``0[])
  commentId: M:SuperOffice.Data.SQL.Argument.ToArgumentArray``1(``0[])
  id: ToArgumentArray``1(``0[])
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: ToArgumentArray<T>(T[])
  nameWithType: Argument.ToArgumentArray<T>(T[])
  fullName: SuperOffice.Data.SQL.Argument.ToArgumentArray<T>(T[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nHelper function that returns an SuperOffice.Data.SQL.Argument array from an array of items\n"
  syntax:
    content: public static Argument[] ToArgumentArray<T>(T[] ids)
    parameters:
    - id: ids
      type: '{T}[]'
      description: Array of items
    typeParameters:
    - id: T
    return:
      type: SuperOffice.Data.SQL.Argument[]
      description: Argument array with items
    content.vb: Public Shared Function ToArgumentArray(Of T)(ids As T()) As Argument()
  overload: SuperOffice.Data.SQL.Argument.ToArgumentArray*
  nameWithType.vb: Argument.ToArgumentArray(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.Argument.ToArgumentArray(Of T)(T())
  name.vb: ToArgumentArray(Of T)(T())
- uid: SuperOffice.Data.SQL.Argument.ToArgumentArray``1(``0[],System.Boolean)
  commentId: M:SuperOffice.Data.SQL.Argument.ToArgumentArray``1(``0[],System.Boolean)
  id: ToArgumentArray``1(``0[],System.Boolean)
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: ToArgumentArray<T>(T[], Boolean)
  nameWithType: Argument.ToArgumentArray<T>(T[], Boolean)
  fullName: SuperOffice.Data.SQL.Argument.ToArgumentArray<T>(T[], System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nHelper function that returns an SuperOffice.Data.SQL.Argument array from an array of items\n"
  syntax:
    content: public static Argument[] ToArgumentArray<T>(T[] ids, bool useSqlParameters)
    parameters:
    - id: ids
      type: '{T}[]'
      description: Array of items
    - id: useSqlParameters
      type: System.Boolean
      description: If false, the query will not add sql parameters for these arguments
    typeParameters:
    - id: T
    return:
      type: SuperOffice.Data.SQL.Argument[]
      description: Argument array with items
    content.vb: Public Shared Function ToArgumentArray(Of T)(ids As T(), useSqlParameters As Boolean) As Argument()
  overload: SuperOffice.Data.SQL.Argument.ToArgumentArray*
  nameWithType.vb: Argument.ToArgumentArray(Of T)(T(), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.SQL.Argument.ToArgumentArray(Of T)(T(), System.Boolean)
  name.vb: ToArgumentArray(Of T)(T(), Boolean)
- uid: SuperOffice.Data.SQL.Argument.GetSubElements
  commentId: M:SuperOffice.Data.SQL.Argument.GetSubElements
  id: GetSubElements
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: GetSubElements()
  nameWithType: Argument.GetSubElements()
  fullName: SuperOffice.Data.SQL.Argument.GetSubElements()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nPart of visitor pattern defined in abstract class QueryElement\n"
  syntax:
    content: protected override QueryElement[] GetSubElements()
    return:
      type: SuperOffice.Data.SQL.QueryElement[]
    content.vb: Protected Overrides Function GetSubElements As QueryElement()
  overridden: SuperOffice.Data.SQL.QueryElement.GetSubElements
  overload: SuperOffice.Data.SQL.Argument.GetSubElements*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.Data.SQL.Argument.Alias
  commentId: P:SuperOffice.Data.SQL.Argument.Alias
  id: Alias
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Alias
  nameWithType: Argument.Alias
  fullName: SuperOffice.Data.SQL.Argument.Alias
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet/Set values for Alias\n"
  syntax:
    content: public Alias Alias { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.Alias
    content.vb: 'Public Property Alias As '
  overload: SuperOffice.Data.SQL.Argument.Alias*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.DataType
  commentId: P:SuperOffice.Data.SQL.Argument.DataType
  id: DataType
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: DataType
  nameWithType: Argument.DataType
  fullName: SuperOffice.Data.SQL.Argument.DataType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet/Set values for DataType\n"
  syntax:
    content: public FieldDataType DataType { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.FieldDataType
    content.vb: Public Property DataType As FieldDataType
  overload: SuperOffice.Data.SQL.Argument.DataType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.Argument.Size
  commentId: P:SuperOffice.Data.SQL.Argument.Size
  id: Size
  parent: SuperOffice.Data.SQL.Argument
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Argument.Size
  fullName: SuperOffice.Data.SQL.Argument.Size
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  syntax:
    content: public virtual int Size { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable Property Size As Integer
  overload: SuperOffice.Data.SQL.Argument.Size*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.SQL.QueryElement
  commentId: T:SuperOffice.Data.SQL.QueryElement
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: QueryElement
  nameWithType: QueryElement
  fullName: SuperOffice.Data.SQL.QueryElement
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: SuperOffice.Data.SQL.QueryElement.Clone
  commentId: M:SuperOffice.Data.SQL.QueryElement.Clone
  parent: SuperOffice.Data.SQL.QueryElement
  isExternal: true
  name: Clone()
  nameWithType: QueryElement.Clone()
  fullName: SuperOffice.Data.SQL.QueryElement.Clone()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.QueryElement.Clone
    name: Clone
    nameWithType: QueryElement.Clone
    fullName: SuperOffice.Data.SQL.QueryElement.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.QueryElement.Clone
    name: Clone
    nameWithType: QueryElement.Clone
    fullName: SuperOffice.Data.SQL.QueryElement.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.Argument.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<Argument, To>()
  nameWithType: EnumUtil.MapEnums<Argument, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.Argument, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of Argument, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.Argument, To)()
  name.vb: MapEnums(Of Argument, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<Argument, To>
    nameWithType: EnumUtil.MapEnums<Argument, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.Argument, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of Argument, To)
    nameWithType: EnumUtil.MapEnums(Of Argument, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.Argument, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.Argument.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<Argument, To>()
  nameWithType: Converters.MapEnums<Argument, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.Argument, To>()
  nameWithType.vb: Converters.MapEnums(Of Argument, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.Argument, To)()
  name.vb: MapEnums(Of Argument, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<Argument, To>
    nameWithType: Converters.MapEnums<Argument, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.Argument, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of Argument, To)
    nameWithType: Converters.MapEnums(Of Argument, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.Argument, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.Argument.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.Argument.#ctor
  isExternal: true
  name: Argument
  nameWithType: Argument.Argument
  fullName: SuperOffice.Data.SQL.Argument.Argument
- uid: SuperOffice.Data.FieldDataType
  commentId: T:SuperOffice.Data.FieldDataType
  parent: SuperOffice.Data
  isExternal: true
  name: FieldDataType
  nameWithType: FieldDataType
  fullName: SuperOffice.Data.FieldDataType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.SQL.Argument.GetMainField*
  commentId: Overload:SuperOffice.Data.SQL.Argument.GetMainField
  isExternal: true
  name: GetMainField
  nameWithType: Argument.GetMainField
  fullName: SuperOffice.Data.SQL.Argument.GetMainField
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.Data.SQL.Argument.Equal*
  commentId: Overload:SuperOffice.Data.SQL.Argument.Equal
  isExternal: true
  name: Equal
  nameWithType: Argument.Equal
  fullName: SuperOffice.Data.SQL.Argument.Equal
- uid: SuperOffice.Data.SQL.Argument
  commentId: T:SuperOffice.Data.SQL.Argument
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Argument
  nameWithType: Argument
  fullName: SuperOffice.Data.SQL.Argument
- uid: SuperOffice.Data.SQL.Equal
  commentId: T:SuperOffice.Data.SQL.Equal
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Equal
  nameWithType: Equal
  fullName: SuperOffice.Data.SQL.Equal
- uid: SuperOffice.Data.SQL.Argument.UnEqual*
  commentId: Overload:SuperOffice.Data.SQL.Argument.UnEqual
  isExternal: true
  name: UnEqual
  nameWithType: Argument.UnEqual
  fullName: SuperOffice.Data.SQL.Argument.UnEqual
- uid: SuperOffice.Data.SQL.UnEqual
  commentId: T:SuperOffice.Data.SQL.UnEqual
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: UnEqual
  nameWithType: UnEqual
  fullName: SuperOffice.Data.SQL.UnEqual
- uid: SuperOffice.Data.SQL.Argument.LessThan*
  commentId: Overload:SuperOffice.Data.SQL.Argument.LessThan
  isExternal: true
  name: LessThan
  nameWithType: Argument.LessThan
  fullName: SuperOffice.Data.SQL.Argument.LessThan
- uid: SuperOffice.Data.SQL.LessThan
  commentId: T:SuperOffice.Data.SQL.LessThan
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: LessThan
  nameWithType: LessThan
  fullName: SuperOffice.Data.SQL.LessThan
- uid: SuperOffice.Data.SQL.Argument.LessThanOrEqual*
  commentId: Overload:SuperOffice.Data.SQL.Argument.LessThanOrEqual
  isExternal: true
  name: LessThanOrEqual
  nameWithType: Argument.LessThanOrEqual
  fullName: SuperOffice.Data.SQL.Argument.LessThanOrEqual
- uid: SuperOffice.Data.SQL.LessThanOrEqual
  commentId: T:SuperOffice.Data.SQL.LessThanOrEqual
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: LessThanOrEqual
  nameWithType: LessThanOrEqual
  fullName: SuperOffice.Data.SQL.LessThanOrEqual
- uid: SuperOffice.Data.SQL.Argument.GreaterThan*
  commentId: Overload:SuperOffice.Data.SQL.Argument.GreaterThan
  isExternal: true
  name: GreaterThan
  nameWithType: Argument.GreaterThan
  fullName: SuperOffice.Data.SQL.Argument.GreaterThan
- uid: SuperOffice.Data.SQL.GreaterThan
  commentId: T:SuperOffice.Data.SQL.GreaterThan
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: GreaterThan
  nameWithType: GreaterThan
  fullName: SuperOffice.Data.SQL.GreaterThan
- uid: SuperOffice.Data.SQL.Argument.GreaterThanOrEqual*
  commentId: Overload:SuperOffice.Data.SQL.Argument.GreaterThanOrEqual
  isExternal: true
  name: GreaterThanOrEqual
  nameWithType: Argument.GreaterThanOrEqual
  fullName: SuperOffice.Data.SQL.Argument.GreaterThanOrEqual
- uid: SuperOffice.Data.SQL.GreaterThanOrEqual
  commentId: T:SuperOffice.Data.SQL.GreaterThanOrEqual
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: GreaterThanOrEqual
  nameWithType: GreaterThanOrEqual
  fullName: SuperOffice.Data.SQL.GreaterThanOrEqual
- uid: SuperOffice.Data.SQL.Argument.Like*
  commentId: Overload:SuperOffice.Data.SQL.Argument.Like
  isExternal: true
  name: Like
  nameWithType: Argument.Like
  fullName: SuperOffice.Data.SQL.Argument.Like
- uid: SuperOffice.Data.SQL.Like
  commentId: T:SuperOffice.Data.SQL.Like
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Like
  nameWithType: Like
  fullName: SuperOffice.Data.SQL.Like
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SQL.Argument.NotLike*
  commentId: Overload:SuperOffice.Data.SQL.Argument.NotLike
  isExternal: true
  name: NotLike
  nameWithType: Argument.NotLike
  fullName: SuperOffice.Data.SQL.Argument.NotLike
- uid: SuperOffice.Data.SQL.NotLike
  commentId: T:SuperOffice.Data.SQL.NotLike
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: NotLike
  nameWithType: NotLike
  fullName: SuperOffice.Data.SQL.NotLike
- uid: SuperOffice.Data.SQL.Argument.NotBetween*
  commentId: Overload:SuperOffice.Data.SQL.Argument.NotBetween
  isExternal: true
  name: NotBetween
  nameWithType: Argument.NotBetween
  fullName: SuperOffice.Data.SQL.Argument.NotBetween
- uid: SuperOffice.Data.SQL.NotBetween
  commentId: T:SuperOffice.Data.SQL.NotBetween
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: NotBetween
  nameWithType: NotBetween
  fullName: SuperOffice.Data.SQL.NotBetween
- uid: SuperOffice.Data.SQL.Argument.Between*
  commentId: Overload:SuperOffice.Data.SQL.Argument.Between
  isExternal: true
  name: Between
  nameWithType: Argument.Between
  fullName: SuperOffice.Data.SQL.Argument.Between
- uid: SuperOffice.Data.SQL.Between
  commentId: T:SuperOffice.Data.SQL.Between
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Between
  nameWithType: Between
  fullName: SuperOffice.Data.SQL.Between
- uid: SuperOffice.Data.SQL.Argument.In*
  commentId: Overload:SuperOffice.Data.SQL.Argument.In
  isExternal: true
  name: In
  nameWithType: Argument.In
  fullName: SuperOffice.Data.SQL.Argument.In
- uid: SuperOffice.Data.SQL.Argument[]
  isExternal: true
  name: Argument[]
  nameWithType: Argument[]
  fullName: SuperOffice.Data.SQL.Argument[]
  nameWithType.vb: Argument()
  fullName.vb: SuperOffice.Data.SQL.Argument()
  name.vb: Argument()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.In
  commentId: T:SuperOffice.Data.SQL.In
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: In
  nameWithType: In
  fullName: SuperOffice.Data.SQL.In
- uid: SuperOffice.Data.SQL.Argument.HasAny*
  commentId: Overload:SuperOffice.Data.SQL.Argument.HasAny
  isExternal: true
  name: HasAny
  nameWithType: Argument.HasAny
  fullName: SuperOffice.Data.SQL.Argument.HasAny
- uid: SuperOffice.Data.SQL.HasAny
  commentId: T:SuperOffice.Data.SQL.HasAny
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: HasAny
  nameWithType: HasAny
  fullName: SuperOffice.Data.SQL.HasAny
- uid: SuperOffice.Data.SQL.Argument.HasAll*
  commentId: Overload:SuperOffice.Data.SQL.Argument.HasAll
  isExternal: true
  name: HasAll
  nameWithType: Argument.HasAll
  fullName: SuperOffice.Data.SQL.Argument.HasAll
- uid: SuperOffice.Data.SQL.HasAll
  commentId: T:SuperOffice.Data.SQL.HasAll
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: HasAll
  nameWithType: HasAll
  fullName: SuperOffice.Data.SQL.HasAll
- uid: SuperOffice.Data.SQL.Argument.MissingAny*
  commentId: Overload:SuperOffice.Data.SQL.Argument.MissingAny
  isExternal: true
  name: MissingAny
  nameWithType: Argument.MissingAny
  fullName: SuperOffice.Data.SQL.Argument.MissingAny
- uid: SuperOffice.Data.SQL.MissingAny
  commentId: T:SuperOffice.Data.SQL.MissingAny
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: MissingAny
  nameWithType: MissingAny
  fullName: SuperOffice.Data.SQL.MissingAny
- uid: SuperOffice.Data.SQL.Argument.MissingAll*
  commentId: Overload:SuperOffice.Data.SQL.Argument.MissingAll
  isExternal: true
  name: MissingAll
  nameWithType: Argument.MissingAll
  fullName: SuperOffice.Data.SQL.Argument.MissingAll
- uid: SuperOffice.Data.SQL.MissingAll
  commentId: T:SuperOffice.Data.SQL.MissingAll
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: MissingAll
  nameWithType: MissingAll
  fullName: SuperOffice.Data.SQL.MissingAll
- uid: SuperOffice.Data.SQL.Argument.IsNull*
  commentId: Overload:SuperOffice.Data.SQL.Argument.IsNull
  isExternal: true
  name: IsNull
  nameWithType: Argument.IsNull
  fullName: SuperOffice.Data.SQL.Argument.IsNull
- uid: SuperOffice.Data.SQL.IsNull
  commentId: T:SuperOffice.Data.SQL.IsNull
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: IsNull
  nameWithType: IsNull
  fullName: SuperOffice.Data.SQL.IsNull
- uid: SuperOffice.Data.SQL.Argument.IsNotNull*
  commentId: Overload:SuperOffice.Data.SQL.Argument.IsNotNull
  isExternal: true
  name: IsNotNull
  nameWithType: Argument.IsNotNull
  fullName: SuperOffice.Data.SQL.Argument.IsNotNull
- uid: SuperOffice.Data.SQL.IsNotNull
  commentId: T:SuperOffice.Data.SQL.IsNotNull
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: IsNotNull
  nameWithType: IsNotNull
  fullName: SuperOffice.Data.SQL.IsNotNull
- uid: SuperOffice.Data.SQL.Argument.NotIn*
  commentId: Overload:SuperOffice.Data.SQL.Argument.NotIn
  isExternal: true
  name: NotIn
  nameWithType: Argument.NotIn
  fullName: SuperOffice.Data.SQL.Argument.NotIn
- uid: SuperOffice.Data.SQL.NotIn
  commentId: T:SuperOffice.Data.SQL.NotIn
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: NotIn
  nameWithType: NotIn
  fullName: SuperOffice.Data.SQL.NotIn
- uid: SuperOffice.Data.SQL.Argument.ToArgumentArray*
  commentId: Overload:SuperOffice.Data.SQL.Argument.ToArgumentArray
  isExternal: true
  name: ToArgumentArray
  nameWithType: Argument.ToArgumentArray
  fullName: SuperOffice.Data.SQL.Argument.ToArgumentArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.SQL.QueryElement.GetSubElements
  commentId: M:SuperOffice.Data.SQL.QueryElement.GetSubElements
  parent: SuperOffice.Data.SQL.QueryElement
  isExternal: true
  name: GetSubElements()
  nameWithType: QueryElement.GetSubElements()
  fullName: SuperOffice.Data.SQL.QueryElement.GetSubElements()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.QueryElement.GetSubElements
    name: GetSubElements
    nameWithType: QueryElement.GetSubElements
    fullName: SuperOffice.Data.SQL.QueryElement.GetSubElements
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.QueryElement.GetSubElements
    name: GetSubElements
    nameWithType: QueryElement.GetSubElements
    fullName: SuperOffice.Data.SQL.QueryElement.GetSubElements
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.Argument.GetSubElements*
  commentId: Overload:SuperOffice.Data.SQL.Argument.GetSubElements
  isExternal: true
  name: GetSubElements
  nameWithType: Argument.GetSubElements
  fullName: SuperOffice.Data.SQL.Argument.GetSubElements
- uid: SuperOffice.Data.SQL.QueryElement[]
  isExternal: true
  name: QueryElement[]
  nameWithType: QueryElement[]
  fullName: SuperOffice.Data.SQL.QueryElement[]
  nameWithType.vb: QueryElement()
  fullName.vb: SuperOffice.Data.SQL.QueryElement()
  name.vb: QueryElement()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.QueryElement
    name: QueryElement
    nameWithType: QueryElement
    fullName: SuperOffice.Data.SQL.QueryElement
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.QueryElement
    name: QueryElement
    nameWithType: QueryElement
    fullName: SuperOffice.Data.SQL.QueryElement
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.SQL.Argument.Alias*
  commentId: Overload:SuperOffice.Data.SQL.Argument.Alias
  isExternal: true
  name: Alias
  nameWithType: Argument.Alias
  fullName: SuperOffice.Data.SQL.Argument.Alias
- uid: SuperOffice.Data.SQL.Alias
  commentId: T:SuperOffice.Data.SQL.Alias
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Alias
  nameWithType: Alias
  fullName: SuperOffice.Data.SQL.Alias
- uid: SuperOffice.Data.SQL.Argument.DataType*
  commentId: Overload:SuperOffice.Data.SQL.Argument.DataType
  isExternal: true
  name: DataType
  nameWithType: Argument.DataType
  fullName: SuperOffice.Data.SQL.Argument.DataType
- uid: SuperOffice.Data.SQL.Argument.Size*
  commentId: Overload:SuperOffice.Data.SQL.Argument.Size
  isExternal: true
  name: Size
  nameWithType: Argument.Size
  fullName: SuperOffice.Data.SQL.Argument.Size
