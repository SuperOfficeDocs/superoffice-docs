### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.SQL.GroupBy
  commentId: T:SuperOffice.Data.SQL.GroupBy
  id: GroupBy
  parent: SuperOffice.Data.SQL
  children:
  - SuperOffice.Data.SQL.GroupBy.#ctor
  - SuperOffice.Data.SQL.GroupBy.Contains(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.SQL.GroupBy.GetNumberOfItems
  - SuperOffice.Data.SQL.GroupBy.Grouping
  - SuperOffice.Data.SQL.GroupBy.Item(System.Int32)
  - SuperOffice.Data.SQL.GroupBy.ToString
  langs:
  - csharp
  - vb
  name: GroupBy
  nameWithType: GroupBy
  fullName: SuperOffice.Data.SQL.GroupBy
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nThe Divide class\n"
  syntax:
    content: public sealed class GroupBy
    content.vb: Public NotInheritable Class GroupBy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.SQL.GroupBy.EnumUtil.MapEnums``2
  - SuperOffice.Data.SQL.GroupBy.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.GroupBy)
  - SuperOffice.Data.SQL.GroupBy.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.SQL.GroupBy.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Data.SQL.GroupBy.#ctor
  commentId: M:SuperOffice.Data.SQL.GroupBy.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.SQL.GroupBy
  langs:
  - csharp
  - vb
  name: GroupBy()
  nameWithType: GroupBy.GroupBy()
  fullName: SuperOffice.Data.SQL.GroupBy.GroupBy()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nInitializes a new instance of the <xref href=\"SuperOffice.Data.SQL.GroupBy\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public GroupBy()
    content.vb: Public Sub New
  overload: SuperOffice.Data.SQL.GroupBy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.GroupBy.GetNumberOfItems
  commentId: M:SuperOffice.Data.SQL.GroupBy.GetNumberOfItems
  id: GetNumberOfItems
  parent: SuperOffice.Data.SQL.GroupBy
  langs:
  - csharp
  - vb
  name: GetNumberOfItems()
  nameWithType: GroupBy.GetNumberOfItems()
  fullName: SuperOffice.Data.SQL.GroupBy.GetNumberOfItems()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nGet number of items in the collection.\n"
  syntax:
    content: public int GetNumberOfItems()
    return:
      type: System.Int32
      description: Number of items
    content.vb: Public Function GetNumberOfItems As Integer
  overload: SuperOffice.Data.SQL.GroupBy.GetNumberOfItems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.GroupBy.Contains(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.SQL.GroupBy.Contains(SuperOffice.Data.SQL.FieldInfo)
  id: Contains(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.SQL.GroupBy
  langs:
  - csharp
  - vb
  name: Contains(FieldInfo)
  nameWithType: GroupBy.Contains(FieldInfo)
  fullName: SuperOffice.Data.SQL.GroupBy.Contains(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nContains checks the GroupBy collection for a specific FieldInfo.\n"
  syntax:
    content: public bool Contains(FieldInfo field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.FieldInfo
      description: The FieldInfo we want to know if exists or not.
    return:
      type: System.Boolean
      description: "\nReturns true if the FieldInfo exists, false if not.\n"
    content.vb: Public Function Contains(field As FieldInfo) As Boolean
  overload: SuperOffice.Data.SQL.GroupBy.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.SQL.GroupBy.ToString
  commentId: M:SuperOffice.Data.SQL.GroupBy.ToString
  id: ToString
  parent: SuperOffice.Data.SQL.GroupBy
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GroupBy.ToString()
  fullName: SuperOffice.Data.SQL.GroupBy.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nString output.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: GROUP BY ...
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SuperOffice.Data.SQL.GroupBy.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.Data.SQL.GroupBy.Grouping
  commentId: P:SuperOffice.Data.SQL.GroupBy.Grouping
  id: Grouping
  parent: SuperOffice.Data.SQL.GroupBy
  langs:
  - csharp
  - vb
  name: Grouping
  nameWithType: GroupBy.Grouping
  fullName: SuperOffice.Data.SQL.GroupBy.Grouping
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nMainTableName to get the GroupBy collection.\n"
  syntax:
    content: public ArgumentCollection Grouping { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.ArgumentCollection
    content.vb: Public ReadOnly Property Grouping As ArgumentCollection
  overload: SuperOffice.Data.SQL.GroupBy.Grouping*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.SQL.GroupBy.Item(System.Int32)
  commentId: P:SuperOffice.Data.SQL.GroupBy.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.Data.SQL.GroupBy
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: GroupBy.Item[Int32]
  fullName: SuperOffice.Data.SQL.GroupBy.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.SQL
  summary: "\nReturns the Argument on a specific index.\n"
  syntax:
    content: public Argument this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.Argument
    content.vb: Public ReadOnly Property Item(index As Integer) As Argument
  overload: SuperOffice.Data.SQL.GroupBy.Item*
  nameWithType.vb: GroupBy.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Data.SQL.GroupBy.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.GroupBy.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<GroupBy, To>()
  nameWithType: EnumUtil.MapEnums<GroupBy, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.GroupBy, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of GroupBy, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.GroupBy, To)()
  name.vb: MapEnums(Of GroupBy, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<GroupBy, To>
    nameWithType: EnumUtil.MapEnums<GroupBy, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.SQL.GroupBy, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of GroupBy, To)
    nameWithType: EnumUtil.MapEnums(Of GroupBy, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.SQL.GroupBy, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.GroupBy.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.SQL.GroupBy)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<GroupBy>(GroupBy)
  nameWithType: ObjectExtensions.AssignByReflection<GroupBy>(GroupBy)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.GroupBy>(SuperOffice.Data.SQL.GroupBy)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of GroupBy)(GroupBy)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.GroupBy)(SuperOffice.Data.SQL.GroupBy)
  name.vb: AssignByReflection(Of GroupBy)(GroupBy)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<GroupBy>
    nameWithType: ObjectExtensions.AssignByReflection<GroupBy>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.SQL.GroupBy>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: SuperOffice.Data.SQL.GroupBy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of GroupBy)
    nameWithType: ObjectExtensions.AssignByReflection(Of GroupBy)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.SQL.GroupBy)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: SuperOffice.Data.SQL.GroupBy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.GroupBy.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<GroupBy>()
  nameWithType: ObjectExtensions.GraphCopy<GroupBy>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.GroupBy>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of GroupBy)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.GroupBy)()
  name.vb: GraphCopy(Of GroupBy)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<GroupBy>
    nameWithType: ObjectExtensions.GraphCopy<GroupBy>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.SQL.GroupBy>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of GroupBy)
    nameWithType: ObjectExtensions.GraphCopy(Of GroupBy)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.SQL.GroupBy)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.GroupBy.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<GroupBy, To>()
  nameWithType: Converters.MapEnums<GroupBy, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.GroupBy, To>()
  nameWithType.vb: Converters.MapEnums(Of GroupBy, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.GroupBy, To)()
  name.vb: MapEnums(Of GroupBy, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<GroupBy, To>
    nameWithType: Converters.MapEnums<GroupBy, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.SQL.GroupBy, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of GroupBy, To)
    nameWithType: Converters.MapEnums(Of GroupBy, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.SQL.GroupBy, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.GroupBy.#ctor*
  commentId: Overload:SuperOffice.Data.SQL.GroupBy.#ctor
  isExternal: true
  name: GroupBy
  nameWithType: GroupBy.GroupBy
  fullName: SuperOffice.Data.SQL.GroupBy.GroupBy
- uid: SuperOffice.Data.SQL.GroupBy.GetNumberOfItems*
  commentId: Overload:SuperOffice.Data.SQL.GroupBy.GetNumberOfItems
  isExternal: true
  name: GetNumberOfItems
  nameWithType: GroupBy.GetNumberOfItems
  fullName: SuperOffice.Data.SQL.GroupBy.GetNumberOfItems
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.SQL.GroupBy.Contains*
  commentId: Overload:SuperOffice.Data.SQL.GroupBy.Contains
  isExternal: true
  name: Contains
  nameWithType: GroupBy.Contains
  fullName: SuperOffice.Data.SQL.GroupBy.Contains
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.GroupBy.ToString*
  commentId: Overload:SuperOffice.Data.SQL.GroupBy.ToString
  isExternal: true
  name: ToString
  nameWithType: GroupBy.ToString
  fullName: SuperOffice.Data.SQL.GroupBy.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.SQL.GroupBy.Grouping*
  commentId: Overload:SuperOffice.Data.SQL.GroupBy.Grouping
  isExternal: true
  name: Grouping
  nameWithType: GroupBy.Grouping
  fullName: SuperOffice.Data.SQL.GroupBy.Grouping
- uid: SuperOffice.Data.SQL.ArgumentCollection
  commentId: T:SuperOffice.Data.SQL.ArgumentCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: ArgumentCollection
  nameWithType: ArgumentCollection
  fullName: SuperOffice.Data.SQL.ArgumentCollection
- uid: SuperOffice.Data.SQL.GroupBy.Item*
  commentId: Overload:SuperOffice.Data.SQL.GroupBy.Item
  isExternal: true
  name: Item
  nameWithType: GroupBy.Item
  fullName: SuperOffice.Data.SQL.GroupBy.Item
- uid: SuperOffice.Data.SQL.Argument
  commentId: T:SuperOffice.Data.SQL.Argument
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Argument
  nameWithType: Argument
  fullName: SuperOffice.Data.SQL.Argument
