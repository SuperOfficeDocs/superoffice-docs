### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  commentId: T:SuperOffice.Security.Principal.SoCredentialsSecurityToken
  id: SoCredentialsSecurityToken
  parent: SuperOffice.Security.Principal
  children:
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor(SuperOffice.Security.Principal.SoCredentials)
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor(System.String)
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket(System.String)
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketSecretPrefix
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketStringPrefix
  langs:
  - csharp
  - vb
  name: SoCredentialsSecurityToken
  nameWithType: SoCredentialsSecurityToken
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nSecurity token representing <xref href=\"SuperOffice.Security.Principal.SoCredentials\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nQuite possibly, the System.ServiceModel.BinarySecretSecurityToken would have been a \nmore suited base class, but right now we&apos;re not referencing that part of the universe.\nSo instead we&apos;ll piggyback on UserNameSecurityToken, even if that is a bit odd. We&apos;ll use\nthe ticket string as the username.\n"
  syntax:
    content: 'public sealed class SoCredentialsSecurityToken : UserNameSecurityToken'
    content.vb: >-
      Public NotInheritable Class SoCredentialsSecurityToken
          Inherits UserNameSecurityToken
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.EnumUtil.MapEnums``2
  - SuperOffice.Security.Principal.SoCredentialsSecurityToken.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketStringPrefix
  commentId: F:SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketStringPrefix
  id: TicketStringPrefix
  parent: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  langs:
  - csharp
  - vb
  name: TicketStringPrefix
  nameWithType: SoCredentialsSecurityToken.TicketStringPrefix
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketStringPrefix
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nMagic string at start of ticket, so we can recognize it\n"
  syntax:
    content: public const string TicketStringPrefix = "7T:"
    return:
      type: System.String
    content.vb: Public Const TicketStringPrefix As String = "7T:"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketSecretPrefix
  commentId: F:SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketSecretPrefix
  id: TicketSecretPrefix
  parent: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  langs:
  - csharp
  - vb
  name: TicketSecretPrefix
  nameWithType: SoCredentialsSecurityToken.TicketSecretPrefix
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketSecretPrefix
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public const string TicketSecretPrefix = "7S:"
    return:
      type: System.String
    content.vb: Public Const TicketSecretPrefix As String = "7S:"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor(System.String)
  commentId: M:SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  langs:
  - csharp
  - vb
  name: SoCredentialsSecurityToken(String)
  nameWithType: SoCredentialsSecurityToken.SoCredentialsSecurityToken(String)
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.SoCredentialsSecurityToken(System.String)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nCreate a new instance of the Security Token.\n"
  syntax:
    content: public SoCredentialsSecurityToken(string ticket)
    parameters:
    - id: ticket
      type: System.String
    content.vb: Public Sub New(ticket As String)
  overload: SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor(SuperOffice.Security.Principal.SoCredentials)
  commentId: M:SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor(SuperOffice.Security.Principal.SoCredentials)
  id: '#ctor(SuperOffice.Security.Principal.SoCredentials)'
  parent: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  langs:
  - csharp
  - vb
  name: SoCredentialsSecurityToken(SoCredentials)
  nameWithType: SoCredentialsSecurityToken.SoCredentialsSecurityToken(SoCredentials)
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.SoCredentialsSecurityToken(SuperOffice.Security.Principal.SoCredentials)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nCreate a new instance of the Security Token.\n"
  syntax:
    content: public SoCredentialsSecurityToken(SoCredentials credentials)
    parameters:
    - id: credentials
      type: SuperOffice.Security.Principal.SoCredentials
      description: Credentials held by the Security Token
    content.vb: Public Sub New(credentials As SoCredentials)
  overload: SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials
  commentId: M:SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials
  id: GetCredentials
  parent: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  langs:
  - csharp
  - vb
  name: GetCredentials()
  nameWithType: SoCredentialsSecurityToken.GetCredentials()
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nObtain a new instance of SoCredentials with the contained values.\n"
  syntax:
    content: public SoCredentials GetCredentials()
    return:
      type: SuperOffice.Security.Principal.SoCredentials
      description: New instance of SoCredentials with the contained values.
    content.vb: Public Function GetCredentials As SoCredentials
  overload: SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket(System.String)
  commentId: M:SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket(System.String)
  id: IsUserNameTicket(System.String)
  parent: SuperOffice.Security.Principal.SoCredentialsSecurityToken
  langs:
  - csharp
  - vb
  name: IsUserNameTicket(String)
  nameWithType: SoCredentialsSecurityToken.IsUserNameTicket(String)
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nCheck if a UserName is a ticket. See if it starts with the <xref href=\"SuperOffice.Security.Principal.SoCredentialsSecurityToken.TicketStringPrefix\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public static bool IsUserNameTicket(string userName)
    parameters:
    - id: userName
      type: System.String
      description: '&quot;7T:F00BA82193==&quot;'
    return:
      type: System.Boolean
      description: True if the username is a ticket
    content.vb: Public Shared Function IsUserNameTicket(userName As String) As Boolean
  overload: SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoCredentialsSecurityToken, To>()
  nameWithType: EnumUtil.MapEnums<SoCredentialsSecurityToken, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Security.Principal.SoCredentialsSecurityToken, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoCredentialsSecurityToken, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Security.Principal.SoCredentialsSecurityToken, To)()
  name.vb: MapEnums(Of SoCredentialsSecurityToken, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoCredentialsSecurityToken, To>
    nameWithType: EnumUtil.MapEnums<SoCredentialsSecurityToken, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Security.Principal.SoCredentialsSecurityToken, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoCredentialsSecurityToken, To)
    nameWithType: EnumUtil.MapEnums(Of SoCredentialsSecurityToken, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Security.Principal.SoCredentialsSecurityToken, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoCredentialsSecurityToken, To>()
  nameWithType: Converters.MapEnums<SoCredentialsSecurityToken, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.Principal.SoCredentialsSecurityToken, To>()
  nameWithType.vb: Converters.MapEnums(Of SoCredentialsSecurityToken, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.Principal.SoCredentialsSecurityToken, To)()
  name.vb: MapEnums(Of SoCredentialsSecurityToken, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoCredentialsSecurityToken, To>
    nameWithType: Converters.MapEnums<SoCredentialsSecurityToken, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.Principal.SoCredentialsSecurityToken, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoCredentialsSecurityToken, To)
    nameWithType: Converters.MapEnums(Of SoCredentialsSecurityToken, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.Principal.SoCredentialsSecurityToken, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor*
  commentId: Overload:SuperOffice.Security.Principal.SoCredentialsSecurityToken.#ctor
  isExternal: true
  name: SoCredentialsSecurityToken
  nameWithType: SoCredentialsSecurityToken.SoCredentialsSecurityToken
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.SoCredentialsSecurityToken
- uid: SuperOffice.Security.Principal.SoCredentials
  commentId: T:SuperOffice.Security.Principal.SoCredentials
  parent: SuperOffice.Security.Principal
  isExternal: true
  name: SoCredentials
  nameWithType: SoCredentials
  fullName: SuperOffice.Security.Principal.SoCredentials
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials*
  commentId: Overload:SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials
  isExternal: true
  name: GetCredentials
  nameWithType: SoCredentialsSecurityToken.GetCredentials
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.GetCredentials
- uid: SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket*
  commentId: Overload:SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket
  isExternal: true
  name: IsUserNameTicket
  nameWithType: SoCredentialsSecurityToken.IsUserNameTicket
  fullName: SuperOffice.Security.Principal.SoCredentialsSecurityToken.IsUserNameTicket
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
