### YamlMime:ManagedReference
items:
- uid: SuperOffice.Threading.ParallelConsumerQueue`1
  commentId: T:SuperOffice.Threading.ParallelConsumerQueue`1
  id: ParallelConsumerQueue`1
  parent: SuperOffice.Threading
  children:
  - SuperOffice.Threading.ParallelConsumerQueue`1.#ctor(System.Int32)
  - SuperOffice.Threading.ParallelConsumerQueue`1.Enqueue(`0)
  - SuperOffice.Threading.ParallelConsumerQueue`1.StartConsumers(System.Int32,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - SuperOffice.Threading.ParallelConsumerQueue`1.WaitForConsumers
  langs:
  - csharp
  - vb
  name: ParallelConsumerQueue<T>
  nameWithType: ParallelConsumerQueue<T>
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nA simple, threadsafe and blocking queue.\nContains methods to easily have multiple, identical consumer threads.\n"
  remarks: "\n<ul><li>Enqueue, Dequeue are thread-safe</li><li>If the queue is empty, Dequeue will <strong>block</strong> instead of throwing an exception</li><li>If the queue is &quot;full&quot; (maxCapacity specified in constructor has been reached), then Enqueue will block</li></ul>\nThe purpose of this class is to be used in a producer/consumer scenario, where the producer thread adds to the queue\nwhile the consumer thread feeds off the queue. The producer thread should block if the queue becomes too large,\nwhile the consumer thread should block until work becomes available.\n<p></p>\nThere is no explicit method to signal &quot;end-of-processing&quot; to the consumer, but pushing NULL on the\nqueue as an end marker is a simple way to do it - generally valid queue items will not be null.\n<p></p>\nThe <xref href=\"SuperOffice.Threading.ParallelConsumerQueue%601.StartConsumers(System.Int32%2cSystem.Func%7b%600%2cSystem.Threading.CancellationToken%2cSystem.Threading.Tasks.Task%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SuperOffice.Threading.ParallelConsumerQueue%601.WaitForConsumers\" data-throw-if-not-resolved=\"false\"></xref> methods are used if you have a consumer method to be run in its own thread,\nand you want one or more such to be easily started and stopped.\n"
  syntax:
    content: 'public class ParallelConsumerQueue<T> : Object where T : class'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ParallelConsumerQueue(Of T As Class)
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Threading.ParallelConsumerQueue`1.EnumUtil.MapEnums``2
  - SuperOffice.Threading.ParallelConsumerQueue`1.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: ParallelConsumerQueue(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T)
  name.vb: ParallelConsumerQueue(Of T)
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.#ctor(System.Int32)
  commentId: M:SuperOffice.Threading.ParallelConsumerQueue`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: SuperOffice.Threading.ParallelConsumerQueue`1
  langs:
  - csharp
  - vb
  name: ParallelConsumerQueue(Int32)
  nameWithType: ParallelConsumerQueue<T>.ParallelConsumerQueue(Int32)
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.ParallelConsumerQueue(System.Int32)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nInitialize a queue with a maximum capacity; attempts to add more elements will block until\ncapacity becomes available\n"
  syntax:
    content: public ParallelConsumerQueue(int maxCapacity)
    parameters:
    - id: maxCapacity
      type: System.Int32
      description: Maximum capacity until enqueue blocks
    content.vb: Public Sub New(maxCapacity As Integer)
  overload: SuperOffice.Threading.ParallelConsumerQueue`1.#ctor*
  nameWithType.vb: ParallelConsumerQueue(Of T).ParallelConsumerQueue(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).ParallelConsumerQueue(System.Int32)
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.Enqueue(`0)
  commentId: M:SuperOffice.Threading.ParallelConsumerQueue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: SuperOffice.Threading.ParallelConsumerQueue`1
  langs:
  - csharp
  - vb
  name: Enqueue(T)
  nameWithType: ParallelConsumerQueue<T>.Enqueue(T)
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.Enqueue(T)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nAdd an element, and signal the internal semaphore\n"
  syntax:
    content: public void Enqueue(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to add to queue
    content.vb: Public Sub Enqueue(item As T)
  overload: SuperOffice.Threading.ParallelConsumerQueue`1.Enqueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if Enqueue is called after termination has started.
  nameWithType.vb: ParallelConsumerQueue(Of T).Enqueue(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).Enqueue(T)
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.StartConsumers(System.Int32,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:SuperOffice.Threading.ParallelConsumerQueue`1.StartConsumers(System.Int32,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: StartConsumers(System.Int32,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: SuperOffice.Threading.ParallelConsumerQueue`1
  langs:
  - csharp
  - vb
  name: StartConsumers(Int32, Func<T, CancellationToken, Task>, CancellationToken)
  nameWithType: ParallelConsumerQueue<T>.StartConsumers(Int32, Func<T, CancellationToken, Task>, CancellationToken)
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.StartConsumers(System.Int32, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nStart <strong>n</strong> simultaneous consumer threads, each running the same code. The consumer methods have to take a single\nparameter, a queue item, and are called whenever there is something on the queue (items are <xref href=\"SuperOffice.Threading.ParallelConsumerQueue%601.Dequeue\" data-throw-if-not-resolved=\"false\"></xref>&apos;d\nand the consumer method invoked once per item). null items cannot be used as they signal end-of-work on the queue\n"
  syntax:
    content: public void StartConsumers(int numberOfParallelTasks, Func<T, CancellationToken, Task> consumerActionAsync, CancellationToken cancellationToken = null)
    parameters:
    - id: numberOfParallelTasks
      type: System.Int32
      description: Number of consumer threads to run
    - id: consumerActionAsync
      type: System.Func{{T},System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: >-
        Method to be invoked per item to be consumed - the method should

        <strong>not</strong> call <xref href="SuperOffice.Threading.ParallelConsumerQueue%601.Dequeue" data-throw-if-not-resolved="false"></xref> as that has already been done
    - id: cancellationToken
      type: System.Threading.CancellationToken
    content.vb: Public Sub StartConsumers(numberOfParallelTasks As Integer, consumerActionAsync As Func(Of T, CancellationToken, Task), cancellationToken As CancellationToken = Nothing)
  overload: SuperOffice.Threading.ParallelConsumerQueue`1.StartConsumers*
  nameWithType.vb: ParallelConsumerQueue(Of T).StartConsumers(Int32, Func(Of T, CancellationToken, Task), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).StartConsumers(System.Int32, System.Func(Of T, System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: StartConsumers(Int32, Func(Of T, CancellationToken, Task), CancellationToken)
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.WaitForConsumers
  commentId: M:SuperOffice.Threading.ParallelConsumerQueue`1.WaitForConsumers
  id: WaitForConsumers
  parent: SuperOffice.Threading.ParallelConsumerQueue`1
  langs:
  - csharp
  - vb
  name: WaitForConsumers()
  nameWithType: ParallelConsumerQueue<T>.WaitForConsumers()
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.WaitForConsumers()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: "\nPush a null (end mark) on the queue, for each known consumer task. This will cause the consumer tasks to finish\n"
  remarks: "\nIt is not permitted to <xref href=\"SuperOffice.Threading.ParallelConsumerQueue%601.Enqueue(%600)\" data-throw-if-not-resolved=\"false\"></xref> more items to the queue after calling this method.\n"
  syntax:
    content: public Task WaitForConsumers()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function WaitForConsumers As Task
  overload: SuperOffice.Threading.ParallelConsumerQueue`1.WaitForConsumers*
  nameWithType.vb: ParallelConsumerQueue(Of T).WaitForConsumers()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).WaitForConsumers()
references:
- uid: SuperOffice.Threading
  commentId: N:SuperOffice.Threading
  isExternal: true
  name: SuperOffice.Threading
  nameWithType: SuperOffice.Threading
  fullName: SuperOffice.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ParallelConsumerQueue<T>, To>()
  nameWithType: EnumUtil.MapEnums<ParallelConsumerQueue<T>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Threading.ParallelConsumerQueue<T>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ParallelConsumerQueue(Of T), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Threading.ParallelConsumerQueue(Of T), To)()
  name.vb: MapEnums(Of ParallelConsumerQueue(Of T), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ParallelConsumerQueue<T>, To>
    nameWithType: EnumUtil.MapEnums<ParallelConsumerQueue<T>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Threading.ParallelConsumerQueue<T>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ParallelConsumerQueue(Of T), To)
    nameWithType: EnumUtil.MapEnums(Of ParallelConsumerQueue(Of T), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Threading.ParallelConsumerQueue(Of T), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ParallelConsumerQueue<T>, To>()
  nameWithType: Converters.MapEnums<ParallelConsumerQueue<T>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Threading.ParallelConsumerQueue<T>, To>()
  nameWithType.vb: Converters.MapEnums(Of ParallelConsumerQueue(Of T), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Threading.ParallelConsumerQueue(Of T), To)()
  name.vb: MapEnums(Of ParallelConsumerQueue(Of T), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ParallelConsumerQueue<T>, To>
    nameWithType: Converters.MapEnums<ParallelConsumerQueue<T>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Threading.ParallelConsumerQueue<T>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ParallelConsumerQueue(Of T), To)
    nameWithType: Converters.MapEnums(Of ParallelConsumerQueue(Of T), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Threading.ParallelConsumerQueue(Of T), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.#ctor*
  commentId: Overload:SuperOffice.Threading.ParallelConsumerQueue`1.#ctor
  isExternal: true
  name: ParallelConsumerQueue
  nameWithType: ParallelConsumerQueue<T>.ParallelConsumerQueue
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.ParallelConsumerQueue
  nameWithType.vb: ParallelConsumerQueue(Of T).ParallelConsumerQueue
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).ParallelConsumerQueue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.Enqueue*
  commentId: Overload:SuperOffice.Threading.ParallelConsumerQueue`1.Enqueue
  isExternal: true
  name: Enqueue
  nameWithType: ParallelConsumerQueue<T>.Enqueue
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.Enqueue
  nameWithType.vb: ParallelConsumerQueue(Of T).Enqueue
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).Enqueue
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.StartConsumers*
  commentId: Overload:SuperOffice.Threading.ParallelConsumerQueue`1.StartConsumers
  isExternal: true
  name: StartConsumers
  nameWithType: ParallelConsumerQueue<T>.StartConsumers
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.StartConsumers
  nameWithType.vb: ParallelConsumerQueue(Of T).StartConsumers
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).StartConsumers
- uid: System.Func{{T},System.Threading.CancellationToken,System.Threading.Tasks.Task}
  commentId: '!:System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task}'
  definition: System.Func`3
  name: Func<T, CancellationToken, Task>
  nameWithType: Func<T, CancellationToken, Task>
  fullName: System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, CancellationToken, Task)
  fullName.vb: System.Func(Of T, System.Threading.CancellationToken, System.Threading.Tasks.Task)
  name.vb: Func(Of T, CancellationToken, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Func`3
  commentId: '!:System.Func`3'
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: System.Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Threading.ParallelConsumerQueue`1.WaitForConsumers*
  commentId: Overload:SuperOffice.Threading.ParallelConsumerQueue`1.WaitForConsumers
  isExternal: true
  name: WaitForConsumers
  nameWithType: ParallelConsumerQueue<T>.WaitForConsumers
  fullName: SuperOffice.Threading.ParallelConsumerQueue<T>.WaitForConsumers
  nameWithType.vb: ParallelConsumerQueue(Of T).WaitForConsumers
  fullName.vb: SuperOffice.Threading.ParallelConsumerQueue(Of T).WaitForConsumers
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
