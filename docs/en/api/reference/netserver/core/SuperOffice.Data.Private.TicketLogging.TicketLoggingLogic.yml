### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
  commentId: T:SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
  id: TicketLoggingLogic
  parent: SuperOffice.Data.Private.TicketLogging
  children:
  - SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.#ctor
  - SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  langs:
  - csharp
  - vb
  name: TicketLoggingLogic
  nameWithType: TicketLoggingLogic
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  summary: "\nImplementation of ticket-logging logic; all required data will come in through parameters\n"
  syntax:
    content: >-
      [SoInject("Database")]

      public class TicketLoggingLogic : Object, ITicketLoggingLogic
    content.vb: >-
      <SoInject("Database")>

      Public Class TicketLoggingLogic
          Inherits Object
          Implements ITicketLoggingLogic
  inheritance:
  - System.Object
  implements:
  - SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  extensionMethods:
  - SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.EnumUtil.MapEnums``2
  - SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)
  - SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Database
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.#ctor
  commentId: M:SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
  langs:
  - csharp
  - vb
  name: TicketLoggingLogic()
  nameWithType: TicketLoggingLogic.TicketLoggingLogic()
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.TicketLoggingLogic()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public TicketLoggingLogic()
    content.vb: Public Sub New
  overload: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  commentId: M:SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  id: LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  parent: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
  langs:
  - csharp
  - vb
  name: LogFromTicketData(TicketLoggerProcessor.QueryData)
  nameWithType: TicketLoggingLogic.LogFromTicketData(TicketLoggerProcessor.QueryData)
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  summary: "\nLogs ticket changes if the supplied data suggests that event should be logged.\n"
  syntax:
    content: public Nullable<int> LogFromTicketData(TicketLoggerProcessor.QueryData queryData)
    parameters:
    - id: queryData
      type: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
      description: Contains information regarding query that changed the ticket
    return:
      type: System.Nullable{System.Int32}
      description: Returns PK of TicketLogAction row that was inserted. If logic inside the method decides that event does not need to be logged, returns null
    content.vb: Public Function LogFromTicketData(queryData As TicketLoggerProcessor.QueryData) As Nullable(Of Integer)
  overload: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData*
  implements:
  - SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Data.Private.TicketLogging
  commentId: N:SuperOffice.Data.Private.TicketLogging
  isExternal: true
  name: SuperOffice.Data.Private.TicketLogging
  nameWithType: SuperOffice.Data.Private.TicketLogging
  fullName: SuperOffice.Data.Private.TicketLogging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  commentId: T:SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  parent: SuperOffice.Data.Private.TicketLogging
  isExternal: true
  name: ITicketLoggingLogic
  nameWithType: ITicketLoggingLogic
  fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<TicketLoggingLogic, To>()
  nameWithType: EnumUtil.MapEnums<TicketLoggingLogic, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of TicketLoggingLogic, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To)()
  name.vb: MapEnums(Of TicketLoggingLogic, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<TicketLoggingLogic, To>
    nameWithType: EnumUtil.MapEnums<TicketLoggingLogic, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of TicketLoggingLogic, To)
    nameWithType: EnumUtil.MapEnums(Of TicketLoggingLogic, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<TicketLoggingLogic>(TicketLoggingLogic)
  nameWithType: ObjectExtensions.AssignByReflection<TicketLoggingLogic>(TicketLoggingLogic)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic>(SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of TicketLoggingLogic)(TicketLoggingLogic)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)(SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)
  name.vb: AssignByReflection(Of TicketLoggingLogic)(TicketLoggingLogic)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<TicketLoggingLogic>
    nameWithType: ObjectExtensions.AssignByReflection<TicketLoggingLogic>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
    name: TicketLoggingLogic
    nameWithType: TicketLoggingLogic
    fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of TicketLoggingLogic)
    nameWithType: ObjectExtensions.AssignByReflection(Of TicketLoggingLogic)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
    name: TicketLoggingLogic
    nameWithType: TicketLoggingLogic
    fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<TicketLoggingLogic>()
  nameWithType: ObjectExtensions.GraphCopy<TicketLoggingLogic>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of TicketLoggingLogic)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)()
  name.vb: GraphCopy(Of TicketLoggingLogic)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<TicketLoggingLogic>
    nameWithType: ObjectExtensions.GraphCopy<TicketLoggingLogic>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of TicketLoggingLogic)
    nameWithType: ObjectExtensions.GraphCopy(Of TicketLoggingLogic)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<TicketLoggingLogic, To>()
  nameWithType: Converters.MapEnums<TicketLoggingLogic, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To>()
  nameWithType.vb: Converters.MapEnums(Of TicketLoggingLogic, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To)()
  name.vb: MapEnums(Of TicketLoggingLogic, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<TicketLoggingLogic, To>
    nameWithType: Converters.MapEnums<TicketLoggingLogic, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of TicketLoggingLogic, To)
    nameWithType: Converters.MapEnums(Of TicketLoggingLogic, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.#ctor*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.#ctor
  isExternal: true
  name: TicketLoggingLogic
  nameWithType: TicketLoggingLogic.TicketLoggingLogic
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.TicketLoggingLogic
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData
  isExternal: true
  name: LogFromTicketData
  nameWithType: TicketLoggingLogic.LogFromTicketData
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggingLogic.LogFromTicketData
- uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  commentId: M:SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  parent: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic
  isExternal: true
  name: LogFromTicketData(TicketLoggerProcessor.QueryData)
  nameWithType: ITicketLoggingLogic.LogFromTicketData(TicketLoggerProcessor.QueryData)
  fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
  spec.csharp:
  - uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
    name: LogFromTicketData
    nameWithType: ITicketLoggingLogic.LogFromTicketData
    fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
    name: TicketLoggerProcessor.QueryData
    nameWithType: TicketLoggerProcessor.QueryData
    fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData(SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData)
    name: LogFromTicketData
    nameWithType: ITicketLoggingLogic.LogFromTicketData
    fullName: SuperOffice.Data.Private.TicketLogging.ITicketLoggingLogic.LogFromTicketData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
    name: TicketLoggerProcessor.QueryData
    nameWithType: TicketLoggerProcessor.QueryData
    fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
  commentId: T:SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
  parent: SuperOffice.Data.Private.TicketLogging
  isExternal: true
  name: TicketLoggerProcessor.QueryData
  nameWithType: TicketLoggerProcessor.QueryData
  fullName: SuperOffice.Data.Private.TicketLogging.TicketLoggerProcessor.QueryData
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
