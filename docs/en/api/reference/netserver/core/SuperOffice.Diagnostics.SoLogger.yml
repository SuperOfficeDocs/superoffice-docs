### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.SoLogger
  commentId: T:SuperOffice.Diagnostics.SoLogger
  id: SoLogger
  parent: SuperOffice.Diagnostics
  children:
  - SuperOffice.Diagnostics.SoLogger.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)
  - SuperOffice.Diagnostics.SoLogger.BeginScope(System.String,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.BeginScope``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Generic.Dictionary{System.String,System.Double})
  - SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  - SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Specialized.NameValueCollection,System.ValueTuple{System.String,System.Double}[])
  - SuperOffice.Diagnostics.SoLogger.Count(System.String,System.String,System.Double)
  - SuperOffice.Diagnostics.SoLogger.Count(System.String,System.String[])
  - SuperOffice.Diagnostics.SoLogger.Count(System.String,System.ValueTuple{System.String,System.Double}[])
  - SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo
  - SuperOffice.Diagnostics.SoLogger.GetLogger(System.String)
  - SuperOffice.Diagnostics.SoLogger.GetLogger(System.Type)
  - SuperOffice.Diagnostics.SoLogger.GetLogger``1
  - SuperOffice.Diagnostics.SoLogger.LogCritical``1(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogCritical``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogDebug(System.String,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogDebug``1(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogDebug``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogError(System.String,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogError``1(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogError``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogException(System.Diagnostics.EventLogEntryType,System.Exception,System.Boolean)
  - SuperOffice.Diagnostics.SoLogger.LogExceptionError(System.String,System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogExceptionError``1(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogExceptionWarning(System.String,System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogFailure(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.Logger
  - SuperOffice.Diagnostics.SoLogger.LogInformation(System.String,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogInformation``1(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogInformation``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogSuccess(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogTrace(System.String,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogTrace``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogWarning(System.String,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogWarning``1(System.Exception,System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.LogWarning``1(System.String,System.Object[])
  - SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(SuperOffice.Diagnostics.LogEntryInfo)
  - SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(System.Collections.Specialized.NameValueCollection)
  - SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue(System.String,System.String)
  - SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues(System.String[],System.String[])
  - SuperOffice.Diagnostics.SoLogger.StartOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - SuperOffice.Diagnostics.SoLogger.StartOperation(System.String,System.String[])
  langs:
  - csharp
  - vb
  name: SoLogger
  nameWithType: SoLogger
  fullName: SuperOffice.Diagnostics.SoLogger
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nSummary description for SoLogger.\n"
  syntax:
    content: 'public sealed class SoLogger : Object'
    content.vb: >-
      Public NotInheritable Class SoLogger
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Diagnostics.SoLogger.EnumUtil.MapEnums``2
  - SuperOffice.Diagnostics.SoLogger.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.Diagnostics.SoLogger.StartOperation(System.String,System.String[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.StartOperation(System.String,System.String[])
  id: StartOperation(System.String,System.String[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: StartOperation(String, String[])
  nameWithType: SoLogger.StartOperation(String, String[])
  fullName: SuperOffice.Diagnostics.SoLogger.StartOperation(System.String, System.String[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nLog an operation\n"
  syntax:
    content: public static IDisposable StartOperation(string operationname, params string[] args)
    parameters:
    - id: operationname
      type: System.String
      description: Name of operation being traced
    - id: args
      type: System.String[]
      description: Additional strings to add to trace (optional)
    return:
      type: System.IDisposable
      description: an operation tracer. Dispose it to signal end of operation
    content.vb: Public Shared Function StartOperation(operationname As String, ParamArray args As String()) As IDisposable
  overload: SuperOffice.Diagnostics.SoLogger.StartOperation*
  nameWithType.vb: SoLogger.StartOperation(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.StartOperation(System.String, System.String())
  name.vb: StartOperation(String, String())
- uid: SuperOffice.Diagnostics.SoLogger.StartOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:SuperOffice.Diagnostics.SoLogger.StartOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: StartOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: StartOperation(String, IDictionary<String, String>)
  nameWithType: SoLogger.StartOperation(String, IDictionary<String, String>)
  fullName: SuperOffice.Diagnostics.SoLogger.StartOperation(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nLog an operation with properties\n"
  syntax:
    content: public static IDisposable StartOperation(string operationname, IDictionary<string, string> args)
    parameters:
    - id: operationname
      type: System.String
      description: Name of operation being traced
    - id: args
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: Additional string key/values to add to trace
    return:
      type: System.IDisposable
      description: an operation tracer. Dispose it to signal end of operation
    content.vb: Public Shared Function StartOperation(operationname As String, args As IDictionary(Of String, String)) As IDisposable
  overload: SuperOffice.Diagnostics.SoLogger.StartOperation*
  nameWithType.vb: SoLogger.StartOperation(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.StartOperation(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: StartOperation(String, IDictionary(Of String, String))
- uid: SuperOffice.Diagnostics.SoLogger.Count(System.String,System.String[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.Count(System.String,System.String[])
  id: Count(System.String,System.String[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Count(String, String[])
  nameWithType: SoLogger.Count(String, String[])
  fullName: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.String[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCount 1 for these names.\n"
  syntax:
    content: public static void Count(string eventName, params string[] counterNames)
    parameters:
    - id: eventName
      type: System.String
    - id: counterNames
      type: System.String[]
    content.vb: Public Shared Sub Count(eventName As String, ParamArray counterNames As String())
  overload: SuperOffice.Diagnostics.SoLogger.Count*
  nameWithType.vb: SoLogger.Count(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.String())
  name.vb: Count(String, String())
- uid: SuperOffice.Diagnostics.SoLogger.Count(System.String,System.String,System.Double)
  commentId: M:SuperOffice.Diagnostics.SoLogger.Count(System.String,System.String,System.Double)
  id: Count(System.String,System.String,System.Double)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Count(String, String, Double)
  nameWithType: SoLogger.Count(String, String, Double)
  fullName: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.String, System.Double)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCount a single value\n"
  syntax:
    content: public static void Count(string eventName, string counterName, double counterValue)
    parameters:
    - id: eventName
      type: System.String
    - id: counterName
      type: System.String
    - id: counterValue
      type: System.Double
    content.vb: Public Shared Sub Count(eventName As String, counterName As String, counterValue As Double)
  overload: SuperOffice.Diagnostics.SoLogger.Count*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Diagnostics.SoLogger.Count(System.String,System.ValueTuple{System.String,System.Double}[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.Count(System.String,System.ValueTuple{System.String,System.Double}[])
  id: Count(System.String,System.ValueTuple{System.String,System.Double}[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Count(String, ValueTuple<String, Double>[])
  nameWithType: SoLogger.Count(String, ValueTuple<String, Double>[])
  fullName: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.ValueTuple<System.String, System.Double>[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCount a multiple values without having to construct a dictionary first\n"
  syntax:
    content: public static void Count(string eventName, params ValueTuple<string, double>[] pairs)
    parameters:
    - id: eventName
      type: System.String
    - id: pairs
      type: System.ValueTuple{System.String,System.Double}[]
    content.vb: Public Shared Sub Count(eventName As String, ParamArray pairs As ValueTuple(Of String, Double)())
  overload: SuperOffice.Diagnostics.SoLogger.Count*
  nameWithType.vb: SoLogger.Count(String, ValueTuple(Of String, Double)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.ValueTuple(Of System.String, System.Double)())
  name.vb: Count(String, ValueTuple(Of String, Double)())
- uid: SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Generic.Dictionary{System.String,System.Double})
  commentId: M:SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Generic.Dictionary{System.String,System.Double})
  id: Count(System.String,System.Collections.Generic.Dictionary{System.String,System.Double})
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Count(String, Dictionary<String, Double>)
  nameWithType: SoLogger.Count(String, Dictionary<String, Double>)
  fullName: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.Collections.Generic.Dictionary<System.String, System.Double>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCount a multiple values\n"
  syntax:
    content: public static void Count(string eventName, Dictionary<string, double> metrics)
    parameters:
    - id: eventName
      type: System.String
    - id: metrics
      type: System.Collections.Generic.Dictionary{System.String,System.Double}
    content.vb: Public Shared Sub Count(eventName As String, metrics As Dictionary(Of String, Double))
  overload: SuperOffice.Diagnostics.SoLogger.Count*
  nameWithType.vb: SoLogger.Count(String, Dictionary(Of String, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Double))
  name.vb: Count(String, Dictionary(Of String, Double))
- uid: SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Specialized.NameValueCollection,System.ValueTuple{System.String,System.Double}[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Specialized.NameValueCollection,System.ValueTuple{System.String,System.Double}[])
  id: Count(System.String,System.Collections.Specialized.NameValueCollection,System.ValueTuple{System.String,System.Double}[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Count(String, NameValueCollection, ValueTuple<String, Double>[])
  nameWithType: SoLogger.Count(String, NameValueCollection, ValueTuple<String, Double>[])
  fullName: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.Collections.Specialized.NameValueCollection, System.ValueTuple<System.String, System.Double>[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCount a multiple values\n"
  syntax:
    content: public static void Count(string eventName, NameValueCollection env, params ValueTuple<string, double>[] pairs)
    parameters:
    - id: eventName
      type: System.String
    - id: env
      type: System.Collections.Specialized.NameValueCollection
    - id: pairs
      type: System.ValueTuple{System.String,System.Double}[]
    content.vb: Public Shared Sub Count(eventName As String, env As NameValueCollection, ParamArray pairs As ValueTuple(Of String, Double)())
  overload: SuperOffice.Diagnostics.SoLogger.Count*
  nameWithType.vb: SoLogger.Count(String, NameValueCollection, ValueTuple(Of String, Double)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.Collections.Specialized.NameValueCollection, System.ValueTuple(Of System.String, System.Double)())
  name.vb: Count(String, NameValueCollection, ValueTuple(Of String, Double)())
- uid: SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  commentId: M:SuperOffice.Diagnostics.SoLogger.Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  id: Count(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Double})
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Count(String, NameValueCollection, Dictionary<String, Double>)
  nameWithType: SoLogger.Count(String, NameValueCollection, Dictionary<String, Double>)
  fullName: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.Collections.Specialized.NameValueCollection, System.Collections.Generic.Dictionary<System.String, System.Double>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCount a multiple values\n"
  syntax:
    content: public static void Count(string eventName, NameValueCollection env, Dictionary<string, double> metrics)
    parameters:
    - id: eventName
      type: System.String
    - id: env
      type: System.Collections.Specialized.NameValueCollection
    - id: metrics
      type: System.Collections.Generic.Dictionary{System.String,System.Double}
    content.vb: Public Shared Sub Count(eventName As String, env As NameValueCollection, metrics As Dictionary(Of String, Double))
  overload: SuperOffice.Diagnostics.SoLogger.Count*
  nameWithType.vb: SoLogger.Count(String, NameValueCollection, Dictionary(Of String, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.Count(System.String, System.Collections.Specialized.NameValueCollection, System.Collections.Generic.Dictionary(Of System.String, System.Double))
  name.vb: Count(String, NameValueCollection, Dictionary(Of String, Double))
- uid: SuperOffice.Diagnostics.SoLogger.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)
  commentId: M:SuperOffice.Diagnostics.SoLogger.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)
  id: '#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)'
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: SoLogger(ILoggerFactory, IServiceProvider)
  nameWithType: SoLogger.SoLogger(ILoggerFactory, IServiceProvider)
  fullName: SuperOffice.Diagnostics.SoLogger.SoLogger(Microsoft.Extensions.Logging.ILoggerFactory, System.IServiceProvider)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nDependency injection constructor. \n"
  syntax:
    content: public SoLogger(ILoggerFactory loggerFactory, IServiceProvider serviceProvider)
    parameters:
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: Logger factory ready to make new loggers on demand
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Public Sub New(loggerFactory As ILoggerFactory, serviceProvider As IServiceProvider)
  overload: SuperOffice.Diagnostics.SoLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.GetLogger(System.String)
  commentId: M:SuperOffice.Diagnostics.SoLogger.GetLogger(System.String)
  id: GetLogger(System.String)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: GetLogger(String)
  nameWithType: SoLogger.GetLogger(String)
  fullName: SuperOffice.Diagnostics.SoLogger.GetLogger(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public ILogger GetLogger(string categoryName)
    parameters:
    - id: categoryName
      type: System.String
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Function GetLogger(categoryName As String) As ILogger
  overload: SuperOffice.Diagnostics.SoLogger.GetLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.GetLogger(System.Type)
  commentId: M:SuperOffice.Diagnostics.SoLogger.GetLogger(System.Type)
  id: GetLogger(System.Type)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: GetLogger(Type)
  nameWithType: SoLogger.GetLogger(Type)
  fullName: SuperOffice.Diagnostics.SoLogger.GetLogger(System.Type)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public ILogger GetLogger(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Function GetLogger(type As Type) As ILogger
  overload: SuperOffice.Diagnostics.SoLogger.GetLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.GetLogger``1
  commentId: M:SuperOffice.Diagnostics.SoLogger.GetLogger``1
  id: GetLogger``1
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: GetLogger<T>()
  nameWithType: SoLogger.GetLogger<T>()
  fullName: SuperOffice.Diagnostics.SoLogger.GetLogger<T>()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public ILogger<T> GetLogger<T>()
    typeParameters:
    - id: T
    return:
      type: Microsoft.Extensions.Logging.ILogger{{T}}
    content.vb: Public Function GetLogger(Of T) As ILogger(Of T)
  overload: SuperOffice.Diagnostics.SoLogger.GetLogger*
  nameWithType.vb: SoLogger.GetLogger(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Diagnostics.SoLogger.GetLogger(Of T)()
  name.vb: GetLogger(Of T)()
- uid: SuperOffice.Diagnostics.SoLogger.LogException(System.Diagnostics.EventLogEntryType,System.Exception,System.Boolean)
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogException(System.Diagnostics.EventLogEntryType,System.Exception,System.Boolean)
  id: LogException(System.Diagnostics.EventLogEntryType,System.Exception,System.Boolean)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogException(EventLogEntryType, Exception, Boolean)
  nameWithType: SoLogger.LogException(EventLogEntryType, Exception, Boolean)
  fullName: SuperOffice.Diagnostics.SoLogger.LogException(System.Diagnostics.EventLogEntryType, System.Exception, System.Boolean)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nLog an exception. Logging will be done to a log file, debugger trace, and SuperOffice crash log service\ndepending on the options set in the config file.\n"
  syntax:
    content: public void LogException(EventLogEntryType logType, Exception exception, bool lightLogOutput = false)
    parameters:
    - id: logType
      type: System.Diagnostics.EventLogEntryType
    - id: exception
      type: System.Exception
    - id: lightLogOutput
      type: System.Boolean
    content.vb: Public Sub LogException(logType As EventLogEntryType, exception As Exception, lightLogOutput As Boolean = False)
  overload: SuperOffice.Diagnostics.SoLogger.LogException*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue(System.String,System.String)
  commentId: M:SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue(System.String,System.String)
  id: SetPermanentAdditionalValue(System.String,System.String)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: SetPermanentAdditionalValue(String, String)
  nameWithType: SoLogger.SetPermanentAdditionalValue(String, String)
  fullName: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue(System.String, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nSet one named value to be added to any logged events. This name/value will remain valid until manually reset or changed.\n"
  syntax:
    content: public static void SetPermanentAdditionalValue(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: Name of item
    - id: value
      type: System.String
      description: Value of item
    content.vb: Public Shared Sub SetPermanentAdditionalValue(name As String, value As String)
  overload: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues(System.String[],System.String[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues(System.String[],System.String[])
  id: SetPermanentAdditionalValues(System.String[],System.String[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: SetPermanentAdditionalValues(String[], String[])
  nameWithType: SoLogger.SetPermanentAdditionalValues(String[], String[])
  fullName: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues(System.String[], System.String[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nSet an array of named values to be added to any logged events. These names/values will remain valid until manually reset or changed.\n"
  syntax:
    content: public static void SetPermanentAdditionalValues(string[] names, string[] values)
    parameters:
    - id: names
      type: System.String[]
      description: Names of items
    - id: values
      type: System.String[]
      description: Values of items
    content.vb: Public Shared Sub SetPermanentAdditionalValues(names As String(), values As String())
  overload: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues*
  nameWithType.vb: SoLogger.SetPermanentAdditionalValues(String(), String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues(System.String(), System.String())
  name.vb: SetPermanentAdditionalValues(String(), String())
- uid: SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo
  commentId: M:SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo
  id: GetEnvironmentInfo
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: GetEnvironmentInfo()
  nameWithType: SoLogger.GetEnvironmentInfo()
  fullName: SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nGet a name/value collection of environmental information, from all subscribers to our event. Also\nadd any hard-set additional values.\n"
  syntax:
    content: public NameValueCollection GetEnvironmentInfo()
    return:
      type: System.Collections.Specialized.NameValueCollection
    content.vb: Public Function GetEnvironmentInfo As NameValueCollection
  overload: SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(SuperOffice.Diagnostics.LogEntryInfo)
  commentId: M:SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(SuperOffice.Diagnostics.LogEntryInfo)
  id: PopulateEnvironmentInfo(SuperOffice.Diagnostics.LogEntryInfo)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: PopulateEnvironmentInfo(LogEntryInfo)
  nameWithType: SoLogger.PopulateEnvironmentInfo(LogEntryInfo)
  fullName: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(SuperOffice.Diagnostics.LogEntryInfo)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nPopulate environment information for a log entry.\n"
  syntax:
    content: public void PopulateEnvironmentInfo(LogEntryInfo entry)
    parameters:
    - id: entry
      type: SuperOffice.Diagnostics.LogEntryInfo
      description: The entry to populate environment information on.
    content.vb: Public Sub PopulateEnvironmentInfo(entry As LogEntryInfo)
  overload: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(System.Collections.Specialized.NameValueCollection)
  commentId: M:SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(System.Collections.Specialized.NameValueCollection)
  id: PopulateEnvironmentInfo(System.Collections.Specialized.NameValueCollection)
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: PopulateEnvironmentInfo(NameValueCollection)
  nameWithType: SoLogger.PopulateEnvironmentInfo(NameValueCollection)
  fullName: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo(System.Collections.Specialized.NameValueCollection)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nPopulate environment information for a log entry.\n"
  syntax:
    content: public void PopulateEnvironmentInfo(NameValueCollection values)
    parameters:
    - id: values
      type: System.Collections.Specialized.NameValueCollection
      description: Collection to hold the values.
    content.vb: Public Sub PopulateEnvironmentInfo(values As NameValueCollection)
  overload: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLogger.BeginScope``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.BeginScope``1(System.String,System.Object[])
  id: BeginScope``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: BeginScope<T>(String, Object[])
  nameWithType: SoLogger.BeginScope<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.BeginScope<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nOpen a logging scope\n"
  syntax:
    content: public static IDisposable BeginScope<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Summary message
    - id: args
      type: System.Object[]
      description: Details for message
    typeParameters:
    - id: T
    return:
      type: System.IDisposable
      description: Disposable scope. Dispose to close scope.
    content.vb: Public Shared Function BeginScope(Of T)(message As String, ParamArray args As Object()) As IDisposable
  overload: SuperOffice.Diagnostics.SoLogger.BeginScope*
  nameWithType.vb: SoLogger.BeginScope(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.BeginScope(Of T)(System.String, System.Object())
  name.vb: BeginScope(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.BeginScope(System.String,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.BeginScope(System.String,System.String,System.Object[])
  id: BeginScope(System.String,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: BeginScope(String, String, Object[])
  nameWithType: SoLogger.BeginScope(String, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.BeginScope(System.String, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nOpen a logging scope\n"
  syntax:
    content: public static IDisposable BeginScope(string category, string message, params object[] args)
    parameters:
    - id: category
      type: System.String
    - id: message
      type: System.String
      description: Summary message
    - id: args
      type: System.Object[]
      description: Details for message
    return:
      type: System.IDisposable
      description: Disposable scope. Dispose to close scope.
    content.vb: Public Shared Function BeginScope(category As String, message As String, ParamArray args As Object()) As IDisposable
  overload: SuperOffice.Diagnostics.SoLogger.BeginScope*
  nameWithType.vb: SoLogger.BeginScope(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.BeginScope(System.String, System.String, System.Object())
  name.vb: BeginScope(String, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogDebug``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogDebug``1(System.String,System.Object[])
  id: LogDebug``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogDebug<T>(String, Object[])
  nameWithType: SoLogger.LogDebug<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogDebug<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Debug to the logging system. \n"
  syntax:
    content: public static void LogDebug<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Summary message
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogDebug(Of T)(message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogDebug*
  nameWithType.vb: SoLogger.LogDebug(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogDebug(Of T)(System.String, System.Object())
  name.vb: LogDebug(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogDebug(System.String,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogDebug(System.String,System.String,System.Object[])
  id: LogDebug(System.String,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogDebug(String, String, Object[])
  nameWithType: SoLogger.LogDebug(String, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogDebug(System.String, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Debug to the logging system. \n"
  syntax:
    content: public static void LogDebug(string categoryName, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogDebug(categoryName As String, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogDebug*
  nameWithType.vb: SoLogger.LogDebug(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogDebug(System.String, System.String, System.Object())
  name.vb: LogDebug(String, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogTrace``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogTrace``1(System.String,System.Object[])
  id: LogTrace``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogTrace<T>(String, Object[])
  nameWithType: SoLogger.LogTrace<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogTrace<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Trace to the logging system. \n"
  syntax:
    content: public static void LogTrace<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogTrace(Of T)(message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogTrace*
  nameWithType.vb: SoLogger.LogTrace(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogTrace(Of T)(System.String, System.Object())
  name.vb: LogTrace(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogTrace(System.String,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogTrace(System.String,System.String,System.Object[])
  id: LogTrace(System.String,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogTrace(String, String, Object[])
  nameWithType: SoLogger.LogTrace(String, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogTrace(System.String, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Trace to the logging system. \n"
  syntax:
    content: public static void LogTrace(string categoryName, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogTrace(categoryName As String, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogTrace*
  nameWithType.vb: SoLogger.LogTrace(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogTrace(System.String, System.String, System.Object())
  name.vb: LogTrace(String, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogInformation``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogInformation``1(System.String,System.Object[])
  id: LogInformation``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogInformation<T>(String, Object[])
  nameWithType: SoLogger.LogInformation<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogInformation<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Information to the logging system. \n"
  syntax:
    content: public static void LogInformation<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogInformation(Of T)(message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogInformation*
  nameWithType.vb: SoLogger.LogInformation(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogInformation(Of T)(System.String, System.Object())
  name.vb: LogInformation(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogInformation(System.String,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogInformation(System.String,System.String,System.Object[])
  id: LogInformation(System.String,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogInformation(String, String, Object[])
  nameWithType: SoLogger.LogInformation(String, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogInformation(System.String, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Information to the logging system. \n"
  syntax:
    content: public static void LogInformation(string categoryName, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogInformation(categoryName As String, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogInformation*
  nameWithType.vb: SoLogger.LogInformation(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogInformation(System.String, System.String, System.Object())
  name.vb: LogInformation(String, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogWarning``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogWarning``1(System.String,System.Object[])
  id: LogWarning``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogWarning<T>(String, Object[])
  nameWithType: SoLogger.LogWarning<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogWarning<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Warning to the logging system. \n"
  syntax:
    content: public static void LogWarning<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogWarning(Of T)(message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogWarning*
  nameWithType.vb: SoLogger.LogWarning(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogWarning(Of T)(System.String, System.Object())
  name.vb: LogWarning(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogWarning(System.String,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogWarning(System.String,System.String,System.Object[])
  id: LogWarning(System.String,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogWarning(String, String, Object[])
  nameWithType: SoLogger.LogWarning(String, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogWarning(System.String, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Warning to the logging system. \n"
  syntax:
    content: public static void LogWarning(string categoryName, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogWarning(categoryName As String, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogWarning*
  nameWithType.vb: SoLogger.LogWarning(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogWarning(System.String, System.String, System.Object())
  name.vb: LogWarning(String, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogExceptionWarning(System.String,System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogExceptionWarning(System.String,System.Exception,System.String,System.Object[])
  id: LogExceptionWarning(System.String,System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogExceptionWarning(String, Exception, String, Object[])
  nameWithType: SoLogger.LogExceptionWarning(String, Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogExceptionWarning(System.String, System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Warning to the logging system. \n"
  syntax:
    content: public static void LogExceptionWarning(string categoryName, Exception exception, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: exception
      type: System.Exception
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogExceptionWarning(categoryName As String, exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogExceptionWarning*
  nameWithType.vb: SoLogger.LogExceptionWarning(String, Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogExceptionWarning(System.String, System.Exception, System.String, System.Object())
  name.vb: LogExceptionWarning(String, Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogError``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogError``1(System.String,System.Object[])
  id: LogError``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogError<T>(String, Object[])
  nameWithType: SoLogger.LogError<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogError<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Error to the logging system. \n"
  syntax:
    content: public static void LogError<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogError(Of T)(message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogError*
  nameWithType.vb: SoLogger.LogError(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogError(Of T)(System.String, System.Object())
  name.vb: LogError(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogExceptionError``1(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogExceptionError``1(System.Exception,System.String,System.Object[])
  id: LogExceptionError``1(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogExceptionError<T>(Exception, String, Object[])
  nameWithType: SoLogger.LogExceptionError<T>(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogExceptionError<T>(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public static void LogExceptionError<T>(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
    - id: message
      type: System.String
    - id: args
      type: System.Object[]
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogExceptionError(Of T)(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogExceptionError*
  nameWithType.vb: SoLogger.LogExceptionError(Of T)(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogExceptionError(Of T)(System.Exception, System.String, System.Object())
  name.vb: LogExceptionError(Of T)(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogError(System.String,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogError(System.String,System.String,System.Object[])
  id: LogError(System.String,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogError(String, String, Object[])
  nameWithType: SoLogger.LogError(String, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogError(System.String, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Error to the logging system. \n"
  syntax:
    content: public static void LogError(string categoryName, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogError(categoryName As String, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogError*
  nameWithType.vb: SoLogger.LogError(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogError(System.String, System.String, System.Object())
  name.vb: LogError(String, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogExceptionError(System.String,System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogExceptionError(System.String,System.Exception,System.String,System.Object[])
  id: LogExceptionError(System.String,System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogExceptionError(String, Exception, String, Object[])
  nameWithType: SoLogger.LogExceptionError(String, Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogExceptionError(System.String, System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Error to the logging system. \n"
  syntax:
    content: public static void LogExceptionError(string categoryName, Exception exception, string message, params object[] args)
    parameters:
    - id: categoryName
      type: System.String
      description: Log category - usually the type name
    - id: exception
      type: System.Exception
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogExceptionError(categoryName As String, exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogExceptionError*
  nameWithType.vb: SoLogger.LogExceptionError(String, Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogExceptionError(System.String, System.Exception, System.String, System.Object())
  name.vb: LogExceptionError(String, Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogCritical``1(System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogCritical``1(System.String,System.Object[])
  id: LogCritical``1(System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogCritical<T>(String, Object[])
  nameWithType: SoLogger.LogCritical<T>(String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogCritical<T>(System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Critical to the logging system. \n"
  syntax:
    content: public static void LogCritical<T>(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogCritical(Of T)(message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogCritical*
  nameWithType.vb: SoLogger.LogCritical(Of T)(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogCritical(Of T)(System.String, System.Object())
  name.vb: LogCritical(Of T)(String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogFailure(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogFailure(System.Exception,System.String,System.Object[])
  id: LogFailure(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogFailure(Exception, String, Object[])
  nameWithType: SoLogger.LogFailure(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogFailure(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Error to the logging system, tagged as FailureAudit.\n"
  syntax:
    content: public static void LogFailure(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogFailure(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogFailure*
  nameWithType.vb: SoLogger.LogFailure(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogFailure(System.Exception, System.String, System.Object())
  name.vb: LogFailure(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogSuccess(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogSuccess(System.Exception,System.String,System.Object[])
  id: LogSuccess(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogSuccess(Exception, String, Object[])
  nameWithType: SoLogger.LogSuccess(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogSuccess(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Information to the logging system, tagged as SuccessAudit.\n"
  syntax:
    content: public static void LogSuccess(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    content.vb: Public Shared Sub LogSuccess(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogSuccess*
  nameWithType.vb: SoLogger.LogSuccess(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogSuccess(System.Exception, System.String, System.Object())
  name.vb: LogSuccess(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogCritical``1(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogCritical``1(System.Exception,System.String,System.Object[])
  id: LogCritical``1(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogCritical<T>(Exception, String, Object[])
  nameWithType: SoLogger.LogCritical<T>(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogCritical<T>(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Critical to the logging system. \n"
  syntax:
    content: public static void LogCritical<T>(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogCritical(Of T)(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogCritical*
  nameWithType.vb: SoLogger.LogCritical(Of T)(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogCritical(Of T)(System.Exception, System.String, System.Object())
  name.vb: LogCritical(Of T)(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogError``1(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogError``1(System.Exception,System.String,System.Object[])
  id: LogError``1(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogError<T>(Exception, String, Object[])
  nameWithType: SoLogger.LogError<T>(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogError<T>(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Error to the logging system. \n"
  syntax:
    content: public static void LogError<T>(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Log message, including {placeholders} for arguments.
    - id: args
      type: System.Object[]
      description: Parameters to message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogError(Of T)(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogError*
  nameWithType.vb: SoLogger.LogError(Of T)(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogError(Of T)(System.Exception, System.String, System.Object())
  name.vb: LogError(Of T)(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogWarning``1(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogWarning``1(System.Exception,System.String,System.Object[])
  id: LogWarning``1(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogWarning<T>(Exception, String, Object[])
  nameWithType: SoLogger.LogWarning<T>(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogWarning<T>(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Warning to the logging system. \n"
  syntax:
    content: public static void LogWarning<T>(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Summary message
    - id: args
      type: System.Object[]
      description: Details for message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogWarning(Of T)(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogWarning*
  nameWithType.vb: SoLogger.LogWarning(Of T)(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogWarning(Of T)(System.Exception, System.String, System.Object())
  name.vb: LogWarning(Of T)(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogInformation``1(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogInformation``1(System.Exception,System.String,System.Object[])
  id: LogInformation``1(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogInformation<T>(Exception, String, Object[])
  nameWithType: SoLogger.LogInformation<T>(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogInformation<T>(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Information to the logging system. \n"
  syntax:
    content: public static void LogInformation<T>(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Summary message
    - id: args
      type: System.Object[]
      description: Details for message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogInformation(Of T)(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogInformation*
  nameWithType.vb: SoLogger.LogInformation(Of T)(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogInformation(Of T)(System.Exception, System.String, System.Object())
  name.vb: LogInformation(Of T)(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.LogDebug``1(System.Exception,System.String,System.Object[])
  commentId: M:SuperOffice.Diagnostics.SoLogger.LogDebug``1(System.Exception,System.String,System.Object[])
  id: LogDebug``1(System.Exception,System.String,System.Object[])
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: LogDebug<T>(Exception, String, Object[])
  nameWithType: SoLogger.LogDebug<T>(Exception, String, Object[])
  fullName: SuperOffice.Diagnostics.SoLogger.LogDebug<T>(System.Exception, System.String, System.Object[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nCreate and log an event of type Debug to the logging system. \n"
  syntax:
    content: public static void LogDebug<T>(Exception exception, string message, params object[] args)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception being thrown
    - id: message
      type: System.String
      description: Summary message
    - id: args
      type: System.Object[]
      description: Details for message
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LogDebug(Of T)(exception As Exception, message As String, ParamArray args As Object())
  overload: SuperOffice.Diagnostics.SoLogger.LogDebug*
  nameWithType.vb: SoLogger.LogDebug(Of T)(Exception, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SoLogger.LogDebug(Of T)(System.Exception, System.String, System.Object())
  name.vb: LogDebug(Of T)(Exception, String, Object())
- uid: SuperOffice.Diagnostics.SoLogger.Logger
  commentId: P:SuperOffice.Diagnostics.SoLogger.Logger
  id: Logger
  parent: SuperOffice.Diagnostics.SoLogger
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: SoLogger.Logger
  fullName: SuperOffice.Diagnostics.SoLogger.Logger
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nGet the singleton instance of the logger class\n"
  syntax:
    content: public static SoLogger Logger { get; }
    parameters: []
    return:
      type: SuperOffice.Diagnostics.SoLogger
    content.vb: Public Shared ReadOnly Property Logger As SoLogger
  overload: SuperOffice.Diagnostics.SoLogger.Logger*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: SuperOffice.Diagnostics
  commentId: N:SuperOffice.Diagnostics
  isExternal: true
  name: SuperOffice.Diagnostics
  nameWithType: SuperOffice.Diagnostics
  fullName: SuperOffice.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Diagnostics.SoLogger.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoLogger, To>()
  nameWithType: EnumUtil.MapEnums<SoLogger, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.SoLogger, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoLogger, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.SoLogger, To)()
  name.vb: MapEnums(Of SoLogger, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoLogger, To>
    nameWithType: EnumUtil.MapEnums<SoLogger, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.SoLogger, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoLogger, To)
    nameWithType: EnumUtil.MapEnums(Of SoLogger, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.SoLogger, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLogger.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoLogger, To>()
  nameWithType: Converters.MapEnums<SoLogger, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.SoLogger, To>()
  nameWithType.vb: Converters.MapEnums(Of SoLogger, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.SoLogger, To)()
  name.vb: MapEnums(Of SoLogger, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoLogger, To>
    nameWithType: Converters.MapEnums<SoLogger, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.SoLogger, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoLogger, To)
    nameWithType: Converters.MapEnums(Of SoLogger, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.SoLogger, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Diagnostics.SoLogger.StartOperation*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.StartOperation
  isExternal: true
  name: StartOperation
  nameWithType: SoLogger.StartOperation
  fullName: SuperOffice.Diagnostics.SoLogger.StartOperation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: '!:System.Collections.Generic.IDictionary{System.String,System.String}'
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLogger.Count*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.Count
  isExternal: true
  name: Count
  nameWithType: SoLogger.Count
  fullName: SuperOffice.Diagnostics.SoLogger.Count
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.ValueTuple{System.String,System.Double}[]
  isExternal: true
  name: ValueTuple<String, Double>[]
  nameWithType: ValueTuple<String, Double>[]
  fullName: System.ValueTuple<System.String, System.Double>[]
  nameWithType.vb: ValueTuple(Of String, Double)()
  fullName.vb: System.ValueTuple(Of System.String, System.Double)()
  name.vb: ValueTuple(Of String, Double)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{System.String,System.Double}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Double}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Double>
  nameWithType: Dictionary<String, Double>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Double>
  nameWithType.vb: Dictionary(Of String, Double)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Double)
  name.vb: Dictionary(Of String, Double)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Specialized.NameValueCollection
  isExternal: true
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: SuperOffice.Diagnostics.SoLogger.#ctor*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.#ctor
  isExternal: true
  name: SoLogger
  nameWithType: SoLogger.SoLogger
  fullName: SuperOffice.Diagnostics.SoLogger.SoLogger
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: '!:Microsoft.Extensions.Logging.ILoggerFactory'
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: System.IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: SuperOffice.Diagnostics.SoLogger.GetLogger*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.GetLogger
  isExternal: true
  name: GetLogger
  nameWithType: SoLogger.GetLogger
  fullName: SuperOffice.Diagnostics.SoLogger.GetLogger
- uid: Microsoft.Extensions.Logging.ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Extensions.Logging.ILogger{{T}}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{``0}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<T>
  nameWithType: ILogger<T>
  fullName: Microsoft.Extensions.Logging.ILogger<T>
  nameWithType.vb: ILogger(Of T)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of T)
  name.vb: ILogger(Of T)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLogger.LogException*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogException
  isExternal: true
  name: LogException
  nameWithType: SoLogger.LogException
  fullName: SuperOffice.Diagnostics.SoLogger.LogException
- uid: System.Diagnostics.EventLogEntryType
  isExternal: true
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue
  isExternal: true
  name: SetPermanentAdditionalValue
  nameWithType: SoLogger.SetPermanentAdditionalValue
  fullName: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValue
- uid: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues
  isExternal: true
  name: SetPermanentAdditionalValues
  nameWithType: SoLogger.SetPermanentAdditionalValues
  fullName: SuperOffice.Diagnostics.SoLogger.SetPermanentAdditionalValues
- uid: SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo
  isExternal: true
  name: GetEnvironmentInfo
  nameWithType: SoLogger.GetEnvironmentInfo
  fullName: SuperOffice.Diagnostics.SoLogger.GetEnvironmentInfo
- uid: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo
  isExternal: true
  name: PopulateEnvironmentInfo
  nameWithType: SoLogger.PopulateEnvironmentInfo
  fullName: SuperOffice.Diagnostics.SoLogger.PopulateEnvironmentInfo
- uid: SuperOffice.Diagnostics.LogEntryInfo
  commentId: T:SuperOffice.Diagnostics.LogEntryInfo
  parent: SuperOffice.Diagnostics
  isExternal: true
  name: LogEntryInfo
  nameWithType: LogEntryInfo
  fullName: SuperOffice.Diagnostics.LogEntryInfo
- uid: SuperOffice.Diagnostics.SoLogger.BeginScope*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.BeginScope
  isExternal: true
  name: BeginScope
  nameWithType: SoLogger.BeginScope
  fullName: SuperOffice.Diagnostics.SoLogger.BeginScope
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Diagnostics.SoLogger.LogDebug*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogDebug
  isExternal: true
  name: LogDebug
  nameWithType: SoLogger.LogDebug
  fullName: SuperOffice.Diagnostics.SoLogger.LogDebug
- uid: SuperOffice.Diagnostics.SoLogger.LogTrace*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogTrace
  isExternal: true
  name: LogTrace
  nameWithType: SoLogger.LogTrace
  fullName: SuperOffice.Diagnostics.SoLogger.LogTrace
- uid: SuperOffice.Diagnostics.SoLogger.LogInformation*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogInformation
  isExternal: true
  name: LogInformation
  nameWithType: SoLogger.LogInformation
  fullName: SuperOffice.Diagnostics.SoLogger.LogInformation
- uid: SuperOffice.Diagnostics.SoLogger.LogWarning*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogWarning
  isExternal: true
  name: LogWarning
  nameWithType: SoLogger.LogWarning
  fullName: SuperOffice.Diagnostics.SoLogger.LogWarning
- uid: SuperOffice.Diagnostics.SoLogger.LogExceptionWarning*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogExceptionWarning
  isExternal: true
  name: LogExceptionWarning
  nameWithType: SoLogger.LogExceptionWarning
  fullName: SuperOffice.Diagnostics.SoLogger.LogExceptionWarning
- uid: SuperOffice.Diagnostics.SoLogger.LogError*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogError
  isExternal: true
  name: LogError
  nameWithType: SoLogger.LogError
  fullName: SuperOffice.Diagnostics.SoLogger.LogError
- uid: SuperOffice.Diagnostics.SoLogger.LogExceptionError*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogExceptionError
  isExternal: true
  name: LogExceptionError
  nameWithType: SoLogger.LogExceptionError
  fullName: SuperOffice.Diagnostics.SoLogger.LogExceptionError
- uid: SuperOffice.Diagnostics.SoLogger.LogCritical*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogCritical
  isExternal: true
  name: LogCritical
  nameWithType: SoLogger.LogCritical
  fullName: SuperOffice.Diagnostics.SoLogger.LogCritical
- uid: SuperOffice.Diagnostics.SoLogger.LogFailure*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogFailure
  isExternal: true
  name: LogFailure
  nameWithType: SoLogger.LogFailure
  fullName: SuperOffice.Diagnostics.SoLogger.LogFailure
- uid: SuperOffice.Diagnostics.SoLogger.LogSuccess*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.LogSuccess
  isExternal: true
  name: LogSuccess
  nameWithType: SoLogger.LogSuccess
  fullName: SuperOffice.Diagnostics.SoLogger.LogSuccess
- uid: SuperOffice.Diagnostics.SoLogger.Logger*
  commentId: Overload:SuperOffice.Diagnostics.SoLogger.Logger
  isExternal: true
  name: Logger
  nameWithType: SoLogger.Logger
  fullName: SuperOffice.Diagnostics.SoLogger.Logger
- uid: SuperOffice.Diagnostics.SoLogger
  commentId: T:SuperOffice.Diagnostics.SoLogger
  parent: SuperOffice.Diagnostics
  isExternal: true
  name: SoLogger
  nameWithType: SoLogger
  fullName: SuperOffice.Diagnostics.SoLogger
