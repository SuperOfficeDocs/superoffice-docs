### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase
  commentId: T:SuperOffice.CRM.Lists.AnyTableListProviderBase
  id: AnyTableListProviderBase
  parent: SuperOffice.CRM.Lists
  children:
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.#ctor
  - SuperOffice.CRM.Lists.AnyTableListProviderBase._historyListSize
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync(SuperOffice.Data.SQL.Select,System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem},System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync(SuperOffice.Data.SoCommand,System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead(SuperOffice.Data.SoDataReader,System.Int16)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction(SuperOffice.Data.SQL.Select)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync(SuperOffice.Data.SQL.Select,System.String)
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo
  langs:
  - csharp
  - vb
  name: AnyTableListProviderBase
  nameWithType: AnyTableListProviderBase
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nBase class for flat &quot;MDO Lists&quot; for any tables, that does not support filtering through group and heading link, etc...\n"
  syntax:
    content: 'public abstract class AnyTableListProviderBase : Object, ISoListProvider, ISoList, IPlugin'
    content.vb: >-
      Public MustInherit Class AnyTableListProviderBase
          Inherits Object
          Implements ISoListProvider, ISoList, IPlugin
  inheritance:
  - System.Object
  implements:
  - SuperOffice.CRM.Lists.ISoListProvider
  - SuperOffice.CRM.Lists.ISoList
  extensionMethods:
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Lists.AnyTableListProviderBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase._historyListSize
  commentId: F:SuperOffice.CRM.Lists.AnyTableListProviderBase._historyListSize
  id: _historyListSize
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: _historyListSize
  nameWithType: AnyTableListProviderBase._historyListSize
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase._historyListSize
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  syntax:
    content: protected int _historyListSize
    return:
      type: System.Int32
    content.vb: Protected _historyListSize As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.#ctor
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: AnyTableListProviderBase()
  nameWithType: AnyTableListProviderBase.AnyTableListProviderBase()
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.AnyTableListProviderBase()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nDefault Constructor\n"
  syntax:
    content: protected AnyTableListProviderBase()
    content.vb: Protected Sub New
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  id: ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ConstructAsync(String, String, Int32[], Boolean, String, Boolean, CancellationToken)
  nameWithType: AnyTableListProviderBase.ConstructAsync(String, String, Int32[], Boolean, String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync(System.String, System.String, System.Int32[], System.Boolean, System.String, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nPhase two of two-stage list construction. To be called right after the constructor, at which point\nall constructors have run, and the class hierarchy is initialized.\n"
  syntax:
    content: public Task ConstructAsync(string listName, string additionalInfo, int[] historyIDs, bool onlyReadHistory, string searchValue, bool forceFlatList, CancellationToken cancellationToken = null)
    parameters:
    - id: listName
      type: System.String
      description: >-
        List name (though note that as implemented by <xref href="SuperOffice.CRM.Lists.MDOProviderBase" data-throw-if-not-resolved="false"></xref>,

        this actually has to be a real table name, so subclasses should override and convert from

        their list name to a real table name) (yes it&apos;s a bit messy)
    - id: additionalInfo
      type: System.String
      description: Additional information to provider
    - id: historyIDs
      type: System.Int32[]
      description: >-
        Array of history ID&apos;s; if non-null, this will BE the history; a non-null but

        empty array will disable reading of history altogether; a null parameter will cause history to be

        read from the database.
    - id: onlyReadHistory
      type: System.Boolean
      description: if true, only history will be read.
    - id: searchValue
      type: System.String
      description: If non-null, the returned list will be flat and only consist of search matches
    - id: forceFlatList
      type: System.Boolean
      description: >-
        If true, the returned list will be flat, though it will still be filtered

        if grouping/filtering has been set up for the list
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ConstructAsync(listName As String, additionalInfo As String, historyIDs As Integer(), onlyReadHistory As Boolean, searchValue As String, forceFlatList As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync*
  implements:
  - SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: AnyTableListProviderBase.ConstructAsync(String, String, Int32(), Boolean, String, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync(System.String, System.String, System.Int32(), System.Boolean, System.String, System.Boolean, System.Threading.CancellationToken)
  name.vb: ConstructAsync(String, String, Int32(), Boolean, String, Boolean, CancellationToken)
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync(System.Threading.CancellationToken)
  id: GetHistoryItemsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: GetHistoryItemsAsync(CancellationToken)
  nameWithType: AnyTableListProviderBase.GetHistoryItemsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nHistory items for the &quot;MDO&quot; list.\n"
  syntax:
    content: public Task<List<ISoListItem>> GetHistoryItemsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}}
    content.vb: Public Function GetHistoryItemsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of List(Of ISoListItem))
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync*
  implements:
  - SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems
  id: ClearHistoryItems
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ClearHistoryItems()
  nameWithType: AnyTableListProviderBase.ClearHistoryItems()
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  syntax:
    content: public void ClearHistoryItems()
    content.vb: Public Sub ClearHistoryItems
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems*
  implements:
  - SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)
  id: GetRootItemsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: GetRootItemsAsync(CancellationToken)
  nameWithType: AnyTableListProviderBase.GetRootItemsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nRoot items (e.g. items) for the &quot;MDO List&quot;.\n"
  syntax:
    content: public Task<List<ISoListItem>> GetRootItemsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}}
    content.vb: Public Function GetRootItemsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of List(Of ISoListItem))
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync*
  implements:
  - SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync(System.Threading.CancellationToken)
  id: GetHeadingItemsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: GetHeadingItemsAsync(CancellationToken)
  nameWithType: AnyTableListProviderBase.GetHeadingItemsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nThis list will never have headings.\n"
  syntax:
    content: public Task<List<ISoListHeading>> GetHeadingItemsAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListHeading}}
    content.vb: Public Function GetHeadingItemsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of List(Of ISoListHeading))
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync*
  implements:
  - SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync(System.Threading.CancellationToken)
  id: GetHistoryItemsFromDbAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: GetHistoryItemsFromDbAsync(CancellationToken)
  nameWithType: AnyTableListProviderBase.GetHistoryItemsFromDbAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nGet all the history items from the database\n"
  syntax:
    content: protected virtual Task<List<ISoListItem>> GetHistoryItemsFromDbAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}}
      description: Root items.
    content.vb: Protected Overridable Function GetHistoryItemsFromDbAsync(cancellationToken As CancellationToken = Nothing) As Task(Of List(Of ISoListItem))
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync
  id: GetRootItemsAsync
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: GetRootItemsAsync()
  nameWithType: AnyTableListProviderBase.GetRootItemsAsync()
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nGet all the root items from the database\n"
  syntax:
    content: protected virtual Task<List<ISoListItem>> GetRootItemsAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}}
      description: History items.
    content.vb: Protected Overridable Function GetRootItemsAsync As Task(Of List(Of ISoListItem))
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  id: OnPreGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: OnPreGetRootItemsAsync(List<ISoListItem>)
  nameWithType: AnyTableListProviderBase.OnPreGetRootItemsAsync(List<ISoListItem>)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync(System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nEvent raised by <xref href=\"SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> before values are fetched from the database.\n"
  syntax:
    content: protected virtual Task OnPreGetRootItemsAsync(List<ISoListItem> items)
    parameters:
    - id: items
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
      description: List of items returned from <xref href="SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function OnPreGetRootItemsAsync(items As List(Of ISoListItem)) As Task
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync*
  nameWithType.vb: AnyTableListProviderBase.OnPreGetRootItemsAsync(List(Of ISoListItem))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync(System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem))
  name.vb: OnPreGetRootItemsAsync(List(Of ISoListItem))
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  id: OnPostGetRootItemsAsync(System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem})
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: OnPostGetRootItemsAsync(List<ISoListItem>)
  nameWithType: AnyTableListProviderBase.OnPostGetRootItemsAsync(List<ISoListItem>)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync(System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nEvent raised by <xref href=\"SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> after values are fetched from the database.\n"
  syntax:
    content: protected virtual Task OnPostGetRootItemsAsync(List<ISoListItem> items)
    parameters:
    - id: items
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
      description: List of items returned from <xref href="SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function OnPostGetRootItemsAsync(items As List(Of ISoListItem)) As Task
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync*
  nameWithType.vb: AnyTableListProviderBase.OnPostGetRootItemsAsync(List(Of ISoListItem))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync(System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem))
  name.vb: OnPostGetRootItemsAsync(List(Of ISoListItem))
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction(SuperOffice.Data.SQL.Select)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction(SuperOffice.Data.SQL.Select)
  id: SetHistoryRestriction(SuperOffice.Data.SQL.Select)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: SetHistoryRestriction(Select)
  nameWithType: AnyTableListProviderBase.SetHistoryRestriction(Select)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction(SuperOffice.Data.SQL.Select)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSet History restriction to the query.  <xref href=\"SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo\" data-throw-if-not-resolved=\"false\"></xref> is used when manipulating the query.\n"
  syntax:
    content: protected virtual void SetHistoryRestriction(Select sql)
    parameters:
    - id: sql
      type: SuperOffice.Data.SQL.Select
      description: The query to modify.
    content.vb: Protected Overridable Sub SetHistoryRestriction(sql As  Select)
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference
  id: SetHistoryListSizeFromPreference
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: SetHistoryListSizeFromPreference()
  nameWithType: AnyTableListProviderBase.SetHistoryListSizeFromPreference()
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  syntax:
    content: protected void SetHistoryListSizeFromPreference()
    content.vb: Protected Sub SetHistoryListSizeFromPreference
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync(SuperOffice.Data.SQL.Select,System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem},System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync(SuperOffice.Data.SQL.Select,System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem},System.Threading.CancellationToken)
  id: ExecuteQueryAsync(SuperOffice.Data.SQL.Select,System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem},System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ExecuteQueryAsync(Select, List<ISoListItem>, CancellationToken)
  nameWithType: AnyTableListProviderBase.ExecuteQueryAsync(Select, List<ISoListItem>, CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync(SuperOffice.Data.SQL.Select, System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nExecute the query in the database.\n"
  syntax:
    content: protected virtual Task ExecuteQueryAsync(Select sql, List<ISoListItem> resultCollection, CancellationToken cancellationToken = null)
    parameters:
    - id: sql
      type: SuperOffice.Data.SQL.Select
      description: The query to execute in the database.
    - id: resultCollection
      type: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
      description: Collection holding the results of the query.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function ExecuteQueryAsync(sql As  Select, resultCollection As List(Of ISoListItem), cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync*
  nameWithType.vb: AnyTableListProviderBase.ExecuteQueryAsync(Select, List(Of ISoListItem), CancellationToken)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync(SuperOffice.Data.SQL.Select, System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem), System.Threading.CancellationToken)
  name.vb: ExecuteQueryAsync(Select, List(Of ISoListItem), CancellationToken)
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync(SuperOffice.Data.SoCommand,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync(SuperOffice.Data.SoCommand,System.Threading.CancellationToken)
  id: ExecuteReaderAsync(SuperOffice.Data.SoCommand,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ExecuteReaderAsync(SoCommand, CancellationToken)
  nameWithType: AnyTableListProviderBase.ExecuteReaderAsync(SoCommand, CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync(SuperOffice.Data.SoCommand, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nPerform the execute reader on the command fetching the first 500 items.  \nOverride this methid if filters on the amount returned needs to be handled.\n"
  syntax:
    content: protected virtual Task<SoDataReader> ExecuteReaderAsync(SoCommand cmd, CancellationToken cancellationToken = null)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SoCommand
      description: The command toe perform the execute reader on.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Data.SoDataReader}
      description: The reader resulted from the execute reader method.
    content.vb: Protected Overridable Function ExecuteReaderAsync(cmd As SoCommand, cancellationToken As CancellationToken = Nothing) As Task(Of SoDataReader)
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync(System.Threading.CancellationToken)
  id: InitAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: InitAsync(CancellationToken)
  nameWithType: AnyTableListProviderBase.InitAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nInitiate the provider after the <xref href=\"SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync(System.String%2cSystem.String%2cSystem.Int32%5b%5d%2cSystem.Boolean%2cSystem.String%2cSystem.Boolean%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method is called.\n"
  syntax:
    content: protected abstract Task InitAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected MustOverride Function InitAsync(cancellationToken As CancellationToken) As Task
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync(System.Threading.CancellationToken)
  id: GetMainQueryAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: GetMainQueryAsync(CancellationToken)
  nameWithType: AnyTableListProviderBase.GetMainQueryAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nGet the main query for the list.\n"
  syntax:
    content: protected abstract Task<Select> GetMainQueryAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Data.SQL.Select}
    content.vb: Protected MustOverride Function GetMainQueryAsync(cancellationToken As CancellationToken = Nothing) As Task(Of  Select)
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync(SuperOffice.Data.SQL.Select,System.String)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync(SuperOffice.Data.SQL.Select,System.String)
  id: SetSearchRestrictionAsync(SuperOffice.Data.SQL.Select,System.String)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: SetSearchRestrictionAsync(Select, String)
  nameWithType: AnyTableListProviderBase.SetSearchRestrictionAsync(Select, String)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync(SuperOffice.Data.SQL.Select, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nSet the search restriction on the list.\n"
  syntax:
    content: protected abstract Task SetSearchRestrictionAsync(Select sql, string searchValue)
    parameters:
    - id: sql
      type: SuperOffice.Data.SQL.Select
      description: Query to set the search restriction on.
    - id: searchValue
      type: System.String
      description: The value of the search restriction.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected MustOverride Function SetSearchRestrictionAsync(sql As  Select, searchValue As String) As Task
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead(SuperOffice.Data.SoDataReader,System.Int16)
  commentId: M:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead(SuperOffice.Data.SoDataReader,System.Int16)
  id: OnRead(SuperOffice.Data.SoDataReader,System.Int16)
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: OnRead(SoDataReader, Int16)
  nameWithType: AnyTableListProviderBase.OnRead(SoDataReader, Int16)
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead(SuperOffice.Data.SoDataReader, System.Int16)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nRaised every time a new row has been read from the database.  \nThe implementation should read tthe results from the reader \nand populate an object implementing <xref href=\"SuperOffice.CRM.Lists.ISoListItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: protected abstract ISoListItem OnRead(SoDataReader reader, short lastRank)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: Reader to reaf from.
    - id: lastRank
      type: System.Int16
      description: Value of the last rank populated.
    return:
      type: SuperOffice.CRM.Lists.ISoListItem
      description: Data read from the reader.
    content.vb: Protected MustOverride Function OnRead(reader As SoDataReader, lastRank As Short) As ISoListItem
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName
  id: ListName
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ListName
  nameWithType: AnyTableListProviderBase.ListName
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nList name (though note that as implemented by <xref href=\"SuperOffice.CRM.Lists.MDOProviderBase\" data-throw-if-not-resolved=\"false\"></xref>,\nthis actually has to be a real table name, so subclasses should override and convert from\ntheir list name to a real table name) (yes it&apos;s a bit messy)\n"
  syntax:
    content: protected string ListName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Property ListName As String
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo
  id: AdditionalInfo
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: AdditionalInfo
  nameWithType: AnyTableListProviderBase.AdditionalInfo
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nAdditional information to provider\n"
  syntax:
    content: protected string AdditionalInfo { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Property AdditionalInfo As String
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs
  id: HistoryIDs
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: HistoryIDs
  nameWithType: AnyTableListProviderBase.HistoryIDs
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nArray of history ID&apos;s; if non-null, this will BE the history; a non-null but\nempty array will disable reading of history altogether; a null parameter will cause history to be\nread from the database.\n"
  syntax:
    content: protected int[] HistoryIDs { get; set; }
    parameters: []
    return:
      type: System.Int32[]
    content.vb: Protected Property HistoryIDs As Integer()
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory
  id: OnlyReadHistory
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: OnlyReadHistory
  nameWithType: AnyTableListProviderBase.OnlyReadHistory
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nif true, only history will be read.\n"
  syntax:
    content: protected bool OnlyReadHistory { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property OnlyReadHistory As Boolean
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory
  id: ExcludeHistory
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ExcludeHistory
  nameWithType: AnyTableListProviderBase.ExcludeHistory
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nif true, history will be excluded.\n"
  syntax:
    content: protected bool ExcludeHistory { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property ExcludeHistory As Boolean
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue
  id: SearchValue
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: SearchValue
  nameWithType: AnyTableListProviderBase.SearchValue
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nIf non-null, the returned list will be flat and only consist of search matches.\n"
  syntax:
    content: protected string SearchValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Property SearchValue As String
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList
  id: ForceFlatList
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: ForceFlatList
  nameWithType: AnyTableListProviderBase.ForceFlatList
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nIf true, the returned list will be flat, though it will still be filtered\nif grouping/filtering has been set up for the list.\n"
  syntax:
    content: protected bool ForceFlatList { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property ForceFlatList As Boolean
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo
  id: HistoryInfo
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: HistoryInfo
  nameWithType: AnyTableListProviderBase.HistoryInfo
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nHistory information for the supported list\n"
  syntax:
    content: public virtual HistoryInfo HistoryInfo { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.Lists.HistoryInfo
    content.vb: Public Overridable ReadOnly Property HistoryInfo As HistoryInfo
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo*
  implements:
  - SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo
  commentId: P:SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo
  id: TableInfo
  parent: SuperOffice.CRM.Lists.AnyTableListProviderBase
  langs:
  - csharp
  - vb
  name: TableInfo
  nameWithType: AnyTableListProviderBase.TableInfo
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Lists
  summary: "\nThe main table info of the query.  This is used by subclasses (e.g. this class) when restricting history data.\n"
  syntax:
    content: protected abstract TableInfo TableInfo { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.TableInfo
    content.vb: Protected MustOverride ReadOnly Property TableInfo As TableInfo
  overload: SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
references:
- uid: SuperOffice.CRM.Lists
  commentId: N:SuperOffice.CRM.Lists
  isExternal: true
  name: SuperOffice.CRM.Lists
  nameWithType: SuperOffice.CRM.Lists
  fullName: SuperOffice.CRM.Lists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Lists.ISoListProvider
  commentId: T:SuperOffice.CRM.Lists.ISoListProvider
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: ISoListProvider
  nameWithType: ISoListProvider
  fullName: SuperOffice.CRM.Lists.ISoListProvider
- uid: SuperOffice.CRM.Lists.ISoList
  commentId: T:SuperOffice.CRM.Lists.ISoList
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: ISoList
  nameWithType: ISoList
  fullName: SuperOffice.CRM.Lists.ISoList
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<AnyTableListProviderBase, To>()
  nameWithType: EnumUtil.MapEnums<AnyTableListProviderBase, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Lists.AnyTableListProviderBase, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of AnyTableListProviderBase, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Lists.AnyTableListProviderBase, To)()
  name.vb: MapEnums(Of AnyTableListProviderBase, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<AnyTableListProviderBase, To>
    nameWithType: EnumUtil.MapEnums<AnyTableListProviderBase, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Lists.AnyTableListProviderBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of AnyTableListProviderBase, To)
    nameWithType: EnumUtil.MapEnums(Of AnyTableListProviderBase, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Lists.AnyTableListProviderBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<AnyTableListProviderBase, To>()
  nameWithType: Converters.MapEnums<AnyTableListProviderBase, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Lists.AnyTableListProviderBase, To>()
  nameWithType.vb: Converters.MapEnums(Of AnyTableListProviderBase, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Lists.AnyTableListProviderBase, To)()
  name.vb: MapEnums(Of AnyTableListProviderBase, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<AnyTableListProviderBase, To>
    nameWithType: Converters.MapEnums<AnyTableListProviderBase, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Lists.AnyTableListProviderBase, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of AnyTableListProviderBase, To)
    nameWithType: Converters.MapEnums(Of AnyTableListProviderBase, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Lists.AnyTableListProviderBase, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.#ctor*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.#ctor
  isExternal: true
  name: AnyTableListProviderBase
  nameWithType: AnyTableListProviderBase.AnyTableListProviderBase
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.AnyTableListProviderBase
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync
  isExternal: true
  name: ConstructAsync
  nameWithType: AnyTableListProviderBase.ConstructAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ConstructAsync
- uid: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.ISoListProvider
  isExternal: true
  name: ConstructAsync(String, String, Int32[], Boolean, String, Boolean, CancellationToken)
  nameWithType: ISoListProvider.ConstructAsync(String, String, Int32[], Boolean, String, Boolean, CancellationToken)
  fullName: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String, System.String, System.Int32[], System.Boolean, System.String, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: ISoListProvider.ConstructAsync(String, String, Int32(), Boolean, String, Boolean, CancellationToken)
  fullName.vb: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String, System.String, System.Int32(), System.Boolean, System.String, System.Boolean, System.Threading.CancellationToken)
  name.vb: ConstructAsync(String, String, Int32(), Boolean, String, Boolean, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
    name: ConstructAsync
    nameWithType: ISoListProvider.ConstructAsync
    fullName: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync(System.String,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)
    name: ConstructAsync
    nameWithType: ISoListProvider.ConstructAsync
    fullName: SuperOffice.CRM.Lists.ISoListProvider.ConstructAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync
  isExternal: true
  name: GetHistoryItemsAsync
  nameWithType: AnyTableListProviderBase.GetHistoryItemsAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsAsync
- uid: SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: GetHistoryItemsAsync(CancellationToken)
  nameWithType: ISoList.GetHistoryItemsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync(System.Threading.CancellationToken)
    name: GetHistoryItemsAsync
    nameWithType: ISoList.GetHistoryItemsAsync
    fullName: SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync(System.Threading.CancellationToken)
    name: GetHistoryItemsAsync
    nameWithType: ISoList.GetHistoryItemsAsync
    fullName: SuperOffice.CRM.Lists.ISoList.GetHistoryItemsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<List<ISoListItem>>
  nameWithType: Task<List<ISoListItem>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>>
  nameWithType.vb: Task(Of List(Of ISoListItem))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem))
  name.vb: Task(Of List(Of ISoListItem))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems
  isExternal: true
  name: ClearHistoryItems
  nameWithType: AnyTableListProviderBase.ClearHistoryItems
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ClearHistoryItems
- uid: SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
  commentId: M:SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: ClearHistoryItems()
  nameWithType: ISoList.ClearHistoryItems()
  fullName: SuperOffice.CRM.Lists.ISoList.ClearHistoryItems()
  spec.csharp:
  - uid: SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
    name: ClearHistoryItems
    nameWithType: ISoList.ClearHistoryItems
    fullName: SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
    name: ClearHistoryItems
    nameWithType: ISoList.ClearHistoryItems
    fullName: SuperOffice.CRM.Lists.ISoList.ClearHistoryItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync
  isExternal: true
  name: GetRootItemsAsync
  nameWithType: AnyTableListProviderBase.GetRootItemsAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetRootItemsAsync
- uid: SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: GetRootItemsAsync(CancellationToken)
  nameWithType: ISoList.GetRootItemsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync(System.Threading.CancellationToken)
    name: GetRootItemsAsync
    nameWithType: ISoList.GetRootItemsAsync
    fullName: SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync(System.Threading.CancellationToken)
    name: GetRootItemsAsync
    nameWithType: ISoList.GetRootItemsAsync
    fullName: SuperOffice.CRM.Lists.ISoList.GetRootItemsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync
  isExternal: true
  name: GetHeadingItemsAsync
  nameWithType: AnyTableListProviderBase.GetHeadingItemsAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHeadingItemsAsync
- uid: SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Lists.ISoList
  isExternal: true
  name: GetHeadingItemsAsync(CancellationToken)
  nameWithType: ISoList.GetHeadingItemsAsync(CancellationToken)
  fullName: SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync(System.Threading.CancellationToken)
    name: GetHeadingItemsAsync
    nameWithType: ISoList.GetHeadingItemsAsync
    fullName: SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync(System.Threading.CancellationToken)
    name: GetHeadingItemsAsync
    nameWithType: ISoList.GetHeadingItemsAsync
    fullName: SuperOffice.CRM.Lists.ISoList.GetHeadingItemsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListHeading}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListHeading}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<List<ISoListHeading>>
  nameWithType: Task<List<ISoListHeading>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListHeading>>
  nameWithType.vb: Task(Of List(Of ISoListHeading))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListHeading))
  name.vb: Task(Of List(Of ISoListHeading))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Lists.ISoListHeading
    name: ISoListHeading
    nameWithType: ISoListHeading
    fullName: SuperOffice.CRM.Lists.ISoListHeading
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Lists.ISoListHeading
    name: ISoListHeading
    nameWithType: ISoListHeading
    fullName: SuperOffice.CRM.Lists.ISoListHeading
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync
  isExternal: true
  name: GetHistoryItemsFromDbAsync
  nameWithType: AnyTableListProviderBase.GetHistoryItemsFromDbAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetHistoryItemsFromDbAsync
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync
  isExternal: true
  name: OnPreGetRootItemsAsync
  nameWithType: AnyTableListProviderBase.OnPreGetRootItemsAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPreGetRootItemsAsync
- uid: System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}
  commentId: '!:System.Collections.Generic.List{SuperOffice.CRM.Lists.ISoListItem}'
  definition: System.Collections.Generic.List`1
  name: List<ISoListItem>
  nameWithType: List<ISoListItem>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Lists.ISoListItem>
  nameWithType.vb: List(Of ISoListItem)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Lists.ISoListItem)
  name.vb: List(Of ISoListItem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Lists.ISoListItem
    name: ISoListItem
    nameWithType: ISoListItem
    fullName: SuperOffice.CRM.Lists.ISoListItem
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync
  isExternal: true
  name: OnPostGetRootItemsAsync
  nameWithType: AnyTableListProviderBase.OnPostGetRootItemsAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnPostGetRootItemsAsync
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction
  isExternal: true
  name: SetHistoryRestriction
  nameWithType: AnyTableListProviderBase.SetHistoryRestriction
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryRestriction
- uid: SuperOffice.Data.SQL.Select
  commentId: T:SuperOffice.Data.SQL.Select
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Select
  nameWithType: Select
  fullName: SuperOffice.Data.SQL.Select
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference
  isExternal: true
  name: SetHistoryListSizeFromPreference
  nameWithType: AnyTableListProviderBase.SetHistoryListSizeFromPreference
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetHistoryListSizeFromPreference
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync
  isExternal: true
  name: ExecuteQueryAsync
  nameWithType: AnyTableListProviderBase.ExecuteQueryAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteQueryAsync
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync
  isExternal: true
  name: ExecuteReaderAsync
  nameWithType: AnyTableListProviderBase.ExecuteReaderAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExecuteReaderAsync
- uid: SuperOffice.Data.SoCommand
  commentId: T:SuperOffice.Data.SoCommand
  parent: SuperOffice.Data
  isExternal: true
  name: SoCommand
  nameWithType: SoCommand
  fullName: SuperOffice.Data.SoCommand
- uid: System.Threading.Tasks.Task{SuperOffice.Data.SoDataReader}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.Data.SoDataReader}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SoDataReader>
  nameWithType: Task<SoDataReader>
  fullName: System.Threading.Tasks.Task<SuperOffice.Data.SoDataReader>
  nameWithType.vb: Task(Of SoDataReader)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.Data.SoDataReader)
  name.vb: Task(Of SoDataReader)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SoDataReader
    name: SoDataReader
    nameWithType: SoDataReader
    fullName: SuperOffice.Data.SoDataReader
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SoDataReader
    name: SoDataReader
    nameWithType: SoDataReader
    fullName: SuperOffice.Data.SoDataReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync
  isExternal: true
  name: InitAsync
  nameWithType: AnyTableListProviderBase.InitAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.InitAsync
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync
  isExternal: true
  name: GetMainQueryAsync
  nameWithType: AnyTableListProviderBase.GetMainQueryAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.GetMainQueryAsync
- uid: System.Threading.Tasks.Task{SuperOffice.Data.SQL.Select}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.Data.SQL.Select}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Select>
  nameWithType: Task<Select>
  fullName: System.Threading.Tasks.Task<SuperOffice.Data.SQL.Select>
  nameWithType.vb: Task(Of Select)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.Data.SQL.Select)
  name.vb: Task(Of Select)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.Select
    name: Select
    nameWithType: Select
    fullName: SuperOffice.Data.SQL.Select
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.Select
    name: Select
    nameWithType: Select
    fullName: SuperOffice.Data.SQL.Select
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync
  isExternal: true
  name: SetSearchRestrictionAsync
  nameWithType: AnyTableListProviderBase.SetSearchRestrictionAsync
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SetSearchRestrictionAsync
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead
  isExternal: true
  name: OnRead
  nameWithType: AnyTableListProviderBase.OnRead
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnRead
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: SuperOffice.CRM.Lists.ISoListItem
  commentId: T:SuperOffice.CRM.Lists.ISoListItem
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: ISoListItem
  nameWithType: ISoListItem
  fullName: SuperOffice.CRM.Lists.ISoListItem
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName
  isExternal: true
  name: ListName
  nameWithType: AnyTableListProviderBase.ListName
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ListName
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo
  isExternal: true
  name: AdditionalInfo
  nameWithType: AnyTableListProviderBase.AdditionalInfo
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.AdditionalInfo
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs
  isExternal: true
  name: HistoryIDs
  nameWithType: AnyTableListProviderBase.HistoryIDs
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryIDs
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory
  isExternal: true
  name: OnlyReadHistory
  nameWithType: AnyTableListProviderBase.OnlyReadHistory
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.OnlyReadHistory
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory
  isExternal: true
  name: ExcludeHistory
  nameWithType: AnyTableListProviderBase.ExcludeHistory
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ExcludeHistory
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue
  isExternal: true
  name: SearchValue
  nameWithType: AnyTableListProviderBase.SearchValue
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.SearchValue
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList
  isExternal: true
  name: ForceFlatList
  nameWithType: AnyTableListProviderBase.ForceFlatList
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.ForceFlatList
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo
  isExternal: true
  name: HistoryInfo
  nameWithType: AnyTableListProviderBase.HistoryInfo
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.HistoryInfo
- uid: SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
  commentId: P:SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
  parent: SuperOffice.CRM.Lists.ISoListProvider
  isExternal: true
  name: HistoryInfo
  nameWithType: ISoListProvider.HistoryInfo
  fullName: SuperOffice.CRM.Lists.ISoListProvider.HistoryInfo
- uid: SuperOffice.CRM.Lists.HistoryInfo
  commentId: T:SuperOffice.CRM.Lists.HistoryInfo
  parent: SuperOffice.CRM.Lists
  isExternal: true
  name: HistoryInfo
  nameWithType: HistoryInfo
  fullName: SuperOffice.CRM.Lists.HistoryInfo
- uid: SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo*
  commentId: Overload:SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo
  isExternal: true
  name: TableInfo
  nameWithType: AnyTableListProviderBase.TableInfo
  fullName: SuperOffice.CRM.Lists.AnyTableListProviderBase.TableInfo
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
