### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.BuildInfoAttribute
  commentId: T:SuperOffice.License.BuildInfoAttribute
  id: BuildInfoAttribute
  parent: SuperOffice.License
  children:
  - SuperOffice.License.BuildInfoAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)
  - SuperOffice.License.BuildInfoAttribute.AssemblyVersion
  - SuperOffice.License.BuildInfoAttribute.BranchName
  - SuperOffice.License.BuildInfoAttribute.BuildDate
  - SuperOffice.License.BuildInfoAttribute.BuildLabel
  - SuperOffice.License.BuildInfoAttribute.FileVersion
  - SuperOffice.License.BuildInfoAttribute.ParseBuildDate(System.String)
  - SuperOffice.License.BuildInfoAttribute.SemanticVersion
  langs:
  - csharp
  - vb
  name: BuildInfoAttribute
  nameWithType: BuildInfoAttribute
  fullName: SuperOffice.License.BuildInfoAttribute
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAttribute declaring information about a build.\n"
  syntax:
    content: 'public class BuildInfoAttribute : Attribute'
    content.vb: >-
      Public Class BuildInfoAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.License.BuildInfoAttribute.EnumUtil.MapEnums``2
  - SuperOffice.License.BuildInfoAttribute.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.License.BuildInfoAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)
  commentId: M:SuperOffice.License.BuildInfoAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: BuildInfoAttribute(String, String, String, String, String)
  nameWithType: BuildInfoAttribute.BuildInfoAttribute(String, String, String, String, String)
  fullName: SuperOffice.License.BuildInfoAttribute.BuildInfoAttribute(System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nConstructor for attribute describing information about the build.\n"
  syntax:
    content: public BuildInfoAttribute(string assemblyVersion, string fileVersion, string semanticVersion, string branchName, string buildLabel)
    parameters:
    - id: assemblyVersion
      type: System.String
    - id: fileVersion
      type: System.String
    - id: semanticVersion
      type: System.String
    - id: branchName
      type: System.String
      description: Name of the branch the module is built from.
    - id: buildLabel
      type: System.String
      description: Build label for the module.
    content.vb: Public Sub New(assemblyVersion As String, fileVersion As String, semanticVersion As String, branchName As String, buildLabel As String)
  overload: SuperOffice.License.BuildInfoAttribute.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.BuildInfoAttribute.ParseBuildDate(System.String)
  commentId: M:SuperOffice.License.BuildInfoAttribute.ParseBuildDate(System.String)
  id: ParseBuildDate(System.String)
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: ParseBuildDate(String)
  nameWithType: BuildInfoAttribute.ParseBuildDate(String)
  fullName: SuperOffice.License.BuildInfoAttribute.ParseBuildDate(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\n&quot;Release_10.1.1_2022.03.23-10&quot; -> 2022.03.23\n&quot;8122.MACHINE&quot; -> 2022.03.23 (8122 is days since epoch 2000-1-1)\n"
  syntax:
    content: public static DateTime ParseBuildDate(string buildLabel)
    parameters:
    - id: buildLabel
      type: System.String
      description: '&quot;Release_10.1.1_2022.03.23-10&quot;'
    return:
      type: System.DateTime
      description: date found in string
    content.vb: Public Shared Function ParseBuildDate(buildLabel As String) As DateTime
  overload: SuperOffice.License.BuildInfoAttribute.ParseBuildDate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.License.BuildInfoAttribute.BranchName
  commentId: P:SuperOffice.License.BuildInfoAttribute.BranchName
  id: BranchName
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: BranchName
  nameWithType: BuildInfoAttribute.BranchName
  fullName: SuperOffice.License.BuildInfoAttribute.BranchName
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nName of the branch the module is built from.\n"
  syntax:
    content: public string BranchName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BranchName As String
  overload: SuperOffice.License.BuildInfoAttribute.BranchName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.License.BuildInfoAttribute.BuildLabel
  commentId: P:SuperOffice.License.BuildInfoAttribute.BuildLabel
  id: BuildLabel
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: BuildLabel
  nameWithType: BuildInfoAttribute.BuildLabel
  fullName: SuperOffice.License.BuildInfoAttribute.BuildLabel
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nBuild label for the module.\n"
  syntax:
    content: public string BuildLabel { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BuildLabel As String
  overload: SuperOffice.License.BuildInfoAttribute.BuildLabel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.License.BuildInfoAttribute.AssemblyVersion
  commentId: P:SuperOffice.License.BuildInfoAttribute.AssemblyVersion
  id: AssemblyVersion
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: AssemblyVersion
  nameWithType: BuildInfoAttribute.AssemblyVersion
  fullName: SuperOffice.License.BuildInfoAttribute.AssemblyVersion
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nAssemblyVersion generated from the build system\n"
  syntax:
    content: public string AssemblyVersion { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property AssemblyVersion As String
  overload: SuperOffice.License.BuildInfoAttribute.AssemblyVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.License.BuildInfoAttribute.FileVersion
  commentId: P:SuperOffice.License.BuildInfoAttribute.FileVersion
  id: FileVersion
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: FileVersion
  nameWithType: BuildInfoAttribute.FileVersion
  fullName: SuperOffice.License.BuildInfoAttribute.FileVersion
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nFileVersion generated from the build system.\n"
  syntax:
    content: public string FileVersion { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FileVersion As String
  overload: SuperOffice.License.BuildInfoAttribute.FileVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.License.BuildInfoAttribute.SemanticVersion
  commentId: P:SuperOffice.License.BuildInfoAttribute.SemanticVersion
  id: SemanticVersion
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: SemanticVersion
  nameWithType: BuildInfoAttribute.SemanticVersion
  fullName: SuperOffice.License.BuildInfoAttribute.SemanticVersion
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nSemantic version of NetServer.\n"
  syntax:
    content: public string SemanticVersion { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SemanticVersion As String
  overload: SuperOffice.License.BuildInfoAttribute.SemanticVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.License.BuildInfoAttribute.BuildDate
  commentId: P:SuperOffice.License.BuildInfoAttribute.BuildDate
  id: BuildDate
  parent: SuperOffice.License.BuildInfoAttribute
  langs:
  - csharp
  - vb
  name: BuildDate
  nameWithType: BuildInfoAttribute.BuildDate
  fullName: SuperOffice.License.BuildInfoAttribute.BuildDate
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.License
  summary: "\nDate of the build.\n"
  syntax:
    content: public DateTime BuildDate { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public ReadOnly Property BuildDate As DateTime
  overload: SuperOffice.License.BuildInfoAttribute.BuildDate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.License.BuildInfoAttribute.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<BuildInfoAttribute, To>()
  nameWithType: EnumUtil.MapEnums<BuildInfoAttribute, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.BuildInfoAttribute, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of BuildInfoAttribute, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.BuildInfoAttribute, To)()
  name.vb: MapEnums(Of BuildInfoAttribute, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<BuildInfoAttribute, To>
    nameWithType: EnumUtil.MapEnums<BuildInfoAttribute, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.BuildInfoAttribute, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of BuildInfoAttribute, To)
    nameWithType: EnumUtil.MapEnums(Of BuildInfoAttribute, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.BuildInfoAttribute, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.BuildInfoAttribute.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<BuildInfoAttribute, To>()
  nameWithType: Converters.MapEnums<BuildInfoAttribute, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.BuildInfoAttribute, To>()
  nameWithType.vb: Converters.MapEnums(Of BuildInfoAttribute, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.BuildInfoAttribute, To)()
  name.vb: MapEnums(Of BuildInfoAttribute, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<BuildInfoAttribute, To>
    nameWithType: Converters.MapEnums<BuildInfoAttribute, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.BuildInfoAttribute, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of BuildInfoAttribute, To)
    nameWithType: Converters.MapEnums(Of BuildInfoAttribute, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.BuildInfoAttribute, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.BuildInfoAttribute.#ctor*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.#ctor
  isExternal: true
  name: BuildInfoAttribute
  nameWithType: BuildInfoAttribute.BuildInfoAttribute
  fullName: SuperOffice.License.BuildInfoAttribute.BuildInfoAttribute
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.License.BuildInfoAttribute.ParseBuildDate*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.ParseBuildDate
  isExternal: true
  name: ParseBuildDate
  nameWithType: BuildInfoAttribute.ParseBuildDate
  fullName: SuperOffice.License.BuildInfoAttribute.ParseBuildDate
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.License.BuildInfoAttribute.BranchName*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.BranchName
  isExternal: true
  name: BranchName
  nameWithType: BuildInfoAttribute.BranchName
  fullName: SuperOffice.License.BuildInfoAttribute.BranchName
- uid: SuperOffice.License.BuildInfoAttribute.BuildLabel*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.BuildLabel
  isExternal: true
  name: BuildLabel
  nameWithType: BuildInfoAttribute.BuildLabel
  fullName: SuperOffice.License.BuildInfoAttribute.BuildLabel
- uid: SuperOffice.License.BuildInfoAttribute.AssemblyVersion*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.AssemblyVersion
  isExternal: true
  name: AssemblyVersion
  nameWithType: BuildInfoAttribute.AssemblyVersion
  fullName: SuperOffice.License.BuildInfoAttribute.AssemblyVersion
- uid: SuperOffice.License.BuildInfoAttribute.FileVersion*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.FileVersion
  isExternal: true
  name: FileVersion
  nameWithType: BuildInfoAttribute.FileVersion
  fullName: SuperOffice.License.BuildInfoAttribute.FileVersion
- uid: SuperOffice.License.BuildInfoAttribute.SemanticVersion*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.SemanticVersion
  isExternal: true
  name: SemanticVersion
  nameWithType: BuildInfoAttribute.SemanticVersion
  fullName: SuperOffice.License.BuildInfoAttribute.SemanticVersion
- uid: SuperOffice.License.BuildInfoAttribute.BuildDate*
  commentId: Overload:SuperOffice.License.BuildInfoAttribute.BuildDate
  isExternal: true
  name: BuildDate
  nameWithType: BuildInfoAttribute.BuildDate
  fullName: SuperOffice.License.BuildInfoAttribute.BuildDate
