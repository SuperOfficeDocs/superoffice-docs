### YamlMime:ManagedReference
items:
- uid: SuperOffice.IO.Files.IFileAccess
  commentId: T:SuperOffice.IO.Files.IFileAccess
  id: IFileAccess
  parent: SuperOffice.IO.Files
  children:
  - SuperOffice.IO.Files.IFileAccess.ArchivePath
  - SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  - SuperOffice.IO.Files.IFileAccess.CreateForWrite(System.String)
  - SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  - SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos(System.String)
  - SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles(System.String,System.String,System.Boolean)
  - SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  - SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  - SuperOffice.IO.Files.IFileAccess.FileDelete(System.String)
  - SuperOffice.IO.Files.IFileAccess.FileExists(System.String)
  - SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  - SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  - SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  - SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock(System.String)
  - SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  - SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  - SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  - SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
  - SuperOffice.IO.Files.IFileAccess.SaveStreamToFile(System.IO.Stream,System.String)
  - SuperOffice.IO.Files.IFileAccess.TemplatesPath
  - SuperOffice.IO.Files.IFileAccess.TemporaryPath
  langs:
  - csharp
  - vb
  name: IFileAccess
  nameWithType: IFileAccess
  fullName: SuperOffice.IO.Files.IFileAccess
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: public interface IFileAccess
    content.vb: Public Interface IFileAccess
  extensionMethods:
  - SuperOffice.IO.Files.IFileAccess.EnumUtil.MapEnums``2
  - SuperOffice.IO.Files.IFileAccess.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  commentId: M:SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  id: EnsureAccess(System.Action)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: EnsureAccess(Action)
  nameWithType: IFileAccess.EnsureAccess(Action)
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess(System.Action)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Impersonation for Windows Disk File Access. For Azure File Access this is a noop.
  syntax:
    content: void EnsureAccess(Action action)
    parameters:
    - id: action
      type: System.Action
    content.vb: Sub EnsureAccess(action As Action)
  overload: SuperOffice.IO.Files.IFileAccess.EnsureAccess*
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  commentId: M:SuperOffice.IO.Files.IFileAccess.EnsureAccess``1(System.Func{``0})
  id: EnsureAccess``1(System.Func{``0})
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: EnsureAccess<T>(Func<T>)
  nameWithType: IFileAccess.EnsureAccess<T>(Func<T>)
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess<T>(System.Func<T>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Impersonation for Windows Disk File Access. For Azure File Access this is a noop.
  syntax:
    content: T EnsureAccess<T>(Func<T> func)
    parameters:
    - id: func
      type: System.Func{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function EnsureAccess(Of T)(func As Func(Of T)) As T
  overload: SuperOffice.IO.Files.IFileAccess.EnsureAccess*
  nameWithType.vb: IFileAccess.EnsureAccess(Of T)(Func(Of T))
  fullName.vb: SuperOffice.IO.Files.IFileAccess.EnsureAccess(Of T)(System.Func(Of T))
  name.vb: EnsureAccess(Of T)(Func(Of T))
- uid: SuperOffice.IO.Files.IFileAccess.FileExists(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.FileExists(System.String)
  id: FileExists(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: FileExists(String)
  nameWithType: IFileAccess.FileExists(String)
  fullName: SuperOffice.IO.Files.IFileAccess.FileExists(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: bool FileExists(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function FileExists(path As String) As Boolean
  overload: SuperOffice.IO.Files.IFileAccess.FileExists*
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles(System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles(System.String,System.String,System.Boolean)
  id: DirectoryGetFiles(System.String,System.String,System.Boolean)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: DirectoryGetFiles(String, String, Boolean)
  nameWithType: IFileAccess.DirectoryGetFiles(String, String, Boolean)
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles(System.String, System.String, System.Boolean)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string[] DirectoryGetFiles(string path, string searchPattern, bool searchInSubdirectories = false)
    parameters:
    - id: path
      type: System.String
    - id: searchPattern
      type: System.String
    - id: searchInSubdirectories
      type: System.Boolean
    return:
      type: System.String[]
    content.vb: Function DirectoryGetFiles(path As String, searchPattern As String, searchInSubdirectories As Boolean = False) As String()
  overload: SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles*
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos(System.String)
  id: DirectoryGetFileInfos(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: DirectoryGetFileInfos(String)
  nameWithType: IFileAccess.DirectoryGetFileInfos(String)
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: SoFileInfo[] DirectoryGetFileInfos(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: SuperOffice.IO.Files.SoFileInfo[]
    content.vb: Function DirectoryGetFileInfos(path As String) As SoFileInfo()
  overload: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos*
- uid: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  id: CreateDirectoryIfNotExists(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: CreateDirectoryIfNotExists(String)
  nameWithType: IFileAccess.CreateDirectoryIfNotExists(String)
  fullName: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: void CreateDirectoryIfNotExists(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Sub CreateDirectoryIfNotExists(path As String)
  overload: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists*
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: DirectoryExists(String)
  nameWithType: IFileAccess.DirectoryExists(String)
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryExists(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: bool DirectoryExists(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function DirectoryExists(path As String) As Boolean
  overload: SuperOffice.IO.Files.IFileAccess.DirectoryExists*
- uid: SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  id: GetFileName(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: GetFileName(String)
  nameWithType: IFileAccess.GetFileName(String)
  fullName: SuperOffice.IO.Files.IFileAccess.GetFileName(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string GetFileName(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Function GetFileName(path As String) As String
  overload: SuperOffice.IO.Files.IFileAccess.GetFileName*
- uid: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  id: GetFileNameWithoutExtension(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: GetFileNameWithoutExtension(String)
  nameWithType: IFileAccess.GetFileNameWithoutExtension(String)
  fullName: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string GetFileNameWithoutExtension(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Function GetFileNameWithoutExtension(path As String) As String
  overload: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension*
- uid: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  id: GetDirectoryName(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: GetDirectoryName(String)
  nameWithType: IFileAccess.GetDirectoryName(String)
  fullName: SuperOffice.IO.Files.IFileAccess.GetDirectoryName(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string GetDirectoryName(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Function GetDirectoryName(path As String) As String
  overload: SuperOffice.IO.Files.IFileAccess.GetDirectoryName*
- uid: SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  id: PathCombine(System.String[])
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: PathCombine(String[])
  nameWithType: IFileAccess.PathCombine(String[])
  fullName: SuperOffice.IO.Files.IFileAccess.PathCombine(System.String[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string PathCombine(params string[] paths)
    parameters:
    - id: paths
      type: System.String[]
    return:
      type: System.String
    content.vb: Function PathCombine(ParamArray paths As String()) As String
  overload: SuperOffice.IO.Files.IFileAccess.PathCombine*
  nameWithType.vb: IFileAccess.PathCombine(String())
  fullName.vb: SuperOffice.IO.Files.IFileAccess.PathCombine(System.String())
  name.vb: PathCombine(String())
- uid: SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  id: PathGetExtension(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: PathGetExtension(String)
  nameWithType: IFileAccess.PathGetExtension(String)
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetExtension(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string PathGetExtension(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Function PathGetExtension(path As String) As String
  overload: SuperOffice.IO.Files.IFileAccess.PathGetExtension*
- uid: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
  id: PathGetInvalidFileNameChars
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: PathGetInvalidFileNameChars()
  nameWithType: IFileAccess.PathGetInvalidFileNameChars()
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: char[] PathGetInvalidFileNameChars()
    return:
      type: System.Char[]
    content.vb: Function PathGetInvalidFileNameChars As Char()
  overload: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars*
- uid: SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  id: PathGetFileName(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: PathGetFileName(String)
  nameWithType: IFileAccess.PathGetFileName(String)
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetFileName(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string PathGetFileName(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Function PathGetFileName(path As String) As String
  overload: SuperOffice.IO.Files.IFileAccess.PathGetFileName*
- uid: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock(System.String)
  id: OpenReadOnlyNoLock(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: OpenReadOnlyNoLock(String)
  nameWithType: IFileAccess.OpenReadOnlyNoLock(String)
  fullName: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Open a file/blob for reading
  remarks: Will call System.IO.File.Open() or Azure.Storage.Blobs.BlobClient.OpenRead()
  syntax:
    content: Stream OpenReadOnlyNoLock(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.Stream
    content.vb: Function OpenReadOnlyNoLock(path As String) As Stream
  overload: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock*
  exceptions:
  - type: SuperOffice.Exceptions.SoFileNotFoundException
    commentId: T:SuperOffice.Exceptions.SoFileNotFoundException
    description: Wraps System.IO.FileNotFoundException and Azure.RequestFailedException when Status is 404. Check for SoFileNotFoundException instead of doing FileExists before call to this method.
- uid: SuperOffice.IO.Files.IFileAccess.SaveStreamToFile(System.IO.Stream,System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.SaveStreamToFile(System.IO.Stream,System.String)
  id: SaveStreamToFile(System.IO.Stream,System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: SaveStreamToFile(Stream, String)
  nameWithType: IFileAccess.SaveStreamToFile(Stream, String)
  fullName: SuperOffice.IO.Files.IFileAccess.SaveStreamToFile(System.IO.Stream, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  summary: Save a stream to file/blob
  remarks: Will call System.IO.File.Create() or Azure.Storage.Blobs.BlobClient.Upload(), both implementations will overwrite any existing file/blob.
  syntax:
    content: void SaveStreamToFile(Stream stream, string path)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: path
      type: System.String
    content.vb: Sub SaveStreamToFile(stream As Stream, path As String)
  overload: SuperOffice.IO.Files.IFileAccess.SaveStreamToFile*
- uid: SuperOffice.IO.Files.IFileAccess.CreateForWrite(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.CreateForWrite(System.String)
  id: CreateForWrite(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: CreateForWrite(String)
  nameWithType: IFileAccess.CreateForWrite(String)
  fullName: SuperOffice.IO.Files.IFileAccess.CreateForWrite(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: Stream CreateForWrite(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.Stream
    content.vb: Function CreateForWrite(path As String) As Stream
  overload: SuperOffice.IO.Files.IFileAccess.CreateForWrite*
- uid: SuperOffice.IO.Files.IFileAccess.FileDelete(System.String)
  commentId: M:SuperOffice.IO.Files.IFileAccess.FileDelete(System.String)
  id: FileDelete(System.String)
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: FileDelete(String)
  nameWithType: IFileAccess.FileDelete(String)
  fullName: SuperOffice.IO.Files.IFileAccess.FileDelete(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: void FileDelete(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Sub FileDelete(path As String)
  overload: SuperOffice.IO.Files.IFileAccess.FileDelete*
- uid: SuperOffice.IO.Files.IFileAccess.ArchivePath
  commentId: P:SuperOffice.IO.Files.IFileAccess.ArchivePath
  id: ArchivePath
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: ArchivePath
  nameWithType: IFileAccess.ArchivePath
  fullName: SuperOffice.IO.Files.IFileAccess.ArchivePath
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string ArchivePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ArchivePath As String
  overload: SuperOffice.IO.Files.IFileAccess.ArchivePath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SuperOffice.IO.Files.IFileAccess.TemplatesPath
  commentId: P:SuperOffice.IO.Files.IFileAccess.TemplatesPath
  id: TemplatesPath
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: TemplatesPath
  nameWithType: IFileAccess.TemplatesPath
  fullName: SuperOffice.IO.Files.IFileAccess.TemplatesPath
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string TemplatesPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property TemplatesPath As String
  overload: SuperOffice.IO.Files.IFileAccess.TemplatesPath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SuperOffice.IO.Files.IFileAccess.TemporaryPath
  commentId: P:SuperOffice.IO.Files.IFileAccess.TemporaryPath
  id: TemporaryPath
  parent: SuperOffice.IO.Files.IFileAccess
  langs:
  - csharp
  - vb
  name: TemporaryPath
  nameWithType: IFileAccess.TemporaryPath
  fullName: SuperOffice.IO.Files.IFileAccess.TemporaryPath
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.IO.Files
  syntax:
    content: string TemporaryPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property TemporaryPath As String
  overload: SuperOffice.IO.Files.IFileAccess.TemporaryPath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: SuperOffice.IO.Files
  commentId: N:SuperOffice.IO.Files
  isExternal: true
  name: SuperOffice.IO.Files
  nameWithType: SuperOffice.IO.Files
  fullName: SuperOffice.IO.Files
- uid: SuperOffice.IO.Files.IFileAccess.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IFileAccess, To>()
  nameWithType: EnumUtil.MapEnums<IFileAccess, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.IO.Files.IFileAccess, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IFileAccess, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.IO.Files.IFileAccess, To)()
  name.vb: MapEnums(Of IFileAccess, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IFileAccess, To>
    nameWithType: EnumUtil.MapEnums<IFileAccess, To>
    fullName: EnumUtil.MapEnums<SuperOffice.IO.Files.IFileAccess, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IFileAccess, To)
    nameWithType: EnumUtil.MapEnums(Of IFileAccess, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.IO.Files.IFileAccess, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.IO.Files.IFileAccess.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IFileAccess, To>()
  nameWithType: Converters.MapEnums<IFileAccess, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.Files.IFileAccess, To>()
  nameWithType.vb: Converters.MapEnums(Of IFileAccess, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.Files.IFileAccess, To)()
  name.vb: MapEnums(Of IFileAccess, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IFileAccess, To>
    nameWithType: Converters.MapEnums<IFileAccess, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.IO.Files.IFileAccess, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IFileAccess, To)
    nameWithType: Converters.MapEnums(Of IFileAccess, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.IO.Files.IFileAccess, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.IO.Files.IFileAccess.EnsureAccess*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.EnsureAccess
  isExternal: true
  name: EnsureAccess
  nameWithType: IFileAccess.EnsureAccess
  fullName: SuperOffice.IO.Files.IFileAccess.EnsureAccess
- uid: System.Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Func{{T}}
  commentId: '!:System.Func{`0}'
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: System.Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.IO.Files.IFileAccess.FileExists*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.FileExists
  isExternal: true
  name: FileExists
  nameWithType: IFileAccess.FileExists
  fullName: SuperOffice.IO.Files.IFileAccess.FileExists
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles
  isExternal: true
  name: DirectoryGetFiles
  nameWithType: IFileAccess.DirectoryGetFiles
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryGetFiles
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos
  isExternal: true
  name: DirectoryGetFileInfos
  nameWithType: IFileAccess.DirectoryGetFileInfos
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryGetFileInfos
- uid: SuperOffice.IO.Files.SoFileInfo[]
  isExternal: true
  name: SoFileInfo[]
  nameWithType: SoFileInfo[]
  fullName: SuperOffice.IO.Files.SoFileInfo[]
  nameWithType.vb: SoFileInfo()
  fullName.vb: SuperOffice.IO.Files.SoFileInfo()
  name.vb: SoFileInfo()
  spec.csharp:
  - uid: SuperOffice.IO.Files.SoFileInfo
    name: SoFileInfo
    nameWithType: SoFileInfo
    fullName: SuperOffice.IO.Files.SoFileInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.IO.Files.SoFileInfo
    name: SoFileInfo
    nameWithType: SoFileInfo
    fullName: SuperOffice.IO.Files.SoFileInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists
  isExternal: true
  name: CreateDirectoryIfNotExists
  nameWithType: IFileAccess.CreateDirectoryIfNotExists
  fullName: SuperOffice.IO.Files.IFileAccess.CreateDirectoryIfNotExists
- uid: SuperOffice.IO.Files.IFileAccess.DirectoryExists*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.DirectoryExists
  isExternal: true
  name: DirectoryExists
  nameWithType: IFileAccess.DirectoryExists
  fullName: SuperOffice.IO.Files.IFileAccess.DirectoryExists
- uid: SuperOffice.IO.Files.IFileAccess.GetFileName*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.GetFileName
  isExternal: true
  name: GetFileName
  nameWithType: IFileAccess.GetFileName
  fullName: SuperOffice.IO.Files.IFileAccess.GetFileName
- uid: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension
  isExternal: true
  name: GetFileNameWithoutExtension
  nameWithType: IFileAccess.GetFileNameWithoutExtension
  fullName: SuperOffice.IO.Files.IFileAccess.GetFileNameWithoutExtension
- uid: SuperOffice.IO.Files.IFileAccess.GetDirectoryName*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.GetDirectoryName
  isExternal: true
  name: GetDirectoryName
  nameWithType: IFileAccess.GetDirectoryName
  fullName: SuperOffice.IO.Files.IFileAccess.GetDirectoryName
- uid: SuperOffice.IO.Files.IFileAccess.PathCombine*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.PathCombine
  isExternal: true
  name: PathCombine
  nameWithType: IFileAccess.PathCombine
  fullName: SuperOffice.IO.Files.IFileAccess.PathCombine
- uid: SuperOffice.IO.Files.IFileAccess.PathGetExtension*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.PathGetExtension
  isExternal: true
  name: PathGetExtension
  nameWithType: IFileAccess.PathGetExtension
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetExtension
- uid: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
  isExternal: true
  name: PathGetInvalidFileNameChars
  nameWithType: IFileAccess.PathGetInvalidFileNameChars
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetInvalidFileNameChars
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.IO.Files.IFileAccess.PathGetFileName*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.PathGetFileName
  isExternal: true
  name: PathGetFileName
  nameWithType: IFileAccess.PathGetFileName
  fullName: SuperOffice.IO.Files.IFileAccess.PathGetFileName
- uid: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock
  isExternal: true
  name: OpenReadOnlyNoLock
  nameWithType: IFileAccess.OpenReadOnlyNoLock
  fullName: SuperOffice.IO.Files.IFileAccess.OpenReadOnlyNoLock
- uid: SuperOffice.Exceptions.SoFileNotFoundException
  commentId: T:SuperOffice.Exceptions.SoFileNotFoundException
  isExternal: true
  name: SoFileNotFoundException
  nameWithType: SoFileNotFoundException
  fullName: SuperOffice.Exceptions.SoFileNotFoundException
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: SuperOffice.IO.Files.IFileAccess.SaveStreamToFile*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.SaveStreamToFile
  isExternal: true
  name: SaveStreamToFile
  nameWithType: IFileAccess.SaveStreamToFile
  fullName: SuperOffice.IO.Files.IFileAccess.SaveStreamToFile
- uid: SuperOffice.IO.Files.IFileAccess.CreateForWrite*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.CreateForWrite
  isExternal: true
  name: CreateForWrite
  nameWithType: IFileAccess.CreateForWrite
  fullName: SuperOffice.IO.Files.IFileAccess.CreateForWrite
- uid: SuperOffice.IO.Files.IFileAccess.FileDelete*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.FileDelete
  isExternal: true
  name: FileDelete
  nameWithType: IFileAccess.FileDelete
  fullName: SuperOffice.IO.Files.IFileAccess.FileDelete
- uid: SuperOffice.IO.Files.IFileAccess.ArchivePath*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.ArchivePath
  isExternal: true
  name: ArchivePath
  nameWithType: IFileAccess.ArchivePath
  fullName: SuperOffice.IO.Files.IFileAccess.ArchivePath
- uid: SuperOffice.IO.Files.IFileAccess.TemplatesPath*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.TemplatesPath
  isExternal: true
  name: TemplatesPath
  nameWithType: IFileAccess.TemplatesPath
  fullName: SuperOffice.IO.Files.IFileAccess.TemplatesPath
- uid: SuperOffice.IO.Files.IFileAccess.TemporaryPath*
  commentId: Overload:SuperOffice.IO.Files.IFileAccess.TemporaryPath
  isExternal: true
  name: TemporaryPath
  nameWithType: IFileAccess.TemporaryPath
  fullName: SuperOffice.IO.Files.IFileAccess.TemporaryPath
