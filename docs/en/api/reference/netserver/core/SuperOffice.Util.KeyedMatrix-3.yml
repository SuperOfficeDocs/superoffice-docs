### YamlMime:ManagedReference
items:
- uid: SuperOffice.Util.KeyedMatrix`3
  commentId: T:SuperOffice.Util.KeyedMatrix`3
  id: KeyedMatrix`3
  parent: SuperOffice.Util
  children:
  - SuperOffice.Util.KeyedMatrix`3.#ctor
  - SuperOffice.Util.KeyedMatrix`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  - SuperOffice.Util.KeyedMatrix`3.AddColumn(`0)
  - SuperOffice.Util.KeyedMatrix`3.AddRow(`1)
  - SuperOffice.Util.KeyedMatrix`3.AlterColumnKey(`0,`0)
  - SuperOffice.Util.KeyedMatrix`3.AlterRowKey(`1,`1)
  - SuperOffice.Util.KeyedMatrix`3.Clear
  - SuperOffice.Util.KeyedMatrix`3.ClearColumns
  - SuperOffice.Util.KeyedMatrix`3.ClearRows
  - SuperOffice.Util.KeyedMatrix`3.Compact
  - SuperOffice.Util.KeyedMatrix`3.Contains(`0,`1)
  - SuperOffice.Util.KeyedMatrix`3.ContainsColumn(`0)
  - SuperOffice.Util.KeyedMatrix`3.ContainsRow(`1)
  - SuperOffice.Util.KeyedMatrix`3.Exists(System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  - SuperOffice.Util.KeyedMatrix`3.GetColumn(`0)
  - SuperOffice.Util.KeyedMatrix`3.GetColumnIndex(`0)
  - SuperOffice.Util.KeyedMatrix`3.GetColumnKey(System.Int32)
  - SuperOffice.Util.KeyedMatrix`3.GetColumnKeys
  - SuperOffice.Util.KeyedMatrix`3.GetEnumerator
  - SuperOffice.Util.KeyedMatrix`3.GetRow(`1)
  - SuperOffice.Util.KeyedMatrix`3.GetRowIndex(`1)
  - SuperOffice.Util.KeyedMatrix`3.GetRowKey(System.Int32)
  - SuperOffice.Util.KeyedMatrix`3.GetRowKeys
  - SuperOffice.Util.KeyedMatrix`3.Height
  - SuperOffice.Util.KeyedMatrix`3.Item(`0,`1)
  - SuperOffice.Util.KeyedMatrix`3.Item(System.Int32,System.Int32)
  - SuperOffice.Util.KeyedMatrix`3.MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  - SuperOffice.Util.KeyedMatrix`3.MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Action{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  - SuperOffice.Util.KeyedMatrix`3.RemoveColumn(`0)
  - SuperOffice.Util.KeyedMatrix`3.RemoveRow(`1)
  - SuperOffice.Util.KeyedMatrix`3.ToArray
  - SuperOffice.Util.KeyedMatrix`3.Width
  langs:
  - csharp
  - vb
  name: KeyedMatrix<TKeyColumn, TKeyRow, TItem>
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: 'public class KeyedMatrix<TKeyColumn, TKeyRow, TItem> : Object, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, IEnumerable where TItem : class'
    typeParameters:
    - id: TKeyColumn
    - id: TKeyRow
    - id: TItem
    content.vb: >-
      Public Class KeyedMatrix(Of TKeyColumn, TKeyRow, TItem As Class)
          Inherits Object
          Implements IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
  - System.Collections.IEnumerable
  extensionMethods:
  - SuperOffice.Util.KeyedMatrix`3.EnumUtil.MapEnums``2
  - SuperOffice.Util.KeyedMatrix`3.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.KeyedMatrix{{TKeyColumn},{TKeyRow},{TItem}})
  - SuperOffice.Util.KeyedMatrix`3.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Util.KeyedMatrix`3.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem)
  name.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem)
- uid: SuperOffice.Util.KeyedMatrix`3.#ctor
  commentId: M:SuperOffice.Util.KeyedMatrix`3.#ctor
  id: '#ctor'
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: KeyedMatrix()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.KeyedMatrix()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.KeyedMatrix()
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public KeyedMatrix()
    content.vb: Public Sub New
  overload: SuperOffice.Util.KeyedMatrix`3.#ctor*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).KeyedMatrix()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).KeyedMatrix()
- uid: SuperOffice.Util.KeyedMatrix`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  commentId: M:SuperOffice.Util.KeyedMatrix`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})'
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: KeyedMatrix(IEqualityComparer<TKeyColumn>, IEqualityComparer<TKeyRow>)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.KeyedMatrix(IEqualityComparer<TKeyColumn>, IEqualityComparer<TKeyRow>)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.KeyedMatrix(System.Collections.Generic.IEqualityComparer<TKeyColumn>, System.Collections.Generic.IEqualityComparer<TKeyRow>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public KeyedMatrix(IEqualityComparer<TKeyColumn> columnComparer, IEqualityComparer<TKeyRow> rowComparer)
    parameters:
    - id: columnComparer
      type: System.Collections.Generic.IEqualityComparer{{TKeyColumn}}
    - id: rowComparer
      type: System.Collections.Generic.IEqualityComparer{{TKeyRow}}
    content.vb: Public Sub New(columnComparer As IEqualityComparer(Of TKeyColumn), rowComparer As IEqualityComparer(Of TKeyRow))
  overload: SuperOffice.Util.KeyedMatrix`3.#ctor*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).KeyedMatrix(IEqualityComparer(Of TKeyColumn), IEqualityComparer(Of TKeyRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).KeyedMatrix(System.Collections.Generic.IEqualityComparer(Of TKeyColumn), System.Collections.Generic.IEqualityComparer(Of TKeyRow))
  name.vb: KeyedMatrix(IEqualityComparer(Of TKeyColumn), IEqualityComparer(Of TKeyRow))
- uid: SuperOffice.Util.KeyedMatrix`3.AddColumn(`0)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.AddColumn(`0)
  id: AddColumn(`0)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: AddColumn(TKeyColumn)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddColumn(TKeyColumn)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddColumn(TKeyColumn)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public int AddColumn(TKeyColumn columnKey)
    parameters:
    - id: columnKey
      type: '{TKeyColumn}'
    return:
      type: System.Int32
    content.vb: Public Function AddColumn(columnKey As TKeyColumn) As Integer
  overload: SuperOffice.Util.KeyedMatrix`3.AddColumn*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddColumn(TKeyColumn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddColumn(TKeyColumn)
- uid: SuperOffice.Util.KeyedMatrix`3.RemoveColumn(`0)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.RemoveColumn(`0)
  id: RemoveColumn(`0)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: RemoveColumn(TKeyColumn)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveColumn(TKeyColumn)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveColumn(TKeyColumn)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public void RemoveColumn(TKeyColumn columnlKey)
    parameters:
    - id: columnlKey
      type: '{TKeyColumn}'
    content.vb: Public Sub RemoveColumn(columnlKey As TKeyColumn)
  overload: SuperOffice.Util.KeyedMatrix`3.RemoveColumn*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveColumn(TKeyColumn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveColumn(TKeyColumn)
- uid: SuperOffice.Util.KeyedMatrix`3.RemoveRow(`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.RemoveRow(`1)
  id: RemoveRow(`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: RemoveRow(TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveRow(TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveRow(TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public void RemoveRow(TKeyRow verticalKey)
    parameters:
    - id: verticalKey
      type: '{TKeyRow}'
    content.vb: Public Sub RemoveRow(verticalKey As TKeyRow)
  overload: SuperOffice.Util.KeyedMatrix`3.RemoveRow*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveRow(TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveRow(TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.ClearColumns
  commentId: M:SuperOffice.Util.KeyedMatrix`3.ClearColumns
  id: ClearColumns
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: ClearColumns()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearColumns()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearColumns()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nClear all columns from the matrix.\n"
  syntax:
    content: public void ClearColumns()
    content.vb: Public Sub ClearColumns
  overload: SuperOffice.Util.KeyedMatrix`3.ClearColumns*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearColumns()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearColumns()
- uid: SuperOffice.Util.KeyedMatrix`3.ClearRows
  commentId: M:SuperOffice.Util.KeyedMatrix`3.ClearRows
  id: ClearRows
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: ClearRows()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearRows()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearRows()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nClear all rows from the matrix.\n"
  syntax:
    content: public void ClearRows()
    content.vb: Public Sub ClearRows
  overload: SuperOffice.Util.KeyedMatrix`3.ClearRows*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearRows()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearRows()
- uid: SuperOffice.Util.KeyedMatrix`3.Clear
  commentId: M:SuperOffice.Util.KeyedMatrix`3.Clear
  id: Clear
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Clear()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Clear()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nClear the entire content of the matrix.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: SuperOffice.Util.KeyedMatrix`3.Clear*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Clear()
- uid: SuperOffice.Util.KeyedMatrix`3.Compact
  commentId: M:SuperOffice.Util.KeyedMatrix`3.Compact
  id: Compact
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Compact()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Compact()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Compact()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nRemove empty columns or rows.\n"
  syntax:
    content: public void Compact()
    content.vb: Public Sub Compact
  overload: SuperOffice.Util.KeyedMatrix`3.Compact*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Compact()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Compact()
- uid: SuperOffice.Util.KeyedMatrix`3.GetRowIndex(`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetRowIndex(`1)
  id: GetRowIndex(`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetRowIndex(TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowIndex(TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowIndex(TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public int GetRowIndex(TKeyRow verticalKey)
    parameters:
    - id: verticalKey
      type: '{TKeyRow}'
    return:
      type: System.Int32
    content.vb: Public Function GetRowIndex(verticalKey As TKeyRow) As Integer
  overload: SuperOffice.Util.KeyedMatrix`3.GetRowIndex*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowIndex(TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowIndex(TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumnIndex(`0)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetColumnIndex(`0)
  id: GetColumnIndex(`0)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetColumnIndex(TKeyColumn)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnIndex(TKeyColumn)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnIndex(TKeyColumn)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public int GetColumnIndex(TKeyColumn horizontakKey)
    parameters:
    - id: horizontakKey
      type: '{TKeyColumn}'
    return:
      type: System.Int32
    content.vb: Public Function GetColumnIndex(horizontakKey As TKeyColumn) As Integer
  overload: SuperOffice.Util.KeyedMatrix`3.GetColumnIndex*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnIndex(TKeyColumn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnIndex(TKeyColumn)
- uid: SuperOffice.Util.KeyedMatrix`3.GetRowKey(System.Int32)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetRowKey(System.Int32)
  id: GetRowKey(System.Int32)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetRowKey(Int32)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKey(Int32)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKey(System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public TKeyRow GetRowKey(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{TKeyRow}'
    content.vb: Public Function GetRowKey(index As Integer) As TKeyRow
  overload: SuperOffice.Util.KeyedMatrix`3.GetRowKey*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKey(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKey(System.Int32)
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumnKey(System.Int32)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetColumnKey(System.Int32)
  id: GetColumnKey(System.Int32)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetColumnKey(Int32)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKey(Int32)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKey(System.Int32)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public TKeyColumn GetColumnKey(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{TKeyColumn}'
    content.vb: Public Function GetColumnKey(index As Integer) As TKeyColumn
  overload: SuperOffice.Util.KeyedMatrix`3.GetColumnKey*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKey(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKey(System.Int32)
- uid: SuperOffice.Util.KeyedMatrix`3.AlterRowKey(`1,`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.AlterRowKey(`1,`1)
  id: AlterRowKey(`1,`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: AlterRowKey(TKeyRow, TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterRowKey(TKeyRow, TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterRowKey(TKeyRow, TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public void AlterRowKey(TKeyRow oldVerticalKey, TKeyRow newVerticalKey)
    parameters:
    - id: oldVerticalKey
      type: '{TKeyRow}'
    - id: newVerticalKey
      type: '{TKeyRow}'
    content.vb: Public Sub AlterRowKey(oldVerticalKey As TKeyRow, newVerticalKey As TKeyRow)
  overload: SuperOffice.Util.KeyedMatrix`3.AlterRowKey*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterRowKey(TKeyRow, TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterRowKey(TKeyRow, TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.AlterColumnKey(`0,`0)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.AlterColumnKey(`0,`0)
  id: AlterColumnKey(`0,`0)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: AlterColumnKey(TKeyColumn, TKeyColumn)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterColumnKey(TKeyColumn, TKeyColumn)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterColumnKey(TKeyColumn, TKeyColumn)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public void AlterColumnKey(TKeyColumn oldHorizontalKey, TKeyColumn newHorizontalKey)
    parameters:
    - id: oldHorizontalKey
      type: '{TKeyColumn}'
    - id: newHorizontalKey
      type: '{TKeyColumn}'
    content.vb: Public Sub AlterColumnKey(oldHorizontalKey As TKeyColumn, newHorizontalKey As TKeyColumn)
  overload: SuperOffice.Util.KeyedMatrix`3.AlterColumnKey*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterColumnKey(TKeyColumn, TKeyColumn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterColumnKey(TKeyColumn, TKeyColumn)
- uid: SuperOffice.Util.KeyedMatrix`3.AddRow(`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.AddRow(`1)
  id: AddRow(`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: AddRow(TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddRow(TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddRow(TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public int AddRow(TKeyRow verticalKey)
    parameters:
    - id: verticalKey
      type: '{TKeyRow}'
    return:
      type: System.Int32
    content.vb: Public Function AddRow(verticalKey As TKeyRow) As Integer
  overload: SuperOffice.Util.KeyedMatrix`3.AddRow*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddRow(TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddRow(TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.Contains(`0,`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.Contains(`0,`1)
  id: Contains(`0,`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Contains(TKeyColumn, TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Contains(TKeyColumn, TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Contains(TKeyColumn, TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet if the item at the given position has a value.\n"
  syntax:
    content: public bool Contains(TKeyColumn horizontalKey, TKeyRow verticalKey)
    parameters:
    - id: horizontalKey
      type: '{TKeyColumn}'
      description: Horizontal key
    - id: verticalKey
      type: '{TKeyRow}'
      description: Vertical key
    return:
      type: System.Boolean
      description: True item at the given position has a value.
    content.vb: Public Function Contains(horizontalKey As TKeyColumn, verticalKey As TKeyRow) As Boolean
  overload: SuperOffice.Util.KeyedMatrix`3.Contains*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Contains(TKeyColumn, TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Contains(TKeyColumn, TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.ContainsRow(`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.ContainsRow(`1)
  id: ContainsRow(`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: ContainsRow(TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsRow(TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsRow(TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet if this is an exsisting key in the matrix.\n"
  syntax:
    content: public bool ContainsRow(TKeyRow verticalKey)
    parameters:
    - id: verticalKey
      type: '{TKeyRow}'
      description: Vertical key.
    return:
      type: System.Boolean
      description: True if this is an exsisting key in the matrix.
    content.vb: Public Function ContainsRow(verticalKey As TKeyRow) As Boolean
  overload: SuperOffice.Util.KeyedMatrix`3.ContainsRow*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsRow(TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsRow(TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.ContainsColumn(`0)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.ContainsColumn(`0)
  id: ContainsColumn(`0)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: ContainsColumn(TKeyColumn)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsColumn(TKeyColumn)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsColumn(TKeyColumn)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet if this is an exsisting key in the matrix.\n"
  syntax:
    content: public bool ContainsColumn(TKeyColumn horizontalKey)
    parameters:
    - id: horizontalKey
      type: '{TKeyColumn}'
      description: Horizontal key
    return:
      type: System.Boolean
      description: True if this is an exsisting key in the matrix.
    content.vb: Public Function ContainsColumn(horizontalKey As TKeyColumn) As Boolean
  overload: SuperOffice.Util.KeyedMatrix`3.ContainsColumn*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsColumn(TKeyColumn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsColumn(TKeyColumn)
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumnKeys
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetColumnKeys
  id: GetColumnKeys
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetColumnKeys()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKeys()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKeys()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet an array containing all the horizontal keys.\n"
  syntax:
    content: public TKeyColumn[] GetColumnKeys()
    return:
      type: '{TKeyColumn}[]'
      description: Array containing all the horizontal keys.
    content.vb: Public Function GetColumnKeys As TKeyColumn()
  overload: SuperOffice.Util.KeyedMatrix`3.GetColumnKeys*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKeys()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKeys()
- uid: SuperOffice.Util.KeyedMatrix`3.GetRowKeys
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetRowKeys
  id: GetRowKeys
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetRowKeys()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKeys()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKeys()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet an array containing all the vertical keys.\n"
  syntax:
    content: public TKeyRow[] GetRowKeys()
    return:
      type: '{TKeyRow}[]'
      description: Array containing all the vertical keys.
    content.vb: Public Function GetRowKeys As TKeyRow()
  overload: SuperOffice.Util.KeyedMatrix`3.GetRowKeys*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKeys()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKeys()
- uid: SuperOffice.Util.KeyedMatrix`3.GetRow(`1)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetRow(`1)
  id: GetRow(`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetRow(TKeyRow)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRow(TKeyRow)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRow(TKeyRow)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>> GetRow(TKeyRow verticalKey)
    parameters:
    - id: verticalKey
      type: '{TKeyRow}'
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
    content.vb: Public Function GetRow(verticalKey As TKeyRow) As IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  overload: SuperOffice.Util.KeyedMatrix`3.GetRow*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRow(TKeyRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRow(TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  commentId: M:SuperOffice.Util.KeyedMatrix`3.MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  id: MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: MoveItems(KeyedMatrix<TKeyColumn, TKeyRow, TItem>, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.MoveItems(KeyedMatrix<TKeyColumn, TKeyRow, TItem>, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.MoveItems(SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>, System.Collections.Generic.IEnumerable<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>, System.Predicate<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nMovie items this instance of the KeyedMatrix to another instance.\n"
  syntax:
    content: public void MoveItems(KeyedMatrix<TKeyColumn, TKeyRow, TItem> destination, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>> items, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>> condition)
    parameters:
    - id: destination
      type: SuperOffice.Util.KeyedMatrix`3
      description: Destination matrix to move items to.
    - id: items
      type: System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
      description: Items to be moved.
    - id: condition
      type: System.Predicate{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
      description: Condition for the item to be moved.  Only items with positive conditions are moved.
    content.vb: Public Sub MoveItems(destination As KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), items As IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), condition As Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  overload: SuperOffice.Util.KeyedMatrix`3.MoveItems*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).MoveItems(KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).MoveItems(SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), System.Collections.Generic.IEnumerable(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)), System.Predicate(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  name.vb: MoveItems(KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
- uid: SuperOffice.Util.KeyedMatrix`3.MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Action{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  commentId: M:SuperOffice.Util.KeyedMatrix`3.MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Action{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  id: MoveItems(SuperOffice.Util.KeyedMatrix{`0,`1,`2},System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Action{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: MoveItems(KeyedMatrix<TKeyColumn, TKeyRow, TItem>, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Action<MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.MoveItems(KeyedMatrix<TKeyColumn, TKeyRow, TItem>, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Action<MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.MoveItems(SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>, System.Collections.Generic.IEnumerable<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>, System.Predicate<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>, System.Action<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nMovie items this instance of the KeyedMatrix to another instance.\n"
  syntax:
    content: public void MoveItems(KeyedMatrix<TKeyColumn, TKeyRow, TItem> destination, IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>> items, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>> condition, Action<MatrixItem<TKeyColumn, TKeyRow, TItem>> actionIfMoved)
    parameters:
    - id: destination
      type: SuperOffice.Util.KeyedMatrix`3
      description: Destination matrix to move items to.
    - id: items
      type: System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
      description: Items to be moved.
    - id: condition
      type: System.Predicate{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
      description: Condition for the item to be moved.  Only items with positive conditions are moved.
    - id: actionIfMoved
      type: System.Action{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
      description: Action performed on the item if it is moved.
    content.vb: Public Sub MoveItems(destination As KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), items As IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), condition As Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), actionIfMoved As Action(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  overload: SuperOffice.Util.KeyedMatrix`3.MoveItems*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).MoveItems(KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Action(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).MoveItems(SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), System.Collections.Generic.IEnumerable(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)), System.Predicate(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)), System.Action(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  name.vb: MoveItems(KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Action(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
- uid: SuperOffice.Util.KeyedMatrix`3.Exists(System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  commentId: M:SuperOffice.Util.KeyedMatrix`3.Exists(System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  id: Exists(System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}},System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}})
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Exists(IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Exists(IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Exists(System.Collections.Generic.IEnumerable<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>, System.Predicate<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public bool Exists(IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>> items, Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>> condition)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
    - id: condition
      type: System.Predicate{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
    return:
      type: System.Boolean
    content.vb: Public Function Exists(items As IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), condition As Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))) As Boolean
  overload: SuperOffice.Util.KeyedMatrix`3.Exists*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Exists(IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Exists(System.Collections.Generic.IEnumerable(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)), System.Predicate(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
  name.vb: Exists(IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)), Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem)))
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumn(`0)
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetColumn(`0)
  id: GetColumn(`0)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetColumn(TKeyColumn)
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumn(TKeyColumn)
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumn(TKeyColumn)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>> GetColumn(TKeyColumn horizontalKey)
    parameters:
    - id: horizontalKey
      type: '{TKeyColumn}'
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
    content.vb: Public Function GetColumn(horizontalKey As TKeyColumn) As IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  overload: SuperOffice.Util.KeyedMatrix`3.GetColumn*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumn(TKeyColumn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumn(TKeyColumn)
- uid: SuperOffice.Util.KeyedMatrix`3.ToArray
  commentId: M:SuperOffice.Util.KeyedMatrix`3.ToArray
  id: ToArray
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ToArray()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ToArray()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  syntax:
    content: public MatrixItem<TKeyColumn, TKeyRow, TItem>[, ] ToArray()
    return:
      type: SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}[,]
    content.vb: Public Function ToArray As MatrixItem(Of TKeyColumn, TKeyRow, TItem)(,)
  overload: SuperOffice.Util.KeyedMatrix`3.ToArray*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ToArray()
- uid: SuperOffice.Util.KeyedMatrix`3.GetEnumerator
  commentId: M:SuperOffice.Util.KeyedMatrix`3.GetEnumerator
  id: GetEnumerator
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetEnumerator()
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetEnumerator()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public IEnumerator<MatrixItem<TKeyColumn, TKeyRow, TItem>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  overload: SuperOffice.Util.KeyedMatrix`3.GetEnumerator*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetEnumerator()
- uid: SuperOffice.Util.KeyedMatrix`3.Item(System.Int32,System.Int32)
  commentId: P:SuperOffice.Util.KeyedMatrix`3.Item(System.Int32,System.Int32)
  id: Item(System.Int32,System.Int32)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Item[Int32, Int32]
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Item[Int32, Int32]
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Item[System.Int32, System.Int32]
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public MatrixItem<TKeyColumn, TKeyRow, TItem> this[int columnlIndex, int rowlIndex] { get; set; }
    parameters:
    - id: columnlIndex
      type: System.Int32
    - id: rowlIndex
      type: System.Int32
    return:
      type: SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}
    content.vb: Public Property Item(columnlIndex As Integer, rowlIndex As Integer) As MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  overload: SuperOffice.Util.KeyedMatrix`3.Item*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Item(Int32, Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
- uid: SuperOffice.Util.KeyedMatrix`3.Item(`0,`1)
  commentId: P:SuperOffice.Util.KeyedMatrix`3.Item(`0,`1)
  id: Item(`0,`1)
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Item[TKeyColumn, TKeyRow]
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Item[TKeyColumn, TKeyRow]
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Item[TKeyColumn, TKeyRow]
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\n\n"
  syntax:
    content: public TItem this[TKeyColumn columnKey, TKeyRow rowKey] { get; set; }
    parameters:
    - id: columnKey
      type: '{TKeyColumn}'
    - id: rowKey
      type: '{TKeyRow}'
    return:
      type: '{TItem}'
    content.vb: Public Property Item(columnKey As TKeyColumn, rowKey As TKeyRow) As TItem
  overload: SuperOffice.Util.KeyedMatrix`3.Item*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Item(TKeyColumn, TKeyRow)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Item(TKeyColumn, TKeyRow)
  name.vb: Item(TKeyColumn, TKeyRow)
- uid: SuperOffice.Util.KeyedMatrix`3.Width
  commentId: P:SuperOffice.Util.KeyedMatrix`3.Width
  id: Width
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Width
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Width
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet number of items in the horizontal dimension.\n"
  syntax:
    content: public int Width { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Width As Integer
  overload: SuperOffice.Util.KeyedMatrix`3.Width*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Width
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Width
- uid: SuperOffice.Util.KeyedMatrix`3.Height
  commentId: P:SuperOffice.Util.KeyedMatrix`3.Height
  id: Height
  parent: SuperOffice.Util.KeyedMatrix`3
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Height
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Height
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Util
  summary: "\nGet number of items in the vertical dimension.\n"
  syntax:
    content: public int Height { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Height As Integer
  overload: SuperOffice.Util.KeyedMatrix`3.Height*
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Height
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Height
references:
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Util.MatrixItem{`0,`1,`2}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType: IEnumerable<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType.vb: IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  name.vb: IEnumerable(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: SuperOffice.Util.KeyedMatrix`3.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>()
  nameWithType: EnumUtil.MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)()
  name.vb: MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>
    nameWithType: EnumUtil.MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)
    nameWithType: EnumUtil.MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.KeyedMatrix`3.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Util.KeyedMatrix{{TKeyColumn},{TKeyRow},{TItem}})
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>(KeyedMatrix<TKeyColumn, TKeyRow, TItem>)
  nameWithType: ObjectExtensions.AssignByReflection<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>(KeyedMatrix<TKeyColumn, TKeyRow, TItem>)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>>(SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))(KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))(SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
  name.vb: AssignByReflection(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))(KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>
    nameWithType: ObjectExtensions.AssignByReflection<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.KeyedMatrix`3
    name: KeyedMatrix
    nameWithType: KeyedMatrix
    fullName: SuperOffice.Util.KeyedMatrix
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
    nameWithType: ObjectExtensions.AssignByReflection(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Util.KeyedMatrix`3
    name: KeyedMatrix
    nameWithType: KeyedMatrix
    fullName: SuperOffice.Util.KeyedMatrix
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.KeyedMatrix`3.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>()
  nameWithType: ObjectExtensions.GraphCopy<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))()
  name.vb: GraphCopy(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>
    nameWithType: ObjectExtensions.GraphCopy<KeyedMatrix<TKeyColumn, TKeyRow, TItem>>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
    nameWithType: ObjectExtensions.GraphCopy(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem))
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.KeyedMatrix`3.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>()
  nameWithType: Converters.MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>()
  nameWithType.vb: Converters.MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)()
  name.vb: MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>
    nameWithType: Converters.MapEnums<KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)
    nameWithType: Converters.MapEnums(Of KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem), To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Util.KeyedMatrix`3.#ctor*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.#ctor
  isExternal: true
  name: KeyedMatrix
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.KeyedMatrix
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.KeyedMatrix
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).KeyedMatrix
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).KeyedMatrix
- uid: System.Collections.Generic.IEqualityComparer{{TKeyColumn}}
  commentId: '!:System.Collections.Generic.IEqualityComparer{`0}'
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKeyColumn>
  nameWithType: IEqualityComparer<TKeyColumn>
  fullName: System.Collections.Generic.IEqualityComparer<TKeyColumn>
  nameWithType.vb: IEqualityComparer(Of TKeyColumn)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKeyColumn)
  name.vb: IEqualityComparer(Of TKeyColumn)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKeyRow}}
  commentId: '!:System.Collections.Generic.IEqualityComparer{`1}'
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKeyRow>
  nameWithType: IEqualityComparer<TKeyRow>
  fullName: System.Collections.Generic.IEqualityComparer<TKeyRow>
  nameWithType.vb: IEqualityComparer(Of TKeyRow)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKeyRow)
  name.vb: IEqualityComparer(Of TKeyRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<>
  nameWithType: IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  nameWithType.vb: IEqualityComparer(Of )
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.KeyedMatrix`3.AddColumn*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.AddColumn
  isExternal: true
  name: AddColumn
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddColumn
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddColumn
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddColumn
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddColumn
- uid: '{TKeyColumn}'
  commentId: '!:TKeyColumn'
  definition: TKeyColumn
  name: TKeyColumn
  nameWithType: TKeyColumn
  fullName: TKeyColumn
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TKeyColumn
  name: TKeyColumn
  nameWithType: TKeyColumn
  fullName: TKeyColumn
- uid: SuperOffice.Util.KeyedMatrix`3.RemoveColumn*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.RemoveColumn
  isExternal: true
  name: RemoveColumn
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveColumn
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveColumn
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveColumn
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveColumn
- uid: SuperOffice.Util.KeyedMatrix`3.RemoveRow*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.RemoveRow
  isExternal: true
  name: RemoveRow
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveRow
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.RemoveRow
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveRow
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).RemoveRow
- uid: '{TKeyRow}'
  commentId: '!:TKeyRow'
  definition: TKeyRow
  name: TKeyRow
  nameWithType: TKeyRow
  fullName: TKeyRow
- uid: TKeyRow
  name: TKeyRow
  nameWithType: TKeyRow
  fullName: TKeyRow
- uid: SuperOffice.Util.KeyedMatrix`3.ClearColumns*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.ClearColumns
  isExternal: true
  name: ClearColumns
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearColumns
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearColumns
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearColumns
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearColumns
- uid: SuperOffice.Util.KeyedMatrix`3.ClearRows*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.ClearRows
  isExternal: true
  name: ClearRows
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearRows
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ClearRows
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearRows
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ClearRows
- uid: SuperOffice.Util.KeyedMatrix`3.Clear*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Clear
  isExternal: true
  name: Clear
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Clear
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Clear
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Clear
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Clear
- uid: SuperOffice.Util.KeyedMatrix`3.Compact*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Compact
  isExternal: true
  name: Compact
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Compact
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Compact
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Compact
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Compact
- uid: SuperOffice.Util.KeyedMatrix`3.GetRowIndex*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetRowIndex
  isExternal: true
  name: GetRowIndex
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowIndex
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowIndex
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowIndex
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowIndex
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumnIndex*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetColumnIndex
  isExternal: true
  name: GetColumnIndex
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnIndex
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnIndex
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnIndex
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnIndex
- uid: SuperOffice.Util.KeyedMatrix`3.GetRowKey*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetRowKey
  isExternal: true
  name: GetRowKey
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKey
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKey
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKey
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKey
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumnKey*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetColumnKey
  isExternal: true
  name: GetColumnKey
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKey
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKey
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKey
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKey
- uid: SuperOffice.Util.KeyedMatrix`3.AlterRowKey*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.AlterRowKey
  isExternal: true
  name: AlterRowKey
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterRowKey
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterRowKey
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterRowKey
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterRowKey
- uid: SuperOffice.Util.KeyedMatrix`3.AlterColumnKey*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.AlterColumnKey
  isExternal: true
  name: AlterColumnKey
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterColumnKey
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AlterColumnKey
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterColumnKey
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AlterColumnKey
- uid: SuperOffice.Util.KeyedMatrix`3.AddRow*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.AddRow
  isExternal: true
  name: AddRow
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddRow
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.AddRow
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddRow
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).AddRow
- uid: SuperOffice.Util.KeyedMatrix`3.Contains*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Contains
  isExternal: true
  name: Contains
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Contains
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Contains
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Contains
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Util.KeyedMatrix`3.ContainsRow*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.ContainsRow
  isExternal: true
  name: ContainsRow
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsRow
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsRow
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsRow
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsRow
- uid: SuperOffice.Util.KeyedMatrix`3.ContainsColumn*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.ContainsColumn
  isExternal: true
  name: ContainsColumn
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsColumn
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ContainsColumn
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsColumn
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ContainsColumn
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumnKeys*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetColumnKeys
  isExternal: true
  name: GetColumnKeys
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKeys
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumnKeys
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKeys
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumnKeys
- uid: '{TKeyColumn}[]'
  isExternal: true
  name: TKeyColumn[]
  nameWithType: TKeyColumn[]
  fullName: TKeyColumn[]
  nameWithType.vb: TKeyColumn()
  fullName.vb: TKeyColumn()
  name.vb: TKeyColumn()
  spec.csharp:
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Util.KeyedMatrix`3.GetRowKeys*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetRowKeys
  isExternal: true
  name: GetRowKeys
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKeys
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRowKeys
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKeys
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRowKeys
- uid: '{TKeyRow}[]'
  isExternal: true
  name: TKeyRow[]
  nameWithType: TKeyRow[]
  fullName: TKeyRow[]
  nameWithType.vb: TKeyRow()
  fullName.vb: TKeyRow()
  name.vb: TKeyRow()
  spec.csharp:
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Util.KeyedMatrix`3.GetRow*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetRow
  isExternal: true
  name: GetRow
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRow
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetRow
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRow
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetRow
- uid: SuperOffice.Util.KeyedMatrix`3.MoveItems*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.MoveItems
  isExternal: true
  name: MoveItems
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.MoveItems
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.MoveItems
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).MoveItems
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).MoveItems
- uid: SuperOffice.Util.KeyedMatrix`3
  commentId: T:SuperOffice.Util.KeyedMatrix`3
  parent: SuperOffice.Util
  isExternal: true
  name: KeyedMatrix<TKeyColumn, TKeyRow, TItem>
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem)
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem)
  name.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem)
  spec.csharp:
  - uid: SuperOffice.Util.KeyedMatrix`3
    name: KeyedMatrix
    nameWithType: KeyedMatrix
    fullName: SuperOffice.Util.KeyedMatrix
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Util.KeyedMatrix`3
    name: KeyedMatrix
    nameWithType: KeyedMatrix
    fullName: SuperOffice.Util.KeyedMatrix
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
  commentId: '!:System.Predicate{SuperOffice.Util.MatrixItem{`0,`1,`2}}'
  definition: System.Predicate`1
  name: Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType: Predicate<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  fullName: System.Predicate<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType.vb: Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  fullName.vb: System.Predicate(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  name.vb: Predicate(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
  commentId: '!:System.Action{SuperOffice.Util.MatrixItem{`0,`1,`2}}'
  definition: System.Action`1
  name: Action<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType: Action<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  fullName: System.Action<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType.vb: Action(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  fullName.vb: System.Action(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  name.vb: Action(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.KeyedMatrix`3.Exists*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Exists
  isExternal: true
  name: Exists
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Exists
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Exists
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Exists
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Exists
- uid: SuperOffice.Util.KeyedMatrix`3.GetColumn*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetColumn
  isExternal: true
  name: GetColumn
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumn
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetColumn
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumn
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetColumn
- uid: SuperOffice.Util.KeyedMatrix`3.ToArray*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.ToArray
  isExternal: true
  name: ToArray
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ToArray
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.ToArray
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ToArray
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).ToArray
- uid: SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}[,]
  isExternal: true
  name: MatrixItem<TKeyColumn, TKeyRow, TItem>[,]
  nameWithType: MatrixItem<TKeyColumn, TKeyRow, TItem>[,]
  fullName: SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>[,]
  nameWithType.vb: MatrixItem(Of TKeyColumn, TKeyRow, TItem)(,)
  fullName.vb: SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)(,)
  name.vb: MatrixItem(Of TKeyColumn, TKeyRow, TItem)(,)
  spec.csharp:
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: SuperOffice.Util.KeyedMatrix`3.GetEnumerator*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetEnumerator
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.GetEnumerator
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetEnumerator
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}}
  commentId: '!:System.Collections.Generic.IEnumerator{SuperOffice.Util.MatrixItem{`0,`1,`2}}'
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType: IEnumerator<MatrixItem<TKeyColumn, TKeyRow, TItem>>
  fullName: System.Collections.Generic.IEnumerator<SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>>
  nameWithType.vb: IEnumerator(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  fullName.vb: System.Collections.Generic.IEnumerator(Of SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  name.vb: IEnumerator(Of MatrixItem(Of TKeyColumn, TKeyRow, TItem))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.KeyedMatrix`3.Item*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Item
  isExternal: true
  name: Item
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Item
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Item
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Item
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Item
- uid: SuperOffice.Util.MatrixItem{{TKeyColumn},{TKeyRow},{TItem}}
  commentId: T:SuperOffice.Util.MatrixItem{`0,`1,`2}
  parent: SuperOffice.Util
  definition: SuperOffice.Util.MatrixItem`3
  name: MatrixItem<TKeyColumn, TKeyRow, TItem>
  nameWithType: MatrixItem<TKeyColumn, TKeyRow, TItem>
  fullName: SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>
  nameWithType.vb: MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  fullName.vb: SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  name.vb: MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  spec.csharp:
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.MatrixItem`3
  commentId: T:SuperOffice.Util.MatrixItem`3
  isExternal: true
  name: MatrixItem<TKeyColumn, TKeyRow, TItem>
  nameWithType: MatrixItem<TKeyColumn, TKeyRow, TItem>
  fullName: SuperOffice.Util.MatrixItem<TKeyColumn, TKeyRow, TItem>
  nameWithType.vb: MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  fullName.vb: SuperOffice.Util.MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  name.vb: MatrixItem(Of TKeyColumn, TKeyRow, TItem)
  spec.csharp:
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Util.MatrixItem`3
    name: MatrixItem
    nameWithType: MatrixItem
    fullName: SuperOffice.Util.MatrixItem
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKeyColumn
    nameWithType: TKeyColumn
    fullName: TKeyColumn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKeyRow
    nameWithType: TKeyRow
    fullName: TKeyRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: SuperOffice.Util.KeyedMatrix`3.Width*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Width
  isExternal: true
  name: Width
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Width
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Width
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Width
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Width
- uid: SuperOffice.Util.KeyedMatrix`3.Height*
  commentId: Overload:SuperOffice.Util.KeyedMatrix`3.Height
  isExternal: true
  name: Height
  nameWithType: KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Height
  fullName: SuperOffice.Util.KeyedMatrix<TKeyColumn, TKeyRow, TItem>.Height
  nameWithType.vb: KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Height
  fullName.vb: SuperOffice.Util.KeyedMatrix(Of TKeyColumn, TKeyRow, TItem).Height
