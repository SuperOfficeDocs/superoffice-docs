### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.CredentialsManager
  commentId: T:SuperOffice.Security.CredentialsManager
  id: CredentialsManager
  parent: SuperOffice.Security
  children:
  - SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames
  - SuperOffice.Security.CredentialsManager.GetAllPlugins
  - SuperOffice.Security.CredentialsManager.GetCurrent
  - SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.Security.CredentialsManager.GetPlugin(System.String)
  - SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String)
  - SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String,System.Int32)
  - SuperOffice.Security.CredentialsManager.Refresh
  - SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String,System.Int32,System.String)
  - SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String,System.String)
  - SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String,SuperOffice.Security.UntrustedCredentials)
  - SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials)
  langs:
  - csharp
  - vb
  name: CredentialsManager
  nameWithType: CredentialsManager
  fullName: SuperOffice.Security.CredentialsManager
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nManages <xref href=\"SuperOffice.CRM.Administration.IUserCredentialPlugin\" data-throw-if-not-resolved=\"false\"></xref> instances. \n"
  syntax:
    content: public class CredentialsManager
    content.vb: Public Class CredentialsManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Security.CredentialsManager.EnumUtil.MapEnums``2
  - SuperOffice.Security.CredentialsManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Security.CredentialsManager.GetCurrent
  commentId: M:SuperOffice.Security.CredentialsManager.GetCurrent
  id: GetCurrent
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: CredentialsManager.GetCurrent()
  fullName: SuperOffice.Security.CredentialsManager.GetCurrent()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet the current <xref href=\"SuperOffice.Security.CredentialsManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public static CredentialsManager GetCurrent()
    return:
      type: SuperOffice.Security.CredentialsManager
    content.vb: Public Shared Function GetCurrent As CredentialsManager
  overload: SuperOffice.Security.CredentialsManager.GetCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.CredentialsManager.Refresh
  commentId: M:SuperOffice.Security.CredentialsManager.Refresh
  id: Refresh
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: Refresh()
  nameWithType: CredentialsManager.Refresh()
  fullName: SuperOffice.Security.CredentialsManager.Refresh()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nRefresh the list of credential plugins. Useful if you have just loaded some new licenses.\n"
  syntax:
    content: public void Refresh()
    content.vb: Public Sub Refresh
  overload: SuperOffice.Security.CredentialsManager.Refresh*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.CredentialsManager.GetPlugin(System.String)
  commentId: M:SuperOffice.Security.CredentialsManager.GetPlugin(System.String)
  id: GetPlugin(System.String)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetPlugin(String)
  nameWithType: CredentialsManager.GetPlugin(String)
  fullName: SuperOffice.Security.CredentialsManager.GetPlugin(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet the plugin associated with a given credential type. \n"
  syntax:
    content: public IUserCredentialPlugin GetPlugin(string credentialType)
    parameters:
    - id: credentialType
      type: System.String
      description: 'Name of credential plugin: &quot;CRM5/PASSWORD&quot; or &quot;ActiveDirectory&quot;.'
    return:
      type: SuperOffice.CRM.Administration.IUserCredentialPlugin
      description: Plugin interface, or null if plugin is not available/licensed.
    content.vb: Public Function GetPlugin(credentialType As String) As IUserCredentialPlugin
  overload: SuperOffice.Security.CredentialsManager.GetPlugin*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.CredentialsManager.GetAllPlugins
  commentId: M:SuperOffice.Security.CredentialsManager.GetAllPlugins
  id: GetAllPlugins
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetAllPlugins()
  nameWithType: CredentialsManager.GetAllPlugins()
  fullName: SuperOffice.Security.CredentialsManager.GetAllPlugins()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nReturn a list of all credential plugins that are licensed and available.\ni.e. some plugins that are installed may not be present, because the corresponding license is not present.\n"
  syntax:
    content: public Dictionary<string, IUserCredentialPlugin> GetAllPlugins()
    return:
      type: System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
      description: 'Dictionary of plugin name to plugin instance.  e.g: &quot;ActiveDirectory&quot;=ActiveDirectoryCredentialPlugin'
    content.vb: Public Function GetAllPlugins As Dictionary(Of String, IUserCredentialPlugin)
  overload: SuperOffice.Security.CredentialsManager.GetAllPlugins*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultCredentialPlugin(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetDefaultCredentialPlugin(UserType, Int32)
  nameWithType: CredentialsManager.GetDefaultCredentialPlugin(UserType, Int32)
  fullName: SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin(SuperOffice.License.UserType, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  syntax:
    content: public IUserCredentialPlugin GetDefaultCredentialPlugin(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Administration.IUserCredentialPlugin
    content.vb: Public Function GetDefaultCredentialPlugin(userType As UserType, personId As Integer) As IUserCredentialPlugin
  overload: SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames
  commentId: M:SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames
  id: GetAllInstalledPluginNames
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetAllInstalledPluginNames()
  nameWithType: CredentialsManager.GetAllInstalledPluginNames()
  fullName: SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nReturn a list of all credential plugins that are available (including those that .\ni.e. all plugins that are installed are returned, including those without a corresponding license.\n"
  syntax:
    content: public string[] GetAllInstalledPluginNames()
    return:
      type: System.String[]
      description: 'List of all ICredntialPlugin names e.g: &quot;ActiveDirectory&quot;, &quot;CRM5/PASSWORD&quot;'
    content.vb: Public Function GetAllInstalledPluginNames As String()
  overload: SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String,System.Int32,System.String)
  commentId: M:SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String,System.Int32,System.String)
  id: RemoveUntrustedCredentials(System.String,System.Int32,System.String)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentials(String, Int32, String)
  nameWithType: CredentialsManager.RemoveUntrustedCredentials(String, Int32, String)
  fullName: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String, System.Int32, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nRemove a credentials entry for an associate\n"
  syntax:
    content: public static void RemoveUntrustedCredentials(string type, int associateId, string publicValue)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: associateId
      type: System.Int32
      description: Id of associate to remove for
    - id: publicValue
      type: System.String
      description: PublicValue of credential to remove
    content.vb: Public Shared Sub RemoveUntrustedCredentials(type As String, associateId As Integer, publicValue As String)
  overload: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String,System.String)
  commentId: M:SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String,System.String)
  id: RemoveUntrustedCredentials(System.String,System.String)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: RemoveUntrustedCredentials(String, String)
  nameWithType: CredentialsManager.RemoveUntrustedCredentials(String, String)
  fullName: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nRemove a credentials entry for authenticated user\n"
  syntax:
    content: public static void RemoveUntrustedCredentials(string type, string publicValue)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: publicValue
      type: System.String
      description: PublicValue of credential to remove
    content.vb: Public Shared Sub RemoveUntrustedCredentials(type As String, publicValue As String)
  overload: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials)
  commentId: M:SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials)
  id: SaveUntrustedCredentials(System.String,System.Int32,SuperOffice.Security.UntrustedCredentials)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentials(String, Int32, UntrustedCredentials)
  nameWithType: CredentialsManager.SaveUntrustedCredentials(String, Int32, UntrustedCredentials)
  fullName: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String, System.Int32, SuperOffice.Security.UntrustedCredentials)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nSave credentials for a specified associate\n"
  syntax:
    content: public static void SaveUntrustedCredentials(string type, int associateId, UntrustedCredentials credentials)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: associateId
      type: System.Int32
      description: Id of associate to save for
    - id: credentials
      type: SuperOffice.Security.UntrustedCredentials
      description: Credentials to save
    content.vb: Public Shared Sub SaveUntrustedCredentials(type As String, associateId As Integer, credentials As UntrustedCredentials)
  overload: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String,SuperOffice.Security.UntrustedCredentials)
  commentId: M:SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String,SuperOffice.Security.UntrustedCredentials)
  id: SaveUntrustedCredentials(System.String,SuperOffice.Security.UntrustedCredentials)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: SaveUntrustedCredentials(String, UntrustedCredentials)
  nameWithType: CredentialsManager.SaveUntrustedCredentials(String, UntrustedCredentials)
  fullName: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials(System.String, SuperOffice.Security.UntrustedCredentials)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nSave credentials for authenticated associate\n"
  syntax:
    content: public static void SaveUntrustedCredentials(string type, UntrustedCredentials credentials)
    parameters:
    - id: type
      type: System.String
      description: 'Type of credential(Ex: &quot;imap&quot;, &quot;smtp&quot;)'
    - id: credentials
      type: SuperOffice.Security.UntrustedCredentials
      description: Credentials to save
    content.vb: Public Shared Sub SaveUntrustedCredentials(type As String, credentials As UntrustedCredentials)
  overload: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String)
  commentId: M:SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String)
  id: GetUntrustedCredentials(System.String)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentials(String)
  nameWithType: CredentialsManager.GetUntrustedCredentials(String)
  fullName: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet a set of credentials for authenticated associate\n"
  syntax:
    content: public static UntrustedCredentials[] GetUntrustedCredentials(string type)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials to retrieve
    return:
      type: SuperOffice.Security.UntrustedCredentials[]
      description: Arrow of populated credential objects.
    content.vb: Public Shared Function GetUntrustedCredentials(type As String) As UntrustedCredentials()
  overload: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String,System.Int32)
  commentId: M:SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String,System.Int32)
  id: GetUntrustedCredentials(System.String,System.Int32)
  parent: SuperOffice.Security.CredentialsManager
  langs:
  - csharp
  - vb
  name: GetUntrustedCredentials(String, Int32)
  nameWithType: CredentialsManager.GetUntrustedCredentials(String, Int32)
  fullName: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials(System.String, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Security
  summary: "\nGet a set of credentials for a specified associate\n"
  syntax:
    content: public static UntrustedCredentials[] GetUntrustedCredentials(string type, int associateId)
    parameters:
    - id: type
      type: System.String
      description: Type of credentials to retrieve
    - id: associateId
      type: System.Int32
      description: Id of associate to retrieve credentials for
    return:
      type: SuperOffice.Security.UntrustedCredentials[]
      description: Arrow of populated credential objects. SecretValue is left blank for security purposes if associate is not authenticated user or a system user.
    content.vb: Public Shared Function GetUntrustedCredentials(type As String, associateId As Integer) As UntrustedCredentials()
  overload: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.Security
  commentId: N:SuperOffice.Security
  isExternal: true
  name: SuperOffice.Security
  nameWithType: SuperOffice.Security
  fullName: SuperOffice.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.CredentialsManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CredentialsManager, To>()
  nameWithType: EnumUtil.MapEnums<CredentialsManager, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Security.CredentialsManager, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CredentialsManager, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Security.CredentialsManager, To)()
  name.vb: MapEnums(Of CredentialsManager, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CredentialsManager, To>
    nameWithType: EnumUtil.MapEnums<CredentialsManager, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Security.CredentialsManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CredentialsManager, To)
    nameWithType: EnumUtil.MapEnums(Of CredentialsManager, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Security.CredentialsManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.CredentialsManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CredentialsManager, To>()
  nameWithType: Converters.MapEnums<CredentialsManager, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.CredentialsManager, To>()
  nameWithType.vb: Converters.MapEnums(Of CredentialsManager, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.CredentialsManager, To)()
  name.vb: MapEnums(Of CredentialsManager, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CredentialsManager, To>
    nameWithType: Converters.MapEnums<CredentialsManager, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.CredentialsManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CredentialsManager, To)
    nameWithType: Converters.MapEnums(Of CredentialsManager, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.CredentialsManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Security.CredentialsManager.GetCurrent*
  commentId: Overload:SuperOffice.Security.CredentialsManager.GetCurrent
  isExternal: true
  name: GetCurrent
  nameWithType: CredentialsManager.GetCurrent
  fullName: SuperOffice.Security.CredentialsManager.GetCurrent
- uid: SuperOffice.Security.CredentialsManager
  commentId: T:SuperOffice.Security.CredentialsManager
  parent: SuperOffice.Security
  isExternal: true
  name: CredentialsManager
  nameWithType: CredentialsManager
  fullName: SuperOffice.Security.CredentialsManager
- uid: SuperOffice.Security.CredentialsManager.Refresh*
  commentId: Overload:SuperOffice.Security.CredentialsManager.Refresh
  isExternal: true
  name: Refresh
  nameWithType: CredentialsManager.Refresh
  fullName: SuperOffice.Security.CredentialsManager.Refresh
- uid: SuperOffice.Security.CredentialsManager.GetPlugin*
  commentId: Overload:SuperOffice.Security.CredentialsManager.GetPlugin
  isExternal: true
  name: GetPlugin
  nameWithType: CredentialsManager.GetPlugin
  fullName: SuperOffice.Security.CredentialsManager.GetPlugin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
- uid: SuperOffice.Security.CredentialsManager.GetAllPlugins*
  commentId: Overload:SuperOffice.Security.CredentialsManager.GetAllPlugins
  isExternal: true
  name: GetAllPlugins
  nameWithType: CredentialsManager.GetAllPlugins
  fullName: SuperOffice.Security.CredentialsManager.GetAllPlugins
- uid: System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
  commentId: T:System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.Administration.IUserCredentialPlugin}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, IUserCredentialPlugin>
  nameWithType: Dictionary<String, IUserCredentialPlugin>
  fullName: System.Collections.Generic.Dictionary<System.String, SuperOffice.CRM.Administration.IUserCredentialPlugin>
  nameWithType.vb: Dictionary(Of String, IUserCredentialPlugin)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SuperOffice.CRM.Administration.IUserCredentialPlugin)
  name.vb: Dictionary(Of String, IUserCredentialPlugin)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    nameWithType: IUserCredentialPlugin
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    nameWithType: IUserCredentialPlugin
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin*
  commentId: Overload:SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin
  isExternal: true
  name: GetDefaultCredentialPlugin
  nameWithType: CredentialsManager.GetDefaultCredentialPlugin
  fullName: SuperOffice.Security.CredentialsManager.GetDefaultCredentialPlugin
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames*
  commentId: Overload:SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames
  isExternal: true
  name: GetAllInstalledPluginNames
  nameWithType: CredentialsManager.GetAllInstalledPluginNames
  fullName: SuperOffice.Security.CredentialsManager.GetAllInstalledPluginNames
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials*
  commentId: Overload:SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials
  isExternal: true
  name: RemoveUntrustedCredentials
  nameWithType: CredentialsManager.RemoveUntrustedCredentials
  fullName: SuperOffice.Security.CredentialsManager.RemoveUntrustedCredentials
- uid: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials*
  commentId: Overload:SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials
  isExternal: true
  name: SaveUntrustedCredentials
  nameWithType: CredentialsManager.SaveUntrustedCredentials
  fullName: SuperOffice.Security.CredentialsManager.SaveUntrustedCredentials
- uid: SuperOffice.Security.UntrustedCredentials
  commentId: T:SuperOffice.Security.UntrustedCredentials
  parent: SuperOffice.Security
  isExternal: true
  name: UntrustedCredentials
  nameWithType: UntrustedCredentials
  fullName: SuperOffice.Security.UntrustedCredentials
- uid: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials*
  commentId: Overload:SuperOffice.Security.CredentialsManager.GetUntrustedCredentials
  isExternal: true
  name: GetUntrustedCredentials
  nameWithType: CredentialsManager.GetUntrustedCredentials
  fullName: SuperOffice.Security.CredentialsManager.GetUntrustedCredentials
- uid: SuperOffice.Security.UntrustedCredentials[]
  isExternal: true
  name: UntrustedCredentials[]
  nameWithType: UntrustedCredentials[]
  fullName: SuperOffice.Security.UntrustedCredentials[]
  nameWithType.vb: UntrustedCredentials()
  fullName.vb: SuperOffice.Security.UntrustedCredentials()
  name.vb: UntrustedCredentials()
  spec.csharp:
  - uid: SuperOffice.Security.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.Security.UntrustedCredentials
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Security.UntrustedCredentials
    name: UntrustedCredentials
    nameWithType: UntrustedCredentials
    fullName: SuperOffice.Security.UntrustedCredentials
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
