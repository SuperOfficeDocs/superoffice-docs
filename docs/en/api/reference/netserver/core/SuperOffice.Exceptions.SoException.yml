### YamlMime:ManagedReference
items:
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  id: SoException
  parent: SuperOffice.Exceptions
  children:
  - SuperOffice.Exceptions.SoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - SuperOffice.Exceptions.SoException.#ctor(System.String,System.Boolean)
  - SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.Exception[],System.Nullable{System.Boolean})
  - SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.Nullable{System.Boolean})
  - SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.String,System.Nullable{System.Boolean})
  - SuperOffice.Exceptions.SoException.#ctor(System.String,System.String,System.Boolean)
  - SuperOffice.Exceptions.SoException.FriendlyText
  - SuperOffice.Exceptions.SoException.LogAsException
  langs:
  - csharp
  - vb
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: "\nDefault exception for SuperOffice NetServer.  \n"
  remarks: "\nOther SuperOffice NetServer exceptions inherit from this exception class.  \nThis exception also supports the <xref href=\"SuperOffice.Diagnostics.SoLogger\" data-throw-if-not-resolved=\"false\"></xref> \nmechanism using the <see cref=\"!:LogException\"></see> method.\n"
  syntax:
    content: 'public class SoException : Exception'
    content.vb: >-
      Public Class SoException
          Inherits Exception
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.CRM.Rows.RowValidatorException
  - SuperOffice.CRM.Travel.TravelException
  - SuperOffice.Diagnostics.DiagnoseException
  - SuperOffice.Exceptions.SoConsentException
  - SuperOffice.Exceptions.SoDbAccessException
  - SuperOffice.Exceptions.SoDuplicateException
  - SuperOffice.Exceptions.SoFileNotFoundException
  - SuperOffice.Exceptions.SoIllegalOperationException
  - SuperOffice.Exceptions.SoIllegalXmlException
  - SuperOffice.Exceptions.SoInvalidArgumentException
  - SuperOffice.Exceptions.SoInvalidCharacterException
  - SuperOffice.Exceptions.SoInvalidPasswordException
  - SuperOffice.Exceptions.SoInvalidSignatureException
  - SuperOffice.Exceptions.SoLicenseException
  - SuperOffice.Exceptions.SoMassOperationException
  - SuperOffice.Exceptions.SoNotFoundException
  - SuperOffice.Exceptions.SoNotImplementedException
  - SuperOffice.Exceptions.SoNotSupportedException
  - SuperOffice.Exceptions.SoSentryException
  - SuperOffice.Exceptions.SoServerException
  - SuperOffice.Exceptions.SoSessionException
  - SuperOffice.Exceptions.SoValidationException
  - SuperOffice.Security.Util.WindowsIdentityHelper.WindowsIdentityHelperException
  extensionMethods:
  - SuperOffice.Exceptions.SoException.EnumUtil.MapEnums``2
  - SuperOffice.Exceptions.SoException.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Exceptions.SoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:SuperOffice.Exceptions.SoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: SoException(SerializationInfo, StreamingContext)
  nameWithType: SoException.SoException(SerializationInfo, StreamingContext)
  fullName: SuperOffice.Exceptions.SoException.SoException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  syntax:
    content: protected SoException(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
    - id: context
      type: System.Runtime.Serialization.StreamingContext
    content.vb: Protected Sub New(info As SerializationInfo, context As StreamingContext)
  overload: SuperOffice.Exceptions.SoException.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Exceptions.SoException.#ctor(System.String,System.Boolean)
  commentId: M:SuperOffice.Exceptions.SoException.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: SoException(String, Boolean)
  nameWithType: SoException.SoException(String, Boolean)
  fullName: SuperOffice.Exceptions.SoException.SoException(System.String, System.Boolean)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: "\nDefault constructor.\n"
  syntax:
    content: public SoException(string message, bool logAsException = true)
    parameters:
    - id: message
      type: System.String
      description: Error message
    - id: logAsException
      type: System.Boolean
      description: Should the exception be logged as an exception with ILogger og simply as a trace message.  Default is True.
    content.vb: Public Sub New(message As String, logAsException As Boolean = True)
  overload: SuperOffice.Exceptions.SoException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.Nullable{System.Boolean})
  commentId: M:SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.Nullable{System.Boolean})
  id: '#ctor(System.String,System.Exception,System.Nullable{System.Boolean})'
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: SoException(String, Exception, Nullable<Boolean>)
  nameWithType: SoException.SoException(String, Exception, Nullable<Boolean>)
  fullName: SuperOffice.Exceptions.SoException.SoException(System.String, System.Exception, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: "\nDefault constructor.\n"
  syntax:
    content: public SoException(string message, Exception innerException, Nullable<bool> logAsException = null)
    parameters:
    - id: message
      type: System.String
      description: Error message.
    - id: innerException
      type: System.Exception
      description: Inner exception.
    - id: logAsException
      type: System.Nullable{System.Boolean}
      description: Should the exception be logged as an exception with ILogger og simply as a trace message.  Default is True.
    content.vb: Public Sub New(message As String, innerException As Exception, logAsException As Nullable(Of Boolean) = Nothing)
  overload: SuperOffice.Exceptions.SoException.#ctor*
  nameWithType.vb: SoException.SoException(String, Exception, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Exceptions.SoException.SoException(System.String, System.Exception, System.Nullable(Of System.Boolean))
  name.vb: SoException(String, Exception, Nullable(Of Boolean))
- uid: SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.String,System.Nullable{System.Boolean})
  commentId: M:SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.String,System.Nullable{System.Boolean})
  id: '#ctor(System.String,System.Exception,System.String,System.Nullable{System.Boolean})'
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: SoException(String, Exception, String, Nullable<Boolean>)
  nameWithType: SoException.SoException(String, Exception, String, Nullable<Boolean>)
  fullName: SuperOffice.Exceptions.SoException.SoException(System.String, System.Exception, System.String, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  syntax:
    content: public SoException(string message, Exception innerException, string friendlyText, Nullable<bool> logAsException = null)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: System.Exception
    - id: friendlyText
      type: System.String
    - id: logAsException
      type: System.Nullable{System.Boolean}
    content.vb: Public Sub New(message As String, innerException As Exception, friendlyText As String, logAsException As Nullable(Of Boolean) = Nothing)
  overload: SuperOffice.Exceptions.SoException.#ctor*
  nameWithType.vb: SoException.SoException(String, Exception, String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Exceptions.SoException.SoException(System.String, System.Exception, System.String, System.Nullable(Of System.Boolean))
  name.vb: SoException(String, Exception, String, Nullable(Of Boolean))
- uid: SuperOffice.Exceptions.SoException.#ctor(System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.Exceptions.SoException.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: SoException(String, String, Boolean)
  nameWithType: SoException.SoException(String, String, Boolean)
  fullName: SuperOffice.Exceptions.SoException.SoException(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  syntax:
    content: public SoException(string message, string friendlyText, bool logAsException)
    parameters:
    - id: message
      type: System.String
    - id: friendlyText
      type: System.String
    - id: logAsException
      type: System.Boolean
    content.vb: Public Sub New(message As String, friendlyText As String, logAsException As Boolean)
  overload: SuperOffice.Exceptions.SoException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.Exception[],System.Nullable{System.Boolean})
  commentId: M:SuperOffice.Exceptions.SoException.#ctor(System.String,System.Exception,System.Exception[],System.Nullable{System.Boolean})
  id: '#ctor(System.String,System.Exception,System.Exception[],System.Nullable{System.Boolean})'
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: SoException(String, Exception, Exception[], Nullable<Boolean>)
  nameWithType: SoException.SoException(String, Exception, Exception[], Nullable<Boolean>)
  fullName: SuperOffice.Exceptions.SoException.SoException(System.String, System.Exception, System.Exception[], System.Nullable<System.Boolean>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: "\nConstructor supporting an array of additional exceptions.\n"
  syntax:
    content: public SoException(string message, Exception innerException, Exception[] cleanupExceptions, Nullable<bool> logAsException = null)
    parameters:
    - id: message
      type: System.String
      description: Error message.
    - id: innerException
      type: System.Exception
      description: Inner exception.
    - id: cleanupExceptions
      type: System.Exception[]
      description: Additional exceptions in an array.
    - id: logAsException
      type: System.Nullable{System.Boolean}
      description: Should the exception be logged as an exception with ILogger og simply as a trace message.  Default is True.
    content.vb: Public Sub New(message As String, innerException As Exception, cleanupExceptions As Exception(), logAsException As Nullable(Of Boolean) = Nothing)
  overload: SuperOffice.Exceptions.SoException.#ctor*
  nameWithType.vb: SoException.SoException(String, Exception, Exception(), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Exceptions.SoException.SoException(System.String, System.Exception, System.Exception(), System.Nullable(Of System.Boolean))
  name.vb: SoException(String, Exception, Exception(), Nullable(Of Boolean))
- uid: SuperOffice.Exceptions.SoException.LogAsException
  commentId: P:SuperOffice.Exceptions.SoException.LogAsException
  id: LogAsException
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: LogAsException
  nameWithType: SoException.LogAsException
  fullName: SuperOffice.Exceptions.SoException.LogAsException
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: "\nShould the exception be logged as an exception with ILogger og simply as a trace message.\n"
  syntax:
    content: public bool LogAsException { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property LogAsException As Boolean
  overload: SuperOffice.Exceptions.SoException.LogAsException*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Exceptions.SoException.FriendlyText
  commentId: P:SuperOffice.Exceptions.SoException.FriendlyText
  id: FriendlyText
  parent: SuperOffice.Exceptions.SoException
  langs:
  - csharp
  - vb
  name: FriendlyText
  nameWithType: SoException.FriendlyText
  fullName: SuperOffice.Exceptions.SoException.FriendlyText
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: "\nOptional friendly error message that may be displayed to the user\n"
  syntax:
    content: public string FriendlyText { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FriendlyText As String
  overload: SuperOffice.Exceptions.SoException.FriendlyText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Exceptions.SoException.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoException, To>()
  nameWithType: EnumUtil.MapEnums<SoException, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Exceptions.SoException, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoException, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Exceptions.SoException, To)()
  name.vb: MapEnums(Of SoException, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoException, To>
    nameWithType: EnumUtil.MapEnums<SoException, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Exceptions.SoException, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoException, To)
    nameWithType: EnumUtil.MapEnums(Of SoException, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Exceptions.SoException, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Exceptions.SoException.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoException, To>()
  nameWithType: Converters.MapEnums<SoException, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Exceptions.SoException, To>()
  nameWithType.vb: Converters.MapEnums(Of SoException, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Exceptions.SoException, To)()
  name.vb: MapEnums(Of SoException, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoException, To>
    nameWithType: Converters.MapEnums<SoException, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Exceptions.SoException, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoException, To)
    nameWithType: Converters.MapEnums(Of SoException, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Exceptions.SoException, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Exceptions.SoException.#ctor*
  commentId: Overload:SuperOffice.Exceptions.SoException.#ctor
  isExternal: true
  name: SoException
  nameWithType: SoException.SoException
  fullName: SuperOffice.Exceptions.SoException.SoException
- uid: System.Runtime.Serialization.SerializationInfo
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception[]
  isExternal: true
  name: Exception[]
  nameWithType: Exception[]
  fullName: System.Exception[]
  nameWithType.vb: Exception()
  fullName.vb: System.Exception()
  name.vb: Exception()
  spec.csharp:
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Exceptions.SoException.LogAsException*
  commentId: Overload:SuperOffice.Exceptions.SoException.LogAsException
  isExternal: true
  name: LogAsException
  nameWithType: SoException.LogAsException
  fullName: SuperOffice.Exceptions.SoException.LogAsException
- uid: SuperOffice.Exceptions.SoException.FriendlyText*
  commentId: Overload:SuperOffice.Exceptions.SoException.FriendlyText
  isExternal: true
  name: FriendlyText
  nameWithType: SoException.FriendlyText
  fullName: SuperOffice.Exceptions.SoException.FriendlyText
