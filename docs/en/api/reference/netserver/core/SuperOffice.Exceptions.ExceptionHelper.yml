### YamlMime:ManagedReference
items:
- uid: SuperOffice.Exceptions.ExceptionHelper
  commentId: T:SuperOffice.Exceptions.ExceptionHelper
  id: ExceptionHelper
  parent: SuperOffice.Exceptions
  children:
  - SuperOffice.Exceptions.ExceptionHelper.Enumerate(SuperOffice.Exceptions.SoExceptionInfo)
  - SuperOffice.Exceptions.ExceptionHelper.Enumerate(System.Exception)
  - SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType``1(System.Exception)
  - SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo(System.Exception)
  - SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText(SuperOffice.Exceptions.SoExceptionInfo)
  - SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(SuperOffice.Exceptions.SoExceptionInfo)
  - SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(System.Exception)
  - SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack(System.Exception,System.String)
  - SuperOffice.Exceptions.ExceptionHelper.ToString(SuperOffice.Exceptions.SoExceptionInfo,System.String,System.Boolean)
  - SuperOffice.Exceptions.ExceptionHelper.TryGetRealType(SuperOffice.Exceptions.SoExceptionInfo,System.Type@)
  langs:
  - csharp
  - vb
  name: ExceptionHelper
  nameWithType: ExceptionHelper
  fullName: SuperOffice.Exceptions.ExceptionHelper
  type: Class
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Helper class to work with exceptions
  example: []
  syntax:
    content: public static class ExceptionHelper
    content.vb: Public Module ExceptionHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo(System.Exception)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo(System.Exception)
  id: GetExceptionInfo(System.Exception)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: GetExceptionInfo(Exception)
  nameWithType: ExceptionHelper.GetExceptionInfo(Exception)
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo(System.Exception)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Extension method retrieving a SoExceptionInfo from Exception
  example: []
  syntax:
    content: public static SoExceptionInfo GetExceptionInfo(this Exception ex)
    parameters:
    - id: ex
      type: System.Exception
      description: ''
    return:
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: ''
    content.vb: Public Shared Function GetExceptionInfo(ex As Exception) As SoExceptionInfo
  overload: SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo*
- uid: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(System.Exception)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(System.Exception)
  id: GetInnermostException(System.Exception)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: GetInnermostException(Exception)
  nameWithType: ExceptionHelper.GetInnermostException(Exception)
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(System.Exception)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Get the innermost exception from an exception - keeping whatever serialized exception required.
  example: []
  syntax:
    content: public static SoExceptionInfo GetInnermostException(this Exception ex)
    parameters:
    - id: ex
      type: System.Exception
      description: Exception to get the innermost exception from.
    return:
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: Innerm ost exception.
    content.vb: Public Shared Function GetInnermostException(ex As Exception) As SoExceptionInfo
  overload: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException*
- uid: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(SuperOffice.Exceptions.SoExceptionInfo)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(SuperOffice.Exceptions.SoExceptionInfo)
  id: GetInnermostException(SuperOffice.Exceptions.SoExceptionInfo)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: GetInnermostException(SoExceptionInfo)
  nameWithType: ExceptionHelper.GetInnermostException(SoExceptionInfo)
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException(SuperOffice.Exceptions.SoExceptionInfo)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Get the innermost exception from an exception - keeping whatever serialized exception required.
  example: []
  syntax:
    content: public static SoExceptionInfo GetInnermostException(this SoExceptionInfo ex)
    parameters:
    - id: ex
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: Exception to get the innermost exception from.
    return:
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: Innerm ost exception.
    content.vb: Public Shared Function GetInnermostException(ex As SoExceptionInfo) As SoExceptionInfo
  overload: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException*
- uid: SuperOffice.Exceptions.ExceptionHelper.TryGetRealType(SuperOffice.Exceptions.SoExceptionInfo,System.Type@)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.TryGetRealType(SuperOffice.Exceptions.SoExceptionInfo,System.Type@)
  id: TryGetRealType(SuperOffice.Exceptions.SoExceptionInfo,System.Type@)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: TryGetRealType(SoExceptionInfo, out Type)
  nameWithType: ExceptionHelper.TryGetRealType(SoExceptionInfo, out Type)
  fullName: SuperOffice.Exceptions.ExceptionHelper.TryGetRealType(SuperOffice.Exceptions.SoExceptionInfo, out System.Type)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Try to get the real type encapsulated in <xref href="SuperOffice.Exceptions.SoExceptionInfo.ExceptionType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool TryGetRealType(this SoExceptionInfo ex, out Type type)
    parameters:
    - id: ex
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: ''
    - id: type
      type: System.Type
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function TryGetRealType(ex As SoExceptionInfo, type As Type) As Boolean
  overload: SuperOffice.Exceptions.ExceptionHelper.TryGetRealType*
  nameWithType.vb: ExceptionHelper.TryGetRealType(SoExceptionInfo, Type)
  fullName.vb: SuperOffice.Exceptions.ExceptionHelper.TryGetRealType(SuperOffice.Exceptions.SoExceptionInfo, System.Type)
  name.vb: TryGetRealType(SoExceptionInfo, Type)
- uid: SuperOffice.Exceptions.ExceptionHelper.ToString(SuperOffice.Exceptions.SoExceptionInfo,System.String,System.Boolean)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.ToString(SuperOffice.Exceptions.SoExceptionInfo,System.String,System.Boolean)
  id: ToString(SuperOffice.Exceptions.SoExceptionInfo,System.String,System.Boolean)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: ToString(SoExceptionInfo, string, bool)
  nameWithType: ExceptionHelper.ToString(SoExceptionInfo, string, bool)
  fullName: SuperOffice.Exceptions.ExceptionHelper.ToString(SuperOffice.Exceptions.SoExceptionInfo, string, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Return a compilation of all exception messages, separated by the provided seperator.
  example: []
  syntax:
    content: public static string ToString(this SoExceptionInfo exception, string seperator, bool includeType)
    parameters:
    - id: exception
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: Exeption to get details for.
    - id: seperator
      type: System.String
      description: Seperator to seperate the exception.
    - id: includeType
      type: System.Boolean
      description: Include the type of exceptions as part of the message.
    return:
      type: System.String
      description: A compilation of all exception messages, seperated by the provided seperator.
    content.vb: Public Shared Function ToString(exception As SoExceptionInfo, seperator As String, includeType As Boolean) As String
  overload: SuperOffice.Exceptions.ExceptionHelper.ToString*
  nameWithType.vb: ExceptionHelper.ToString(SoExceptionInfo, String, Boolean)
  fullName.vb: SuperOffice.Exceptions.ExceptionHelper.ToString(SuperOffice.Exceptions.SoExceptionInfo, String, Boolean)
  name.vb: ToString(SoExceptionInfo, String, Boolean)
- uid: SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack(System.Exception,System.String)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack(System.Exception,System.String)
  id: SimpleMessageStack(System.Exception,System.String)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: SimpleMessageStack(Exception, string)
  nameWithType: ExceptionHelper.SimpleMessageStack(Exception, string)
  fullName: SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack(System.Exception, string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Recurse an exception and return a simple string, starting with the outermost, with one element per exception message
  example: []
  syntax:
    content: public static string SimpleMessageStack(this Exception ex, string separator = "\n")
    parameters:
    - id: ex
      type: System.Exception
      description: Exception to recurse
    - id: separator
      type: System.String
      description: Optional separator
    return:
      type: System.String
      description: Message from each exception, outermost first
    content.vb: Public Shared Function SimpleMessageStack(ex As Exception, separator As String = vbLf) As String
  overload: SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack*
  nameWithType.vb: ExceptionHelper.SimpleMessageStack(Exception, String)
  fullName.vb: SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack(System.Exception, String)
  name.vb: SimpleMessageStack(Exception, String)
- uid: SuperOffice.Exceptions.ExceptionHelper.Enumerate(System.Exception)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.Enumerate(System.Exception)
  id: Enumerate(System.Exception)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: Enumerate(Exception)
  nameWithType: ExceptionHelper.Enumerate(Exception)
  fullName: SuperOffice.Exceptions.ExceptionHelper.Enumerate(System.Exception)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Enumerate over all exceptions in the tree.
  example: []
  syntax:
    content: public static IEnumerable<SoExceptionInfo> Enumerate(this Exception exception)
    parameters:
    - id: exception
      type: System.Exception
      description: Exception to loop over
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Exceptions.SoExceptionInfo}
      description: All nested exceptions in the tree/loop
    content.vb: Public Shared Function Enumerate(exception As Exception) As IEnumerable(Of SoExceptionInfo)
  overload: SuperOffice.Exceptions.ExceptionHelper.Enumerate*
- uid: SuperOffice.Exceptions.ExceptionHelper.Enumerate(SuperOffice.Exceptions.SoExceptionInfo)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.Enumerate(SuperOffice.Exceptions.SoExceptionInfo)
  id: Enumerate(SuperOffice.Exceptions.SoExceptionInfo)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: Enumerate(SoExceptionInfo)
  nameWithType: ExceptionHelper.Enumerate(SoExceptionInfo)
  fullName: SuperOffice.Exceptions.ExceptionHelper.Enumerate(SuperOffice.Exceptions.SoExceptionInfo)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Enumerate over all exceptions in the tree.
  example: []
  syntax:
    content: public static IEnumerable<SoExceptionInfo> Enumerate(this SoExceptionInfo exception)
    parameters:
    - id: exception
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: Exception to loop over
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Exceptions.SoExceptionInfo}
      description: All nested exceptions in the tree/loop
    content.vb: Public Shared Function Enumerate(exception As SoExceptionInfo) As IEnumerable(Of SoExceptionInfo)
  overload: SuperOffice.Exceptions.ExceptionHelper.Enumerate*
- uid: SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType``1(System.Exception)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType``1(System.Exception)
  id: FindExceptionOfType``1(System.Exception)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: FindExceptionOfType<T>(Exception)
  nameWithType: ExceptionHelper.FindExceptionOfType<T>(Exception)
  fullName: SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType<T>(System.Exception)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: >-
    Recursively traverse the InnerException stack from the given starting point, and look

    for an element of the given type. If found, return that element, otherwise null.
  example: []
  syntax:
    content: 'public static T FindExceptionOfType<T>(this Exception topOfStack) where T : Exception'
    parameters:
    - id: topOfStack
      type: System.Exception
      description: Starting point of search
    typeParameters:
    - id: T
      description: Type of exception to find, for instance typeof(SoException)
    return:
      type: '{T}'
      description: Strongly typed, first-found value (nearest to top of stack); or null
    content.vb: Public Shared Function FindExceptionOfType(Of T As Exception)(topOfStack As Exception) As T
  overload: SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType*
  nameWithType.vb: ExceptionHelper.FindExceptionOfType(Of T)(Exception)
  fullName.vb: SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType(Of T)(System.Exception)
  name.vb: FindExceptionOfType(Of T)(Exception)
- uid: SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText(SuperOffice.Exceptions.SoExceptionInfo)
  commentId: M:SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText(SuperOffice.Exceptions.SoExceptionInfo)
  id: GetFriendlyText(SuperOffice.Exceptions.SoExceptionInfo)
  isExtensionMethod: true
  parent: SuperOffice.Exceptions.ExceptionHelper
  langs:
  - csharp
  - vb
  name: GetFriendlyText(SoExceptionInfo)
  nameWithType: ExceptionHelper.GetFriendlyText(SoExceptionInfo)
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText(SuperOffice.Exceptions.SoExceptionInfo)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Exceptions
  summary: Get the friendly text from an exception.  If one does not exist, return the message instead.
  example: []
  syntax:
    content: public static string GetFriendlyText(this SoExceptionInfo exception)
    parameters:
    - id: exception
      type: SuperOffice.Exceptions.SoExceptionInfo
      description: The exception
    return:
      type: System.String
      description: The friendly text from an exception.  If one does not exist, return the message instead.
    content.vb: Public Shared Function GetFriendlyText(exception As SoExceptionInfo) As String
  overload: SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText*
references:
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Exceptions
    name: Exceptions
    isExternal: true
    href: SuperOffice.Exceptions.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Exceptions
    name: Exceptions
    isExternal: true
    href: SuperOffice.Exceptions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_GetExceptionInfo_System_Exception_
  name: GetExceptionInfo
  nameWithType: ExceptionHelper.GetExceptionInfo
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetExceptionInfo
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: SuperOffice.Exceptions.SoExceptionInfo
  commentId: T:SuperOffice.Exceptions.SoExceptionInfo
  parent: SuperOffice.Exceptions
  isExternal: true
  href: SuperOffice.Exceptions.SoExceptionInfo.html
  name: SoExceptionInfo
  nameWithType: SoExceptionInfo
  fullName: SuperOffice.Exceptions.SoExceptionInfo
- uid: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.GetInnermostException
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_GetInnermostException_System_Exception_
  name: GetInnermostException
  nameWithType: ExceptionHelper.GetInnermostException
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetInnermostException
- uid: SuperOffice.Exceptions.SoExceptionInfo.ExceptionType
  commentId: P:SuperOffice.Exceptions.SoExceptionInfo.ExceptionType
  isExternal: true
  href: SuperOffice.Exceptions.SoExceptionInfo.html#SuperOffice_Exceptions_SoExceptionInfo_ExceptionType
  name: ExceptionType
  nameWithType: SoExceptionInfo.ExceptionType
  fullName: SuperOffice.Exceptions.SoExceptionInfo.ExceptionType
- uid: SuperOffice.Exceptions.ExceptionHelper.TryGetRealType*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.TryGetRealType
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_TryGetRealType_SuperOffice_Exceptions_SoExceptionInfo_System_Type__
  name: TryGetRealType
  nameWithType: ExceptionHelper.TryGetRealType
  fullName: SuperOffice.Exceptions.ExceptionHelper.TryGetRealType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.Exceptions.ExceptionHelper.ToString*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.ToString
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_ToString_SuperOffice_Exceptions_SoExceptionInfo_System_String_System_Boolean_
  name: ToString
  nameWithType: ExceptionHelper.ToString
  fullName: SuperOffice.Exceptions.ExceptionHelper.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_SimpleMessageStack_System_Exception_System_String_
  name: SimpleMessageStack
  nameWithType: ExceptionHelper.SimpleMessageStack
  fullName: SuperOffice.Exceptions.ExceptionHelper.SimpleMessageStack
- uid: SuperOffice.Exceptions.ExceptionHelper.Enumerate*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.Enumerate
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_Enumerate_System_Exception_
  name: Enumerate
  nameWithType: ExceptionHelper.Enumerate
  fullName: SuperOffice.Exceptions.ExceptionHelper.Enumerate
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Exceptions.SoExceptionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.Exceptions.SoExceptionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<SoExceptionInfo>
  nameWithType: IEnumerable<SoExceptionInfo>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Exceptions.SoExceptionInfo>
  nameWithType.vb: IEnumerable(Of SoExceptionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Exceptions.SoExceptionInfo)
  name.vb: IEnumerable(Of SoExceptionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SuperOffice.Exceptions.SoExceptionInfo
    name: SoExceptionInfo
    isExternal: true
    href: SuperOffice.Exceptions.SoExceptionInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Exceptions.SoExceptionInfo
    name: SoExceptionInfo
    isExternal: true
    href: SuperOffice.Exceptions.SoExceptionInfo.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_FindExceptionOfType__1_System_Exception_
  name: FindExceptionOfType
  nameWithType: ExceptionHelper.FindExceptionOfType
  fullName: SuperOffice.Exceptions.ExceptionHelper.FindExceptionOfType
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText*
  commentId: Overload:SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText
  isExternal: true
  href: SuperOffice.Exceptions.ExceptionHelper.html#SuperOffice_Exceptions_ExceptionHelper_GetFriendlyText_SuperOffice_Exceptions_SoExceptionInfo_
  name: GetFriendlyText
  nameWithType: ExceptionHelper.GetFriendlyText
  fullName: SuperOffice.Exceptions.ExceptionHelper.GetFriendlyText
