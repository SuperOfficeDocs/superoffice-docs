### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.Principal.IContextResolver
  commentId: T:SuperOffice.Security.Principal.IContextResolver
  id: IContextResolver
  parent: SuperOffice.Security.Principal
  children:
  - SuperOffice.Security.Principal.IContextResolver.TryResolveContext(System.String@)
  - SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.String@)
  langs:
  - csharp
  - vb
  name: IContextResolver
  nameWithType: IContextResolver
  fullName: SuperOffice.Security.Principal.IContextResolver
  type: Interface
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nInterface implemented by context resolvers.\n"
  remarks: "\nA Context resolver is responsible for determine if a particular user belongs to a \nparticular context.  \n"
  syntax:
    content: public interface IContextResolver
    content.vb: Public Interface IContextResolver
  extensionMethods:
  - SuperOffice.Security.Principal.IContextResolver.EnumUtil.MapEnums``2
  - SuperOffice.Security.Principal.IContextResolver.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.String@)
  commentId: M:SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.String@)
  id: TryResolveContextFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.String@)
  parent: SuperOffice.Security.Principal.IContextResolver
  langs:
  - csharp
  - vb
  name: TryResolveContextFromClaims(IEnumerable<ClaimsIdentity>, out String)
  nameWithType: IContextResolver.TryResolveContextFromClaims(IEnumerable<ClaimsIdentity>, out String)
  fullName: SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, out System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nImplementation of this method is responsible for resolving the context\n"
  syntax:
    content: bool TryResolveContextFromClaims(IEnumerable<ClaimsIdentity> identities, out string context)
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
    - id: context
      type: System.String
      description: Name of the resolved context
    return:
      type: System.Boolean
      description: True if the context was successfully resolved.
    content.vb: Function TryResolveContextFromClaims(identities As IEnumerable(Of ClaimsIdentity), ByRef context As String) As Boolean
  overload: SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims*
  nameWithType.vb: IContextResolver.TryResolveContextFromClaims(IEnumerable(Of ClaimsIdentity), ByRef String)
  fullName.vb: SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity), ByRef System.String)
  name.vb: TryResolveContextFromClaims(IEnumerable(Of ClaimsIdentity), ByRef String)
- uid: SuperOffice.Security.Principal.IContextResolver.TryResolveContext(System.String@)
  commentId: M:SuperOffice.Security.Principal.IContextResolver.TryResolveContext(System.String@)
  id: TryResolveContext(System.String@)
  parent: SuperOffice.Security.Principal.IContextResolver
  langs:
  - csharp
  - vb
  name: TryResolveContext(out String)
  nameWithType: IContextResolver.TryResolveContext(out String)
  fullName: SuperOffice.Security.Principal.IContextResolver.TryResolveContext(out System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: bool TryResolveContext(out string context)
    parameters:
    - id: context
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function TryResolveContext(ByRef context As String) As Boolean
  overload: SuperOffice.Security.Principal.IContextResolver.TryResolveContext*
  nameWithType.vb: IContextResolver.TryResolveContext(ByRef String)
  fullName.vb: SuperOffice.Security.Principal.IContextResolver.TryResolveContext(ByRef System.String)
  name.vb: TryResolveContext(ByRef String)
references:
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
- uid: SuperOffice.Security.Principal.IContextResolver.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IContextResolver, To>()
  nameWithType: EnumUtil.MapEnums<IContextResolver, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Security.Principal.IContextResolver, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IContextResolver, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Security.Principal.IContextResolver, To)()
  name.vb: MapEnums(Of IContextResolver, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IContextResolver, To>
    nameWithType: EnumUtil.MapEnums<IContextResolver, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Security.Principal.IContextResolver, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IContextResolver, To)
    nameWithType: EnumUtil.MapEnums(Of IContextResolver, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Security.Principal.IContextResolver, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Principal.IContextResolver.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IContextResolver, To>()
  nameWithType: Converters.MapEnums<IContextResolver, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.Principal.IContextResolver, To>()
  nameWithType.vb: Converters.MapEnums(Of IContextResolver, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.Principal.IContextResolver, To)()
  name.vb: MapEnums(Of IContextResolver, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IContextResolver, To>
    nameWithType: Converters.MapEnums<IContextResolver, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.Principal.IContextResolver, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IContextResolver, To)
    nameWithType: Converters.MapEnums(Of IContextResolver, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.Principal.IContextResolver, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims*
  commentId: Overload:SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims
  isExternal: true
  name: TryResolveContextFromClaims
  nameWithType: IContextResolver.TryResolveContextFromClaims
  fullName: SuperOffice.Security.Principal.IContextResolver.TryResolveContextFromClaims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ClaimsIdentity>
  nameWithType: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  nameWithType.vb: IEnumerable(Of ClaimsIdentity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity)
  name.vb: IEnumerable(Of ClaimsIdentity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Security.Principal.IContextResolver.TryResolveContext*
  commentId: Overload:SuperOffice.Security.Principal.IContextResolver.TryResolveContext
  isExternal: true
  name: TryResolveContext
  nameWithType: IContextResolver.TryResolveContext
  fullName: SuperOffice.Security.Principal.IContextResolver.TryResolveContext
