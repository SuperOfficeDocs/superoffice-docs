### YamlMime:ManagedReference
items:
- uid: SuperOffice.Security.Principal.SoTimeZone
  commentId: T:SuperOffice.Security.Principal.SoTimeZone
  id: SoTimeZone
  parent: SuperOffice.Security.Principal
  children:
  - SuperOffice.Security.Principal.SoTimeZone.#ctor(Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone})
  - SuperOffice.Security.Principal.SoTimeZone.IsSet
  - SuperOffice.Security.Principal.SoTimeZone.TimeZoneId
  langs:
  - csharp
  - vb
  name: SoTimeZone
  nameWithType: SoTimeZone
  fullName: SuperOffice.Security.Principal.SoTimeZone
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nPer request timezone state - used by the WebApi request pipeline\n"
  syntax:
    content: 'public class SoTimeZone : Object, ISoTimeZone'
    content.vb: >-
      Public Class SoTimeZone
          Inherits Object
          Implements ISoTimeZone
  inheritance:
  - System.Object
  implements:
  - SuperOffice.Security.Principal.ISoTimeZone
  extensionMethods:
  - SuperOffice.Security.Principal.SoTimeZone.EnumUtil.MapEnums``2
  - SuperOffice.Security.Principal.SoTimeZone.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Security.Principal.SoTimeZone.#ctor(Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone})
  commentId: M:SuperOffice.Security.Principal.SoTimeZone.#ctor(Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone})
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone})'
  parent: SuperOffice.Security.Principal.SoTimeZone
  langs:
  - csharp
  - vb
  name: SoTimeZone(ILogger<SoTimeZone>)
  nameWithType: SoTimeZone.SoTimeZone(ILogger<SoTimeZone>)
  fullName: SuperOffice.Security.Principal.SoTimeZone.SoTimeZone(Microsoft.Extensions.Logging.ILogger<SuperOffice.Security.Principal.SoTimeZone>)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public SoTimeZone(ILogger<SoTimeZone> logger)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone}
    content.vb: Public Sub New(logger As ILogger(Of SoTimeZone))
  overload: SuperOffice.Security.Principal.SoTimeZone.#ctor*
  nameWithType.vb: SoTimeZone.SoTimeZone(ILogger(Of SoTimeZone))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.Security.Principal.SoTimeZone.SoTimeZone(Microsoft.Extensions.Logging.ILogger(Of SuperOffice.Security.Principal.SoTimeZone))
  name.vb: SoTimeZone(ILogger(Of SoTimeZone))
- uid: SuperOffice.Security.Principal.SoTimeZone.TimeZoneId
  commentId: P:SuperOffice.Security.Principal.SoTimeZone.TimeZoneId
  id: TimeZoneId
  parent: SuperOffice.Security.Principal.SoTimeZone
  langs:
  - csharp
  - vb
  name: TimeZoneId
  nameWithType: SoTimeZone.TimeZoneId
  fullName: SuperOffice.Security.Principal.SoTimeZone.TimeZoneId
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  summary: "\nGet or set the current timezone id for the current scope.\n<see cref=\"!:TimeConverter.BaseTimeZoneData.TZLocationID\"></see> is used if nothing else is provided.\n"
  syntax:
    content: public int TimeZoneId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property TimeZoneId As Integer
  overload: SuperOffice.Security.Principal.SoTimeZone.TimeZoneId*
  implements:
  - SuperOffice.Security.Principal.ISoTimeZone.TimeZoneId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Security.Principal.SoTimeZone.IsSet
  commentId: P:SuperOffice.Security.Principal.SoTimeZone.IsSet
  id: IsSet
  parent: SuperOffice.Security.Principal.SoTimeZone
  langs:
  - csharp
  - vb
  name: IsSet
  nameWithType: SoTimeZone.IsSet
  fullName: SuperOffice.Security.Principal.SoTimeZone.IsSet
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Security.Principal
  syntax:
    content: public bool IsSet { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsSet As Boolean
  overload: SuperOffice.Security.Principal.SoTimeZone.IsSet*
  implements:
  - SuperOffice.Security.Principal.ISoTimeZone.IsSet
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Security.Principal.ISoTimeZone
  commentId: T:SuperOffice.Security.Principal.ISoTimeZone
  parent: SuperOffice.Security.Principal
  isExternal: true
  name: ISoTimeZone
  nameWithType: ISoTimeZone
  fullName: SuperOffice.Security.Principal.ISoTimeZone
- uid: SuperOffice.Security.Principal.SoTimeZone.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoTimeZone, To>()
  nameWithType: EnumUtil.MapEnums<SoTimeZone, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Security.Principal.SoTimeZone, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoTimeZone, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Security.Principal.SoTimeZone, To)()
  name.vb: MapEnums(Of SoTimeZone, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoTimeZone, To>
    nameWithType: EnumUtil.MapEnums<SoTimeZone, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Security.Principal.SoTimeZone, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoTimeZone, To)
    nameWithType: EnumUtil.MapEnums(Of SoTimeZone, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Security.Principal.SoTimeZone, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Principal.SoTimeZone.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoTimeZone, To>()
  nameWithType: Converters.MapEnums<SoTimeZone, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.Principal.SoTimeZone, To>()
  nameWithType.vb: Converters.MapEnums(Of SoTimeZone, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.Principal.SoTimeZone, To)()
  name.vb: MapEnums(Of SoTimeZone, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoTimeZone, To>
    nameWithType: Converters.MapEnums<SoTimeZone, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Security.Principal.SoTimeZone, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoTimeZone, To)
    nameWithType: Converters.MapEnums(Of SoTimeZone, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Security.Principal.SoTimeZone, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Security.Principal.SoTimeZone.#ctor*
  commentId: Overload:SuperOffice.Security.Principal.SoTimeZone.#ctor
  isExternal: true
  name: SoTimeZone
  nameWithType: SoTimeZone.SoTimeZone
  fullName: SuperOffice.Security.Principal.SoTimeZone.SoTimeZone
- uid: Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{SuperOffice.Security.Principal.SoTimeZone}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<SoTimeZone>
  nameWithType: ILogger<SoTimeZone>
  fullName: Microsoft.Extensions.Logging.ILogger<SuperOffice.Security.Principal.SoTimeZone>
  nameWithType.vb: ILogger(Of SoTimeZone)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of SuperOffice.Security.Principal.SoTimeZone)
  name.vb: ILogger(Of SoTimeZone)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Security.Principal.SoTimeZone
    name: SoTimeZone
    nameWithType: SoTimeZone
    fullName: SuperOffice.Security.Principal.SoTimeZone
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Security.Principal.SoTimeZone
    name: SoTimeZone
    nameWithType: SoTimeZone
    fullName: SuperOffice.Security.Principal.SoTimeZone
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Security.Principal.SoTimeZone.TimeZoneId*
  commentId: Overload:SuperOffice.Security.Principal.SoTimeZone.TimeZoneId
  isExternal: true
  name: TimeZoneId
  nameWithType: SoTimeZone.TimeZoneId
  fullName: SuperOffice.Security.Principal.SoTimeZone.TimeZoneId
- uid: SuperOffice.Security.Principal.ISoTimeZone.TimeZoneId
  commentId: P:SuperOffice.Security.Principal.ISoTimeZone.TimeZoneId
  parent: SuperOffice.Security.Principal.ISoTimeZone
  isExternal: true
  name: TimeZoneId
  nameWithType: ISoTimeZone.TimeZoneId
  fullName: SuperOffice.Security.Principal.ISoTimeZone.TimeZoneId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Security.Principal.SoTimeZone.IsSet*
  commentId: Overload:SuperOffice.Security.Principal.SoTimeZone.IsSet
  isExternal: true
  name: IsSet
  nameWithType: SoTimeZone.IsSet
  fullName: SuperOffice.Security.Principal.SoTimeZone.IsSet
- uid: SuperOffice.Security.Principal.ISoTimeZone.IsSet
  commentId: P:SuperOffice.Security.Principal.ISoTimeZone.IsSet
  parent: SuperOffice.Security.Principal.ISoTimeZone
  isExternal: true
  name: IsSet
  nameWithType: ISoTimeZone.IsSet
  fullName: SuperOffice.Security.Principal.ISoTimeZone.IsSet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
