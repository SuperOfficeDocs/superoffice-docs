### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.LicenseManager
  commentId: T:SuperOffice.License.LicenseManager
  id: LicenseManager
  parent: SuperOffice.License
  children:
  - SuperOffice.License.LicenseManager.#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})
  - SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  - SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.InitializeAsync
  - SuperOffice.License.LicenseManager.IsUnitTesting
  - SuperOffice.License.LicenseManager.LicenseExists(System.String)
  - SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  - SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.SuperOfficeOwner
  - SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  - SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  - SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  langs:
  - csharp
  - vb
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: SuperOffice.License.LicenseManager
  type: Class
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: 'public class LicenseManager : ILicenseManager'
    content.vb: Public Class LicenseManager Implements ILicenseManager
  inheritance:
  - System.Object
  implements:
  - SuperOffice.License.ILicenseManager
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.License.LicenseManager.EnumUtil.MapEnums``2
  - SuperOffice.License.LicenseManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
- uid: SuperOffice.License.LicenseManager.SuperOfficeOwner
  commentId: F:SuperOffice.License.LicenseManager.SuperOfficeOwner
  id: SuperOfficeOwner
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: SuperOfficeOwner
  nameWithType: LicenseManager.SuperOfficeOwner
  fullName: SuperOffice.License.LicenseManager.SuperOfficeOwner
  type: Field
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public const string SuperOfficeOwner = "superoffice"
    return:
      type: System.String
    content.vb: Public Const SuperOfficeOwner As String = "superoffice"
- uid: SuperOffice.License.LicenseManager.#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})
  commentId: M:SuperOffice.License.LicenseManager.#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})
  id: '#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})'
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LicenseManager(INSLicenseService, ILogger<LicenseManager>)
  nameWithType: LicenseManager.LicenseManager(INSLicenseService, ILogger<LicenseManager>)
  fullName: SuperOffice.License.LicenseManager.LicenseManager(SuperOffice.License.INSLicenseService, Microsoft.Extensions.Logging.ILogger<SuperOffice.License.LicenseManager>)
  type: Constructor
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Injection constructor, perform auto-update of license if nextCheckDate has passed
  example: []
  syntax:
    content: public LicenseManager(INSLicenseService licenseService, ILogger<LicenseManager> logger)
    parameters:
    - id: licenseService
      type: SuperOffice.License.INSLicenseService
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager}
    content.vb: Public Sub New(licenseService As INSLicenseService, logger As ILogger(Of LicenseManager))
  overload: SuperOffice.License.LicenseManager.#ctor*
  nameWithType.vb: LicenseManager.New(INSLicenseService, ILogger(Of LicenseManager))
  fullName.vb: SuperOffice.License.LicenseManager.New(SuperOffice.License.INSLicenseService, Microsoft.Extensions.Logging.ILogger(Of SuperOffice.License.LicenseManager))
  name.vb: New(INSLicenseService, ILogger(Of LicenseManager))
- uid: SuperOffice.License.LicenseManager.InitializeAsync
  commentId: M:SuperOffice.License.LicenseManager.InitializeAsync
  id: InitializeAsync
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: InitializeAsync()
  nameWithType: LicenseManager.InitializeAsync()
  fullName: SuperOffice.License.LicenseManager.InitializeAsync()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Should be called before using the license manager.
  example: []
  syntax:
    content: public Task InitializeAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function InitializeAsync() As Task
  overload: SuperOffice.License.LicenseManager.InitializeAsync*
  implements:
  - SuperOffice.License.ILicenseManager.InitializeAsync
- uid: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  id: UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: UpgradeToNewPricelistAsync(string, string, string, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  nameWithType: LicenseManager.UpgradeToNewPricelistAsync(string, string, string, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(string, string, string, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Upgrade <b>all users in the database</b> from their current 7.5 licenses to the new pricelist in 10.0
  example: []
  syntax:
    content: public Task<bool> UpgradeToNewPricelistAsync(string systemUser, string password, string additionalInfo, ProgressEstimateCallback estimateCB, ProgressStepCallback stepCB, CancellationToken cancellationToken = default)
    parameters:
    - id: systemUser
      type: System.String
    - id: password
      type: System.String
    - id: additionalInfo
      type: System.String
    - id: estimateCB
      type: SuperOffice.CRM.ProgressEstimateCallback
    - id: stepCB
      type: SuperOffice.CRM.ProgressStepCallback
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function UpgradeToNewPricelistAsync(systemUser As String, password As String, additionalInfo As String, estimateCB As ProgressEstimateCallback, stepCB As ProgressStepCallback, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync*
  implements:
  - SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(String, String, String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  name.vb: UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  id: GetModuleOwnersAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleOwnersAsync(CancellationToken)
  nameWithType: LicenseManager.GetModuleOwnersAsync(CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get all the module owners.
  example: []
  syntax:
    content: public Task<ModuleOwnerRow[]> GetModuleOwnersAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow[]}
      description: Array of module owners
    content.vb: Public Function GetModuleOwnersAsync(cancellationToken As CancellationToken) As Task(Of ModuleOwnerRow())
  overload: SuperOffice.License.LicenseManager.GetModuleOwnersAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  id: GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleOwnerAsync(string, CancellationToken)
  nameWithType: LicenseManager.GetModuleOwnerAsync(string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnerAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get module owner from the owners name.
  example: []
  syntax:
    content: public Task<ModuleOwnerRow> GetModuleOwnerAsync(string moduleOwner, CancellationToken cancellationToken)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of hte module owner
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow}
      description: Module owner
    content.vb: Public Function GetModuleOwnerAsync(moduleOwner As String, cancellationToken As CancellationToken) As Task(Of ModuleOwnerRow)
  overload: SuperOffice.License.LicenseManager.GetModuleOwnerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetModuleOwnerAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetModuleOwnerAsync(String, System.Threading.CancellationToken)
  name.vb: GetModuleOwnerAsync(String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  id: GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetCurrentLicenseAsync(string, CancellationToken)
  nameWithType: LicenseManager.GetCurrentLicenseAsync(string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get the current license from a module owner.
  example: []
  syntax:
    content: public Task<(LicenseInfo, DateTime)> GetCurrentLicenseAsync(string moduleOwner, CancellationToken cancellationToken = default)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of the module owner
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{SuperOffice.License.LicenseInfo,System.DateTime}}
      description: License as stored in the database.
    content.vb: Public Function GetCurrentLicenseAsync(moduleOwner As String, cancellationToken As CancellationToken = Nothing) As Task(Of (LicenseInfo, Date))
  overload: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetCurrentLicenseAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(String, System.Threading.CancellationToken)
  name.vb: GetCurrentLicenseAsync(String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromDBAsync(string, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromDBAsync(string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get license, with usage, as it is stored in the database for one particular module owner.
  example: []
  syntax:
    content: public Task<ExtendedLicenseInfo> GetLicenseFromDBAsync(string ownerName, CancellationToken cancellationToken = default)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License, with usage, as it is stored in the database. NULL if no license found.
    content.vb: Public Function GetLicenseFromDBAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetLicenseFromDBAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromDBAsync(String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  id: GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get all licenses, with usage, from all module owners as they are stored in the database
  example: []
  syntax:
    content: public Task<ExtendedLicenseInfo[]> GetLicenseForAllOwnersFromDBAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
      description: Array of licenses, with usage, as it is stored in the database.
    content.vb: Public Function GetLicenseForAllOwnersFromDBAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo())
  overload: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  id: GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServerWithAssignmentsAsync(string, bool, string, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(string, bool, string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(string, bool, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get License from the license server for a particular module owner. Validates that the license is signed ok.
  example: []
  syntax:
    content: public Task<ExtendedLicenseInfoWithAssignments> GetLicenseFromLicenseServerWithAssignmentsAsync(string ownerName, bool isTestUpgrade = false, string licenseUrl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: isTestUpgrade
      type: System.Boolean
      description: Is this a test upgrade? Default false.
    - id: licenseUrl
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfoWithAssignments}
      description: >-
        License from the database, from the license server and with new license assignments, and possibly new serial number.
                    Possible exception if license server has not implemented method.
    content.vb: Public Function GetLicenseFromLicenseServerWithAssignmentsAsync(ownerName As String, isTestUpgrade As Boolean = False, licenseUrl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfoWithAssignments)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServerAsync(string, string, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromLicenseServerAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get License from the license server for a particular module owner.
  example: []
  syntax:
    content: public Task<ExtendedLicenseInfo> GetLicenseFromLicenseServerAsync(string ownerName, string additionalInfo = null, CancellationToken cancellationToken = default)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: additionalInfo
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License from the database, from the license server and with usage.
    content.vb: Public Function GetLicenseFromLicenseServerAsync(ownerName As String, additionalInfo As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromFileAsync(string, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromFileAsync(string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Parse a license from file content for a particular module owner.
  example: []
  syntax:
    content: public Task<ExtendedLicenseInfo> GetLicenseFromFileAsync(string fileContent, CancellationToken cancellationToken)
    parameters:
    - id: fileContent
      type: System.String
      description: Content of license file.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License from the database, from file and with usage.
    content.vb: Public Function GetLicenseFromFileAsync(fileContent As String, cancellationToken As CancellationToken) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetLicenseFromFileAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromFileAsync(String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  id: MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  nameWithType: LicenseManager.MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: >-
    Get the current license from the database, map the incoming one on to it, and

    validate to see if the result is acceptable (can be Activated)
  example: []
  syntax:
    content: public Task<ExtendedLicenseInfo> MapAndValidateLicenseWithDbAsync(LicenseInfo newLicense, CancellationToken cancellationToken)
    parameters:
    - id: newLicense
      type: SuperOffice.License.LicenseInfo
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License including activation flags and problem tag
    content.vb: Public Function MapAndValidateLicenseWithDbAsync(newLicense As LicenseInfo, cancellationToken As CancellationToken) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync*
  implements:
  - SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  id: GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get details about a license from the license server.
  example: []
  syntax:
    content: public Task<string> GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo licenseInfo, ExtendedModuleLicense moduleLicense, CancellationToken cancellationToken = default)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: Description of the license
    - id: moduleLicense
      type: SuperOffice.License.ExtendedModuleLicense
      description: Information about a particular module to get information for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Information about a particular license module.
    content.vb: Public Function GetModuleLicenseHistoryFromLicenseServerAsync(licenseInfo As ExtendedLicenseInfo, moduleLicense As ExtendedModuleLicense, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  commentId: M:SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  id: ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidatePublicKey(SignedPublicKey)
  nameWithType: LicenseManager.ValidatePublicKey(SignedPublicKey)
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Validate a Public Key
  example: []
  syntax:
    content: public static void ValidatePublicKey(SignedPublicKey publicKey)
    parameters:
    - id: publicKey
      type: SuperOffice.License.SignedPublicKey
      description: Public key to validate
    content.vb: Public Shared Sub ValidatePublicKey(publicKey As SignedPublicKey)
  overload: SuperOffice.License.LicenseManager.ValidatePublicKey*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Throw if failed to validate public key.
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  id: ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfo(LicenseInfo, bool)
  nameWithType: LicenseManager.ValidateLicenseInfo(LicenseInfo, bool)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, bool)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Validate that a license is consistent.
  example: []
  syntax:
    content: public void ValidateLicenseInfo(LicenseInfo licenseInfo, bool checkSerialNumber = true)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.LicenseInfo
      description: License to validate consistancy for
    - id: checkSerialNumber
      type: System.Boolean
      description: Check that Serial Number is consistent. Throws exception if serial number is inconsistent if true. Default = true.
    content.vb: Public Sub ValidateLicenseInfo(licenseInfo As LicenseInfo, checkSerialNumber As Boolean = True)
  overload: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  implements:
  - SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  nameWithType.vb: LicenseManager.ValidateLicenseInfo(LicenseInfo, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, Boolean)
  name.vb: ValidateLicenseInfo(LicenseInfo, Boolean)
- uid: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  commentId: M:SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  id: ToInfo(SuperOffice.License.ModuleLicense)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ToInfo(ModuleLicense)
  nameWithType: LicenseManager.ToInfo(ModuleLicense)
  fullName: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public static string ToInfo(ModuleLicense info)
    parameters:
    - id: info
      type: SuperOffice.License.ModuleLicense
    return:
      type: System.String
    content.vb: Public Shared Function ToInfo(info As ModuleLicense) As String
  overload: SuperOffice.License.LicenseManager.ToInfo*
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  id: ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfo(ExtendedLicenseInfo)
  nameWithType: LicenseManager.ValidateLicenseInfo(ExtendedLicenseInfo)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Validate that a license is consistent.
  example: []
  syntax:
    content: public void ValidateLicenseInfo(ExtendedLicenseInfo licenseInfo)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License to validate consistance for
    content.vb: Public Sub ValidateLicenseInfo(licenseInfo As ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  implements:
  - SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ActivateLicenseInfoAsync(ExtendedLicenseInfo, bool, bool, CancellationToken)
  nameWithType: LicenseManager.ActivateLicenseInfoAsync(ExtendedLicenseInfo, bool, bool, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, bool, bool, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Save a new license to the database.
  remarks: ValidateNewLicence is called to validate the license before it is accepted and saved.
  example: []
  syntax:
    content: public Task ActivateLicenseInfoAsync(ExtendedLicenseInfo newLicense, bool checkSerialNumber = true, bool checkUserLicense = true, CancellationToken cancellationToken = default)
    parameters:
    - id: newLicense
      type: SuperOffice.License.ExtendedLicenseInfo
      description: New license to save to the database.
    - id: checkSerialNumber
      type: System.Boolean
    - id: checkUserLicense
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ActivateLicenseInfoAsync(newLicense As ExtendedLicenseInfo, checkSerialNumber As Boolean = True, checkUserLicense As Boolean = True, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  implements:
  - SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, Boolean, Boolean, System.Threading.CancellationToken)
  name.vb: ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseStateFromLicenseServerAsync(string, string, CancellationToken)
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServerAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Ping the license server and get the current state.
  example: []
  syntax:
    content: public Task<CheckLicenseStatusResult> GetLicenseStateFromLicenseServerAsync(string ownerName, string additionalInfo = null, CancellationToken cancellationToken = default)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the owner to ping.
    - id: additionalInfo
      type: System.String
      description: 'Extra info - packed into NetServer version: "TestUpgrade=true"'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
      description: Result obtained by the license server.
    content.vb: Public Function GetLicenseStateFromLicenseServerAsync(ownerName As String, additionalInfo As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of CheckLicenseStatusResult)
  overload: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ChangeSerialNumberAsync(string, string, CancellationToken)
  nameWithType: LicenseManager.ChangeSerialNumberAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Change the new serial number for the installation.
  example: []
  syntax:
    content: public Task ChangeSerialNumberAsync(string newCompanyName, string newSerialNumber, CancellationToken cancellationToken)
    parameters:
    - id: newCompanyName
      type: System.String
      description: The new company name
    - id: newSerialNumber
      type: System.String
      description: New serial number to change to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ChangeSerialNumberAsync(newCompanyName As String, newSerialNumber As String, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync*
  implements:
  - SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.ChangeSerialNumberAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(String, String, System.Threading.CancellationToken)
  name.vb: ChangeSerialNumberAsync(String, String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetShopUrlAsync(string, string, CancellationToken)
  nameWithType: LicenseManager.GetShopUrlAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetShopUrlAsync(string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get the shop url for a module owner, including a context string
  example: []
  syntax:
    content: public Task<string> GetShopUrlAsync(string ownerName, string context, CancellationToken cancellationToken)
    parameters:
    - id: ownerName
      type: System.String
      description: ''
    - id: context
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function GetShopUrlAsync(ownerName As String, context As String, cancellationToken As CancellationToken) As Task(Of String)
  overload: SuperOffice.License.LicenseManager.GetShopUrlAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetShopUrlAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetShopUrlAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetShopUrlAsync(String, String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  id: RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: RemoveLicenseFromDBAsync(string, CancellationToken)
  nameWithType: LicenseManager.RemoveLicenseFromDBAsync(string, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Remove all information about a licenses from a module owner from the database
  example: []
  syntax:
    content: public Task RemoveLicenseFromDBAsync(string ownerName, CancellationToken cancellationToken = default)
    parameters:
    - id: ownerName
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveLicenseFromDBAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync*
  implements:
  - SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.RemoveLicenseFromDBAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(String, System.Threading.CancellationToken)
  name.vb: RemoveLicenseFromDBAsync(String, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  commentId: M:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  id: GetGrantedModuleLicenses(System.Int32)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetGrantedModuleLicenses(int)
  nameWithType: LicenseManager.GetGrantedModuleLicenses(int)
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get granted module licenses for the provided associate.
  example: []
  syntax:
    content: public GrantedModuleLicense[] GetGrantedModuleLicenses(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id's of the associate to get granted module licenses for.
    return:
      type: SuperOffice.CRM.Services.GrantedModuleLicense[]
      description: Granted module licenses
    content.vb: Public Function GetGrantedModuleLicenses(associateId As Integer) As GrantedModuleLicense()
  overload: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  implements:
  - SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  nameWithType.vb: LicenseManager.GetGrantedModuleLicenses(Integer)
  fullName.vb: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(Integer)
  name.vb: GetGrantedModuleLicenses(Integer)
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetSatelliteLicensesAsync(int, bool, CancellationToken)
  nameWithType: LicenseManager.GetSatelliteLicensesAsync(int, bool, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(int, bool, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Obtain information about satellite module licenses
  example: []
  syntax:
    content: public Task<SatelliteModuleLicenseOwner[]> GetSatelliteLicensesAsync(int satelliteId, bool fetchForCentralIfSatelliteIdIsZero, CancellationToken cancellationToken = default)
    parameters:
    - id: satelliteId
      type: System.Int32
      description: Satellite id to check for satellite module licenses. 0 indicates central database
    - id: fetchForCentralIfSatelliteIdIsZero
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.SatelliteModuleLicenseOwner[]}
      description: Satellite module licenses grouped by owners.
    content.vb: Public Function GetSatelliteLicensesAsync(satelliteId As Integer, fetchForCentralIfSatelliteIdIsZero As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of SatelliteModuleLicenseOwner())
  overload: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetSatelliteLicensesAsync(Integer, Boolean, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(Integer, Boolean, System.Threading.CancellationToken)
  name.vb: GetSatelliteLicensesAsync(Integer, Boolean, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetSatelliteLicenseUsageCountAsync(int[], CancellationToken)
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCountAsync(int[], CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(int[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Provided  a list of module id's, count how many times each license is used.
  example: []
  syntax:
    content: public Task<Dictionary<int, int>> GetSatelliteLicenseUsageCountAsync(int[] satelliteModules, CancellationToken cancellationToken = default)
    parameters:
    - id: satelliteModules
      type: System.Int32[]
      description: Module id's to count usage of
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
      description: Dictionary containing module id as a key and how many times a license is used as value.
    content.vb: Public Function GetSatelliteLicenseUsageCountAsync(satelliteModules As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of Integer, Integer))
  overload: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetSatelliteLicenseUsageCountAsync(Integer(), CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(Integer(), System.Threading.CancellationToken)
  name.vb: GetSatelliteLicenseUsageCountAsync(Integer(), CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  id: GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetUserLicensesAsync(int, UserType, CancellationToken)
  nameWithType: LicenseManager.GetUserLicensesAsync(int, UserType, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetUserLicensesAsync(int, SuperOffice.License.UserType, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Obtain information about associate module licenses
  example: []
  syntax:
    content: public Task<AssociateModuleLicenseOwner[]> GetUserLicensesAsync(int associateId, UserType allowedType, CancellationToken cancellationToken)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id to check for associate module licenses
    - id: allowedType
      type: SuperOffice.License.UserType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.AssociateModuleLicenseOwner[]}
      description: Associate module licenses grouped by owners.
    content.vb: Public Function GetUserLicensesAsync(associateId As Integer, allowedType As UserType, cancellationToken As CancellationToken) As Task(Of AssociateModuleLicenseOwner())
  overload: SuperOffice.License.LicenseManager.GetUserLicensesAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetUserLicensesAsync(Integer, UserType, CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetUserLicensesAsync(Integer, SuperOffice.License.UserType, System.Threading.CancellationToken)
  name.vb: GetUserLicensesAsync(Integer, UserType, CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  id: GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetAssociateLicenseUsageCountAsync(AssociateType, int[], CancellationToken)
  nameWithType: LicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, int[], CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, int[], System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: >-
    Provided an associate type and a list of module id's, count how many times each license is used.

    Deleted associates are not counted. License assignments with 0 license-numbers are not counted.
  example: []
  syntax:
    content: public Task<Dictionary<int, int>> GetAssociateLicenseUsageCountAsync(AssociateType associateType, int[] associateModules, CancellationToken cancellationToken = default)
    parameters:
    - id: associateType
      type: SuperOffice.Data.AssociateType
      description: Associate Type the license is relevant for (employee, external-user, anonymous).
    - id: associateModules
      type: System.Int32[]
      description: Module License ids to count usage of
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
      description: Dictionary containing module id as a key and how many times a license is used as value.
    content.vb: Public Function GetAssociateLicenseUsageCountAsync(associateType As AssociateType, associateModules As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of Integer, Integer))
  overload: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, Integer(), CancellationToken)
  fullName.vb: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, Integer(), System.Threading.CancellationToken)
  name.vb: GetAssociateLicenseUsageCountAsync(AssociateType, Integer(), CancellationToken)
- uid: SuperOffice.License.LicenseManager.LicenseExists(System.String)
  commentId: M:SuperOffice.License.LicenseManager.LicenseExists(System.String)
  id: LicenseExists(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LicenseExists(string)
  nameWithType: LicenseManager.LicenseExists(string)
  fullName: SuperOffice.License.LicenseManager.LicenseExists(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Determine if a license (owner.module) exists at all - regardsless of numbers, assignment etc
  example: []
  syntax:
    content: public bool LicenseExists(string license)
    parameters:
    - id: license
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function LicenseExists(license As String) As Boolean
  overload: SuperOffice.License.LicenseManager.LicenseExists*
  implements:
  - SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  nameWithType.vb: LicenseManager.LicenseExists(String)
  fullName.vb: SuperOffice.License.LicenseManager.LicenseExists(String)
  name.vb: LicenseExists(String)
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  id: LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Check nextCheckDate on all modules, and call server for those that are in the past
  remarks: The virtual <xref href="SuperOffice.License.LicenseManager.AllowAutoUpdate" data-throw-if-not-resolved="false"></xref> flag can be used to inhibit auto-updating
  example: []
  syntax:
    content: public Task LoadNewLicenseFromServerIfNeededAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function LoadNewLicenseFromServerIfNeededAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync*
  implements:
  - SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  commentId: M:SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  id: PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: PopulateSignedPublicKey(LicenseInfo, Stream)
  nameWithType: LicenseManager.PopulateSignedPublicKey(LicenseInfo, Stream)
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo, System.IO.Stream)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get a SignedPublicKey from a stream
  example: []
  syntax:
    content: public static void PopulateSignedPublicKey(LicenseInfo licenseInfo, Stream publicKeyStream)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.LicenseInfo
      description: License info object to populate with public key from stream
    - id: publicKeyStream
      type: System.IO.Stream
      description: Stream to read the signed public key from.
    content.vb: Public Shared Sub PopulateSignedPublicKey(licenseInfo As LicenseInfo, publicKeyStream As Stream)
  overload: SuperOffice.License.LicenseManager.PopulateSignedPublicKey*
- uid: SuperOffice.License.LicenseManager.IsUnitTesting
  commentId: P:SuperOffice.License.LicenseManager.IsUnitTesting
  id: IsUnitTesting
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Turn off some checking to enable unit tests to run
  example: []
  syntax:
    content: >-
      [AllowedMultitenantStatic]

      public static bool IsUnitTesting { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <AllowedMultitenantStatic>

      Public Shared Property IsUnitTesting As Boolean
  overload: SuperOffice.License.LicenseManager.IsUnitTesting*
  attributes:
  - type: SuperOffice.Factory.AllowedMultitenantStaticAttribute
    ctor: SuperOffice.Factory.AllowedMultitenantStaticAttribute.#ctor
    arguments: []
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: SuperOffice.License.ILicenseManager
  commentId: T:SuperOffice.License.ILicenseManager
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html
  name: ILicenseManager
  nameWithType: ILicenseManager
  fullName: SuperOffice.License.ILicenseManager
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<LicenseManager, To>(LicenseManager)
  nameWithType: EnumUtil.MapEnums<LicenseManager, To>(LicenseManager)
  fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseManager, To>(SuperOffice.License.LicenseManager)
  nameWithType.vb: EnumUtil.MapEnums(Of LicenseManager, To)(LicenseManager)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.LicenseManager, To)(SuperOffice.License.LicenseManager)
  name.vb: MapEnums(Of LicenseManager, To)(LicenseManager)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
- uid: SuperOffice.License.LicenseManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<LicenseManager, To>(LicenseManager)
  nameWithType: Converters.MapEnums<LicenseManager, To>(LicenseManager)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseManager, To>(SuperOffice.License.LicenseManager)
  nameWithType.vb: Converters.MapEnums(Of LicenseManager, To)(LicenseManager)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseManager, To)(SuperOffice.License.LicenseManager)
  name.vb: MapEnums(Of LicenseManager, To)(LicenseManager)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.License.LicenseManager.#ctor*
  commentId: Overload:SuperOffice.License.LicenseManager.#ctor
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager__ctor_SuperOffice_License_INSLicenseService_Microsoft_Extensions_Logging_ILogger_SuperOffice_License_LicenseManager__
  name: LicenseManager
  nameWithType: LicenseManager.LicenseManager
  fullName: SuperOffice.License.LicenseManager.LicenseManager
  nameWithType.vb: LicenseManager.New
  fullName.vb: SuperOffice.License.LicenseManager.New
  name.vb: New
- uid: SuperOffice.License.INSLicenseService
  commentId: T:SuperOffice.License.INSLicenseService
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.INSLicenseService.html
  name: INSLicenseService
  nameWithType: INSLicenseService
  fullName: SuperOffice.License.INSLicenseService
- uid: Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager}
  commentId: T:Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<LicenseManager>
  nameWithType: ILogger<LicenseManager>
  fullName: Microsoft.Extensions.Logging.ILogger<SuperOffice.License.LicenseManager>
  nameWithType.vb: ILogger(Of LicenseManager)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of SuperOffice.License.LicenseManager)
  name.vb: ILogger(Of LicenseManager)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - name: TCategoryName
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - name: TCategoryName
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: SuperOffice.License.LicenseManager.InitializeAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.InitializeAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_InitializeAsync
  name: InitializeAsync
  nameWithType: LicenseManager.InitializeAsync
  fullName: SuperOffice.License.LicenseManager.InitializeAsync
- uid: SuperOffice.License.ILicenseManager.InitializeAsync
  commentId: M:SuperOffice.License.ILicenseManager.InitializeAsync
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_InitializeAsync
  name: InitializeAsync()
  nameWithType: ILicenseManager.InitializeAsync()
  fullName: SuperOffice.License.ILicenseManager.InitializeAsync()
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.InitializeAsync
    name: InitializeAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_InitializeAsync
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.InitializeAsync
    name: InitializeAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_InitializeAsync
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_UpgradeToNewPricelistAsync_System_String_System_String_System_String_SuperOffice_CRM_ProgressEstimateCallback_SuperOffice_CRM_ProgressStepCallback_System_Threading_CancellationToken_
  name: UpgradeToNewPricelistAsync
  nameWithType: LicenseManager.UpgradeToNewPricelistAsync
  fullName: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync
- uid: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_UpgradeToNewPricelistAsync_System_String_System_String_System_String_SuperOffice_CRM_ProgressEstimateCallback_SuperOffice_CRM_ProgressStepCallback_System_Threading_CancellationToken_
  name: UpgradeToNewPricelistAsync(string, string, string, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  nameWithType: ILicenseManager.UpgradeToNewPricelistAsync(string, string, string, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(string, string, string, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(String, String, String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  name.vb: UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
    name: UpgradeToNewPricelistAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_UpgradeToNewPricelistAsync_System_String_System_String_System_String_SuperOffice_CRM_ProgressEstimateCallback_SuperOffice_CRM_ProgressStepCallback_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    isExternal: true
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
    name: UpgradeToNewPricelistAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_UpgradeToNewPricelistAsync_System_String_System_String_System_String_SuperOffice_CRM_ProgressEstimateCallback_SuperOffice_CRM_ProgressStepCallback_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    isExternal: true
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.CRM.ProgressEstimateCallback
  commentId: T:SuperOffice.CRM.ProgressEstimateCallback
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.ProgressEstimateCallback.html
  name: ProgressEstimateCallback
  nameWithType: ProgressEstimateCallback
  fullName: SuperOffice.CRM.ProgressEstimateCallback
- uid: SuperOffice.CRM.ProgressStepCallback
  commentId: T:SuperOffice.CRM.ProgressStepCallback
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.ProgressStepCallback.html
  name: ProgressStepCallback
  nameWithType: ProgressStepCallback
  fullName: SuperOffice.CRM.ProgressStepCallback
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwnersAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleOwnersAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwnersAsync_System_Threading_CancellationToken_
  name: GetModuleOwnersAsync
  nameWithType: LicenseManager.GetModuleOwnersAsync
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnersAsync
- uid: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleOwnersAsync_System_Threading_CancellationToken_
  name: GetModuleOwnersAsync(CancellationToken)
  nameWithType: ILicenseManager.GetModuleOwnersAsync(CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
    name: GetModuleOwnersAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleOwnersAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
    name: GetModuleOwnersAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleOwnersAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ModuleOwnerRow[]>
  nameWithType: Task<ModuleOwnerRow[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.ModuleOwnerRow[]>
  nameWithType.vb: Task(Of ModuleOwnerRow())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.ModuleOwnerRow())
  name.vb: Task(Of ModuleOwnerRow())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    isExternal: true
    href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    isExternal: true
    href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwnerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleOwnerAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwnerAsync_System_String_System_Threading_CancellationToken_
  name: GetModuleOwnerAsync
  nameWithType: LicenseManager.GetModuleOwnerAsync
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnerAsync
- uid: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleOwnerAsync_System_String_System_Threading_CancellationToken_
  name: GetModuleOwnerAsync(string, CancellationToken)
  nameWithType: ILicenseManager.GetModuleOwnerAsync(string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetModuleOwnerAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(String, System.Threading.CancellationToken)
  name.vb: GetModuleOwnerAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
    name: GetModuleOwnerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleOwnerAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
    name: GetModuleOwnerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleOwnerAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ModuleOwnerRow>
  nameWithType: Task<ModuleOwnerRow>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.ModuleOwnerRow>
  nameWithType.vb: Task(Of ModuleOwnerRow)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.ModuleOwnerRow)
  name.vb: Task(Of ModuleOwnerRow)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    isExternal: true
    href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    isExternal: true
    href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  - name: )
- uid: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetCurrentLicenseAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrentLicenseAsync_System_String_System_Threading_CancellationToken_
  name: GetCurrentLicenseAsync
  nameWithType: LicenseManager.GetCurrentLicenseAsync
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync
- uid: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetCurrentLicenseAsync_System_String_System_Threading_CancellationToken_
  name: GetCurrentLicenseAsync(string, CancellationToken)
  nameWithType: ILicenseManager.GetCurrentLicenseAsync(string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetCurrentLicenseAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(String, System.Threading.CancellationToken)
  name.vb: GetCurrentLicenseAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
    name: GetCurrentLicenseAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetCurrentLicenseAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
    name: GetCurrentLicenseAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetCurrentLicenseAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{SuperOffice.License.LicenseInfo,System.DateTime}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{SuperOffice.License.LicenseInfo,System.DateTime}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(LicenseInfo, DateTime)>
  nameWithType: Task<(LicenseInfo, DateTime)>
  fullName: System.Threading.Tasks.Task<(SuperOffice.License.LicenseInfo, System.DateTime)>
  nameWithType.vb: Task(Of (LicenseInfo, Date))
  fullName.vb: System.Threading.Tasks.Task(Of (SuperOffice.License.LicenseInfo, Date))
  name.vb: Task(Of (LicenseInfo, Date))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromDBAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromDBAsync
  nameWithType: LicenseManager.GetLicenseFromDBAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromDBAsync(string, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromDBAsync(string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetLicenseFromDBAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromDBAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromDBAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromDBAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ExtendedLicenseInfo>
  nameWithType: Task<ExtendedLicenseInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfo>
  nameWithType.vb: Task(Of ExtendedLicenseInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfo)
  name.vb: Task(Of ExtendedLicenseInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseForAllOwnersFromDBAsync_System_Threading_CancellationToken_
  name: GetLicenseForAllOwnersFromDBAsync
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDBAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseForAllOwnersFromDBAsync_System_Threading_CancellationToken_
  name: GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  nameWithType: ILicenseManager.GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
    name: GetLicenseForAllOwnersFromDBAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseForAllOwnersFromDBAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
    name: GetLicenseForAllOwnersFromDBAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseForAllOwnersFromDBAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ExtendedLicenseInfo[]>
  nameWithType: Task<ExtendedLicenseInfo[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfo[]>
  nameWithType.vb: Task(Of ExtendedLicenseInfo())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfo())
  name.vb: Task(Of ExtendedLicenseInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServerWithAssignmentsAsync_System_String_System_Boolean_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromLicenseServerWithAssignmentsAsync
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromLicenseServerWithAssignmentsAsync_System_String_System_Boolean_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromLicenseServerWithAssignmentsAsync(string, bool, string, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(string, bool, string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(string, bool, string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerWithAssignmentsAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromLicenseServerWithAssignmentsAsync_System_String_System_Boolean_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerWithAssignmentsAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromLicenseServerWithAssignmentsAsync_System_String_System_Boolean_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfoWithAssignments}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfoWithAssignments}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ExtendedLicenseInfoWithAssignments>
  nameWithType: Task<ExtendedLicenseInfoWithAssignments>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfoWithAssignments>
  nameWithType.vb: Task(Of ExtendedLicenseInfoWithAssignments)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfoWithAssignments)
  name.vb: Task(Of ExtendedLicenseInfoWithAssignments)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.License.ExtendedLicenseInfoWithAssignments
    name: ExtendedLicenseInfoWithAssignments
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.ExtendedLicenseInfoWithAssignments
    name: ExtendedLicenseInfoWithAssignments
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromLicenseServerAsync
  nameWithType: LicenseManager.GetLicenseFromLicenseServerAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromLicenseServerAsync(string, string, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromLicenseServerAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(string, string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromFileAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromFileAsync_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromFileAsync
  nameWithType: LicenseManager.GetLicenseFromFileAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromFileAsync_System_String_System_Threading_CancellationToken_
  name: GetLicenseFromFileAsync(string, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromFileAsync(string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetLicenseFromFileAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(String, System.Threading.CancellationToken)
  name.vb: GetLicenseFromFileAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromFileAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromFileAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromFileAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseFromFileAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_MapAndValidateLicenseWithDbAsync_SuperOffice_License_LicenseInfo_System_Threading_CancellationToken_
  name: MapAndValidateLicenseWithDbAsync
  nameWithType: LicenseManager.MapAndValidateLicenseWithDbAsync
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync
- uid: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_MapAndValidateLicenseWithDbAsync_SuperOffice_License_LicenseInfo_System_Threading_CancellationToken_
  name: MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  nameWithType: ILicenseManager.MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
    name: MapAndValidateLicenseWithDbAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_MapAndValidateLicenseWithDbAsync_SuperOffice_License_LicenseInfo_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
    name: MapAndValidateLicenseWithDbAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_MapAndValidateLicenseWithDbAsync_SuperOffice_License_LicenseInfo_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseInfo
  commentId: T:SuperOffice.License.LicenseInfo
  parent: SuperOffice.License
  isExternal: true
  name: LicenseInfo
  nameWithType: LicenseInfo
  fullName: SuperOffice.License.LicenseInfo
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleLicenseHistoryFromLicenseServerAsync_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_System_Threading_CancellationToken_
  name: GetModuleLicenseHistoryFromLicenseServerAsync
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
- uid: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleLicenseHistoryFromLicenseServerAsync_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_System_Threading_CancellationToken_
  name: GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  nameWithType: ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
    name: GetModuleLicenseHistoryFromLicenseServerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleLicenseHistoryFromLicenseServerAsync_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
    name: GetModuleLicenseHistoryFromLicenseServerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetModuleLicenseHistoryFromLicenseServerAsync_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.ExtendedLicenseInfo
  commentId: T:SuperOffice.License.ExtendedLicenseInfo
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.ExtendedLicenseInfo.html
  name: ExtendedLicenseInfo
  nameWithType: ExtendedLicenseInfo
  fullName: SuperOffice.License.ExtendedLicenseInfo
- uid: SuperOffice.License.ExtendedModuleLicense
  commentId: T:SuperOffice.License.ExtendedModuleLicense
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.ExtendedModuleLicense.html
  name: ExtendedModuleLicense
  nameWithType: ExtendedModuleLicense
  fullName: SuperOffice.License.ExtendedModuleLicense
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  href: SuperOffice.Exceptions.SoException.html
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey*
  commentId: Overload:SuperOffice.License.LicenseManager.ValidatePublicKey
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidatePublicKey_SuperOffice_License_SignedPublicKey_
  name: ValidatePublicKey
  nameWithType: LicenseManager.ValidatePublicKey
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey
- uid: SuperOffice.License.SignedPublicKey
  commentId: T:SuperOffice.License.SignedPublicKey
  parent: SuperOffice.License
  isExternal: true
  name: SignedPublicKey
  nameWithType: SignedPublicKey
  fullName: SuperOffice.License.SignedPublicKey
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Exceptions
    name: Exceptions
    isExternal: true
    href: SuperOffice.Exceptions.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Exceptions
    name: Exceptions
    isExternal: true
    href: SuperOffice.Exceptions.html
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ValidateLicenseInfo
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  name: ValidateLicenseInfo
  nameWithType: LicenseManager.ValidateLicenseInfo
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo
- uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  commentId: M:SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  name: ValidateLicenseInfo(LicenseInfo, bool)
  nameWithType: ILicenseManager.ValidateLicenseInfo(LicenseInfo, bool)
  fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, bool)
  nameWithType.vb: ILicenseManager.ValidateLicenseInfo(LicenseInfo, Boolean)
  fullName.vb: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, Boolean)
  name.vb: ValidateLicenseInfo(LicenseInfo, Boolean)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.License.LicenseManager.ToInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ToInfo
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ToInfo_SuperOffice_License_ModuleLicense_
  name: ToInfo
  nameWithType: LicenseManager.ToInfo
  fullName: SuperOffice.License.LicenseManager.ToInfo
- uid: SuperOffice.License.ModuleLicense
  commentId: T:SuperOffice.License.ModuleLicense
  parent: SuperOffice.License
  isExternal: true
  name: ModuleLicense
  nameWithType: ModuleLicense
  fullName: SuperOffice.License.ModuleLicense
- uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ValidateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_
  name: ValidateLicenseInfo(ExtendedLicenseInfo)
  nameWithType: ILicenseManager.ValidateLicenseInfo(ExtendedLicenseInfo)
  fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ValidateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ValidateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ActivateLicenseInfoAsync_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_System_Threading_CancellationToken_
  name: ActivateLicenseInfoAsync
  nameWithType: LicenseManager.ActivateLicenseInfoAsync
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync
- uid: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ActivateLicenseInfoAsync_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_System_Threading_CancellationToken_
  name: ActivateLicenseInfoAsync(ExtendedLicenseInfo, bool, bool, CancellationToken)
  nameWithType: ILicenseManager.ActivateLicenseInfoAsync(ExtendedLicenseInfo, bool, bool, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, bool, bool, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, Boolean, Boolean, System.Threading.CancellationToken)
  name.vb: ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
    name: ActivateLicenseInfoAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ActivateLicenseInfoAsync_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
    name: ActivateLicenseInfoAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ActivateLicenseInfoAsync_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseStateFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetLicenseStateFromLicenseServerAsync
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServerAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseStateFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetLicenseStateFromLicenseServerAsync(string, string, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseStateFromLicenseServerAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(string, string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseStateFromLicenseServerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseStateFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseStateFromLicenseServerAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetLicenseStateFromLicenseServerAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<CheckLicenseStatusResult>
  nameWithType: Task<CheckLicenseStatusResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.CheckLicenseStatusResult>
  nameWithType.vb: Task(Of CheckLicenseStatusResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.CheckLicenseStatusResult)
  name.vb: Task(Of CheckLicenseStatusResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.License.CheckLicenseStatusResult
    name: CheckLicenseStatusResult
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.CheckLicenseStatusResult
    name: CheckLicenseStatusResult
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.ChangeSerialNumberAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ChangeSerialNumberAsync_System_String_System_String_System_Threading_CancellationToken_
  name: ChangeSerialNumberAsync
  nameWithType: LicenseManager.ChangeSerialNumberAsync
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync
- uid: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ChangeSerialNumberAsync_System_String_System_String_System_Threading_CancellationToken_
  name: ChangeSerialNumberAsync(string, string, CancellationToken)
  nameWithType: ILicenseManager.ChangeSerialNumberAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(string, string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.ChangeSerialNumberAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(String, String, System.Threading.CancellationToken)
  name.vb: ChangeSerialNumberAsync(String, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
    name: ChangeSerialNumberAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ChangeSerialNumberAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
    name: ChangeSerialNumberAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_ChangeSerialNumberAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.GetShopUrlAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetShopUrlAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetShopUrlAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetShopUrlAsync
  nameWithType: LicenseManager.GetShopUrlAsync
  fullName: SuperOffice.License.LicenseManager.GetShopUrlAsync
- uid: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetShopUrlAsync_System_String_System_String_System_Threading_CancellationToken_
  name: GetShopUrlAsync(string, string, CancellationToken)
  nameWithType: ILicenseManager.GetShopUrlAsync(string, string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetShopUrlAsync(string, string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetShopUrlAsync(String, String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetShopUrlAsync(String, String, System.Threading.CancellationToken)
  name.vb: GetShopUrlAsync(String, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetShopUrlAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetShopUrlAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetShopUrlAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetShopUrlAsync_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_RemoveLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  name: RemoveLicenseFromDBAsync
  nameWithType: LicenseManager.RemoveLicenseFromDBAsync
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync
- uid: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_RemoveLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  name: RemoveLicenseFromDBAsync(string, CancellationToken)
  nameWithType: ILicenseManager.RemoveLicenseFromDBAsync(string, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.RemoveLicenseFromDBAsync(String, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(String, System.Threading.CancellationToken)
  name.vb: RemoveLicenseFromDBAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: RemoveLicenseFromDBAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_RemoveLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: RemoveLicenseFromDBAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_RemoveLicenseFromDBAsync_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  commentId: Overload:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_
  name: GetGrantedModuleLicenses
  nameWithType: LicenseManager.GetGrantedModuleLicenses
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses
- uid: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  commentId: M:SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetGrantedModuleLicenses_System_Int32_
  name: GetGrantedModuleLicenses(int)
  nameWithType: ILicenseManager.GetGrantedModuleLicenses(int)
  fullName: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(int)
  nameWithType.vb: ILicenseManager.GetGrantedModuleLicenses(Integer)
  fullName.vb: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(Integer)
  name.vb: GetGrantedModuleLicenses(Integer)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
    name: GetGrantedModuleLicenses
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetGrantedModuleLicenses_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
    name: GetGrantedModuleLicenses
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetGrantedModuleLicenses_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.CRM.Services.GrantedModuleLicense[]
  isExternal: true
  href: SuperOffice.CRM.Services.GrantedModuleLicense.html
  name: GrantedModuleLicense[]
  nameWithType: GrantedModuleLicense[]
  fullName: SuperOffice.CRM.Services.GrantedModuleLicense[]
  nameWithType.vb: GrantedModuleLicense()
  fullName.vb: SuperOffice.CRM.Services.GrantedModuleLicense()
  name.vb: GrantedModuleLicense()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.GrantedModuleLicense
    name: GrantedModuleLicense
    isExternal: true
    href: SuperOffice.CRM.Services.GrantedModuleLicense.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.GrantedModuleLicense
    name: GrantedModuleLicense
    isExternal: true
    href: SuperOffice.CRM.Services.GrantedModuleLicense.html
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicensesAsync_System_Int32_System_Boolean_System_Threading_CancellationToken_
  name: GetSatelliteLicensesAsync
  nameWithType: LicenseManager.GetSatelliteLicensesAsync
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync
- uid: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetSatelliteLicensesAsync_System_Int32_System_Boolean_System_Threading_CancellationToken_
  name: GetSatelliteLicensesAsync(int, bool, CancellationToken)
  nameWithType: ILicenseManager.GetSatelliteLicensesAsync(int, bool, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(int, bool, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetSatelliteLicensesAsync(Integer, Boolean, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(Integer, Boolean, System.Threading.CancellationToken)
  name.vb: GetSatelliteLicensesAsync(Integer, Boolean, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: GetSatelliteLicensesAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetSatelliteLicensesAsync_System_Int32_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: GetSatelliteLicensesAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetSatelliteLicensesAsync_System_Int32_System_Boolean_System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.SatelliteModuleLicenseOwner[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.License.SatelliteModuleLicenseOwner[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<SatelliteModuleLicenseOwner[]>
  nameWithType: Task<SatelliteModuleLicenseOwner[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.SatelliteModuleLicenseOwner[]>
  nameWithType.vb: Task(Of SatelliteModuleLicenseOwner())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.SatelliteModuleLicenseOwner())
  name.vb: Task(Of SatelliteModuleLicenseOwner())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.License.SatelliteModuleLicenseOwner
    name: SatelliteModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.SatelliteModuleLicenseOwner.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.SatelliteModuleLicenseOwner
    name: SatelliteModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.SatelliteModuleLicenseOwner.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenseUsageCountAsync_System_Int32___System_Threading_CancellationToken_
  name: GetSatelliteLicenseUsageCountAsync
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCountAsync
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync
- uid: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetSatelliteLicenseUsageCountAsync_System_Int32___System_Threading_CancellationToken_
  name: GetSatelliteLicenseUsageCountAsync(int[], CancellationToken)
  nameWithType: ILicenseManager.GetSatelliteLicenseUsageCountAsync(int[], CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(int[], System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetSatelliteLicenseUsageCountAsync(Integer(), CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(Integer(), System.Threading.CancellationToken)
  name.vb: GetSatelliteLicenseUsageCountAsync(Integer(), CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
    name: GetSatelliteLicenseUsageCountAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetSatelliteLicenseUsageCountAsync_System_Int32___System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
    name: GetSatelliteLicenseUsageCountAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetSatelliteLicenseUsageCountAsync_System_Int32___System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Dictionary<int, int>>
  nameWithType: Task<Dictionary<int, int>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>>
  nameWithType.vb: Task(Of Dictionary(Of Integer, Integer))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of Integer, Integer))
  name.vb: Task(Of Dictionary(Of Integer, Integer))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetUserLicensesAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetUserLicensesAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetUserLicensesAsync_System_Int32_SuperOffice_License_UserType_System_Threading_CancellationToken_
  name: GetUserLicensesAsync
  nameWithType: LicenseManager.GetUserLicensesAsync
  fullName: SuperOffice.License.LicenseManager.GetUserLicensesAsync
- uid: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetUserLicensesAsync_System_Int32_SuperOffice_License_UserType_System_Threading_CancellationToken_
  name: GetUserLicensesAsync(int, UserType, CancellationToken)
  nameWithType: ILicenseManager.GetUserLicensesAsync(int, UserType, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(int, SuperOffice.License.UserType, System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetUserLicensesAsync(Integer, UserType, CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(Integer, SuperOffice.License.UserType, System.Threading.CancellationToken)
  name.vb: GetUserLicensesAsync(Integer, UserType, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
    name: GetUserLicensesAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetUserLicensesAsync_System_Int32_SuperOffice_License_UserType_System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
    name: GetUserLicensesAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetUserLicensesAsync_System_Int32_SuperOffice_License_UserType_System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.UserType
  commentId: T:SuperOffice.License.UserType
  parent: SuperOffice.License
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: System.Threading.Tasks.Task{SuperOffice.License.AssociateModuleLicenseOwner[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.License.AssociateModuleLicenseOwner[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<AssociateModuleLicenseOwner[]>
  nameWithType: Task<AssociateModuleLicenseOwner[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.AssociateModuleLicenseOwner[]>
  nameWithType.vb: Task(Of AssociateModuleLicenseOwner())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.AssociateModuleLicenseOwner())
  name.vb: Task(Of AssociateModuleLicenseOwner())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.License.AssociateModuleLicenseOwner
    name: AssociateModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.AssociateModuleLicenseOwner.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.AssociateModuleLicenseOwner
    name: AssociateModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.AssociateModuleLicenseOwner.html
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetAssociateLicenseUsageCountAsync_SuperOffice_Data_AssociateType_System_Int32___System_Threading_CancellationToken_
  name: GetAssociateLicenseUsageCountAsync
  nameWithType: LicenseManager.GetAssociateLicenseUsageCountAsync
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync
- uid: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetAssociateLicenseUsageCountAsync_SuperOffice_Data_AssociateType_System_Int32___System_Threading_CancellationToken_
  name: GetAssociateLicenseUsageCountAsync(AssociateType, int[], CancellationToken)
  nameWithType: ILicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, int[], CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, int[], System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, Integer(), CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, Integer(), System.Threading.CancellationToken)
  name.vb: GetAssociateLicenseUsageCountAsync(AssociateType, Integer(), CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
    name: GetAssociateLicenseUsageCountAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetAssociateLicenseUsageCountAsync_SuperOffice_Data_AssociateType_System_Int32___System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.Data.AssociateType
    name: AssociateType
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
    name: GetAssociateLicenseUsageCountAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_GetAssociateLicenseUsageCountAsync_SuperOffice_Data_AssociateType_System_Int32___System_Threading_CancellationToken_
  - name: (
  - uid: SuperOffice.Data.AssociateType
    name: AssociateType
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.Data.AssociateType
  commentId: T:SuperOffice.Data.AssociateType
  parent: SuperOffice.Data
  isExternal: true
  href: SuperOffice.Data.AssociateType.html
  name: AssociateType
  nameWithType: AssociateType
  fullName: SuperOffice.Data.AssociateType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
- uid: SuperOffice.License.LicenseManager.LicenseExists*
  commentId: Overload:SuperOffice.License.LicenseManager.LicenseExists
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LicenseExists_System_String_
  name: LicenseExists
  nameWithType: LicenseManager.LicenseExists
  fullName: SuperOffice.License.LicenseManager.LicenseExists
- uid: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  commentId: M:SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_LicenseExists_System_String_
  name: LicenseExists(string)
  nameWithType: ILicenseManager.LicenseExists(string)
  fullName: SuperOffice.License.ILicenseManager.LicenseExists(string)
  nameWithType.vb: ILicenseManager.LicenseExists(String)
  fullName.vb: SuperOffice.License.ILicenseManager.LicenseExists(String)
  name.vb: LicenseExists(String)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
    name: LicenseExists
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_LicenseExists_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
    name: LicenseExists
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_LicenseExists_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.AllowAutoUpdate
  commentId: P:SuperOffice.License.LicenseManager.AllowAutoUpdate
  isExternal: true
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LoadNewLicenseFromServerIfNeededAsync_System_Threading_CancellationToken_
  name: LoadNewLicenseFromServerIfNeededAsync
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeededAsync
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync
- uid: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_LoadNewLicenseFromServerIfNeededAsync_System_Threading_CancellationToken_
  name: LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  nameWithType: ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
    name: LoadNewLicenseFromServerIfNeededAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_LoadNewLicenseFromServerIfNeededAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
    name: LoadNewLicenseFromServerIfNeededAsync
    isExternal: true
    href: SuperOffice.License.ILicenseManager.html#SuperOffice_License_ILicenseManager_LoadNewLicenseFromServerIfNeededAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey*
  commentId: Overload:SuperOffice.License.LicenseManager.PopulateSignedPublicKey
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_PopulateSignedPublicKey_SuperOffice_License_LicenseInfo_System_IO_Stream_
  name: PopulateSignedPublicKey
  nameWithType: LicenseManager.PopulateSignedPublicKey
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: SuperOffice.License.LicenseManager.IsUnitTesting*
  commentId: Overload:SuperOffice.License.LicenseManager.IsUnitTesting
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_IsUnitTesting
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
