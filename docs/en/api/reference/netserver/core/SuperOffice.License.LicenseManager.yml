### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.LicenseManager
  commentId: T:SuperOffice.License.LicenseManager
  id: LicenseManager
  parent: SuperOffice.License
  children:
  - SuperOffice.License.LicenseManager.#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})
  - SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  - SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.InitializeAsync
  - SuperOffice.License.LicenseManager.IsUnitTesting
  - SuperOffice.License.LicenseManager.LicenseExists(System.String)
  - SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  - SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.SuperOfficeOwner
  - SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  - SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  - SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  langs:
  - csharp
  - vb
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: SuperOffice.License.LicenseManager
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: 'public class LicenseManager : Object, ILicenseManager'
    content.vb: >-
      Public Class LicenseManager
          Inherits Object
          Implements ILicenseManager
  inheritance:
  - System.Object
  implements:
  - SuperOffice.License.ILicenseManager
  extensionMethods:
  - SuperOffice.License.LicenseManager.EnumUtil.MapEnums``2
  - SuperOffice.License.LicenseManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.License.LicenseManager.SuperOfficeOwner
  commentId: F:SuperOffice.License.LicenseManager.SuperOfficeOwner
  id: SuperOfficeOwner
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: SuperOfficeOwner
  nameWithType: LicenseManager.SuperOfficeOwner
  fullName: SuperOffice.License.LicenseManager.SuperOfficeOwner
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public const string SuperOfficeOwner = "superoffice"
    return:
      type: System.String
    content.vb: Public Const SuperOfficeOwner As String = "superoffice"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.License.LicenseManager.#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})
  commentId: M:SuperOffice.License.LicenseManager.#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})
  id: '#ctor(SuperOffice.License.INSLicenseService,Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager})'
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LicenseManager(INSLicenseService, ILogger<LicenseManager>)
  nameWithType: LicenseManager.LicenseManager(INSLicenseService, ILogger<LicenseManager>)
  fullName: SuperOffice.License.LicenseManager.LicenseManager(SuperOffice.License.INSLicenseService, Microsoft.Extensions.Logging.ILogger<SuperOffice.License.LicenseManager>)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nInjection constructor, perform auto-update of license if nextCheckDate has passed\n"
  syntax:
    content: public LicenseManager(INSLicenseService licenseService, ILogger<LicenseManager> logger)
    parameters:
    - id: licenseService
      type: SuperOffice.License.INSLicenseService
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager}
    content.vb: Public Sub New(licenseService As INSLicenseService, logger As ILogger(Of LicenseManager))
  overload: SuperOffice.License.LicenseManager.#ctor*
  nameWithType.vb: LicenseManager.LicenseManager(INSLicenseService, ILogger(Of LicenseManager))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.License.LicenseManager.LicenseManager(SuperOffice.License.INSLicenseService, Microsoft.Extensions.Logging.ILogger(Of SuperOffice.License.LicenseManager))
  name.vb: LicenseManager(INSLicenseService, ILogger(Of LicenseManager))
- uid: SuperOffice.License.LicenseManager.InitializeAsync
  commentId: M:SuperOffice.License.LicenseManager.InitializeAsync
  id: InitializeAsync
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: InitializeAsync()
  nameWithType: LicenseManager.InitializeAsync()
  fullName: SuperOffice.License.LicenseManager.InitializeAsync()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public Task InitializeAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function InitializeAsync As Task
  overload: SuperOffice.License.LicenseManager.InitializeAsync*
  implements:
  - SuperOffice.License.ILicenseManager.InitializeAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  id: UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  nameWithType: LicenseManager.UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync(System.String, System.String, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nUpgrade <strong>all users in the database</strong> from their current 7.5 licenses to the new pricelist in 10.0\n"
  syntax:
    content: public Task<bool> UpgradeToNewPricelistAsync(string systemUser, string password, string additionalInfo, ProgressEstimateCallback estimateCB, ProgressStepCallback stepCB, CancellationToken cancellationToken = null)
    parameters:
    - id: systemUser
      type: System.String
    - id: password
      type: System.String
    - id: additionalInfo
      type: System.String
    - id: estimateCB
      type: SuperOffice.CRM.ProgressEstimateCallback
    - id: stepCB
      type: SuperOffice.CRM.ProgressStepCallback
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function UpgradeToNewPricelistAsync(systemUser As String, password As String, additionalInfo As String, estimateCB As ProgressEstimateCallback, stepCB As ProgressStepCallback, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync*
  implements:
  - SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  id: GetModuleOwnersAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleOwnersAsync(CancellationToken)
  nameWithType: LicenseManager.GetModuleOwnersAsync(CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet all the module owners.\n"
  syntax:
    content: public Task<ModuleOwnerRow[]> GetModuleOwnersAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow[]}
      description: Array of module owners
    content.vb: Public Function GetModuleOwnersAsync(cancellationToken As CancellationToken) As Task(Of ModuleOwnerRow())
  overload: SuperOffice.License.LicenseManager.GetModuleOwnersAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  id: GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleOwnerAsync(String, CancellationToken)
  nameWithType: LicenseManager.GetModuleOwnerAsync(String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnerAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet module owner from the owners name.\n"
  syntax:
    content: public Task<ModuleOwnerRow> GetModuleOwnerAsync(string moduleOwner, CancellationToken cancellationToken)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of hte module owner
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow}
      description: Module owner
    content.vb: Public Function GetModuleOwnerAsync(moduleOwner As String, cancellationToken As CancellationToken) As Task(Of ModuleOwnerRow)
  overload: SuperOffice.License.LicenseManager.GetModuleOwnerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  id: GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetCurrentLicenseAsync(String, CancellationToken)
  nameWithType: LicenseManager.GetCurrentLicenseAsync(String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the current license from a module owner.\n"
  syntax:
    content: public Task<ValueTuple<LicenseInfo, DateTime>> GetCurrentLicenseAsync(string moduleOwner, CancellationToken cancellationToken = null)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of the module owner
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{SuperOffice.License.LicenseInfo,System.DateTime}}
      description: License as stored in the database.
    content.vb: Public Function GetCurrentLicenseAsync(moduleOwner As String, cancellationToken As CancellationToken = Nothing) As Task(Of ValueTuple(Of LicenseInfo, DateTime))
  overload: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromDBAsync(String, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromDBAsync(String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet license, with usage, as it is stored in the database for one particular module owner.\n"
  syntax:
    content: public Task<ExtendedLicenseInfo> GetLicenseFromDBAsync(string ownerName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License, with usage, as it is stored in the database. NULL if no license found.
    content.vb: Public Function GetLicenseFromDBAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  id: GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet all licenses, with usage, from all module owners as they are stored in the database\n"
  syntax:
    content: public Task<ExtendedLicenseInfo[]> GetLicenseForAllOwnersFromDBAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
      description: Array of licenses, with usage, as it is stored in the database.
    content.vb: Public Function GetLicenseForAllOwnersFromDBAsync(cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo())
  overload: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  id: GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String, System.Boolean, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet License from the license server for a particular module owner. Validates that the license is signed ok.\n"
  syntax:
    content: public Task<ExtendedLicenseInfoWithAssignments> GetLicenseFromLicenseServerWithAssignmentsAsync(string ownerName, bool isTestUpgrade = false, string licenseUrl = null, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: isTestUpgrade
      type: System.Boolean
      description: Is this a test upgrade? Default false.
    - id: licenseUrl
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfoWithAssignments}
      description: >-
        License from the database, from the license server and with new license assignments, and possibly new serial number.

        Possible exception if license server has not implemented method.
    content.vb: Public Function GetLicenseFromLicenseServerWithAssignmentsAsync(ownerName As String, isTestUpgrade As Boolean = False, licenseUrl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfoWithAssignments)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet License from the license server for a particular module owner.\n"
  syntax:
    content: public Task<ExtendedLicenseInfo> GetLicenseFromLicenseServerAsync(string ownerName, string additionalInfo = null, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: additionalInfo
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License from the database, from the license server and with usage.
    content.vb: Public Function GetLicenseFromLicenseServerAsync(ownerName As String, additionalInfo As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  id: GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromFileAsync(String, CancellationToken)
  nameWithType: LicenseManager.GetLicenseFromFileAsync(String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nParse a license from file content for a particular module owner.\n"
  syntax:
    content: public Task<ExtendedLicenseInfo> GetLicenseFromFileAsync(string fileContent, CancellationToken cancellationToken)
    parameters:
    - id: fileContent
      type: System.String
      description: Content of license file.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License from the database, from file and with usage.
    content.vb: Public Function GetLicenseFromFileAsync(fileContent As String, cancellationToken As CancellationToken) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  id: MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  nameWithType: LicenseManager.MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the current license from the database, map the incoming one on to it, and\nvalidate to see if the result is acceptable (can be Activated)\n"
  syntax:
    content: public Task<ExtendedLicenseInfo> MapAndValidateLicenseWithDbAsync(LicenseInfo newLicense, CancellationToken cancellationToken)
    parameters:
    - id: newLicense
      type: SuperOffice.License.LicenseInfo
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
      description: License including activation flags and problem tag
    content.vb: Public Function MapAndValidateLicenseWithDbAsync(newLicense As LicenseInfo, cancellationToken As CancellationToken) As Task(Of ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync*
  implements:
  - SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  id: GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet details about a license from the license server.\n"
  syntax:
    content: public Task<string> GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo licenseInfo, ExtendedModuleLicense moduleLicense, CancellationToken cancellationToken = null)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: Description of the license
    - id: moduleLicense
      type: SuperOffice.License.ExtendedModuleLicense
      description: Information about a particular module to get information for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Information about a particular license module.
    content.vb: Public Function GetModuleLicenseHistoryFromLicenseServerAsync(licenseInfo As ExtendedLicenseInfo, moduleLicense As ExtendedModuleLicense, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  commentId: M:SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  id: ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidatePublicKey(SignedPublicKey)
  nameWithType: LicenseManager.ValidatePublicKey(SignedPublicKey)
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nValidate a Public Key\n"
  syntax:
    content: public static void ValidatePublicKey(SignedPublicKey publicKey)
    parameters:
    - id: publicKey
      type: SuperOffice.License.SignedPublicKey
      description: Public key to validate
    content.vb: Public Shared Sub ValidatePublicKey(publicKey As SignedPublicKey)
  overload: SuperOffice.License.LicenseManager.ValidatePublicKey*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Throw if failed to validate public key.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  id: ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfo(LicenseInfo, Boolean)
  nameWithType: LicenseManager.ValidateLicenseInfo(LicenseInfo, Boolean)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, System.Boolean)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nValidate that a license is consistent.\n"
  syntax:
    content: public void ValidateLicenseInfo(LicenseInfo licenseInfo, bool checkSerialNumber = true)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.LicenseInfo
      description: License to validate consistancy for
    - id: checkSerialNumber
      type: System.Boolean
      description: Check that Serial Number is consistent. Throws exception if serial number is inconsistent if true. Default = true.
    content.vb: Public Sub ValidateLicenseInfo(licenseInfo As LicenseInfo, checkSerialNumber As Boolean = True)
  overload: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  implements:
  - SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  commentId: M:SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  id: ToInfo(SuperOffice.License.ModuleLicense)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ToInfo(ModuleLicense)
  nameWithType: LicenseManager.ToInfo(ModuleLicense)
  fullName: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public static string ToInfo(ModuleLicense info)
    parameters:
    - id: info
      type: SuperOffice.License.ModuleLicense
    return:
      type: System.String
    content.vb: Public Shared Function ToInfo(info As ModuleLicense) As String
  overload: SuperOffice.License.LicenseManager.ToInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  id: ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfo(ExtendedLicenseInfo)
  nameWithType: LicenseManager.ValidateLicenseInfo(ExtendedLicenseInfo)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nValidate that a license is consistent.\n"
  syntax:
    content: public void ValidateLicenseInfo(ExtendedLicenseInfo licenseInfo)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License to validate consistance for
    content.vb: Public Sub ValidateLicenseInfo(licenseInfo As ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  implements:
  - SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  nameWithType: LicenseManager.ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nSave a new license to the database.\n"
  remarks: <see cref="!:ValidateNewLicence"></see> is called to validate the license before it is accepted and saved.
  syntax:
    content: public Task ActivateLicenseInfoAsync(ExtendedLicenseInfo newLicense, bool checkSerialNumber = true, bool checkUserLicense = true, CancellationToken cancellationToken = null)
    parameters:
    - id: newLicense
      type: SuperOffice.License.ExtendedLicenseInfo
      description: New license to save to the database.
    - id: checkSerialNumber
      type: System.Boolean
    - id: checkUserLicense
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ActivateLicenseInfoAsync(newLicense As ExtendedLicenseInfo, checkSerialNumber As Boolean = True, checkUserLicense As Boolean = True, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  implements:
  - SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nPing the license server and get the current state.\n"
  syntax:
    content: public Task<CheckLicenseStatusResult> GetLicenseStateFromLicenseServerAsync(string ownerName, string additionalInfo = null, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the owner to ping.
    - id: additionalInfo
      type: System.String
      description: 'Extra info - packed into NetServer version: &quot;TestUpgrade=true&quot;'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
      description: Result obtained by the license server.
    content.vb: Public Function GetLicenseStateFromLicenseServerAsync(ownerName As String, additionalInfo As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of CheckLicenseStatusResult)
  overload: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ChangeSerialNumberAsync(String, String, CancellationToken)
  nameWithType: LicenseManager.ChangeSerialNumberAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nChange the new serial number for the installation.\n"
  syntax:
    content: public Task ChangeSerialNumberAsync(string newCompanyName, string newSerialNumber, CancellationToken cancellationToken)
    parameters:
    - id: newCompanyName
      type: System.String
      description: The new company name
    - id: newSerialNumber
      type: System.String
      description: New serial number to change to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ChangeSerialNumberAsync(newCompanyName As String, newSerialNumber As String, cancellationToken As CancellationToken) As Task
  overload: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync*
  implements:
  - SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetShopUrlAsync(String, String, CancellationToken)
  nameWithType: LicenseManager.GetShopUrlAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetShopUrlAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the shop url for a module owner, including a context string\n"
  syntax:
    content: public Task<string> GetShopUrlAsync(string ownerName, string context, CancellationToken cancellationToken)
    parameters:
    - id: ownerName
      type: System.String
    - id: context
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetShopUrlAsync(ownerName As String, context As String, cancellationToken As CancellationToken) As Task(Of String)
  overload: SuperOffice.License.LicenseManager.GetShopUrlAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  id: RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: RemoveLicenseFromDBAsync(String, CancellationToken)
  nameWithType: LicenseManager.RemoveLicenseFromDBAsync(String, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nRemove all information about a licenses from a module owner from the database\n"
  syntax:
    content: public Task RemoveLicenseFromDBAsync(string ownerName, CancellationToken cancellationToken = null)
    parameters:
    - id: ownerName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveLicenseFromDBAsync(ownerName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync*
  implements:
  - SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  commentId: M:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  id: GetGrantedModuleLicenses(System.Int32)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetGrantedModuleLicenses(Int32)
  nameWithType: LicenseManager.GetGrantedModuleLicenses(Int32)
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet granted module licenses for the provided associate.\n"
  syntax:
    content: public GrantedModuleLicense[] GetGrantedModuleLicenses(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id&apos;s of the associate to get granted module licenses for.
    return:
      type: SuperOffice.CRM.Services.GrantedModuleLicense[]
      description: Granted module licenses
    content.vb: Public Function GetGrantedModuleLicenses(associateId As Integer) As GrantedModuleLicense()
  overload: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  implements:
  - SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetSatelliteLicensesAsync(Int32, Boolean, CancellationToken)
  nameWithType: LicenseManager.GetSatelliteLicensesAsync(Int32, Boolean, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync(System.Int32, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nObtain information about satellite module licenses\n"
  syntax:
    content: public Task<SatelliteModuleLicenseOwner[]> GetSatelliteLicensesAsync(int satelliteId, bool fetchForCentralIfSatelliteIdIsZero, CancellationToken cancellationToken = null)
    parameters:
    - id: satelliteId
      type: System.Int32
      description: Satellite id to check for satellite module licenses. 0 indicates central database
    - id: fetchForCentralIfSatelliteIdIsZero
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.SatelliteModuleLicenseOwner[]}
      description: Satellite module licenses grouped by owners.
    content.vb: Public Function GetSatelliteLicensesAsync(satelliteId As Integer, fetchForCentralIfSatelliteIdIsZero As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of SatelliteModuleLicenseOwner())
  overload: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetSatelliteLicenseUsageCountAsync(Int32[], CancellationToken)
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCountAsync(Int32[], CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nProvided  a list of module id&apos;s, count how many times each license is used.\n"
  syntax:
    content: public Task<Dictionary<int, int>> GetSatelliteLicenseUsageCountAsync(int[] satelliteModules, CancellationToken cancellationToken = null)
    parameters:
    - id: satelliteModules
      type: System.Int32[]
      description: Module id&apos;s to count usage of
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
      description: Dictionary containing module id as a key and how many times a license is used as value.
    content.vb: Public Function GetSatelliteLicenseUsageCountAsync(satelliteModules As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of Integer, Integer))
  overload: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetSatelliteLicenseUsageCountAsync(Int32(), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: GetSatelliteLicenseUsageCountAsync(Int32(), CancellationToken)
- uid: SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  id: GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetUserLicensesAsync(Int32, UserType, CancellationToken)
  nameWithType: LicenseManager.GetUserLicensesAsync(Int32, UserType, CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetUserLicensesAsync(System.Int32, SuperOffice.License.UserType, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nObtain information about associate module licenses\n"
  syntax:
    content: public Task<AssociateModuleLicenseOwner[]> GetUserLicensesAsync(int associateId, UserType allowedType, CancellationToken cancellationToken)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id to check for associate module licenses
    - id: allowedType
      type: SuperOffice.License.UserType
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.License.AssociateModuleLicenseOwner[]}
      description: Associate module licenses grouped by owners.
    content.vb: Public Function GetUserLicensesAsync(associateId As Integer, allowedType As UserType, cancellationToken As CancellationToken) As Task(Of AssociateModuleLicenseOwner())
  overload: SuperOffice.License.LicenseManager.GetUserLicensesAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  id: GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetAssociateLicenseUsageCountAsync(AssociateType, Int32[], CancellationToken)
  nameWithType: LicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, Int32[], CancellationToken)
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nProvided an associate type and a list of module id&apos;s, count how many times each license is used.\nDeleted associates are not counted. License assignments with 0 license-numbers are not counted.\n"
  syntax:
    content: public Task<Dictionary<int, int>> GetAssociateLicenseUsageCountAsync(AssociateType associateType, int[] associateModules, CancellationToken cancellationToken = null)
    parameters:
    - id: associateType
      type: SuperOffice.Data.AssociateType
      description: Associate Type the license is relevant for (employee, external-user, anonymous).
    - id: associateModules
      type: System.Int32[]
      description: Module License ids to count usage of
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
      description: Dictionary containing module id as a key and how many times a license is used as value.
    content.vb: Public Function GetAssociateLicenseUsageCountAsync(associateType As AssociateType, associateModules As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of Integer, Integer))
  overload: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync*
  implements:
  - SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  nameWithType.vb: LicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, Int32(), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, System.Int32(), System.Threading.CancellationToken)
  name.vb: GetAssociateLicenseUsageCountAsync(AssociateType, Int32(), CancellationToken)
- uid: SuperOffice.License.LicenseManager.LicenseExists(System.String)
  commentId: M:SuperOffice.License.LicenseManager.LicenseExists(System.String)
  id: LicenseExists(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LicenseExists(String)
  nameWithType: LicenseManager.LicenseExists(String)
  fullName: SuperOffice.License.LicenseManager.LicenseExists(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nDetermine if a license (owner.module) exists at all - regardsless of numbers, assignment etc\n"
  syntax:
    content: public bool LicenseExists(string license)
    parameters:
    - id: license
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function LicenseExists(license As String) As Boolean
  overload: SuperOffice.License.LicenseManager.LicenseExists*
  implements:
  - SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  id: LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nCheck nextCheckDate on all modules, and call server for those that are in the past\n"
  remarks: "\nThe virtual <xref href=\"SuperOffice.License.LicenseManager.AllowAutoUpdate\" data-throw-if-not-resolved=\"false\"></xref> flag can be used to inhibit auto-updating\n"
  syntax:
    content: public Task LoadNewLicenseFromServerIfNeededAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function LoadNewLicenseFromServerIfNeededAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync*
  implements:
  - SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  commentId: M:SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  id: PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: PopulateSignedPublicKey(LicenseInfo, Stream)
  nameWithType: LicenseManager.PopulateSignedPublicKey(LicenseInfo, Stream)
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo, System.IO.Stream)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet a SignedPublicKey from a stream\n"
  syntax:
    content: public static void PopulateSignedPublicKey(LicenseInfo licenseInfo, Stream publicKeyStream)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.LicenseInfo
      description: License info object to populate with public key from stream
    - id: publicKeyStream
      type: System.IO.Stream
      description: Stream to read the signed public key from.
    content.vb: Public Shared Sub PopulateSignedPublicKey(licenseInfo As LicenseInfo, publicKeyStream As Stream)
  overload: SuperOffice.License.LicenseManager.PopulateSignedPublicKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.License.LicenseManager.IsUnitTesting
  commentId: P:SuperOffice.License.LicenseManager.IsUnitTesting
  id: IsUnitTesting
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nTurn off some checking to enable unit tests to run\n"
  syntax:
    content: >-
      [AllowedMultitenantStatic]

      public static bool IsUnitTesting { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <AllowedMultitenantStatic>

      Public Shared Property IsUnitTesting As Boolean
  overload: SuperOffice.License.LicenseManager.IsUnitTesting*
  attributes:
  - type: SuperOffice.Factory.AllowedMultitenantStaticAttribute
    ctor: SuperOffice.Factory.AllowedMultitenantStaticAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.License.ILicenseManager
  commentId: T:SuperOffice.License.ILicenseManager
  parent: SuperOffice.License
  isExternal: true
  name: ILicenseManager
  nameWithType: ILicenseManager
  fullName: SuperOffice.License.ILicenseManager
- uid: SuperOffice.License.LicenseManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<LicenseManager, To>()
  nameWithType: EnumUtil.MapEnums<LicenseManager, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseManager, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of LicenseManager, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.LicenseManager, To)()
  name.vb: MapEnums(Of LicenseManager, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<LicenseManager, To>
    nameWithType: EnumUtil.MapEnums<LicenseManager, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of LicenseManager, To)
    nameWithType: EnumUtil.MapEnums(Of LicenseManager, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.LicenseManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<LicenseManager, To>()
  nameWithType: Converters.MapEnums<LicenseManager, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseManager, To>()
  nameWithType.vb: Converters.MapEnums(Of LicenseManager, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseManager, To)()
  name.vb: MapEnums(Of LicenseManager, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<LicenseManager, To>
    nameWithType: Converters.MapEnums<LicenseManager, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseManager, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of LicenseManager, To)
    nameWithType: Converters.MapEnums(Of LicenseManager, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseManager, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.License.LicenseManager.#ctor*
  commentId: Overload:SuperOffice.License.LicenseManager.#ctor
  isExternal: true
  name: LicenseManager
  nameWithType: LicenseManager.LicenseManager
  fullName: SuperOffice.License.LicenseManager.LicenseManager
- uid: SuperOffice.License.INSLicenseService
  commentId: T:SuperOffice.License.INSLicenseService
  parent: SuperOffice.License
  isExternal: true
  name: INSLicenseService
  nameWithType: INSLicenseService
  fullName: SuperOffice.License.INSLicenseService
- uid: Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{SuperOffice.License.LicenseManager}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<LicenseManager>
  nameWithType: ILogger<LicenseManager>
  fullName: Microsoft.Extensions.Logging.ILogger<SuperOffice.License.LicenseManager>
  nameWithType.vb: ILogger(Of LicenseManager)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of SuperOffice.License.LicenseManager)
  name.vb: ILogger(Of LicenseManager)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    nameWithType: LicenseManager
    fullName: SuperOffice.License.LicenseManager
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    nameWithType: LicenseManager
    fullName: SuperOffice.License.LicenseManager
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.InitializeAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.InitializeAsync
  isExternal: true
  name: InitializeAsync
  nameWithType: LicenseManager.InitializeAsync
  fullName: SuperOffice.License.LicenseManager.InitializeAsync
- uid: SuperOffice.License.ILicenseManager.InitializeAsync
  commentId: M:SuperOffice.License.ILicenseManager.InitializeAsync
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: InitializeAsync()
  nameWithType: ILicenseManager.InitializeAsync()
  fullName: SuperOffice.License.ILicenseManager.InitializeAsync()
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.InitializeAsync
    name: InitializeAsync
    nameWithType: ILicenseManager.InitializeAsync
    fullName: SuperOffice.License.ILicenseManager.InitializeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.InitializeAsync
    name: InitializeAsync
    nameWithType: ILicenseManager.InitializeAsync
    fullName: SuperOffice.License.ILicenseManager.InitializeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync
  isExternal: true
  name: UpgradeToNewPricelistAsync
  nameWithType: LicenseManager.UpgradeToNewPricelistAsync
  fullName: SuperOffice.License.LicenseManager.UpgradeToNewPricelistAsync
- uid: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  nameWithType: ILicenseManager.UpgradeToNewPricelistAsync(String, String, String, ProgressEstimateCallback, ProgressStepCallback, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String, System.String, System.String, SuperOffice.CRM.ProgressEstimateCallback, SuperOffice.CRM.ProgressStepCallback, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
    name: UpgradeToNewPricelistAsync
    nameWithType: ILicenseManager.UpgradeToNewPricelistAsync
    fullName: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    nameWithType: ProgressEstimateCallback
    fullName: SuperOffice.CRM.ProgressEstimateCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    nameWithType: ProgressStepCallback
    fullName: SuperOffice.CRM.ProgressStepCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync(System.String,System.String,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback,System.Threading.CancellationToken)
    name: UpgradeToNewPricelistAsync
    nameWithType: ILicenseManager.UpgradeToNewPricelistAsync
    fullName: SuperOffice.License.ILicenseManager.UpgradeToNewPricelistAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressEstimateCallback
    name: ProgressEstimateCallback
    nameWithType: ProgressEstimateCallback
    fullName: SuperOffice.CRM.ProgressEstimateCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.CRM.ProgressStepCallback
    name: ProgressStepCallback
    nameWithType: ProgressStepCallback
    fullName: SuperOffice.CRM.ProgressStepCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.ProgressEstimateCallback
  commentId: T:SuperOffice.CRM.ProgressEstimateCallback
  parent: SuperOffice.CRM
  isExternal: true
  name: ProgressEstimateCallback
  nameWithType: ProgressEstimateCallback
  fullName: SuperOffice.CRM.ProgressEstimateCallback
- uid: SuperOffice.CRM.ProgressStepCallback
  commentId: T:SuperOffice.CRM.ProgressStepCallback
  parent: SuperOffice.CRM
  isExternal: true
  name: ProgressStepCallback
  nameWithType: ProgressStepCallback
  fullName: SuperOffice.CRM.ProgressStepCallback
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwnersAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleOwnersAsync
  isExternal: true
  name: GetModuleOwnersAsync
  nameWithType: LicenseManager.GetModuleOwnersAsync
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnersAsync
- uid: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetModuleOwnersAsync(CancellationToken)
  nameWithType: ILicenseManager.GetModuleOwnersAsync(CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
    name: GetModuleOwnersAsync
    nameWithType: ILicenseManager.GetModuleOwnersAsync
    fullName: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync(System.Threading.CancellationToken)
    name: GetModuleOwnersAsync
    nameWithType: ILicenseManager.GetModuleOwnersAsync
    fullName: SuperOffice.License.ILicenseManager.GetModuleOwnersAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ModuleOwnerRow[]>
  nameWithType: Task<ModuleOwnerRow[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.ModuleOwnerRow[]>
  nameWithType.vb: Task(Of ModuleOwnerRow())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.ModuleOwnerRow())
  name.vb: Task(Of ModuleOwnerRow())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    nameWithType: ModuleOwnerRow
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    nameWithType: ModuleOwnerRow
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwnerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleOwnerAsync
  isExternal: true
  name: GetModuleOwnerAsync
  nameWithType: LicenseManager.GetModuleOwnerAsync
  fullName: SuperOffice.License.LicenseManager.GetModuleOwnerAsync
- uid: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetModuleOwnerAsync(String, CancellationToken)
  nameWithType: ILicenseManager.GetModuleOwnerAsync(String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
    name: GetModuleOwnerAsync
    nameWithType: ILicenseManager.GetModuleOwnerAsync
    fullName: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync(System.String,System.Threading.CancellationToken)
    name: GetModuleOwnerAsync
    nameWithType: ILicenseManager.GetModuleOwnerAsync
    fullName: SuperOffice.License.ILicenseManager.GetModuleOwnerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.ModuleOwnerRow}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ModuleOwnerRow>
  nameWithType: Task<ModuleOwnerRow>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.ModuleOwnerRow>
  nameWithType.vb: Task(Of ModuleOwnerRow)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.ModuleOwnerRow)
  name.vb: Task(Of ModuleOwnerRow)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    nameWithType: ModuleOwnerRow
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    nameWithType: ModuleOwnerRow
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetCurrentLicenseAsync
  isExternal: true
  name: GetCurrentLicenseAsync
  nameWithType: LicenseManager.GetCurrentLicenseAsync
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicenseAsync
- uid: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetCurrentLicenseAsync(String, CancellationToken)
  nameWithType: ILicenseManager.GetCurrentLicenseAsync(String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
    name: GetCurrentLicenseAsync
    nameWithType: ILicenseManager.GetCurrentLicenseAsync
    fullName: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync(System.String,System.Threading.CancellationToken)
    name: GetCurrentLicenseAsync
    nameWithType: ILicenseManager.GetCurrentLicenseAsync
    fullName: SuperOffice.License.ILicenseManager.GetCurrentLicenseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{SuperOffice.License.LicenseInfo,System.DateTime}}
  commentId: '!:System.Threading.Tasks.Task{System.ValueTuple{SuperOffice.License.LicenseInfo,System.DateTime}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<LicenseInfo, DateTime>>
  nameWithType: Task<ValueTuple<LicenseInfo, DateTime>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<SuperOffice.License.LicenseInfo, System.DateTime>>
  nameWithType.vb: Task(Of ValueTuple(Of LicenseInfo, DateTime))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of SuperOffice.License.LicenseInfo, System.DateTime))
  name.vb: Task(Of ValueTuple(Of LicenseInfo, DateTime))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    nameWithType: LicenseInfo
    fullName: SuperOffice.License.LicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    nameWithType: LicenseInfo
    fullName: SuperOffice.License.LicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromDBAsync
  isExternal: true
  name: GetLicenseFromDBAsync
  nameWithType: LicenseManager.GetLicenseFromDBAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDBAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetLicenseFromDBAsync(String, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromDBAsync(String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromDBAsync
    nameWithType: ILicenseManager.GetLicenseFromDBAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromDBAsync
    nameWithType: ILicenseManager.GetLicenseFromDBAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromDBAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ExtendedLicenseInfo>
  nameWithType: Task<ExtendedLicenseInfo>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfo>
  nameWithType.vb: Task(Of ExtendedLicenseInfo)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfo)
  name.vb: Task(Of ExtendedLicenseInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync
  isExternal: true
  name: GetLicenseForAllOwnersFromDBAsync
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDBAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDBAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  nameWithType: ILicenseManager.GetLicenseForAllOwnersFromDBAsync(CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
    name: GetLicenseForAllOwnersFromDBAsync
    nameWithType: ILicenseManager.GetLicenseForAllOwnersFromDBAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync(System.Threading.CancellationToken)
    name: GetLicenseForAllOwnersFromDBAsync
    nameWithType: ILicenseManager.GetLicenseForAllOwnersFromDBAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseForAllOwnersFromDBAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfo[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ExtendedLicenseInfo[]>
  nameWithType: Task<ExtendedLicenseInfo[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfo[]>
  nameWithType.vb: Task(Of ExtendedLicenseInfo())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfo())
  name.vb: Task(Of ExtendedLicenseInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
  isExternal: true
  name: GetLicenseFromLicenseServerWithAssignmentsAsync
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(String, Boolean, String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String, System.Boolean, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerWithAssignmentsAsync
    nameWithType: ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync(System.String,System.Boolean,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerWithAssignmentsAsync
    nameWithType: ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerWithAssignmentsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfoWithAssignments}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.ExtendedLicenseInfoWithAssignments}'
  definition: System.Threading.Tasks.Task`1
  name: Task<ExtendedLicenseInfoWithAssignments>
  nameWithType: Task<ExtendedLicenseInfoWithAssignments>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.ExtendedLicenseInfoWithAssignments>
  nameWithType.vb: Task(Of ExtendedLicenseInfoWithAssignments)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.ExtendedLicenseInfoWithAssignments)
  name.vb: Task(Of ExtendedLicenseInfoWithAssignments)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.ExtendedLicenseInfoWithAssignments
    name: ExtendedLicenseInfoWithAssignments
    nameWithType: ExtendedLicenseInfoWithAssignments
    fullName: SuperOffice.License.ExtendedLicenseInfoWithAssignments
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.ExtendedLicenseInfoWithAssignments
    name: ExtendedLicenseInfoWithAssignments
    nameWithType: ExtendedLicenseInfoWithAssignments
    fullName: SuperOffice.License.ExtendedLicenseInfoWithAssignments
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync
  isExternal: true
  name: GetLicenseFromLicenseServerAsync
  nameWithType: LicenseManager.GetLicenseFromLicenseServerAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromLicenseServerAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerAsync
    nameWithType: ILicenseManager.GetLicenseFromLicenseServerAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseFromLicenseServerAsync
    nameWithType: ILicenseManager.GetLicenseFromLicenseServerAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromLicenseServerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromFileAsync
  isExternal: true
  name: GetLicenseFromFileAsync
  nameWithType: LicenseManager.GetLicenseFromFileAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFileAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetLicenseFromFileAsync(String, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseFromFileAsync(String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromFileAsync
    nameWithType: ILicenseManager.GetLicenseFromFileAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync(System.String,System.Threading.CancellationToken)
    name: GetLicenseFromFileAsync
    nameWithType: ILicenseManager.GetLicenseFromFileAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseFromFileAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync
  isExternal: true
  name: MapAndValidateLicenseWithDbAsync
  nameWithType: LicenseManager.MapAndValidateLicenseWithDbAsync
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDbAsync
- uid: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  nameWithType: ILicenseManager.MapAndValidateLicenseWithDbAsync(LicenseInfo, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
    name: MapAndValidateLicenseWithDbAsync
    nameWithType: ILicenseManager.MapAndValidateLicenseWithDbAsync
    fullName: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    nameWithType: LicenseInfo
    fullName: SuperOffice.License.LicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync(SuperOffice.License.LicenseInfo,System.Threading.CancellationToken)
    name: MapAndValidateLicenseWithDbAsync
    nameWithType: ILicenseManager.MapAndValidateLicenseWithDbAsync
    fullName: SuperOffice.License.ILicenseManager.MapAndValidateLicenseWithDbAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    nameWithType: LicenseInfo
    fullName: SuperOffice.License.LicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseInfo
  isExternal: true
  name: LicenseInfo
  nameWithType: LicenseInfo
  fullName: SuperOffice.License.LicenseInfo
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
  isExternal: true
  name: GetModuleLicenseHistoryFromLicenseServerAsync
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
- uid: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  nameWithType: ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(ExtendedLicenseInfo, ExtendedModuleLicense, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
    name: GetModuleLicenseHistoryFromLicenseServerAsync
    nameWithType: ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
    fullName: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    nameWithType: ExtendedModuleLicense
    fullName: SuperOffice.License.ExtendedModuleLicense
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense,System.Threading.CancellationToken)
    name: GetModuleLicenseHistoryFromLicenseServerAsync
    nameWithType: ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
    fullName: SuperOffice.License.ILicenseManager.GetModuleLicenseHistoryFromLicenseServerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    nameWithType: ExtendedModuleLicense
    fullName: SuperOffice.License.ExtendedModuleLicense
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.ExtendedLicenseInfo
  commentId: T:SuperOffice.License.ExtendedLicenseInfo
  parent: SuperOffice.License
  isExternal: true
  name: ExtendedLicenseInfo
  nameWithType: ExtendedLicenseInfo
  fullName: SuperOffice.License.ExtendedLicenseInfo
- uid: SuperOffice.License.ExtendedModuleLicense
  commentId: T:SuperOffice.License.ExtendedModuleLicense
  parent: SuperOffice.License
  isExternal: true
  name: ExtendedModuleLicense
  nameWithType: ExtendedModuleLicense
  fullName: SuperOffice.License.ExtendedModuleLicense
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey*
  commentId: Overload:SuperOffice.License.LicenseManager.ValidatePublicKey
  isExternal: true
  name: ValidatePublicKey
  nameWithType: LicenseManager.ValidatePublicKey
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: SuperOffice.License.SignedPublicKey
  isExternal: true
  name: SignedPublicKey
  nameWithType: SignedPublicKey
  fullName: SuperOffice.License.SignedPublicKey
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ValidateLicenseInfo
  isExternal: true
  name: ValidateLicenseInfo
  nameWithType: LicenseManager.ValidateLicenseInfo
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo
- uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  commentId: M:SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: ValidateLicenseInfo(LicenseInfo, Boolean)
  nameWithType: ILicenseManager.ValidateLicenseInfo(LicenseInfo, Boolean)
  fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
    name: ValidateLicenseInfo
    nameWithType: ILicenseManager.ValidateLicenseInfo
    fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    nameWithType: LicenseInfo
    fullName: SuperOffice.License.LicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
    name: ValidateLicenseInfo
    nameWithType: ILicenseManager.ValidateLicenseInfo
    fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    nameWithType: LicenseInfo
    fullName: SuperOffice.License.LicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.ToInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ToInfo
  isExternal: true
  name: ToInfo
  nameWithType: LicenseManager.ToInfo
  fullName: SuperOffice.License.LicenseManager.ToInfo
- uid: SuperOffice.License.ModuleLicense
  isExternal: true
  name: ModuleLicense
  nameWithType: ModuleLicense
  fullName: SuperOffice.License.ModuleLicense
- uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: ValidateLicenseInfo(ExtendedLicenseInfo)
  nameWithType: ILicenseManager.ValidateLicenseInfo(ExtendedLicenseInfo)
  fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
    name: ValidateLicenseInfo
    nameWithType: ILicenseManager.ValidateLicenseInfo
    fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
    name: ValidateLicenseInfo
    nameWithType: ILicenseManager.ValidateLicenseInfo
    fullName: SuperOffice.License.ILicenseManager.ValidateLicenseInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync
  isExternal: true
  name: ActivateLicenseInfoAsync
  nameWithType: LicenseManager.ActivateLicenseInfoAsync
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfoAsync
- uid: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  nameWithType: ILicenseManager.ActivateLicenseInfoAsync(ExtendedLicenseInfo, Boolean, Boolean, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo, System.Boolean, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
    name: ActivateLicenseInfoAsync
    nameWithType: ILicenseManager.ActivateLicenseInfoAsync
    fullName: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)
    name: ActivateLicenseInfoAsync
    nameWithType: ILicenseManager.ActivateLicenseInfoAsync
    fullName: SuperOffice.License.ILicenseManager.ActivateLicenseInfoAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    nameWithType: ExtendedLicenseInfo
    fullName: SuperOffice.License.ExtendedLicenseInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync
  isExternal: true
  name: GetLicenseStateFromLicenseServerAsync
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServerAsync
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServerAsync
- uid: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  nameWithType: ILicenseManager.GetLicenseStateFromLicenseServerAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseStateFromLicenseServerAsync
    nameWithType: ILicenseManager.GetLicenseStateFromLicenseServerAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetLicenseStateFromLicenseServerAsync
    nameWithType: ILicenseManager.GetLicenseStateFromLicenseServerAsync
    fullName: SuperOffice.License.ILicenseManager.GetLicenseStateFromLicenseServerAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.CheckLicenseStatusResult}'
  definition: System.Threading.Tasks.Task`1
  name: Task<CheckLicenseStatusResult>
  nameWithType: Task<CheckLicenseStatusResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.CheckLicenseStatusResult>
  nameWithType.vb: Task(Of CheckLicenseStatusResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.CheckLicenseStatusResult)
  name.vb: Task(Of CheckLicenseStatusResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.CheckLicenseStatusResult
    name: CheckLicenseStatusResult
    nameWithType: CheckLicenseStatusResult
    fullName: SuperOffice.License.CheckLicenseStatusResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.CheckLicenseStatusResult
    name: CheckLicenseStatusResult
    nameWithType: CheckLicenseStatusResult
    fullName: SuperOffice.License.CheckLicenseStatusResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.ChangeSerialNumberAsync
  isExternal: true
  name: ChangeSerialNumberAsync
  nameWithType: LicenseManager.ChangeSerialNumberAsync
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumberAsync
- uid: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: ChangeSerialNumberAsync(String, String, CancellationToken)
  nameWithType: ILicenseManager.ChangeSerialNumberAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
    name: ChangeSerialNumberAsync
    nameWithType: ILicenseManager.ChangeSerialNumberAsync
    fullName: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync(System.String,System.String,System.Threading.CancellationToken)
    name: ChangeSerialNumberAsync
    nameWithType: ILicenseManager.ChangeSerialNumberAsync
    fullName: SuperOffice.License.ILicenseManager.ChangeSerialNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetShopUrlAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetShopUrlAsync
  isExternal: true
  name: GetShopUrlAsync
  nameWithType: LicenseManager.GetShopUrlAsync
  fullName: SuperOffice.License.LicenseManager.GetShopUrlAsync
- uid: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetShopUrlAsync(String, String, CancellationToken)
  nameWithType: ILicenseManager.GetShopUrlAsync(String, String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetShopUrlAsync
    nameWithType: ILicenseManager.GetShopUrlAsync
    fullName: SuperOffice.License.ILicenseManager.GetShopUrlAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetShopUrlAsync(System.String,System.String,System.Threading.CancellationToken)
    name: GetShopUrlAsync
    nameWithType: ILicenseManager.GetShopUrlAsync
    fullName: SuperOffice.License.ILicenseManager.GetShopUrlAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync
  isExternal: true
  name: RemoveLicenseFromDBAsync
  nameWithType: LicenseManager.RemoveLicenseFromDBAsync
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDBAsync
- uid: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: RemoveLicenseFromDBAsync(String, CancellationToken)
  nameWithType: ILicenseManager.RemoveLicenseFromDBAsync(String, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: RemoveLicenseFromDBAsync
    nameWithType: ILicenseManager.RemoveLicenseFromDBAsync
    fullName: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync(System.String,System.Threading.CancellationToken)
    name: RemoveLicenseFromDBAsync
    nameWithType: ILicenseManager.RemoveLicenseFromDBAsync
    fullName: SuperOffice.License.ILicenseManager.RemoveLicenseFromDBAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  commentId: Overload:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses
  isExternal: true
  name: GetGrantedModuleLicenses
  nameWithType: LicenseManager.GetGrantedModuleLicenses
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses
- uid: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  commentId: M:SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetGrantedModuleLicenses(Int32)
  nameWithType: ILicenseManager.GetGrantedModuleLicenses(Int32)
  fullName: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
    name: GetGrantedModuleLicenses
    nameWithType: ILicenseManager.GetGrantedModuleLicenses
    fullName: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses(System.Int32)
    name: GetGrantedModuleLicenses
    nameWithType: ILicenseManager.GetGrantedModuleLicenses
    fullName: SuperOffice.License.ILicenseManager.GetGrantedModuleLicenses
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Services.GrantedModuleLicense[]
  isExternal: true
  name: GrantedModuleLicense[]
  nameWithType: GrantedModuleLicense[]
  fullName: SuperOffice.CRM.Services.GrantedModuleLicense[]
  nameWithType.vb: GrantedModuleLicense()
  fullName.vb: SuperOffice.CRM.Services.GrantedModuleLicense()
  name.vb: GrantedModuleLicense()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.GrantedModuleLicense
    name: GrantedModuleLicense
    nameWithType: GrantedModuleLicense
    fullName: SuperOffice.CRM.Services.GrantedModuleLicense
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Services.GrantedModuleLicense
    name: GrantedModuleLicense
    nameWithType: GrantedModuleLicense
    fullName: SuperOffice.CRM.Services.GrantedModuleLicense
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync
  isExternal: true
  name: GetSatelliteLicensesAsync
  nameWithType: LicenseManager.GetSatelliteLicensesAsync
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicensesAsync
- uid: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetSatelliteLicensesAsync(Int32, Boolean, CancellationToken)
  nameWithType: ILicenseManager.GetSatelliteLicensesAsync(Int32, Boolean, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: GetSatelliteLicensesAsync
    nameWithType: ILicenseManager.GetSatelliteLicensesAsync
    fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: GetSatelliteLicensesAsync
    nameWithType: ILicenseManager.GetSatelliteLicensesAsync
    fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicensesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{SuperOffice.License.SatelliteModuleLicenseOwner[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.SatelliteModuleLicenseOwner[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SatelliteModuleLicenseOwner[]>
  nameWithType: Task<SatelliteModuleLicenseOwner[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.SatelliteModuleLicenseOwner[]>
  nameWithType.vb: Task(Of SatelliteModuleLicenseOwner())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.SatelliteModuleLicenseOwner())
  name.vb: Task(Of SatelliteModuleLicenseOwner())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.SatelliteModuleLicenseOwner
    name: SatelliteModuleLicenseOwner
    nameWithType: SatelliteModuleLicenseOwner
    fullName: SuperOffice.License.SatelliteModuleLicenseOwner
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.SatelliteModuleLicenseOwner
    name: SatelliteModuleLicenseOwner
    nameWithType: SatelliteModuleLicenseOwner
    fullName: SuperOffice.License.SatelliteModuleLicenseOwner
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync
  isExternal: true
  name: GetSatelliteLicenseUsageCountAsync
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCountAsync
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCountAsync
- uid: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetSatelliteLicenseUsageCountAsync(Int32[], CancellationToken)
  nameWithType: ILicenseManager.GetSatelliteLicenseUsageCountAsync(Int32[], CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[], System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetSatelliteLicenseUsageCountAsync(Int32(), CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: GetSatelliteLicenseUsageCountAsync(Int32(), CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
    name: GetSatelliteLicenseUsageCountAsync
    nameWithType: ILicenseManager.GetSatelliteLicenseUsageCountAsync
    fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync(System.Int32[],System.Threading.CancellationToken)
    name: GetSatelliteLicenseUsageCountAsync
    nameWithType: ILicenseManager.GetSatelliteLicenseUsageCountAsync
    fullName: SuperOffice.License.ILicenseManager.GetSatelliteLicenseUsageCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.Int32,System.Int32}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<Int32, Int32>>
  nameWithType: Task<Dictionary<Int32, Int32>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Int32, System.Int32>>
  nameWithType.vb: Task(Of Dictionary(Of Int32, Int32))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of System.Int32, System.Int32))
  name.vb: Task(Of Dictionary(Of Int32, Int32))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetUserLicensesAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetUserLicensesAsync
  isExternal: true
  name: GetUserLicensesAsync
  nameWithType: LicenseManager.GetUserLicensesAsync
  fullName: SuperOffice.License.LicenseManager.GetUserLicensesAsync
- uid: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetUserLicensesAsync(Int32, UserType, CancellationToken)
  nameWithType: ILicenseManager.GetUserLicensesAsync(Int32, UserType, CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32, SuperOffice.License.UserType, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
    name: GetUserLicensesAsync
    nameWithType: ILicenseManager.GetUserLicensesAsync
    fullName: SuperOffice.License.ILicenseManager.GetUserLicensesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetUserLicensesAsync(System.Int32,SuperOffice.License.UserType,System.Threading.CancellationToken)
    name: GetUserLicensesAsync
    nameWithType: ILicenseManager.GetUserLicensesAsync
    fullName: SuperOffice.License.ILicenseManager.GetUserLicensesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: System.Threading.Tasks.Task{SuperOffice.License.AssociateModuleLicenseOwner[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.License.AssociateModuleLicenseOwner[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<AssociateModuleLicenseOwner[]>
  nameWithType: Task<AssociateModuleLicenseOwner[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.License.AssociateModuleLicenseOwner[]>
  nameWithType.vb: Task(Of AssociateModuleLicenseOwner())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.License.AssociateModuleLicenseOwner())
  name.vb: Task(Of AssociateModuleLicenseOwner())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.License.AssociateModuleLicenseOwner
    name: AssociateModuleLicenseOwner
    nameWithType: AssociateModuleLicenseOwner
    fullName: SuperOffice.License.AssociateModuleLicenseOwner
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.License.AssociateModuleLicenseOwner
    name: AssociateModuleLicenseOwner
    nameWithType: AssociateModuleLicenseOwner
    fullName: SuperOffice.License.AssociateModuleLicenseOwner
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync
  isExternal: true
  name: GetAssociateLicenseUsageCountAsync
  nameWithType: LicenseManager.GetAssociateLicenseUsageCountAsync
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCountAsync
- uid: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: GetAssociateLicenseUsageCountAsync(AssociateType, Int32[], CancellationToken)
  nameWithType: ILicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, Int32[], CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, System.Int32[], System.Threading.CancellationToken)
  nameWithType.vb: ILicenseManager.GetAssociateLicenseUsageCountAsync(AssociateType, Int32(), CancellationToken)
  fullName.vb: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType, System.Int32(), System.Threading.CancellationToken)
  name.vb: GetAssociateLicenseUsageCountAsync(AssociateType, Int32(), CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
    name: GetAssociateLicenseUsageCountAsync
    nameWithType: ILicenseManager.GetAssociateLicenseUsageCountAsync
    fullName: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.AssociateType
    name: AssociateType
    nameWithType: AssociateType
    fullName: SuperOffice.Data.AssociateType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync(SuperOffice.Data.AssociateType,System.Int32[],System.Threading.CancellationToken)
    name: GetAssociateLicenseUsageCountAsync
    nameWithType: ILicenseManager.GetAssociateLicenseUsageCountAsync
    fullName: SuperOffice.License.ILicenseManager.GetAssociateLicenseUsageCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.AssociateType
    name: AssociateType
    nameWithType: AssociateType
    fullName: SuperOffice.Data.AssociateType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.AssociateType
  commentId: T:SuperOffice.Data.AssociateType
  parent: SuperOffice.Data
  isExternal: true
  name: AssociateType
  nameWithType: AssociateType
  fullName: SuperOffice.Data.AssociateType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.License.LicenseManager.LicenseExists*
  commentId: Overload:SuperOffice.License.LicenseManager.LicenseExists
  isExternal: true
  name: LicenseExists
  nameWithType: LicenseManager.LicenseExists
  fullName: SuperOffice.License.LicenseManager.LicenseExists
- uid: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  commentId: M:SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: LicenseExists(String)
  nameWithType: ILicenseManager.LicenseExists(String)
  fullName: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
    name: LicenseExists
    nameWithType: ILicenseManager.LicenseExists
    fullName: SuperOffice.License.ILicenseManager.LicenseExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.LicenseExists(System.String)
    name: LicenseExists
    nameWithType: ILicenseManager.LicenseExists
    fullName: SuperOffice.License.ILicenseManager.LicenseExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync*
  commentId: Overload:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync
  isExternal: true
  name: LoadNewLicenseFromServerIfNeededAsync
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeededAsync
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeededAsync
- uid: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  parent: SuperOffice.License.ILicenseManager
  isExternal: true
  name: LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  nameWithType: ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(CancellationToken)
  fullName: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
    name: LoadNewLicenseFromServerIfNeededAsync
    nameWithType: ILicenseManager.LoadNewLicenseFromServerIfNeededAsync
    fullName: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync(System.Threading.CancellationToken)
    name: LoadNewLicenseFromServerIfNeededAsync
    nameWithType: ILicenseManager.LoadNewLicenseFromServerIfNeededAsync
    fullName: SuperOffice.License.ILicenseManager.LoadNewLicenseFromServerIfNeededAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey*
  commentId: Overload:SuperOffice.License.LicenseManager.PopulateSignedPublicKey
  isExternal: true
  name: PopulateSignedPublicKey
  nameWithType: LicenseManager.PopulateSignedPublicKey
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey
- uid: System.IO.Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: SuperOffice.License.LicenseManager.IsUnitTesting*
  commentId: Overload:SuperOffice.License.LicenseManager.IsUnitTesting
  isExternal: true
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
