### YamlMime:ManagedReference
items:
- uid: SuperOffice.SoDatabaseContext
  commentId: T:SuperOffice.SoDatabaseContext
  id: SoDatabaseContext
  parent: SuperOffice
  children:
  - SuperOffice.SoDatabaseContext.CompareTo(SuperOffice.SoDatabaseContext)
  - SuperOffice.SoDatabaseContext.ContextIdentifier
  - SuperOffice.SoDatabaseContext.DefaultContextIdentifier
  - SuperOffice.SoDatabaseContext.DisconnectDatabase
  - SuperOffice.SoDatabaseContext.EnterDatabaseContext(System.String)
  - SuperOffice.SoDatabaseContext.GetAllContextIdentifiers
  - SuperOffice.SoDatabaseContext.GetCurrent
  - SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser
  - SuperOffice.SoDatabaseContext.GetDatabaseContext(System.String)
  - SuperOffice.SoDatabaseContext.HasDatabaseContext(System.String)
  - SuperOffice.SoDatabaseContext.OnAfterLogOut
  - SuperOffice.SoDatabaseContext.OnBeforeLogOut
  - SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.IdentityModel.Tokens.SecurityToken[])
  - SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String)
  - SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SoDatabaseContext
  nameWithType: SoDatabaseContext
  fullName: SuperOffice.SoDatabaseContext
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nContainer for the current database context/session\n"
  syntax:
    content: 'public class SoDatabaseContext : IComparable<SoDatabaseContext>'
    content.vb: >-
      Public Class SoDatabaseContext
          Implements IComparable(Of SoDatabaseContext)
  inheritance:
  - System.Object
  implements:
  - System.IComparable{SuperOffice.SoDatabaseContext}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.SoDatabaseContext.EnumUtil.MapEnums``2
  - SuperOffice.SoDatabaseContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.SoDatabaseContext.DefaultContextIdentifier
  commentId: F:SuperOffice.SoDatabaseContext.DefaultContextIdentifier
  id: DefaultContextIdentifier
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: DefaultContextIdentifier
  nameWithType: SoDatabaseContext.DefaultContextIdentifier
  fullName: SuperOffice.SoDatabaseContext.DefaultContextIdentifier
  type: Field
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  syntax:
    content: public const string DefaultContextIdentifier = "Default"
    return:
      type: System.String
    content.vb: Public Const DefaultContextIdentifier As String = "Default"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.SoDatabaseContext.GetAllContextIdentifiers
  commentId: M:SuperOffice.SoDatabaseContext.GetAllContextIdentifiers
  id: GetAllContextIdentifiers
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: GetAllContextIdentifiers()
  nameWithType: SoDatabaseContext.GetAllContextIdentifiers()
  fullName: SuperOffice.SoDatabaseContext.GetAllContextIdentifiers()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nGet a list of all the context identifiers (customers) that is handled by this process\n"
  syntax:
    content: public static string[] GetAllContextIdentifiers()
    return:
      type: System.String[]
      description: List of all context identifiers handled by this process.
    content.vb: Public Shared Function GetAllContextIdentifiers As String()
  overload: SuperOffice.SoDatabaseContext.GetAllContextIdentifiers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoDatabaseContext.GetDatabaseContext(System.String)
  commentId: M:SuperOffice.SoDatabaseContext.GetDatabaseContext(System.String)
  id: GetDatabaseContext(System.String)
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: GetDatabaseContext(String)
  nameWithType: SoDatabaseContext.GetDatabaseContext(String)
  fullName: SuperOffice.SoDatabaseContext.GetDatabaseContext(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nGet the actual context from a context identifier.\n"
  syntax:
    content: public static SoDatabaseContext GetDatabaseContext(string contextIdentifier)
    parameters:
    - id: contextIdentifier
      type: System.String
      description: Identifier of the dartabase context
    return:
      type: SuperOffice.SoDatabaseContext
      description: Database context
    content.vb: Public Shared Function GetDatabaseContext(contextIdentifier As String) As SoDatabaseContext
  overload: SuperOffice.SoDatabaseContext.GetDatabaseContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoDatabaseContext.GetCurrent
  commentId: M:SuperOffice.SoDatabaseContext.GetCurrent
  id: GetCurrent
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: SoDatabaseContext.GetCurrent()
  fullName: SuperOffice.SoDatabaseContext.GetCurrent()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nGet the current database context.  \n"
  syntax:
    content: public static SoDatabaseContext GetCurrent()
    return:
      type: SuperOffice.SoDatabaseContext
      description: "\nThe current database context.  Impersonated users will yield the context of the user \nimpersonating - so it is not possible to impersonate a user in a different database.\n"
    content.vb: Public Shared Function GetCurrent As SoDatabaseContext
  overload: SuperOffice.SoDatabaseContext.GetCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoDatabaseContext.HasDatabaseContext(System.String)
  commentId: M:SuperOffice.SoDatabaseContext.HasDatabaseContext(System.String)
  id: HasDatabaseContext(System.String)
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: HasDatabaseContext(String)
  nameWithType: SoDatabaseContext.HasDatabaseContext(String)
  fullName: SuperOffice.SoDatabaseContext.HasDatabaseContext(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nCheck if a particular Database Context is known for NetServer.\n"
  syntax:
    content: public static bool HasDatabaseContext(string contextIdentifier)
    parameters:
    - id: contextIdentifier
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasDatabaseContext(contextIdentifier As String) As Boolean
  overload: SuperOffice.SoDatabaseContext.HasDatabaseContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser
  commentId: M:SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser
  id: GetCurrentIgnoreUser
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: GetCurrentIgnoreUser()
  nameWithType: SoDatabaseContext.GetCurrentIgnoreUser()
  fullName: SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nGet current database context ignoring whomever logged in.\n"
  remarks: Used during the authentication process
  syntax:
    content: public static SoDatabaseContext GetCurrentIgnoreUser()
    return:
      type: SuperOffice.SoDatabaseContext
      description: The current database context.
    content.vb: Public Shared Function GetCurrentIgnoreUser As SoDatabaseContext
  overload: SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoDatabaseContext.DisconnectDatabase
  commentId: M:SuperOffice.SoDatabaseContext.DisconnectDatabase
  id: DisconnectDatabase
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: DisconnectDatabase()
  nameWithType: SoDatabaseContext.DisconnectDatabase()
  fullName: SuperOffice.SoDatabaseContext.DisconnectDatabase()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nDissconect from the database (formerly referred to as the database logout process)\n"
  syntax:
    content: public void DisconnectDatabase()
    content.vb: Public Sub DisconnectDatabase
  overload: SuperOffice.SoDatabaseContext.DisconnectDatabase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String,System.String)
  commentId: M:SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String,System.String)
  id: TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String,System.String)
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: TryResolveContext(out IContextResolverPlugin, out String, String, String)
  nameWithType: SoDatabaseContext.TryResolveContext(out IContextResolverPlugin, out String, String, String)
  fullName: SuperOffice.SoDatabaseContext.TryResolveContext(out SuperOffice.Security.Principal.IContextResolverPlugin, out System.String, System.String, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nTry to resolve context from username and password\n"
  syntax:
    content: public static bool TryResolveContext(out IContextResolverPlugin contextResolver, out string context, string userName, string password)
    parameters:
    - id: contextResolver
      type: SuperOffice.Security.Principal.IContextResolverPlugin
      description: Instance of plugin resolving context
    - id: context
      type: System.String
      description: Name of context
    - id: userName
      type: System.String
      description: User name to resolve context from
    - id: password
      type: System.String
      description: Password of the user to resolve context from
    return:
      type: System.Boolean
      description: True if context is resolved
    content.vb: Public Shared Function TryResolveContext(ByRef contextResolver As IContextResolverPlugin, ByRef context As String, userName As String, password As String) As Boolean
  overload: SuperOffice.SoDatabaseContext.TryResolveContext*
  nameWithType.vb: SoDatabaseContext.TryResolveContext(ByRef IContextResolverPlugin, ByRef String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.SoDatabaseContext.TryResolveContext(ByRef SuperOffice.Security.Principal.IContextResolverPlugin, ByRef System.String, System.String, System.String)
  name.vb: TryResolveContext(ByRef IContextResolverPlugin, ByRef String, String, String)
- uid: SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String)
  commentId: M:SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String)
  id: TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.String)
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: TryResolveContext(out IContextResolverPlugin, out String, String)
  nameWithType: SoDatabaseContext.TryResolveContext(out IContextResolverPlugin, out String, String)
  fullName: SuperOffice.SoDatabaseContext.TryResolveContext(out SuperOffice.Security.Principal.IContextResolverPlugin, out System.String, System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nTry to resolve context from a ticket\n"
  syntax:
    content: public static bool TryResolveContext(out IContextResolverPlugin contextResolver, out string context, string ticket)
    parameters:
    - id: contextResolver
      type: SuperOffice.Security.Principal.IContextResolverPlugin
      description: Instance of plugin resolving context
    - id: context
      type: System.String
      description: Name of context
    - id: ticket
      type: System.String
      description: Ticket to resolve context from
    return:
      type: System.Boolean
      description: True if context is resolved
    content.vb: Public Shared Function TryResolveContext(ByRef contextResolver As IContextResolverPlugin, ByRef context As String, ticket As String) As Boolean
  overload: SuperOffice.SoDatabaseContext.TryResolveContext*
  nameWithType.vb: SoDatabaseContext.TryResolveContext(ByRef IContextResolverPlugin, ByRef String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.SoDatabaseContext.TryResolveContext(ByRef SuperOffice.Security.Principal.IContextResolverPlugin, ByRef System.String, System.String)
  name.vb: TryResolveContext(ByRef IContextResolverPlugin, ByRef String, String)
- uid: SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.IdentityModel.Tokens.SecurityToken[])
  commentId: M:SuperOffice.SoDatabaseContext.TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.IdentityModel.Tokens.SecurityToken[])
  id: TryResolveContext(SuperOffice.Security.Principal.IContextResolverPlugin@,System.String@,System.IdentityModel.Tokens.SecurityToken[])
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: TryResolveContext(out IContextResolverPlugin, out String, SecurityToken[])
  nameWithType: SoDatabaseContext.TryResolveContext(out IContextResolverPlugin, out String, SecurityToken[])
  fullName: SuperOffice.SoDatabaseContext.TryResolveContext(out SuperOffice.Security.Principal.IContextResolverPlugin, out System.String, System.IdentityModel.Tokens.SecurityToken[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nTry to resolve context from a set of SecurityTokens\n"
  syntax:
    content: public static bool TryResolveContext(out IContextResolverPlugin contextResolver, out string context, params SecurityToken[] tokens)
    parameters:
    - id: contextResolver
      type: SuperOffice.Security.Principal.IContextResolverPlugin
      description: Instance of plugin resolving context
    - id: context
      type: System.String
      description: Name of context
    - id: tokens
      type: System.IdentityModel.Tokens.SecurityToken[]
      description: Tokens used to resolve context
    return:
      type: System.Boolean
      description: True if context is resolved
    content.vb: Public Shared Function TryResolveContext(ByRef contextResolver As IContextResolverPlugin, ByRef context As String, ParamArray tokens As SecurityToken()) As Boolean
  overload: SuperOffice.SoDatabaseContext.TryResolveContext*
  nameWithType.vb: SoDatabaseContext.TryResolveContext(ByRef IContextResolverPlugin, ByRef String, SecurityToken())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.SoDatabaseContext.TryResolveContext(ByRef SuperOffice.Security.Principal.IContextResolverPlugin, ByRef System.String, System.IdentityModel.Tokens.SecurityToken())
  name.vb: TryResolveContext(ByRef IContextResolverPlugin, ByRef String, SecurityToken())
- uid: SuperOffice.SoDatabaseContext.EnterDatabaseContext(System.String)
  commentId: M:SuperOffice.SoDatabaseContext.EnterDatabaseContext(System.String)
  id: EnterDatabaseContext(System.String)
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: EnterDatabaseContext(String)
  nameWithType: SoDatabaseContext.EnterDatabaseContext(String)
  fullName: SuperOffice.SoDatabaseContext.EnterDatabaseContext(System.String)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nExplicitly enter a particular database context, before performing operations on this database.\n"
  syntax:
    content: public static SoDatabaseContext.DatabaseContext EnterDatabaseContext(string contextIdentifier)
    parameters:
    - id: contextIdentifier
      type: System.String
      description: Identifier of the context.
    return:
      type: SuperOffice.SoDatabaseContext.DatabaseContext
      description: Disposable object leaving the database context on Dispose()
    content.vb: Public Shared Function EnterDatabaseContext(contextIdentifier As String) As SoDatabaseContext.DatabaseContext
  overload: SuperOffice.SoDatabaseContext.EnterDatabaseContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.SoDatabaseContext.CompareTo(SuperOffice.SoDatabaseContext)
  commentId: M:SuperOffice.SoDatabaseContext.CompareTo(SuperOffice.SoDatabaseContext)
  id: CompareTo(SuperOffice.SoDatabaseContext)
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: CompareTo(SoDatabaseContext)
  nameWithType: SoDatabaseContext.CompareTo(SoDatabaseContext)
  fullName: SuperOffice.SoDatabaseContext.CompareTo(SuperOffice.SoDatabaseContext)
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  syntax:
    content: public int CompareTo(SoDatabaseContext other)
    parameters:
    - id: other
      type: SuperOffice.SoDatabaseContext
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As SoDatabaseContext) As Integer
  overload: SuperOffice.SoDatabaseContext.CompareTo*
  implements:
  - System.IComparable{SuperOffice.SoDatabaseContext}.CompareTo(SuperOffice.SoDatabaseContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.SoDatabaseContext.ContextIdentifier
  commentId: P:SuperOffice.SoDatabaseContext.ContextIdentifier
  id: ContextIdentifier
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: ContextIdentifier
  nameWithType: SoDatabaseContext.ContextIdentifier
  fullName: SuperOffice.SoDatabaseContext.ContextIdentifier
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nGet the indentifer of the context (unique string for this context)\n"
  syntax:
    content: public string ContextIdentifier { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ContextIdentifier As String
  overload: SuperOffice.SoDatabaseContext.ContextIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.SoDatabaseContext.OnBeforeLogOut
  commentId: E:SuperOffice.SoDatabaseContext.OnBeforeLogOut
  id: OnBeforeLogOut
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: OnBeforeLogOut
  nameWithType: SoDatabaseContext.OnBeforeLogOut
  fullName: SuperOffice.SoDatabaseContext.OnBeforeLogOut
  type: Event
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nEvent raised in the start of the database logout/dissconect process\n"
  syntax:
    content: public event SoDatabaseLogOut OnBeforeLogOut
    return:
      type: SuperOffice.SoDatabaseLogOut
    content.vb: Public Event OnBeforeLogOut As SoDatabaseLogOut
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.SoDatabaseContext.OnAfterLogOut
  commentId: E:SuperOffice.SoDatabaseContext.OnAfterLogOut
  id: OnAfterLogOut
  parent: SuperOffice.SoDatabaseContext
  langs:
  - csharp
  - vb
  name: OnAfterLogOut
  nameWithType: SoDatabaseContext.OnAfterLogOut
  fullName: SuperOffice.SoDatabaseContext.OnAfterLogOut
  type: Event
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: "\nEvent raised after the database has been logged out/dissconected from.\n"
  syntax:
    content: public event SoDatabaseLogOut OnAfterLogOut
    return:
      type: SuperOffice.SoDatabaseLogOut
    content.vb: Public Event OnAfterLogOut As SoDatabaseLogOut
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice
  commentId: N:SuperOffice
  isExternal: true
  name: SuperOffice
  nameWithType: SuperOffice
  fullName: SuperOffice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable{SuperOffice.SoDatabaseContext}
  commentId: T:System.IComparable{SuperOffice.SoDatabaseContext}
  parent: System
  definition: System.IComparable`1
  name: IComparable<SoDatabaseContext>
  nameWithType: IComparable<SoDatabaseContext>
  fullName: System.IComparable<SuperOffice.SoDatabaseContext>
  nameWithType.vb: IComparable(Of SoDatabaseContext)
  fullName.vb: System.IComparable(Of SuperOffice.SoDatabaseContext)
  name.vb: IComparable(Of SoDatabaseContext)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.SoDatabaseContext
    name: SoDatabaseContext
    nameWithType: SoDatabaseContext
    fullName: SuperOffice.SoDatabaseContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.SoDatabaseContext
    name: SoDatabaseContext
    nameWithType: SoDatabaseContext
    fullName: SuperOffice.SoDatabaseContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.SoDatabaseContext.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoDatabaseContext, To>()
  nameWithType: EnumUtil.MapEnums<SoDatabaseContext, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.SoDatabaseContext, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoDatabaseContext, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.SoDatabaseContext, To)()
  name.vb: MapEnums(Of SoDatabaseContext, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoDatabaseContext, To>
    nameWithType: EnumUtil.MapEnums<SoDatabaseContext, To>
    fullName: EnumUtil.MapEnums<SuperOffice.SoDatabaseContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoDatabaseContext, To)
    nameWithType: EnumUtil.MapEnums(Of SoDatabaseContext, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.SoDatabaseContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.SoDatabaseContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoDatabaseContext, To>()
  nameWithType: Converters.MapEnums<SoDatabaseContext, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.SoDatabaseContext, To>()
  nameWithType.vb: Converters.MapEnums(Of SoDatabaseContext, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.SoDatabaseContext, To)()
  name.vb: MapEnums(Of SoDatabaseContext, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoDatabaseContext, To>
    nameWithType: Converters.MapEnums<SoDatabaseContext, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.SoDatabaseContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoDatabaseContext, To)
    nameWithType: Converters.MapEnums(Of SoDatabaseContext, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.SoDatabaseContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.SoDatabaseContext.GetAllContextIdentifiers*
  commentId: Overload:SuperOffice.SoDatabaseContext.GetAllContextIdentifiers
  isExternal: true
  name: GetAllContextIdentifiers
  nameWithType: SoDatabaseContext.GetAllContextIdentifiers
  fullName: SuperOffice.SoDatabaseContext.GetAllContextIdentifiers
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.SoDatabaseContext.GetDatabaseContext*
  commentId: Overload:SuperOffice.SoDatabaseContext.GetDatabaseContext
  isExternal: true
  name: GetDatabaseContext
  nameWithType: SoDatabaseContext.GetDatabaseContext
  fullName: SuperOffice.SoDatabaseContext.GetDatabaseContext
- uid: SuperOffice.SoDatabaseContext
  commentId: T:SuperOffice.SoDatabaseContext
  parent: SuperOffice
  isExternal: true
  name: SoDatabaseContext
  nameWithType: SoDatabaseContext
  fullName: SuperOffice.SoDatabaseContext
- uid: SuperOffice.SoDatabaseContext.GetCurrent*
  commentId: Overload:SuperOffice.SoDatabaseContext.GetCurrent
  isExternal: true
  name: GetCurrent
  nameWithType: SoDatabaseContext.GetCurrent
  fullName: SuperOffice.SoDatabaseContext.GetCurrent
- uid: SuperOffice.SoDatabaseContext.HasDatabaseContext*
  commentId: Overload:SuperOffice.SoDatabaseContext.HasDatabaseContext
  isExternal: true
  name: HasDatabaseContext
  nameWithType: SoDatabaseContext.HasDatabaseContext
  fullName: SuperOffice.SoDatabaseContext.HasDatabaseContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser*
  commentId: Overload:SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser
  isExternal: true
  name: GetCurrentIgnoreUser
  nameWithType: SoDatabaseContext.GetCurrentIgnoreUser
  fullName: SuperOffice.SoDatabaseContext.GetCurrentIgnoreUser
- uid: SuperOffice.SoDatabaseContext.DisconnectDatabase*
  commentId: Overload:SuperOffice.SoDatabaseContext.DisconnectDatabase
  isExternal: true
  name: DisconnectDatabase
  nameWithType: SoDatabaseContext.DisconnectDatabase
  fullName: SuperOffice.SoDatabaseContext.DisconnectDatabase
- uid: SuperOffice.SoDatabaseContext.TryResolveContext*
  commentId: Overload:SuperOffice.SoDatabaseContext.TryResolveContext
  isExternal: true
  name: TryResolveContext
  nameWithType: SoDatabaseContext.TryResolveContext
  fullName: SuperOffice.SoDatabaseContext.TryResolveContext
- uid: SuperOffice.Security.Principal.IContextResolverPlugin
  commentId: T:SuperOffice.Security.Principal.IContextResolverPlugin
  parent: SuperOffice.Security.Principal
  isExternal: true
  name: IContextResolverPlugin
  nameWithType: IContextResolverPlugin
  fullName: SuperOffice.Security.Principal.IContextResolverPlugin
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
- uid: System.IdentityModel.Tokens.SecurityToken[]
  isExternal: true
  name: SecurityToken[]
  nameWithType: SecurityToken[]
  fullName: System.IdentityModel.Tokens.SecurityToken[]
  nameWithType.vb: SecurityToken()
  fullName.vb: System.IdentityModel.Tokens.SecurityToken()
  name.vb: SecurityToken()
  spec.csharp:
  - uid: System.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: System.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: System.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.SoDatabaseContext.EnterDatabaseContext*
  commentId: Overload:SuperOffice.SoDatabaseContext.EnterDatabaseContext
  isExternal: true
  name: EnterDatabaseContext
  nameWithType: SoDatabaseContext.EnterDatabaseContext
  fullName: SuperOffice.SoDatabaseContext.EnterDatabaseContext
- uid: SuperOffice.SoDatabaseContext.DatabaseContext
  commentId: T:SuperOffice.SoDatabaseContext.DatabaseContext
  parent: SuperOffice
  isExternal: true
  name: SoDatabaseContext.DatabaseContext
  nameWithType: SoDatabaseContext.DatabaseContext
  fullName: SuperOffice.SoDatabaseContext.DatabaseContext
- uid: SuperOffice.SoDatabaseContext.CompareTo*
  commentId: Overload:SuperOffice.SoDatabaseContext.CompareTo
  isExternal: true
  name: CompareTo
  nameWithType: SoDatabaseContext.CompareTo
  fullName: SuperOffice.SoDatabaseContext.CompareTo
- uid: System.IComparable{SuperOffice.SoDatabaseContext}.CompareTo(SuperOffice.SoDatabaseContext)
  commentId: M:System.IComparable{SuperOffice.SoDatabaseContext}.CompareTo(SuperOffice.SoDatabaseContext)
  parent: System.IComparable{SuperOffice.SoDatabaseContext}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(SoDatabaseContext)
  nameWithType: IComparable<SoDatabaseContext>.CompareTo(SoDatabaseContext)
  fullName: System.IComparable<SuperOffice.SoDatabaseContext>.CompareTo(SuperOffice.SoDatabaseContext)
  nameWithType.vb: IComparable(Of SoDatabaseContext).CompareTo(SoDatabaseContext)
  fullName.vb: System.IComparable(Of SuperOffice.SoDatabaseContext).CompareTo(SuperOffice.SoDatabaseContext)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<SoDatabaseContext>.CompareTo
    fullName: System.IComparable<SuperOffice.SoDatabaseContext>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.SoDatabaseContext
    name: SoDatabaseContext
    nameWithType: SoDatabaseContext
    fullName: SuperOffice.SoDatabaseContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of SoDatabaseContext).CompareTo
    fullName: System.IComparable(Of SuperOffice.SoDatabaseContext).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.SoDatabaseContext
    name: SoDatabaseContext
    nameWithType: SoDatabaseContext
    fullName: SuperOffice.SoDatabaseContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.SoDatabaseContext.ContextIdentifier*
  commentId: Overload:SuperOffice.SoDatabaseContext.ContextIdentifier
  isExternal: true
  name: ContextIdentifier
  nameWithType: SoDatabaseContext.ContextIdentifier
  fullName: SuperOffice.SoDatabaseContext.ContextIdentifier
- uid: SuperOffice.SoDatabaseLogOut
  commentId: T:SuperOffice.SoDatabaseLogOut
  parent: SuperOffice
  isExternal: true
  name: SoDatabaseLogOut
  nameWithType: SoDatabaseLogOut
  fullName: SuperOffice.SoDatabaseLogOut
