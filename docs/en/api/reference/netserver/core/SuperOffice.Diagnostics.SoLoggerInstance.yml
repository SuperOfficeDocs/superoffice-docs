### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.SoLoggerInstance
  commentId: T:SuperOffice.Diagnostics.SoLoggerInstance
  id: SoLoggerInstance
  parent: SuperOffice.Diagnostics
  children:
  - SuperOffice.Diagnostics.SoLoggerInstance.#ctor
  - SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Exception)
  - SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Type,System.String,System.String)
  - SuperOffice.Diagnostics.SoLoggerInstance.LogInformation(System.Type,System.String,System.String,System.Boolean)
  - SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Exception)
  - SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Type,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SoLoggerInstance
  nameWithType: SoLoggerInstance
  fullName: SuperOffice.Diagnostics.SoLoggerInstance
  type: Class
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  summary: "\nDefault implementation of <xref href=\"SuperOffice.Diagnostics.ILogger\" data-throw-if-not-resolved=\"false\"></xref>. This implementation forwards all\ninvocations directly to corresponding methods on <xref href=\"SuperOffice.Diagnostics.SoLogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: >-
      [SoInject]

      public class SoLoggerInstance : ILogger
    content.vb: >-
      <SoInject>

      Public Class SoLoggerInstance
          Implements ILogger
  inheritance:
  - System.Object
  implements:
  - SuperOffice.Diagnostics.ILogger
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Diagnostics.SoLoggerInstance.EnumUtil.MapEnums``2
  - SuperOffice.Diagnostics.SoLoggerInstance.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Diagnostics.SoLoggerInstance)
  - SuperOffice.Diagnostics.SoLoggerInstance.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.Diagnostics.SoLoggerInstance.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogInformation(System.Type,System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.Diagnostics.SoLoggerInstance.LogInformation(System.Type,System.String,System.String,System.Boolean)
  id: LogInformation(System.Type,System.String,System.String,System.Boolean)
  parent: SuperOffice.Diagnostics.SoLoggerInstance
  langs:
  - csharp
  - vb
  name: LogInformation(Type, String, String, Boolean)
  nameWithType: SoLoggerInstance.LogInformation(Type, String, String, Boolean)
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogInformation(System.Type, System.String, System.String, System.Boolean)
  type: Method
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public void LogInformation(Type sourceType, string message, string details, bool lightLogOutput)
    parameters:
    - id: sourceType
      type: System.Type
    - id: message
      type: System.String
    - id: details
      type: System.String
    - id: lightLogOutput
      type: System.Boolean
    content.vb: Public Sub LogInformation(sourceType As Type, message As String, details As String, lightLogOutput As Boolean)
  overload: SuperOffice.Diagnostics.SoLoggerInstance.LogInformation*
  implements:
  - SuperOffice.Diagnostics.ILogger.LogInformation(System.Type,System.String,System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Type,System.String,System.String)
  commentId: M:SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Type,System.String,System.String)
  id: LogWarning(System.Type,System.String,System.String)
  parent: SuperOffice.Diagnostics.SoLoggerInstance
  langs:
  - csharp
  - vb
  name: LogWarning(Type, String, String)
  nameWithType: SoLoggerInstance.LogWarning(Type, String, String)
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Type, System.String, System.String)
  type: Method
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public void LogWarning(Type sourceType, string message, string details)
    parameters:
    - id: sourceType
      type: System.Type
    - id: message
      type: System.String
    - id: details
      type: System.String
    content.vb: Public Sub LogWarning(sourceType As Type, message As String, details As String)
  overload: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning*
  implements:
  - SuperOffice.Diagnostics.ILogger.LogWarning(System.Type,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Exception)
  commentId: M:SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Exception)
  id: LogWarning(System.Exception)
  parent: SuperOffice.Diagnostics.SoLoggerInstance
  langs:
  - csharp
  - vb
  name: LogWarning(Exception)
  nameWithType: SoLoggerInstance.LogWarning(Exception)
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning(System.Exception)
  type: Method
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public void LogWarning(Exception ex)
    parameters:
    - id: ex
      type: System.Exception
    content.vb: Public Sub LogWarning(ex As Exception)
  overload: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning*
  implements:
  - SuperOffice.Diagnostics.ILogger.LogWarning(System.Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Type,System.String,System.String)
  commentId: M:SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Type,System.String,System.String)
  id: LogError(System.Type,System.String,System.String)
  parent: SuperOffice.Diagnostics.SoLoggerInstance
  langs:
  - csharp
  - vb
  name: LogError(Type, String, String)
  nameWithType: SoLoggerInstance.LogError(Type, String, String)
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Type, System.String, System.String)
  type: Method
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public void LogError(Type sourceType, string message, string details)
    parameters:
    - id: sourceType
      type: System.Type
    - id: message
      type: System.String
    - id: details
      type: System.String
    content.vb: Public Sub LogError(sourceType As Type, message As String, details As String)
  overload: SuperOffice.Diagnostics.SoLoggerInstance.LogError*
  implements:
  - SuperOffice.Diagnostics.ILogger.LogError(System.Type,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Exception)
  commentId: M:SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Exception)
  id: LogError(System.Exception)
  parent: SuperOffice.Diagnostics.SoLoggerInstance
  langs:
  - csharp
  - vb
  name: LogError(Exception)
  nameWithType: SoLoggerInstance.LogError(Exception)
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogError(System.Exception)
  type: Method
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public void LogError(Exception ex)
    parameters:
    - id: ex
      type: System.Exception
    content.vb: Public Sub LogError(ex As Exception)
  overload: SuperOffice.Diagnostics.SoLoggerInstance.LogError*
  implements:
  - SuperOffice.Diagnostics.ILogger.LogError(System.Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Diagnostics.SoLoggerInstance.#ctor
  commentId: M:SuperOffice.Diagnostics.SoLoggerInstance.#ctor
  id: '#ctor'
  parent: SuperOffice.Diagnostics.SoLoggerInstance
  langs:
  - csharp
  - vb
  name: SoLoggerInstance()
  nameWithType: SoLoggerInstance.SoLoggerInstance()
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.SoLoggerInstance()
  type: Constructor
  source:
    path: SOCore
    isExternal: true
  assemblies:
  - SOCore
  namespace: SuperOffice.Diagnostics
  syntax:
    content: public SoLoggerInstance()
    content.vb: Public Sub New
  overload: SuperOffice.Diagnostics.SoLoggerInstance.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Diagnostics
  commentId: N:SuperOffice.Diagnostics
  isExternal: true
  name: SuperOffice.Diagnostics
  nameWithType: SuperOffice.Diagnostics
  fullName: SuperOffice.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Diagnostics.ILogger
  commentId: T:SuperOffice.Diagnostics.ILogger
  parent: SuperOffice.Diagnostics
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: SuperOffice.Diagnostics.ILogger
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLoggerInstance.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoLoggerInstance, To>()
  nameWithType: EnumUtil.MapEnums<SoLoggerInstance, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.SoLoggerInstance, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoLoggerInstance, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.SoLoggerInstance, To)()
  name.vb: MapEnums(Of SoLoggerInstance, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoLoggerInstance, To>
    nameWithType: EnumUtil.MapEnums<SoLoggerInstance, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Diagnostics.SoLoggerInstance, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoLoggerInstance, To)
    nameWithType: EnumUtil.MapEnums(Of SoLoggerInstance, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Diagnostics.SoLoggerInstance, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLoggerInstance.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.Diagnostics.SoLoggerInstance)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<SoLoggerInstance>(SoLoggerInstance)
  nameWithType: ObjectExtensions.AssignByReflection<SoLoggerInstance>(SoLoggerInstance)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Diagnostics.SoLoggerInstance>(SuperOffice.Diagnostics.SoLoggerInstance)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of SoLoggerInstance)(SoLoggerInstance)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Diagnostics.SoLoggerInstance)(SuperOffice.Diagnostics.SoLoggerInstance)
  name.vb: AssignByReflection(Of SoLoggerInstance)(SoLoggerInstance)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<SoLoggerInstance>
    nameWithType: ObjectExtensions.AssignByReflection<SoLoggerInstance>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.Diagnostics.SoLoggerInstance>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Diagnostics.SoLoggerInstance
    name: SoLoggerInstance
    nameWithType: SoLoggerInstance
    fullName: SuperOffice.Diagnostics.SoLoggerInstance
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of SoLoggerInstance)
    nameWithType: ObjectExtensions.AssignByReflection(Of SoLoggerInstance)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.Diagnostics.SoLoggerInstance)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Diagnostics.SoLoggerInstance
    name: SoLoggerInstance
    nameWithType: SoLoggerInstance
    fullName: SuperOffice.Diagnostics.SoLoggerInstance
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLoggerInstance.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<SoLoggerInstance>()
  nameWithType: ObjectExtensions.GraphCopy<SoLoggerInstance>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Diagnostics.SoLoggerInstance>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of SoLoggerInstance)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Diagnostics.SoLoggerInstance)()
  name.vb: GraphCopy(Of SoLoggerInstance)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<SoLoggerInstance>
    nameWithType: ObjectExtensions.GraphCopy<SoLoggerInstance>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.Diagnostics.SoLoggerInstance>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of SoLoggerInstance)
    nameWithType: ObjectExtensions.GraphCopy(Of SoLoggerInstance)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.Diagnostics.SoLoggerInstance)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLoggerInstance.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoLoggerInstance, To>()
  nameWithType: Converters.MapEnums<SoLoggerInstance, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.SoLoggerInstance, To>()
  nameWithType.vb: Converters.MapEnums(Of SoLoggerInstance, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.SoLoggerInstance, To)()
  name.vb: MapEnums(Of SoLoggerInstance, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoLoggerInstance, To>
    nameWithType: Converters.MapEnums<SoLoggerInstance, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Diagnostics.SoLoggerInstance, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoLoggerInstance, To)
    nameWithType: Converters.MapEnums(Of SoLoggerInstance, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Diagnostics.SoLoggerInstance, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogInformation*
  commentId: Overload:SuperOffice.Diagnostics.SoLoggerInstance.LogInformation
  isExternal: true
  name: LogInformation
  nameWithType: SoLoggerInstance.LogInformation
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogInformation
- uid: SuperOffice.Diagnostics.ILogger.LogInformation(System.Type,System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.Diagnostics.ILogger.LogInformation(System.Type,System.String,System.String,System.Boolean)
  parent: SuperOffice.Diagnostics.ILogger
  isExternal: true
  name: LogInformation(Type, String, String, Boolean)
  nameWithType: ILogger.LogInformation(Type, String, String, Boolean)
  fullName: SuperOffice.Diagnostics.ILogger.LogInformation(System.Type, System.String, System.String, System.Boolean)
  spec.csharp:
  - uid: SuperOffice.Diagnostics.ILogger.LogInformation(System.Type,System.String,System.String,System.Boolean)
    name: LogInformation
    nameWithType: ILogger.LogInformation
    fullName: SuperOffice.Diagnostics.ILogger.LogInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Diagnostics.ILogger.LogInformation(System.Type,System.String,System.String,System.Boolean)
    name: LogInformation
    nameWithType: ILogger.LogInformation
    fullName: SuperOffice.Diagnostics.ILogger.LogInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning*
  commentId: Overload:SuperOffice.Diagnostics.SoLoggerInstance.LogWarning
  isExternal: true
  name: LogWarning
  nameWithType: SoLoggerInstance.LogWarning
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogWarning
- uid: SuperOffice.Diagnostics.ILogger.LogWarning(System.Type,System.String,System.String)
  commentId: M:SuperOffice.Diagnostics.ILogger.LogWarning(System.Type,System.String,System.String)
  parent: SuperOffice.Diagnostics.ILogger
  isExternal: true
  name: LogWarning(Type, String, String)
  nameWithType: ILogger.LogWarning(Type, String, String)
  fullName: SuperOffice.Diagnostics.ILogger.LogWarning(System.Type, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.Diagnostics.ILogger.LogWarning(System.Type,System.String,System.String)
    name: LogWarning
    nameWithType: ILogger.LogWarning
    fullName: SuperOffice.Diagnostics.ILogger.LogWarning
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Diagnostics.ILogger.LogWarning(System.Type,System.String,System.String)
    name: LogWarning
    nameWithType: ILogger.LogWarning
    fullName: SuperOffice.Diagnostics.ILogger.LogWarning
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.ILogger.LogWarning(System.Exception)
  commentId: M:SuperOffice.Diagnostics.ILogger.LogWarning(System.Exception)
  parent: SuperOffice.Diagnostics.ILogger
  isExternal: true
  name: LogWarning(Exception)
  nameWithType: ILogger.LogWarning(Exception)
  fullName: SuperOffice.Diagnostics.ILogger.LogWarning(System.Exception)
  spec.csharp:
  - uid: SuperOffice.Diagnostics.ILogger.LogWarning(System.Exception)
    name: LogWarning
    nameWithType: ILogger.LogWarning
    fullName: SuperOffice.Diagnostics.ILogger.LogWarning
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Diagnostics.ILogger.LogWarning(System.Exception)
    name: LogWarning
    nameWithType: ILogger.LogWarning
    fullName: SuperOffice.Diagnostics.ILogger.LogWarning
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: SuperOffice.Diagnostics.SoLoggerInstance.LogError*
  commentId: Overload:SuperOffice.Diagnostics.SoLoggerInstance.LogError
  isExternal: true
  name: LogError
  nameWithType: SoLoggerInstance.LogError
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.LogError
- uid: SuperOffice.Diagnostics.ILogger.LogError(System.Type,System.String,System.String)
  commentId: M:SuperOffice.Diagnostics.ILogger.LogError(System.Type,System.String,System.String)
  parent: SuperOffice.Diagnostics.ILogger
  isExternal: true
  name: LogError(Type, String, String)
  nameWithType: ILogger.LogError(Type, String, String)
  fullName: SuperOffice.Diagnostics.ILogger.LogError(System.Type, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.Diagnostics.ILogger.LogError(System.Type,System.String,System.String)
    name: LogError
    nameWithType: ILogger.LogError
    fullName: SuperOffice.Diagnostics.ILogger.LogError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Diagnostics.ILogger.LogError(System.Type,System.String,System.String)
    name: LogError
    nameWithType: ILogger.LogError
    fullName: SuperOffice.Diagnostics.ILogger.LogError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.ILogger.LogError(System.Exception)
  commentId: M:SuperOffice.Diagnostics.ILogger.LogError(System.Exception)
  parent: SuperOffice.Diagnostics.ILogger
  isExternal: true
  name: LogError(Exception)
  nameWithType: ILogger.LogError(Exception)
  fullName: SuperOffice.Diagnostics.ILogger.LogError(System.Exception)
  spec.csharp:
  - uid: SuperOffice.Diagnostics.ILogger.LogError(System.Exception)
    name: LogError
    nameWithType: ILogger.LogError
    fullName: SuperOffice.Diagnostics.ILogger.LogError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Diagnostics.ILogger.LogError(System.Exception)
    name: LogError
    nameWithType: ILogger.LogError
    fullName: SuperOffice.Diagnostics.ILogger.LogError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SoLoggerInstance.#ctor*
  commentId: Overload:SuperOffice.Diagnostics.SoLoggerInstance.#ctor
  isExternal: true
  name: SoLoggerInstance
  nameWithType: SoLoggerInstance.SoLoggerInstance
  fullName: SuperOffice.Diagnostics.SoLoggerInstance.SoLoggerInstance
