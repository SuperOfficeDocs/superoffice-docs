### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Rows.TicketRows
  commentId: T:SuperOffice.CRM.Rows.TicketRows
  id: TicketRows
  parent: SuperOffice.CRM.Rows
  children:
  - SuperOffice.CRM.Rows.TicketRows.Add(SuperOffice.CRM.Rows.TicketRow)
  - SuperOffice.CRM.Rows.TicketRows.AddNew
  - SuperOffice.CRM.Rows.TicketRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow})
  - SuperOffice.CRM.Rows.TicketRows.CreateChild
  - SuperOffice.CRM.Rows.TicketRows.CreateNew
  - SuperOffice.CRM.Rows.TicketRows.Find(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  - SuperOffice.CRM.Rows.TicketRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  - SuperOffice.CRM.Rows.TicketRows.ForEach(System.Action{SuperOffice.CRM.Rows.TicketRow})
  - SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.TicketRows.CustomSearch,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync(System.DateTime,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync(SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync(System.Int32[],System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.TicketTableInfo,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TicketRows.Item(System.Int32)
  - SuperOffice.CRM.Rows.TicketRows.Remove(SuperOffice.CRM.Rows.TicketRow)
  - SuperOffice.CRM.Rows.TicketRows.ToArray
  - SuperOffice.CRM.Rows.TicketRows.ToString
  langs:
  - csharp
  - vb
  name: TicketRows
  nameWithType: TicketRows
  fullName: SuperOffice.CRM.Rows.TicketRows
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nThis table contains the tickets (requests) of the system. Its purpose should be evident.\nCollection of TicketRow. Each element of the collection represents one row in the Ticket\ntable. \n"
  remarks: "\nRow collections can be created in several ways. \n<ul><li>Use the static <xref href=\"SuperOffice.CRM.Rows.TicketRows.CreateNew\" data-throw-if-not-resolved=\"false\"></xref> method to create a new, empty collection. You can then add objects of type\n<xref href=\"SuperOffice.CRM.Rows.TicketRow\" data-throw-if-not-resolved=\"false\"></xref> to it, and use methods like <see cref=\"!:Save\"></see> to operate on the whole collection.</li><li>You can create a (nested) TicketRows <xref href=\"SuperOffice.CRM.Rows.TicketRows.CustomSearch\" data-throw-if-not-resolved=\"false\"></xref> object to obtain a query pre-populated with\nthe correct tableinfo and return fields. This query can be modified with restrictions, etc. Then, use the static <see cref=\"!:GetFromCustomSearch\"></see> method\nto apply the query to the database and obtain the result as a Rows object, with one item for each table row that matched your query.</li><li>For each non-unique index defined for the table, there is a corresponding GetFromIdx method to make retrieving data via the indexes easy.</li></ul>\nUnique indexes are handled through the <xref href=\"SuperOffice.CRM.Rows.TicketRow\" data-throw-if-not-resolved=\"false\"></xref> object directly,\nwhich has nested classes and GetFromIdx methods for each unique index. Similarly, there is a <see cref=\"!:SuperOffice.CRM.Rows.TicketRows.GetFromReader\"></see>\nmethod to retrieve the results of queries that return more than one row (this method will iterate over the reader to fetch ALL results, so beware of fetching\nhuge result sets).\n<p></p>\n"
  syntax:
    content: 'public class TicketRows : TableRowsBase, INestedPersist, IEnumerable<INestedPersist>, IList, ICollection, IEnumerable, INotifyCollectionChanged, IBindingList'
    content.vb: >-
      Public Class TicketRows
          Inherits TableRowsBase
          Implements INestedPersist, IEnumerable(Of INestedPersist), IList, ICollection, IEnumerable, INotifyCollectionChanged, IBindingList
  inheritance:
  - System.Object
  - SuperOffice.Data.NestedPersist
  - SuperOffice.Data.NestedPersistFacade
  - SuperOffice.Data.NestedCollectionPersist
  - SuperOffice.CRM.Rows.TableRowsBase
  implements:
  - SuperOffice.Data.INestedPersist
  - System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.IBindingList
  inheritedMembers:
  - SuperOffice.CRM.Rows.TableRowsBase._innerList
  - SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  - SuperOffice.CRM.Rows.TableRowsBase._sentries
  - SuperOffice.CRM.Rows.TableRowsBase._idx
  - SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  - SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  - SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  - SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  - SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  - SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  - SuperOffice.CRM.Rows.TableRowsBase.Clear
  - SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  - SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  - SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  - SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  - SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  - SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  - SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  - SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  - SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  - SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  - SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  - SuperOffice.CRM.Rows.TableRowsBase.Sentries
  - SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  - SuperOffice.CRM.Rows.TableRowsBase.Index
  - SuperOffice.CRM.Rows.TableRowsBase.Count
  - SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  - SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  - SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  - SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  - SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  - SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  - SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  - SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  - SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  - SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  - SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  - SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  - SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  - SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  - SuperOffice.Data.NestedCollectionPersist.IsDeleted
  - SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  - SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  - SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  - SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  - SuperOffice.Data.NestedPersist._saveOwner
  - SuperOffice.Data.NestedPersist._isSaving
  - SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  - SuperOffice.Data.NestedPersist.SaveAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  - SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  - SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  - SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  - SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  - SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  - SuperOffice.Data.NestedPersist.IsSaving
  - SuperOffice.Data.NestedPersist.OnElementSaved
  - SuperOffice.Data.NestedPersist.OnElementIdUpdate
  extensionMethods:
  - SuperOffice.CRM.Rows.TicketRows.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Rows.TicketRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Rows.TicketRows.ForEach(System.Action{SuperOffice.CRM.Rows.TicketRow})
  commentId: M:SuperOffice.CRM.Rows.TicketRows.ForEach(System.Action{SuperOffice.CRM.Rows.TicketRow})
  id: ForEach(System.Action{SuperOffice.CRM.Rows.TicketRow})
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: ForEach(Action<TicketRow>)
  nameWithType: TicketRows.ForEach(Action<TicketRow>)
  fullName: SuperOffice.CRM.Rows.TicketRows.ForEach(System.Action<SuperOffice.CRM.Rows.TicketRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nMethod that iterates over all members and applies the action parameter to each of them\n"
  syntax:
    content: public void ForEach(Action<TicketRow> whatToDo)
    parameters:
    - id: whatToDo
      type: System.Action{SuperOffice.CRM.Rows.TicketRow}
    content.vb: Public Sub ForEach(whatToDo As Action(Of TicketRow))
  overload: SuperOffice.CRM.Rows.TicketRows.ForEach*
  nameWithType.vb: TicketRows.ForEach(Action(Of TicketRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.TicketRows.ForEach(System.Action(Of SuperOffice.CRM.Rows.TicketRow))
  name.vb: ForEach(Action(Of TicketRow))
- uid: SuperOffice.CRM.Rows.TicketRows.Find(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  commentId: M:SuperOffice.CRM.Rows.TicketRows.Find(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  id: Find(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: Find(Predicate<TicketRow>)
  nameWithType: TicketRows.Find(Predicate<TicketRow>)
  fullName: SuperOffice.CRM.Rows.TicketRows.Find(System.Predicate<SuperOffice.CRM.Rows.TicketRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nApply the predicate to each element of the collection and return the first row that matches; if no match then return null\n"
  syntax:
    content: public TicketRow Find(Predicate<TicketRow> condition)
    parameters:
    - id: condition
      type: System.Predicate{SuperOffice.CRM.Rows.TicketRow}
    return:
      type: SuperOffice.CRM.Rows.TicketRow
    content.vb: Public Function Find(condition As Predicate(Of TicketRow)) As TicketRow
  overload: SuperOffice.CRM.Rows.TicketRows.Find*
  nameWithType.vb: TicketRows.Find(Predicate(Of TicketRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.TicketRows.Find(System.Predicate(Of SuperOffice.CRM.Rows.TicketRow))
  name.vb: Find(Predicate(Of TicketRow))
- uid: SuperOffice.CRM.Rows.TicketRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  commentId: M:SuperOffice.CRM.Rows.TicketRows.FindAll(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  id: FindAll(System.Predicate{SuperOffice.CRM.Rows.TicketRow})
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<TicketRow>)
  nameWithType: TicketRows.FindAll(Predicate<TicketRow>)
  fullName: SuperOffice.CRM.Rows.TicketRows.FindAll(System.Predicate<SuperOffice.CRM.Rows.TicketRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nReturn a new collection that contains only those elements that match the condition. Elements are shared, not clones! of the original collection\n"
  syntax:
    content: public TicketRows FindAll(Predicate<TicketRow> condition)
    parameters:
    - id: condition
      type: System.Predicate{SuperOffice.CRM.Rows.TicketRow}
    return:
      type: SuperOffice.CRM.Rows.TicketRows
    content.vb: Public Function FindAll(condition As Predicate(Of TicketRow)) As TicketRows
  overload: SuperOffice.CRM.Rows.TicketRows.FindAll*
  nameWithType.vb: TicketRows.FindAll(Predicate(Of TicketRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.TicketRows.FindAll(System.Predicate(Of SuperOffice.CRM.Rows.TicketRow))
  name.vb: FindAll(Predicate(Of TicketRow))
- uid: SuperOffice.CRM.Rows.TicketRows.CreateNew
  commentId: M:SuperOffice.CRM.Rows.TicketRows.CreateNew
  id: CreateNew
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: CreateNew()
  nameWithType: TicketRows.CreateNew()
  fullName: SuperOffice.CRM.Rows.TicketRows.CreateNew()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRows object. This collection will contain no rows.\n"
  syntax:
    content: public static TicketRows CreateNew()
    return:
      type: SuperOffice.CRM.Rows.TicketRows
      description: "\nA new instance of the TicketRows object.\n"
    content.vb: Public Shared Function CreateNew As TicketRows
  overload: SuperOffice.CRM.Rows.TicketRows.CreateNew*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.TicketRows.CustomSearch,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.TicketRows.CustomSearch,System.Threading.CancellationToken)
  id: GetFromCustomSearchAsync(SuperOffice.CRM.Rows.TicketRows.CustomSearch,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromCustomSearchAsync(TicketRows.CustomSearch, CancellationToken)
  nameWithType: TicketRows.GetFromCustomSearchAsync(TicketRows.CustomSearch, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync(SuperOffice.CRM.Rows.TicketRows.CustomSearch, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRows object, and populate it with data from a custom search.\nIf the search returns no results, an empty collection will be returned; if the result contains\nrows, a collection of TicketRow objects representing each row will be returned. \n"
  syntax:
    content: public static Task<TicketRows> GetFromCustomSearchAsync(TicketRows.CustomSearch query, CancellationToken cancellationToken = null)
    parameters:
    - id: query
      type: SuperOffice.CRM.Rows.TicketRows.CustomSearch
      description: The custom search to execute against the database
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: A new instance of the TicketRows object, reflecting the result of the query.
    content.vb: Public Shared Function GetFromCustomSearchAsync(query As TicketRows.CustomSearch, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxConnectIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxConnectIdAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxConnectIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketConnect_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxConnectIdAsync(int connectId, CancellationToken cancellationToken = null)
    parameters:
    - id: connectId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxConnectIdAsync(connectId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxCreatedAtAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCreatedAtAsync(DateTime, CancellationToken)
  nameWithType: TicketRows.GetFromIdxCreatedAtAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketCreated_at&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxCreatedAtAsync(DateTime createdAt, CancellationToken cancellationToken = null)
    parameters:
    - id: createdAt
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCreatedAtAsync(createdAt As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxCreatedByAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCreatedByAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxCreatedByAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketCreated_by&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxCreatedByAsync(int createdBy, CancellationToken cancellationToken = null)
    parameters:
    - id: createdBy
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCreatedByAsync(createdBy As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxOwnedByAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxOwnedByAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxOwnedByAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketOwned_by&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxOwnedByAsync(int ownedBy, CancellationToken cancellationToken = null)
    parameters:
    - id: ownedBy
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxOwnedByAsync(ownedBy As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxCategoryAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCategoryAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxCategoryAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketCategory&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxCategoryAsync(int category, CancellationToken cancellationToken = null)
    parameters:
    - id: category
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCategoryAsync(category As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxOrigCategoryAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxOrigCategoryAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxOrigCategoryAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketOrig_category&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxOrigCategoryAsync(int origCategory, CancellationToken cancellationToken = null)
    parameters:
    - id: origCategory
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxOrigCategoryAsync(origCategory As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  id: GetFromIdxStatusAsync(SuperOffice.Data.TicketBaseStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxStatusAsync(TicketBaseStatus, CancellationToken)
  nameWithType: TicketRows.GetFromIdxStatusAsync(TicketBaseStatus, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync(SuperOffice.Data.TicketBaseStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketStatus&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxStatusAsync(TicketBaseStatus status, CancellationToken cancellationToken = null)
    parameters:
    - id: status
      type: SuperOffice.Data.TicketBaseStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxStatusAsync(status As TicketBaseStatus, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxTicketStatusAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxTicketStatusAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxTicketStatusAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketTicket_status&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxTicketStatusAsync(int ticketStatus, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketStatus
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxTicketStatusAsync(ticketStatus As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxCustIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCustIdAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxCustIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketCust_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxCustIdAsync(int custId, CancellationToken cancellationToken = null)
    parameters:
    - id: custId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCustIdAsync(custId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxPriorityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxPriorityAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxPriorityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketPriority&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxPriorityAsync(int priority, CancellationToken cancellationToken = null)
    parameters:
    - id: priority
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxPriorityAsync(priority As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxOrigPriorityAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxOrigPriorityAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxOrigPriorityAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketOrig_priority&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxOrigPriorityAsync(int origPriority, CancellationToken cancellationToken = null)
    parameters:
    - id: origPriority
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxOrigPriorityAsync(origPriority As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxAlertTimeoutAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxAlertTimeoutAsync(DateTime, CancellationToken)
  nameWithType: TicketRows.GetFromIdxAlertTimeoutAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketAlert_timeout&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxAlertTimeoutAsync(DateTime alertTimeout, CancellationToken cancellationToken = null)
    parameters:
    - id: alertTimeout
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxAlertTimeoutAsync(alertTimeout As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxFilterIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxFilterIdAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxFilterIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketFilter_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxFilterIdAsync(int filterId, CancellationToken cancellationToken = null)
    parameters:
    - id: filterId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxFilterIdAsync(filterId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync(SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync(SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  id: GetFromIdxReadStatusAsync(SuperOffice.Data.TicketReadStatus,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxReadStatusAsync(TicketReadStatus, CancellationToken)
  nameWithType: TicketRows.GetFromIdxReadStatusAsync(TicketReadStatus, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync(SuperOffice.Data.TicketReadStatus, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketRead_status&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxReadStatusAsync(TicketReadStatus readStatus, CancellationToken cancellationToken = null)
    parameters:
    - id: readStatus
      type: SuperOffice.Data.TicketReadStatus
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxReadStatusAsync(readStatus As TicketReadStatus, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxDbiAgentIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDbiAgentIdAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxDbiAgentIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketDbi_agent_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxDbiAgentIdAsync(int dbiAgentId, CancellationToken cancellationToken = null)
    parameters:
    - id: dbiAgentId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDbiAgentIdAsync(dbiAgentId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync(System.String,System.Threading.CancellationToken)
  id: GetFromIdxDbiKeyAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDbiKeyAsync(String, CancellationToken)
  nameWithType: TicketRows.GetFromIdxDbiKeyAsync(String, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketDbi_key&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxDbiKeyAsync(string dbiKey, CancellationToken cancellationToken = null)
    parameters:
    - id: dbiKey
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDbiKeyAsync(dbiKey As String, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxDbiLastSyncronizedAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDbiLastSyncronizedAsync(DateTime, CancellationToken)
  nameWithType: TicketRows.GetFromIdxDbiLastSyncronizedAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketDbi_last_syncronized&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxDbiLastSyncronizedAsync(DateTime dbiLastSyncronized, CancellationToken cancellationToken = null)
    parameters:
    - id: dbiLastSyncronized
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDbiLastSyncronizedAsync(dbiLastSyncronized As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync(System.DateTime,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync(System.DateTime,System.Threading.CancellationToken)
  id: GetFromIdxDbiLastModifiedAsync(System.DateTime,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxDbiLastModifiedAsync(DateTime, CancellationToken)
  nameWithType: TicketRows.GetFromIdxDbiLastModifiedAsync(DateTime, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync(System.DateTime, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketDbi_last_modified&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxDbiLastModifiedAsync(DateTime dbiLastModified, CancellationToken cancellationToken = null)
    parameters:
    - id: dbiLastModified
      type: System.DateTime
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxDbiLastModifiedAsync(dbiLastModified As DateTime, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync(System.Int32[],System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync(System.Int32[],System.Threading.CancellationToken)
  id: GetFromIdxTagsAsync(System.Int32[],System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxTagsAsync(Int32[], CancellationToken)
  nameWithType: TicketRows.GetFromIdxTagsAsync(Int32[], CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync(System.Int32[], System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketTags&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxTagsAsync(int[] tags, CancellationToken cancellationToken = null)
    parameters:
    - id: tags
      type: System.Int32[]
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxTagsAsync(tags As Integer(), cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync*
  nameWithType.vb: TicketRows.GetFromIdxTagsAsync(Int32(), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync(System.Int32(), System.Threading.CancellationToken)
  name.vb: GetFromIdxTagsAsync(Int32(), CancellationToken)
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxCreatedByWorkflowIdAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxCreatedByWorkflowIdAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxCreatedByWorkflowIdAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketCreated_by_workflow_id&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxCreatedByWorkflowIdAsync(int createdByWorkflowId, CancellationToken cancellationToken = null)
    parameters:
    - id: createdByWorkflowId
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxCreatedByWorkflowIdAsync(createdByWorkflowId As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  id: GetFromIdxTicketTypeAsync(System.Int32,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromIdxTicketTypeAsync(Int32, CancellationToken)
  nameWithType: TicketRows.GetFromIdxTicketTypeAsync(Int32, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRow object, by querying the database table via the index &apos;IDXTicketTicket_type&apos;.\nThis method is intended to make it easy to use efficient queries that match a database index.\n"
  remarks: "\nThis method represents one of the unique indexes on the Ticket table. Non-unique indexes have corresponding inner classes\nand methods in the <xref href=\"SuperOffice.CRM.Rows.TicketRows\" data-throw-if-not-resolved=\"false\"></xref> collection, since they may return more than one row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromIdxTicketTypeAsync(int ticketType, CancellationToken cancellationToken = null)
    parameters:
    - id: ticketType
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
      description: "Row object that represents the result of the search. <see cref=\"!:IsNew\"></see> will be true if \nthe query did not match any row in the table"
    content.vb: Public Shared Function GetFromIdxTicketTypeAsync(ticketType As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.TicketTableInfo,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.TicketTableInfo,System.Threading.CancellationToken)
  id: GetFromReaderAsync(SuperOffice.Data.SoDataReader,SuperOffice.CRM.Data.TicketTableInfo,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: GetFromReaderAsync(SoDataReader, TicketTableInfo, CancellationToken)
  nameWithType: TicketRows.GetFromReaderAsync(SoDataReader, TicketTableInfo, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync(SuperOffice.Data.SoDataReader, SuperOffice.CRM.Data.TicketTableInfo, System.Threading.CancellationToken)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of the TicketRows object, and populate it with data from a reader.\nIf the search returns no results, an empty collection will be returned; if the result contains\nrows, a collection of TicketRow objects representing each row will be returned. \n<p></p>Note that the internal logic starts by calling reader.<xref href=\"SuperOffice.Data.SoDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref>, \nwhich is correct if you hand the method the result of an <xref href=\"SuperOffice.Data.SoCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref>,\nbut if the reader has already been advanced one or more rows, the current row will be skipped and collection\npopulation will start with the next row.\n"
  syntax:
    content: public static Task<TicketRows> GetFromReaderAsync(SoDataReader reader, TicketTableInfo tableInfo, CancellationToken cancellationToken = null)
    parameters:
    - id: reader
      type: SuperOffice.Data.SoDataReader
      description: <xref href="SuperOffice.Data.SoDataReader" data-throw-if-not-resolved="false"></xref> positioned to a valid database row.
    - id: tableInfo
      type: SuperOffice.CRM.Data.TicketTableInfo
      description: >-
        <xref href="SuperOffice.CRM.Data.TicketTableInfo" data-throw-if-not-resolved="false"></xref> instance used in the query that is the source of the reader.
                    The fields used from the reader will be those owned by this tableinfo object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
    content.vb: Public Shared Function GetFromReaderAsync(reader As SoDataReader, tableInfo As TicketTableInfo, cancellationToken As CancellationToken = Nothing) As Task(Of TicketRows)
  overload: SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Rows.TicketRows.Add(SuperOffice.CRM.Rows.TicketRow)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.Add(SuperOffice.CRM.Rows.TicketRow)
  id: Add(SuperOffice.CRM.Rows.TicketRow)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: Add(TicketRow)
  nameWithType: TicketRows.Add(TicketRow)
  fullName: SuperOffice.CRM.Rows.TicketRows.Add(SuperOffice.CRM.Rows.TicketRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd one TicketRow to the collection.\n"
  syntax:
    content: public int Add(TicketRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.TicketRow
      description: An instance of TicketRow to be added to the collection.
    return:
      type: System.Int32
      description: The index of the added TicketRow.
    content.vb: Public Function Add(row As TicketRow) As Integer
  overload: SuperOffice.CRM.Rows.TicketRows.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.TicketRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow})
  commentId: M:SuperOffice.CRM.Rows.TicketRows.AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow})
  id: AddRange(System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow})
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<TicketRow>)
  nameWithType: TicketRows.AddRange(IEnumerable<TicketRow>)
  fullName: SuperOffice.CRM.Rows.TicketRows.AddRange(System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.TicketRow>)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd a range of TicketRow to the collection.\n"
  syntax:
    content: public TicketRows AddRange(IEnumerable<TicketRow> rows)
    parameters:
    - id: rows
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow}
    return:
      type: SuperOffice.CRM.Rows.TicketRows
      description: The updated TicketRows collection object.
    content.vb: Public Function AddRange(rows As IEnumerable(Of TicketRow)) As TicketRows
  overload: SuperOffice.CRM.Rows.TicketRows.AddRange*
  nameWithType.vb: TicketRows.AddRange(IEnumerable(Of TicketRow))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SuperOffice.CRM.Rows.TicketRows.AddRange(System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.TicketRow))
  name.vb: AddRange(IEnumerable(Of TicketRow))
- uid: SuperOffice.CRM.Rows.TicketRows.AddNew
  commentId: M:SuperOffice.CRM.Rows.TicketRows.AddNew
  id: AddNew
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: AddNew()
  nameWithType: TicketRows.AddNew()
  fullName: SuperOffice.CRM.Rows.TicketRows.AddNew()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nAdd a new instance of TicketRow added to the collection.\n"
  syntax:
    content: public TicketRow AddNew()
    return:
      type: SuperOffice.CRM.Rows.TicketRow
      description: A new instance of TicketRow added to the collection.
    content.vb: Public Function AddNew As TicketRow
  overload: SuperOffice.CRM.Rows.TicketRows.AddNew*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.TicketRows.Remove(SuperOffice.CRM.Rows.TicketRow)
  commentId: M:SuperOffice.CRM.Rows.TicketRows.Remove(SuperOffice.CRM.Rows.TicketRow)
  id: Remove(SuperOffice.CRM.Rows.TicketRow)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: Remove(TicketRow)
  nameWithType: TicketRows.Remove(TicketRow)
  fullName: SuperOffice.CRM.Rows.TicketRows.Remove(SuperOffice.CRM.Rows.TicketRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nRemoves the given TicketRow from the collection\n"
  syntax:
    content: public void Remove(TicketRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.TicketRow
      description: the TicketRow to be removed
    content.vb: Public Sub Remove(row As TicketRow)
  overload: SuperOffice.CRM.Rows.TicketRows.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.TicketRows.CreateChild
  commentId: M:SuperOffice.CRM.Rows.TicketRows.CreateChild
  id: CreateChild
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: CreateChild()
  nameWithType: TicketRows.CreateChild()
  fullName: SuperOffice.CRM.Rows.TicketRows.CreateChild()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nCreate a new instance of TicketRow\n"
  syntax:
    content: protected override TableRowBase CreateChild()
    return:
      type: SuperOffice.CRM.Rows.TableRowBase
      description: New instance of TicketRow
    content.vb: Protected Overrides Function CreateChild As TableRowBase
  overridden: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  overload: SuperOffice.CRM.Rows.TicketRows.CreateChild*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.CRM.Rows.TicketRows.ToArray
  commentId: M:SuperOffice.CRM.Rows.TicketRows.ToArray
  id: ToArray
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: TicketRows.ToArray()
  fullName: SuperOffice.CRM.Rows.TicketRows.ToArray()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  syntax:
    content: public TicketRow[] ToArray()
    return:
      type: SuperOffice.CRM.Rows.TicketRow[]
    content.vb: Public Function ToArray As TicketRow()
  overload: SuperOffice.CRM.Rows.TicketRows.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Rows.TicketRows.ToString
  commentId: M:SuperOffice.CRM.Rows.TicketRows.ToString
  id: ToString
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TicketRows.ToString()
  fullName: SuperOffice.CRM.Rows.TicketRows.ToString()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nFor debugging: Number of members, and the first (up to) 5 items\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SuperOffice.CRM.Rows.TicketRows.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.CRM.Rows.TicketRows.Item(System.Int32)
  commentId: P:SuperOffice.CRM.Rows.TicketRows.Item(System.Int32)
  id: Item(System.Int32)
  parent: SuperOffice.CRM.Rows.TicketRows
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: TicketRows.Item[Int32]
  fullName: SuperOffice.CRM.Rows.TicketRows.Item[System.Int32]
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Rows
  summary: "\nGet a TicketRow given its index in the collection.\n"
  syntax:
    content: public TicketRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the TicketRow in the collection
    return:
      type: SuperOffice.CRM.Rows.TicketRow
    content.vb: Public ReadOnly Property Item(index As Integer) As TicketRow
  overload: SuperOffice.CRM.Rows.TicketRows.Item*
  nameWithType.vb: TicketRows.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SuperOffice.CRM.Rows.TicketRows.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.NestedPersist
  commentId: T:SuperOffice.Data.NestedPersist
  parent: SuperOffice.Data
  isExternal: true
  name: NestedPersist
  nameWithType: NestedPersist
  fullName: SuperOffice.Data.NestedPersist
- uid: SuperOffice.Data.NestedPersistFacade
  commentId: T:SuperOffice.Data.NestedPersistFacade
  parent: SuperOffice.Data
  isExternal: true
  name: NestedPersistFacade
  nameWithType: NestedPersistFacade
  fullName: SuperOffice.Data.NestedPersistFacade
- uid: SuperOffice.Data.NestedCollectionPersist
  commentId: T:SuperOffice.Data.NestedCollectionPersist
  parent: SuperOffice.Data
  isExternal: true
  name: NestedCollectionPersist
  nameWithType: NestedCollectionPersist
  fullName: SuperOffice.Data.NestedCollectionPersist
- uid: SuperOffice.CRM.Rows.TableRowsBase
  commentId: T:SuperOffice.CRM.Rows.TableRowsBase
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TableRowsBase
  nameWithType: TableRowsBase
  fullName: SuperOffice.CRM.Rows.TableRowsBase
- uid: SuperOffice.Data.INestedPersist
  commentId: T:SuperOffice.Data.INestedPersist
  parent: SuperOffice.Data
  isExternal: true
  name: INestedPersist
  nameWithType: INestedPersist
  fullName: SuperOffice.Data.INestedPersist
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Data.INestedPersist}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INestedPersist>
  nameWithType: IEnumerable<INestedPersist>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Data.INestedPersist>
  nameWithType.vb: IEnumerable(Of INestedPersist)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Data.INestedPersist)
  name.vb: IEnumerable(Of INestedPersist)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.IBindingList
  isExternal: true
  name: IBindingList
  nameWithType: IBindingList
  fullName: System.ComponentModel.IBindingList
- uid: SuperOffice.CRM.Rows.TableRowsBase._innerList
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._innerList
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _innerList
  nameWithType: TableRowsBase._innerList
  fullName: SuperOffice.CRM.Rows.TableRowsBase._innerList
- uid: SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _allHasBeenMarkedForDelete
  nameWithType: TableRowsBase._allHasBeenMarkedForDelete
  fullName: SuperOffice.CRM.Rows.TableRowsBase._allHasBeenMarkedForDelete
- uid: SuperOffice.CRM.Rows.TableRowsBase._sentries
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._sentries
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _sentries
  nameWithType: TableRowsBase._sentries
  fullName: SuperOffice.CRM.Rows.TableRowsBase._sentries
- uid: SuperOffice.CRM.Rows.TableRowsBase._idx
  commentId: F:SuperOffice.CRM.Rows.TableRowsBase._idx
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _idx
  nameWithType: TableRowsBase._idx
  fullName: SuperOffice.CRM.Rows.TableRowsBase._idx
- uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: OnIndexChanged(IdxBase)
  nameWithType: TableRowsBase.OnIndexChanged(IdxBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
    name: OnIndexChanged
    nameWithType: TableRowsBase.OnIndexChanged
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged(SuperOffice.CRM.Rows.IdxBase)
    name: OnIndexChanged
    nameWithType: TableRowsBase.OnIndexChanged
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnIndexChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: LoadAsync(IdxBase, CancellationToken)
  nameWithType: TableRowsBase.LoadAsync(IdxBase, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
    name: LoadAsync
    nameWithType: TableRowsBase.LoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync(SuperOffice.CRM.Rows.IdxBase,System.Threading.CancellationToken)
    name: LoadAsync
    nameWithType: TableRowsBase.LoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.LoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoadAsync(CancellationToken)
  nameWithType: TableRowsBase.RowsLoadAsync(CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoadAsync(ITableRowLoadHandlerFactory, CancellationToken)
  nameWithType: TableRowsBase.RowsLoadAsync(ITableRowLoadHandlerFactory, CancellationToken)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory,System.Threading.CancellationToken)
    name: RowsLoadAsync
    nameWithType: TableRowsBase.RowsLoadAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: DeleteAsync()
  nameWithType: TableRowsBase.DeleteAsync()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    name: DeleteAsync
    nameWithType: TableRowsBase.DeleteAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    name: DeleteAsync
    nameWithType: TableRowsBase.DeleteAsync
    fullName: SuperOffice.CRM.Rows.TableRowsBase.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: GetEnumerator()
  nameWithType: TableRowsBase.GetEnumerator()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    name: GetEnumerator
    nameWithType: TableRowsBase.GetEnumerator
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    name: GetEnumerator
    nameWithType: TableRowsBase.GetEnumerator
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Add(TableRowBase)
  nameWithType: TableRowsBase.Add(TableRowBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
    name: Add
    nameWithType: TableRowsBase.Add
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Add(SuperOffice.CRM.Rows.TableRowBase)
    name: Add
    nameWithType: TableRowsBase.Add
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Remove(TableRowBase)
  nameWithType: TableRowsBase.Remove(TableRowBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
    name: Remove
    nameWithType: TableRowsBase.Remove
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Remove(SuperOffice.CRM.Rows.TableRowBase)
    name: Remove
    nameWithType: TableRowsBase.Remove
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.TableRowBase
    name: TableRowBase
    nameWithType: TableRowBase
    fullName: SuperOffice.CRM.Rows.TableRowBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Clear
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Clear()
  nameWithType: TableRowsBase.Clear()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
    name: Clear
    nameWithType: TableRowsBase.Clear
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Clear
    name: Clear
    nameWithType: TableRowsBase.Clear
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Sort(IComparer)
  nameWithType: TableRowsBase.Sort(IComparer)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
    name: Sort
    nameWithType: TableRowsBase.Sort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Sort(System.Collections.IComparer)
    name: Sort
    nameWithType: TableRowsBase.Sort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: GetPrimaryKeys()
  nameWithType: TableRowsBase.GetPrimaryKeys()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    name: GetPrimaryKeys
    nameWithType: TableRowsBase.GetPrimaryKeys
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    name: GetPrimaryKeys
    nameWithType: TableRowsBase.GetPrimaryKeys
    fullName: SuperOffice.CRM.Rows.TableRowsBase.GetPrimaryKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: OnAdded(Object, Int32)
  nameWithType: TableRowsBase.OnAdded(Object, Int32)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
    name: OnAdded
    nameWithType: TableRowsBase.OnAdded
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.OnAdded(System.Object,System.Int32)
    name: OnAdded
    nameWithType: TableRowsBase.OnAdded
    fullName: SuperOffice.CRM.Rows.TableRowsBase.OnAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: TableRowsBase.CopyTo(Array, Int32)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: TableRowsBase.CopyTo
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: TableRowsBase.CopyTo
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IndexOf(Object)
  nameWithType: TableRowsBase.IndexOf(Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
    name: IndexOf
    nameWithType: TableRowsBase.IndexOf
    fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.IndexOf(System.Object)
    name: IndexOf
    nameWithType: TableRowsBase.IndexOf
    fullName: SuperOffice.CRM.Rows.TableRowsBase.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Contains(Object)
  nameWithType: TableRowsBase.Contains(Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
    name: Contains
    nameWithType: TableRowsBase.Contains
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Contains(System.Object)
    name: Contains
    nameWithType: TableRowsBase.Contains
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AddIndex(PropertyDescriptor)
  nameWithType: TableRowsBase.AddIndex(PropertyDescriptor)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
    name: AddIndex
    nameWithType: TableRowsBase.AddIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.AddIndex(System.ComponentModel.PropertyDescriptor)
    name: AddIndex
    nameWithType: TableRowsBase.AddIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.AddIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: ApplySort(PropertyDescriptor, ListSortDirection)
  nameWithType: TableRowsBase.ApplySort(PropertyDescriptor, ListSortDirection)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    name: ApplySort
    nameWithType: TableRowsBase.ApplySort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    name: ApplySort
    nameWithType: TableRowsBase.ApplySort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.ApplySort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Find(PropertyDescriptor, Object)
  nameWithType: TableRowsBase.Find(PropertyDescriptor, Object)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor, System.Object)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    name: Find
    nameWithType: TableRowsBase.Find
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    name: Find
    nameWithType: TableRowsBase.Find
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RemoveIndex(PropertyDescriptor)
  nameWithType: TableRowsBase.RemoveIndex(PropertyDescriptor)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    name: RemoveIndex
    nameWithType: TableRowsBase.RemoveIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    name: RemoveIndex
    nameWithType: TableRowsBase.RemoveIndex
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RemoveSort()
  nameWithType: TableRowsBase.RemoveSort()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    name: RemoveSort
    nameWithType: TableRowsBase.RemoveSort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    name: RemoveSort
    nameWithType: TableRowsBase.RemoveSort
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RemoveSort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Load(IdxBase)
  nameWithType: TableRowsBase.Load(IdxBase)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
    name: Load
    nameWithType: TableRowsBase.Load
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.Load(SuperOffice.CRM.Rows.IdxBase)
    name: Load
    nameWithType: TableRowsBase.Load
    fullName: SuperOffice.CRM.Rows.TableRowsBase.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.IdxBase
    name: IdxBase
    nameWithType: IdxBase
    fullName: SuperOffice.CRM.Rows.IdxBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoad()
  nameWithType: TableRowsBase.RowsLoad()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: RowsLoad(ITableRowLoadHandlerFactory)
  nameWithType: TableRowsBase.RowsLoad(ITableRowLoadHandlerFactory)
  fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad(SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory)
    name: RowsLoad
    nameWithType: TableRowsBase.RowsLoad
    fullName: SuperOffice.CRM.Rows.TableRowsBase.RowsLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    name: ITableRowLoadHandlerFactory
    nameWithType: ITableRowLoadHandlerFactory
    fullName: SuperOffice.CRM.Rows.ITableRowLoadHandlerFactory
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TableRowsBase.Sentries
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Sentries
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Sentries
  nameWithType: TableRowsBase.Sentries
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Sentries
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsDirty
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsDirty
  nameWithType: TableRowsBase.IsDirty
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsDirty
- uid: SuperOffice.CRM.Rows.TableRowsBase.Index
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Index
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Index
  nameWithType: TableRowsBase.Index
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Index
- uid: SuperOffice.CRM.Rows.TableRowsBase.Count
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.Count
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: Count
  nameWithType: TableRowsBase.Count
  fullName: SuperOffice.CRM.Rows.TableRowsBase.Count
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsMarkedForDelete
  nameWithType: TableRowsBase.IsMarkedForDelete
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsMarkedForDelete
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsFixedSize
  nameWithType: TableRowsBase.IsFixedSize
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsFixedSize
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsReadOnly
  nameWithType: TableRowsBase.IsReadOnly
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsReadOnly
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowEdit
  nameWithType: TableRowsBase.AllowEdit
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowEdit
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowNew
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowNew
  nameWithType: TableRowsBase.AllowNew
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowNew
- uid: SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: AllowRemove
  nameWithType: TableRowsBase.AllowRemove
  fullName: SuperOffice.CRM.Rows.TableRowsBase.AllowRemove
- uid: SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.IsSorted
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: IsSorted
  nameWithType: TableRowsBase.IsSorted
  fullName: SuperOffice.CRM.Rows.TableRowsBase.IsSorted
- uid: SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SortDirection
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SortDirection
  nameWithType: TableRowsBase.SortDirection
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SortDirection
- uid: SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SortProperty
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SortProperty
  nameWithType: TableRowsBase.SortProperty
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SortProperty
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsChangeNotification
  nameWithType: TableRowsBase.SupportsChangeNotification
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsChangeNotification
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsSearching
  nameWithType: TableRowsBase.SupportsSearching
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsSearching
- uid: SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  commentId: P:SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: SupportsSorting
  nameWithType: TableRowsBase.SupportsSorting
  fullName: SuperOffice.CRM.Rows.TableRowsBase.SupportsSorting
- uid: SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: _onCollectionChanged
  nameWithType: TableRowsBase._onCollectionChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase._onCollectionChanged
- uid: SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CollectionChanged
  nameWithType: TableRowsBase.CollectionChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CollectionChanged
- uid: SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  commentId: E:SuperOffice.CRM.Rows.TableRowsBase.ListChanged
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: ListChanged
  nameWithType: TableRowsBase.ListChanged
  fullName: SuperOffice.CRM.Rows.TableRowsBase.ListChanged
- uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  commentId: M:SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
  parent: SuperOffice.Data.NestedCollectionPersist
  isExternal: true
  name: GetFacadingItems()
  nameWithType: NestedCollectionPersist.GetFacadingItems()
  fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems()
  spec.csharp:
  - uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    name: GetFacadingItems
    nameWithType: NestedCollectionPersist.GetFacadingItems
    fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    name: GetFacadingItems
    nameWithType: NestedCollectionPersist.GetFacadingItems
    fullName: SuperOffice.Data.NestedCollectionPersist.GetFacadingItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedCollectionPersist.IsDeleted
  commentId: P:SuperOffice.Data.NestedCollectionPersist.IsDeleted
  parent: SuperOffice.Data.NestedCollectionPersist
  isExternal: true
  name: IsDeleted
  nameWithType: NestedCollectionPersist.IsDeleted
  fullName: SuperOffice.Data.NestedCollectionPersist.IsDeleted
- uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPreIdUpdateAsync()
  nameWithType: NestedPersistFacade.OnPreIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    name: OnPreIdUpdateAsync
    nameWithType: NestedPersistFacade.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    name: OnPreIdUpdateAsync
    nameWithType: NestedPersistFacade.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPrimaryKeyRequestAsync(PKContainer)
  nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyRequestAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyRequestAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnPrimaryKeyUpdateAsync(PKContainer)
  nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersistFacade.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnIdUpdateAsync()
  nameWithType: NestedPersistFacade.OnIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    name: OnIdUpdateAsync
    nameWithType: NestedPersistFacade.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    name: OnIdUpdateAsync
    nameWithType: NestedPersistFacade.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnSaveAsync(BatchSave)
  nameWithType: NestedPersistFacade.OnSaveAsync(BatchSave)
  fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: OnSaveAsync
    nameWithType: NestedPersistFacade.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: OnSaveAsync
    nameWithType: NestedPersistFacade.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  commentId: M:SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  parent: SuperOffice.Data.NestedPersistFacade
  isExternal: true
  name: OnSavedAsync(Boolean)
  nameWithType: NestedPersistFacade.OnSavedAsync(Boolean)
  fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
    name: OnSavedAsync
    nameWithType: NestedPersistFacade.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersistFacade.OnSavedAsync(System.Boolean)
    name: OnSavedAsync
    nameWithType: NestedPersistFacade.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersistFacade.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist._saveOwner
  commentId: F:SuperOffice.Data.NestedPersist._saveOwner
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: _saveOwner
  nameWithType: NestedPersist._saveOwner
  fullName: SuperOffice.Data.NestedPersist._saveOwner
- uid: SuperOffice.Data.NestedPersist._isSaving
  commentId: F:SuperOffice.Data.NestedPersist._isSaving
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: _isSaving
  nameWithType: NestedPersist._isSaving
  fullName: SuperOffice.Data.NestedPersist._isSaving
- uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  commentId: M:SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: SetSaveOwner(INestedPersist)
  nameWithType: NestedPersist.SetSaveOwner(INestedPersist)
  fullName: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
    name: SetSaveOwner
    nameWithType: NestedPersist.SetSaveOwner
    fullName: SuperOffice.Data.NestedPersist.SetSaveOwner
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SetSaveOwner(SuperOffice.Data.INestedPersist)
    name: SetSaveOwner
    nameWithType: NestedPersist.SetSaveOwner
    fullName: SuperOffice.Data.NestedPersist.SetSaveOwner
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.INestedPersist
    name: INestedPersist
    nameWithType: INestedPersist
    fullName: SuperOffice.Data.INestedPersist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SaveAsync
  commentId: M:SuperOffice.Data.NestedPersist.SaveAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: SaveAsync()
  nameWithType: NestedPersist.SaveAsync()
  fullName: SuperOffice.Data.NestedPersist.SaveAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SaveAsync
    name: SaveAsync
    nameWithType: NestedPersist.SaveAsync
    fullName: SuperOffice.Data.NestedPersist.SaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SaveAsync
    name: SaveAsync
    nameWithType: NestedPersist.SaveAsync
    fullName: SuperOffice.Data.NestedPersist.SaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPreIdUpdateAsync()
  nameWithType: NestedPersist.INestedPersist.OnPreIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  name.vb: SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
    name: INestedPersist.OnPreIdUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPreIdUpdateAsync
    name: SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPreIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  name.vb: SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync(PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: INestedPersist.OnPrimaryKeyRequestAsync
    nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyRequestAsync(SuperOffice.Data.PKContainer)
    name: SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyRequestAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  name.vb: SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync(PKContainer)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: INestedPersist.OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnPrimaryKeyUpdateAsync(SuperOffice.Data.PKContainer)
    name: SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnPrimaryKeyUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.PKContainer
    name: PKContainer
    nameWithType: PKContainer
    fullName: SuperOffice.Data.PKContainer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnIdUpdateAsync()
  nameWithType: NestedPersist.INestedPersist.OnIdUpdateAsync()
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  name.vb: SuperOffice.Data.INestedPersist.OnIdUpdateAsync()
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
    name: INestedPersist.OnIdUpdateAsync
    nameWithType: NestedPersist.INestedPersist.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnIdUpdateAsync
    name: SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnIdUpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnSaveAsync(BatchSave)
  nameWithType: NestedPersist.INestedPersist.OnSaveAsync(BatchSave)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync(BatchSave)
  name.vb: SuperOffice.Data.INestedPersist.OnSaveAsync(BatchSave)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: INestedPersist.OnSaveAsync
    nameWithType: NestedPersist.INestedPersist.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSaveAsync(SuperOffice.Data.SQL.BatchSave)
    name: SuperOffice.Data.INestedPersist.OnSaveAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSaveAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.BatchSave
    name: BatchSave
    nameWithType: BatchSave
    fullName: SuperOffice.Data.SQL.BatchSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  commentId: M:SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: INestedPersist.OnSavedAsync(Boolean)
  nameWithType: NestedPersist.INestedPersist.OnSavedAsync(Boolean)
  fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync(System.Boolean)
  nameWithType.vb: NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync(Boolean)
  name.vb: SuperOffice.Data.INestedPersist.OnSavedAsync(Boolean)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
    name: INestedPersist.OnSavedAsync
    nameWithType: NestedPersist.INestedPersist.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.SuperOffice#Data#INestedPersist#OnSavedAsync(System.Boolean)
    name: SuperOffice.Data.INestedPersist.OnSavedAsync
    nameWithType: NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    fullName: SuperOffice.Data.NestedPersist.SuperOffice.Data.INestedPersist.OnSavedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  commentId: M:SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: add_OnElementSaved(OnSaved)
  nameWithType: NestedPersist.add_OnElementSaved(OnSaved)
  fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
    name: add_OnElementSaved
    nameWithType: NestedPersist.add_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementSaved(SuperOffice.Data.OnSaved)
    name: add_OnElementSaved
    nameWithType: NestedPersist.add_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.add_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  commentId: M:SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: remove_OnElementSaved(OnSaved)
  nameWithType: NestedPersist.remove_OnElementSaved(OnSaved)
  fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
    name: remove_OnElementSaved
    nameWithType: NestedPersist.remove_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementSaved(SuperOffice.Data.OnSaved)
    name: remove_OnElementSaved
    nameWithType: NestedPersist.remove_OnElementSaved
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementSaved
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnSaved
    name: OnSaved
    nameWithType: OnSaved
    fullName: SuperOffice.Data.OnSaved
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  commentId: M:SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: add_OnElementIdUpdate(OnIdUpdate)
  nameWithType: NestedPersist.add_OnElementIdUpdate(OnIdUpdate)
  fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: add_OnElementIdUpdate
    nameWithType: NestedPersist.add_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: add_OnElementIdUpdate
    nameWithType: NestedPersist.add_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.add_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  commentId: M:SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: remove_OnElementIdUpdate(OnIdUpdate)
  nameWithType: NestedPersist.remove_OnElementIdUpdate(OnIdUpdate)
  fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
  spec.csharp:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: remove_OnElementIdUpdate
    nameWithType: NestedPersist.remove_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate(SuperOffice.Data.OnIdUpdate)
    name: remove_OnElementIdUpdate
    nameWithType: NestedPersist.remove_OnElementIdUpdate
    fullName: SuperOffice.Data.NestedPersist.remove_OnElementIdUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.OnIdUpdate
    name: OnIdUpdate
    nameWithType: OnIdUpdate
    fullName: SuperOffice.Data.OnIdUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.NestedPersist.IsSaving
  commentId: P:SuperOffice.Data.NestedPersist.IsSaving
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: IsSaving
  nameWithType: NestedPersist.IsSaving
  fullName: SuperOffice.Data.NestedPersist.IsSaving
- uid: SuperOffice.Data.NestedPersist.OnElementSaved
  commentId: E:SuperOffice.Data.NestedPersist.OnElementSaved
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: OnElementSaved
  nameWithType: NestedPersist.OnElementSaved
  fullName: SuperOffice.Data.NestedPersist.OnElementSaved
- uid: SuperOffice.Data.NestedPersist.OnElementIdUpdate
  commentId: E:SuperOffice.Data.NestedPersist.OnElementIdUpdate
  parent: SuperOffice.Data.NestedPersist
  isExternal: true
  name: OnElementIdUpdate
  nameWithType: NestedPersist.OnElementIdUpdate
  fullName: SuperOffice.Data.NestedPersist.OnElementIdUpdate
- uid: SuperOffice.CRM.Rows.TicketRows.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<TicketRows, To>()
  nameWithType: EnumUtil.MapEnums<TicketRows, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Rows.TicketRows, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of TicketRows, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Rows.TicketRows, To)()
  name.vb: MapEnums(Of TicketRows, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<TicketRows, To>
    nameWithType: EnumUtil.MapEnums<TicketRows, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Rows.TicketRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of TicketRows, To)
    nameWithType: EnumUtil.MapEnums(Of TicketRows, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Rows.TicketRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRows.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<TicketRows, To>()
  nameWithType: Converters.MapEnums<TicketRows, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Rows.TicketRows, To>()
  nameWithType.vb: Converters.MapEnums(Of TicketRows, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Rows.TicketRows, To)()
  name.vb: MapEnums(Of TicketRows, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<TicketRows, To>
    nameWithType: Converters.MapEnums<TicketRows, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Rows.TicketRows, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of TicketRows, To)
    nameWithType: Converters.MapEnums(Of TicketRows, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Rows.TicketRows, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Rows.TicketRows.ForEach*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.ForEach
  isExternal: true
  name: ForEach
  nameWithType: TicketRows.ForEach
  fullName: SuperOffice.CRM.Rows.TicketRows.ForEach
- uid: System.Action{SuperOffice.CRM.Rows.TicketRow}
  commentId: '!:System.Action{SuperOffice.CRM.Rows.TicketRow}'
  definition: System.Action`1
  name: Action<TicketRow>
  nameWithType: Action<TicketRow>
  fullName: System.Action<SuperOffice.CRM.Rows.TicketRow>
  nameWithType.vb: Action(Of TicketRow)
  fullName.vb: System.Action(Of SuperOffice.CRM.Rows.TicketRow)
  name.vb: Action(Of TicketRow)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRows.Find*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.Find
  isExternal: true
  name: Find
  nameWithType: TicketRows.Find
  fullName: SuperOffice.CRM.Rows.TicketRows.Find
- uid: System.Predicate{SuperOffice.CRM.Rows.TicketRow}
  commentId: '!:System.Predicate{SuperOffice.CRM.Rows.TicketRow}'
  definition: System.Predicate`1
  name: Predicate<TicketRow>
  nameWithType: Predicate<TicketRow>
  fullName: System.Predicate<SuperOffice.CRM.Rows.TicketRow>
  nameWithType.vb: Predicate(Of TicketRow)
  fullName.vb: System.Predicate(Of SuperOffice.CRM.Rows.TicketRow)
  name.vb: Predicate(Of TicketRow)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRow
  commentId: T:SuperOffice.CRM.Rows.TicketRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TicketRow
  nameWithType: TicketRow
  fullName: SuperOffice.CRM.Rows.TicketRow
- uid: System.Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRows.FindAll*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.FindAll
  isExternal: true
  name: FindAll
  nameWithType: TicketRows.FindAll
  fullName: SuperOffice.CRM.Rows.TicketRows.FindAll
- uid: SuperOffice.CRM.Rows.TicketRows
  commentId: T:SuperOffice.CRM.Rows.TicketRows
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TicketRows
  nameWithType: TicketRows
  fullName: SuperOffice.CRM.Rows.TicketRows
- uid: SuperOffice.CRM.Rows.TicketRows.CreateNew*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.CreateNew
  isExternal: true
  name: CreateNew
  nameWithType: TicketRows.CreateNew
  fullName: SuperOffice.CRM.Rows.TicketRows.CreateNew
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync
  isExternal: true
  name: GetFromCustomSearchAsync
  nameWithType: TicketRows.GetFromCustomSearchAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromCustomSearchAsync
- uid: SuperOffice.CRM.Rows.TicketRows.CustomSearch
  commentId: T:SuperOffice.CRM.Rows.TicketRows.CustomSearch
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TicketRows.CustomSearch
  nameWithType: TicketRows.CustomSearch
  fullName: SuperOffice.CRM.Rows.TicketRows.CustomSearch
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.CRM.Rows.TicketRows}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TicketRows>
  nameWithType: Task<TicketRows>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Rows.TicketRows>
  nameWithType.vb: Task(Of TicketRows)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Rows.TicketRows)
  name.vb: Task(Of TicketRows)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.TicketRows
    name: TicketRows
    nameWithType: TicketRows
    fullName: SuperOffice.CRM.Rows.TicketRows
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.TicketRows
    name: TicketRows
    nameWithType: TicketRows
    fullName: SuperOffice.CRM.Rows.TicketRows
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync
  isExternal: true
  name: GetFromIdxConnectIdAsync
  nameWithType: TicketRows.GetFromIdxConnectIdAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxConnectIdAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync
  isExternal: true
  name: GetFromIdxCreatedAtAsync
  nameWithType: TicketRows.GetFromIdxCreatedAtAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedAtAsync
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync
  isExternal: true
  name: GetFromIdxCreatedByAsync
  nameWithType: TicketRows.GetFromIdxCreatedByAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync
  isExternal: true
  name: GetFromIdxOwnedByAsync
  nameWithType: TicketRows.GetFromIdxOwnedByAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOwnedByAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync
  isExternal: true
  name: GetFromIdxCategoryAsync
  nameWithType: TicketRows.GetFromIdxCategoryAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCategoryAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync
  isExternal: true
  name: GetFromIdxOrigCategoryAsync
  nameWithType: TicketRows.GetFromIdxOrigCategoryAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigCategoryAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync
  isExternal: true
  name: GetFromIdxStatusAsync
  nameWithType: TicketRows.GetFromIdxStatusAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxStatusAsync
- uid: SuperOffice.Data.TicketBaseStatus
  commentId: T:SuperOffice.Data.TicketBaseStatus
  parent: SuperOffice.Data
  isExternal: true
  name: TicketBaseStatus
  nameWithType: TicketBaseStatus
  fullName: SuperOffice.Data.TicketBaseStatus
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync
  isExternal: true
  name: GetFromIdxTicketStatusAsync
  nameWithType: TicketRows.GetFromIdxTicketStatusAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketStatusAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync
  isExternal: true
  name: GetFromIdxCustIdAsync
  nameWithType: TicketRows.GetFromIdxCustIdAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCustIdAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync
  isExternal: true
  name: GetFromIdxPriorityAsync
  nameWithType: TicketRows.GetFromIdxPriorityAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxPriorityAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync
  isExternal: true
  name: GetFromIdxOrigPriorityAsync
  nameWithType: TicketRows.GetFromIdxOrigPriorityAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxOrigPriorityAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync
  isExternal: true
  name: GetFromIdxAlertTimeoutAsync
  nameWithType: TicketRows.GetFromIdxAlertTimeoutAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxAlertTimeoutAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync
  isExternal: true
  name: GetFromIdxFilterIdAsync
  nameWithType: TicketRows.GetFromIdxFilterIdAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxFilterIdAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync
  isExternal: true
  name: GetFromIdxReadStatusAsync
  nameWithType: TicketRows.GetFromIdxReadStatusAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxReadStatusAsync
- uid: SuperOffice.Data.TicketReadStatus
  commentId: T:SuperOffice.Data.TicketReadStatus
  parent: SuperOffice.Data
  isExternal: true
  name: TicketReadStatus
  nameWithType: TicketReadStatus
  fullName: SuperOffice.Data.TicketReadStatus
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync
  isExternal: true
  name: GetFromIdxDbiAgentIdAsync
  nameWithType: TicketRows.GetFromIdxDbiAgentIdAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiAgentIdAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync
  isExternal: true
  name: GetFromIdxDbiKeyAsync
  nameWithType: TicketRows.GetFromIdxDbiKeyAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiKeyAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync
  isExternal: true
  name: GetFromIdxDbiLastSyncronizedAsync
  nameWithType: TicketRows.GetFromIdxDbiLastSyncronizedAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastSyncronizedAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync
  isExternal: true
  name: GetFromIdxDbiLastModifiedAsync
  nameWithType: TicketRows.GetFromIdxDbiLastModifiedAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxDbiLastModifiedAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync
  isExternal: true
  name: GetFromIdxTagsAsync
  nameWithType: TicketRows.GetFromIdxTagsAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTagsAsync
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync
  isExternal: true
  name: GetFromIdxCreatedByWorkflowIdAsync
  nameWithType: TicketRows.GetFromIdxCreatedByWorkflowIdAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxCreatedByWorkflowIdAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync
  isExternal: true
  name: GetFromIdxTicketTypeAsync
  nameWithType: TicketRows.GetFromIdxTicketTypeAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromIdxTicketTypeAsync
- uid: SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync
  isExternal: true
  name: GetFromReaderAsync
  nameWithType: TicketRows.GetFromReaderAsync
  fullName: SuperOffice.CRM.Rows.TicketRows.GetFromReaderAsync
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: SuperOffice.CRM.Data.TicketTableInfo
  commentId: T:SuperOffice.CRM.Data.TicketTableInfo
  parent: SuperOffice.CRM.Data
  isExternal: true
  name: TicketTableInfo
  nameWithType: TicketTableInfo
  fullName: SuperOffice.CRM.Data.TicketTableInfo
- uid: SuperOffice.CRM.Data
  commentId: N:SuperOffice.CRM.Data
  isExternal: true
  name: SuperOffice.CRM.Data
  nameWithType: SuperOffice.CRM.Data
  fullName: SuperOffice.CRM.Data
- uid: SuperOffice.CRM.Rows.TicketRows.Add*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.Add
  isExternal: true
  name: Add
  nameWithType: TicketRows.Add
  fullName: SuperOffice.CRM.Rows.TicketRows.Add
- uid: SuperOffice.CRM.Rows.TicketRows.AddRange*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.AddRange
  isExternal: true
  name: AddRange
  nameWithType: TicketRows.AddRange
  fullName: SuperOffice.CRM.Rows.TicketRows.AddRange
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.TicketRow}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TicketRow>
  nameWithType: IEnumerable<TicketRow>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.TicketRow>
  nameWithType.vb: IEnumerable(Of TicketRow)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.TicketRow)
  name.vb: IEnumerable(Of TicketRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRows.AddNew*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.AddNew
  isExternal: true
  name: AddNew
  nameWithType: TicketRows.AddNew
  fullName: SuperOffice.CRM.Rows.TicketRows.AddNew
- uid: SuperOffice.CRM.Rows.TicketRows.Remove*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.Remove
  isExternal: true
  name: Remove
  nameWithType: TicketRows.Remove
  fullName: SuperOffice.CRM.Rows.TicketRows.Remove
- uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  commentId: M:SuperOffice.CRM.Rows.TableRowsBase.CreateChild
  parent: SuperOffice.CRM.Rows.TableRowsBase
  isExternal: true
  name: CreateChild()
  nameWithType: TableRowsBase.CreateChild()
  fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    name: CreateChild
    nameWithType: TableRowsBase.CreateChild
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    name: CreateChild
    nameWithType: TableRowsBase.CreateChild
    fullName: SuperOffice.CRM.Rows.TableRowsBase.CreateChild
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.TicketRows.CreateChild*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.CreateChild
  isExternal: true
  name: CreateChild
  nameWithType: TicketRows.CreateChild
  fullName: SuperOffice.CRM.Rows.TicketRows.CreateChild
- uid: SuperOffice.CRM.Rows.TableRowBase
  commentId: T:SuperOffice.CRM.Rows.TableRowBase
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: TableRowBase
  nameWithType: TableRowBase
  fullName: SuperOffice.CRM.Rows.TableRowBase
- uid: SuperOffice.CRM.Rows.TicketRows.ToArray*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.ToArray
  isExternal: true
  name: ToArray
  nameWithType: TicketRows.ToArray
  fullName: SuperOffice.CRM.Rows.TicketRows.ToArray
- uid: SuperOffice.CRM.Rows.TicketRow[]
  isExternal: true
  name: TicketRow[]
  nameWithType: TicketRow[]
  fullName: SuperOffice.CRM.Rows.TicketRow[]
  nameWithType.vb: TicketRow()
  fullName.vb: SuperOffice.CRM.Rows.TicketRow()
  name.vb: TicketRow()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Rows.TicketRow
    name: TicketRow
    nameWithType: TicketRow
    fullName: SuperOffice.CRM.Rows.TicketRow
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Rows.TicketRows.ToString*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.ToString
  isExternal: true
  name: ToString
  nameWithType: TicketRows.ToString
  fullName: SuperOffice.CRM.Rows.TicketRows.ToString
- uid: SuperOffice.CRM.Rows.TicketRows.Item*
  commentId: Overload:SuperOffice.CRM.Rows.TicketRows.Item
  isExternal: true
  name: Item
  nameWithType: TicketRows.Item
  fullName: SuperOffice.CRM.Rows.TicketRows.Item
