### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  commentId: T:SuperOffice.CRM.Data.ModuleOwnerTableInfo
  id: ModuleOwnerTableInfo
  parent: SuperOffice.CRM.Data
  children:
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableName
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount
  langs:
  - csharp
  - vb
  name: ModuleOwnerTableInfo
  nameWithType: ModuleOwnerTableInfo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nTable &apos;ModuleOwner&apos;: Unique owner of a set of licensed modules\n"
  remarks: "\nAn instance of this class represents one instance of this table in an SQL statement. In most\ncases each table appears only once in a SELECT, but in cases where you need to self-join, or\nthere are multiple occurrences for other reasons (typically additional restrictions in the joins),\nthen you will need multiple instances. <br />\nInstances of this class are created by calling <see cref=\"!:TablesInfo.GetModuleOwnerInfo()\"></see>.\n"
  syntax:
    content: >-
      [DatabaseTable("ModuleOwner")]

      public class ModuleOwnerTableInfo : TableInfo, ICloneable
    content.vb: >-
      <DatabaseTable("ModuleOwner")>

      Public Class ModuleOwnerTableInfo
          Inherits TableInfo
          Implements ICloneable
  inheritance:
  - System.Object
  - SuperOffice.Data.SQL.TableInfo
  implements:
  - System.ICloneable
  inheritedMembers:
  - SuperOffice.Data.SQL.TableInfo.ToString
  - SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo[])
  - SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField(SuperOffice.Data.Dictionary.SoField)
  - SuperOffice.Data.SQL.TableInfo.Clone
  - SuperOffice.Data.SQL.TableInfo.IsSameTable(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.SQL.TableInfo.FindField(System.String)
  - SuperOffice.Data.SQL.TableInfo.ProtAll
  - SuperOffice.Data.SQL.TableInfo.HashCheckFields
  - SuperOffice.Data.SQL.TableInfo.TableName
  - SuperOffice.Data.SQL.TableInfo.DbName
  - SuperOffice.Data.SQL.TableInfo.IsDictionaryTable
  - SuperOffice.Data.SQL.TableInfo.All
  - SuperOffice.Data.SQL.TableInfo.Item(System.String)
  - SuperOffice.Data.SQL.TableInfo.PrimaryKeyField
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Data.ModuleOwnerTableInfo.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Data.SQL.DatabaseTableAttribute
    ctor: SuperOffice.Data.SQL.DatabaseTableAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ModuleOwner
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableName
  commentId: F:SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableName
  id: DictionaryTableName
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: DictionaryTableName
  nameWithType: ModuleOwnerTableInfo.DictionaryTableName
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableName
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nConceptual name of table ModuleOwner in the database dictionary: ModuleOwner\n"
  syntax:
    content: public const string DictionaryTableName = "ModuleOwner"
    return:
      type: System.String
    content.vb: Public Const DictionaryTableName As String = "ModuleOwner"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber
  id: DictionaryTableNumber
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: DictionaryTableNumber
  nameWithType: ModuleOwnerTableInfo.DictionaryTableNumber
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nTable number for table ModuleOwner in the database dictionary; potentially changes between databases, but\nalways the same over the lifetime of any single database\n"
  syntax:
    content: public int DictionaryTableNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DictionaryTableNumber As Integer
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition
  id: RuntimeDefinition
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: RuntimeDefinition
  nameWithType: ModuleOwnerTableInfo.RuntimeDefinition
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nDefinition of the table as described in the deployed runtime dictionary\n"
  syntax:
    content: >-
      [Obsolete("Use instance property Definition or static member DictionaryTableNumber", true)]

      public static SoTable RuntimeDefinition { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.SoTable
    content.vb: >-
      <Obsolete("Use instance property Definition or static member DictionaryTableNumber", True)>

      Public Shared ReadOnly Property RuntimeDefinition As SoTable
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Use instance property Definition or static member DictionaryTableNumber
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition
  id: Definition
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: Definition
  nameWithType: ModuleOwnerTableInfo.Definition
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nDefinition of the table as described in the deployed runtime dictionary\n"
  syntax:
    content: public override SoTable Definition { get; }
    parameters: []
    return:
      type: SuperOffice.Data.Dictionary.SoTable
    content.vb: Public Overrides ReadOnly Property Definition As SoTable
  overridden: SuperOffice.Data.SQL.TableInfo.Definition
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId
  id: ModuleOwnerId
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: ModuleOwnerId
  nameWithType: ModuleOwnerTableInfo.ModuleOwnerId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;ModuleOwner_id&apos; in table &apos;ModuleOwner&apos;: Dictionary type PK, .NET type: <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nPrimary key\n"
  syntax:
    content: public Int32FieldInfo ModuleOwnerId { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.Int32FieldInfo
    content.vb: Public ReadOnly Property ModuleOwnerId As Int32FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName
  id: OwnerName
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: OwnerName
  nameWithType: ModuleOwnerTableInfo.OwnerName
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;ownerName&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[240], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\n"
  syntax:
    content: public StringFieldInfo OwnerName { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property OwnerName As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription
  id: OwnerDescription
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: OwnerDescription
  nameWithType: ModuleOwnerTableInfo.OwnerDescription
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;ownerDescription&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nHuman-readable description of owner, shown in GUI, default language. Additional languages can be added to LocaleText, resource type 26\n"
  syntax:
    content: public StringFieldInfo OwnerDescription { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property OwnerDescription As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl
  id: LicenseUrl
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: LicenseUrl
  nameWithType: ModuleOwnerTableInfo.LicenseUrl
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;licenseUrl&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nThe url that will provide keycodes for all modules owned by this owner\n"
  syntax:
    content: public StringFieldInfo LicenseUrl { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property LicenseUrl As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion
  id: LicenseVersion
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: LicenseVersion
  nameWithType: ModuleOwnerTableInfo.LicenseVersion
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;licenseVersion&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nThe url that will provide keycodes for all modules owned by this owner\n"
  syntax:
    content: public StringFieldInfo LicenseVersion { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property LicenseVersion As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey
  id: SignedPublicKey
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: SignedPublicKey
  nameWithType: ModuleOwnerTableInfo.SignedPublicKey
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;signedPublicKey&apos; in table &apos;ModuleOwner&apos;: Dictionary type Blob, .NET type: <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nThe public key used to verify licenses owned by this owner\n"
  syntax:
    content: public FieldInfo SignedPublicKey { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public ReadOnly Property SignedPublicKey As FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature
  id: Signature
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: Signature
  nameWithType: ModuleOwnerTableInfo.Signature
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;signature&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nSignature of all non-zero-amount moduleLicense rows referring to this owner\n"
  syntax:
    content: public StringFieldInfo Signature { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property Signature As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType
  id: DeploymentType
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: DeploymentType
  nameWithType: ModuleOwnerTableInfo.DeploymentType
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;deploymentType&apos; in table &apos;ModuleOwner&apos;: Dictionary type Id, .NET type: <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nType of deployment\n"
  syntax:
    content: public Int32FieldInfo DeploymentType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.Int32FieldInfo
    content.vb: Public ReadOnly Property DeploymentType As Int32FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType
  id: ProductType
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: ProductType
  nameWithType: ModuleOwnerTableInfo.ProductType
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;productType&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nType of product\n"
  syntax:
    content: public StringFieldInfo ProductType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property ProductType As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription
  id: ProductTypeDescription
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: ProductTypeDescription
  nameWithType: ModuleOwnerTableInfo.ProductTypeDescription
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;productTypeDescription&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nDescription of type of product\n"
  syntax:
    content: public StringFieldInfo ProductTypeDescription { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property ProductTypeDescription As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags
  id: ExtraFlags
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: ExtraFlags
  nameWithType: ModuleOwnerTableInfo.ExtraFlags
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;extraFlags&apos; in table &apos;ModuleOwner&apos;: Dictionary type UInt, .NET type: <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nUnspecified extra flags of license, part of checksum\n"
  syntax:
    content: public FieldInfo ExtraFlags { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public ReadOnly Property ExtraFlags As FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo
  id: ExtraInfo
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: ExtraInfo
  nameWithType: ModuleOwnerTableInfo.ExtraInfo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;extraInfo&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nFree field, can be used by the module owner (example: host domain, for eJournal)\n"
  syntax:
    content: public StringFieldInfo ExtraInfo { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property ExtraInfo As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration
  id: Expiration
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: Expiration
  nameWithType: ModuleOwnerTableInfo.Expiration
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;expiration&apos; in table &apos;ModuleOwner&apos;: Dictionary type DateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nExpiration date, 0 = forever\n"
  syntax:
    content: public DateTimeFieldInfo Expiration { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property Expiration As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo
  id: GraceTo
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: GraceTo
  nameWithType: ModuleOwnerTableInfo.GraceTo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;graceTo&apos; in table &apos;ModuleOwner&apos;: Dictionary type DateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nReal expiration date, when the given module actually stops working. Modules that normally update data should switch to read-only mode. Modules that only read anyway, should disable themselves in some other way\n"
  syntax:
    content: public DateTimeFieldInfo GraceTo { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property GraceTo As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo
  id: MaintenanceTo
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: MaintenanceTo
  nameWithType: ModuleOwnerTableInfo.MaintenanceTo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;maintenanceTo&apos; in table &apos;ModuleOwner&apos;: Dictionary type DateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nExpiration date for maintenance. After this date, upgrades should refuse to install.\n"
  syntax:
    content: public DateTimeFieldInfo MaintenanceTo { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property MaintenanceTo As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate
  id: NextCheckDate
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: NextCheckDate
  nameWithType: ModuleOwnerTableInfo.NextCheckDate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;nextCheckDate&apos; in table &apos;ModuleOwner&apos;: Dictionary type DateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nWhen should the system next check with the license issuer\n"
  syntax:
    content: public DateTimeFieldInfo NextCheckDate { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property NextCheckDate As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate
  id: AdminWarningDate
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: AdminWarningDate
  nameWithType: ModuleOwnerTableInfo.AdminWarningDate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;adminWarningDate&apos; in table &apos;ModuleOwner&apos;: Dictionary type DateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nWhen should nagging begin (for instance, during login to SoAdmin)\n"
  syntax:
    content: public DateTimeFieldInfo AdminWarningDate { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property AdminWarningDate As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck
  id: EncryptedCheck
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: EncryptedCheck
  nameWithType: ModuleOwnerTableInfo.EncryptedCheck
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;encryptedCheck&apos; in table &apos;ModuleOwner&apos;: Dictionary type String[255], .NET type: <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nEncrypted checksum that stops tampering and copying between databases\n"
  syntax:
    content: public StringFieldInfo EncryptedCheck { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.StringFieldInfo
    content.vb: Public ReadOnly Property EncryptedCheck As StringFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered
  id: Registered
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: Registered
  nameWithType: ModuleOwnerTableInfo.Registered
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;registered&apos; in table &apos;ModuleOwner&apos;: Dictionary type UtcDateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nRegistered when\n"
  syntax:
    content: public DateTimeFieldInfo Registered { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property Registered As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId
  id: RegisteredAssociateId
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: RegisteredAssociateId
  nameWithType: ModuleOwnerTableInfo.RegisteredAssociateId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;registered_associate_id&apos; in table &apos;ModuleOwner&apos;: Dictionary type FK, .NET type: <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nRegistered by whom\n"
  syntax:
    content: public Int32FieldInfo RegisteredAssociateId { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.Int32FieldInfo
    content.vb: Public ReadOnly Property RegisteredAssociateId As Int32FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated
  id: Updated
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: Updated
  nameWithType: ModuleOwnerTableInfo.Updated
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;updated&apos; in table &apos;ModuleOwner&apos;: Dictionary type UtcDateTime, .NET type: <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nLast updated when\n"
  syntax:
    content: public DateTimeFieldInfo Updated { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.DateTimeFieldInfo
    content.vb: Public ReadOnly Property Updated As DateTimeFieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId
  id: UpdatedAssociateId
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: UpdatedAssociateId
  nameWithType: ModuleOwnerTableInfo.UpdatedAssociateId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;updated_associate_id&apos; in table &apos;ModuleOwner&apos;: Dictionary type FK, .NET type: <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nLast updated by whom\n"
  syntax:
    content: public Int32FieldInfo UpdatedAssociateId { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.Int32FieldInfo
    content.vb: Public ReadOnly Property UpdatedAssociateId As Int32FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount
  id: UpdatedCount
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: UpdatedCount
  nameWithType: ModuleOwnerTableInfo.UpdatedCount
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nField &apos;updatedCount&apos; in table &apos;ModuleOwner&apos;: Dictionary type UShort, .NET type: <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref><p></p>\nNumber of updates made to this record\n"
  syntax:
    content: public UInt16FieldInfo UpdatedCount { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.UInt16FieldInfo
    content.vb: Public ReadOnly Property UpdatedCount As UInt16FieldInfo
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  id: RegisteredAssociateId_InnerJoin_Associate
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: RegisteredAssociateId_InnerJoin_Associate
  nameWithType: ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nGenerated join from the foreign key RegisteredAssociateId in this table, to its target table <xref href=\"SuperOffice.CRM.Data.AssociateTableInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public TargetedInnerJoin<AssociateTableInfo> RegisteredAssociateId_InnerJoin_Associate { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.TargetedInnerJoin{SuperOffice.CRM.Data.AssociateTableInfo}
    content.vb: Public ReadOnly Property RegisteredAssociateId_InnerJoin_Associate As TargetedInnerJoin(Of AssociateTableInfo)
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  id: UpdatedAssociateId_InnerJoin_Associate
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: UpdatedAssociateId_InnerJoin_Associate
  nameWithType: ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nGenerated join from the foreign key UpdatedAssociateId in this table, to its target table <xref href=\"SuperOffice.CRM.Data.AssociateTableInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public TargetedInnerJoin<AssociateTableInfo> UpdatedAssociateId_InnerJoin_Associate { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.TargetedInnerJoin{SuperOffice.CRM.Data.AssociateTableInfo}
    content.vb: Public ReadOnly Property UpdatedAssociateId_InnerJoin_Associate As TargetedInnerJoin(Of AssociateTableInfo)
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  commentId: P:SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  id: LeftOuterJoin_ModuleLicense_ModuleOwnerId
  parent: SuperOffice.CRM.Data.ModuleOwnerTableInfo
  langs:
  - csharp
  - vb
  name: LeftOuterJoin_ModuleLicense_ModuleOwnerId
  nameWithType: ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Data
  summary: "\nGenerated left outer join from the primary key ModuleOwnerId on this table, to ModuleLicense.<xref href=\"SuperOffice.CRM.Data.ModuleLicenseTableInfo.ModuleOwnerId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public TargetedLeftOuterJoin<ModuleLicenseTableInfo> LeftOuterJoin_ModuleLicense_ModuleOwnerId { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.TargetedLeftOuterJoin{SuperOffice.CRM.Data.ModuleLicenseTableInfo}
    content.vb: Public ReadOnly Property LeftOuterJoin_ModuleLicense_ModuleOwnerId As TargetedLeftOuterJoin(Of ModuleLicenseTableInfo)
  overload: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.Data
  commentId: N:SuperOffice.CRM.Data
  isExternal: true
  name: SuperOffice.CRM.Data
  nameWithType: SuperOffice.CRM.Data
  fullName: SuperOffice.CRM.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: SuperOffice.Data.SQL.TableInfo.ToString
  commentId: M:SuperOffice.Data.SQL.TableInfo.ToString
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: ToString()
  nameWithType: TableInfo.ToString()
  fullName: SuperOffice.Data.SQL.TableInfo.ToString()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.ToString
    name: ToString
    nameWithType: TableInfo.ToString
    fullName: SuperOffice.Data.SQL.TableInfo.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.ToString
    name: ToString
    nameWithType: TableInfo.ToString
    fullName: SuperOffice.Data.SQL.TableInfo.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo[])
  commentId: M:SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo[])
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: RegisterFields(FieldInfo[])
  nameWithType: TableInfo.RegisterFields(FieldInfo[])
  fullName: SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo[])
  nameWithType.vb: TableInfo.RegisterFields(FieldInfo())
  fullName.vb: SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo())
  name.vb: RegisterFields(FieldInfo())
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo[])
    name: RegisterFields
    nameWithType: TableInfo.RegisterFields
    fullName: SuperOffice.Data.SQL.TableInfo.RegisterFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.RegisterFields(SuperOffice.Data.SQL.FieldInfo[])
    name: RegisterFields
    nameWithType: TableInfo.RegisterFields
    fullName: SuperOffice.Data.SQL.TableInfo.RegisterFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField(SuperOffice.Data.Dictionary.SoField)
  commentId: M:SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField(SuperOffice.Data.Dictionary.SoField)
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: FieldInfoFromSoField(SoField)
  nameWithType: TableInfo.FieldInfoFromSoField(SoField)
  fullName: SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField(SuperOffice.Data.Dictionary.SoField)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField(SuperOffice.Data.Dictionary.SoField)
    name: FieldInfoFromSoField
    nameWithType: TableInfo.FieldInfoFromSoField
    fullName: SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField(SuperOffice.Data.Dictionary.SoField)
    name: FieldInfoFromSoField
    nameWithType: TableInfo.FieldInfoFromSoField
    fullName: SuperOffice.Data.SQL.TableInfo.FieldInfoFromSoField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.Dictionary.SoField
    name: SoField
    nameWithType: SoField
    fullName: SuperOffice.Data.Dictionary.SoField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.Clone
  commentId: M:SuperOffice.Data.SQL.TableInfo.Clone
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: Clone()
  nameWithType: TableInfo.Clone()
  fullName: SuperOffice.Data.SQL.TableInfo.Clone()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.Clone
    name: Clone
    nameWithType: TableInfo.Clone
    fullName: SuperOffice.Data.SQL.TableInfo.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.Clone
    name: Clone
    nameWithType: TableInfo.Clone
    fullName: SuperOffice.Data.SQL.TableInfo.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.IsSameTable(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.SQL.TableInfo.IsSameTable(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: IsSameTable(TableInfo)
  nameWithType: TableInfo.IsSameTable(TableInfo)
  fullName: SuperOffice.Data.SQL.TableInfo.IsSameTable(SuperOffice.Data.SQL.TableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.IsSameTable(SuperOffice.Data.SQL.TableInfo)
    name: IsSameTable
    nameWithType: TableInfo.IsSameTable
    fullName: SuperOffice.Data.SQL.TableInfo.IsSameTable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.IsSameTable(SuperOffice.Data.SQL.TableInfo)
    name: IsSameTable
    nameWithType: TableInfo.IsSameTable
    fullName: SuperOffice.Data.SQL.TableInfo.IsSameTable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.Data.SQL.TableInfo
    name: TableInfo
    nameWithType: TableInfo
    fullName: SuperOffice.Data.SQL.TableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.FindField(System.String)
  commentId: M:SuperOffice.Data.SQL.TableInfo.FindField(System.String)
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: FindField(String)
  nameWithType: TableInfo.FindField(String)
  fullName: SuperOffice.Data.SQL.TableInfo.FindField(System.String)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.FindField(System.String)
    name: FindField
    nameWithType: TableInfo.FindField
    fullName: SuperOffice.Data.SQL.TableInfo.FindField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.FindField(System.String)
    name: FindField
    nameWithType: TableInfo.FindField
    fullName: SuperOffice.Data.SQL.TableInfo.FindField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.ProtAll
  commentId: P:SuperOffice.Data.SQL.TableInfo.ProtAll
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: ProtAll
  nameWithType: TableInfo.ProtAll
  fullName: SuperOffice.Data.SQL.TableInfo.ProtAll
- uid: SuperOffice.Data.SQL.TableInfo.HashCheckFields
  commentId: P:SuperOffice.Data.SQL.TableInfo.HashCheckFields
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: HashCheckFields
  nameWithType: TableInfo.HashCheckFields
  fullName: SuperOffice.Data.SQL.TableInfo.HashCheckFields
- uid: SuperOffice.Data.SQL.TableInfo.TableName
  commentId: P:SuperOffice.Data.SQL.TableInfo.TableName
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: TableName
  nameWithType: TableInfo.TableName
  fullName: SuperOffice.Data.SQL.TableInfo.TableName
- uid: SuperOffice.Data.SQL.TableInfo.DbName
  commentId: P:SuperOffice.Data.SQL.TableInfo.DbName
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: DbName
  nameWithType: TableInfo.DbName
  fullName: SuperOffice.Data.SQL.TableInfo.DbName
- uid: SuperOffice.Data.SQL.TableInfo.IsDictionaryTable
  commentId: P:SuperOffice.Data.SQL.TableInfo.IsDictionaryTable
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: IsDictionaryTable
  nameWithType: TableInfo.IsDictionaryTable
  fullName: SuperOffice.Data.SQL.TableInfo.IsDictionaryTable
- uid: SuperOffice.Data.SQL.TableInfo.All
  commentId: P:SuperOffice.Data.SQL.TableInfo.All
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: All
  nameWithType: TableInfo.All
  fullName: SuperOffice.Data.SQL.TableInfo.All
- uid: SuperOffice.Data.SQL.TableInfo.Item(System.String)
  commentId: P:SuperOffice.Data.SQL.TableInfo.Item(System.String)
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: Item[String]
  nameWithType: TableInfo.Item[String]
  fullName: SuperOffice.Data.SQL.TableInfo.Item[System.String]
  nameWithType.vb: TableInfo.Item(String)
  fullName.vb: SuperOffice.Data.SQL.TableInfo.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TableInfo.Item(System.String)
    name: Item
    nameWithType: TableInfo.Item
    fullName: SuperOffice.Data.SQL.TableInfo.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TableInfo.Item(System.String)
    name: Item
    nameWithType: TableInfo.Item
    fullName: SuperOffice.Data.SQL.TableInfo.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TableInfo.PrimaryKeyField
  commentId: P:SuperOffice.Data.SQL.TableInfo.PrimaryKeyField
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: PrimaryKeyField
  nameWithType: TableInfo.PrimaryKeyField
  fullName: SuperOffice.Data.SQL.TableInfo.PrimaryKeyField
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<ModuleOwnerTableInfo, To>()
  nameWithType: EnumUtil.MapEnums<ModuleOwnerTableInfo, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Data.ModuleOwnerTableInfo, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of ModuleOwnerTableInfo, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Data.ModuleOwnerTableInfo, To)()
  name.vb: MapEnums(Of ModuleOwnerTableInfo, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<ModuleOwnerTableInfo, To>
    nameWithType: EnumUtil.MapEnums<ModuleOwnerTableInfo, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Data.ModuleOwnerTableInfo, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of ModuleOwnerTableInfo, To)
    nameWithType: EnumUtil.MapEnums(Of ModuleOwnerTableInfo, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Data.ModuleOwnerTableInfo, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<ModuleOwnerTableInfo, To>()
  nameWithType: Converters.MapEnums<ModuleOwnerTableInfo, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Data.ModuleOwnerTableInfo, To>()
  nameWithType.vb: Converters.MapEnums(Of ModuleOwnerTableInfo, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Data.ModuleOwnerTableInfo, To)()
  name.vb: MapEnums(Of ModuleOwnerTableInfo, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<ModuleOwnerTableInfo, To>
    nameWithType: Converters.MapEnums<ModuleOwnerTableInfo, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Data.ModuleOwnerTableInfo, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of ModuleOwnerTableInfo, To)
    nameWithType: Converters.MapEnums(Of ModuleOwnerTableInfo, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Data.ModuleOwnerTableInfo, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber
  isExternal: true
  name: DictionaryTableNumber
  nameWithType: ModuleOwnerTableInfo.DictionaryTableNumber
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DictionaryTableNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition
  isExternal: true
  name: RuntimeDefinition
  nameWithType: ModuleOwnerTableInfo.RuntimeDefinition
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RuntimeDefinition
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: SuperOffice.Data.SQL.TableInfo.Definition
  commentId: P:SuperOffice.Data.SQL.TableInfo.Definition
  parent: SuperOffice.Data.SQL.TableInfo
  isExternal: true
  name: Definition
  nameWithType: TableInfo.Definition
  fullName: SuperOffice.Data.SQL.TableInfo.Definition
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition
  isExternal: true
  name: Definition
  nameWithType: ModuleOwnerTableInfo.Definition
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Definition
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId
  isExternal: true
  name: ModuleOwnerId
  nameWithType: ModuleOwnerTableInfo.ModuleOwnerId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ModuleOwnerId
- uid: SuperOffice.Data.SQL.Int32FieldInfo
  commentId: T:SuperOffice.Data.SQL.Int32FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Int32FieldInfo
  nameWithType: Int32FieldInfo
  fullName: SuperOffice.Data.SQL.Int32FieldInfo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName
  isExternal: true
  name: OwnerName
  nameWithType: ModuleOwnerTableInfo.OwnerName
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerName
- uid: SuperOffice.Data.SQL.StringFieldInfo
  commentId: T:SuperOffice.Data.SQL.StringFieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: StringFieldInfo
  nameWithType: StringFieldInfo
  fullName: SuperOffice.Data.SQL.StringFieldInfo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription
  isExternal: true
  name: OwnerDescription
  nameWithType: ModuleOwnerTableInfo.OwnerDescription
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.OwnerDescription
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl
  isExternal: true
  name: LicenseUrl
  nameWithType: ModuleOwnerTableInfo.LicenseUrl
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseUrl
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion
  isExternal: true
  name: LicenseVersion
  nameWithType: ModuleOwnerTableInfo.LicenseVersion
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LicenseVersion
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey
  isExternal: true
  name: SignedPublicKey
  nameWithType: ModuleOwnerTableInfo.SignedPublicKey
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.SignedPublicKey
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature
  isExternal: true
  name: Signature
  nameWithType: ModuleOwnerTableInfo.Signature
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Signature
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType
  isExternal: true
  name: DeploymentType
  nameWithType: ModuleOwnerTableInfo.DeploymentType
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.DeploymentType
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType
  isExternal: true
  name: ProductType
  nameWithType: ModuleOwnerTableInfo.ProductType
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductType
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription
  isExternal: true
  name: ProductTypeDescription
  nameWithType: ModuleOwnerTableInfo.ProductTypeDescription
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ProductTypeDescription
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags
  isExternal: true
  name: ExtraFlags
  nameWithType: ModuleOwnerTableInfo.ExtraFlags
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraFlags
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo
  isExternal: true
  name: ExtraInfo
  nameWithType: ModuleOwnerTableInfo.ExtraInfo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.ExtraInfo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration
  isExternal: true
  name: Expiration
  nameWithType: ModuleOwnerTableInfo.Expiration
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Expiration
- uid: SuperOffice.Data.SQL.DateTimeFieldInfo
  commentId: T:SuperOffice.Data.SQL.DateTimeFieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: DateTimeFieldInfo
  nameWithType: DateTimeFieldInfo
  fullName: SuperOffice.Data.SQL.DateTimeFieldInfo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo
  isExternal: true
  name: GraceTo
  nameWithType: ModuleOwnerTableInfo.GraceTo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.GraceTo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo
  isExternal: true
  name: MaintenanceTo
  nameWithType: ModuleOwnerTableInfo.MaintenanceTo
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.MaintenanceTo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate
  isExternal: true
  name: NextCheckDate
  nameWithType: ModuleOwnerTableInfo.NextCheckDate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.NextCheckDate
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate
  isExternal: true
  name: AdminWarningDate
  nameWithType: ModuleOwnerTableInfo.AdminWarningDate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.AdminWarningDate
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck
  isExternal: true
  name: EncryptedCheck
  nameWithType: ModuleOwnerTableInfo.EncryptedCheck
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.EncryptedCheck
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered
  isExternal: true
  name: Registered
  nameWithType: ModuleOwnerTableInfo.Registered
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Registered
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId
  isExternal: true
  name: RegisteredAssociateId
  nameWithType: ModuleOwnerTableInfo.RegisteredAssociateId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated
  isExternal: true
  name: Updated
  nameWithType: ModuleOwnerTableInfo.Updated
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.Updated
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId
  isExternal: true
  name: UpdatedAssociateId
  nameWithType: ModuleOwnerTableInfo.UpdatedAssociateId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount
  isExternal: true
  name: UpdatedCount
  nameWithType: ModuleOwnerTableInfo.UpdatedCount
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedCount
- uid: SuperOffice.Data.SQL.UInt16FieldInfo
  commentId: T:SuperOffice.Data.SQL.UInt16FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: UInt16FieldInfo
  nameWithType: UInt16FieldInfo
  fullName: SuperOffice.Data.SQL.UInt16FieldInfo
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  isExternal: true
  name: RegisteredAssociateId_InnerJoin_Associate
  nameWithType: ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.RegisteredAssociateId_InnerJoin_Associate
- uid: SuperOffice.Data.SQL.TargetedInnerJoin{SuperOffice.CRM.Data.AssociateTableInfo}
  commentId: T:SuperOffice.Data.SQL.TargetedInnerJoin{SuperOffice.CRM.Data.AssociateTableInfo}
  parent: SuperOffice.Data.SQL
  definition: SuperOffice.Data.SQL.TargetedInnerJoin`1
  name: TargetedInnerJoin<AssociateTableInfo>
  nameWithType: TargetedInnerJoin<AssociateTableInfo>
  fullName: SuperOffice.Data.SQL.TargetedInnerJoin<SuperOffice.CRM.Data.AssociateTableInfo>
  nameWithType.vb: TargetedInnerJoin(Of AssociateTableInfo)
  fullName.vb: SuperOffice.Data.SQL.TargetedInnerJoin(Of SuperOffice.CRM.Data.AssociateTableInfo)
  name.vb: TargetedInnerJoin(Of AssociateTableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TargetedInnerJoin`1
    name: TargetedInnerJoin
    nameWithType: TargetedInnerJoin
    fullName: SuperOffice.Data.SQL.TargetedInnerJoin
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Data.AssociateTableInfo
    name: AssociateTableInfo
    nameWithType: AssociateTableInfo
    fullName: SuperOffice.CRM.Data.AssociateTableInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TargetedInnerJoin`1
    name: TargetedInnerJoin
    nameWithType: TargetedInnerJoin
    fullName: SuperOffice.Data.SQL.TargetedInnerJoin
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Data.AssociateTableInfo
    name: AssociateTableInfo
    nameWithType: AssociateTableInfo
    fullName: SuperOffice.CRM.Data.AssociateTableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TargetedInnerJoin`1
  commentId: T:SuperOffice.Data.SQL.TargetedInnerJoin`1
  isExternal: true
  name: TargetedInnerJoin<TargetTableInfo>
  nameWithType: TargetedInnerJoin<TargetTableInfo>
  fullName: SuperOffice.Data.SQL.TargetedInnerJoin<TargetTableInfo>
  nameWithType.vb: TargetedInnerJoin(Of TargetTableInfo)
  fullName.vb: SuperOffice.Data.SQL.TargetedInnerJoin(Of TargetTableInfo)
  name.vb: TargetedInnerJoin(Of TargetTableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TargetedInnerJoin`1
    name: TargetedInnerJoin
    nameWithType: TargetedInnerJoin
    fullName: SuperOffice.Data.SQL.TargetedInnerJoin
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TargetTableInfo
    nameWithType: TargetTableInfo
    fullName: TargetTableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TargetedInnerJoin`1
    name: TargetedInnerJoin
    nameWithType: TargetedInnerJoin
    fullName: SuperOffice.Data.SQL.TargetedInnerJoin
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TargetTableInfo
    nameWithType: TargetTableInfo
    fullName: TargetTableInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  isExternal: true
  name: UpdatedAssociateId_InnerJoin_Associate
  nameWithType: ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.UpdatedAssociateId_InnerJoin_Associate
- uid: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId*
  commentId: Overload:SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  isExternal: true
  name: LeftOuterJoin_ModuleLicense_ModuleOwnerId
  nameWithType: ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
  fullName: SuperOffice.CRM.Data.ModuleOwnerTableInfo.LeftOuterJoin_ModuleLicense_ModuleOwnerId
- uid: SuperOffice.Data.SQL.TargetedLeftOuterJoin{SuperOffice.CRM.Data.ModuleLicenseTableInfo}
  commentId: T:SuperOffice.Data.SQL.TargetedLeftOuterJoin{SuperOffice.CRM.Data.ModuleLicenseTableInfo}
  parent: SuperOffice.Data.SQL
  definition: SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
  name: TargetedLeftOuterJoin<ModuleLicenseTableInfo>
  nameWithType: TargetedLeftOuterJoin<ModuleLicenseTableInfo>
  fullName: SuperOffice.Data.SQL.TargetedLeftOuterJoin<SuperOffice.CRM.Data.ModuleLicenseTableInfo>
  nameWithType.vb: TargetedLeftOuterJoin(Of ModuleLicenseTableInfo)
  fullName.vb: SuperOffice.Data.SQL.TargetedLeftOuterJoin(Of SuperOffice.CRM.Data.ModuleLicenseTableInfo)
  name.vb: TargetedLeftOuterJoin(Of ModuleLicenseTableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
    name: TargetedLeftOuterJoin
    nameWithType: TargetedLeftOuterJoin
    fullName: SuperOffice.Data.SQL.TargetedLeftOuterJoin
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Data.ModuleLicenseTableInfo
    name: ModuleLicenseTableInfo
    nameWithType: ModuleLicenseTableInfo
    fullName: SuperOffice.CRM.Data.ModuleLicenseTableInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
    name: TargetedLeftOuterJoin
    nameWithType: TargetedLeftOuterJoin
    fullName: SuperOffice.Data.SQL.TargetedLeftOuterJoin
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Data.ModuleLicenseTableInfo
    name: ModuleLicenseTableInfo
    nameWithType: ModuleLicenseTableInfo
    fullName: SuperOffice.CRM.Data.ModuleLicenseTableInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
  commentId: T:SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
  isExternal: true
  name: TargetedLeftOuterJoin<TargetTableInfo>
  nameWithType: TargetedLeftOuterJoin<TargetTableInfo>
  fullName: SuperOffice.Data.SQL.TargetedLeftOuterJoin<TargetTableInfo>
  nameWithType.vb: TargetedLeftOuterJoin(Of TargetTableInfo)
  fullName.vb: SuperOffice.Data.SQL.TargetedLeftOuterJoin(Of TargetTableInfo)
  name.vb: TargetedLeftOuterJoin(Of TargetTableInfo)
  spec.csharp:
  - uid: SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
    name: TargetedLeftOuterJoin
    nameWithType: TargetedLeftOuterJoin
    fullName: SuperOffice.Data.SQL.TargetedLeftOuterJoin
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TargetTableInfo
    nameWithType: TargetTableInfo
    fullName: TargetTableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SuperOffice.Data.SQL.TargetedLeftOuterJoin`1
    name: TargetedLeftOuterJoin
    nameWithType: TargetedLeftOuterJoin
    fullName: SuperOffice.Data.SQL.TargetedLeftOuterJoin
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TargetTableInfo
    nameWithType: TargetTableInfo
    fullName: TargetTableInfo
  - name: )
    nameWithType: )
    fullName: )
