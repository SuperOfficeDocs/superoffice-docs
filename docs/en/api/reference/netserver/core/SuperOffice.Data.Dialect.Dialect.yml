### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Dialect.Dialect
  commentId: T:SuperOffice.Data.Dialect.Dialect
  id: Dialect
  parent: SuperOffice.Data.Dialect
  children:
  - SuperOffice.Data.Dialect.Dialect.#ctor
  - SuperOffice.Data.Dialect.Dialect._cmd
  - SuperOffice.Data.Dialect.Dialect._dbSchemaTable
  - SuperOffice.Data.Dialect.Dialect._filterCallbacks
  - SuperOffice.Data.Dialect.Dialect._returnArguments
  - SuperOffice.Data.Dialect.Dialect._returnDBFields
  - SuperOffice.Data.Dialect.Dialect._soSchemaTable
  - SuperOffice.Data.Dialect.Dialect._stringFieldsInOrderByWithDistinct
  - SuperOffice.Data.Dialect.Dialect._tables
  - SuperOffice.Data.Dialect.Dialect._tablesInJoin
  - SuperOffice.Data.Dialect.Dialect._usedAliases
  - SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy
  - SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase
  - SuperOffice.Data.Dialect.Dialect.CheckForAlias
  - SuperOffice.Data.Dialect.Dialect.CheckForDistinct(SuperOffice.Data.SQL.PrivateSelect)
  - SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow(System.Data.IDataReader)
  - SuperOffice.Data.Dialect.Dialect.ComposeSelect(System.String,System.String,System.String,System.String,System.Text.StringBuilder,SuperOffice.Data.SQL.PrivateSelect)
  - SuperOffice.Data.Dialect.Dialect.ConvertFromDbType(System.Object,SuperOffice.Data.FieldDataType)
  - SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType(System.Object,SuperOffice.Data.FieldDataType)
  - SuperOffice.Data.Dialect.Dialect.ConvertToDbString(System.String)
  - SuperOffice.Data.Dialect.Dialect.ConvertToDbType(System.Object,SuperOffice.Data.FieldDataType)
  - SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType
  - SuperOffice.Data.Dialect.Dialect.CurrentSqlType
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetByte(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetChar(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetChars(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetData(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetItem(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue(SuperOffice.Data.SoDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.String)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetString(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderGetValue(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  - SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal(System.DateTime)
  - SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc(System.DateTime)
  - SuperOffice.Data.Dialect.Dialect.DateToVarchar(System.String)
  - SuperOffice.Data.Dialect.Dialect.DefaultConnectionString
  - SuperOffice.Data.Dialect.Dialect.DeleteSql(SuperOffice.Data.SQL.PrivateSave)
  - SuperOffice.Data.Dialect.Dialect.DifferenceSql(SuperOffice.Data.SQL.TableExpression)
  - SuperOffice.Data.Dialect.Dialect.EncodedArraySearch(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument[],SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType,SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch)
  - SuperOffice.Data.Dialect.Dialect.FieldIsClob(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.Dialect.Dialect.FieldIsString(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity(SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.Parameter,System.String)
  - SuperOffice.Data.Dialect.Dialect.GenerateSql(SuperOffice.Data.SQL.SqlCommand)
  - SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction(SuperOffice.Data.SoConnection,SuperOffice.Data.SQL.SqlCommand)
  - SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType(System.Int32)
  - SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex(System.Int32)
  - SuperOffice.Data.Dialect.Dialect.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.Dialect.Dialect.GetIsolationLevel(System.Data.IsolationLevel)
  - SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint
  - SuperOffice.Data.Dialect.Dialect.GetOriginAsComment(SuperOffice.Data.SQL.SqlCommand)
  - SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable(System.Data.DataTable)
  - SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping(System.String,SuperOffice.Data.FieldDataType)
  - SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete
  - SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert
  - SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect
  - SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate
  - SuperOffice.Data.Dialect.Dialect.InsertSql(SuperOffice.Data.SQL.PrivateSave)
  - SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString(System.String)
  - SuperOffice.Data.Dialect.Dialect.IntArrayToWordString(System.Int32[])
  - SuperOffice.Data.Dialect.Dialect.IntFromSingleWord(System.String)
  - SuperOffice.Data.Dialect.Dialect.IntToSingleWord(System.Int32)
  - SuperOffice.Data.Dialect.Dialect.InvokeToSql(System.Object[])
  - SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString(SuperOffice.Data.SQL.Argument[])
  - SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect(SuperOffice.Data.Dictionary.SoTable)
  - SuperOffice.Data.Dialect.Dialect.MaxInSize
  - SuperOffice.Data.Dialect.Dialect.ParseJoinClause(SuperOffice.Data.SQL.JoinRestriction)
  - SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments(SuperOffice.Data.SQL.MathematicalExpression,System.String)
  - SuperOffice.Data.Dialect.Dialect.PreParseUnion(SuperOffice.Data.SQL.TableExpression)
  - SuperOffice.Data.Dialect.Dialect.ReturnDBFields
  - SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer
  - SuperOffice.Data.Dialect.Dialect.SelectSql(SuperOffice.Data.SQL.PrivateSelect)
  - SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped(System.Data.IDataReader)
  - SuperOffice.Data.Dialect.Dialect.SoParameterCollection
  - SuperOffice.Data.Dialect.Dialect.Tables
  - SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime(System.Int32)
  - SuperOffice.Data.Dialect.Dialect.TimeToVarchar(System.String)
  - SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime(System.Int32)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.FieldDataType)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Add)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Alias)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.And)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Between)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Count)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.CountAll)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Day)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Distinct)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Divide)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Equal)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldInfo)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldTypeConvert)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThan)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThanOrEqual)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GroupBy)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAll)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAny)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Hour)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.In)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.InnerJoin)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNotNull)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNull)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LeftOuterJoin)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThan)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThanOrEqual)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Like)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Lower)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Max)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Min)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Minute)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAll)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAny)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Month)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Multiply)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotBetween)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotIn)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotLike)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Or)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.OrderBy)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Parameter)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.RightOuterJoin)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Second)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Soundex)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Subtract)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Sum)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.TableInfo)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Trim)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.UnEqual)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Upper)
  - SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Year)
  - SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ArgumentCollection)
  - SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.FieldInfoCollection)
  - SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ReturnFieldsCollection)
  - SuperOffice.Data.Dialect.Dialect.ToSqlFrom
  - SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded(SuperOffice.Data.SQL.Argument)
  - SuperOffice.Data.Dialect.Dialect.UnionSql(SuperOffice.Data.SQL.TableExpression)
  - SuperOffice.Data.Dialect.Dialect.UpdateSql(SuperOffice.Data.SQL.PrivateSave)
  - SuperOffice.Data.Dialect.Dialect.VarcharType
  langs:
  - csharp
  - vb
  name: Dialect
  nameWithType: Dialect
  fullName: SuperOffice.Data.Dialect.Dialect
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n<remarks>\nAll classes inheriting from this class must implement the following code:\n<pre><code>	static System.Collections.Hashtable _toSqlHelper = null;\n	protected override Hashtable System.Collections.ToSqlHelper\n	{\n		get {return _toSqlHelper;}\n		set {_toSqlHelper = value;}\n	}</code></pre>\n</remarks>\nThis class is the sql-generator in the new SSearch. \nIt has various derived classes that represents the databases we use. \nThese classes contain the information needed to generate the db-specific sql.\n"
  syntax:
    content: public abstract class Dialect
    content.vb: Public MustInherit Class Dialect
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.Data.Dialect.DB2Common
  - SuperOffice.Data.Dialect.MySqlCommon
  - SuperOffice.Data.Dialect.OracleCommon
  - SuperOffice.Data.Dialect.SqlServerCommon
  - SuperOffice.Data.Dialect.SybaseCommon
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.Data.Dialect.Dialect.EnumUtil.MapEnums``2
  - SuperOffice.Data.Dialect.Dialect.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: SuperOffice.Data.Dialect.Dialect._tables
  commentId: F:SuperOffice.Data.Dialect.Dialect._tables
  id: _tables
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _tables
  nameWithType: Dialect._tables
  fullName: SuperOffice.Data.Dialect.Dialect._tables
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nContains information regarding the current tables we are working with.\n"
  syntax:
    content: protected TableInfoCollection _tables
    return:
      type: SuperOffice.Data.SQL.TableInfoCollection
    content.vb: Protected _tables As TableInfoCollection
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._tablesInJoin
  commentId: F:SuperOffice.Data.Dialect.Dialect._tablesInJoin
  id: _tablesInJoin
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _tablesInJoin
  nameWithType: Dialect._tablesInJoin
  fullName: SuperOffice.Data.Dialect.Dialect._tablesInJoin
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nA sub-collection of _tables, containing those tables that are part of a join restriction.\nPopulated by ParseJoinClause and used by ToSqlFrom to avoid listing tables twice\n"
  syntax:
    content: protected TableInfoCollection _tablesInJoin
    return:
      type: SuperOffice.Data.SQL.TableInfoCollection
    content.vb: Protected _tablesInJoin As TableInfoCollection
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._returnDBFields
  commentId: F:SuperOffice.Data.Dialect.Dialect._returnDBFields
  id: _returnDBFields
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _returnDBFields
  nameWithType: Dialect._returnDBFields
  fullName: SuperOffice.Data.Dialect.Dialect._returnDBFields
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nContains information regarding the fields in returnfields. Does not contain information \nregarding Arguments.\n"
  syntax:
    content: protected FieldInfoCollection _returnDBFields
    return:
      type: SuperOffice.Data.SQL.FieldInfoCollection
    content.vb: Protected _returnDBFields As FieldInfoCollection
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._dbSchemaTable
  commentId: F:SuperOffice.Data.Dialect.Dialect._dbSchemaTable
  id: _dbSchemaTable
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _dbSchemaTable
  nameWithType: Dialect._dbSchemaTable
  fullName: SuperOffice.Data.Dialect.Dialect._dbSchemaTable
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n\n"
  syntax:
    content: protected DataTable _dbSchemaTable
    return:
      type: System.Data.DataTable
    content.vb: Protected _dbSchemaTable As DataTable
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._soSchemaTable
  commentId: F:SuperOffice.Data.Dialect.Dialect._soSchemaTable
  id: _soSchemaTable
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _soSchemaTable
  nameWithType: Dialect._soSchemaTable
  fullName: SuperOffice.Data.Dialect.Dialect._soSchemaTable
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n\n"
  syntax:
    content: protected DataTable _soSchemaTable
    return:
      type: System.Data.DataTable
    content.vb: Protected _soSchemaTable As DataTable
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._returnArguments
  commentId: F:SuperOffice.Data.Dialect.Dialect._returnArguments
  id: _returnArguments
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _returnArguments
  nameWithType: Dialect._returnArguments
  fullName: SuperOffice.Data.Dialect.Dialect._returnArguments
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n\n"
  syntax:
    content: protected List<Argument> _returnArguments
    return:
      type: System.Collections.Generic.List{SuperOffice.Data.SQL.Argument}
    content.vb: Protected _returnArguments As List(Of Argument)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._usedAliases
  commentId: F:SuperOffice.Data.Dialect.Dialect._usedAliases
  id: _usedAliases
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _usedAliases
  nameWithType: Dialect._usedAliases
  fullName: SuperOffice.Data.Dialect.Dialect._usedAliases
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe user can use different types of aliases in the select-statement. \nEx. use Personname on a field and use another text in the order-by clause. \nThis table will store the aliases used in the query and validate them before the\nsql is sent to the database.\n"
  syntax:
    content: protected ArrayList _usedAliases
    return:
      type: System.Collections.ArrayList
    content.vb: Protected _usedAliases As ArrayList
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._filterCallbacks
  commentId: F:SuperOffice.Data.Dialect.Dialect._filterCallbacks
  id: _filterCallbacks
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _filterCallbacks
  nameWithType: Dialect._filterCallbacks
  fullName: SuperOffice.Data.Dialect.Dialect._filterCallbacks
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nCallbacks that can unconditionally throw away (&quot;filter&quot;) a row during reading.\n<strong>Be careful</strong> if you think you need this; it can quickly become complex if the reasons for filtering a row\nreside inside something that could be part of an OR ...\n"
  syntax:
    content: protected readonly List<Func<IDataReader, bool>> _filterCallbacks
    return:
      type: System.Collections.Generic.List{System.Func{System.Data.IDataReader,System.Boolean}}
    content.vb: Protected ReadOnly _filterCallbacks As List(Of Func(Of IDataReader, Boolean))
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect._cmd
  commentId: F:SuperOffice.Data.Dialect.Dialect._cmd
  id: _cmd
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _cmd
  nameWithType: Dialect._cmd
  fullName: SuperOffice.Data.Dialect.Dialect._cmd
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nCurrent SqlCommand\n"
  syntax:
    content: protected SqlCommand _cmd
    return:
      type: SuperOffice.Data.SQL.SqlCommand
    content.vb: Protected _cmd As SqlCommand
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect._stringFieldsInOrderByWithDistinct
  commentId: F:SuperOffice.Data.Dialect.Dialect._stringFieldsInOrderByWithDistinct
  id: _stringFieldsInOrderByWithDistinct
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: _stringFieldsInOrderByWithDistinct
  nameWithType: Dialect._stringFieldsInOrderByWithDistinct
  fullName: SuperOffice.Data.Dialect.Dialect._stringFieldsInOrderByWithDistinct
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected HashSet<FieldInfo> _stringFieldsInOrderByWithDistinct
    return:
      type: System.Collections.Generic.HashSet{SuperOffice.Data.SQL.FieldInfo}
    content.vb: Protected _stringFieldsInOrderByWithDistinct As HashSet(Of FieldInfo)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.SoParameterCollection
  commentId: F:SuperOffice.Data.Dialect.Dialect.SoParameterCollection
  id: SoParameterCollection
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: SoParameterCollection
  nameWithType: Dialect.SoParameterCollection
  fullName: SuperOffice.Data.Dialect.Dialect.SoParameterCollection
  type: Field
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected ArrayList SoParameterCollection
    return:
      type: System.Collections.ArrayList
    content.vb: Protected SoParameterCollection As ArrayList
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow(System.Data.IDataReader)
  commentId: M:SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow(System.Data.IDataReader)
  id: CheckForDuplicateRow(System.Data.IDataReader)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: CheckForDuplicateRow(IDataReader)
  nameWithType: Dialect.CheckForDuplicateRow(IDataReader)
  fullName: SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow(System.Data.IDataReader)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nSome databases (ORACLE!!) are unable to do DISTINCT over the datatype we use for our 2k text strings; in those cases\nwe need to &apos;fake&apos; a distinct. This method is called from the <xref href=\"SuperOffice.Data.SoDataReader\" data-throw-if-not-resolved=\"false\"></xref> to determine if the current\nrow is such a duplicate.\n"
  syntax:
    content: public virtual bool CheckForDuplicateRow(IDataReader reader)
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: Reader containing the row to be evaluated
    return:
      type: System.Boolean
      description: If true, then this row is a duplicate of one that has been previously passed to this method
    content.vb: Public Overridable Function CheckForDuplicateRow(reader As IDataReader) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.CheckForDistinct(SuperOffice.Data.SQL.PrivateSelect)
  commentId: M:SuperOffice.Data.Dialect.Dialect.CheckForDistinct(SuperOffice.Data.SQL.PrivateSelect)
  id: CheckForDistinct(SuperOffice.Data.SQL.PrivateSelect)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: CheckForDistinct(PrivateSelect)
  nameWithType: Dialect.CheckForDistinct(PrivateSelect)
  fullName: SuperOffice.Data.Dialect.Dialect.CheckForDistinct(SuperOffice.Data.SQL.PrivateSelect)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nSome databases (ORACLE!!) are unable to do DISTINCT over the datatype we use for our 2k text strings; in those cases\nwe need to &apos;fake&apos; a distinct. This method is called when generating the SQL text, and controls whether we should\nsay &quot;distinct&quot; as part of the select\n"
  syntax:
    content: public virtual bool CheckForDistinct(PrivateSelect cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.PrivateSelect
    return:
      type: System.Boolean
    content.vb: Public Overridable Function CheckForDistinct(cmd As PrivateSelect) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.CheckForDistinct*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped(System.Data.IDataReader)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped(System.Data.IDataReader)
  id: ShouldRowBeSkipped(System.Data.IDataReader)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ShouldRowBeSkipped(IDataReader)
  nameWithType: Dialect.ShouldRowBeSkipped(IDataReader)
  fullName: SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped(System.Data.IDataReader)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nInvoke Filter callbacks to see if the row should be skipped. Use with care.\n"
  syntax:
    content: public bool ShouldRowBeSkipped(IDataReader reader)
    parameters:
    - id: reader
      type: System.Data.IDataReader
    return:
      type: System.Boolean
    content.vb: Public Function ShouldRowBeSkipped(reader As IDataReader) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.#ctor
  commentId: M:SuperOffice.Data.Dialect.Dialect.#ctor
  id: '#ctor'
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: Dialect()
  nameWithType: Dialect.Dialect()
  fullName: SuperOffice.Data.Dialect.Dialect.Dialect()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDefault constructor\n"
  syntax:
    content: protected Dialect()
    content.vb: Protected Sub New
  overload: SuperOffice.Data.Dialect.Dialect.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect(SuperOffice.Data.Dictionary.SoTable)
  commentId: M:SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect(SuperOffice.Data.Dictionary.SoTable)
  id: IsTableReferencedInSelect(SuperOffice.Data.Dictionary.SoTable)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: IsTableReferencedInSelect(SoTable)
  nameWithType: Dialect.IsTableReferencedInSelect(SoTable)
  fullName: SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect(SuperOffice.Data.Dictionary.SoTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nIs a table referenced at least one in the current SQL (by definition, not by instance!)\n"
  remarks: "\nThis call is valid only after ToSqlFrom and ParseJoin have been executed, since these are the\nmethods that populate the reference. Too-early calls will result in a &apos;false&apos;  result. Also\nnote that calling this method on a delete, update or insert type sql will always yield &apos;false&apos;.\n"
  syntax:
    content: protected bool IsTableReferencedInSelect(SoTable definition)
    parameters:
    - id: definition
      type: SuperOffice.Data.Dictionary.SoTable
      description: Definition of table to check for
    return:
      type: System.Boolean
      description: True if table is referenced
    content.vb: Protected Function IsTableReferencedInSelect(definition As SoTable) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable(System.Data.DataTable)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable(System.Data.DataTable)
  id: GetUpdatedSchemaTable(System.Data.DataTable)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetUpdatedSchemaTable(DataTable)
  nameWithType: Dialect.GetUpdatedSchemaTable(DataTable)
  fullName: SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable(System.Data.DataTable)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGet the schema as it is converted to from the underlying database schema types.\n"
  syntax:
    content: public virtual DataTable GetUpdatedSchemaTable(DataTable dbSchemaTable)
    parameters:
    - id: dbSchemaTable
      type: System.Data.DataTable
    return:
      type: System.Data.DataTable
      description: Schema complient with internal NetServer types.
    content.vb: Public Overridable Function GetUpdatedSchemaTable(dbSchemaTable As DataTable) As DataTable
  overload: SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity(SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.Parameter,System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity(SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.Parameter,System.String)
  id: GenerateCaseInsensitivity(SuperOffice.Data.SQL.FieldInfo,SuperOffice.Data.SQL.Parameter,System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GenerateCaseInsensitivity(FieldInfo, Parameter, String)
  nameWithType: Dialect.GenerateCaseInsensitivity(FieldInfo, Parameter, String)
  fullName: SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity(SuperOffice.Data.SQL.FieldInfo, SuperOffice.Data.SQL.Parameter, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nOracle treats string a bit differently than other databases. Oracle is Case-sensitive. \nThis function takes care of this without risking a full table scan.\n"
  syntax:
    content: protected virtual string GenerateCaseInsensitivity(FieldInfo left, Parameter right, string sqloper)
    parameters:
    - id: left
      type: SuperOffice.Data.SQL.FieldInfo
      description: FieldInfo
    - id: right
      type: SuperOffice.Data.SQL.Parameter
      description: Parameter
    - id: sqloper
      type: System.String
      description: string sql operator
    return:
      type: System.String
      description: The generated case-insensitive string
    content.vb: Protected Overridable Function GenerateCaseInsensitivity(left As FieldInfo, right As Parameter, sqloper As String) As String
  overload: SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.GetOriginAsComment(SuperOffice.Data.SQL.SqlCommand)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetOriginAsComment(SuperOffice.Data.SQL.SqlCommand)
  id: GetOriginAsComment(SuperOffice.Data.SQL.SqlCommand)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetOriginAsComment(SqlCommand)
  nameWithType: Dialect.GetOriginAsComment(SqlCommand)
  fullName: SuperOffice.Data.Dialect.Dialect.GetOriginAsComment(SuperOffice.Data.SQL.SqlCommand)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert the Origin string into something that can be embedded in an SQL statement without breaking it\n"
  remarks: "\nThe comment generated here is extremely useful for debugging, and contains not only the Origin string,\nbut the database context (tenant/customer in Online!), associate, and service method info.\n"
  syntax:
    content: protected virtual string GetOriginAsComment(SqlCommand command)
    parameters:
    - id: command
      type: SuperOffice.Data.SQL.SqlCommand
    return:
      type: System.String
    content.vb: Protected Overridable Function GetOriginAsComment(command As SqlCommand) As String
  overload: SuperOffice.Data.Dialect.Dialect.GetOriginAsComment*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DateToVarchar(System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DateToVarchar(System.String)
  id: DateToVarchar(System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DateToVarchar(String)
  nameWithType: Dialect.DateToVarchar(String)
  fullName: SuperOffice.Data.Dialect.Dialect.DateToVarchar(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nSubclass override: How to convert a datetime to a varchar (or whatever it&apos;s called), in the database, taking only the DATE part\n"
  syntax:
    content: protected abstract string DateToVarchar(string innerValue)
    parameters:
    - id: innerValue
      type: System.String
      description: >-
        The actual reference to the datetime to work on; this is an opaque parameter that the method should NOT attempt to understand,

        just assume it will be a valid datetime value or parameter at query-execution time
    return:
      type: System.String
    content.vb: Protected MustOverride Function DateToVarchar(innerValue As String) As String
  overload: SuperOffice.Data.Dialect.Dialect.DateToVarchar*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.Data.Dialect.Dialect.TimeToVarchar(System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.TimeToVarchar(System.String)
  id: TimeToVarchar(System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: TimeToVarchar(String)
  nameWithType: Dialect.TimeToVarchar(String)
  fullName: SuperOffice.Data.Dialect.Dialect.TimeToVarchar(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nSubclass override: How to convert a datetime to a varchar (or whatever it&apos;s called), in the database, taking only the TIME part\n"
  syntax:
    content: protected abstract string TimeToVarchar(string innerValue)
    parameters:
    - id: innerValue
      type: System.String
      description: >-
        The actual reference to the datetime to work on; this is an opaque parameter that the method should NOT attempt to understand,

        just assume it will be a valid datetime value or parameter at query-execution time
    return:
      type: System.String
    content.vb: Protected MustOverride Function TimeToVarchar(innerValue As String) As String
  overload: SuperOffice.Data.Dialect.Dialect.TimeToVarchar*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping(System.String,SuperOffice.Data.FieldDataType)
  commentId: M:SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping(System.String,SuperOffice.Data.FieldDataType)
  id: HandleDateAndTimeWrapping(System.String,SuperOffice.Data.FieldDataType)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: HandleDateAndTimeWrapping(String, FieldDataType)
  nameWithType: Dialect.HandleDateAndTimeWrapping(String, FieldDataType)
  fullName: SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping(System.String, SuperOffice.Data.FieldDataType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDate and Time (as separate types, not DateTime) are handled by in-database-conversions, on the fly;\ncreate the syntax for that, in case we happen to be dealing with them (the syntax is VERY db-dependent\nand implemented by virtual methods in the different dialects)\n"
  syntax:
    content: protected string HandleDateAndTimeWrapping(string innerValue, FieldDataType fieldType)
    parameters:
    - id: innerValue
      type: System.String
    - id: fieldType
      type: SuperOffice.Data.FieldDataType
    return:
      type: System.String
    content.vb: Protected Function HandleDateAndTimeWrapping(innerValue As String, fieldType As FieldDataType) As String
  overload: SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType(System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType(System.Int32)
  id: GetFieldDbDataType(System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetFieldDbDataType(Int32)
  nameWithType: Dialect.GetFieldDbDataType(Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWe need to know the data type of the first field we are returning (The select [fieldname]-clause).\nTo get this information, we run through the private member <xref href=\"SuperOffice.Data.Dialect.Dialect._returnDBFields\" data-throw-if-not-resolved=\"false\"></xref> and return\nthe data type that corresponds to the given index.\n"
  syntax:
    content: public FieldDataType GetFieldDbDataType(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the actual field.
    return:
      type: SuperOffice.Data.FieldDataType
      description: The FieldDataType of the actual field.
    content.vb: Public Function GetFieldDbDataType(index As Integer) As FieldDataType
  overload: SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  id: GetIndexOfField(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetIndexOfField(Argument)
  nameWithType: Dialect.GetIndexOfField(Argument)
  fullName: SuperOffice.Data.Dialect.Dialect.GetIndexOfField(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nSometimes we need to know the index of one of the fields we are returning (The select [fieldname]-clause).\nTo get this information, we run through the private member <xref href=\"SuperOffice.Data.Dialect.Dialect._returnArguments\" data-throw-if-not-resolved=\"false\"></xref> and return\nthe correct index according to the in-parameter.\n"
  syntax:
    content: public int GetIndexOfField(Argument field)
    parameters:
    - id: field
      type: SuperOffice.Data.SQL.Argument
      description: The field we want to know the index of.
    return:
      type: System.Int32
      description: The index of the in-parameter FieldInfo.
    content.vb: Public Function GetIndexOfField(field As Argument) As Integer
  overload: SuperOffice.Data.Dialect.Dialect.GetIndexOfField*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex(System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex(System.Int32)
  id: GetFieldInfoFromIndex(System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetFieldInfoFromIndex(Int32)
  nameWithType: Dialect.GetFieldInfoFromIndex(Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: public FieldInfo GetFieldInfoFromIndex(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SuperOffice.Data.SQL.FieldInfo
    content.vb: Public Function GetFieldInfoFromIndex(index As Integer) As FieldInfo
  overload: SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.CheckForAlias
  commentId: M:SuperOffice.Data.Dialect.Dialect.CheckForAlias
  id: CheckForAlias
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: CheckForAlias()
  nameWithType: Dialect.CheckForAlias()
  fullName: SuperOffice.Data.Dialect.Dialect.CheckForAlias()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nSome of the databases we support supports aliasing on for example Insert and Update. Some don&apos;t. \nThis function asks the current database if it support alias for the specific sql-command. \nDefault value in Dialect is true. Each new database must therefore override the HasAliasOn...\nfunction to change this.\n"
  syntax:
    content: protected bool CheckForAlias()
    return:
      type: System.Boolean
    content.vb: Protected Function CheckForAlias As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.CheckForAlias*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.InvokeToSql(System.Object[])
  commentId: M:SuperOffice.Data.Dialect.Dialect.InvokeToSql(System.Object[])
  id: InvokeToSql(System.Object[])
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: InvokeToSql(Object[])
  nameWithType: Dialect.InvokeToSql(Object[])
  fullName: SuperOffice.Data.Dialect.Dialect.InvokeToSql(System.Object[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nInvokeToSql checks the in-parameters type against the already existing ToSqlHelper-array. \nWhen the key is found in the array, the key&apos;s object (the <xref href=\"SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)\" data-throw-if-not-resolved=\"false\"></xref> method) is called.\n"
  syntax:
    content: protected string InvokeToSql(params object[] toSqlArguments)
    parameters:
    - id: toSqlArguments
      type: System.Object[]
      description: "\narguments as passed to the <xref href=\"SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)\" data-throw-if-not-resolved=\"false\"></xref> method.  The arguments&apos; type needs to be an \nexact match of the type implemented in the appropriate ToSql method.\n"
    return:
      type: System.String
      description: returns the stringvalue returned from the Invoked <xref href="SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)" data-throw-if-not-resolved="false"></xref> method
    content.vb: Protected Function InvokeToSql(ParamArray toSqlArguments As Object()) As String
  overload: SuperOffice.Data.Dialect.Dialect.InvokeToSql*
  exceptions:
  - type: SuperOffice.Exceptions.SoNotImplementedException
    commentId: T:SuperOffice.Exceptions.SoNotImplementedException
    description: There is no appropriate <xref href="SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)" data-throw-if-not-resolved="false"></xref> method to invoke.
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: An exception was thrown while trying to invoke the <xref href="SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)" data-throw-if-not-resolved="false"></xref> method
  nameWithType.vb: Dialect.InvokeToSql(Object())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SuperOffice.Data.Dialect.Dialect.InvokeToSql(System.Object())
  name.vb: InvokeToSql(Object())
- uid: SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString(SuperOffice.Data.SQL.Argument[])
  commentId: M:SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString(SuperOffice.Data.SQL.Argument[])
  id: IsAnyArgumentString(SuperOffice.Data.SQL.Argument[])
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: IsAnyArgumentString(Argument[])
  nameWithType: Dialect.IsAnyArgumentString(Argument[])
  fullName: SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString(SuperOffice.Data.SQL.Argument[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDetermine if at least one of the given arguments is a FieldInfo of type string\n"
  syntax:
    content: public static bool IsAnyArgumentString(params Argument[] arguments)
    parameters:
    - id: arguments
      type: SuperOffice.Data.SQL.Argument[]
      description: Zero or more arguments, null is allowed
    return:
      type: System.Boolean
      description: true if at least one is a FieldInfo of type string
    content.vb: Public Shared Function IsAnyArgumentString(ParamArray arguments As Argument()) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString*
  nameWithType.vb: Dialect.IsAnyArgumentString(Argument())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString(SuperOffice.Data.SQL.Argument())
  name.vb: IsAnyArgumentString(Argument())
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded(SuperOffice.Data.SQL.Argument)
  id: ToSqlUpperIfNeeded(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSqlUpperIfNeeded(Argument)
  nameWithType: Dialect.ToSqlUpperIfNeeded(Argument)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSqlUpperIfNeeded(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSqlUpperIfNeeded(arg As Argument) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlFrom
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSqlFrom
  id: ToSqlFrom
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSqlFrom()
  nameWithType: Dialect.ToSqlFrom()
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlFrom()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSqlFrom runs through the TableInfoCollection in Dialect and creates a \nstring containing the table-name and alias of a table. If there are several tables, \nwe add a &quot;, &quot; between each of them. Ex:\n<pre><code>	associate T0, contact T1, appointment T2</code></pre>\nTables in the _tablesInJoin collection are automatically skipped, and not part of this list\n"
  syntax:
    content: protected virtual string ToSqlFrom()
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSqlFrom As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSqlFrom*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.FieldInfoCollection)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.FieldInfoCollection)
  id: ToSqlField(SuperOffice.Data.SQL.FieldInfoCollection)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSqlField(FieldInfoCollection)
  nameWithType: Dialect.ToSqlField(FieldInfoCollection)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.FieldInfoCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThis function will run through a fieldcollection and return the selected fields\ntogether with the appropriate table-alias. This is possible because each field\nhas knowledge about its parent (table) and each table contains a auto generated\nalias. The order on the fields will not change according to the way the user has \nentered them.\n"
  syntax:
    content: protected virtual string ToSqlField(FieldInfoCollection arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.FieldInfoCollection
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSqlField(arg As FieldInfoCollection) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSqlField*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ArgumentCollection)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ArgumentCollection)
  id: ToSqlField(SuperOffice.Data.SQL.ArgumentCollection)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSqlField(ArgumentCollection)
  nameWithType: Dialect.ToSqlField(ArgumentCollection)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ArgumentCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThis function will run through a fieldcollection and return the selected fields\ntogether with the appropriate table-alias. This is possible because each field\nhas knowledge about its parent (table) and each table contains a auto generated\nalias. The order on the fields will not change according to the way the user has \nentered them.\n"
  syntax:
    content: protected virtual string ToSqlField(ArgumentCollection arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.ArgumentCollection
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSqlField(arg As ArgumentCollection) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSqlField*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ReturnFieldsCollection)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ReturnFieldsCollection)
  id: ToSqlField(SuperOffice.Data.SQL.ReturnFieldsCollection)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSqlField(ReturnFieldsCollection)
  nameWithType: Dialect.ToSqlField(ReturnFieldsCollection)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlField(SuperOffice.Data.SQL.ReturnFieldsCollection)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSqlField( ReturnFieldsCollection arg ) will run through the in-parameter and \ncreate the correct sql-syntax for the fields the user want to return from the\nquery.\n"
  syntax:
    content: protected virtual string ToSqlField(ReturnFieldsCollection arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.ReturnFieldsCollection
      description: The ReturnFieldsCollection the user wants to run through
    return:
      type: System.String
      description: The sql-clause
    content.vb: Protected Overridable Function ToSqlField(arg As ReturnFieldsCollection) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSqlField*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)
  id: ToSql(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Argument)
  nameWithType: Dialect.ToSql(Argument)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nNot implemented.\n"
  syntax:
    content: protected virtual string ToSql(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Argument) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint
  id: GetOrderbyCollationHint
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetOrderbyCollationHint()
  nameWithType: Dialect.GetOrderbyCollationHint()
  fullName: SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string GetOrderbyCollationHint()
    return:
      type: System.String
    content.vb: Protected Overridable Function GetOrderbyCollationHint As String
  overload: SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.OrderBy)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.OrderBy)
  id: ToSql(SuperOffice.Data.SQL.OrderBy)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(OrderBy)
  nameWithType: Dialect.ToSql(OrderBy)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.OrderBy)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Order By is used when you want your data shown in a specific order. \n"
  syntax:
    content: protected virtual string ToSql(OrderBy arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.OrderBy
      description: The OrderBy clause
    return:
      type: System.String
      description: The Order By sql-clause.
    content.vb: Protected Overridable Function ToSql(arg As OrderBy) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GroupBy)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GroupBy)
  id: ToSql(SuperOffice.Data.SQL.GroupBy)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(GroupBy)
  nameWithType: Dialect.ToSql(GroupBy)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GroupBy)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( GroupBy arg ) parses the Group by clause and returns the values first entered. \n"
  syntax:
    content: protected virtual string ToSql(GroupBy arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.GroupBy
      description: The Group by clause.
    return:
      type: System.String
      description: The parsed Group by clause.
    content.vb: Protected Overridable Function ToSql(arg As GroupBy) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Count)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Count)
  id: ToSql(SuperOffice.Data.SQL.Count)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Count)
  nameWithType: Dialect.ToSql(Count)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Count)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Count arg ) parses the Count clause in the sql command and returns the correct values. \n"
  syntax:
    content: protected virtual string ToSql(Count arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Count
      description: The count-clause.
    return:
      type: System.String
      description: The parsed string.
    content.vb: Protected Overridable Function ToSql(arg As Count) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.CountAll)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.CountAll)
  id: ToSql(SuperOffice.Data.SQL.CountAll)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(CountAll)
  nameWithType: Dialect.ToSql(CountAll)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.CountAll)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( CountAll arg ) parses the CountAll clause in the sql command and returns the correct values. \n"
  syntax:
    content: protected virtual string ToSql(CountAll arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.CountAll
      description: The countAll-clause.
    return:
      type: System.String
      description: The parsed string; always COUNT(*) regardless of argument.
    content.vb: Protected Overridable Function ToSql(arg As CountAll) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNull)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNull)
  id: ToSql(SuperOffice.Data.SQL.IsNull)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(IsNull)
  nameWithType: Dialect.ToSql(IsNull)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNull)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe ToSql( IsNull ) is used when you want to check if a field is null. \n"
  syntax:
    content: protected virtual string ToSql(IsNull arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.IsNull
      description: The field-info you want to check the value on.
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As IsNull) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNotNull)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNotNull)
  id: ToSql(SuperOffice.Data.SQL.IsNotNull)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(IsNotNull)
  nameWithType: Dialect.ToSql(IsNotNull)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.IsNotNull)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe ToSql( IsNotNull ) is used when you want to check if a field is not null. \n"
  syntax:
    content: protected virtual string ToSql(IsNotNull arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.IsNotNull
      description: The field-info you want to check the value on
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As IsNotNull) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.EncodedArraySearch(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument[],SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType,SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch)
  commentId: M:SuperOffice.Data.Dialect.Dialect.EncodedArraySearch(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument[],SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType,SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch)
  id: EncodedArraySearch(SuperOffice.Data.SQL.Argument,SuperOffice.Data.SQL.Argument[],SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType,SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: EncodedArraySearch(Argument, Argument[], Dialect.EncodedArraySearchType, Dialect.FulltextEncodedSearch)
  nameWithType: Dialect.EncodedArraySearch(Argument, Argument[], Dialect.EncodedArraySearchType, Dialect.FulltextEncodedSearch)
  fullName: SuperOffice.Data.Dialect.Dialect.EncodedArraySearch(SuperOffice.Data.SQL.Argument, SuperOffice.Data.SQL.Argument[], SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType, SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string EncodedArraySearch(Argument left, Argument[] right, Dialect.EncodedArraySearchType searchType, Dialect.FulltextEncodedSearch fts = null)
    parameters:
    - id: left
      type: SuperOffice.Data.SQL.Argument
    - id: right
      type: SuperOffice.Data.SQL.Argument[]
    - id: searchType
      type: SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType
    - id: fts
      type: SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch
    return:
      type: System.String
    content.vb: Protected Overridable Function EncodedArraySearch(left As Argument, right As Argument(), searchType As Dialect.EncodedArraySearchType, fts As Dialect.FulltextEncodedSearch = Nothing) As String
  overload: SuperOffice.Data.Dialect.Dialect.EncodedArraySearch*
  nameWithType.vb: Dialect.EncodedArraySearch(Argument, Argument(), Dialect.EncodedArraySearchType, Dialect.FulltextEncodedSearch)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: SuperOffice.Data.Dialect.Dialect.EncodedArraySearch(SuperOffice.Data.SQL.Argument, SuperOffice.Data.SQL.Argument(), SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType, SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch)
  name.vb: EncodedArraySearch(Argument, Argument(), Dialect.EncodedArraySearchType, Dialect.FulltextEncodedSearch)
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.In)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.In)
  id: ToSql(SuperOffice.Data.SQL.In)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(In)
  nameWithType: Dialect.ToSql(In)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.In)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe not in-operator (NOT IN) is used when you want to get data that \ncorresponds with the restriction-clause but does not contain the values \ndescribed in the not in-clause. \n<pre><code>	SELECT T0.associate_id\n	FROM associate TO\n	WHERE associate_id BETWEEN 10 AND 100\n	AND T0.associate_id NOT IN (20, 30, 40, 50, 60, 70, 80, 90);</code></pre>\nThis example will give you all the associate_id&apos;s between 10 and 100 but the ones\ndescribed  in the not in-clause.\n"
  remarks: "\nThis operator temporarily supports int[] fields, with HAS_ALL semantics\n"
  syntax:
    content: protected virtual string ToSql(In arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.In
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As  In) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAny)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAny)
  id: ToSql(SuperOffice.Data.SQL.HasAny)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(HasAny)
  nameWithType: Dialect.ToSql(HasAny)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAny)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nProcess the special HasAny, which doesn&apos;t correspond to SQL. However it does work (only!) with our special\nsimulated int[] datatype, encoded as words in a text field\n"
  syntax:
    content: protected virtual string ToSql(HasAny arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.HasAny
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As HasAny) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAll)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAll)
  id: ToSql(SuperOffice.Data.SQL.HasAll)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(HasAll)
  nameWithType: Dialect.ToSql(HasAll)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.HasAll)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nProcess the special HasAny, which doesn&apos;t correspond to SQL. However it does work (only!) with our special\nsimulated int[] datatype, encoded as words in a text field\n"
  syntax:
    content: protected virtual string ToSql(HasAll arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.HasAll
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As HasAll) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAny)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAny)
  id: ToSql(SuperOffice.Data.SQL.MissingAny)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(MissingAny)
  nameWithType: Dialect.ToSql(MissingAny)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAny)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nProcess the special HasAny, which doesn&apos;t correspond to SQL. However it does work (only!) with our special\nsimulated int[] datatype, encoded as words in a text field\n"
  syntax:
    content: protected virtual string ToSql(MissingAny arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.MissingAny
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As MissingAny) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAll)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAll)
  id: ToSql(SuperOffice.Data.SQL.MissingAll)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(MissingAll)
  nameWithType: Dialect.ToSql(MissingAll)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.MissingAll)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nProcess the special HasAny, which doesn&apos;t correspond to SQL. However it does work (only!) with our special\nsimulated int[] datatype, encoded as words in a text field\n"
  syntax:
    content: protected virtual string ToSql(MissingAll arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.MissingAll
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As MissingAll) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotIn)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotIn)
  id: ToSql(SuperOffice.Data.SQL.NotIn)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(NotIn)
  nameWithType: Dialect.ToSql(NotIn)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotIn)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe in-operator (IN) is used when you want to get specific data from the database\nbut you don&apos;t want to use a regular restriction-clause to get it. \n<pre><code>	SELECT T0.associate_id\n	FROM associate TO\n	WHERE T0.associate_id IN (20, 30, 40, 50, 60, 70, 80, 90);</code></pre>\nThis example will give you the associate_id&apos;s described  in the in-clause.\n"
  syntax:
    content: protected virtual string ToSql(NotIn arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.NotIn
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As NotIn) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Between)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Between)
  id: ToSql(SuperOffice.Data.SQL.Between)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Between)
  nameWithType: Dialect.ToSql(Between)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Between)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe between-operator (BETWEEN) is used when you want the values between range a and range b. \n<pre><code>	SELECT T0.associate_id\n	FROM associate T0\n	WHERE associate_id BETWEEN 10 AND 100;</code></pre>\nThe operator can also give range-values based on sub-selects:\n<pre><code>	SELECT T0.associate_id\n	FROM associate T0\n	WHERE associate_id BETWEEN \n		(SELECT TO.associate_id\n		FROM associate T0\n		WHERE TO.name = &apos;SuperOffice&apos;)\n	AND \n		(SELECT TO.associate_id \n		FROM associate TO\n		WHERE TO.date > &apos;08.10.2002&apos;);</code></pre>\nThis may not make very much sense, but the possibility to do it is here.\n"
  syntax:
    content: protected virtual string ToSql(Between arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Between
    return:
      type: System.String
      description: string clause
    content.vb: Protected Overridable Function ToSql(arg As Between) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotBetween)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotBetween)
  id: ToSql(SuperOffice.Data.SQL.NotBetween)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(NotBetween)
  nameWithType: Dialect.ToSql(NotBetween)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotBetween)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe not between-operator (NOT BETWEEN) is used when you do not want the values between range a and range b. \n<pre><code>	SELECT T0.associate_id\n	FROM associate T0\n	WHERE associate_id NOT BETWEEN 10 AND 100;</code></pre>\nThe operator can also give range-values based on sub-selects:\n<pre><code>	SELECT T0.associate_id\n	FROM associate T0\n	WHERE associate_id NOT BETWEEN \n		(SELECT TO.associate_id\n		FROM associate T0\n		WHERE TO.name = &apos;SuperOffice&apos;)\n	AND 6\n		(SELECT TO.associate_id \n		FROM associate TO\n		WHERE TO.date > &apos;08.10.2002&apos;);</code></pre>\nThis may not make very much sense, but the possibility to do it is here.\n"
  syntax:
    content: protected virtual string ToSql(NotBetween arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.NotBetween
    return:
      type: System.String
      description: string clause
    content.vb: Protected Overridable Function ToSql(arg As NotBetween) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Like)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Like)
  id: ToSql(SuperOffice.Data.SQL.Like)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Like)
  nameWithType: Dialect.ToSql(Like)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Like)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Like (LIKE) operator is used when you want the left string-value\nto be somewhat similar to the right string-value, \n<example>\n<pre><code>WHERE contact.name LIKE &apos;Super%&apos; </code></pre> \n</example>\nWe add the wildcard-operator (%) to the end. A LIKE clause isn&apos;t very interesting\nwithout it. If the programmer don&apos;t want this, parse and remove it when the function \nreturns the correct sql-string.\n"
  syntax:
    content: protected virtual string ToSql(Like arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Like
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As  Like) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.TableInfo)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.TableInfo)
  id: ToSql(SuperOffice.Data.SQL.TableInfo)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(TableInfo)
  nameWithType: Dialect.ToSql(TableInfo)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.TableInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWill return the Table&apos;s name including table prefix.\n"
  syntax:
    content: protected virtual string ToSql(TableInfo tableInfo)
    parameters:
    - id: tableInfo
      type: SuperOffice.Data.SQL.TableInfo
      description: The table to get the name for
    return:
      type: System.String
      description: Name of the table like <code>crm5.&quot;contact&quot;</code>.
    content.vb: Protected Overridable Function ToSql(tableInfo As TableInfo) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldInfo)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldInfo)
  id: ToSql(SuperOffice.Data.SQL.FieldInfo)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(FieldInfo)
  nameWithType: Dialect.ToSql(FieldInfo)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldInfo)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWill return the Field&apos;s name together with the generated table-alias.\n<pre><code>T1.&quot;contact&quot;</code></pre>\n"
  syntax:
    content: protected virtual string ToSql(FieldInfo arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.FieldInfo
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As FieldInfo) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Parameter)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Parameter)
  id: ToSql(SuperOffice.Data.SQL.Parameter)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Parameter)
  nameWithType: Dialect.ToSql(Parameter)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Parameter)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReturns the parameter, either as a string with apostrophe&apos;s around \n<pre><code>	&apos;Super&apos;</code></pre>\nor as a &quot;normal&quot; numeric value.\n"
  syntax:
    content: protected virtual string ToSql(Parameter arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Parameter
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Parameter) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotLike)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotLike)
  id: ToSql(SuperOffice.Data.SQL.NotLike)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(NotLike)
  nameWithType: Dialect.ToSql(NotLike)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.NotLike)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Not Like (NOT LIKE) operator is used when you do not want the left string-value\nto be somewhat similar to the right string-value, \n<example>\n<pre><code> WHERE contact.name NOT LIKE &apos;Super%&apos; </code></pre>\n</example>\nWe add the wildcard-operator (%) to the end. A NOT LIKE clause isn&apos;t very interesting\nwithout it. If the programmer don&apos;t want this, parse and remove it when the function \nreturns the correct sql-string.\n"
  syntax:
    content: protected virtual string ToSql(NotLike arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.NotLike
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As NotLike) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThan)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThan)
  id: ToSql(SuperOffice.Data.SQL.LessThan)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(LessThan)
  nameWithType: Dialect.ToSql(LessThan)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThan)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Less Than (&lt;) operator is only used in restrictions where the value in a field\nshould be less then the given parameter, for example \n<example>\n<pre><code>WHERE contact.contactId &lt; 100 </code></pre> \n</example>\n"
  syntax:
    content: protected virtual string ToSql(LessThan arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.LessThan
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As LessThan) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThan)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThan)
  id: ToSql(SuperOffice.Data.SQL.GreaterThan)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(GreaterThan)
  nameWithType: Dialect.ToSql(GreaterThan)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThan)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Greater Than (>) operator is only used in restrictions where the value in a field\nshould be greater then the given parameter, for example \n<example> \n<pre><code>WHERE contact.contactId > 100 </code></pre>\n</example>\n"
  syntax:
    content: protected virtual string ToSql(GreaterThan arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.GreaterThan
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As GreaterThan) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThanOrEqual)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThanOrEqual)
  id: ToSql(SuperOffice.Data.SQL.LessThanOrEqual)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(LessThanOrEqual)
  nameWithType: Dialect.ToSql(LessThanOrEqual)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LessThanOrEqual)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Less Than Or Equal (&lt;=) operator is only used in restrictions where the value in a field\nshould be less than or equal to the given parameter, for example \n<example>\n<pre><code>WHERE contact.contactId &lt;= 100 </code></pre> \n</example>\n"
  syntax:
    content: protected virtual string ToSql(LessThanOrEqual arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.LessThanOrEqual
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As LessThanOrEqual) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThanOrEqual)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThanOrEqual)
  id: ToSql(SuperOffice.Data.SQL.GreaterThanOrEqual)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(GreaterThanOrEqual)
  nameWithType: Dialect.ToSql(GreaterThanOrEqual)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.GreaterThanOrEqual)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Greater Than Or Equal (>=) operator is only used in restrictions where the value in a field\nshould be greater than or equal to the given parameter, for example \n<example> \n<pre><code>WHERE contact.contactId >= 100 </code></pre>\n</example>\n"
  syntax:
    content: protected virtual string ToSql(GreaterThanOrEqual arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.GreaterThanOrEqual
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As GreaterThanOrEqual) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Equal)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Equal)
  id: ToSql(SuperOffice.Data.SQL.Equal)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Equal)
  nameWithType: Dialect.ToSql(Equal)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Equal)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nYou will never use the == (equal) operator on anything else then\nfields and numeric parameters ( expressions... and/ or other fields ).\nSo we just return the arg.Left == arg.Right. If the right hand side isn&apos;t\na numeric value, the return value is null.\n"
  syntax:
    content: protected virtual string ToSql(Equal arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Equal
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Equal) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.UnEqual)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.UnEqual)
  id: ToSql(SuperOffice.Data.SQL.UnEqual)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(UnEqual)
  nameWithType: Dialect.ToSql(UnEqual)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.UnEqual)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nYou will never use the != ( not equal ) operator on anything else then \nfields and numeric parameters ( or possible other fields ). \nSo we just return the arg.Left != arg.Right. If the right hand side isn&apos;t\na numeric value, the return value is null.\n"
  syntax:
    content: protected virtual string ToSql(UnEqual arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.UnEqual
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As UnEqual) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.And)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.And)
  id: ToSql(SuperOffice.Data.SQL.And)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(And)
  nameWithType: Dialect.ToSql(And)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.And)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe and (AND) operator will run through itself and its sub nodes and return the appropriate sql-syntax \nfor the and-part.\n"
  syntax:
    content: protected virtual string ToSql(And arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.And
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As  And) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Or)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Or)
  id: ToSql(SuperOffice.Data.SQL.Or)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Or)
  nameWithType: Dialect.ToSql(Or)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Or)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe or (OR) operator will run through itself and its subnodes and return the appropriate sql-syntax \nfor the and-part.\n"
  syntax:
    content: protected virtual string ToSql(Or arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Or
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As  Or) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments(SuperOffice.Data.SQL.MathematicalExpression,System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments(SuperOffice.Data.SQL.MathematicalExpression,System.String)
  id: ParseMathematicalArguments(SuperOffice.Data.SQL.MathematicalExpression,System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ParseMathematicalArguments(MathematicalExpression, String)
  nameWithType: Dialect.ParseMathematicalArguments(MathematicalExpression, String)
  fullName: SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments(SuperOffice.Data.SQL.MathematicalExpression, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nParses the argument-collection in MathematicalExpression.\n"
  remarks: "\nAll classes generalized from MathematicalExpression will use this function\nto parse the collection of arguments. Oper will tell the system if we are dealing\nwith an Add, Subtract, Divide or Multiply operation.\n"
  syntax:
    content: protected string ParseMathematicalArguments(MathematicalExpression arg, string oper)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.MathematicalExpression
      description: >-
        Argument of type MathematicalExpression is used to make sure we have

        all the information needed to perform the necessary operations.
    - id: oper
      type: System.String
      description: The operator to use.
    return:
      type: System.String
      description: A string containing the information from the argument-collection.
    content.vb: Protected Function ParseMathematicalArguments(arg As MathematicalExpression, oper As String) As String
  overload: SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Add)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Add)
  id: ToSql(SuperOffice.Data.SQL.Add)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Add)
  nameWithType: Dialect.ToSql(Add)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Add)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Add-operator will return the correct field and its correct sqlOperator. \n<pre><code>T0.associate_id = T0.associate_id + 1;</code></pre>\n"
  syntax:
    content: protected virtual string ToSql(Add arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Add
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Add) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Subtract)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Subtract)
  id: ToSql(SuperOffice.Data.SQL.Subtract)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Subtract)
  nameWithType: Dialect.ToSql(Subtract)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Subtract)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Subtract-operator will return the correct field and its correct sqlOperator. \n<pre><code>	T0.associate_id = T0.associate_id - 1;</code></pre>\n"
  syntax:
    content: protected virtual string ToSql(Subtract arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Subtract
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Subtract) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Multiply)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Multiply)
  id: ToSql(SuperOffice.Data.SQL.Multiply)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Multiply)
  nameWithType: Dialect.ToSql(Multiply)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Multiply)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Multiply-operator will return the correct field and its correct sqlOperator. \n<pre><code>	T0.associate_id = T0.associate_id * 1;</code></pre>\n"
  syntax:
    content: protected virtual string ToSql(Multiply arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Multiply
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Multiply) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Divide)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Divide)
  id: ToSql(SuperOffice.Data.SQL.Divide)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Divide)
  nameWithType: Dialect.ToSql(Divide)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Divide)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe Divided-operator will return the correct field and its correct sqlOperator. \n<pre><code>	T0.associate_id = T0.associate_id / 1;</code></pre>\n"
  syntax:
    content: protected virtual string ToSql(Divide arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Divide
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Divide) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LeftOuterJoin)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LeftOuterJoin)
  id: ToSql(SuperOffice.Data.SQL.LeftOuterJoin)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(LeftOuterJoin)
  nameWithType: Dialect.ToSql(LeftOuterJoin)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.LeftOuterJoin)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( LeftOuterJoin arg ) parses the LeftOuterJoin of an Join-sql. It also adds the right-hand table to the _tablesInJoin collection.\n"
  syntax:
    content: protected virtual string ToSql(LeftOuterJoin arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.LeftOuterJoin
      description: The LeftOuterJoin argument
    return:
      type: System.String
      description: The LeftOuterJoin sql string
    content.vb: Protected Overridable Function ToSql(arg As LeftOuterJoin) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.RightOuterJoin)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.RightOuterJoin)
  id: ToSql(SuperOffice.Data.SQL.RightOuterJoin)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(RightOuterJoin)
  nameWithType: Dialect.ToSql(RightOuterJoin)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.RightOuterJoin)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( RightOuterJoin arg ) parses the RightOuterJoin of an Join-sql.  It also adds the right-hand table to the _tablesInJoin collection.\n"
  syntax:
    content: protected virtual string ToSql(RightOuterJoin arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.RightOuterJoin
      description: The RightOuterJoin argument
    return:
      type: System.String
      description: The RightOuterJoin sql string
    content.vb: Protected Overridable Function ToSql(arg As RightOuterJoin) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.InnerJoin)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.InnerJoin)
  id: ToSql(SuperOffice.Data.SQL.InnerJoin)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(InnerJoin)
  nameWithType: Dialect.ToSql(InnerJoin)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.InnerJoin)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( InnerJoin arg ) parses the InnerJoin of an Join-sql.  It also adds the right-hand table to the _tablesInJoin collection.\n"
  syntax:
    content: protected virtual string ToSql(InnerJoin arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.InnerJoin
      description: The InnerJoin argument
    return:
      type: System.String
      description: The InnerJoin sql string
    content.vb: Protected Overridable Function ToSql(arg As InnerJoin) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ParseJoinClause(SuperOffice.Data.SQL.JoinRestriction)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ParseJoinClause(SuperOffice.Data.SQL.JoinRestriction)
  id: ParseJoinClause(SuperOffice.Data.SQL.JoinRestriction)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ParseJoinClause(JoinRestriction)
  nameWithType: Dialect.ParseJoinClause(JoinRestriction)
  fullName: SuperOffice.Data.Dialect.Dialect.ParseJoinClause(SuperOffice.Data.SQL.JoinRestriction)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nParseJoinClause will run through the JoinRestriction clause and return the corresponding clause as sql. \nIt will also populate the _tablesInJoin with the mother table; the ToSql handlers for the specific\njoin types will populate with the rest of the tables.\n"
  syntax:
    content: protected virtual string ParseJoinClause(JoinRestriction res)
    parameters:
    - id: res
      type: SuperOffice.Data.SQL.JoinRestriction
      description: The JoinRestriction.
    return:
      type: System.String
      description: Parsed sql-string
    content.vb: Protected Overridable Function ParseJoinClause(res As JoinRestriction) As String
  overload: SuperOffice.Data.Dialect.Dialect.ParseJoinClause*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Distinct)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Distinct)
  id: ToSql(SuperOffice.Data.SQL.Distinct)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Distinct)
  nameWithType: Dialect.ToSql(Distinct)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Distinct)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Distinct arg ) parses the Distinct-part of an sql-command.\nWill throw an exception if the argument is null.\n"
  syntax:
    content: protected virtual string ToSql(Distinct arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Distinct
      description: The Distinct in-parameter.
    return:
      type: System.String
      description: The parsed sql string.
    content.vb: Protected Overridable Function ToSql(arg As Distinct) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Alias)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Alias)
  id: ToSql(SuperOffice.Data.SQL.Alias)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Alias)
  nameWithType: Dialect.ToSql(Alias)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Alias)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Alias arg ) parse the Alias-part of an sql-command and returns the correct \nalias for the field. \n"
  syntax:
    content: protected virtual string ToSql(Alias arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Alias
      description: The alias arg.
    return:
      type: System.String
      description: The finished string.
    content.vb: Protected Overridable Function ToSql(arg As  Alias) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldTypeConvert)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldTypeConvert)
  id: ToSql(SuperOffice.Data.SQL.FieldTypeConvert)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(FieldTypeConvert)
  nameWithType: Dialect.ToSql(FieldTypeConvert)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.FieldTypeConvert)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( FieldTypeConvert arg ) parse the FieldTypeConvert-part of an sql-command and returns the correct database-specific\nsyntax for the conversion.\n"
  syntax:
    content: protected virtual string ToSql(FieldTypeConvert arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.FieldTypeConvert
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As FieldTypeConvert) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.FieldDataType)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.FieldDataType)
  id: ToSql(SuperOffice.Data.FieldDataType)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(FieldDataType)
  nameWithType: Dialect.ToSql(FieldDataType)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.FieldDataType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( FieldDataType arg ) will return the db-type according to the in-parameter. \n"
  syntax:
    content: protected virtual string ToSql(FieldDataType arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.FieldDataType
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As FieldDataType) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Upper)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Upper)
  id: ToSql(SuperOffice.Data.SQL.Upper)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Upper)
  nameWithType: Dialect.ToSql(Upper)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Upper)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Upper arg ) will return the given argument anclosed by the SQL UPPER function.\n"
  syntax:
    content: protected virtual string ToSql(Upper arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Upper
      description: The argument to wrap UPPER around.
    return:
      type: System.String
      description: The parsed UPPER-string
    content.vb: Protected Overridable Function ToSql(arg As Upper) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Lower)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Lower)
  id: ToSql(SuperOffice.Data.SQL.Lower)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Lower)
  nameWithType: Dialect.ToSql(Lower)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Lower)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Lower arg ) will return the given argument enclosed by the SQL LOWER function.\n"
  syntax:
    content: protected virtual string ToSql(Lower arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Lower
      description: The argument to wrap LOWER around.
    return:
      type: System.String
      description: The parsed LOWER-string
    content.vb: Protected Overridable Function ToSql(arg As Lower) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Trim)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Trim)
  id: ToSql(SuperOffice.Data.SQL.Trim)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Trim)
  nameWithType: Dialect.ToSql(Trim)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Trim)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nTrim in sybase: http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc38151.1510/html/iqrefbb/Trim.htm\nTrim in mysql: http://www.w3resource.com/mysql/string-functions/mysql-trim-function.php\nOracle doc: http://www.techonthenet.com/oracle/functions/trim.php   \n"
  syntax:
    content: protected virtual string ToSql(Trim arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Trim
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Trim) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Soundex)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Soundex)
  id: ToSql(SuperOffice.Data.SQL.Soundex)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Soundex)
  nameWithType: Dialect.ToSql(Soundex)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Soundex)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Lower arg ) will return the given argument enclosed by the SQL LOWER function.\n"
  syntax:
    content: protected virtual string ToSql(Soundex arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Soundex
      description: The argument to wrap LOWER around.
    return:
      type: System.String
      description: The parsed LOWER-string
    content.vb: Protected Overridable Function ToSql(arg As Soundex) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Year)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Year)
  id: ToSql(SuperOffice.Data.SQL.Year)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Year)
  nameWithType: Dialect.ToSql(Year)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Year)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSql(Year arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Year
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Year) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Month)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Month)
  id: ToSql(SuperOffice.Data.SQL.Month)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Month)
  nameWithType: Dialect.ToSql(Month)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Month)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSql(Month arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Month
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Month) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Day)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Day)
  id: ToSql(SuperOffice.Data.SQL.Day)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Day)
  nameWithType: Dialect.ToSql(Day)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Day)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSql(Day arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Day
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Day) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Hour)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Hour)
  id: ToSql(SuperOffice.Data.SQL.Hour)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Hour)
  nameWithType: Dialect.ToSql(Hour)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Hour)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSql(Hour arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Hour
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Hour) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Minute)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Minute)
  id: ToSql(SuperOffice.Data.SQL.Minute)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Minute)
  nameWithType: Dialect.ToSql(Minute)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Minute)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSql(Minute arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Minute
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Minute) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Second)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Second)
  id: ToSql(SuperOffice.Data.SQL.Second)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Second)
  nameWithType: Dialect.ToSql(Second)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Second)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: protected virtual string ToSql(Second arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Second
    return:
      type: System.String
    content.vb: Protected Overridable Function ToSql(arg As Second) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Sum)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Sum)
  id: ToSql(SuperOffice.Data.SQL.Sum)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Sum)
  nameWithType: Dialect.ToSql(Sum)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Sum)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Sum arg ) will return the given argument enclosed by the SQL SUM function.\n"
  syntax:
    content: protected virtual string ToSql(Sum arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Sum
      description: The argument to use SUM on.
    return:
      type: System.String
      description: The parsed SUM string
    content.vb: Protected Overridable Function ToSql(arg As Sum) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Max)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Max)
  id: ToSql(SuperOffice.Data.SQL.Max)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Max)
  nameWithType: Dialect.ToSql(Max)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Max)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( Max arg ) will return the given argument enclosed by the SQL MAX function.\n"
  syntax:
    content: protected virtual string ToSql(Max arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Max
      description: The argument to use MAX on.
    return:
      type: System.String
      description: The parsed MAX string
    content.vb: Protected Overridable Function ToSql(arg As Max) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Min)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Min)
  id: ToSql(SuperOffice.Data.SQL.Min)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ToSql(Min)
  nameWithType: Dialect.ToSql(Min)
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql(SuperOffice.Data.SQL.Min)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nToSql( MIN arg ) will return the given argument enclosed by the SQL MIN function.\n"
  syntax:
    content: protected virtual string ToSql(Min arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Min
      description: The argument to use MIN on.
    return:
      type: System.String
      description: The parsed MIN string
    content.vb: Protected Overridable Function ToSql(arg As Min) As String
  overload: SuperOffice.Data.Dialect.Dialect.ToSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType(System.Object,SuperOffice.Data.FieldDataType)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType(System.Object,SuperOffice.Data.FieldDataType)
  id: ConvertToDbParameterType(System.Object,SuperOffice.Data.FieldDataType)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ConvertToDbParameterType(Object, FieldDataType)
  nameWithType: Dialect.ConvertToDbParameterType(Object, FieldDataType)
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType(System.Object, SuperOffice.Data.FieldDataType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n\n"
  syntax:
    content: public virtual object ConvertToDbParameterType(object value, FieldDataType dataType)
    parameters:
    - id: value
      type: System.Object
    - id: dataType
      type: SuperOffice.Data.FieldDataType
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertToDbParameterType(value As Object, dataType As FieldDataType) As Object
  overload: SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ConvertToDbType(System.Object,SuperOffice.Data.FieldDataType)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ConvertToDbType(System.Object,SuperOffice.Data.FieldDataType)
  id: ConvertToDbType(System.Object,SuperOffice.Data.FieldDataType)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ConvertToDbType(Object, FieldDataType)
  nameWithType: Dialect.ConvertToDbType(Object, FieldDataType)
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertToDbType(System.Object, SuperOffice.Data.FieldDataType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert a value to a format that can be used in an SQL string when executing database commands.\n"
  syntax:
    content: public virtual string ConvertToDbType(object value, FieldDataType dataType)
    parameters:
    - id: value
      type: System.Object
      description: The value to convert.
    - id: dataType
      type: SuperOffice.Data.FieldDataType
      description: The data type of the value in the database.
    return:
      type: System.String
      description: A string that can be used in a database SQL command.
    content.vb: Public Overridable Function ConvertToDbType(value As Object, dataType As FieldDataType) As String
  overload: SuperOffice.Data.Dialect.Dialect.ConvertToDbType*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: Thrown if the data type is of an unsupported format.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ConvertFromDbType(System.Object,SuperOffice.Data.FieldDataType)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ConvertFromDbType(System.Object,SuperOffice.Data.FieldDataType)
  id: ConvertFromDbType(System.Object,SuperOffice.Data.FieldDataType)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ConvertFromDbType(Object, FieldDataType)
  nameWithType: Dialect.ConvertFromDbType(Object, FieldDataType)
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertFromDbType(System.Object, SuperOffice.Data.FieldDataType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConverts a value returned from the database to its normalised managed type.\n"
  syntax:
    content: public virtual object ConvertFromDbType(object value, FieldDataType dataType)
    parameters:
    - id: value
      type: System.Object
      description: value of the field as returned from the database
    - id: dataType
      type: SuperOffice.Data.FieldDataType
      description: data type of the field in the database.
    return:
      type: System.Object
      description: Value that can be casted to the default .net type representing the database type.
    content.vb: Public Overridable Function ConvertFromDbType(value As Object, dataType As FieldDataType) As Object
  overload: SuperOffice.Data.Dialect.Dialect.ConvertFromDbType*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: Thrown if the data type is of an unsupported format.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ConvertToDbString(System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ConvertToDbString(System.String)
  id: ConvertToDbString(System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ConvertToDbString(String)
  nameWithType: Dialect.ConvertToDbString(String)
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertToDbString(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert a string to a type that can be used in an SQL command when \ncommunication to the database.\n"
  remarks: "\nAppropriate &apos; characters are put in the front of \nand in the end of the string when processed by this method.\n"
  syntax:
    content: public virtual string ConvertToDbString(string value)
    parameters:
    - id: value
      type: System.String
      description: The string value that is to be converted.
    return:
      type: System.String
      description: A string that can be used in an SQL command.
    content.vb: Public Overridable Function ConvertToDbString(value As String) As String
  overload: SuperOffice.Data.Dialect.Dialect.ConvertToDbString*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime(System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime(System.Int32)
  id: TimeTUtc2DateTime(System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: TimeTUtc2DateTime(Int32)
  nameWithType: Dialect.TimeTUtc2DateTime(Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert the time from a UTC C time_t value to local-time DateTime.\n"
  syntax:
    content: public virtual DateTime TimeTUtc2DateTime(int time)
    parameters:
    - id: time
      type: System.Int32
      description: Seconds since UTC January 1st, 1970
    return:
      type: System.DateTime
      description: Local time DateTime converted to.
    content.vb: Public Overridable Function TimeTUtc2DateTime(time As Integer) As Date
  overload: SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime(System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime(System.Int32)
  id: TimeTLocal2DateTime(System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: TimeTLocal2DateTime(Int32)
  nameWithType: Dialect.TimeTLocal2DateTime(Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert the time from a local-time C time_t value to local-time DateTime.\n"
  syntax:
    content: public virtual DateTime TimeTLocal2DateTime(int time)
    parameters:
    - id: time
      type: System.Int32
      description: Seconds since local-time January 1st, 1970
    return:
      type: System.DateTime
      description: Local-time DateTime converted to.
    content.vb: Public Overridable Function TimeTLocal2DateTime(time As Integer) As Date
  overload: SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc(System.DateTime)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc(System.DateTime)
  id: DateTime2TimeTUtc(System.DateTime)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DateTime2TimeTUtc(DateTime)
  nameWithType: Dialect.DateTime2TimeTUtc(DateTime)
  fullName: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc(System.DateTime)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert the local-time DateTime to a UTC C time_t value.\n"
  syntax:
    content: public virtual int DateTime2TimeTUtc(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Local-time DateTime to convert from
    return:
      type: System.Int32
      description: Seconds since UTC January 1st, 1970
    content.vb: Public Overridable Function DateTime2TimeTUtc(dateTime As Date) As Integer
  overload: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal(System.DateTime)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal(System.DateTime)
  id: DateTime2TimeTLocal(System.DateTime)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DateTime2TimeTLocal(DateTime)
  nameWithType: Dialect.DateTime2TimeTLocal(DateTime)
  fullName: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal(System.DateTime)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nConvert the local-time DateTime to a local-time C time_t value.\n"
  syntax:
    content: public virtual int DateTime2TimeTLocal(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Local-time DateTime to convert from
    return:
      type: System.Int32
      description: Seconds since local-time January 1st, 1970
    content.vb: Public Overridable Function DateTime2TimeTLocal(dateTime As Date) As Integer
  overload: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.SelectSql(SuperOffice.Data.SQL.PrivateSelect)
  commentId: M:SuperOffice.Data.Dialect.Dialect.SelectSql(SuperOffice.Data.SQL.PrivateSelect)
  id: SelectSql(SuperOffice.Data.SQL.PrivateSelect)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: SelectSql(PrivateSelect)
  nameWithType: Dialect.SelectSql(PrivateSelect)
  fullName: SuperOffice.Data.Dialect.Dialect.SelectSql(SuperOffice.Data.SQL.PrivateSelect)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWill generate the select-sql based on the in-parameter.\n"
  syntax:
    content: protected virtual string SelectSql(PrivateSelect cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.PrivateSelect
      description: Contains the object-structure that will describe the sql.
    return:
      type: System.String
      description: The generated sql-statement
    content.vb: Protected Overridable Function SelectSql(cmd As PrivateSelect) As String
  overload: SuperOffice.Data.Dialect.Dialect.SelectSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ComposeSelect(System.String,System.String,System.String,System.String,System.Text.StringBuilder,SuperOffice.Data.SQL.PrivateSelect)
  commentId: M:SuperOffice.Data.Dialect.Dialect.ComposeSelect(System.String,System.String,System.String,System.String,System.Text.StringBuilder,SuperOffice.Data.SQL.PrivateSelect)
  id: ComposeSelect(System.String,System.String,System.String,System.String,System.Text.StringBuilder,SuperOffice.Data.SQL.PrivateSelect)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ComposeSelect(String, String, String, String, StringBuilder, PrivateSelect)
  nameWithType: Dialect.ComposeSelect(String, String, String, String, StringBuilder, PrivateSelect)
  fullName: SuperOffice.Data.Dialect.Dialect.ComposeSelect(System.String, System.String, System.String, System.String, System.Text.StringBuilder, SuperOffice.Data.SQL.PrivateSelect)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nCompose the final <strong>SELECT</strong> from its constituent parts. This template-method pattern is used so\nspecific dialects can insert options etc as needed\n"
  syntax:
    content: protected virtual string ComposeSelect(string select, string fields, string from, string join, StringBuilder sql, PrivateSelect originalCommand)
    parameters:
    - id: select
      type: System.String
    - id: fields
      type: System.String
    - id: from
      type: System.String
    - id: join
      type: System.String
    - id: sql
      type: System.Text.StringBuilder
    - id: originalCommand
      type: SuperOffice.Data.SQL.PrivateSelect
    return:
      type: System.String
    content.vb: Protected Overridable Function ComposeSelect(select As String, fields As String, from As String, join As String, sql As StringBuilder, originalCommand As PrivateSelect) As String
  overload: SuperOffice.Data.Dialect.Dialect.ComposeSelect*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.InsertSql(SuperOffice.Data.SQL.PrivateSave)
  commentId: M:SuperOffice.Data.Dialect.Dialect.InsertSql(SuperOffice.Data.SQL.PrivateSave)
  id: InsertSql(SuperOffice.Data.SQL.PrivateSave)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: InsertSql(PrivateSave)
  nameWithType: Dialect.InsertSql(PrivateSave)
  fullName: SuperOffice.Data.Dialect.Dialect.InsertSql(SuperOffice.Data.SQL.PrivateSave)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWill generate the insert-sql statement based on the in-parameter. \n"
  syntax:
    content: protected virtual string InsertSql(PrivateSave cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.PrivateSave
      description: Contains the object-structure that will describe the sql.
    return:
      type: System.String
      description: The generated sql-string.
    content.vb: Protected Overridable Function InsertSql(cmd As PrivateSave) As String
  overload: SuperOffice.Data.Dialect.Dialect.InsertSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.UpdateSql(SuperOffice.Data.SQL.PrivateSave)
  commentId: M:SuperOffice.Data.Dialect.Dialect.UpdateSql(SuperOffice.Data.SQL.PrivateSave)
  id: UpdateSql(SuperOffice.Data.SQL.PrivateSave)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: UpdateSql(PrivateSave)
  nameWithType: Dialect.UpdateSql(PrivateSave)
  fullName: SuperOffice.Data.Dialect.Dialect.UpdateSql(SuperOffice.Data.SQL.PrivateSave)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWill generate the update-statement. \n"
  syntax:
    content: protected virtual string UpdateSql(PrivateSave cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.PrivateSave
      description: >-
        Takes a Private save as in-parameter. This object contains the structure needed

        to build the sql-string.
    return:
      type: System.String
      description: The generated sql-string.
    content.vb: Protected Overridable Function UpdateSql(cmd As PrivateSave) As String
  overload: SuperOffice.Data.Dialect.Dialect.UpdateSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DeleteSql(SuperOffice.Data.SQL.PrivateSave)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DeleteSql(SuperOffice.Data.SQL.PrivateSave)
  id: DeleteSql(SuperOffice.Data.SQL.PrivateSave)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DeleteSql(PrivateSave)
  nameWithType: Dialect.DeleteSql(PrivateSave)
  fullName: SuperOffice.Data.Dialect.Dialect.DeleteSql(SuperOffice.Data.SQL.PrivateSave)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nWill generate the Delete-statement. \n"
  syntax:
    content: protected virtual string DeleteSql(PrivateSave cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.PrivateSave
      description: >-
        Takes a Private save as in-parameter. This object contains the structure needed

        to build the sql-string.
    return:
      type: System.String
      description: The generated sql-string.
    content.vb: Protected Overridable Function DeleteSql(cmd As PrivateSave) As String
  overload: SuperOffice.Data.Dialect.Dialect.DeleteSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.UnionSql(SuperOffice.Data.SQL.TableExpression)
  commentId: M:SuperOffice.Data.Dialect.Dialect.UnionSql(SuperOffice.Data.SQL.TableExpression)
  id: UnionSql(SuperOffice.Data.SQL.TableExpression)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: UnionSql(TableExpression)
  nameWithType: Dialect.UnionSql(TableExpression)
  fullName: SuperOffice.Data.Dialect.Dialect.UnionSql(SuperOffice.Data.SQL.TableExpression)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nUnionSql will parse through the union-array list and return the correct sql-statement.\n"
  syntax:
    content: protected virtual string UnionSql(TableExpression cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.TableExpression
      description: The Union statement.
    return:
      type: System.String
      description: The parsed sql-statement.
    content.vb: Protected Overridable Function UnionSql(cmd As TableExpression) As String
  overload: SuperOffice.Data.Dialect.Dialect.UnionSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.PreParseUnion(SuperOffice.Data.SQL.TableExpression)
  commentId: M:SuperOffice.Data.Dialect.Dialect.PreParseUnion(SuperOffice.Data.SQL.TableExpression)
  id: PreParseUnion(SuperOffice.Data.SQL.TableExpression)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: PreParseUnion(TableExpression)
  nameWithType: Dialect.PreParseUnion(TableExpression)
  fullName: SuperOffice.Data.Dialect.Dialect.PreParseUnion(SuperOffice.Data.SQL.TableExpression)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nOverride this method if addtional parsing is required to be performed on the Union\n"
  syntax:
    content: protected virtual void PreParseUnion(TableExpression cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.TableExpression
      description: The Union statement.
    content.vb: Protected Overridable Sub PreParseUnion(cmd As TableExpression)
  overload: SuperOffice.Data.Dialect.Dialect.PreParseUnion*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DifferenceSql(SuperOffice.Data.SQL.TableExpression)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DifferenceSql(SuperOffice.Data.SQL.TableExpression)
  id: DifferenceSql(SuperOffice.Data.SQL.TableExpression)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DifferenceSql(TableExpression)
  nameWithType: Dialect.DifferenceSql(TableExpression)
  fullName: SuperOffice.Data.Dialect.Dialect.DifferenceSql(SuperOffice.Data.SQL.TableExpression)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDifferenceSql will parse through the difference-array list and return the correct sql-statement.\n"
  syntax:
    content: protected virtual string DifferenceSql(TableExpression cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.TableExpression
      description: The Difference statement.
    return:
      type: System.String
      description: The parsed sql-statement.
    content.vb: Protected Overridable Function DifferenceSql(cmd As TableExpression) As String
  overload: SuperOffice.Data.Dialect.Dialect.DifferenceSql*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.GenerateSql(SuperOffice.Data.SQL.SqlCommand)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GenerateSql(SuperOffice.Data.SQL.SqlCommand)
  id: GenerateSql(SuperOffice.Data.SQL.SqlCommand)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GenerateSql(SqlCommand)
  nameWithType: Dialect.GenerateSql(SqlCommand)
  fullName: SuperOffice.Data.Dialect.Dialect.GenerateSql(SuperOffice.Data.SQL.SqlCommand)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nStarts the correct sql-generating function based on the type of command. \n"
  syntax:
    content: public virtual SoSqlParameter GenerateSql(SqlCommand cmd)
    parameters:
    - id: cmd
      type: SuperOffice.Data.SQL.SqlCommand
      description: The object-structure we build the sql from.
    return:
      type: SuperOffice.Data.SoSqlParameter
    content.vb: Public Overridable Function GenerateSql(cmd As SqlCommand) As SoSqlParameter
  overload: SuperOffice.Data.Dialect.Dialect.GenerateSql*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.FieldIsClob(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.Dialect.Dialect.FieldIsClob(SuperOffice.Data.SQL.Argument)
  id: FieldIsClob(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: FieldIsClob(Argument)
  nameWithType: Dialect.FieldIsClob(Argument)
  fullName: SuperOffice.Data.Dialect.Dialect.FieldIsClob(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDetermine if an argument is a field that is stored as a blob in the current database\n"
  syntax:
    content: protected bool FieldIsClob(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
    return:
      type: System.Boolean
    content.vb: Protected Function FieldIsClob(arg As Argument) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.FieldIsClob*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.FieldIsString(SuperOffice.Data.SQL.Argument)
  commentId: M:SuperOffice.Data.Dialect.Dialect.FieldIsString(SuperOffice.Data.SQL.Argument)
  id: FieldIsString(SuperOffice.Data.SQL.Argument)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: FieldIsString(Argument)
  nameWithType: Dialect.FieldIsString(Argument)
  fullName: SuperOffice.Data.Dialect.Dialect.FieldIsString(SuperOffice.Data.SQL.Argument)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDetermine if an argument is a field that is stored as a blob in the current database\n"
  syntax:
    content: protected bool FieldIsString(Argument arg)
    parameters:
    - id: arg
      type: SuperOffice.Data.SQL.Argument
    return:
      type: System.Boolean
    content.vb: Protected Function FieldIsString(arg As Argument) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.FieldIsString*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetName(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetName(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetName(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReturn the name of the i&apos;th column.\n"
  syntax:
    content: public virtual string DataReaderGetName(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
      description: 0 based index.
    return:
      type: System.String
      description: >-
        The name of the column. Usually the same as the database column name, but it

        depends on what you aliased the column as in your select statement
    content.vb: Public Overridable Function DataReaderGetName(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As String
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetName*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetDataTypeName(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetDataTypeName(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetDataTypeName(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReturn the name of the datatype of the i&apos;th column\n"
  syntax:
    content: public virtual string DataReaderGetDataTypeName(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
      description: 0-based index.
    return:
      type: System.String
      description: 'Name of the data type in the column. for example: &quot;int&quot; or &quot;varchar&quot; '
    content.vb: Public Overridable Function DataReaderGetDataTypeName(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As String
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetFieldType(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetFieldType(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetFieldType(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReturn the actual Type class for the data type\n"
  syntax:
    content: public virtual Type DataReaderGetFieldType(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
      description: 0-based index.
    return:
      type: System.Type
    content.vb: Public Overridable Function DataReaderGetFieldType(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Type
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetValue(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetValue(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetValue(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetValue(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetValue(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetValue(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReturn the value of the datatype.\n"
  syntax:
    content: public object DataReaderGetValue(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
      description: 0-based index
    return:
      type: System.Object
      description: "A generic object. What it is depends on the type of the column. \nCould be an int. Could be a string. You won&apos;t know until you check GetDataTypeName"
    content.vb: Public Function DataReaderGetValue(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Object
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.String)
  id: DataReaderGetOrdinal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetOrdinal(SoDataReader, IDataReader, String)
  nameWithType: Dialect.DataReaderGetOrdinal(SoDataReader, IDataReader, String)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReturn the index of the named field.\n"
  syntax:
    content: public virtual int DataReaderGetOrdinal(SoDataReader soReader, IDataReader innerReader, string name)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: name
      type: System.String
      description: The name of the field
    return:
      type: System.Int32
      description: A zero-based index suitable for use with GetValue(int) and the rest of the Get functions.
    content.vb: Public Overridable Function DataReaderGetOrdinal(soReader As SoDataReader, innerReader As IDataReader, name As String) As Integer
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetItem(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetItem(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetItem(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetItem(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetItem(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetItem(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGet object at the index\n"
  syntax:
    content: protected virtual object DataReaderGetItem(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
      description: 0-based index
    return:
      type: System.Object
    content.vb: Protected Overridable Function DataReaderGetItem(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Object
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetItem*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue(SuperOffice.Data.SoDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue(SuperOffice.Data.SoDataReader,System.Int32)
  id: DataReaderGetNullValue(SuperOffice.Data.SoDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetNullValue(SoDataReader, Int32)
  nameWithType: Dialect.DataReaderGetNullValue(SoDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue(SuperOffice.Data.SoDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: public virtual object DataReaderGetNullValue(SoDataReader soReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Object
    content.vb: Public Overridable Function DataReaderGetNullValue(soReader As SoDataReader, i As Integer) As Object
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetBoolean(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetBoolean(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetBoolean(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a bool.\n"
  syntax:
    content: public virtual bool DataReaderGetBoolean(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Overridable Function DataReaderGetBoolean(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetByte(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetByte(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetByte(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetByte(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetByte(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetByte(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a byte.\n"
  syntax:
    content: public virtual byte DataReaderGetByte(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Byte
    content.vb: Public Overridable Function DataReaderGetByte(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Byte
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetByte*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: DataReaderGetBytes(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetBytes(SoDataReader, IDataReader, Int32, Int64, Byte[], Int32, Int32)
  nameWithType: Dialect.DataReaderGetBytes(SoDataReader, IDataReader, Int32, Int64, Byte[], Int32, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReads a stream of bytes from the specified column offset into \nthe buffer an array starting at the given buffer offset\n"
  syntax:
    content: public virtual long DataReaderGetBytes(SoDataReader soReader, IDataReader innerReader, int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    - id: fieldOffset
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferoffset
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
    content.vb: Public Overridable Function DataReaderGetBytes(soReader As SoDataReader, innerReader As IDataReader, i As Integer, fieldOffset As Long, buffer As Byte(), bufferoffset As Integer, length As Integer) As Long
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes*
  nameWithType.vb: Dialect.DataReaderGetBytes(SoDataReader, IDataReader, Int32, Int64, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: DataReaderGetBytes(SoDataReader, IDataReader, Int32, Int64, Byte(), Int32, Int32)
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetChar(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetChar(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetChar(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetChar(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetChar(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetChar(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a single character.\n"
  syntax:
    content: public virtual char DataReaderGetChar(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
      description: 0-based index
    return:
      type: System.Char
    content.vb: Public Overridable Function DataReaderGetChar(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Char
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetChar*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetChars(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetChars(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: DataReaderGetChars(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetChars(SoDataReader, IDataReader, Int32, Int64, Char[], Int32, Int32)
  nameWithType: Dialect.DataReaderGetChars(SoDataReader, IDataReader, Int32, Int64, Char[], Int32, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetChars(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nReads a stream of characters from the specified column offset into \nthe buffer as an array starting at the given buffer offset.\n"
  syntax:
    content: public virtual long DataReaderGetChars(SoDataReader soReader, IDataReader innerReader, int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    - id: fieldoffset
      type: System.Int64
    - id: buffer
      type: System.Char[]
    - id: bufferoffset
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
    content.vb: Public Overridable Function DataReaderGetChars(soReader As SoDataReader, innerReader As IDataReader, i As Integer, fieldoffset As Long, buffer As Char(), bufferoffset As Integer, length As Integer) As Long
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetChars*
  nameWithType.vb: Dialect.DataReaderGetChars(SoDataReader, IDataReader, Int32, Int64, Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: SuperOffice.Data.Dialect.Dialect.DataReaderGetChars(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: DataReaderGetChars(SoDataReader, IDataReader, Int32, Int64, Char(), Int32, Int32)
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetGuid(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetGuid(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetGuid(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a globally-unique identifier (GUID).\n"
  syntax:
    content: public virtual Guid DataReaderGetGuid(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Guid
    content.vb: Public Overridable Function DataReaderGetGuid(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Guid
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetInt16(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetInt16(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetInt16(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a 16-bit signed integer.\n"
  syntax:
    content: public virtual short DataReaderGetInt16(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Int16
    content.vb: Public Overridable Function DataReaderGetInt16(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Short
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetInt32(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetInt32(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetInt32(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a 32-bit signed integer.\n"
  syntax:
    content: public virtual int DataReaderGetInt32(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Overridable Function DataReaderGetInt32(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Integer
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetInt32Array(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetInt32Array(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetInt32Array(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as an array of 32-bit signed integers; database storage is an encoded string format\n"
  syntax:
    content: public virtual int[] DataReaderGetInt32Array(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Int32[]
    content.vb: Public Overridable Function DataReaderGetInt32Array(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Integer()
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetInt64(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetInt64(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetInt64(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a 64-bit signed integer.\n"
  syntax:
    content: public virtual long DataReaderGetInt64(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Int64
    content.vb: Public Overridable Function DataReaderGetInt64(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Long
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetFloat(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetFloat(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetFloat(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a single-precision floating point number.\n"
  syntax:
    content: public virtual float DataReaderGetFloat(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Single
    content.vb: Public Overridable Function DataReaderGetFloat(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Single
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetDouble(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetDouble(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetDouble(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a double-precision floating point number.\n"
  syntax:
    content: public virtual double DataReaderGetDouble(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Overridable Function DataReaderGetDouble(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Double
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetString(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetString(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetString(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetString(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetString(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetString(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a string.\n"
  syntax:
    content: public virtual string DataReaderGetString(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Overridable Function DataReaderGetString(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As String
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetString*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetDecimal(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetDecimal(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetDecimal(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a decimal.\n"
  syntax:
    content: public virtual decimal DataReaderGetDecimal(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Decimal
    content.vb: Public Overridable Function DataReaderGetDecimal(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Decimal
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetDateTime(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetDateTime(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetDateTime(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGets the value of the specified column as a DateTime.\n"
  remarks: "\nThis method takes into account SuperOffice timezone handling, UTC datetimes (registered, updated) and standard datetime without timezone support.\nTo avoid overmuch &apos;help&apos; from zealous .NET code we always return the datetime as kind Unspecified, regardless of its origin.\n"
  syntax:
    content: public DateTime DataReaderGetDateTime(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
      description: the real data reader
    - id: i
      type: System.Int32
      description: column index
    return:
      type: System.DateTime
      description: The DateTime in local time (unless column is marked UTC), or  MaxValue/MinValue
    content.vb: Public Function DataReaderGetDateTime(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Date
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetData(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderGetData(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderGetData(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderGetData(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderGetData(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetData(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n\n"
  syntax:
    content: public IDataReader DataReaderGetData(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Data.IDataReader
    content.vb: Public Function DataReaderGetData(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As IDataReader
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderGetData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  id: DataReaderIsDBNull(SuperOffice.Data.SoDataReader,System.Data.IDataReader,System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DataReaderIsDBNull(SoDataReader, IDataReader, Int32)
  nameWithType: Dialect.DataReaderIsDBNull(SoDataReader, IDataReader, Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull(SuperOffice.Data.SoDataReader, System.Data.IDataReader, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\n\n"
  syntax:
    content: public bool DataReaderIsDBNull(SoDataReader soReader, IDataReader innerReader, int i)
    parameters:
    - id: soReader
      type: SuperOffice.Data.SoDataReader
      description: DataReader to read from.
    - id: innerReader
      type: System.Data.IDataReader
    - id: i
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function DataReaderIsDBNull(soReader As SoDataReader, innerReader As IDataReader, i As Integer) As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Dialect.Dialect.IntToSingleWord(System.Int32)
  commentId: M:SuperOffice.Data.Dialect.Dialect.IntToSingleWord(System.Int32)
  id: IntToSingleWord(System.Int32)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: IntToSingleWord(Int32)
  nameWithType: Dialect.IntToSingleWord(Int32)
  fullName: SuperOffice.Data.Dialect.Dialect.IntToSingleWord(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nMap digits in an int to letters. 123 becomes AABCD, note the digit mapping and left-pad with A (= 0) to make at least five letters\n"
  syntax:
    content: public static string IntToSingleWord(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function IntToSingleWord(id As Integer) As String
  overload: SuperOffice.Data.Dialect.Dialect.IntToSingleWord*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Dialect.Dialect.IntArrayToWordString(System.Int32[])
  commentId: M:SuperOffice.Data.Dialect.Dialect.IntArrayToWordString(System.Int32[])
  id: IntArrayToWordString(System.Int32[])
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: IntArrayToWordString(Int32[])
  nameWithType: Dialect.IntArrayToWordString(Int32[])
  fullName: SuperOffice.Data.Dialect.Dialect.IntArrayToWordString(System.Int32[])
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: public static string IntArrayToWordString(params int[] ids)
    parameters:
    - id: ids
      type: System.Int32[]
    return:
      type: System.String
    content.vb: Public Shared Function IntArrayToWordString(ParamArray ids As Integer()) As String
  overload: SuperOffice.Data.Dialect.Dialect.IntArrayToWordString*
  nameWithType.vb: Dialect.IntArrayToWordString(Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Data.Dialect.Dialect.IntArrayToWordString(System.Int32())
  name.vb: IntArrayToWordString(Int32())
- uid: SuperOffice.Data.Dialect.Dialect.IntFromSingleWord(System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.IntFromSingleWord(System.String)
  id: IntFromSingleWord(System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: IntFromSingleWord(String)
  nameWithType: Dialect.IntFromSingleWord(String)
  fullName: SuperOffice.Data.Dialect.Dialect.IntFromSingleWord(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: public static int IntFromSingleWord(string word)
    parameters:
    - id: word
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Shared Function IntFromSingleWord(word As String) As Integer
  overload: SuperOffice.Data.Dialect.Dialect.IntFromSingleWord*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString(System.String)
  commentId: M:SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString(System.String)
  id: IntArrayFromWordString(System.String)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: IntArrayFromWordString(String)
  nameWithType: Dialect.IntArrayFromWordString(String)
  fullName: SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: public static int[] IntArrayFromWordString(string wordString)
    parameters:
    - id: wordString
      type: System.String
    return:
      type: System.Int32[]
    content.vb: Public Shared Function IntArrayFromWordString(wordString As String) As Integer()
  overload: SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Data.Dialect.Dialect.GetIsolationLevel(System.Data.IsolationLevel)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetIsolationLevel(System.Data.IsolationLevel)
  id: GetIsolationLevel(System.Data.IsolationLevel)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetIsolationLevel(IsolationLevel)
  nameWithType: Dialect.GetIsolationLevel(IsolationLevel)
  fullName: SuperOffice.Data.Dialect.Dialect.GetIsolationLevel(System.Data.IsolationLevel)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGet the IsolationLevel supported by the database.\n"
  syntax:
    content: public virtual IsolationLevel GetIsolationLevel(IsolationLevel requestedLevel)
    parameters:
    - id: requestedLevel
      type: System.Data.IsolationLevel
      description: Requested isolation level.
    return:
      type: System.Data.IsolationLevel
      description: IsolationLevel supported by the current database.
    content.vb: Public Overridable Function GetIsolationLevel(requestedLevel As IsolationLevel) As IsolationLevel
  overload: SuperOffice.Data.Dialect.Dialect.GetIsolationLevel*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction(SuperOffice.Data.SoConnection,SuperOffice.Data.SQL.SqlCommand)
  commentId: M:SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction(SuperOffice.Data.SoConnection,SuperOffice.Data.SQL.SqlCommand)
  id: GetDefaultTransaction(SuperOffice.Data.SoConnection,SuperOffice.Data.SQL.SqlCommand)
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: GetDefaultTransaction(SoConnection, SqlCommand)
  nameWithType: Dialect.GetDefaultTransaction(SoConnection, SqlCommand)
  fullName: SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction(SuperOffice.Data.SoConnection, SuperOffice.Data.SQL.SqlCommand)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nCreate and return a default transaction, if the Dialect feels it desirable\n"
  remarks: "\nOn SQL Server, large SELECT&apos;s are problematic due to automatic lock escalation. When 5000 row locks\nhave been accumulated, the server tends to escalate this to a table lock, thereby blocking concurrent\nINSERTs and UPDATEs, even if they are happening far away from the select.\n<p></p>\nA fairly clean way to avoid this is to have IsolationLevel.ReadUncommited on those selects - this\ncauses them to create no locks and honour no locks. Whether to do this is something the concrete\ndialects need to take into account.\n"
  syntax:
    content: protected virtual SoTransaction GetDefaultTransaction(SoConnection connection, SqlCommand sqlCommand)
    parameters:
    - id: connection
      type: SuperOffice.Data.SoConnection
      description: Connection the command will be executed on
    - id: sqlCommand
      type: SuperOffice.Data.SQL.SqlCommand
      description: Command to be executed
    return:
      type: SuperOffice.Data.SoTransaction
      description: Newly created default transaction, or null
    content.vb: Protected Overridable Function GetDefaultTransaction(connection As SoConnection, sqlCommand As SqlCommand) As SoTransaction
  overload: SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase
  commentId: P:SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase
  id: CaseSensitiveDatabase
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: CaseSensitiveDatabase
  nameWithType: Dialect.CaseSensitiveDatabase
  fullName: SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nIs the database case-sensitive by default (something we work hard to make disappear)?\n"
  syntax:
    content: protected virtual bool CaseSensitiveDatabase { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property CaseSensitiveDatabase As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy
  commentId: P:SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy
  id: BlockUpperInOrderBy
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: BlockUpperInOrderBy
  nameWithType: Dialect.BlockUpperInOrderBy
  fullName: SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nDB2 has somewhat pathological behaviour... if you have DISTINCT in the SELECT, then you cannot have UPPER in ORDERBY.\nBelieve it or not. See http://publib.boulder.ibm.com/infocenter/db2v7luw/index.jsp?topic=/com.ibm.db2v7.doc/db2m0/sql0200.htm\nand look for message SQL0214N with reason code &apos;2&apos;.\n"
  syntax:
    content: protected virtual bool BlockUpperInOrderBy { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property BlockUpperInOrderBy As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.MaxInSize
  commentId: P:SuperOffice.Data.Dialect.Dialect.MaxInSize
  id: MaxInSize
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: MaxInSize
  nameWithType: Dialect.MaxInSize
  fullName: SuperOffice.Data.Dialect.Dialect.MaxInSize
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nOracle has a hard limit of 1000 on the number of items allowed in an IN clause. Bigger IN clauses are partitioned using an OR construct\n"
  syntax:
    content: protected virtual int MaxInSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Protected Overridable ReadOnly Property MaxInSize As Integer
  overload: SuperOffice.Data.Dialect.Dialect.MaxInSize*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.Tables
  commentId: P:SuperOffice.Data.Dialect.Dialect.Tables
  id: Tables
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: Tables
  nameWithType: Dialect.Tables
  fullName: SuperOffice.Data.Dialect.Dialect.Tables
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe TableInfoCollection\n"
  syntax:
    content: protected TableInfoCollection Tables { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.TableInfoCollection
    content.vb: Protected Property Tables As TableInfoCollection
  overload: SuperOffice.Data.Dialect.Dialect.Tables*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: SuperOffice.Data.Dialect.Dialect.ReturnDBFields
  commentId: P:SuperOffice.Data.Dialect.Dialect.ReturnDBFields
  id: ReturnDBFields
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ReturnDBFields
  nameWithType: Dialect.ReturnDBFields
  fullName: SuperOffice.Data.Dialect.Dialect.ReturnDBFields
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nThe ReturnFields.\n"
  syntax:
    content: protected FieldInfoCollection ReturnDBFields { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.FieldInfoCollection
    content.vb: Protected ReadOnly Property ReturnDBFields As FieldInfoCollection
  overload: SuperOffice.Data.Dialect.Dialect.ReturnDBFields*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete
  commentId: P:SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete
  id: HasAliasOnDelete
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: HasAliasOnDelete
  nameWithType: Dialect.HasAliasOnDelete
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nUsed to check if alias is used with fields and tables in the <code>SQL DELETE</code>-command.\n"
  remarks: "\nDefault value is true.\n"
  example:
  - "\nThis method can be overridden in the following manner:\n<pre><code>protected override bool HasaliasOnDelete { get { return false; } }</code></pre>\n"
  syntax:
    content: protected virtual bool HasAliasOnDelete { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property HasAliasOnDelete As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert
  commentId: P:SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert
  id: HasAliasOnInsert
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: HasAliasOnInsert
  nameWithType: Dialect.HasAliasOnInsert
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nUsed to check if alias is used with fields and tables in the <code>SQL INSERT</code>-command.\n"
  remarks: "\n<p>Default value is true</p>\n<p>For example see <xref href=\"SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  syntax:
    content: protected virtual bool HasAliasOnInsert { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property HasAliasOnInsert As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate
  commentId: P:SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate
  id: HasAliasOnUpdate
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: HasAliasOnUpdate
  nameWithType: Dialect.HasAliasOnUpdate
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nUsed to check if alias is used with fields and tables in the <code>SQL UPDATE</code>-command.\n"
  remarks: "\n<p>Default value is true</p>\n<p>For example see <xref href=\"SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  syntax:
    content: protected virtual bool HasAliasOnUpdate { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property HasAliasOnUpdate As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect
  commentId: P:SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect
  id: HasAliasOnSelect
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: HasAliasOnSelect
  nameWithType: Dialect.HasAliasOnSelect
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nUsed to check if alias is used with fields and tables in the <code>SQL SELECT</code>-command.\n"
  remarks: "\n<p>Default value is true</p>\n<p>For example see <xref href=\"SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  syntax:
    content: protected virtual bool HasAliasOnSelect { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property HasAliasOnSelect As Boolean
  overload: SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.CurrentSqlType
  commentId: P:SuperOffice.Data.Dialect.Dialect.CurrentSqlType
  id: CurrentSqlType
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: CurrentSqlType
  nameWithType: Dialect.CurrentSqlType
  fullName: SuperOffice.Data.Dialect.Dialect.CurrentSqlType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nTells the system what kind of sql we are dealing with.\n"
  syntax:
    content: protected virtual SqlType CurrentSqlType { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.SqlType
    content.vb: Protected Overridable Property CurrentSqlType As SqlType
  overload: SuperOffice.Data.Dialect.Dialect.CurrentSqlType*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType
  commentId: P:SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType
  id: CurrentOuterSqlType
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: CurrentOuterSqlType
  nameWithType: Dialect.CurrentOuterSqlType
  fullName: SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nTells the system if we are having an outer command on the current sql command.\n"
  syntax:
    content: protected virtual SqlType CurrentOuterSqlType { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.SqlType
    content.vb: Protected Overridable Property CurrentOuterSqlType As SqlType
  overload: SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer
  commentId: P:SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer
  id: ReturnFieldsIndexer
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: ReturnFieldsIndexer
  nameWithType: Dialect.ReturnFieldsIndexer
  fullName: SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  syntax:
    content: public ReturnFieldsIndexer ReturnFieldsIndexer { get; }
    parameters: []
    return:
      type: SuperOffice.Data.SQL.ReturnFieldsIndexer
    content.vb: Public ReadOnly Property ReturnFieldsIndexer As ReturnFieldsIndexer
  overload: SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.VarcharType
  commentId: P:SuperOffice.Data.Dialect.Dialect.VarcharType
  id: VarcharType
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: VarcharType
  nameWithType: Dialect.VarcharType
  fullName: SuperOffice.Data.Dialect.Dialect.VarcharType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGet the type of variable length characters used in the database.  This can either be VARCHAR or NVARCHAR.\n"
  syntax:
    content: protected string VarcharType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected ReadOnly Property VarcharType As String
  overload: SuperOffice.Data.Dialect.Dialect.VarcharType*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: SuperOffice.Data.Dialect.Dialect.DefaultConnectionString
  commentId: P:SuperOffice.Data.Dialect.Dialect.DefaultConnectionString
  id: DefaultConnectionString
  parent: SuperOffice.Data.Dialect.Dialect
  langs:
  - csharp
  - vb
  name: DefaultConnectionString
  nameWithType: Dialect.DefaultConnectionString
  fullName: SuperOffice.Data.Dialect.Dialect.DefaultConnectionString
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Dialect
  summary: "\nGet default connection string\n"
  syntax:
    content: public abstract string DefaultConnectionString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property DefaultConnectionString As String
  overload: SuperOffice.Data.Dialect.Dialect.DefaultConnectionString*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: SuperOffice.Data.Dialect
  commentId: N:SuperOffice.Data.Dialect
  isExternal: true
  name: SuperOffice.Data.Dialect
  nameWithType: SuperOffice.Data.Dialect
  fullName: SuperOffice.Data.Dialect
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dialect.Dialect.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<Dialect, To>()
  nameWithType: EnumUtil.MapEnums<Dialect, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Dialect.Dialect, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of Dialect, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Dialect.Dialect, To)()
  name.vb: MapEnums(Of Dialect, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<Dialect, To>
    nameWithType: EnumUtil.MapEnums<Dialect, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Dialect.Dialect, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of Dialect, To)
    nameWithType: EnumUtil.MapEnums(Of Dialect, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Dialect.Dialect, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dialect.Dialect.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<Dialect, To>()
  nameWithType: Converters.MapEnums<Dialect, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Dialect.Dialect, To>()
  nameWithType.vb: Converters.MapEnums(Of Dialect, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Dialect.Dialect, To)()
  name.vb: MapEnums(Of Dialect, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<Dialect, To>
    nameWithType: Converters.MapEnums<Dialect, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Dialect.Dialect, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of Dialect, To)
    nameWithType: Converters.MapEnums(Of Dialect, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Dialect.Dialect, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.SQL.TableInfoCollection
  commentId: T:SuperOffice.Data.SQL.TableInfoCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfoCollection
  nameWithType: TableInfoCollection
  fullName: SuperOffice.Data.SQL.TableInfoCollection
- uid: SuperOffice.Data.SQL
  commentId: N:SuperOffice.Data.SQL
  isExternal: true
  name: SuperOffice.Data.SQL
  nameWithType: SuperOffice.Data.SQL
  fullName: SuperOffice.Data.SQL
- uid: SuperOffice.Data.SQL.FieldInfoCollection
  commentId: T:SuperOffice.Data.SQL.FieldInfoCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfoCollection
  nameWithType: FieldInfoCollection
  fullName: SuperOffice.Data.SQL.FieldInfoCollection
- uid: System.Data.DataTable
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Collections.Generic.List{SuperOffice.Data.SQL.Argument}
  commentId: T:System.Collections.Generic.List{SuperOffice.Data.SQL.Argument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Argument>
  nameWithType: List<Argument>
  fullName: System.Collections.Generic.List<SuperOffice.Data.SQL.Argument>
  nameWithType.vb: List(Of Argument)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.Data.SQL.Argument)
  name.vb: List(Of Argument)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.ArrayList
  commentId: T:System.Collections.ArrayList
  parent: System.Collections
  isExternal: true
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List{System.Func{System.Data.IDataReader,System.Boolean}}
  commentId: T:System.Collections.Generic.List{System.Func{System.Data.IDataReader,System.Boolean}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Func<IDataReader, Boolean>>
  nameWithType: List<Func<IDataReader, Boolean>>
  fullName: System.Collections.Generic.List<System.Func<System.Data.IDataReader, System.Boolean>>
  nameWithType.vb: List(Of Func(Of IDataReader, Boolean))
  fullName.vb: System.Collections.Generic.List(Of System.Func(Of System.Data.IDataReader, System.Boolean))
  name.vb: List(Of Func(Of IDataReader, Boolean))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataReader
    name: IDataReader
    nameWithType: IDataReader
    fullName: System.Data.IDataReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataReader
    name: IDataReader
    nameWithType: IDataReader
    fullName: System.Data.IDataReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.SQL.SqlCommand
  commentId: T:SuperOffice.Data.SQL.SqlCommand
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: SuperOffice.Data.SQL.SqlCommand
- uid: System.Collections.Generic.HashSet{SuperOffice.Data.SQL.FieldInfo}
  commentId: '!:System.Collections.Generic.HashSet{SuperOffice.Data.SQL.FieldInfo}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<FieldInfo>
  nameWithType: HashSet<FieldInfo>
  fullName: System.Collections.Generic.HashSet<SuperOffice.Data.SQL.FieldInfo>
  nameWithType.vb: HashSet(Of FieldInfo)
  fullName.vb: System.Collections.Generic.HashSet(Of SuperOffice.Data.SQL.FieldInfo)
  name.vb: HashSet(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Data.SQL.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: SuperOffice.Data.SQL.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: System.Collections.Generic.HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: System.Collections.Generic.HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow
  isExternal: true
  name: CheckForDuplicateRow
  nameWithType: Dialect.CheckForDuplicateRow
  fullName: SuperOffice.Data.Dialect.Dialect.CheckForDuplicateRow
- uid: System.Data.IDataReader
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.Data.Dialect.Dialect.CheckForDistinct*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.CheckForDistinct
  isExternal: true
  name: CheckForDistinct
  nameWithType: Dialect.CheckForDistinct
  fullName: SuperOffice.Data.Dialect.Dialect.CheckForDistinct
- uid: SuperOffice.Data.SQL.PrivateSelect
  commentId: T:SuperOffice.Data.SQL.PrivateSelect
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: PrivateSelect
  nameWithType: PrivateSelect
  fullName: SuperOffice.Data.SQL.PrivateSelect
- uid: SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped
  isExternal: true
  name: ShouldRowBeSkipped
  nameWithType: Dialect.ShouldRowBeSkipped
  fullName: SuperOffice.Data.Dialect.Dialect.ShouldRowBeSkipped
- uid: SuperOffice.Data.Dialect.Dialect.#ctor*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.#ctor
  isExternal: true
  name: Dialect
  nameWithType: Dialect.Dialect
  fullName: SuperOffice.Data.Dialect.Dialect.Dialect
- uid: SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect
  isExternal: true
  name: IsTableReferencedInSelect
  nameWithType: Dialect.IsTableReferencedInSelect
  fullName: SuperOffice.Data.Dialect.Dialect.IsTableReferencedInSelect
- uid: SuperOffice.Data.Dictionary.SoTable
  commentId: T:SuperOffice.Data.Dictionary.SoTable
  parent: SuperOffice.Data.Dictionary
  isExternal: true
  name: SoTable
  nameWithType: SoTable
  fullName: SuperOffice.Data.Dictionary.SoTable
- uid: SuperOffice.Data.Dictionary
  commentId: N:SuperOffice.Data.Dictionary
  isExternal: true
  name: SuperOffice.Data.Dictionary
  nameWithType: SuperOffice.Data.Dictionary
  fullName: SuperOffice.Data.Dictionary
- uid: SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable
  isExternal: true
  name: GetUpdatedSchemaTable
  nameWithType: Dialect.GetUpdatedSchemaTable
  fullName: SuperOffice.Data.Dialect.Dialect.GetUpdatedSchemaTable
- uid: SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity
  isExternal: true
  name: GenerateCaseInsensitivity
  nameWithType: Dialect.GenerateCaseInsensitivity
  fullName: SuperOffice.Data.Dialect.Dialect.GenerateCaseInsensitivity
- uid: SuperOffice.Data.SQL.FieldInfo
  commentId: T:SuperOffice.Data.SQL.FieldInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: SuperOffice.Data.SQL.FieldInfo
- uid: SuperOffice.Data.SQL.Parameter
  commentId: T:SuperOffice.Data.SQL.Parameter
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Parameter
  nameWithType: Parameter
  fullName: SuperOffice.Data.SQL.Parameter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.Dialect.Dialect.GetOriginAsComment*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetOriginAsComment
  isExternal: true
  name: GetOriginAsComment
  nameWithType: Dialect.GetOriginAsComment
  fullName: SuperOffice.Data.Dialect.Dialect.GetOriginAsComment
- uid: SuperOffice.Data.Dialect.Dialect.DateToVarchar*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DateToVarchar
  isExternal: true
  name: DateToVarchar
  nameWithType: Dialect.DateToVarchar
  fullName: SuperOffice.Data.Dialect.Dialect.DateToVarchar
- uid: SuperOffice.Data.Dialect.Dialect.TimeToVarchar*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.TimeToVarchar
  isExternal: true
  name: TimeToVarchar
  nameWithType: Dialect.TimeToVarchar
  fullName: SuperOffice.Data.Dialect.Dialect.TimeToVarchar
- uid: SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping
  isExternal: true
  name: HandleDateAndTimeWrapping
  nameWithType: Dialect.HandleDateAndTimeWrapping
  fullName: SuperOffice.Data.Dialect.Dialect.HandleDateAndTimeWrapping
- uid: SuperOffice.Data.FieldDataType
  commentId: T:SuperOffice.Data.FieldDataType
  parent: SuperOffice.Data
  isExternal: true
  name: FieldDataType
  nameWithType: FieldDataType
  fullName: SuperOffice.Data.FieldDataType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType
  isExternal: true
  name: GetFieldDbDataType
  nameWithType: Dialect.GetFieldDbDataType
  fullName: SuperOffice.Data.Dialect.Dialect.GetFieldDbDataType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.Dialect.Dialect.GetIndexOfField*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetIndexOfField
  isExternal: true
  name: GetIndexOfField
  nameWithType: Dialect.GetIndexOfField
  fullName: SuperOffice.Data.Dialect.Dialect.GetIndexOfField
- uid: SuperOffice.Data.SQL.Argument
  commentId: T:SuperOffice.Data.SQL.Argument
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Argument
  nameWithType: Argument
  fullName: SuperOffice.Data.SQL.Argument
- uid: SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex
  isExternal: true
  name: GetFieldInfoFromIndex
  nameWithType: Dialect.GetFieldInfoFromIndex
  fullName: SuperOffice.Data.Dialect.Dialect.GetFieldInfoFromIndex
- uid: SuperOffice.Data.Dialect.Dialect.CheckForAlias*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.CheckForAlias
  isExternal: true
  name: CheckForAlias
  nameWithType: Dialect.CheckForAlias
  fullName: SuperOffice.Data.Dialect.Dialect.CheckForAlias
- uid: SuperOffice.Data.Dialect.Dialect.InvokeToSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.InvokeToSql
  isExternal: true
  name: InvokeToSql
  nameWithType: Dialect.InvokeToSql
  fullName: SuperOffice.Data.Dialect.Dialect.InvokeToSql
- uid: SuperOffice.Exceptions.SoNotImplementedException
  commentId: T:SuperOffice.Exceptions.SoNotImplementedException
  isExternal: true
  name: SoNotImplementedException
  nameWithType: SoNotImplementedException
  fullName: SuperOffice.Exceptions.SoNotImplementedException
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
- uid: SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString
  isExternal: true
  name: IsAnyArgumentString
  nameWithType: Dialect.IsAnyArgumentString
  fullName: SuperOffice.Data.Dialect.Dialect.IsAnyArgumentString
- uid: SuperOffice.Data.SQL.Argument[]
  isExternal: true
  name: Argument[]
  nameWithType: Argument[]
  fullName: SuperOffice.Data.SQL.Argument[]
  nameWithType.vb: Argument()
  fullName.vb: SuperOffice.Data.SQL.Argument()
  name.vb: Argument()
  spec.csharp:
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.Data.SQL.Argument
    name: Argument
    nameWithType: Argument
    fullName: SuperOffice.Data.SQL.Argument
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded
  isExternal: true
  name: ToSqlUpperIfNeeded
  nameWithType: Dialect.ToSqlUpperIfNeeded
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlUpperIfNeeded
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlFrom*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ToSqlFrom
  isExternal: true
  name: ToSqlFrom
  nameWithType: Dialect.ToSqlFrom
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlFrom
- uid: SuperOffice.Data.Dialect.Dialect.ToSqlField*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ToSqlField
  isExternal: true
  name: ToSqlField
  nameWithType: Dialect.ToSqlField
  fullName: SuperOffice.Data.Dialect.Dialect.ToSqlField
- uid: SuperOffice.Data.SQL.ArgumentCollection
  commentId: T:SuperOffice.Data.SQL.ArgumentCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: ArgumentCollection
  nameWithType: ArgumentCollection
  fullName: SuperOffice.Data.SQL.ArgumentCollection
- uid: SuperOffice.Data.SQL.ReturnFieldsCollection
  commentId: T:SuperOffice.Data.SQL.ReturnFieldsCollection
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: ReturnFieldsCollection
  nameWithType: ReturnFieldsCollection
  fullName: SuperOffice.Data.SQL.ReturnFieldsCollection
- uid: SuperOffice.Data.Dialect.Dialect.ToSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ToSql
  isExternal: true
  name: ToSql
  nameWithType: Dialect.ToSql
  fullName: SuperOffice.Data.Dialect.Dialect.ToSql
- uid: SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint
  isExternal: true
  name: GetOrderbyCollationHint
  nameWithType: Dialect.GetOrderbyCollationHint
  fullName: SuperOffice.Data.Dialect.Dialect.GetOrderbyCollationHint
- uid: SuperOffice.Data.SQL.OrderBy
  commentId: T:SuperOffice.Data.SQL.OrderBy
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: OrderBy
  nameWithType: OrderBy
  fullName: SuperOffice.Data.SQL.OrderBy
- uid: SuperOffice.Data.SQL.GroupBy
  commentId: T:SuperOffice.Data.SQL.GroupBy
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: GroupBy
  nameWithType: GroupBy
  fullName: SuperOffice.Data.SQL.GroupBy
- uid: SuperOffice.Data.SQL.Count
  commentId: T:SuperOffice.Data.SQL.Count
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Count
  nameWithType: Count
  fullName: SuperOffice.Data.SQL.Count
- uid: SuperOffice.Data.SQL.CountAll
  commentId: T:SuperOffice.Data.SQL.CountAll
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: CountAll
  nameWithType: CountAll
  fullName: SuperOffice.Data.SQL.CountAll
- uid: SuperOffice.Data.SQL.IsNull
  commentId: T:SuperOffice.Data.SQL.IsNull
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: IsNull
  nameWithType: IsNull
  fullName: SuperOffice.Data.SQL.IsNull
- uid: SuperOffice.Data.SQL.IsNotNull
  commentId: T:SuperOffice.Data.SQL.IsNotNull
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: IsNotNull
  nameWithType: IsNotNull
  fullName: SuperOffice.Data.SQL.IsNotNull
- uid: SuperOffice.Data.Dialect.Dialect.EncodedArraySearch*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.EncodedArraySearch
  isExternal: true
  name: EncodedArraySearch
  nameWithType: Dialect.EncodedArraySearch
  fullName: SuperOffice.Data.Dialect.Dialect.EncodedArraySearch
- uid: SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType
  commentId: T:SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType
  parent: SuperOffice.Data.Dialect
  isExternal: true
  name: Dialect.EncodedArraySearchType
  nameWithType: Dialect.EncodedArraySearchType
  fullName: SuperOffice.Data.Dialect.Dialect.EncodedArraySearchType
- uid: SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch
  commentId: T:SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch
  parent: SuperOffice.Data.Dialect
  isExternal: true
  name: Dialect.FulltextEncodedSearch
  nameWithType: Dialect.FulltextEncodedSearch
  fullName: SuperOffice.Data.Dialect.Dialect.FulltextEncodedSearch
- uid: SuperOffice.Data.SQL.In
  commentId: T:SuperOffice.Data.SQL.In
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: In
  nameWithType: In
  fullName: SuperOffice.Data.SQL.In
- uid: SuperOffice.Data.SQL.HasAny
  commentId: T:SuperOffice.Data.SQL.HasAny
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: HasAny
  nameWithType: HasAny
  fullName: SuperOffice.Data.SQL.HasAny
- uid: SuperOffice.Data.SQL.HasAll
  commentId: T:SuperOffice.Data.SQL.HasAll
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: HasAll
  nameWithType: HasAll
  fullName: SuperOffice.Data.SQL.HasAll
- uid: SuperOffice.Data.SQL.MissingAny
  commentId: T:SuperOffice.Data.SQL.MissingAny
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: MissingAny
  nameWithType: MissingAny
  fullName: SuperOffice.Data.SQL.MissingAny
- uid: SuperOffice.Data.SQL.MissingAll
  commentId: T:SuperOffice.Data.SQL.MissingAll
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: MissingAll
  nameWithType: MissingAll
  fullName: SuperOffice.Data.SQL.MissingAll
- uid: SuperOffice.Data.SQL.NotIn
  commentId: T:SuperOffice.Data.SQL.NotIn
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: NotIn
  nameWithType: NotIn
  fullName: SuperOffice.Data.SQL.NotIn
- uid: SuperOffice.Data.SQL.Between
  commentId: T:SuperOffice.Data.SQL.Between
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Between
  nameWithType: Between
  fullName: SuperOffice.Data.SQL.Between
- uid: SuperOffice.Data.SQL.NotBetween
  commentId: T:SuperOffice.Data.SQL.NotBetween
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: NotBetween
  nameWithType: NotBetween
  fullName: SuperOffice.Data.SQL.NotBetween
- uid: SuperOffice.Data.SQL.Like
  commentId: T:SuperOffice.Data.SQL.Like
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Like
  nameWithType: Like
  fullName: SuperOffice.Data.SQL.Like
- uid: SuperOffice.Data.SQL.TableInfo
  commentId: T:SuperOffice.Data.SQL.TableInfo
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableInfo
  nameWithType: TableInfo
  fullName: SuperOffice.Data.SQL.TableInfo
- uid: SuperOffice.Data.SQL.NotLike
  commentId: T:SuperOffice.Data.SQL.NotLike
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: NotLike
  nameWithType: NotLike
  fullName: SuperOffice.Data.SQL.NotLike
- uid: SuperOffice.Data.SQL.LessThan
  commentId: T:SuperOffice.Data.SQL.LessThan
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: LessThan
  nameWithType: LessThan
  fullName: SuperOffice.Data.SQL.LessThan
- uid: SuperOffice.Data.SQL.GreaterThan
  commentId: T:SuperOffice.Data.SQL.GreaterThan
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: GreaterThan
  nameWithType: GreaterThan
  fullName: SuperOffice.Data.SQL.GreaterThan
- uid: SuperOffice.Data.SQL.LessThanOrEqual
  commentId: T:SuperOffice.Data.SQL.LessThanOrEqual
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: LessThanOrEqual
  nameWithType: LessThanOrEqual
  fullName: SuperOffice.Data.SQL.LessThanOrEqual
- uid: SuperOffice.Data.SQL.GreaterThanOrEqual
  commentId: T:SuperOffice.Data.SQL.GreaterThanOrEqual
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: GreaterThanOrEqual
  nameWithType: GreaterThanOrEqual
  fullName: SuperOffice.Data.SQL.GreaterThanOrEqual
- uid: SuperOffice.Data.SQL.Equal
  commentId: T:SuperOffice.Data.SQL.Equal
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Equal
  nameWithType: Equal
  fullName: SuperOffice.Data.SQL.Equal
- uid: SuperOffice.Data.SQL.UnEqual
  commentId: T:SuperOffice.Data.SQL.UnEqual
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: UnEqual
  nameWithType: UnEqual
  fullName: SuperOffice.Data.SQL.UnEqual
- uid: SuperOffice.Data.SQL.And
  commentId: T:SuperOffice.Data.SQL.And
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: And
  nameWithType: And
  fullName: SuperOffice.Data.SQL.And
- uid: SuperOffice.Data.SQL.Or
  commentId: T:SuperOffice.Data.SQL.Or
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Or
  nameWithType: Or
  fullName: SuperOffice.Data.SQL.Or
- uid: SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments
  isExternal: true
  name: ParseMathematicalArguments
  nameWithType: Dialect.ParseMathematicalArguments
  fullName: SuperOffice.Data.Dialect.Dialect.ParseMathematicalArguments
- uid: SuperOffice.Data.SQL.MathematicalExpression
  commentId: T:SuperOffice.Data.SQL.MathematicalExpression
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: MathematicalExpression
  nameWithType: MathematicalExpression
  fullName: SuperOffice.Data.SQL.MathematicalExpression
- uid: SuperOffice.Data.SQL.Add
  commentId: T:SuperOffice.Data.SQL.Add
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Add
  nameWithType: Add
  fullName: SuperOffice.Data.SQL.Add
- uid: SuperOffice.Data.SQL.Subtract
  commentId: T:SuperOffice.Data.SQL.Subtract
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Subtract
  nameWithType: Subtract
  fullName: SuperOffice.Data.SQL.Subtract
- uid: SuperOffice.Data.SQL.Multiply
  commentId: T:SuperOffice.Data.SQL.Multiply
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Multiply
  nameWithType: Multiply
  fullName: SuperOffice.Data.SQL.Multiply
- uid: SuperOffice.Data.SQL.Divide
  commentId: T:SuperOffice.Data.SQL.Divide
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Divide
  nameWithType: Divide
  fullName: SuperOffice.Data.SQL.Divide
- uid: SuperOffice.Data.SQL.LeftOuterJoin
  commentId: T:SuperOffice.Data.SQL.LeftOuterJoin
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: LeftOuterJoin
  nameWithType: LeftOuterJoin
  fullName: SuperOffice.Data.SQL.LeftOuterJoin
- uid: SuperOffice.Data.SQL.RightOuterJoin
  commentId: T:SuperOffice.Data.SQL.RightOuterJoin
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: RightOuterJoin
  nameWithType: RightOuterJoin
  fullName: SuperOffice.Data.SQL.RightOuterJoin
- uid: SuperOffice.Data.SQL.InnerJoin
  commentId: T:SuperOffice.Data.SQL.InnerJoin
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: InnerJoin
  nameWithType: InnerJoin
  fullName: SuperOffice.Data.SQL.InnerJoin
- uid: SuperOffice.Data.Dialect.Dialect.ParseJoinClause*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ParseJoinClause
  isExternal: true
  name: ParseJoinClause
  nameWithType: Dialect.ParseJoinClause
  fullName: SuperOffice.Data.Dialect.Dialect.ParseJoinClause
- uid: SuperOffice.Data.SQL.JoinRestriction
  commentId: T:SuperOffice.Data.SQL.JoinRestriction
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: JoinRestriction
  nameWithType: JoinRestriction
  fullName: SuperOffice.Data.SQL.JoinRestriction
- uid: SuperOffice.Data.SQL.Distinct
  commentId: T:SuperOffice.Data.SQL.Distinct
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Distinct
  nameWithType: Distinct
  fullName: SuperOffice.Data.SQL.Distinct
- uid: SuperOffice.Data.SQL.Alias
  commentId: T:SuperOffice.Data.SQL.Alias
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Alias
  nameWithType: Alias
  fullName: SuperOffice.Data.SQL.Alias
- uid: SuperOffice.Data.SQL.FieldTypeConvert
  commentId: T:SuperOffice.Data.SQL.FieldTypeConvert
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: FieldTypeConvert
  nameWithType: FieldTypeConvert
  fullName: SuperOffice.Data.SQL.FieldTypeConvert
- uid: SuperOffice.Data.SQL.Upper
  commentId: T:SuperOffice.Data.SQL.Upper
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Upper
  nameWithType: Upper
  fullName: SuperOffice.Data.SQL.Upper
- uid: SuperOffice.Data.SQL.Lower
  commentId: T:SuperOffice.Data.SQL.Lower
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Lower
  nameWithType: Lower
  fullName: SuperOffice.Data.SQL.Lower
- uid: SuperOffice.Data.SQL.Trim
  commentId: T:SuperOffice.Data.SQL.Trim
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Trim
  nameWithType: Trim
  fullName: SuperOffice.Data.SQL.Trim
- uid: SuperOffice.Data.SQL.Soundex
  commentId: T:SuperOffice.Data.SQL.Soundex
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Soundex
  nameWithType: Soundex
  fullName: SuperOffice.Data.SQL.Soundex
- uid: SuperOffice.Data.SQL.Year
  commentId: T:SuperOffice.Data.SQL.Year
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Year
  nameWithType: Year
  fullName: SuperOffice.Data.SQL.Year
- uid: SuperOffice.Data.SQL.Month
  commentId: T:SuperOffice.Data.SQL.Month
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Month
  nameWithType: Month
  fullName: SuperOffice.Data.SQL.Month
- uid: SuperOffice.Data.SQL.Day
  commentId: T:SuperOffice.Data.SQL.Day
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Day
  nameWithType: Day
  fullName: SuperOffice.Data.SQL.Day
- uid: SuperOffice.Data.SQL.Hour
  commentId: T:SuperOffice.Data.SQL.Hour
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Hour
  nameWithType: Hour
  fullName: SuperOffice.Data.SQL.Hour
- uid: SuperOffice.Data.SQL.Minute
  commentId: T:SuperOffice.Data.SQL.Minute
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Minute
  nameWithType: Minute
  fullName: SuperOffice.Data.SQL.Minute
- uid: SuperOffice.Data.SQL.Second
  commentId: T:SuperOffice.Data.SQL.Second
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Second
  nameWithType: Second
  fullName: SuperOffice.Data.SQL.Second
- uid: SuperOffice.Data.SQL.Sum
  commentId: T:SuperOffice.Data.SQL.Sum
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Sum
  nameWithType: Sum
  fullName: SuperOffice.Data.SQL.Sum
- uid: SuperOffice.Data.SQL.Max
  commentId: T:SuperOffice.Data.SQL.Max
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Max
  nameWithType: Max
  fullName: SuperOffice.Data.SQL.Max
- uid: SuperOffice.Data.SQL.Min
  commentId: T:SuperOffice.Data.SQL.Min
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: Min
  nameWithType: Min
  fullName: SuperOffice.Data.SQL.Min
- uid: SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType
  isExternal: true
  name: ConvertToDbParameterType
  nameWithType: Dialect.ConvertToDbParameterType
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertToDbParameterType
- uid: SuperOffice.Data.Dialect.Dialect.ConvertToDbType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ConvertToDbType
  isExternal: true
  name: ConvertToDbType
  nameWithType: Dialect.ConvertToDbType
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertToDbType
- uid: SuperOffice.Exceptions.SoIllegalOperationException
  commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  isExternal: true
  name: SoIllegalOperationException
  nameWithType: SoIllegalOperationException
  fullName: SuperOffice.Exceptions.SoIllegalOperationException
- uid: SuperOffice.Data.Dialect.Dialect.ConvertFromDbType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ConvertFromDbType
  isExternal: true
  name: ConvertFromDbType
  nameWithType: Dialect.ConvertFromDbType
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertFromDbType
- uid: SuperOffice.Data.Dialect.Dialect.ConvertToDbString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ConvertToDbString
  isExternal: true
  name: ConvertToDbString
  nameWithType: Dialect.ConvertToDbString
  fullName: SuperOffice.Data.Dialect.Dialect.ConvertToDbString
- uid: SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime
  isExternal: true
  name: TimeTUtc2DateTime
  nameWithType: Dialect.TimeTUtc2DateTime
  fullName: SuperOffice.Data.Dialect.Dialect.TimeTUtc2DateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime
  isExternal: true
  name: TimeTLocal2DateTime
  nameWithType: Dialect.TimeTLocal2DateTime
  fullName: SuperOffice.Data.Dialect.Dialect.TimeTLocal2DateTime
- uid: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc
  isExternal: true
  name: DateTime2TimeTUtc
  nameWithType: Dialect.DateTime2TimeTUtc
  fullName: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTUtc
- uid: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal
  isExternal: true
  name: DateTime2TimeTLocal
  nameWithType: Dialect.DateTime2TimeTLocal
  fullName: SuperOffice.Data.Dialect.Dialect.DateTime2TimeTLocal
- uid: SuperOffice.Data.Dialect.Dialect.SelectSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.SelectSql
  isExternal: true
  name: SelectSql
  nameWithType: Dialect.SelectSql
  fullName: SuperOffice.Data.Dialect.Dialect.SelectSql
- uid: SuperOffice.Data.Dialect.Dialect.ComposeSelect*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ComposeSelect
  isExternal: true
  name: ComposeSelect
  nameWithType: Dialect.ComposeSelect
  fullName: SuperOffice.Data.Dialect.Dialect.ComposeSelect
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: SuperOffice.Data.Dialect.Dialect.InsertSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.InsertSql
  isExternal: true
  name: InsertSql
  nameWithType: Dialect.InsertSql
  fullName: SuperOffice.Data.Dialect.Dialect.InsertSql
- uid: SuperOffice.Data.SQL.PrivateSave
  commentId: T:SuperOffice.Data.SQL.PrivateSave
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: PrivateSave
  nameWithType: PrivateSave
  fullName: SuperOffice.Data.SQL.PrivateSave
- uid: SuperOffice.Data.Dialect.Dialect.UpdateSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.UpdateSql
  isExternal: true
  name: UpdateSql
  nameWithType: Dialect.UpdateSql
  fullName: SuperOffice.Data.Dialect.Dialect.UpdateSql
- uid: SuperOffice.Data.Dialect.Dialect.DeleteSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DeleteSql
  isExternal: true
  name: DeleteSql
  nameWithType: Dialect.DeleteSql
  fullName: SuperOffice.Data.Dialect.Dialect.DeleteSql
- uid: SuperOffice.Data.Dialect.Dialect.UnionSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.UnionSql
  isExternal: true
  name: UnionSql
  nameWithType: Dialect.UnionSql
  fullName: SuperOffice.Data.Dialect.Dialect.UnionSql
- uid: SuperOffice.Data.SQL.TableExpression
  commentId: T:SuperOffice.Data.SQL.TableExpression
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: TableExpression
  nameWithType: TableExpression
  fullName: SuperOffice.Data.SQL.TableExpression
- uid: SuperOffice.Data.Dialect.Dialect.PreParseUnion*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.PreParseUnion
  isExternal: true
  name: PreParseUnion
  nameWithType: Dialect.PreParseUnion
  fullName: SuperOffice.Data.Dialect.Dialect.PreParseUnion
- uid: SuperOffice.Data.Dialect.Dialect.DifferenceSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DifferenceSql
  isExternal: true
  name: DifferenceSql
  nameWithType: Dialect.DifferenceSql
  fullName: SuperOffice.Data.Dialect.Dialect.DifferenceSql
- uid: SuperOffice.Data.Dialect.Dialect.GenerateSql*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GenerateSql
  isExternal: true
  name: GenerateSql
  nameWithType: Dialect.GenerateSql
  fullName: SuperOffice.Data.Dialect.Dialect.GenerateSql
- uid: SuperOffice.Data.SoSqlParameter
  commentId: T:SuperOffice.Data.SoSqlParameter
  parent: SuperOffice.Data
  isExternal: true
  name: SoSqlParameter
  nameWithType: SoSqlParameter
  fullName: SuperOffice.Data.SoSqlParameter
- uid: SuperOffice.Data.Dialect.Dialect.FieldIsClob*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.FieldIsClob
  isExternal: true
  name: FieldIsClob
  nameWithType: Dialect.FieldIsClob
  fullName: SuperOffice.Data.Dialect.Dialect.FieldIsClob
- uid: SuperOffice.Data.Dialect.Dialect.FieldIsString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.FieldIsString
  isExternal: true
  name: FieldIsString
  nameWithType: Dialect.FieldIsString
  fullName: SuperOffice.Data.Dialect.Dialect.FieldIsString
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetName*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetName
  isExternal: true
  name: DataReaderGetName
  nameWithType: Dialect.DataReaderGetName
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetName
- uid: SuperOffice.Data.SoDataReader
  commentId: T:SuperOffice.Data.SoDataReader
  parent: SuperOffice.Data
  isExternal: true
  name: SoDataReader
  nameWithType: SoDataReader
  fullName: SuperOffice.Data.SoDataReader
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName
  isExternal: true
  name: DataReaderGetDataTypeName
  nameWithType: Dialect.DataReaderGetDataTypeName
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDataTypeName
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType
  isExternal: true
  name: DataReaderGetFieldType
  nameWithType: Dialect.DataReaderGetFieldType
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetFieldType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetValue*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetValue
  isExternal: true
  name: DataReaderGetValue
  nameWithType: Dialect.DataReaderGetValue
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetValue
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal
  isExternal: true
  name: DataReaderGetOrdinal
  nameWithType: Dialect.DataReaderGetOrdinal
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetOrdinal
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetItem*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetItem
  isExternal: true
  name: DataReaderGetItem
  nameWithType: Dialect.DataReaderGetItem
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetItem
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue
  isExternal: true
  name: DataReaderGetNullValue
  nameWithType: Dialect.DataReaderGetNullValue
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetNullValue
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean
  isExternal: true
  name: DataReaderGetBoolean
  nameWithType: Dialect.DataReaderGetBoolean
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetBoolean
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetByte*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetByte
  isExternal: true
  name: DataReaderGetByte
  nameWithType: Dialect.DataReaderGetByte
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetByte
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes
  isExternal: true
  name: DataReaderGetBytes
  nameWithType: Dialect.DataReaderGetBytes
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetBytes
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetChar*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetChar
  isExternal: true
  name: DataReaderGetChar
  nameWithType: Dialect.DataReaderGetChar
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetChar
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetChars*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetChars
  isExternal: true
  name: DataReaderGetChars
  nameWithType: Dialect.DataReaderGetChars
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetChars
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid
  isExternal: true
  name: DataReaderGetGuid
  nameWithType: Dialect.DataReaderGetGuid
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16
  isExternal: true
  name: DataReaderGetInt16
  nameWithType: Dialect.DataReaderGetInt16
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt16
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32
  isExternal: true
  name: DataReaderGetInt32
  nameWithType: Dialect.DataReaderGetInt32
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array
  isExternal: true
  name: DataReaderGetInt32Array
  nameWithType: Dialect.DataReaderGetInt32Array
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt32Array
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64
  isExternal: true
  name: DataReaderGetInt64
  nameWithType: Dialect.DataReaderGetInt64
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetInt64
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat
  isExternal: true
  name: DataReaderGetFloat
  nameWithType: Dialect.DataReaderGetFloat
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetFloat
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble
  isExternal: true
  name: DataReaderGetDouble
  nameWithType: Dialect.DataReaderGetDouble
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetString
  isExternal: true
  name: DataReaderGetString
  nameWithType: Dialect.DataReaderGetString
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetString
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal
  isExternal: true
  name: DataReaderGetDecimal
  nameWithType: Dialect.DataReaderGetDecimal
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDecimal
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime
  isExternal: true
  name: DataReaderGetDateTime
  nameWithType: Dialect.DataReaderGetDateTime
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetDateTime
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderGetData*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderGetData
  isExternal: true
  name: DataReaderGetData
  nameWithType: Dialect.DataReaderGetData
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderGetData
- uid: SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull
  isExternal: true
  name: DataReaderIsDBNull
  nameWithType: Dialect.DataReaderIsDBNull
  fullName: SuperOffice.Data.Dialect.Dialect.DataReaderIsDBNull
- uid: SuperOffice.Data.Dialect.Dialect.IntToSingleWord*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.IntToSingleWord
  isExternal: true
  name: IntToSingleWord
  nameWithType: Dialect.IntToSingleWord
  fullName: SuperOffice.Data.Dialect.Dialect.IntToSingleWord
- uid: SuperOffice.Data.Dialect.Dialect.IntArrayToWordString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.IntArrayToWordString
  isExternal: true
  name: IntArrayToWordString
  nameWithType: Dialect.IntArrayToWordString
  fullName: SuperOffice.Data.Dialect.Dialect.IntArrayToWordString
- uid: SuperOffice.Data.Dialect.Dialect.IntFromSingleWord*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.IntFromSingleWord
  isExternal: true
  name: IntFromSingleWord
  nameWithType: Dialect.IntFromSingleWord
  fullName: SuperOffice.Data.Dialect.Dialect.IntFromSingleWord
- uid: SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString
  isExternal: true
  name: IntArrayFromWordString
  nameWithType: Dialect.IntArrayFromWordString
  fullName: SuperOffice.Data.Dialect.Dialect.IntArrayFromWordString
- uid: SuperOffice.Data.Dialect.Dialect.GetIsolationLevel*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetIsolationLevel
  isExternal: true
  name: GetIsolationLevel
  nameWithType: Dialect.GetIsolationLevel
  fullName: SuperOffice.Data.Dialect.Dialect.GetIsolationLevel
- uid: System.Data.IsolationLevel
  isExternal: true
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction
  isExternal: true
  name: GetDefaultTransaction
  nameWithType: Dialect.GetDefaultTransaction
  fullName: SuperOffice.Data.Dialect.Dialect.GetDefaultTransaction
- uid: SuperOffice.Data.SoConnection
  commentId: T:SuperOffice.Data.SoConnection
  parent: SuperOffice.Data
  isExternal: true
  name: SoConnection
  nameWithType: SoConnection
  fullName: SuperOffice.Data.SoConnection
- uid: SuperOffice.Data.SoTransaction
  commentId: T:SuperOffice.Data.SoTransaction
  parent: SuperOffice.Data
  isExternal: true
  name: SoTransaction
  nameWithType: SoTransaction
  fullName: SuperOffice.Data.SoTransaction
- uid: SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase
  isExternal: true
  name: CaseSensitiveDatabase
  nameWithType: Dialect.CaseSensitiveDatabase
  fullName: SuperOffice.Data.Dialect.Dialect.CaseSensitiveDatabase
- uid: SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy
  isExternal: true
  name: BlockUpperInOrderBy
  nameWithType: Dialect.BlockUpperInOrderBy
  fullName: SuperOffice.Data.Dialect.Dialect.BlockUpperInOrderBy
- uid: SuperOffice.Data.Dialect.Dialect.MaxInSize*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.MaxInSize
  isExternal: true
  name: MaxInSize
  nameWithType: Dialect.MaxInSize
  fullName: SuperOffice.Data.Dialect.Dialect.MaxInSize
- uid: SuperOffice.Data.Dialect.Dialect.Tables*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.Tables
  isExternal: true
  name: Tables
  nameWithType: Dialect.Tables
  fullName: SuperOffice.Data.Dialect.Dialect.Tables
- uid: SuperOffice.Data.Dialect.Dialect.ReturnDBFields*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ReturnDBFields
  isExternal: true
  name: ReturnDBFields
  nameWithType: Dialect.ReturnDBFields
  fullName: SuperOffice.Data.Dialect.Dialect.ReturnDBFields
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete
  isExternal: true
  name: HasAliasOnDelete
  nameWithType: Dialect.HasAliasOnDelete
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnDelete
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert
  isExternal: true
  name: HasAliasOnInsert
  nameWithType: Dialect.HasAliasOnInsert
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnInsert
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate
  isExternal: true
  name: HasAliasOnUpdate
  nameWithType: Dialect.HasAliasOnUpdate
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnUpdate
- uid: SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect
  isExternal: true
  name: HasAliasOnSelect
  nameWithType: Dialect.HasAliasOnSelect
  fullName: SuperOffice.Data.Dialect.Dialect.HasAliasOnSelect
- uid: SuperOffice.Data.Dialect.Dialect.CurrentSqlType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.CurrentSqlType
  isExternal: true
  name: CurrentSqlType
  nameWithType: Dialect.CurrentSqlType
  fullName: SuperOffice.Data.Dialect.Dialect.CurrentSqlType
- uid: SuperOffice.Data.SQL.SqlType
  commentId: T:SuperOffice.Data.SQL.SqlType
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: SqlType
  nameWithType: SqlType
  fullName: SuperOffice.Data.SQL.SqlType
- uid: SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType
  isExternal: true
  name: CurrentOuterSqlType
  nameWithType: Dialect.CurrentOuterSqlType
  fullName: SuperOffice.Data.Dialect.Dialect.CurrentOuterSqlType
- uid: SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer
  isExternal: true
  name: ReturnFieldsIndexer
  nameWithType: Dialect.ReturnFieldsIndexer
  fullName: SuperOffice.Data.Dialect.Dialect.ReturnFieldsIndexer
- uid: SuperOffice.Data.SQL.ReturnFieldsIndexer
  commentId: T:SuperOffice.Data.SQL.ReturnFieldsIndexer
  parent: SuperOffice.Data.SQL
  isExternal: true
  name: ReturnFieldsIndexer
  nameWithType: ReturnFieldsIndexer
  fullName: SuperOffice.Data.SQL.ReturnFieldsIndexer
- uid: SuperOffice.Data.Dialect.Dialect.VarcharType*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.VarcharType
  isExternal: true
  name: VarcharType
  nameWithType: Dialect.VarcharType
  fullName: SuperOffice.Data.Dialect.Dialect.VarcharType
- uid: SuperOffice.Data.Dialect.Dialect.DefaultConnectionString*
  commentId: Overload:SuperOffice.Data.Dialect.Dialect.DefaultConnectionString
  isExternal: true
  name: DefaultConnectionString
  nameWithType: Dialect.DefaultConnectionString
  fullName: SuperOffice.Data.Dialect.Dialect.DefaultConnectionString
