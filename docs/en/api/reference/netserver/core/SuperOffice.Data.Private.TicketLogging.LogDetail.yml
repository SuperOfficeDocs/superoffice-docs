### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail
  commentId: T:SuperOffice.Data.Private.TicketLogging.LogDetail
  id: LogDetail
  parent: SuperOffice.Data.Private.TicketLogging
  children:
  - SuperOffice.Data.Private.TicketLogging.LogDetail.#ctor(System.Int32,SuperOffice.Data.TicketLogFieldChange,System.String,System.String,System.Int32)
  - SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId
  - SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId
  - SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange
  - SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue
  - SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue
  langs:
  - csharp
  - vb
  name: LogDetail
  nameWithType: LogDetail
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  summary: "\nLogDetail describes a single field change within Ticket object. Properties have JsonProperty attribute which helps to serialize changes for TicketLogJsonProvider.\n"
  syntax:
    content: 'public class LogDetail : Object'
    content.vb: >-
      Public Class LogDetail
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Data.Private.TicketLogging.LogDetail.EnumUtil.MapEnums``2
  - SuperOffice.Data.Private.TicketLogging.LogDetail.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.#ctor(System.Int32,SuperOffice.Data.TicketLogFieldChange,System.String,System.String,System.Int32)
  commentId: M:SuperOffice.Data.Private.TicketLogging.LogDetail.#ctor(System.Int32,SuperOffice.Data.TicketLogFieldChange,System.String,System.String,System.Int32)
  id: '#ctor(System.Int32,SuperOffice.Data.TicketLogFieldChange,System.String,System.String,System.Int32)'
  parent: SuperOffice.Data.Private.TicketLogging.LogDetail
  langs:
  - csharp
  - vb
  name: LogDetail(Int32, TicketLogFieldChange, String, String, Int32)
  nameWithType: LogDetail.LogDetail(Int32, TicketLogFieldChange, String, String, Int32)
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.LogDetail(System.Int32, SuperOffice.Data.TicketLogFieldChange, System.String, System.String, System.Int32)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public LogDetail(int id, TicketLogFieldChange logChange, string oldValue, string newValue, int extraFieldId = -1)
    parameters:
    - id: id
      type: System.Int32
    - id: logChange
      type: SuperOffice.Data.TicketLogFieldChange
    - id: oldValue
      type: System.String
    - id: newValue
      type: System.String
    - id: extraFieldId
      type: System.Int32
    content.vb: Public Sub New(id As Integer, logChange As TicketLogFieldChange, oldValue As String, newValue As String, extraFieldId As Integer = -1)
  overload: SuperOffice.Data.Private.TicketLogging.LogDetail.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId
  commentId: P:SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId
  id: EntityId
  parent: SuperOffice.Data.Private.TicketLogging.LogDetail
  langs:
  - csharp
  - vb
  name: EntityId
  nameWithType: LogDetail.EntityId
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public int EntityId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property EntityId As Integer
  overload: SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId
  commentId: P:SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId
  id: ExtraFieldId
  parent: SuperOffice.Data.Private.TicketLogging.LogDetail
  langs:
  - csharp
  - vb
  name: ExtraFieldId
  nameWithType: LogDetail.ExtraFieldId
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public int ExtraFieldId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ExtraFieldId As Integer
  overload: SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange
  commentId: P:SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange
  id: LogChange
  parent: SuperOffice.Data.Private.TicketLogging.LogDetail
  langs:
  - csharp
  - vb
  name: LogChange
  nameWithType: LogDetail.LogChange
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public TicketLogFieldChange LogChange { get; set; }
    parameters: []
    return:
      type: SuperOffice.Data.TicketLogFieldChange
    content.vb: Public Property LogChange As TicketLogFieldChange
  overload: SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue
  commentId: P:SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue
  id: NewValue
  parent: SuperOffice.Data.Private.TicketLogging.LogDetail
  langs:
  - csharp
  - vb
  name: NewValue
  nameWithType: LogDetail.NewValue
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public string NewValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property NewValue As String
  overload: SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue
  commentId: P:SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue
  id: PrevValue
  parent: SuperOffice.Data.Private.TicketLogging.LogDetail
  langs:
  - csharp
  - vb
  name: PrevValue
  nameWithType: LogDetail.PrevValue
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.Data.Private.TicketLogging
  syntax:
    content: public string PrevValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property PrevValue As String
  overload: SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.Data.Private.TicketLogging
  commentId: N:SuperOffice.Data.Private.TicketLogging
  isExternal: true
  name: SuperOffice.Data.Private.TicketLogging
  nameWithType: SuperOffice.Data.Private.TicketLogging
  fullName: SuperOffice.Data.Private.TicketLogging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<LogDetail, To>()
  nameWithType: EnumUtil.MapEnums<LogDetail, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Private.TicketLogging.LogDetail, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of LogDetail, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Private.TicketLogging.LogDetail, To)()
  name.vb: MapEnums(Of LogDetail, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<LogDetail, To>
    nameWithType: EnumUtil.MapEnums<LogDetail, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Private.TicketLogging.LogDetail, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of LogDetail, To)
    nameWithType: EnumUtil.MapEnums(Of LogDetail, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Private.TicketLogging.LogDetail, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<LogDetail, To>()
  nameWithType: Converters.MapEnums<LogDetail, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Private.TicketLogging.LogDetail, To>()
  nameWithType.vb: Converters.MapEnums(Of LogDetail, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Private.TicketLogging.LogDetail, To)()
  name.vb: MapEnums(Of LogDetail, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<LogDetail, To>
    nameWithType: Converters.MapEnums<LogDetail, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Private.TicketLogging.LogDetail, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of LogDetail, To)
    nameWithType: Converters.MapEnums(Of LogDetail, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Private.TicketLogging.LogDetail, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.#ctor*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.LogDetail.#ctor
  isExternal: true
  name: LogDetail
  nameWithType: LogDetail.LogDetail
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.LogDetail
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.Data.TicketLogFieldChange
  commentId: T:SuperOffice.Data.TicketLogFieldChange
  parent: SuperOffice.Data
  isExternal: true
  name: TicketLogFieldChange
  nameWithType: TicketLogFieldChange
  fullName: SuperOffice.Data.TicketLogFieldChange
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId
  isExternal: true
  name: EntityId
  nameWithType: LogDetail.EntityId
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.EntityId
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId
  isExternal: true
  name: ExtraFieldId
  nameWithType: LogDetail.ExtraFieldId
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.ExtraFieldId
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange
  isExternal: true
  name: LogChange
  nameWithType: LogDetail.LogChange
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.LogChange
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue
  isExternal: true
  name: NewValue
  nameWithType: LogDetail.NewValue
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.NewValue
- uid: SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue*
  commentId: Overload:SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue
  isExternal: true
  name: PrevValue
  nameWithType: LogDetail.PrevValue
  fullName: SuperOffice.Data.Private.TicketLogging.LogDetail.PrevValue
