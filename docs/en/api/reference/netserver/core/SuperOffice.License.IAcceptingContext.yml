### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.IAcceptingContext
  commentId: T:SuperOffice.License.IAcceptingContext
  id: IAcceptingContext
  parent: SuperOffice.License
  children:
  - SuperOffice.License.IAcceptingContext.IsAccepting
  - SuperOffice.License.IAcceptingContext.StartAccept
  langs:
  - csharp
  - vb
  name: IAcceptingContext
  nameWithType: IAcceptingContext
  fullName: SuperOffice.License.IAcceptingContext
  type: Interface
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public interface IAcceptingContext
    content.vb: Public Interface IAcceptingContext
  extensionMethods:
  - SuperOffice.License.IAcceptingContext.EnumUtil.MapEnums``2
  - SuperOffice.License.IAcceptingContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.License.IAcceptingContext.StartAccept
  commentId: M:SuperOffice.License.IAcceptingContext.StartAccept
  id: StartAccept
  parent: SuperOffice.License.IAcceptingContext
  langs:
  - csharp
  - vb
  name: StartAccept()
  nameWithType: IAcceptingContext.StartAccept()
  fullName: SuperOffice.License.IAcceptingContext.StartAccept()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: IDisposable StartAccept()
    return:
      type: System.IDisposable
    content.vb: Function StartAccept As IDisposable
  overload: SuperOffice.License.IAcceptingContext.StartAccept*
- uid: SuperOffice.License.IAcceptingContext.IsAccepting
  commentId: P:SuperOffice.License.IAcceptingContext.IsAccepting
  id: IsAccepting
  parent: SuperOffice.License.IAcceptingContext
  langs:
  - csharp
  - vb
  name: IsAccepting
  nameWithType: IAcceptingContext.IsAccepting
  fullName: SuperOffice.License.IAcceptingContext.IsAccepting
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: bool IsAccepting { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsAccepting As Boolean
  overload: SuperOffice.License.IAcceptingContext.IsAccepting*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: SuperOffice.License.IAcceptingContext.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<IAcceptingContext, To>()
  nameWithType: EnumUtil.MapEnums<IAcceptingContext, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.IAcceptingContext, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of IAcceptingContext, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.IAcceptingContext, To)()
  name.vb: MapEnums(Of IAcceptingContext, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<IAcceptingContext, To>
    nameWithType: EnumUtil.MapEnums<IAcceptingContext, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.IAcceptingContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of IAcceptingContext, To)
    nameWithType: EnumUtil.MapEnums(Of IAcceptingContext, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.IAcceptingContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.IAcceptingContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<IAcceptingContext, To>()
  nameWithType: Converters.MapEnums<IAcceptingContext, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.IAcceptingContext, To>()
  nameWithType.vb: Converters.MapEnums(Of IAcceptingContext, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.IAcceptingContext, To)()
  name.vb: MapEnums(Of IAcceptingContext, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<IAcceptingContext, To>
    nameWithType: Converters.MapEnums<IAcceptingContext, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.IAcceptingContext, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of IAcceptingContext, To)
    nameWithType: Converters.MapEnums(Of IAcceptingContext, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.IAcceptingContext, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.License.IAcceptingContext.StartAccept*
  commentId: Overload:SuperOffice.License.IAcceptingContext.StartAccept
  isExternal: true
  name: StartAccept
  nameWithType: IAcceptingContext.StartAccept
  fullName: SuperOffice.License.IAcceptingContext.StartAccept
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.License.IAcceptingContext.IsAccepting*
  commentId: Overload:SuperOffice.License.IAcceptingContext.IsAccepting
  isExternal: true
  name: IsAccepting
  nameWithType: IAcceptingContext.IsAccepting
  fullName: SuperOffice.License.IAcceptingContext.IsAccepting
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
