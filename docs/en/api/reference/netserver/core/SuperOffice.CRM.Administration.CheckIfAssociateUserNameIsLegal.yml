### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  commentId: T:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  id: CheckIfAssociateUserNameIsLegal
  parent: SuperOffice.CRM.Administration
  children:
  - SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.#ctor(System.Object,System.IntPtr)
  - SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke(System.String,System.AsyncCallback,System.Object)
  - SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke(System.IAsyncResult)
  - SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke(System.String)
  langs:
  - csharp
  - vb
  name: CheckIfAssociateUserNameIsLegal
  nameWithType: CheckIfAssociateUserNameIsLegal
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  type: Delegate
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: "\nCheck if an associate user name is legal\n"
  syntax:
    content: public delegate bool CheckIfAssociateUserNameIsLegal(string associateUserName);
    parameters:
    - id: associateUserName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Delegate Function CheckIfAssociateUserNameIsLegal(associateUserName As String) As Boolean
  extensionMethods:
  - SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.#ctor(System.Object,System.IntPtr)
  commentId: M:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.#ctor(System.Object,System.IntPtr)
  id: '#ctor(System.Object,System.IntPtr)'
  parent: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  langs:
  - csharp
  - vb
  name: CheckIfAssociateUserNameIsLegal(Object, IntPtr)
  nameWithType: CheckIfAssociateUserNameIsLegal.CheckIfAssociateUserNameIsLegal(Object, IntPtr)
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.CheckIfAssociateUserNameIsLegal(System.Object, System.IntPtr)
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public CheckIfAssociateUserNameIsLegal(object object, IntPtr method)
    parameters:
    - id: object
      type: System.Object
    - id: method
      type: System.IntPtr
    content.vb: Public Sub New(object As Object, method As IntPtr)
  overload: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke(System.String)
  commentId: M:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke(System.String)
  id: Invoke(System.String)
  parent: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  langs:
  - csharp
  - vb
  name: Invoke(String)
  nameWithType: CheckIfAssociateUserNameIsLegal.Invoke(String)
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual bool Invoke(string associateUserName)
    parameters:
    - id: associateUserName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Invoke(associateUserName As String) As Boolean
  overload: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke(System.String,System.AsyncCallback,System.Object)
  commentId: M:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke(System.String,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.AsyncCallback,System.Object)
  parent: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  langs:
  - csharp
  - vb
  name: BeginInvoke(String, AsyncCallback, Object)
  nameWithType: CheckIfAssociateUserNameIsLegal.BeginInvoke(String, AsyncCallback, Object)
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual IAsyncResult BeginInvoke(string associateUserName, AsyncCallback callback, object object)
    parameters:
    - id: associateUserName
      type: System.String
    - id: callback
      type: System.AsyncCallback
    - id: object
      type: System.Object
    return:
      type: System.IAsyncResult
    content.vb: Public Overridable Function BeginInvoke(associateUserName As String, callback As AsyncCallback, object As Object) As IAsyncResult
  overload: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke(System.IAsyncResult)
  commentId: M:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal
  langs:
  - csharp
  - vb
  name: EndInvoke(IAsyncResult)
  nameWithType: CheckIfAssociateUserNameIsLegal.EndInvoke(IAsyncResult)
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke(System.IAsyncResult)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public virtual bool EndInvoke(IAsyncResult result)
    parameters:
    - id: result
      type: System.IAsyncResult
    return:
      type: System.Boolean
    content.vb: Public Overridable Function EndInvoke(result As IAsyncResult) As Boolean
  overload: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<CheckIfAssociateUserNameIsLegal, To>()
  nameWithType: EnumUtil.MapEnums<CheckIfAssociateUserNameIsLegal, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of CheckIfAssociateUserNameIsLegal, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To)()
  name.vb: MapEnums(Of CheckIfAssociateUserNameIsLegal, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<CheckIfAssociateUserNameIsLegal, To>
    nameWithType: EnumUtil.MapEnums<CheckIfAssociateUserNameIsLegal, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of CheckIfAssociateUserNameIsLegal, To)
    nameWithType: EnumUtil.MapEnums(Of CheckIfAssociateUserNameIsLegal, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<CheckIfAssociateUserNameIsLegal, To>()
  nameWithType: Converters.MapEnums<CheckIfAssociateUserNameIsLegal, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To>()
  nameWithType.vb: Converters.MapEnums(Of CheckIfAssociateUserNameIsLegal, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To)()
  name.vb: MapEnums(Of CheckIfAssociateUserNameIsLegal, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<CheckIfAssociateUserNameIsLegal, To>
    nameWithType: Converters.MapEnums<CheckIfAssociateUserNameIsLegal, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of CheckIfAssociateUserNameIsLegal, To)
    nameWithType: Converters.MapEnums(Of CheckIfAssociateUserNameIsLegal, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.#ctor*
  commentId: Overload:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.#ctor
  isExternal: true
  name: CheckIfAssociateUserNameIsLegal
  nameWithType: CheckIfAssociateUserNameIsLegal.CheckIfAssociateUserNameIsLegal
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.CheckIfAssociateUserNameIsLegal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke*
  commentId: Overload:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke
  isExternal: true
  name: Invoke
  nameWithType: CheckIfAssociateUserNameIsLegal.Invoke
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.Invoke
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke*
  commentId: Overload:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke
  isExternal: true
  name: BeginInvoke
  nameWithType: CheckIfAssociateUserNameIsLegal.BeginInvoke
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.BeginInvoke
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke*
  commentId: Overload:SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke
  isExternal: true
  name: EndInvoke
  nameWithType: CheckIfAssociateUserNameIsLegal.EndInvoke
  fullName: SuperOffice.CRM.Administration.CheckIfAssociateUserNameIsLegal.EndInvoke
