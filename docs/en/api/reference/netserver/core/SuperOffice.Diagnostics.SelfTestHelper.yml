### YamlMime:ManagedReference
items:
- uid: SuperOffice.Diagnostics.SelfTestHelper
  commentId: T:SuperOffice.Diagnostics.SelfTestHelper
  id: SelfTestHelper
  parent: SuperOffice.Diagnostics
  children:
  - SuperOffice.Diagnostics.SelfTestHelper.GetAllTests
  - SuperOffice.Diagnostics.SelfTestHelper.TestAll(System.String[]@)
  langs:
  - csharp
  - vb
  name: SelfTestHelper
  nameWithType: SelfTestHelper
  fullName: SuperOffice.Diagnostics.SelfTestHelper
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nHelper to execute SelTest\n"
  syntax:
    content: 'public static class SelfTestHelper : Object'
    content.vb: >-
      Public Module SelfTestHelper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SuperOffice.Diagnostics.SelfTestHelper.GetAllTests
  commentId: M:SuperOffice.Diagnostics.SelfTestHelper.GetAllTests
  id: GetAllTests
  parent: SuperOffice.Diagnostics.SelfTestHelper
  langs:
  - csharp
  - vb
  name: GetAllTests()
  nameWithType: SelfTestHelper.GetAllTests()
  fullName: SuperOffice.Diagnostics.SelfTestHelper.GetAllTests()
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nGet instance of all <xref href=\"SuperOffice.Diagnostics.ISelfTest\" data-throw-if-not-resolved=\"false\"></xref> registered with the <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public static IEnumerable<ISelfTest> GetAllTests()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.Diagnostics.ISelfTest}
    content.vb: Public Shared Function GetAllTests As IEnumerable(Of ISelfTest)
  overload: SuperOffice.Diagnostics.SelfTestHelper.GetAllTests*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.Diagnostics.SelfTestHelper.TestAll(System.String[]@)
  commentId: M:SuperOffice.Diagnostics.SelfTestHelper.TestAll(System.String[]@)
  id: TestAll(System.String[]@)
  parent: SuperOffice.Diagnostics.SelfTestHelper
  langs:
  - csharp
  - vb
  name: TestAll(out String[])
  nameWithType: SelfTestHelper.TestAll(out String[])
  fullName: SuperOffice.Diagnostics.SelfTestHelper.TestAll(out System.String[])
  type: Method
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Diagnostics
  summary: "\nExecute all selftests\n"
  syntax:
    content: public static bool TestAll(out string[] messages)
    parameters:
    - id: messages
      type: System.String[]
      description: List of messages that can be used for logging.
    return:
      type: System.Boolean
      description: True if all tests passes.
    content.vb: Public Shared Function TestAll(ByRef messages As String()) As Boolean
  overload: SuperOffice.Diagnostics.SelfTestHelper.TestAll*
  nameWithType.vb: SelfTestHelper.TestAll(ByRef String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SuperOffice.Diagnostics.SelfTestHelper.TestAll(ByRef System.String())
  name.vb: TestAll(ByRef String())
references:
- uid: SuperOffice.Diagnostics
  commentId: N:SuperOffice.Diagnostics
  isExternal: true
  name: SuperOffice.Diagnostics
  nameWithType: SuperOffice.Diagnostics
  fullName: SuperOffice.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Diagnostics.SelfTestHelper.GetAllTests*
  commentId: Overload:SuperOffice.Diagnostics.SelfTestHelper.GetAllTests
  isExternal: true
  name: GetAllTests
  nameWithType: SelfTestHelper.GetAllTests
  fullName: SuperOffice.Diagnostics.SelfTestHelper.GetAllTests
- uid: System.Collections.Generic.IEnumerable{SuperOffice.Diagnostics.ISelfTest}
  commentId: '!:System.Collections.Generic.IEnumerable{SuperOffice.Diagnostics.ISelfTest}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISelfTest>
  nameWithType: IEnumerable<ISelfTest>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.Diagnostics.ISelfTest>
  nameWithType.vb: IEnumerable(Of ISelfTest)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.Diagnostics.ISelfTest)
  name.vb: IEnumerable(Of ISelfTest)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.Diagnostics.ISelfTest
    name: ISelfTest
    nameWithType: ISelfTest
    fullName: SuperOffice.Diagnostics.ISelfTest
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.Diagnostics.ISelfTest
    name: ISelfTest
    nameWithType: ISelfTest
    fullName: SuperOffice.Diagnostics.ISelfTest
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Diagnostics.SelfTestHelper.TestAll*
  commentId: Overload:SuperOffice.Diagnostics.SelfTestHelper.TestAll
  isExternal: true
  name: TestAll
  nameWithType: SelfTestHelper.TestAll
  fullName: SuperOffice.Diagnostics.SelfTestHelper.TestAll
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
