### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  id: SoPasswordCredentialPlugin
  parent: SuperOffice.CRM.Administration
  children:
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers(System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup(System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SoPasswordCredentialPlugin
  nameWithType: SoPasswordCredentialPlugin
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: >-
      [UserCredentialPlugin("CRM5/PASSWORD")]

      public class SoPasswordCredentialPlugin : IUserCredentialPlugin, IPlugin
    content.vb: >-
      <UserCredentialPlugin("CRM5/PASSWORD")>

      Public Class SoPasswordCredentialPlugin
          Implements IUserCredentialPlugin, IPlugin
  inheritance:
  - System.Object
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.CRM.Administration.UserCredentialPluginAttribute
    ctor: SuperOffice.CRM.Administration.UserCredentialPluginAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CRM5/PASSWORD
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: SoPasswordCredentialPlugin()
  nameWithType: SoPasswordCredentialPlugin.SoPasswordCredentialPlugin()
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SoPasswordCredentialPlugin()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public SoPasswordCredentialPlugin()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  id: FindGroups(System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindGroups(String)
  nameWithType: SoPasswordCredentialPlugin.FindGroups(String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public UserCredentialGroup[] FindGroups(string searchString)
    parameters:
    - id: searchString
      type: System.String
    return:
      type: SuperOffice.CRM.Administration.UserCredentialGroup[]
    content.vb: Public Function FindGroups(searchString As String) As UserCredentialGroup()
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup(System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup(System.String)
  id: GetCredentialUsersInGroup(System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetCredentialUsersInGroup(String)
  nameWithType: SoPasswordCredentialPlugin.GetCredentialUsersInGroup(String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public UserCredentialList GetCredentialUsersInGroup(string groupName)
    parameters:
    - id: groupName
      type: System.String
    return:
      type: SuperOffice.CRM.Administration.UserCredentialList
    content.vb: Public Function GetCredentialUsersInGroup(groupName As String) As UserCredentialList
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers(System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers(System.String)
  id: FindCredentialUsers(System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindCredentialUsers(String)
  nameWithType: SoPasswordCredentialPlugin.FindCredentialUsers(String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public UserCredentialList FindCredentialUsers(string searchString)
    parameters:
    - id: searchString
      type: System.String
    return:
      type: SuperOffice.CRM.Administration.UserCredentialList
    content.vb: Public Function FindCredentialUsers(searchString As String) As UserCredentialList
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  id: CreatePerson(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CreatePerson(Int32, String, String)
  nameWithType: SoPasswordCredentialPlugin.CreatePerson(Int32, String, String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson(System.Int32, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public Person CreatePerson(int contactId, string value, string displayValue)
    parameters:
    - id: contactId
      type: System.Int32
    - id: value
      type: System.String
    - id: displayValue
      type: System.String
    return:
      type: SuperOffice.CRM.Entities.Person
    content.vb: Public Function CreatePerson(contactId As Integer, value As String, displayValue As String) As Person
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  id: UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: UpdateCredentialsRow(CredentialsRow, String, String, String)
  nameWithType: SoPasswordCredentialPlugin.UpdateCredentialsRow(CredentialsRow, String, String, String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, System.String, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public void UpdateCredentialsRow(CredentialsRow row, string associateName, string value, string displayValue)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    - id: associateName
      type: System.String
    - id: value
      type: System.String
    - id: displayValue
      type: System.String
    content.vb: Public Sub UpdateCredentialsRow(row As CredentialsRow, associateName As String, value As String, displayValue As String)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetValue(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.GetValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public string GetValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    return:
      type: System.String
    content.vb: Public Function GetValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDisplayValue(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.GetDisplayValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public string GetDisplayValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    return:
      type: System.String
    content.vb: Public Function GetDisplayValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanChangePassword(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.CanChangePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public bool CanChangePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    return:
      type: System.Boolean
    content.vb: Public Function CanChangePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  id: ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: ChangePassword(CredentialsRow, String, String)
  nameWithType: SoPasswordCredentialPlugin.ChangePassword(CredentialsRow, String, String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public void ChangePassword(CredentialsRow row, string oldPassword, string newPassword)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    - id: oldPassword
      type: System.String
    - id: newPassword
      type: System.String
    content.vb: Public Sub ChangePassword(row As CredentialsRow, oldPassword As String, newPassword As String)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanValidatePassword(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.CanValidatePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public bool CanValidatePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    return:
      type: System.Boolean
    content.vb: Public Function CanValidatePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  id: IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsPasswordValid(CredentialsRow, String)
  nameWithType: SoPasswordCredentialPlugin.IsPasswordValid(CredentialsRow, String)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public bool IsPasswordValid(CredentialsRow row, string password)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    - id: password
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsPasswordValid(row As CredentialsRow, password As String) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultPriority(UserType, Int32)
  nameWithType: SoPasswordCredentialPlugin.GetDefaultPriority(UserType, Int32)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public int GetDefaultPriority(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
    - id: personId
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function GetDefaultPriority(userType As UserType, personId As Integer) As Integer
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  id: AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: AddDefaultCredentialsToUser(SoUser)
  nameWithType: SoPasswordCredentialPlugin.AddDefaultCredentialsToUser(SoUser)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public void AddDefaultCredentialsToUser(SoUser user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Administration.SoUser
    content.vb: Public Sub AddDefaultCredentialsToUser(user As SoUser)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  id: CanHandle(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanHandle(UserType)
  nameWithType: SoPasswordCredentialPlugin.CanHandle(UserType)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public bool CanHandle(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
    return:
      type: System.Boolean
    content.vb: Public Function CanHandle(userType As UserType) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  id: Description
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SoPasswordCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  id: DisplayType
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: DisplayType
  nameWithType: SoPasswordCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public string DisplayType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayType As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  id: ControlType
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: ControlType
  nameWithType: SoPasswordCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public CredentialControlType ControlType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.CredentialControlType
    content.vb: Public ReadOnly Property ControlType As CredentialControlType
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  id: IsUserNameSupported
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsUserNameSupported
  nameWithType: SoPasswordCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public bool IsUserNameSupported { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUserNameSupported As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  id: CanCreatePerson
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanCreatePerson
  nameWithType: SoPasswordCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public bool CanCreatePerson { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanCreatePerson As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<SoPasswordCredentialPlugin, To>()
  nameWithType: EnumUtil.MapEnums<SoPasswordCredentialPlugin, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of SoPasswordCredentialPlugin, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To)()
  name.vb: MapEnums(Of SoPasswordCredentialPlugin, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<SoPasswordCredentialPlugin, To>
    nameWithType: EnumUtil.MapEnums<SoPasswordCredentialPlugin, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of SoPasswordCredentialPlugin, To)
    nameWithType: EnumUtil.MapEnums(Of SoPasswordCredentialPlugin, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<SoPasswordCredentialPlugin>(SoPasswordCredentialPlugin)
  nameWithType: ObjectExtensions.AssignByReflection<SoPasswordCredentialPlugin>(SoPasswordCredentialPlugin)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin>(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of SoPasswordCredentialPlugin)(SoPasswordCredentialPlugin)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  name.vb: AssignByReflection(Of SoPasswordCredentialPlugin)(SoPasswordCredentialPlugin)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<SoPasswordCredentialPlugin>
    nameWithType: ObjectExtensions.AssignByReflection<SoPasswordCredentialPlugin>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    nameWithType: SoPasswordCredentialPlugin
    fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of SoPasswordCredentialPlugin)
    nameWithType: ObjectExtensions.AssignByReflection(Of SoPasswordCredentialPlugin)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    nameWithType: SoPasswordCredentialPlugin
    fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<SoPasswordCredentialPlugin>()
  nameWithType: ObjectExtensions.GraphCopy<SoPasswordCredentialPlugin>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of SoPasswordCredentialPlugin)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)()
  name.vb: GraphCopy(Of SoPasswordCredentialPlugin)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<SoPasswordCredentialPlugin>
    nameWithType: ObjectExtensions.GraphCopy<SoPasswordCredentialPlugin>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of SoPasswordCredentialPlugin)
    nameWithType: ObjectExtensions.GraphCopy(Of SoPasswordCredentialPlugin)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<SoPasswordCredentialPlugin, To>()
  nameWithType: Converters.MapEnums<SoPasswordCredentialPlugin, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To>()
  nameWithType.vb: Converters.MapEnums(Of SoPasswordCredentialPlugin, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To)()
  name.vb: MapEnums(Of SoPasswordCredentialPlugin, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<SoPasswordCredentialPlugin, To>
    nameWithType: Converters.MapEnums<SoPasswordCredentialPlugin, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of SoPasswordCredentialPlugin, To)
    nameWithType: Converters.MapEnums(Of SoPasswordCredentialPlugin, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  isExternal: true
  name: SoPasswordCredentialPlugin
  nameWithType: SoPasswordCredentialPlugin.SoPasswordCredentialPlugin
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SoPasswordCredentialPlugin
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups
  isExternal: true
  name: FindGroups
  nameWithType: SoPasswordCredentialPlugin.FindGroups
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: FindGroups(String)
  nameWithType: IUserCredentialPlugin.FindGroups(String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
    name: FindGroups
    nameWithType: IUserCredentialPlugin.FindGroups
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
    name: FindGroups
    nameWithType: IUserCredentialPlugin.FindGroups
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.CRM.Administration.UserCredentialGroup[]
  isExternal: true
  name: UserCredentialGroup[]
  nameWithType: UserCredentialGroup[]
  fullName: SuperOffice.CRM.Administration.UserCredentialGroup[]
  nameWithType.vb: UserCredentialGroup()
  fullName.vb: SuperOffice.CRM.Administration.UserCredentialGroup()
  name.vb: UserCredentialGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    nameWithType: UserCredentialGroup
    fullName: SuperOffice.CRM.Administration.UserCredentialGroup
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    nameWithType: UserCredentialGroup
    fullName: SuperOffice.CRM.Administration.UserCredentialGroup
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup
  isExternal: true
  name: GetCredentialUsersInGroup
  nameWithType: SoPasswordCredentialPlugin.GetCredentialUsersInGroup
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroup
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: GetCredentialUsersInGroup(String)
  nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup(String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
    name: GetCredentialUsersInGroup
    nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
    name: GetCredentialUsersInGroup
    nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.UserCredentialList
  commentId: T:SuperOffice.CRM.Administration.UserCredentialList
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: UserCredentialList
  nameWithType: UserCredentialList
  fullName: SuperOffice.CRM.Administration.UserCredentialList
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers
  isExternal: true
  name: FindCredentialUsers
  nameWithType: SoPasswordCredentialPlugin.FindCredentialUsers
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsers
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: FindCredentialUsers(String)
  nameWithType: IUserCredentialPlugin.FindCredentialUsers(String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
    name: FindCredentialUsers
    nameWithType: IUserCredentialPlugin.FindCredentialUsers
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
    name: FindCredentialUsers
    nameWithType: IUserCredentialPlugin.FindCredentialUsers
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson
  isExternal: true
  name: CreatePerson
  nameWithType: SoPasswordCredentialPlugin.CreatePerson
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePerson
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CreatePerson(Int32, String, String)
  nameWithType: IUserCredentialPlugin.CreatePerson(Int32, String, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
    name: CreatePerson
    nameWithType: IUserCredentialPlugin.CreatePerson
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
    name: CreatePerson
    nameWithType: IUserCredentialPlugin.CreatePerson
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Entities.Person
  commentId: T:SuperOffice.CRM.Entities.Person
  parent: SuperOffice.CRM.Entities
  isExternal: true
  name: Person
  nameWithType: Person
  fullName: SuperOffice.CRM.Entities.Person
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow
  isExternal: true
  name: UpdateCredentialsRow
  nameWithType: SoPasswordCredentialPlugin.UpdateCredentialsRow
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: UpdateCredentialsRow(CredentialsRow, String, String, String)
  nameWithType: IUserCredentialPlugin.UpdateCredentialsRow(CredentialsRow, String, String, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, System.String, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
    name: UpdateCredentialsRow
    nameWithType: IUserCredentialPlugin.UpdateCredentialsRow
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
    name: UpdateCredentialsRow
    nameWithType: IUserCredentialPlugin.UpdateCredentialsRow
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Rows.CredentialsRow
  commentId: T:SuperOffice.CRM.Rows.CredentialsRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: CredentialsRow
  nameWithType: CredentialsRow
  fullName: SuperOffice.CRM.Rows.CredentialsRow
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue
  isExternal: true
  name: GetValue
  nameWithType: SoPasswordCredentialPlugin.GetValue
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: GetValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetValue
    nameWithType: IUserCredentialPlugin.GetValue
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetValue
    nameWithType: IUserCredentialPlugin.GetValue
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue
  isExternal: true
  name: GetDisplayValue
  nameWithType: SoPasswordCredentialPlugin.GetDisplayValue
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: GetDisplayValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetDisplayValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetDisplayValue
    nameWithType: IUserCredentialPlugin.GetDisplayValue
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetDisplayValue
    nameWithType: IUserCredentialPlugin.GetDisplayValue
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword
  isExternal: true
  name: CanChangePassword
  nameWithType: SoPasswordCredentialPlugin.CanChangePassword
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanChangePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanChangePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
    name: CanChangePassword
    nameWithType: IUserCredentialPlugin.CanChangePassword
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
    name: CanChangePassword
    nameWithType: IUserCredentialPlugin.CanChangePassword
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword
  isExternal: true
  name: ChangePassword
  nameWithType: SoPasswordCredentialPlugin.ChangePassword
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: ChangePassword(CredentialsRow, String, String)
  nameWithType: IUserCredentialPlugin.ChangePassword(CredentialsRow, String, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, System.String, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
    name: ChangePassword
    nameWithType: IUserCredentialPlugin.ChangePassword
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
    name: ChangePassword
    nameWithType: IUserCredentialPlugin.ChangePassword
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword
  isExternal: true
  name: CanValidatePassword
  nameWithType: SoPasswordCredentialPlugin.CanValidatePassword
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanValidatePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanValidatePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
    name: CanValidatePassword
    nameWithType: IUserCredentialPlugin.CanValidatePassword
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
    name: CanValidatePassword
    nameWithType: IUserCredentialPlugin.CanValidatePassword
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid
  isExternal: true
  name: IsPasswordValid
  nameWithType: SoPasswordCredentialPlugin.IsPasswordValid
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: IsPasswordValid(CredentialsRow, String)
  nameWithType: IUserCredentialPlugin.IsPasswordValid(CredentialsRow, String)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, System.String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
    name: IsPasswordValid
    nameWithType: IUserCredentialPlugin.IsPasswordValid
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
    name: IsPasswordValid
    nameWithType: IUserCredentialPlugin.IsPasswordValid
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    nameWithType: CredentialsRow
    fullName: SuperOffice.CRM.Rows.CredentialsRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority
  isExternal: true
  name: GetDefaultPriority
  nameWithType: SoPasswordCredentialPlugin.GetDefaultPriority
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: GetDefaultPriority(UserType, Int32)
  nameWithType: IUserCredentialPlugin.GetDefaultPriority(UserType, Int32)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, System.Int32)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
    name: GetDefaultPriority
    nameWithType: IUserCredentialPlugin.GetDefaultPriority
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
    name: GetDefaultPriority
    nameWithType: IUserCredentialPlugin.GetDefaultPriority
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser
  isExternal: true
  name: AddDefaultCredentialsToUser
  nameWithType: SoPasswordCredentialPlugin.AddDefaultCredentialsToUser
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUser
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: AddDefaultCredentialsToUser(SoUser)
  nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser(SoUser)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
    name: AddDefaultCredentialsToUser
    nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Administration.SoUser
    name: SoUser
    nameWithType: SoUser
    fullName: SuperOffice.CRM.Administration.SoUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
    name: AddDefaultCredentialsToUser
    nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Administration.SoUser
    name: SoUser
    nameWithType: SoUser
    fullName: SuperOffice.CRM.Administration.SoUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoUser
  commentId: T:SuperOffice.CRM.Administration.SoUser
  parent: SuperOffice.CRM.Administration
  isExternal: true
  name: SoUser
  nameWithType: SoUser
  fullName: SuperOffice.CRM.Administration.SoUser
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle
  isExternal: true
  name: CanHandle
  nameWithType: SoPasswordCredentialPlugin.CanHandle
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanHandle(UserType)
  nameWithType: IUserCredentialPlugin.CanHandle(UserType)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
    name: CanHandle
    nameWithType: IUserCredentialPlugin.CanHandle
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
    name: CanHandle
    nameWithType: IUserCredentialPlugin.CanHandle
    fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.License.UserType
    name: UserType
    nameWithType: UserType
    fullName: SuperOffice.License.UserType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  isExternal: true
  name: Description
  nameWithType: SoPasswordCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: Description
  nameWithType: IUserCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  isExternal: true
  name: DisplayType
  nameWithType: SoPasswordCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: DisplayType
  nameWithType: IUserCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  isExternal: true
  name: ControlType
  nameWithType: SoPasswordCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: ControlType
  nameWithType: IUserCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
- uid: SuperOffice.Data.CredentialControlType
  commentId: T:SuperOffice.Data.CredentialControlType
  parent: SuperOffice.Data
  isExternal: true
  name: CredentialControlType
  nameWithType: CredentialControlType
  fullName: SuperOffice.Data.CredentialControlType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  isExternal: true
  name: IsUserNameSupported
  nameWithType: SoPasswordCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: IsUserNameSupported
  nameWithType: IUserCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  isExternal: true
  name: CanCreatePerson
  nameWithType: SoPasswordCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanCreatePerson
  nameWithType: IUserCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
