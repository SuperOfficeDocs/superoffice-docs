### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  id: SoPasswordCredentialPlugin
  parent: SuperOffice.CRM.Administration
  children:
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SoPasswordCredentialPlugin
  nameWithType: SoPasswordCredentialPlugin
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  type: Class
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: >-
      [UserCredentialPlugin("CRM5/PASSWORD")]

      public class SoPasswordCredentialPlugin : IUserCredentialPlugin
    content.vb: >-
      <UserCredentialPlugin("CRM5/PASSWORD")>

      Public Class SoPasswordCredentialPlugin Implements IUserCredentialPlugin
  inheritance:
  - System.Object
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  - SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  attributes:
  - type: SuperOffice.CRM.Administration.UserCredentialPluginAttribute
    ctor: SuperOffice.CRM.Administration.UserCredentialPluginAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CRM5/PASSWORD
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: SoPasswordCredentialPlugin()
  nameWithType: SoPasswordCredentialPlugin.SoPasswordCredentialPlugin()
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SoPasswordCredentialPlugin()
  type: Constructor
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: public SoPasswordCredentialPlugin()
    content.vb: Public Sub New()
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor*
  nameWithType.vb: SoPasswordCredentialPlugin.New()
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.New()
  name.vb: New()
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(System.String)
  id: FindGroups(System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindGroups(string)
  nameWithType: SoPasswordCredentialPlugin.FindGroups(string)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(string)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Get user groups holding users.  This method is only relevant if the CredentialType 

    control is of type link.  There will allways be at least one groups even if the 

    underlying provider does not support groups.
  example: []
  syntax:
    content: public UserCredentialGroup[] FindGroups(string searchString)
    parameters:
    - id: searchString
      type: System.String
      description: Partly name of domain group.
    return:
      type: SuperOffice.CRM.Administration.UserCredentialGroup[]
      description: ''
    content.vb: Public Function FindGroups(searchString As String) As UserCredentialGroup()
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  nameWithType.vb: SoPasswordCredentialPlugin.FindGroups(String)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups(String)
  name.vb: FindGroups(String)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  id: GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetCredentialUsersInGroupAsync(string, CancellationToken)
  nameWithType: SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(string, CancellationToken)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Get credential users within a user group
  example: []
  syntax:
    content: public Task<UserCredentialList> GetCredentialUsersInGroupAsync(string groupName, CancellationToken cancellationToken = default)
    parameters:
    - id: groupName
      type: System.String
      description: Name of user group needed to discover the users.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Administration.UserCredentialList}
      description: ''
    content.vb: Public Function GetCredentialUsersInGroupAsync(groupName As String, cancellationToken As CancellationToken = Nothing) As Task(Of UserCredentialList)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync(String, System.Threading.CancellationToken)
  name.vb: GetCredentialUsersInGroupAsync(String, CancellationToken)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  id: FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindCredentialUsersAsync(string, CancellationToken)
  nameWithType: SoPasswordCredentialPlugin.FindCredentialUsersAsync(string, CancellationToken)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync(string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Find users mathcing the partial name.
  example: []
  syntax:
    content: public Task<UserCredentialList> FindCredentialUsersAsync(string searchString, CancellationToken cancellationToken = default)
    parameters:
    - id: searchString
      type: System.String
      description: Partly name of the user group
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Administration.UserCredentialList}
      description: ''
    content.vb: Public Function FindCredentialUsersAsync(searchString As String, cancellationToken As CancellationToken = Nothing) As Task(Of UserCredentialList)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: SoPasswordCredentialPlugin.FindCredentialUsersAsync(String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync(String, System.Threading.CancellationToken)
  name.vb: FindCredentialUsersAsync(String, CancellationToken)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  id: CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CreatePersonAsync(int, string, string, CancellationToken)
  nameWithType: SoPasswordCredentialPlugin.CreatePersonAsync(int, string, string, CancellationToken)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync(int, string, string, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Create Person and return person id of the person created
  example: []
  syntax:
    content: public Task<Person> CreatePersonAsync(int contactId, string value, string displayValue, CancellationToken cancellationToken = default)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact id for the person to create.
    - id: value
      type: System.String
      description: >-
        This is the actuall value of the credentials.  This will typically be the 

        password or teh users SID in active directory.
    - id: displayValue
      type: System.String
      description: >-
        The value displayed to the user. this will typically be the users 

        login name in active directory.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.CRM.Entities.Person}
      description: Primary key of the person created
    content.vb: Public Function CreatePersonAsync(contactId As Integer, value As String, displayValue As String, cancellationToken As CancellationToken = Nothing) As Task(Of Person)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: SoPasswordCredentialPlugin.CreatePersonAsync(Integer, String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync(Integer, String, String, System.Threading.CancellationToken)
  name.vb: CreatePersonAsync(Integer, String, String, CancellationToken)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  id: UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: UpdateCredentialsRow(CredentialsRow, string, string, string)
  nameWithType: SoPasswordCredentialPlugin.UpdateCredentialsRow(CredentialsRow, string, string, string)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, string, string, string)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Update credential row.
  example: []
  syntax:
    content: public void UpdateCredentialsRow(CredentialsRow row, string associateName, string value, string displayValue)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credentials row to apply the values on.
    - id: associateName
      type: System.String
      description: SuperOffice user-name of the user.
    - id: value
      type: System.String
      description: >-
        This is the actuall value of the credentials.  This will typically be the 

        password or teh users SID in active directory.
    - id: displayValue
      type: System.String
      description: >-
        The value displayed to the user. this will typically be the users 

        login name in active directory.
    content.vb: Public Sub UpdateCredentialsRow(row As CredentialsRow, associateName As String, value As String, displayValue As String)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  nameWithType.vb: SoPasswordCredentialPlugin.UpdateCredentialsRow(CredentialsRow, String, String, String)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, String, String, String)
  name.vb: UpdateCredentialsRow(CredentialsRow, String, String, String)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetValue(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.GetValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Get value (key) to the user in the foreign system.  This can also be the password.
  example: []
  syntax:
    content: public string GetValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credential row to get the value from.
    return:
      type: System.String
      description: >-
        This is the actuall value of the credentials.  This will typically be 

        the password or teh users SID in active directory.
    content.vb: Public Function GetValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDisplayValue(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.GetDisplayValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Get the display value of the user.
  example: []
  syntax:
    content: public string GetDisplayValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credential row to get the value from.
    return:
      type: System.String
      description: >-
        The value displayed to the user. this will typically be the users 

        login name in active directory.
    content.vb: Public Function GetDisplayValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  id: CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanChangePasswordAsync(CredentialsRow, CancellationToken)
  nameWithType: SoPasswordCredentialPlugin.CanChangePasswordAsync(CredentialsRow, CancellationToken)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Is this plugin able to change password for the current credential
  remarks: True if the plugin is able to change password.
  example: []
  syntax:
    content: public Task<bool> CanChangePasswordAsync(CredentialsRow row, CancellationToken cancellationToken = default)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function CanChangePasswordAsync(row As CredentialsRow, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  id: ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: ChangePassword(CredentialsRow, string, string)
  nameWithType: SoPasswordCredentialPlugin.ChangePassword(CredentialsRow, string, string)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, string, string)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Changes the account password from the old password to the new password.
  example: []
  syntax:
    content: public void ChangePassword(CredentialsRow row, string oldPassword, string newPassword)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: oldPassword
      type: System.String
      description: The old password to change from.  This must be the current calid password.
    - id: newPassword
      type: System.String
      description: The new password to change to.
    content.vb: Public Sub ChangePassword(row As CredentialsRow, oldPassword As String, newPassword As String)
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  nameWithType.vb: SoPasswordCredentialPlugin.ChangePassword(CredentialsRow, String, String)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, String, String)
  name.vb: ChangePassword(CredentialsRow, String, String)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanValidatePassword(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.CanValidatePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Is the plugin able to validfate the password.
  example: []
  syntax:
    content: public bool CanValidatePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    return:
      type: System.Boolean
      description: True if it is possible to validate the password.
    content.vb: Public Function CanValidatePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  id: IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsPasswordValid(CredentialsRow, string)
  nameWithType: SoPasswordCredentialPlugin.IsPasswordValid(CredentialsRow, string)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, string)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Check if password is valid.
  example: []
  syntax:
    content: public bool IsPasswordValid(CredentialsRow row, string password)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: password
      type: System.String
      description: The password to check if if it is valid (e.g. that means that this is the current password.)
    return:
      type: System.Boolean
      description: True if the right password is passed in.
    content.vb: Public Function IsPasswordValid(row As CredentialsRow, password As String) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  nameWithType.vb: SoPasswordCredentialPlugin.IsPasswordValid(CredentialsRow, String)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, String)
  name.vb: IsPasswordValid(CredentialsRow, String)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultPriority(UserType, int)
  nameWithType: SoPasswordCredentialPlugin.GetDefaultPriority(UserType, int)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, int)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Get default priority for plugin.  Highest number will be the default plugin.  Password will by default be 0 as a base-line
  example: []
  syntax:
    content: public int GetDefaultPriority(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of user
    - id: personId
      type: System.Int32
      description: PersonId if the user type is a person
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetDefaultPriority(userType As UserType, personId As Integer) As Integer
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  nameWithType.vb: SoPasswordCredentialPlugin.GetDefaultPriority(UserType, Integer)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, Integer)
  name.vb: GetDefaultPriority(UserType, Integer)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
  id: AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: AddDefaultCredentialsToUserAsync(SoUser, CancellationToken)
  nameWithType: SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync(SoUser, CancellationToken)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  example: []
  syntax:
    content: public Task AddDefaultCredentialsToUserAsync(SoUser user, CancellationToken cancellationToken = default)
    parameters:
    - id: user
      type: SuperOffice.CRM.Administration.SoUser
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AddDefaultCredentialsToUserAsync(user As SoUser, cancellationToken As CancellationToken = Nothing) As Task
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  id: CanHandle(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanHandle(UserType)
  nameWithType: SoPasswordCredentialPlugin.CanHandle(UserType)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Check if the plugin can handle credentials for <xref href="SuperOffice.License.UserType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool CanHandle(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: ''
    return:
      type: System.Boolean
      description: True if the plugin can handle the <code class="paramref">userType</code>
    content.vb: Public Function CanHandle(userType As UserType) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  id: GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetSupportedChangePasswordTypesAsync(CredentialsRow, CancellationToken)
  nameWithType: SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync(CredentialsRow, CancellationToken)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Returns a list of the types of password changes that is allowed for this credential.

    Returns empty array if no type is supported.
  example: []
  syntax:
    content: public Task<ChangePasswordType[]> GetSupportedChangePasswordTypesAsync(CredentialsRow row, CancellationToken cancellationToken = default)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{SuperOffice.Data.ChangePasswordType[]}
      description: ''
    content.vb: Public Function GetSupportedChangePasswordTypesAsync(row As CredentialsRow, cancellationToken As CancellationToken = Nothing) As Task(Of ChangePasswordType())
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  id: SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: SendChangePasswordEmailAsync(CredentialsRow)
  nameWithType: SoPasswordCredentialPlugin.SendChangePasswordEmailAsync(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Send an email the user cna use to change password.
  example: []
  syntax:
    content: public Task SendChangePasswordEmailAsync(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SendChangePasswordEmailAsync(row As CredentialsRow) As Task
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  commentId: M:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  id: IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsPasswordLegal(SoUser, string, out string)
  nameWithType: SoPasswordCredentialPlugin.IsPasswordLegal(SoUser, string, out string)
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser, string, out string)
  type: Method
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Check if a password is legal meaning it comply with the configured password policy for this provider.

    Implementations must return true if there is no policy checks to be done.
  example: []
  syntax:
    content: public bool IsPasswordLegal(SoUser user, string password, out string reason)
    parameters:
    - id: user
      type: SuperOffice.CRM.Administration.SoUser
    - id: password
      type: System.String
    - id: reason
      type: System.String
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsPasswordLegal(user As SoUser, password As String, reason As String) As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  nameWithType.vb: SoPasswordCredentialPlugin.IsPasswordLegal(SoUser, String, String)
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser, String, String)
  name.vb: IsPasswordLegal(SoUser, String, String)
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  id: Description
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SoPasswordCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  type: Property
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Description of the authentication type.  This value is used in a list of 

    authentication providers that can be choosen by an end user and should be 

    a fairly describtive text.  This will typically be SuperOffice is responsible 

    for username and password for a password scenario.
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  id: DisplayType
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: DisplayType
  nameWithType: SoPasswordCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  type: Property
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: >-
    The name of the credentials to be displayed in the user interface.  

    This will typically be Password for user-name/password scenarios and 

    Active Directoru User for AD integration.
  example: []
  syntax:
    content: public string DisplayType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayType As String
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  id: ControlType
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: ControlType
  nameWithType: SoPasswordCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  type: Property
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Type of control used to display the value.
  example: []
  syntax:
    content: public CredentialControlType ControlType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.CredentialControlType
    content.vb: Public ReadOnly Property ControlType As CredentialControlType
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  id: IsUserNameSupported
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsUserNameSupported
  nameWithType: SoPasswordCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  type: Property
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Does this plugin support the associate user name field?
  example: []
  syntax:
    content: public bool IsUserNameSupported { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUserNameSupported As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  commentId: P:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  id: CanCreatePerson
  parent: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanCreatePerson
  nameWithType: SoPasswordCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  type: Property
  assemblies:
  - SoDataBase.BusinessLogic
  namespace: SuperOffice.CRM.Administration
  summary: Can the plugin create a person (that can be the bases for a user)
  example: []
  syntax:
    content: public bool CanCreatePerson { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanCreatePerson As Boolean
  overload: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson*
  implements:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
references:
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Administration
    name: Administration
    isExternal: true
    href: SuperOffice.CRM.Administration.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Administration
    name: Administration
    isExternal: true
    href: SuperOffice.CRM.Administration.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<SoPasswordCredentialPlugin, To>(SoPasswordCredentialPlugin)
  nameWithType: EnumUtil.MapEnums<SoPasswordCredentialPlugin, To>(SoPasswordCredentialPlugin)
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To>(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  nameWithType.vb: EnumUtil.MapEnums(Of SoPasswordCredentialPlugin, To)(SoPasswordCredentialPlugin)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To)(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  name.vb: MapEnums(Of SoPasswordCredentialPlugin, To)(SoPasswordCredentialPlugin)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<SoPasswordCredentialPlugin, To>(SoPasswordCredentialPlugin)
  nameWithType: Converters.MapEnums<SoPasswordCredentialPlugin, To>(SoPasswordCredentialPlugin)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To>(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  nameWithType.vb: Converters.MapEnums(Of SoPasswordCredentialPlugin, To)(SoPasswordCredentialPlugin)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, To)(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  name.vb: MapEnums(Of SoPasswordCredentialPlugin, To)(SoPasswordCredentialPlugin)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<SoPasswordCredentialPlugin>(SoPasswordCredentialPlugin, SoPasswordCredentialPlugin)
  nameWithType: ObjectExtensions.AssignByReflection<SoPasswordCredentialPlugin>(SoPasswordCredentialPlugin, SoPasswordCredentialPlugin)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin>(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of SoPasswordCredentialPlugin)(SoPasswordCredentialPlugin, SoPasswordCredentialPlugin)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin, SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  name.vb: AssignByReflection(Of SoPasswordCredentialPlugin)(SoPasswordCredentialPlugin, SoPasswordCredentialPlugin)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin,SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin,SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: ','
  - name: " "
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<SoPasswordCredentialPlugin>(SoPasswordCredentialPlugin)
  nameWithType: ObjectExtensions.GraphCopy<SoPasswordCredentialPlugin>(SoPasswordCredentialPlugin)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Administration.SoPasswordCredentialPlugin>(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of SoPasswordCredentialPlugin)(SoPasswordCredentialPlugin)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
  name.vb: GraphCopy(Of SoPasswordCredentialPlugin)(SoPasswordCredentialPlugin)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.CRM.Administration.SoPasswordCredentialPlugin)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin
    name: SoPasswordCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.#ctor
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin__ctor
  name: SoPasswordCredentialPlugin
  nameWithType: SoPasswordCredentialPlugin.SoPasswordCredentialPlugin
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SoPasswordCredentialPlugin
  nameWithType.vb: SoPasswordCredentialPlugin.New
  fullName.vb: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.New
  name.vb: New
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_FindGroups_System_String_
  name: FindGroups
  nameWithType: SoPasswordCredentialPlugin.FindGroups
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindGroups
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: FindGroups(string)
  nameWithType: IUserCredentialPlugin.FindGroups(string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(string)
  nameWithType.vb: IUserCredentialPlugin.FindGroups(String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(String)
  name.vb: FindGroups(String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
    name: FindGroups
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
    name: FindGroups
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.CRM.Administration.UserCredentialGroup[]
  isExternal: true
  href: SuperOffice.CRM.Administration.UserCredentialGroup.html
  name: UserCredentialGroup[]
  nameWithType: UserCredentialGroup[]
  fullName: SuperOffice.CRM.Administration.UserCredentialGroup[]
  nameWithType.vb: UserCredentialGroup()
  fullName.vb: SuperOffice.CRM.Administration.UserCredentialGroup()
  name.vb: UserCredentialGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    isExternal: true
    href: SuperOffice.CRM.Administration.UserCredentialGroup.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    isExternal: true
    href: SuperOffice.CRM.Administration.UserCredentialGroup.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_GetCredentialUsersInGroupAsync_System_String_System_Threading_CancellationToken_
  name: GetCredentialUsersInGroupAsync
  nameWithType: SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetCredentialUsersInGroupAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetCredentialUsersInGroupAsync(string, CancellationToken)
  nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroupAsync(string, CancellationToken)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IUserCredentialPlugin.GetCredentialUsersInGroupAsync(String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(String, System.Threading.CancellationToken)
  name.vb: GetCredentialUsersInGroupAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
    name: GetCredentialUsersInGroupAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroupAsync(System.String,System.Threading.CancellationToken)
    name: GetCredentialUsersInGroupAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Administration.UserCredentialList}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Administration.UserCredentialList}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<UserCredentialList>
  nameWithType: Task<UserCredentialList>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Administration.UserCredentialList>
  nameWithType.vb: Task(Of UserCredentialList)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Administration.UserCredentialList)
  name.vb: Task(Of UserCredentialList)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Administration.UserCredentialList
    name: UserCredentialList
    isExternal: true
    href: SuperOffice.CRM.Administration.UserCredentialList.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.UserCredentialList
    name: UserCredentialList
    isExternal: true
    href: SuperOffice.CRM.Administration.UserCredentialList.html
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_FindCredentialUsersAsync_System_String_System_Threading_CancellationToken_
  name: FindCredentialUsersAsync
  nameWithType: SoPasswordCredentialPlugin.FindCredentialUsersAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.FindCredentialUsersAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: FindCredentialUsersAsync(string, CancellationToken)
  nameWithType: IUserCredentialPlugin.FindCredentialUsersAsync(string, CancellationToken)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(string, System.Threading.CancellationToken)
  nameWithType.vb: IUserCredentialPlugin.FindCredentialUsersAsync(String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(String, System.Threading.CancellationToken)
  name.vb: FindCredentialUsersAsync(String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
    name: FindCredentialUsersAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsersAsync(System.String,System.Threading.CancellationToken)
    name: FindCredentialUsersAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_CreatePersonAsync_System_Int32_System_String_System_String_System_Threading_CancellationToken_
  name: CreatePersonAsync
  nameWithType: SoPasswordCredentialPlugin.CreatePersonAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CreatePersonAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePersonAsync_System_Int32_System_String_System_String_System_Threading_CancellationToken_
  name: CreatePersonAsync(int, string, string, CancellationToken)
  nameWithType: IUserCredentialPlugin.CreatePersonAsync(int, string, string, CancellationToken)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(int, string, string, System.Threading.CancellationToken)
  nameWithType.vb: IUserCredentialPlugin.CreatePersonAsync(Integer, String, String, CancellationToken)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(Integer, String, String, System.Threading.CancellationToken)
  name.vb: CreatePersonAsync(Integer, String, String, CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
    name: CreatePersonAsync
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePersonAsync_System_Int32_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePersonAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)
    name: CreatePersonAsync
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePersonAsync_System_Int32_System_String_System_String_System_Threading_CancellationToken_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{SuperOffice.CRM.Entities.Person}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.CRM.Entities.Person}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Person>
  nameWithType: Task<Person>
  fullName: System.Threading.Tasks.Task<SuperOffice.CRM.Entities.Person>
  nameWithType.vb: Task(Of Person)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.CRM.Entities.Person)
  name.vb: Task(Of Person)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    isExternal: true
    href: SuperOffice.CRM.Entities.Person.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Entities.Person
    name: Person
    isExternal: true
    href: SuperOffice.CRM.Entities.Person.html
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_UpdateCredentialsRow_SuperOffice_CRM_Rows_CredentialsRow_System_String_System_String_System_String_
  name: UpdateCredentialsRow
  nameWithType: SoPasswordCredentialPlugin.UpdateCredentialsRow
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.UpdateCredentialsRow
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: UpdateCredentialsRow(CredentialsRow, string, string, string)
  nameWithType: IUserCredentialPlugin.UpdateCredentialsRow(CredentialsRow, string, string, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, string, string, string)
  nameWithType.vb: IUserCredentialPlugin.UpdateCredentialsRow(CredentialsRow, String, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, String, String, String)
  name.vb: UpdateCredentialsRow(CredentialsRow, String, String, String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
    name: UpdateCredentialsRow
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
    name: UpdateCredentialsRow
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Rows.CredentialsRow
  commentId: T:SuperOffice.CRM.Rows.CredentialsRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  href: SuperOffice.CRM.Rows.CredentialsRow.html
  name: CredentialsRow
  nameWithType: CredentialsRow
  fullName: SuperOffice.CRM.Rows.CredentialsRow
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Rows
    name: Rows
    isExternal: true
    href: SuperOffice.CRM.Rows.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Rows
    name: Rows
    isExternal: true
    href: SuperOffice.CRM.Rows.html
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_GetValue_SuperOffice_CRM_Rows_CredentialsRow_
  name: GetValue
  nameWithType: SoPasswordCredentialPlugin.GetValue
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: GetValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetValue
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetValue
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_GetDisplayValue_SuperOffice_CRM_Rows_CredentialsRow_
  name: GetDisplayValue
  nameWithType: SoPasswordCredentialPlugin.GetDisplayValue
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDisplayValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: GetDisplayValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetDisplayValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetDisplayValue
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
    name: GetDisplayValue
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_CanChangePasswordAsync_SuperOffice_CRM_Rows_CredentialsRow_System_Threading_CancellationToken_
  name: CanChangePasswordAsync
  nameWithType: SoPasswordCredentialPlugin.CanChangePasswordAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanChangePasswordAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CanChangePasswordAsync(CredentialsRow, CancellationToken)
  nameWithType: IUserCredentialPlugin.CanChangePasswordAsync(CredentialsRow, CancellationToken)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
    name: CanChangePasswordAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePasswordAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
    name: CanChangePasswordAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_ChangePassword_SuperOffice_CRM_Rows_CredentialsRow_System_String_System_String_
  name: ChangePassword
  nameWithType: SoPasswordCredentialPlugin.ChangePassword
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ChangePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ChangePassword(CredentialsRow, string, string)
  nameWithType: IUserCredentialPlugin.ChangePassword(CredentialsRow, string, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, string, string)
  nameWithType.vb: IUserCredentialPlugin.ChangePassword(CredentialsRow, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, String, String)
  name.vb: ChangePassword(CredentialsRow, String, String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
    name: ChangePassword
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
    name: ChangePassword
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_CanValidatePassword_SuperOffice_CRM_Rows_CredentialsRow_
  name: CanValidatePassword
  nameWithType: SoPasswordCredentialPlugin.CanValidatePassword
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanValidatePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanValidatePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanValidatePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
    name: CanValidatePassword
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
    name: CanValidatePassword
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_IsPasswordValid_SuperOffice_CRM_Rows_CredentialsRow_System_String_
  name: IsPasswordValid
  nameWithType: SoPasswordCredentialPlugin.IsPasswordValid
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordValid
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: IsPasswordValid(CredentialsRow, string)
  nameWithType: IUserCredentialPlugin.IsPasswordValid(CredentialsRow, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, string)
  nameWithType.vb: IUserCredentialPlugin.IsPasswordValid(CredentialsRow, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, String)
  name.vb: IsPasswordValid(CredentialsRow, String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
    name: IsPasswordValid
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
    name: IsPasswordValid
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_GetDefaultPriority_SuperOffice_License_UserType_System_Int32_
  name: GetDefaultPriority
  nameWithType: SoPasswordCredentialPlugin.GetDefaultPriority
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetDefaultPriority
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: GetDefaultPriority(UserType, int)
  nameWithType: IUserCredentialPlugin.GetDefaultPriority(UserType, int)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, int)
  nameWithType.vb: IUserCredentialPlugin.GetDefaultPriority(UserType, Integer)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, Integer)
  name.vb: GetDefaultPriority(UserType, Integer)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
    name: GetDefaultPriority
    isExternal: true
  - name: (
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
    name: GetDefaultPriority
    isExternal: true
  - name: (
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.License.UserType
  commentId: T:SuperOffice.License.UserType
  parent: SuperOffice.License
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_AddDefaultCredentialsToUserAsync_SuperOffice_CRM_Administration_SoUser_System_Threading_CancellationToken_
  name: AddDefaultCredentialsToUserAsync
  nameWithType: SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.AddDefaultCredentialsToUserAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: AddDefaultCredentialsToUserAsync(SoUser, CancellationToken)
  nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SoUser, CancellationToken)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
    name: AddDefaultCredentialsToUserAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Administration.SoUser
    name: SoUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUserAsync(SuperOffice.CRM.Administration.SoUser,System.Threading.CancellationToken)
    name: AddDefaultCredentialsToUserAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Administration.SoUser
    name: SoUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: SuperOffice.CRM.Administration.SoUser
  commentId: T:SuperOffice.CRM.Administration.SoUser
  parent: SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.CRM.Administration.SoUser.html
  name: SoUser
  nameWithType: SoUser
  fullName: SuperOffice.CRM.Administration.SoUser
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_CanHandle_SuperOffice_License_UserType_
  name: CanHandle
  nameWithType: SoPasswordCredentialPlugin.CanHandle
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanHandle
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanHandle(UserType)
  nameWithType: IUserCredentialPlugin.CanHandle(UserType)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
    name: CanHandle
    isExternal: true
  - name: (
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
    name: CanHandle
    isExternal: true
  - name: (
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_GetSupportedChangePasswordTypesAsync_SuperOffice_CRM_Rows_CredentialsRow_System_Threading_CancellationToken_
  name: GetSupportedChangePasswordTypesAsync
  nameWithType: SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.GetSupportedChangePasswordTypesAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetSupportedChangePasswordTypesAsync(CredentialsRow, CancellationToken)
  nameWithType: IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(CredentialsRow, CancellationToken)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow, System.Threading.CancellationToken)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
    name: GetSupportedChangePasswordTypesAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypesAsync(SuperOffice.CRM.Rows.CredentialsRow,System.Threading.CancellationToken)
    name: GetSupportedChangePasswordTypesAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{SuperOffice.Data.ChangePasswordType[]}
  commentId: T:System.Threading.Tasks.Task{SuperOffice.Data.ChangePasswordType[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ChangePasswordType[]>
  nameWithType: Task<ChangePasswordType[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.Data.ChangePasswordType[]>
  nameWithType.vb: Task(Of ChangePasswordType())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.Data.ChangePasswordType())
  name.vb: Task(Of ChangePasswordType())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: SuperOffice.Data.ChangePasswordType
    name: ChangePasswordType
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.Data.ChangePasswordType
    name: ChangePasswordType
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_SendChangePasswordEmailAsync_SuperOffice_CRM_Rows_CredentialsRow_
  name: SendChangePasswordEmailAsync
  nameWithType: SoPasswordCredentialPlugin.SendChangePasswordEmailAsync
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.SendChangePasswordEmailAsync
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: SendChangePasswordEmailAsync(CredentialsRow)
  nameWithType: IUserCredentialPlugin.SendChangePasswordEmailAsync(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
    name: SendChangePasswordEmailAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmailAsync(SuperOffice.CRM.Rows.CredentialsRow)
    name: SendChangePasswordEmailAsync
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Rows.CredentialsRow
    name: CredentialsRow
    isExternal: true
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_IsPasswordLegal_SuperOffice_CRM_Administration_SoUser_System_String_System_String__
  name: IsPasswordLegal
  nameWithType: SoPasswordCredentialPlugin.IsPasswordLegal
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsPasswordLegal
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: IsPasswordLegal(SoUser, string, out string)
  nameWithType: IUserCredentialPlugin.IsPasswordLegal(SoUser, string, out string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser, string, out string)
  nameWithType.vb: IUserCredentialPlugin.IsPasswordLegal(SoUser, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser, String, String)
  name.vb: IsPasswordLegal(SoUser, String, String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
    name: IsPasswordLegal
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Administration.SoUser
    name: SoUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
    name: IsPasswordLegal
    isExternal: true
  - name: (
  - uid: SuperOffice.CRM.Administration.SoUser
    name: SoUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_Description
  name: Description
  nameWithType: SoPasswordCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: Description
  nameWithType: IUserCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_DisplayType
  name: DisplayType
  nameWithType: SoPasswordCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: DisplayType
  nameWithType: IUserCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_ControlType
  name: ControlType
  nameWithType: SoPasswordCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.ControlType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: ControlType
  nameWithType: IUserCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
- uid: SuperOffice.Data.CredentialControlType
  commentId: T:SuperOffice.Data.CredentialControlType
  parent: SuperOffice.Data
  isExternal: true
  href: SuperOffice.Data.CredentialControlType.html
  name: CredentialControlType
  nameWithType: CredentialControlType
  fullName: SuperOffice.Data.CredentialControlType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_IsUserNameSupported
  name: IsUserNameSupported
  nameWithType: SoPasswordCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: IsUserNameSupported
  nameWithType: IUserCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
  isExternal: true
  href: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.html#SuperOffice_CRM_Administration_SoPasswordCredentialPlugin_CanCreatePerson
  name: CanCreatePerson
  nameWithType: SoPasswordCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.SoPasswordCredentialPlugin.CanCreatePerson
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  name: CanCreatePerson
  nameWithType: IUserCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
