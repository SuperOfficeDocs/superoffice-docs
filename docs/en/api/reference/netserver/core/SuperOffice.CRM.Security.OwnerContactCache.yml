### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Security.OwnerContactCache
  commentId: T:SuperOffice.CRM.Security.OwnerContactCache
  id: OwnerContactCache
  parent: SuperOffice.CRM.Security
  children:
  - SuperOffice.CRM.Security.OwnerContactCache.#ctor
  - SuperOffice.CRM.Security.OwnerContactCache.GetCurrent
  - SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner(System.Int32)
  - SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner(System.Int32)
  - SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner(System.Int32)
  - SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner(System.Int32)
  - SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner(System.Int32)
  - SuperOffice.CRM.Security.OwnerContactCache.OnLoad
  - SuperOffice.CRM.Security.OwnerContactCache.TableNames
  langs:
  - csharp
  - vb
  name: OwnerContactCache
  nameWithType: OwnerContactCache
  fullName: SuperOffice.CRM.Security.OwnerContactCache
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: >-
      [CacheV2("Database", 0)]

      public class OwnerContactCache : CacheBaseV2, IFlushableV2, IDisposable
    content.vb: >-
      <CacheV2("Database", 0)>

      Public Class OwnerContactCache
          Inherits CacheBaseV2
          Implements IFlushableV2, IDisposable
  inheritance:
  - System.Object
  - SuperOffice.Data.Cache.CacheBaseV2
  implements:
  - SuperOffice.Data.Cache.IFlushableV2
  - System.IDisposable
  inheritedMembers:
  - SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave)
  - SuperOffice.Data.Cache.CacheBaseV2.Dispose
  - SuperOffice.Data.Cache.CacheBaseV2.Flush
  - SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  - SuperOffice.Data.Cache.CacheBaseV2.GetCurrent``1
  - SuperOffice.Data.Cache.CacheBaseV2.Load
  - SuperOffice.Data.Cache.CacheBaseV2.Disposed
  extensionMethods:
  - SuperOffice.CRM.Security.OwnerContactCache.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Security.OwnerContactCache.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Security.OwnerContactCache)
  - SuperOffice.CRM.Security.OwnerContactCache.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  - SuperOffice.CRM.Security.OwnerContactCache.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Data.Cache.CacheV2Attribute
    ctor: SuperOffice.Data.Cache.CacheV2Attribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: Database
    - type: System.Int32
      value: 0
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner(System.Int32)
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner(System.Int32)
  id: IsContactDatabaseOwner(System.Int32)
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: IsContactDatabaseOwner(Int32)
  nameWithType: OwnerContactCache.IsContactDatabaseOwner(Int32)
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  summary: "\nDoes the contact own a database (central or satellite)?\n"
  syntax:
    content: public bool IsContactDatabaseOwner(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: ContactId for the contact to check if it owns a database
    return:
      type: System.Boolean
      description: True if the contact owns a database.
    content.vb: Public Function IsContactDatabaseOwner(contactId As Integer) As Boolean
  overload: SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner(System.Int32)
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner(System.Int32)
  id: IsContactLicenseOwner(System.Int32)
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: IsContactLicenseOwner(Int32)
  nameWithType: OwnerContactCache.IsContactLicenseOwner(Int32)
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  summary: "\nIs the contact License/central database owner\n"
  syntax:
    content: public bool IsContactLicenseOwner(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: Primary id of the contect to check
    return:
      type: System.Boolean
      description: True if the contact is the owner of central database and satellite.
    content.vb: Public Function IsContactLicenseOwner(contactId As Integer) As Boolean
  overload: SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner(System.Int32)
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner(System.Int32)
  id: IsContactSatelliteOwner(System.Int32)
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: IsContactSatelliteOwner(Int32)
  nameWithType: OwnerContactCache.IsContactSatelliteOwner(Int32)
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  summary: "\nReturn true if the contact id is a sattelite owner (excluding central/license owner).\n"
  syntax:
    content: public bool IsContactSatelliteOwner(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: ContactId for the contact to check.
    return:
      type: System.Boolean
      description: True if the contact is a sattelite owner.
    content.vb: Public Function IsContactSatelliteOwner(contactId As Integer) As Boolean
  overload: SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner(System.Int32)
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner(System.Int32)
  id: IsContactCurrentDatabaseOwner(System.Int32)
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: IsContactCurrentDatabaseOwner(Int32)
  nameWithType: OwnerContactCache.IsContactCurrentDatabaseOwner(Int32)
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  summary: "\nIs the contact and owner of the current database\n"
  syntax:
    content: public bool IsContactCurrentDatabaseOwner(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: ContactId for the contact to check.
    return:
      type: System.Boolean
      description: True if the contact is the owner of the current database.
    content.vb: Public Function IsContactCurrentDatabaseOwner(contactId As Integer) As Boolean
  overload: SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner(System.Int32)
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner(System.Int32)
  id: IsContactEmployeeUserOwner(System.Int32)
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: IsContactEmployeeUserOwner(Int32)
  nameWithType: OwnerContactCache.IsContactEmployeeUserOwner(Int32)
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  summary: "\nIs the contact, or can it be, an associate owner\n"
  syntax:
    content: public bool IsContactEmployeeUserOwner(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: ContactId for the contact to check.
    return:
      type: System.Boolean
      description: True if the contact is an associate owner.
    content.vb: Public Function IsContactEmployeeUserOwner(contactId As Integer) As Boolean
  overload: SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Security.OwnerContactCache.OnLoad
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.OnLoad
  id: OnLoad
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: OnLoad()
  nameWithType: OwnerContactCache.OnLoad()
  fullName: SuperOffice.CRM.Security.OwnerContactCache.OnLoad()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: protected override void OnLoad()
    content.vb: Protected Overrides Sub OnLoad
  overridden: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  overload: SuperOffice.CRM.Security.OwnerContactCache.OnLoad*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.CRM.Security.OwnerContactCache.GetCurrent
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.GetCurrent
  id: GetCurrent
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: OwnerContactCache.GetCurrent()
  fullName: SuperOffice.CRM.Security.OwnerContactCache.GetCurrent()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public static OwnerContactCache GetCurrent()
    return:
      type: SuperOffice.CRM.Security.OwnerContactCache
    content.vb: Public Shared Function GetCurrent As OwnerContactCache
  overload: SuperOffice.CRM.Security.OwnerContactCache.GetCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SuperOffice.CRM.Security.OwnerContactCache.#ctor
  commentId: M:SuperOffice.CRM.Security.OwnerContactCache.#ctor
  id: '#ctor'
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: OwnerContactCache()
  nameWithType: OwnerContactCache.OwnerContactCache()
  fullName: SuperOffice.CRM.Security.OwnerContactCache.OwnerContactCache()
  type: Constructor
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: public OwnerContactCache()
    content.vb: Public Sub New
  overload: SuperOffice.CRM.Security.OwnerContactCache.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.CRM.Security.OwnerContactCache.TableNames
  commentId: P:SuperOffice.CRM.Security.OwnerContactCache.TableNames
  id: TableNames
  parent: SuperOffice.CRM.Security.OwnerContactCache
  langs:
  - csharp
  - vb
  name: TableNames
  nameWithType: OwnerContactCache.TableNames
  fullName: SuperOffice.CRM.Security.OwnerContactCache.TableNames
  type: Property
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Security
  syntax:
    content: protected override IEnumerable<string> TableNames { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Protected Overrides ReadOnly Property TableNames As IEnumerable(Of String)
  overridden: SuperOffice.Data.Cache.CacheBaseV2.TableNames
  overload: SuperOffice.CRM.Security.OwnerContactCache.TableNames*
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
references:
- uid: SuperOffice.CRM.Security
  commentId: N:SuperOffice.CRM.Security
  isExternal: true
  name: SuperOffice.CRM.Security
  nameWithType: SuperOffice.CRM.Security
  fullName: SuperOffice.CRM.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Cache.CacheBaseV2
  commentId: T:SuperOffice.Data.Cache.CacheBaseV2
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: CacheBaseV2
  nameWithType: CacheBaseV2
  fullName: SuperOffice.Data.Cache.CacheBaseV2
- uid: SuperOffice.Data.Cache.IFlushableV2
  commentId: T:SuperOffice.Data.Cache.IFlushableV2
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: IFlushableV2
  nameWithType: IFlushableV2
  fullName: SuperOffice.Data.Cache.IFlushableV2
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave)
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave)
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: IsCacheInvalidated(String, Int32, PrivateSave)
  nameWithType: CacheBaseV2.IsCacheInvalidated(String, Int32, PrivateSave)
  fullName: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated(System.String, System.Int32, SuperOffice.Data.SQL.PrivateSave)
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave)
    name: IsCacheInvalidated
    nameWithType: CacheBaseV2.IsCacheInvalidated
    fullName: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.SQL.PrivateSave
    name: PrivateSave
    nameWithType: PrivateSave
    fullName: SuperOffice.Data.SQL.PrivateSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated(System.String,System.Int32,SuperOffice.Data.SQL.PrivateSave)
    name: IsCacheInvalidated
    nameWithType: CacheBaseV2.IsCacheInvalidated
    fullName: SuperOffice.Data.Cache.CacheBaseV2.IsCacheInvalidated
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.SQL.PrivateSave
    name: PrivateSave
    nameWithType: PrivateSave
    fullName: SuperOffice.Data.SQL.PrivateSave
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.Dispose
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Dispose
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Dispose()
  nameWithType: CacheBaseV2.Dispose()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Dispose()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    name: Dispose
    nameWithType: CacheBaseV2.Dispose
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    name: Dispose
    nameWithType: CacheBaseV2.Dispose
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.Flush
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Flush
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Flush()
  nameWithType: CacheBaseV2.Flush()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Flush()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Flush
    name: Flush
    nameWithType: CacheBaseV2.Flush
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Flush
    name: Flush
    nameWithType: CacheBaseV2.Flush
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: BeginDisableAutoUpdate()
  nameWithType: CacheBaseV2.BeginDisableAutoUpdate()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    name: BeginDisableAutoUpdate
    nameWithType: CacheBaseV2.BeginDisableAutoUpdate
    fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    name: BeginDisableAutoUpdate
    nameWithType: CacheBaseV2.BeginDisableAutoUpdate
    fullName: SuperOffice.Data.Cache.CacheBaseV2.BeginDisableAutoUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent``1
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.GetCurrent``1
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: GetCurrent<T>()
  nameWithType: CacheBaseV2.GetCurrent<T>()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent<T>()
  nameWithType.vb: CacheBaseV2.GetCurrent(Of T)()
  fullName.vb: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent(Of T)()
  name.vb: GetCurrent(Of T)()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent``1
    name: GetCurrent<T>
    nameWithType: CacheBaseV2.GetCurrent<T>
    fullName: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent``1
    name: GetCurrent(Of T)
    nameWithType: CacheBaseV2.GetCurrent(Of T)
    fullName: SuperOffice.Data.Cache.CacheBaseV2.GetCurrent(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.Load
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.Load
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Load()
  nameWithType: CacheBaseV2.Load()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Load()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Load
    name: Load
    nameWithType: CacheBaseV2.Load
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.Load
    name: Load
    nameWithType: CacheBaseV2.Load
    fullName: SuperOffice.Data.Cache.CacheBaseV2.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBaseV2.Disposed
  commentId: P:SuperOffice.Data.Cache.CacheBaseV2.Disposed
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: Disposed
  nameWithType: CacheBaseV2.Disposed
  fullName: SuperOffice.Data.Cache.CacheBaseV2.Disposed
- uid: SuperOffice.CRM.Security.OwnerContactCache.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<OwnerContactCache, To>()
  nameWithType: EnumUtil.MapEnums<OwnerContactCache, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Security.OwnerContactCache, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of OwnerContactCache, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Security.OwnerContactCache, To)()
  name.vb: MapEnums(Of OwnerContactCache, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<OwnerContactCache, To>
    nameWithType: EnumUtil.MapEnums<OwnerContactCache, To>
    fullName: EnumUtil.MapEnums<SuperOffice.CRM.Security.OwnerContactCache, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of OwnerContactCache, To)
    nameWithType: EnumUtil.MapEnums(Of OwnerContactCache, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.CRM.Security.OwnerContactCache, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.OwnerContactCache.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.CRM.Security.OwnerContactCache)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  name: AssignByReflection<OwnerContactCache>(OwnerContactCache)
  nameWithType: ObjectExtensions.AssignByReflection<OwnerContactCache>(OwnerContactCache)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Security.OwnerContactCache>(SuperOffice.CRM.Security.OwnerContactCache)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of OwnerContactCache)(OwnerContactCache)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Security.OwnerContactCache)(SuperOffice.CRM.Security.OwnerContactCache)
  name.vb: AssignByReflection(Of OwnerContactCache)(OwnerContactCache)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection<OwnerContactCache>
    nameWithType: ObjectExtensions.AssignByReflection<OwnerContactCache>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.CRM.Security.OwnerContactCache>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Security.OwnerContactCache
    name: OwnerContactCache
    nameWithType: OwnerContactCache
    fullName: SuperOffice.CRM.Security.OwnerContactCache
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0)
    name: AssignByReflection(Of OwnerContactCache)
    nameWithType: ObjectExtensions.AssignByReflection(Of OwnerContactCache)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.CRM.Security.OwnerContactCache)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SuperOffice.CRM.Security.OwnerContactCache
    name: OwnerContactCache
    nameWithType: OwnerContactCache
    fullName: SuperOffice.CRM.Security.OwnerContactCache
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.OwnerContactCache.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  name: GraphCopy<OwnerContactCache>()
  nameWithType: ObjectExtensions.GraphCopy<OwnerContactCache>()
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Security.OwnerContactCache>()
  nameWithType.vb: ObjectExtensions.GraphCopy(Of OwnerContactCache)()
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Security.OwnerContactCache)()
  name.vb: GraphCopy(Of OwnerContactCache)()
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy<OwnerContactCache>
    nameWithType: ObjectExtensions.GraphCopy<OwnerContactCache>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.CRM.Security.OwnerContactCache>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1
    name: GraphCopy(Of OwnerContactCache)
    nameWithType: ObjectExtensions.GraphCopy(Of OwnerContactCache)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.CRM.Security.OwnerContactCache)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.OwnerContactCache.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<OwnerContactCache, To>()
  nameWithType: Converters.MapEnums<OwnerContactCache, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Security.OwnerContactCache, To>()
  nameWithType.vb: Converters.MapEnums(Of OwnerContactCache, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Security.OwnerContactCache, To)()
  name.vb: MapEnums(Of OwnerContactCache, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<OwnerContactCache, To>
    nameWithType: Converters.MapEnums<OwnerContactCache, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Security.OwnerContactCache, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of OwnerContactCache, To)
    nameWithType: Converters.MapEnums(Of OwnerContactCache, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Security.OwnerContactCache, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.Cache
  commentId: N:SuperOffice.Data.Cache
  isExternal: true
  name: SuperOffice.Data.Cache
  nameWithType: SuperOffice.Data.Cache
  fullName: SuperOffice.Data.Cache
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection<T>
    nameWithType: ObjectExtensions.AssignByReflection<T>
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection(Of T)
    nameWithType: ObjectExtensions.AssignByReflection(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy<T>
    nameWithType: ObjectExtensions.GraphCopy<T>
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy(Of T)
    nameWithType: ObjectExtensions.GraphCopy(Of T)
    fullName: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner
  isExternal: true
  name: IsContactDatabaseOwner
  nameWithType: OwnerContactCache.IsContactDatabaseOwner
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactDatabaseOwner
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner
  isExternal: true
  name: IsContactLicenseOwner
  nameWithType: OwnerContactCache.IsContactLicenseOwner
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactLicenseOwner
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner
  isExternal: true
  name: IsContactSatelliteOwner
  nameWithType: OwnerContactCache.IsContactSatelliteOwner
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactSatelliteOwner
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner
  isExternal: true
  name: IsContactCurrentDatabaseOwner
  nameWithType: OwnerContactCache.IsContactCurrentDatabaseOwner
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactCurrentDatabaseOwner
- uid: SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner
  isExternal: true
  name: IsContactEmployeeUserOwner
  nameWithType: OwnerContactCache.IsContactEmployeeUserOwner
  fullName: SuperOffice.CRM.Security.OwnerContactCache.IsContactEmployeeUserOwner
- uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  commentId: M:SuperOffice.Data.Cache.CacheBaseV2.OnLoad
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: OnLoad()
  nameWithType: CacheBaseV2.OnLoad()
  fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    name: OnLoad
    nameWithType: CacheBaseV2.OnLoad
    fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    name: OnLoad
    nameWithType: CacheBaseV2.OnLoad
    fullName: SuperOffice.Data.Cache.CacheBaseV2.OnLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.CRM.Security.OwnerContactCache.OnLoad*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.OnLoad
  isExternal: true
  name: OnLoad
  nameWithType: OwnerContactCache.OnLoad
  fullName: SuperOffice.CRM.Security.OwnerContactCache.OnLoad
- uid: SuperOffice.CRM.Security.OwnerContactCache.GetCurrent*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.GetCurrent
  isExternal: true
  name: GetCurrent
  nameWithType: OwnerContactCache.GetCurrent
  fullName: SuperOffice.CRM.Security.OwnerContactCache.GetCurrent
- uid: SuperOffice.CRM.Security.OwnerContactCache
  commentId: T:SuperOffice.CRM.Security.OwnerContactCache
  parent: SuperOffice.CRM.Security
  isExternal: true
  name: OwnerContactCache
  nameWithType: OwnerContactCache
  fullName: SuperOffice.CRM.Security.OwnerContactCache
- uid: SuperOffice.CRM.Security.OwnerContactCache.#ctor*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.#ctor
  isExternal: true
  name: OwnerContactCache
  nameWithType: OwnerContactCache.OwnerContactCache
  fullName: SuperOffice.CRM.Security.OwnerContactCache.OwnerContactCache
- uid: SuperOffice.Data.Cache.CacheBaseV2.TableNames
  commentId: P:SuperOffice.Data.Cache.CacheBaseV2.TableNames
  parent: SuperOffice.Data.Cache.CacheBaseV2
  isExternal: true
  name: TableNames
  nameWithType: CacheBaseV2.TableNames
  fullName: SuperOffice.Data.Cache.CacheBaseV2.TableNames
- uid: SuperOffice.CRM.Security.OwnerContactCache.TableNames*
  commentId: Overload:SuperOffice.CRM.Security.OwnerContactCache.TableNames
  isExternal: true
  name: TableNames
  nameWithType: OwnerContactCache.TableNames
  fullName: SuperOffice.CRM.Security.OwnerContactCache.TableNames
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: '!:System.Collections.Generic.IEnumerable{System.String}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
