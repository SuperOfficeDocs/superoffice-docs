### YamlMime:ManagedReference
items:
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  commentId: T:SuperOffice.WebApi.Agents.IDiagnosticsAgent
  id: IDiagnosticsAgent
  parent: SuperOffice.WebApi.Agents
  children:
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync(SuperOffice.WebApi.Data.WebAppUsage[],SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync(System.DateTime,System.DateTime,System.String,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync(System.Int32,System.String,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync(System.Int32,System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync(System.String,System.Int32,System.String,System.DateTime,SuperOffice.WebApi.Data.SystemMessageType,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync(System.Int32,System.String,System.DateTime,SuperOffice.WebApi.RequestOptions)
  langs:
  - csharp
  - vb
  name: IDiagnosticsAgent
  nameWithType: IDiagnosticsAgent
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  type: Interface
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nDiagnostics, usage data collection, caches and flushing\n"
  syntax:
    content: 'public interface IDiagnosticsAgent : IDisposable'
    content.vb: >-
      Public Interface IDiagnosticsAgent
          Inherits IDisposable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync(SuperOffice.WebApi.RequestOptions)
  id: FlushCachesAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: FlushCachesAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.FlushCachesAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nFlushes all NetServer caches\n"
  syntax:
    content: Task FlushCachesAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function FlushCachesAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync(SuperOffice.WebApi.RequestOptions)
  id: GetCacheNamesAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetCacheNamesAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.GetCacheNamesAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGet the name of the caches that can be flushed\n"
  syntax:
    content: Task<string[]> GetCacheNamesAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: Name of the caches that can be flusehd
    content.vb: Function GetCacheNamesAsync(requestOptions As RequestOptions = Nothing) As Task(Of String())
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  id: FlushCachesByNameAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: FlushCachesByNameAsync(String[], RequestOptions)
  nameWithType: IDiagnosticsAgent.FlushCachesByNameAsync(String[], RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync(System.String[], SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nFlushes all NetServer caches named\n"
  syntax:
    content: Task FlushCachesByNameAsync(string[] cacheNames, RequestOptions requestOptions = null)
    parameters:
    - id: cacheNames
      type: System.String[]
      description: Name of the cachnes to flush
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function FlushCachesByNameAsync(cacheNames As String(), requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync*
  nameWithType.vb: IDiagnosticsAgent.FlushCachesByNameAsync(String(), RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync(System.String(), SuperOffice.WebApi.RequestOptions)
  name.vb: FlushCachesByNameAsync(String(), RequestOptions)
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  id: GetCacheStateAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetCacheStateAsync(String[], RequestOptions)
  nameWithType: IDiagnosticsAgent.GetCacheStateAsync(String[], RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync(System.String[], SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGet the current generation value of the named caches. State is opaque.\n"
  syntax:
    content: Task<string> GetCacheStateAsync(string[] cacheNames, RequestOptions requestOptions = null)
    parameters:
    - id: cacheNames
      type: System.String[]
      description: Names of the caches to check
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Current state of the caches named. If not the same as previous value, then it is time to flush
    content.vb: Function GetCacheStateAsync(cacheNames As String(), requestOptions As RequestOptions = Nothing) As Task(Of String)
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync*
  nameWithType.vb: IDiagnosticsAgent.GetCacheStateAsync(String(), RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync(System.String(), SuperOffice.WebApi.RequestOptions)
  name.vb: GetCacheStateAsync(String(), RequestOptions)
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  id: GetCacheInvalidationGenerationsAsync(System.String[],SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetCacheInvalidationGenerationsAsync(String[], RequestOptions)
  nameWithType: IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(String[], RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(System.String[], SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGet generation for provided names\n"
  syntax:
    content: Task<CacheInvalidation[]> GetCacheInvalidationGenerationsAsync(string[] names, RequestOptions requestOptions = null)
    parameters:
    - id: names
      type: System.String[]
      description: Name of caches
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.CacheInvalidation[]}
      description: Array of caches with generation number
    content.vb: Function GetCacheInvalidationGenerationsAsync(names As String(), requestOptions As RequestOptions = Nothing) As Task(Of CacheInvalidation())
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync*
  nameWithType.vb: IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(String(), RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync(System.String(), SuperOffice.WebApi.RequestOptions)
  name.vb: GetCacheInvalidationGenerationsAsync(String(), RequestOptions)
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync(SuperOffice.WebApi.RequestOptions)
  id: GetEntityCountsForCurrentUserAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetEntityCountsForCurrentUserAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGet an array of entities and number of entities created for the current associate\n"
  syntax:
    content: Task<EntityCounts[]> GetEntityCountsForCurrentUserAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.EntityCounts[]}
      description: Array of EntityCounts[] for the current associate
    content.vb: Function GetEntityCountsForCurrentUserAsync(requestOptions As RequestOptions = Nothing) As Task(Of EntityCounts())
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync(SuperOffice.WebApi.RequestOptions)
  id: GetEntityCountsForAllUsersAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetEntityCountsForAllUsersAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.GetEntityCountsForAllUsersAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGet an array of entities and number of entities created for all associates.\n"
  syntax:
    content: Task<EntityCounts[]> GetEntityCountsForAllUsersAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.EntityCounts[]}
      description: Array of EntityCounts[] for all the users
    content.vb: Function GetEntityCountsForAllUsersAsync(requestOptions As RequestOptions = Nothing) As Task(Of EntityCounts())
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  id: LogViewStateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: LogViewStateAsync(String, RequestOptions)
  nameWithType: IDiagnosticsAgent.LogViewStateAsync(String, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync(System.String, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nLog a change in view state. The granularity of the logging depends on the current configuration. This call returns asynchronously, leaving the server to finish processing later on.\n"
  syntax:
    content: Task LogViewStateAsync(string viewState, RequestOptions requestOptions = null)
    parameters:
    - id: viewState
      type: System.String
      description: Current view state to be logged
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function LogViewStateAsync(viewState As String, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SuperOffice.WebApi.RequestOptions)
  id: ChangeLogSettingsAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: ChangeLogSettingsAsync(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, RequestOptions)
  nameWithType: IDiagnosticsAgent.ChangeLogSettingsAsync(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync(System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nChange NetServer log settings.\n"
  syntax:
    content: Task ChangeLogSettingsAsync(bool logWarning, bool logInformation, bool logSuccessAudit, bool logFailureAudit, bool logToEventLog, bool logToSuperOffice, bool logToFile, bool logToTrace, RequestOptions requestOptions = null)
    parameters:
    - id: logWarning
      type: System.Boolean
      description: Turn on warning log
    - id: logInformation
      type: System.Boolean
      description: Turn on information log
    - id: logSuccessAudit
      type: System.Boolean
      description: Turn on success audit log
    - id: logFailureAudit
      type: System.Boolean
      description: Turn on failure audit log
    - id: logToEventLog
      type: System.Boolean
      description: Log to event log
    - id: logToSuperOffice
      type: System.Boolean
      description: Log to SuperOffice
    - id: logToFile
      type: System.Boolean
      description: Log to file
    - id: logToTrace
      type: System.Boolean
      description: Log to trace
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function ChangeLogSettingsAsync(logWarning As Boolean, logInformation As Boolean, logSuccessAudit As Boolean, logFailureAudit As Boolean, logToEventLog As Boolean, logToSuperOffice As Boolean, logToFile As Boolean, logToTrace As Boolean, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync(SuperOffice.WebApi.RequestOptions)
  id: CollectDataAdditionsAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: CollectDataAdditionsAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.CollectDataAdditionsAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nCollect and transmit usage statistics: Database Additions. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\n"
  syntax:
    content: Task CollectDataAdditionsAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function CollectDataAdditionsAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync(SuperOffice.WebApi.RequestOptions)
  id: CollectWinUsageAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: CollectWinUsageAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.CollectWinUsageAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nCollect and transmit usage statistics: Windows CRM Client Usage. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\n"
  syntax:
    content: Task CollectWinUsageAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function CollectWinUsageAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync(SuperOffice.WebApi.RequestOptions)
  id: CollectWebUsageAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: CollectWebUsageAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.CollectWebUsageAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nCollect and transmit usage statistics: Web-based clients Usage. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\n"
  syntax:
    content: Task CollectWebUsageAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function CollectWebUsageAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync(SuperOffice.WebApi.RequestOptions)
  id: CollectTableSizesAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: CollectTableSizesAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.CollectTableSizesAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nCollect and transmit usage statistics: Table Sizes. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\n"
  syntax:
    content: Task CollectTableSizesAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function CollectTableSizesAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync(SuperOffice.WebApi.RequestOptions)
  id: ResyncUsersAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: ResyncUsersAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.ResyncUsersAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nResynchronize user information with SuperOffice Community, if opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\n"
  syntax:
    content: Task ResyncUsersAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function ResyncUsersAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync(System.String,System.Int32,System.String,System.DateTime,SuperOffice.WebApi.Data.SystemMessageType,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync(System.String,System.Int32,System.String,System.DateTime,SuperOffice.WebApi.Data.SystemMessageType,SuperOffice.WebApi.RequestOptions)
  id: SendSystemMessageAsync(System.String,System.Int32,System.String,System.DateTime,SuperOffice.WebApi.Data.SystemMessageType,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: SendSystemMessageAsync(String, Int32, String, DateTime, SystemMessageType, RequestOptions)
  nameWithType: IDiagnosticsAgent.SendSystemMessageAsync(String, Int32, String, DateTime, SystemMessageType, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync(System.String, System.Int32, System.String, System.DateTime, SuperOffice.WebApi.Data.SystemMessageType, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nAdds a system message for a specific associate.\n"
  syntax:
    content: Task SendSystemMessageAsync(string systemMessageId, int associateId, string markdownMessage, DateTime expire, SystemMessageType type, RequestOptions requestOptions = null)
    parameters:
    - id: systemMessageId
      type: System.String
      description: The message string id
    - id: associateId
      type: System.Int32
      description: The associateId of the message target.
    - id: markdownMessage
      type: System.String
      description: Markdown message to be displayed to the user
    - id: expire
      type: System.DateTime
      description: When the message will no longer be available
    - id: type
      type: SuperOffice.WebApi.Data.SystemMessageType
      description: 'Type of message, example: info, warning, error'
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SendSystemMessageAsync(systemMessageId As String, associateId As Integer, markdownMessage As String, expire As DateTime, type As SystemMessageType, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync(System.Int32,System.String,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync(System.Int32,System.String,SuperOffice.WebApi.RequestOptions)
  id: RemoveSystemMessageAsync(System.Int32,System.String,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: RemoveSystemMessageAsync(Int32, String, RequestOptions)
  nameWithType: IDiagnosticsAgent.RemoveSystemMessageAsync(Int32, String, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync(System.Int32, System.String, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nRemoves a system message for current associate\n"
  syntax:
    content: Task RemoveSystemMessageAsync(int onlineappId, string systemMessageId, RequestOptions requestOptions = null)
    parameters:
    - id: onlineappId
      type: System.Int32
      description: Id of the online app that owns this message
    - id: systemMessageId
      type: System.String
      description: Message identifier, used for message  removal
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveSystemMessageAsync(onlineappId As Integer, systemMessageId As String, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync(System.Int32,System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync(System.Int32,System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  id: RemoveSystemMessageForAssociateAsync(System.Int32,System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: RemoveSystemMessageForAssociateAsync(Int32, String, Int32, RequestOptions)
  nameWithType: IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync(Int32, String, Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync(System.Int32, System.String, System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nRemoves a system message for specific associate.\n"
  syntax:
    content: Task RemoveSystemMessageForAssociateAsync(int onlineappId, string systemMessageId, int associateId, RequestOptions requestOptions = null)
    parameters:
    - id: onlineappId
      type: System.Int32
      description: Id of the online app that owns this message
    - id: systemMessageId
      type: System.String
      description: Message identifier, used for message update or removal
    - id: associateId
      type: System.Int32
      description: The associateId of the message target.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveSystemMessageForAssociateAsync(onlineappId As Integer, systemMessageId As String, associateId As Integer, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  id: GetSystemMessagesAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetSystemMessagesAsync(Int32, RequestOptions)
  nameWithType: IDiagnosticsAgent.GetSystemMessagesAsync(Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync(System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nRetrieves a list of system messages for a specific associate.\n"
  syntax:
    content: Task<SystemMessage[]> GetSystemMessagesAsync(int associateId, RequestOptions requestOptions = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: The associateId of the message target.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.SystemMessage[]}
      description: List of SystemMessages for desired associate
    content.vb: Function GetSystemMessagesAsync(associateId As Integer, requestOptions As RequestOptions = Nothing) As Task(Of SystemMessage())
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync(SuperOffice.WebApi.RequestOptions)
  id: RemoveExpiredSystemMessagesAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: RemoveExpiredSystemMessagesAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nDeletes expired system messages.\n"
  syntax:
    content: Task RemoveExpiredSystemMessagesAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveExpiredSystemMessagesAsync(requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync(SuperOffice.WebApi.RequestOptions)
  id: PerformTasksAfterUpgradeAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: PerformTasksAfterUpgradeAsync(RequestOptions)
  nameWithType: IDiagnosticsAgent.PerformTasksAfterUpgradeAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nAfter upgrading to a new fileset, there may be tasks that need to be done. Examples - import new TypicalSearches, if present. Tasks performed here need to be idempotent and independent of the actual upgrade jump (what was the previous version). They should complete in a reasonable time, not more than a few minutes maximum.\n"
  syntax:
    content: Task<string> PerformTasksAfterUpgradeAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Message that can be shown to the user, summarizing what has been done, if anything.
    content.vb: Function PerformTasksAfterUpgradeAsync(requestOptions As RequestOptions = Nothing) As Task(Of String)
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync(SuperOffice.WebApi.Data.WebAppUsage[],SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync(SuperOffice.WebApi.Data.WebAppUsage[],SuperOffice.WebApi.RequestOptions)
  id: AddWebAppUsageAsync(SuperOffice.WebApi.Data.WebAppUsage[],SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: AddWebAppUsageAsync(WebAppUsage[], RequestOptions)
  nameWithType: IDiagnosticsAgent.AddWebAppUsageAsync(WebAppUsage[], RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync(SuperOffice.WebApi.Data.WebAppUsage[], SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nAdds WebApp usage to existing log\n"
  syntax:
    content: Task AddWebAppUsageAsync(WebAppUsage[] webAppUsages, RequestOptions requestOptions = null)
    parameters:
    - id: webAppUsages
      type: SuperOffice.WebApi.Data.WebAppUsage[]
      description: Web app usage.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddWebAppUsageAsync(webAppUsages As WebAppUsage(), requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync*
  nameWithType.vb: IDiagnosticsAgent.AddWebAppUsageAsync(WebAppUsage(), RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync(SuperOffice.WebApi.Data.WebAppUsage(), SuperOffice.WebApi.RequestOptions)
  name.vb: AddWebAppUsageAsync(WebAppUsage(), RequestOptions)
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync(System.Int32,System.String,System.DateTime,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync(System.Int32,System.String,System.DateTime,SuperOffice.WebApi.RequestOptions)
  id: WebAppUsageExistsInPeriodAsync(System.Int32,System.String,System.DateTime,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: WebAppUsageExistsInPeriodAsync(Int32, String, DateTime, RequestOptions)
  nameWithType: IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync(Int32, String, DateTime, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync(System.Int32, System.String, System.DateTime, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nReturns true if viewState has been clicked at least once since FromDate, if asscoiateId &lt; 0 or FromDate is DateTime.MinValue no restriction given for those parameters\n"
  syntax:
    content: Task<bool> WebAppUsageExistsInPeriodAsync(int associateId, string viewState, DateTime fromDate, RequestOptions requestOptions = null)
    parameters:
    - id: associateId
      type: System.Int32
      description: The asscoiate id to look for webapp usage
    - id: viewState
      type: System.String
      description: The viewState to search for
    - id: fromDate
      type: System.DateTime
      description: The datetime to restrict webapp usage on
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: Returns true if viewState has been clicked at least once since FromDate
    content.vb: Function WebAppUsageExistsInPeriodAsync(associateId As Integer, viewState As String, fromDate As DateTime, requestOptions As RequestOptions = Nothing) As Task(Of Boolean)
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync*
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync(System.DateTime,System.DateTime,System.String,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync(System.DateTime,System.DateTime,System.String,SuperOffice.WebApi.RequestOptions)
  id: GetWebAppUsagesForPeriodAsync(System.DateTime,System.DateTime,System.String,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDiagnosticsAgent
  langs:
  - csharp
  - vb
  name: GetWebAppUsagesForPeriodAsync(DateTime, DateTime, String, RequestOptions)
  nameWithType: IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync(DateTime, DateTime, String, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync(System.DateTime, System.DateTime, System.String, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGet all WebAppUsages for a given period, that match an optional search term\n"
  syntax:
    content: Task<WebAppUsage[]> GetWebAppUsagesForPeriodAsync(DateTime fromDate, DateTime toDate, string searchTerm, RequestOptions requestOptions = null)
    parameters:
    - id: fromDate
      type: System.DateTime
    - id: toDate
      type: System.DateTime
    - id: searchTerm
      type: System.String
      description: ViewState search term. &apos;%&apos; is the wildcard character, for example &apos;Pocket%&apos; will match all viewstates starting with &apos;Pocket&apos;. If empty, all viewstates will be matched
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.WebAppUsage[]}
    content.vb: Function GetWebAppUsagesForPeriodAsync(fromDate As DateTime, toDate As DateTime, searchTerm As String, requestOptions As RequestOptions = Nothing) As Task(Of WebAppUsage())
  overload: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync*
references:
- uid: SuperOffice.WebApi.Agents
  commentId: N:SuperOffice.WebApi.Agents
  isExternal: true
  name: SuperOffice.WebApi.Agents
  nameWithType: SuperOffice.WebApi.Agents
  fullName: SuperOffice.WebApi.Agents
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync
  isExternal: true
  name: FlushCachesAsync
  nameWithType: IDiagnosticsAgent.FlushCachesAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesAsync
- uid: SuperOffice.WebApi.RequestOptions
  commentId: T:SuperOffice.WebApi.RequestOptions
  parent: SuperOffice.WebApi
  isExternal: true
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: SuperOffice.WebApi.RequestOptions
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.WebApi
  commentId: N:SuperOffice.WebApi
  isExternal: true
  name: SuperOffice.WebApi
  nameWithType: SuperOffice.WebApi
  fullName: SuperOffice.WebApi
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync
  isExternal: true
  name: GetCacheNamesAsync
  nameWithType: IDiagnosticsAgent.GetCacheNamesAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheNamesAsync
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: '!:System.Threading.Tasks.Task{System.String[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync
  isExternal: true
  name: FlushCachesByNameAsync
  nameWithType: IDiagnosticsAgent.FlushCachesByNameAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.FlushCachesByNameAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync
  isExternal: true
  name: GetCacheStateAsync
  nameWithType: IDiagnosticsAgent.GetCacheStateAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheStateAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync
  isExternal: true
  name: GetCacheInvalidationGenerationsAsync
  nameWithType: IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetCacheInvalidationGenerationsAsync
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.CacheInvalidation[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.CacheInvalidation[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<CacheInvalidation[]>
  nameWithType: Task<CacheInvalidation[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.CacheInvalidation[]>
  nameWithType.vb: Task(Of CacheInvalidation())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.CacheInvalidation())
  name.vb: Task(Of CacheInvalidation())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.CacheInvalidation
    name: CacheInvalidation
    nameWithType: CacheInvalidation
    fullName: SuperOffice.WebApi.Data.CacheInvalidation
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.CacheInvalidation
    name: CacheInvalidation
    nameWithType: CacheInvalidation
    fullName: SuperOffice.WebApi.Data.CacheInvalidation
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync
  isExternal: true
  name: GetEntityCountsForCurrentUserAsync
  nameWithType: IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForCurrentUserAsync
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.EntityCounts[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.EntityCounts[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<EntityCounts[]>
  nameWithType: Task<EntityCounts[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.EntityCounts[]>
  nameWithType.vb: Task(Of EntityCounts())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.EntityCounts())
  name.vb: Task(Of EntityCounts())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.EntityCounts
    name: EntityCounts
    nameWithType: EntityCounts
    fullName: SuperOffice.WebApi.Data.EntityCounts
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.EntityCounts
    name: EntityCounts
    nameWithType: EntityCounts
    fullName: SuperOffice.WebApi.Data.EntityCounts
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync
  isExternal: true
  name: GetEntityCountsForAllUsersAsync
  nameWithType: IDiagnosticsAgent.GetEntityCountsForAllUsersAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetEntityCountsForAllUsersAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync
  isExternal: true
  name: LogViewStateAsync
  nameWithType: IDiagnosticsAgent.LogViewStateAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.LogViewStateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync
  isExternal: true
  name: ChangeLogSettingsAsync
  nameWithType: IDiagnosticsAgent.ChangeLogSettingsAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ChangeLogSettingsAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync
  isExternal: true
  name: CollectDataAdditionsAsync
  nameWithType: IDiagnosticsAgent.CollectDataAdditionsAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectDataAdditionsAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync
  isExternal: true
  name: CollectWinUsageAsync
  nameWithType: IDiagnosticsAgent.CollectWinUsageAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWinUsageAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync
  isExternal: true
  name: CollectWebUsageAsync
  nameWithType: IDiagnosticsAgent.CollectWebUsageAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectWebUsageAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync
  isExternal: true
  name: CollectTableSizesAsync
  nameWithType: IDiagnosticsAgent.CollectTableSizesAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.CollectTableSizesAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync
  isExternal: true
  name: ResyncUsersAsync
  nameWithType: IDiagnosticsAgent.ResyncUsersAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.ResyncUsersAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync
  isExternal: true
  name: SendSystemMessageAsync
  nameWithType: IDiagnosticsAgent.SendSystemMessageAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.SendSystemMessageAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: SuperOffice.WebApi.Data.SystemMessageType
  commentId: T:SuperOffice.WebApi.Data.SystemMessageType
  parent: SuperOffice.WebApi.Data
  isExternal: true
  name: SystemMessageType
  nameWithType: SystemMessageType
  fullName: SuperOffice.WebApi.Data.SystemMessageType
- uid: SuperOffice.WebApi.Data
  commentId: N:SuperOffice.WebApi.Data
  isExternal: true
  name: SuperOffice.WebApi.Data
  nameWithType: SuperOffice.WebApi.Data
  fullName: SuperOffice.WebApi.Data
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync
  isExternal: true
  name: RemoveSystemMessageAsync
  nameWithType: IDiagnosticsAgent.RemoveSystemMessageAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync
  isExternal: true
  name: RemoveSystemMessageForAssociateAsync
  nameWithType: IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveSystemMessageForAssociateAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync
  isExternal: true
  name: GetSystemMessagesAsync
  nameWithType: IDiagnosticsAgent.GetSystemMessagesAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetSystemMessagesAsync
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.SystemMessage[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.SystemMessage[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<SystemMessage[]>
  nameWithType: Task<SystemMessage[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.SystemMessage[]>
  nameWithType.vb: Task(Of SystemMessage())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.SystemMessage())
  name.vb: Task(Of SystemMessage())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.SystemMessage
    name: SystemMessage
    nameWithType: SystemMessage
    fullName: SuperOffice.WebApi.Data.SystemMessage
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.SystemMessage
    name: SystemMessage
    nameWithType: SystemMessage
    fullName: SuperOffice.WebApi.Data.SystemMessage
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync
  isExternal: true
  name: RemoveExpiredSystemMessagesAsync
  nameWithType: IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.RemoveExpiredSystemMessagesAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync
  isExternal: true
  name: PerformTasksAfterUpgradeAsync
  nameWithType: IDiagnosticsAgent.PerformTasksAfterUpgradeAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.PerformTasksAfterUpgradeAsync
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync
  isExternal: true
  name: AddWebAppUsageAsync
  nameWithType: IDiagnosticsAgent.AddWebAppUsageAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.AddWebAppUsageAsync
- uid: SuperOffice.WebApi.Data.WebAppUsage[]
  isExternal: true
  name: WebAppUsage[]
  nameWithType: WebAppUsage[]
  fullName: SuperOffice.WebApi.Data.WebAppUsage[]
  nameWithType.vb: WebAppUsage()
  fullName.vb: SuperOffice.WebApi.Data.WebAppUsage()
  name.vb: WebAppUsage()
  spec.csharp:
  - uid: SuperOffice.WebApi.Data.WebAppUsage
    name: WebAppUsage
    nameWithType: WebAppUsage
    fullName: SuperOffice.WebApi.Data.WebAppUsage
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SuperOffice.WebApi.Data.WebAppUsage
    name: WebAppUsage
    nameWithType: WebAppUsage
    fullName: SuperOffice.WebApi.Data.WebAppUsage
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync
  isExternal: true
  name: WebAppUsageExistsInPeriodAsync
  nameWithType: IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.WebAppUsageExistsInPeriodAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync
  isExternal: true
  name: GetWebAppUsagesForPeriodAsync
  nameWithType: IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync
  fullName: SuperOffice.WebApi.Agents.IDiagnosticsAgent.GetWebAppUsagesForPeriodAsync
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.WebAppUsage[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.WebAppUsage[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<WebAppUsage[]>
  nameWithType: Task<WebAppUsage[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.WebAppUsage[]>
  nameWithType.vb: Task(Of WebAppUsage())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.WebAppUsage())
  name.vb: Task(Of WebAppUsage())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.WebAppUsage
    name: WebAppUsage
    nameWithType: WebAppUsage
    fullName: SuperOffice.WebApi.Data.WebAppUsage
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.WebAppUsage
    name: WebAppUsage
    nameWithType: WebAppUsage
    fullName: SuperOffice.WebApi.Data.WebAppUsage
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
