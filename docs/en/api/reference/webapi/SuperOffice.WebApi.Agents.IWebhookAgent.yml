### YamlMime:ManagedReference
items:
- uid: SuperOffice.WebApi.Agents.IWebhookAgent
  commentId: T:SuperOffice.WebApi.Agents.IWebhookAgent
  id: IWebhookAgent
  parent: SuperOffice.WebApi.Agents
  children:
  - SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync(SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync(System.String,System.String,SuperOffice.WebApi.Data.WebhookState,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringObjectDictionary,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  langs:
  - csharp
  - vb
  name: IWebhookAgent
  nameWithType: IWebhookAgent
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent
  type: Interface
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nWebhook definitions - webhooks signal other systems about events inside NetServer\n<p></p>\n<strong>Online Restricted:</strong> This agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: 'public interface IWebhookAgent : IDisposable'
    content.vb: >-
      Public Interface IWebhookAgent
          Inherits IDisposable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync(SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync(SuperOffice.WebApi.RequestOptions)
  id: CreateDefaultWebhookAsync(SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultWebhookAsync(RequestOptions)
  nameWithType: IWebhookAgent.CreateDefaultWebhookAsync(RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync(SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nSet default values into a new Webhook.\nNetServer calculates default values on the entity, which is required when creating/storing a new instance\n"
  syntax:
    content: Task<Webhook> CreateDefaultWebhookAsync(RequestOptions requestOptions = null)
    parameters:
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook}
      description: A blank Webhook
    content.vb: Function CreateDefaultWebhookAsync(requestOptions As RequestOptions = Nothing) As Task(Of Webhook)
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  id: SaveWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: SaveWebhookAsync(Webhook, RequestOptions)
  nameWithType: IWebhookAgent.SaveWebhookAsync(Webhook, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync(SuperOffice.WebApi.Data.Webhook, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nUpdates the existing Webhook or creates a new Webhook if the id parameter is 0. \n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task<Webhook> SaveWebhookAsync(Webhook webhook, RequestOptions requestOptions = null)
    parameters:
    - id: webhook
      type: SuperOffice.WebApi.Data.Webhook
      description: The Webhook that is saved.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook}
      description: New or updated Webhook
    content.vb: Function SaveWebhookAsync(webhook As Webhook, requestOptions As RequestOptions = Nothing) As Task(Of Webhook)
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  id: DeleteWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: DeleteWebhookAsync(Int32, RequestOptions)
  nameWithType: IWebhookAgent.DeleteWebhookAsync(Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync(System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nDeletes the Webhook\n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task DeleteWebhookAsync(int webhookId, RequestOptions requestOptions = null)
    parameters:
    - id: webhookId
      type: System.Int32
      description: The identity of the Webhook
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteWebhookAsync(webhookId As Integer, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  id: GetWebhookAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(Int32, RequestOptions)
  nameWithType: IWebhookAgent.GetWebhookAsync(Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync(System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nGets a specific Webhook object.                        \n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task<Webhook> GetWebhookAsync(int webhookId, RequestOptions requestOptions = null)
    parameters:
    - id: webhookId
      type: System.Int32
      description: The identifier of the Webhook object
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook}
      description: Webhook
    content.vb: Function GetWebhookAsync(webhookId As Integer, requestOptions As RequestOptions = Nothing) As Task(Of Webhook)
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync(System.String,System.String,SuperOffice.WebApi.Data.WebhookState,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync(System.String,System.String,SuperOffice.WebApi.Data.WebhookState,SuperOffice.WebApi.RequestOptions)
  id: GetAllWebhooksAsync(System.String,System.String,SuperOffice.WebApi.Data.WebhookState,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: GetAllWebhooksAsync(String, String, WebhookState, RequestOptions)
  nameWithType: IWebhookAgent.GetAllWebhooksAsync(String, String, WebhookState, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync(System.String, System.String, SuperOffice.WebApi.Data.WebhookState, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nReturns all webhooks, according to filter criteria\n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task<Webhook[]> GetAllWebhooksAsync(string nameFilter, string eventFilter, WebhookState statusFilter, RequestOptions requestOptions = null)
    parameters:
    - id: nameFilter
      type: System.String
      description: Only return hooks with this name. Default NULL = no filter
    - id: eventFilter
      type: System.String
      description: Only return hooks responding to this event name. Default NULL = no filter
    - id: statusFilter
      type: SuperOffice.WebApi.Data.WebhookState
      description: Only return hooks with this status. Default Unknown = no filter, returns all.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook[]}
      description: Array of all webhooks, filtered according to given criteria.
    content.vb: Function GetAllWebhooksAsync(nameFilter As String, eventFilter As String, statusFilter As WebhookState, requestOptions As RequestOptions = Nothing) As Task(Of Webhook())
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  id: TestWebhookAsync(SuperOffice.WebApi.Data.Webhook,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: TestWebhookAsync(Webhook, RequestOptions)
  nameWithType: IWebhookAgent.TestWebhookAsync(Webhook, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync(SuperOffice.WebApi.Data.Webhook, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nPings a webhook with a &apos;test&apos; event, returns SUCCESS(true) or FAILURE(false) + the response from the webhook target.\n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task<WebhookResult> TestWebhookAsync(Webhook webhook, RequestOptions requestOptions = null)
    parameters:
    - id: webhook
      type: SuperOffice.WebApi.Data.Webhook
      description: Webhook definition to ping. Must contain a valid TargetUrl.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.WebhookResult}
      description: Result of calling webhook. Sucess=true/false + Error message
    content.vb: Function TestWebhookAsync(webhook As Webhook, requestOptions As RequestOptions = Nothing) As Task(Of WebhookResult)
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringObjectDictionary,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringObjectDictionary,SuperOffice.WebApi.RequestOptions)
  id: SignalEventAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringObjectDictionary,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: SignalEventAsync(String, Int32, StringObjectDictionary, RequestOptions)
  nameWithType: IWebhookAgent.SignalEventAsync(String, Int32, StringObjectDictionary, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync(System.String, System.Int32, SuperOffice.WebApi.Data.StringObjectDictionary, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nSignal webhooks that an event has occurred. All webhooks listening for the event will be notified.\n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task SignalEventAsync(string eventName, int primaryKey, StringObjectDictionary data, RequestOptions requestOptions = null)
    parameters:
    - id: eventName
      type: System.String
      description: 'Name of event to fire. &apos;entity.verb&apos; For example: &apos;window.closed&apos;, &apos;button.clicked&apos;.'
    - id: primaryKey
      type: System.Int32
      description: (Optional) Id of entity that is firing event. Can be 0 if not used.
    - id: data
      type: SuperOffice.WebApi.Data.StringObjectDictionary
      description: 'Event data. Not all the data values may be posted to the webhook, depending in webhook type: { &apos;windowName&apos;: &apos;foo&apos;, &apos;widgets&apos;: 123 }'
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
      description: This method has no return value
    content.vb: Function SignalEventAsync(eventName As String, primaryKey As Integer, data As StringObjectDictionary, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync*
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  id: GetLastErrorAsync(System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IWebhookAgent
  langs:
  - csharp
  - vb
  name: GetLastErrorAsync(Int32, RequestOptions)
  nameWithType: IWebhookAgent.GetLastErrorAsync(Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync(System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nReturn the most recent error message received when calling this webhook.\n<p></p>\n<strong>Online Restricted:</strong> The Webhook agent is not available in Online by default. Access must be requested specifically when app is registered.\n"
  syntax:
    content: Task<string> GetLastErrorAsync(int webhookId, RequestOptions requestOptions = null)
    parameters:
    - id: webhookId
      type: System.Int32
      description: Webhook to get error message for.
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Error message, or empty string if no errors received
    content.vb: Function GetLastErrorAsync(webhookId As Integer, requestOptions As RequestOptions = Nothing) As Task(Of String)
  overload: SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync*
references:
- uid: SuperOffice.WebApi.Agents
  commentId: N:SuperOffice.WebApi.Agents
  isExternal: true
  name: SuperOffice.WebApi.Agents
  nameWithType: SuperOffice.WebApi.Agents
  fullName: SuperOffice.WebApi.Agents
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync
  isExternal: true
  name: CreateDefaultWebhookAsync
  nameWithType: IWebhookAgent.CreateDefaultWebhookAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.CreateDefaultWebhookAsync
- uid: SuperOffice.WebApi.RequestOptions
  commentId: T:SuperOffice.WebApi.RequestOptions
  parent: SuperOffice.WebApi
  isExternal: true
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: SuperOffice.WebApi.RequestOptions
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Webhook>
  nameWithType: Task<Webhook>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.Webhook>
  nameWithType.vb: Task(Of Webhook)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.Webhook)
  name.vb: Task(Of Webhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.WebApi.Data.Webhook
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.WebApi.Data.Webhook
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi
  commentId: N:SuperOffice.WebApi
  isExternal: true
  name: SuperOffice.WebApi
  nameWithType: SuperOffice.WebApi
  fullName: SuperOffice.WebApi
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync
  isExternal: true
  name: SaveWebhookAsync
  nameWithType: IWebhookAgent.SaveWebhookAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.SaveWebhookAsync
- uid: SuperOffice.WebApi.Data.Webhook
  commentId: T:SuperOffice.WebApi.Data.Webhook
  parent: SuperOffice.WebApi.Data
  isExternal: true
  name: Webhook
  nameWithType: Webhook
  fullName: SuperOffice.WebApi.Data.Webhook
- uid: SuperOffice.WebApi.Data
  commentId: N:SuperOffice.WebApi.Data
  isExternal: true
  name: SuperOffice.WebApi.Data
  nameWithType: SuperOffice.WebApi.Data
  fullName: SuperOffice.WebApi.Data
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync
  isExternal: true
  name: DeleteWebhookAsync
  nameWithType: IWebhookAgent.DeleteWebhookAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.DeleteWebhookAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync
  isExternal: true
  name: GetWebhookAsync
  nameWithType: IWebhookAgent.GetWebhookAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.GetWebhookAsync
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync
  isExternal: true
  name: GetAllWebhooksAsync
  nameWithType: IWebhookAgent.GetAllWebhooksAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.GetAllWebhooksAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.WebApi.Data.WebhookState
  commentId: T:SuperOffice.WebApi.Data.WebhookState
  parent: SuperOffice.WebApi.Data
  isExternal: true
  name: WebhookState
  nameWithType: WebhookState
  fullName: SuperOffice.WebApi.Data.WebhookState
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook[]}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.Webhook[]}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Webhook[]>
  nameWithType: Task<Webhook[]>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.Webhook[]>
  nameWithType.vb: Task(Of Webhook())
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.Webhook())
  name.vb: Task(Of Webhook())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.WebApi.Data.Webhook
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.Webhook
    name: Webhook
    nameWithType: Webhook
    fullName: SuperOffice.WebApi.Data.Webhook
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync
  isExternal: true
  name: TestWebhookAsync
  nameWithType: IWebhookAgent.TestWebhookAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.TestWebhookAsync
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.WebhookResult}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.WebhookResult}'
  definition: System.Threading.Tasks.Task`1
  name: Task<WebhookResult>
  nameWithType: Task<WebhookResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.WebhookResult>
  nameWithType.vb: Task(Of WebhookResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.WebhookResult)
  name.vb: Task(Of WebhookResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.WebhookResult
    name: WebhookResult
    nameWithType: WebhookResult
    fullName: SuperOffice.WebApi.Data.WebhookResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.WebhookResult
    name: WebhookResult
    nameWithType: WebhookResult
    fullName: SuperOffice.WebApi.Data.WebhookResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync
  isExternal: true
  name: SignalEventAsync
  nameWithType: IWebhookAgent.SignalEventAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.SignalEventAsync
- uid: SuperOffice.WebApi.Data.StringObjectDictionary
  commentId: T:SuperOffice.WebApi.Data.StringObjectDictionary
  parent: SuperOffice.WebApi.Data
  isExternal: true
  name: StringObjectDictionary
  nameWithType: StringObjectDictionary
  fullName: SuperOffice.WebApi.Data.StringObjectDictionary
- uid: SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync
  isExternal: true
  name: GetLastErrorAsync
  nameWithType: IWebhookAgent.GetLastErrorAsync
  fullName: SuperOffice.WebApi.Agents.IWebhookAgent.GetLastErrorAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
