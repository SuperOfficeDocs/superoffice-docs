### YamlMime:ManagedReference
items:
- uid: SuperOffice.WebApi.AuthorizationUserToken
  commentId: T:SuperOffice.WebApi.AuthorizationUserToken
  id: AuthorizationUserToken
  parent: SuperOffice.WebApi
  children:
  - SuperOffice.WebApi.AuthorizationUserToken.#ctor(System.String,System.String,System.String)
  - SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization
  - SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization
  langs:
  - csharp
  - vb
  name: AuthorizationUserToken
  nameWithType: AuthorizationUserToken
  fullName: SuperOffice.WebApi.AuthorizationUserToken
  type: Class
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi
  summary: "\nUsername and password are used to get an access token from given username and password\nIf the access token is invalidated, will try to authenticate with username and password to get a new access token.\nThe current access token can be retrieved with <pre><code>var (_, accessToken) = authInstance.GetAuthorization();</code></pre>\n"
  remarks: "\nIf the access token is omitted on construction, the first agent call will result in three requests:\n1. The first agent call which will fail\n2. A call to UserAgent.GetCurrentToken with the username and passwor to obtain an access token\n3. The original agent call which should now succeed with the new access token\n"
  syntax:
    content: 'public class AuthorizationUserToken : Object, IAuthorization'
    content.vb: >-
      Public Class AuthorizationUserToken
          Inherits Object
          Implements IAuthorization
  inheritance:
  - System.Object
  implements:
  - SuperOffice.WebApi.IAuthorization
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.WebApi.AuthorizationUserToken.#ctor(System.String,System.String,System.String)
  commentId: M:SuperOffice.WebApi.AuthorizationUserToken.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: SuperOffice.WebApi.AuthorizationUserToken
  langs:
  - csharp
  - vb
  name: AuthorizationUserToken(String, String, String)
  nameWithType: AuthorizationUserToken.AuthorizationUserToken(String, String, String)
  fullName: SuperOffice.WebApi.AuthorizationUserToken.AuthorizationUserToken(System.String, System.String, System.String)
  type: Constructor
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi
  summary: "\n\n"
  syntax:
    content: public AuthorizationUserToken(string userName, string password, string accessToken = null)
    parameters:
    - id: userName
      type: System.String
      description: Users name.
    - id: password
      type: System.String
      description: Users password.
    - id: accessToken
      type: System.String
      description: 'Optional access token. Should be a 8A: style bearer token, same as what UserAgent.GetCurrentToken will deliver'
    content.vb: Public Sub New(userName As String, password As String, accessToken As String = Nothing)
  overload: SuperOffice.WebApi.AuthorizationUserToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization
  commentId: M:SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization
  id: GetAuthorization
  parent: SuperOffice.WebApi.AuthorizationUserToken
  langs:
  - csharp
  - vb
  name: GetAuthorization()
  nameWithType: AuthorizationUserToken.GetAuthorization()
  fullName: SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization()
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi
  summary: "\n"
  syntax:
    content: public ValueTuple<string, string> GetAuthorization()
    return:
      type: System.ValueTuple{System.String,System.String}
    content.vb: Public Function GetAuthorization As ValueTuple(Of String, String)
  overload: SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization*
  implements:
  - SuperOffice.WebApi.IAuthorization.GetAuthorization
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization
  commentId: P:SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization
  id: RefreshAuthorization
  parent: SuperOffice.WebApi.AuthorizationUserToken
  langs:
  - csharp
  - vb
  name: RefreshAuthorization
  nameWithType: AuthorizationUserToken.RefreshAuthorization
  fullName: SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization
  type: Property
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi
  summary: "\nTry to refresh this <xref href=\"SuperOffice.WebApi.IAuthorization\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  syntax:
    content: public Func<ReAuthorizationArgs, IAuthorization> RefreshAuthorization { get; set; }
    parameters: []
    return:
      type: System.Func{SuperOffice.WebApi.ReAuthorizationArgs,SuperOffice.WebApi.IAuthorization}
    content.vb: Public Property RefreshAuthorization As Func(Of ReAuthorizationArgs, IAuthorization)
  overload: SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization*
  implements:
  - SuperOffice.WebApi.IAuthorization.RefreshAuthorization
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SuperOffice.WebApi
  commentId: N:SuperOffice.WebApi
  isExternal: true
  name: SuperOffice.WebApi
  nameWithType: SuperOffice.WebApi
  fullName: SuperOffice.WebApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.WebApi.IAuthorization
  commentId: T:SuperOffice.WebApi.IAuthorization
  parent: SuperOffice.WebApi
  isExternal: true
  name: IAuthorization
  nameWithType: IAuthorization
  fullName: SuperOffice.WebApi.IAuthorization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.WebApi.AuthorizationUserToken.#ctor*
  commentId: Overload:SuperOffice.WebApi.AuthorizationUserToken.#ctor
  isExternal: true
  name: AuthorizationUserToken
  nameWithType: AuthorizationUserToken.AuthorizationUserToken
  fullName: SuperOffice.WebApi.AuthorizationUserToken.AuthorizationUserToken
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization*
  commentId: Overload:SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization
  isExternal: true
  name: GetAuthorization
  nameWithType: AuthorizationUserToken.GetAuthorization
  fullName: SuperOffice.WebApi.AuthorizationUserToken.GetAuthorization
- uid: SuperOffice.WebApi.IAuthorization.GetAuthorization
  commentId: M:SuperOffice.WebApi.IAuthorization.GetAuthorization
  parent: SuperOffice.WebApi.IAuthorization
  isExternal: true
  name: GetAuthorization()
  nameWithType: IAuthorization.GetAuthorization()
  fullName: SuperOffice.WebApi.IAuthorization.GetAuthorization()
  spec.csharp:
  - uid: SuperOffice.WebApi.IAuthorization.GetAuthorization
    name: GetAuthorization
    nameWithType: IAuthorization.GetAuthorization
    fullName: SuperOffice.WebApi.IAuthorization.GetAuthorization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.WebApi.IAuthorization.GetAuthorization
    name: GetAuthorization
    nameWithType: IAuthorization.GetAuthorization
    fullName: SuperOffice.WebApi.IAuthorization.GetAuthorization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.String,System.String}
  commentId: '!:System.ValueTuple{System.String,System.String}'
  definition: System.ValueTuple`2
  name: ValueTuple<String, String>
  nameWithType: ValueTuple<String, String>
  fullName: System.ValueTuple<System.String, System.String>
  nameWithType.vb: ValueTuple(Of String, String)
  fullName.vb: System.ValueTuple(Of System.String, System.String)
  name.vb: ValueTuple(Of String, String)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  isExternal: true
  name: ValueTuple<, >
  nameWithType: ValueTuple<, >
  fullName: System.ValueTuple<, >
  nameWithType.vb: ValueTuple(Of , )
  fullName.vb: System.ValueTuple(Of , )
  name.vb: ValueTuple(Of , )
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization*
  commentId: Overload:SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization
  isExternal: true
  name: RefreshAuthorization
  nameWithType: AuthorizationUserToken.RefreshAuthorization
  fullName: SuperOffice.WebApi.AuthorizationUserToken.RefreshAuthorization
- uid: SuperOffice.WebApi.IAuthorization.RefreshAuthorization
  commentId: P:SuperOffice.WebApi.IAuthorization.RefreshAuthorization
  parent: SuperOffice.WebApi.IAuthorization
  isExternal: true
  name: RefreshAuthorization
  nameWithType: IAuthorization.RefreshAuthorization
  fullName: SuperOffice.WebApi.IAuthorization.RefreshAuthorization
- uid: System.Func{SuperOffice.WebApi.ReAuthorizationArgs,SuperOffice.WebApi.IAuthorization}
  commentId: '!:System.Func{SuperOffice.WebApi.ReAuthorizationArgs,SuperOffice.WebApi.IAuthorization}'
  definition: System.Func`2
  name: Func<ReAuthorizationArgs, IAuthorization>
  nameWithType: Func<ReAuthorizationArgs, IAuthorization>
  fullName: System.Func<SuperOffice.WebApi.ReAuthorizationArgs, SuperOffice.WebApi.IAuthorization>
  nameWithType.vb: Func(Of ReAuthorizationArgs, IAuthorization)
  fullName.vb: System.Func(Of SuperOffice.WebApi.ReAuthorizationArgs, SuperOffice.WebApi.IAuthorization)
  name.vb: Func(Of ReAuthorizationArgs, IAuthorization)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.ReAuthorizationArgs
    name: ReAuthorizationArgs
    nameWithType: ReAuthorizationArgs
    fullName: SuperOffice.WebApi.ReAuthorizationArgs
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.WebApi.IAuthorization
    name: IAuthorization
    nameWithType: IAuthorization
    fullName: SuperOffice.WebApi.IAuthorization
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.ReAuthorizationArgs
    name: ReAuthorizationArgs
    nameWithType: ReAuthorizationArgs
    fullName: SuperOffice.WebApi.ReAuthorizationArgs
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.WebApi.IAuthorization
    name: IAuthorization
    nameWithType: IAuthorization
    fullName: SuperOffice.WebApi.IAuthorization
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
