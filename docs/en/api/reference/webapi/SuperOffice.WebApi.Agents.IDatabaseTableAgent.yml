### YamlMime:ManagedReference
items:
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  commentId: T:SuperOffice.WebApi.Agents.IDatabaseTableAgent
  id: IDatabaseTableAgent
  parent: SuperOffice.WebApi.Agents
  children:
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync(System.String,System.Int32[],SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync(System.String,System.String[],System.String[][],SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync(System.String,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  - SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync(System.String,System.String[],System.String[],System.String[][],SuperOffice.WebApi.Data.UpsertNomatchAction,System.Boolean,SuperOffice.WebApi.RequestOptions)
  langs:
  - csharp
  - vb
  name: IDatabaseTableAgent
  nameWithType: IDatabaseTableAgent
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  type: Interface
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nAgent used for CRUD operations on database tables. Read, add, update, delete rows in tables.\n"
  syntax:
    content: 'public interface IDatabaseTableAgent : IDisposable'
    content.vb: >-
      Public Interface IDatabaseTableAgent
          Inherits IDisposable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  id: ReadRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: ReadRowAsync(String, Int32, RequestOptions)
  nameWithType: IDatabaseTableAgent.ReadRowAsync(String, Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync(System.String, System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nRead a row from a table\n"
  syntax:
    content: Task<TableRecord> ReadRowAsync(string tableName, int id, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table to fetch; in the current release this must be an &apos;extratable&apos;. Use the database name, on the form y_aTable
    - id: id
      type: System.Int32
      description: The id of the row to fetch
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.TableRecord}
      description: The row from the table
    content.vb: Function ReadRowAsync(tableName As String, id As Integer, requestOptions As RequestOptions = Nothing) As Task(Of TableRecord)
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync*
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync(System.String,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync(System.String,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  id: InsertRowAsync(System.String,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: InsertRowAsync(String, StringDictionary, RequestOptions)
  nameWithType: IDatabaseTableAgent.InsertRowAsync(String, StringDictionary, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync(System.String, SuperOffice.WebApi.Data.StringDictionary, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nInsert a row into a table\n"
  syntax:
    content: Task<int> InsertRowAsync(string tableName, StringDictionary values, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table to insert into; in the current release this must be an &apos;extratable&apos;. Use the database name, on the form y_aTable
    - id: values
      type: SuperOffice.WebApi.Data.StringDictionary
      description: A StringDictionary with the values to insert. You do not need to specify all the values in the table. The omitted ones will get default values
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The id of the newly inserted row
    content.vb: Function InsertRowAsync(tableName As String, values As StringDictionary, requestOptions As RequestOptions = Nothing) As Task(Of Integer)
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync*
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  id: UpdateRowAsync(System.String,System.Int32,SuperOffice.WebApi.Data.StringDictionary,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: UpdateRowAsync(String, Int32, StringDictionary, RequestOptions)
  nameWithType: IDatabaseTableAgent.UpdateRowAsync(String, Int32, StringDictionary, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync(System.String, System.Int32, SuperOffice.WebApi.Data.StringDictionary, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nUpdate a row in a table\n"
  syntax:
    content: Task UpdateRowAsync(string tableName, int id, StringDictionary values, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table to update; in the current release this must be an &apos;extratable&apos;. Use the database name, on the form y_aTable
    - id: id
      type: System.Int32
      description: The id of the row to update
    - id: values
      type: SuperOffice.WebApi.Data.StringDictionary
      description: A StringDictionary with the values to update. You do not need to specify all the values in the table. The omitted ones will remain unchanged
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateRowAsync(tableName As String, id As Integer, values As StringDictionary, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync*
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  id: DeleteRowAsync(System.String,System.Int32,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: DeleteRowAsync(String, Int32, RequestOptions)
  nameWithType: IDatabaseTableAgent.DeleteRowAsync(String, Int32, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync(System.String, System.Int32, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nDelete a row from a table\n"
  syntax:
    content: Task DeleteRowAsync(string tableName, int id, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table to delete from; in the current release this must be an &apos;extratable&apos;. Use the database name, on the form y_aTable
    - id: id
      type: System.Int32
      description: The id of the row to delete
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteRowAsync(tableName As String, id As Integer, requestOptions As RequestOptions = Nothing) As Task
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync*
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync(System.String,System.String[],System.String[][],SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync(System.String,System.String[],System.String[][],SuperOffice.WebApi.RequestOptions)
  id: InsertAsync(System.String,System.String[],System.String[][],SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: InsertAsync(String, String[], String[][], RequestOptions)
  nameWithType: IDatabaseTableAgent.InsertAsync(String, String[], String[][], RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync(System.String, System.String[], System.String[][], SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nMass-insert rows, with or without primary keys specified. Works on physical tables with no special processing for udef etc.; traveltransactionlog and WebHooks are supported\n"
  syntax:
    content: Task<MassOperationResult> InsertAsync(string tableName, string[] columns, string[][] data, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table where rows should be inserted
    - id: columns
      type: System.String[]
      description: List of column names, in the same order as in the Data parameter
    - id: data
      type: System.String[][]
      description: Outer array = rows, inner = columns in specified order; use CultureDataFormatter to format values that aren&apos;t string or int
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.MassOperationResult}
      description: Summary of results
    content.vb: Function InsertAsync(tableName As String, columns As String(), data As String()(), requestOptions As RequestOptions = Nothing) As Task(Of MassOperationResult)
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync*
  nameWithType.vb: IDatabaseTableAgent.InsertAsync(String, String(), String()(), RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync(System.String, System.String(), System.String()(), SuperOffice.WebApi.RequestOptions)
  name.vb: InsertAsync(String, String(), String()(), RequestOptions)
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  id: TruncateAsync(System.String,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: TruncateAsync(String, RequestOptions)
  nameWithType: IDatabaseTableAgent.TruncateAsync(String, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync(System.String, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nDrop all rows in a table. This clearance is not individually logged in TravelTransactionlog or Webhook/script calls\n"
  syntax:
    content: Task<MassOperationResult> TruncateAsync(string tableName, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: Name of table to be truncated
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.MassOperationResult}
      description: Summary of results
    content.vb: Function TruncateAsync(tableName As String, requestOptions As RequestOptions = Nothing) As Task(Of MassOperationResult)
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync*
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync(System.String,System.String[],System.String[],System.String[][],SuperOffice.WebApi.Data.UpsertNomatchAction,System.Boolean,SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync(System.String,System.String[],System.String[],System.String[][],SuperOffice.WebApi.Data.UpsertNomatchAction,System.Boolean,SuperOffice.WebApi.RequestOptions)
  id: UpsertAsync(System.String,System.String[],System.String[],System.String[][],SuperOffice.WebApi.Data.UpsertNomatchAction,System.Boolean,SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: UpsertAsync(String, String[], String[], String[][], UpsertNomatchAction, Boolean, RequestOptions)
  nameWithType: IDatabaseTableAgent.UpsertAsync(String, String[], String[], String[][], UpsertNomatchAction, Boolean, RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync(System.String, System.String[], System.String[], System.String[][], SuperOffice.WebApi.Data.UpsertNomatchAction, System.Boolean, SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nInsert or update rows, optionally deleting/zeroing &apos;leftover&apos; rows. Special support for UDEF, as well as optional extensive information return. Traveltransactionlog and WebHooks are supported\n"
  syntax:
    content: Task<MassOperationResult> UpsertAsync(string tableName, string[] columns, string[] keys, string[][] data, UpsertNomatchAction nomatchAction, bool returnRowStatus, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table where rows should be inserted or updated
    - id: columns
      type: System.String[]
      description: List of column names, in the same order as in the data
    - id: keys
      type: System.String[]
      description: List of columns that are to be used as keys, to match any existing rows
    - id: data
      type: System.String[][]
      description: Outer array = row, inner = column in specified order; use CultureDataFormatter to format values
    - id: nomatchAction
      type: SuperOffice.WebApi.Data.UpsertNomatchAction
      description: Action to take on rows in the target table, that are not matched by any rows in the incoming data. Use the deletion options with care. NEVER use deletion if your Upsert is so large you need to divide it into multiple batches.
    - id: returnRowStatus
      type: System.Boolean
      description: If true, then the &apos;RowStatus&apos; member of the return carrier will be populated with a per-row status, for each incoming row
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.MassOperationResult}
      description: Summary of results
    content.vb: Function UpsertAsync(tableName As String, columns As String(), keys As String(), data As String()(), nomatchAction As UpsertNomatchAction, returnRowStatus As Boolean, requestOptions As RequestOptions = Nothing) As Task(Of MassOperationResult)
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync*
  nameWithType.vb: IDatabaseTableAgent.UpsertAsync(String, String(), String(), String()(), UpsertNomatchAction, Boolean, RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync(System.String, System.String(), System.String(), System.String()(), SuperOffice.WebApi.Data.UpsertNomatchAction, System.Boolean, SuperOffice.WebApi.RequestOptions)
  name.vb: UpsertAsync(String, String(), String(), String()(), UpsertNomatchAction, Boolean, RequestOptions)
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync(System.String,System.Int32[],SuperOffice.WebApi.RequestOptions)
  commentId: M:SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync(System.String,System.Int32[],SuperOffice.WebApi.RequestOptions)
  id: DeleteAsync(System.String,System.Int32[],SuperOffice.WebApi.RequestOptions)
  parent: SuperOffice.WebApi.Agents.IDatabaseTableAgent
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, Int32[], RequestOptions)
  nameWithType: IDatabaseTableAgent.DeleteAsync(String, Int32[], RequestOptions)
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync(System.String, System.Int32[], SuperOffice.WebApi.RequestOptions)
  type: Method
  source:
    path: SuperOffice.WebApi
    isExternal: true
  assemblies:
  - SuperOffice.WebApi
  namespace: SuperOffice.WebApi.Agents
  summary: "\nDelete rows, by primary key; traveltransactionlog and WebHooks are supported\n"
  syntax:
    content: Task<MassOperationResult> DeleteAsync(string tableName, int[] iDs, RequestOptions requestOptions = null)
    parameters:
    - id: tableName
      type: System.String
      description: The name of the table where rows should be deleted
    - id: iDs
      type: System.Int32[]
      description: Primary keys of the rows to be deleted
    - id: requestOptions
      type: SuperOffice.WebApi.RequestOptions
      description: 'Override language/culture codes on this request. '
    return:
      type: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.MassOperationResult}
      description: Summary of results
    content.vb: Function DeleteAsync(tableName As String, iDs As Integer(), requestOptions As RequestOptions = Nothing) As Task(Of MassOperationResult)
  overload: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync*
  nameWithType.vb: IDatabaseTableAgent.DeleteAsync(String, Int32(), RequestOptions)
  fullName.vb: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync(System.String, System.Int32(), SuperOffice.WebApi.RequestOptions)
  name.vb: DeleteAsync(String, Int32(), RequestOptions)
references:
- uid: SuperOffice.WebApi.Agents
  commentId: N:SuperOffice.WebApi.Agents
  isExternal: true
  name: SuperOffice.WebApi.Agents
  nameWithType: SuperOffice.WebApi.Agents
  fullName: SuperOffice.WebApi.Agents
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync
  isExternal: true
  name: ReadRowAsync
  nameWithType: IDatabaseTableAgent.ReadRowAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.ReadRowAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.WebApi.RequestOptions
  commentId: T:SuperOffice.WebApi.RequestOptions
  parent: SuperOffice.WebApi
  isExternal: true
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: SuperOffice.WebApi.RequestOptions
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.TableRecord}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.TableRecord}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TableRecord>
  nameWithType: Task<TableRecord>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.TableRecord>
  nameWithType.vb: Task(Of TableRecord)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.TableRecord)
  name.vb: Task(Of TableRecord)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.TableRecord
    name: TableRecord
    nameWithType: TableRecord
    fullName: SuperOffice.WebApi.Data.TableRecord
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.TableRecord
    name: TableRecord
    nameWithType: TableRecord
    fullName: SuperOffice.WebApi.Data.TableRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.WebApi
  commentId: N:SuperOffice.WebApi
  isExternal: true
  name: SuperOffice.WebApi
  nameWithType: SuperOffice.WebApi
  fullName: SuperOffice.WebApi
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync
  isExternal: true
  name: InsertRowAsync
  nameWithType: IDatabaseTableAgent.InsertRowAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertRowAsync
- uid: SuperOffice.WebApi.Data.StringDictionary
  commentId: T:SuperOffice.WebApi.Data.StringDictionary
  parent: SuperOffice.WebApi.Data
  isExternal: true
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: SuperOffice.WebApi.Data.StringDictionary
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: '!:System.Threading.Tasks.Task{System.Int32}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Data
  commentId: N:SuperOffice.WebApi.Data
  isExternal: true
  name: SuperOffice.WebApi.Data
  nameWithType: SuperOffice.WebApi.Data
  fullName: SuperOffice.WebApi.Data
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync
  isExternal: true
  name: UpdateRowAsync
  nameWithType: IDatabaseTableAgent.UpdateRowAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpdateRowAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync
  isExternal: true
  name: DeleteRowAsync
  nameWithType: IDatabaseTableAgent.DeleteRowAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteRowAsync
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync
  isExternal: true
  name: InsertAsync
  nameWithType: IDatabaseTableAgent.InsertAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.InsertAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String[][]
  isExternal: true
  name: String[][]
  nameWithType: String[][]
  fullName: System.String[][]
  nameWithType.vb: String()()
  fullName.vb: System.String()()
  name.vb: String()()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{SuperOffice.WebApi.Data.MassOperationResult}
  commentId: '!:System.Threading.Tasks.Task{SuperOffice.WebApi.Data.MassOperationResult}'
  definition: System.Threading.Tasks.Task`1
  name: Task<MassOperationResult>
  nameWithType: Task<MassOperationResult>
  fullName: System.Threading.Tasks.Task<SuperOffice.WebApi.Data.MassOperationResult>
  nameWithType.vb: Task(Of MassOperationResult)
  fullName.vb: System.Threading.Tasks.Task(Of SuperOffice.WebApi.Data.MassOperationResult)
  name.vb: Task(Of MassOperationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.WebApi.Data.MassOperationResult
    name: MassOperationResult
    nameWithType: MassOperationResult
    fullName: SuperOffice.WebApi.Data.MassOperationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.WebApi.Data.MassOperationResult
    name: MassOperationResult
    nameWithType: MassOperationResult
    fullName: SuperOffice.WebApi.Data.MassOperationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync
  isExternal: true
  name: TruncateAsync
  nameWithType: IDatabaseTableAgent.TruncateAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.TruncateAsync
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync
  isExternal: true
  name: UpsertAsync
  nameWithType: IDatabaseTableAgent.UpsertAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.UpsertAsync
- uid: SuperOffice.WebApi.Data.UpsertNomatchAction
  commentId: T:SuperOffice.WebApi.Data.UpsertNomatchAction
  parent: SuperOffice.WebApi.Data
  isExternal: true
  name: UpsertNomatchAction
  nameWithType: UpsertNomatchAction
  fullName: SuperOffice.WebApi.Data.UpsertNomatchAction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync*
  commentId: Overload:SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync
  isExternal: true
  name: DeleteAsync
  nameWithType: IDatabaseTableAgent.DeleteAsync
  fullName: SuperOffice.WebApi.Agents.IDatabaseTableAgent.DeleteAsync
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
